<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/home/runner/work/haxe/haxe/std/Any.hx">
		<from><icast><d/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="/home/runner/work/haxe/haxe/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="37" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<toString get="inline" set="null" line="40" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/home/runner/work/haxe/haxe/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="37" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<toString get="inline" set="null" line="40" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</toString>
	</class>
	<class path="Array" params="T" file="/home/runner/work/haxe/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<contains public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether `this` Array contains `x`.

		If `x` is found by checking standard equality, the function returns `true`, otherwise
		the function returns `false`.</haxe_doc>
		</contains>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="280">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="287">
			<f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array indices and values.</haxe_doc>
		</keyValueIterator>
		<map public="1" params="S" get="inline" set="null" line="298">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="316">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="/home/runner/work/haxe/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/home/runner/work/haxe/haxe/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.

		If `s` does not match these formats, the result is unspecified.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
	</class>
	<class path="DateTools" params="" file="/home/runner/work/haxe/haxe/std/DateTools.hx">
		<DAY_SHORT_NAMES expr="[&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;]" line="35" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]</e></m></meta>
		</DAY_SHORT_NAMES>
		<DAY_NAMES expr="[&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;]" line="36" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]</e></m></meta>
		</DAY_NAMES>
		<MONTH_SHORT_NAMES expr="[&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]" line="37" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]</e></m></meta>
		</MONTH_SHORT_NAMES>
		<MONTH_NAMES expr="[&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]" line="40" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]</e></m></meta>
		</MONTH_NAMES>
		<__format_get set="method" line="44" static="1"><f a="d:e">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format_get>
		<__format set="method" line="105" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="144" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.

		```haxe
		var t = DateTools.format(Date.now(), "%Y-%m-%d_%H:%M:%S");
		// 2016-07-08_14:44:05

		var t = DateTools.format(Date.now(), "%r");
		// 02:44:05 PM

		var t = DateTools.format(Date.now(), "%T");
		// 14:44:05

		var t = DateTools.format(Date.now(), "%F");
		// 2016-07-08
		```</haxe_doc>
		</format>
		<delta public="1" get="inline" set="null" line="160" static="1">
			<f a="d:t">
				<c path="Date"/>
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns the result of adding timestamp `t` to Date `d`.

		This is a convenience function for calling
		`Date.fromTime(d.getTime() + t)`.</haxe_doc>
		</delta>
		<DAYS_OF_MONTH expr="[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]" line="164" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</e></m></meta>
		</DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="171" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in the month of Date `d`.

		This method handles leap years.</haxe_doc>
		</getMonthDays>
		<seconds public="1" get="inline" set="null" line="185" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of seconds to a timestamp.</haxe_doc>
		</seconds>
		<minutes public="1" get="inline" set="null" line="192" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of minutes to a timestamp.</haxe_doc>
		</minutes>
		<hours public="1" get="inline" set="null" line="199" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of hours to a timestamp.</haxe_doc>
		</hours>
		<days public="1" get="inline" set="null" line="206" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of days to a timestamp.</haxe_doc>
		</days>
		<parse public="1" set="method" line="213" static="1">
			<f a="t">
				<x path="Float"/>
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
			</f>
			<haxe_doc>Separate a date-time into several components</haxe_doc>
		</parse>
		<make public="1" set="method" line="235" static="1">
			<f a="o">
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
				<x path="Float"/>
			</f>
			<haxe_doc>Build a date-time from several components</haxe_doc>
		</make>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="EReg" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/EReg.hx" extern="1">
		<escape public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Escape the string `s` for use as a part of regular expression.

		If `s` is null, the result is unspecified.</haxe_doc>
		</escape>
		<match public="1" set="method">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, the result is unspecified.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<replace public="1" set="method">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Enum" params="T" file="/home/runner/work/haxe/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/home/runner/work/haxe/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/home/runner/work/haxe/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><match public="1" set="method" line="58" static="1">
	<f a="this:pattern">
		<x path="EnumValue"/>
		<d/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
</match></class></impl>
	</abstract>
	<class path="_EnumValue.EnumValue_Impl_" params="" file="/home/runner/work/haxe/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><match public="1" set="method" line="58" static="1">
	<f a="this:pattern">
		<x path="EnumValue"/>
		<d/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
</match></class>
	<class path="IntIterator" params="" file="/home/runner/work/haxe/haxe/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="53">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="62">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="45">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</class>
	<class path="Lambda" params="" file="/home/runner/work/haxe/haxe/std/Lambda.hx">
		<array public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="57" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="haxe.ds.List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" get="inline" set="null" line="69" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="item">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="Array"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `it`.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" get="inline" set="null" line="78" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a="index:item">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="Array"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<flatten public="1" params="A" get="inline" set="null" line="87" static="1">
			<f a="it">
				<t path="Iterable"><t path="Iterable"><c path="flatten.A"/></t></t>
				<c path="Array"><c path="flatten.A"/></c>
			</f>
			<haxe_doc>Concatenate a list of iterables.
		The order of elements is preserved.</haxe_doc>
		</flatten>
		<flatMap public="1" params="A:B" get="inline" set="null" line="96" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="flatMap.A"/></t>
				<f a="item">
					<c path="flatMap.A"/>
					<t path="Iterable"><c path="flatMap.B"/></t>
				</f>
				<c path="Array"><c path="flatMap.B"/></c>
			</f>
			<haxe_doc>A composition of map and flatten.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</flatMap>
		<has public="1" params="A" set="method" line="108" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="item">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.

		This function returns true as soon as an element is found for which a
		call to `f` returns true.

		If no such element is found, the result is false.

		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="144" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="item">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.

		This function returns false as soon as an element is found for which a
		call to `f` returns false.

		If no such element is found, the result is true.

		In particular, this function always returns true if `it` is empty.

		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="156" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="item">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.

		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="167" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="item">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a Array containing those elements of `it` for which `f` returned
		true.
		If `it` is empty, the result is the empty Array even if `f` is null.
		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="183" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a="item:result">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.

		If `it` has no elements, the result is `first`.

		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<foldi public="1" params="A:B" set="method" line="194" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="foldi.A"/></t>
				<f a="item:result:index">
					<c path="foldi.A"/>
					<c path="foldi.B"/>
					<x path="Int"/>
					<c path="foldi.B"/>
				</f>
				<c path="foldi.B"/>
				<c path="foldi.B"/>
			</f>
			<haxe_doc>Similar to fold, but also passes the index of each element to `f`.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</foldi>
		<count public="1" params="A" set="method" line="209" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="item">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="224" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="235" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<find public="1" params="T" set="method" line="255" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="item">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<x path="Null"><c path="find.T"/></x>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<findIndex public="1" params="T" set="method" line="273" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="findIndex.T"/></t>
				<f a="item">
					<c path="findIndex.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is -1.

		If `f` is null, the result is unspecified.</haxe_doc>
		</findIndex>
		<concat public="1" params="T" set="method" line="289" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="Array"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new Array containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
	</class>
	<typedef path="List" params="T" file="/home/runner/work/haxe/haxe/std/List.hx"><c path="haxe.ds.List"><c path="List.T"/></c></typedef>
	<typedef path="Map" params="K:V" file="/home/runner/work/haxe/haxe/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/home/runner/work/haxe/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/home/runner/work/haxe/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately `3.141592653589793`.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of `-1.0 / 0.0`.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of `1.0 / 0.0`.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		`NaN` stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: `Math.sqrt(-1)`.

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		- If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.
		- If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		- If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		`exp(1.0)` is approximately `2.718281828459`.

		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to `0.0`,
		and less than `1.0`.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is `Math.NaN`.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, `null`, `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="Reflect" params="" file="/home/runner/work/haxe/haxe/std/Reflect.hx" extern="1">
		<hasField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.</haxe_doc>
		</field>
		<setField public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method `func` with the given arguments `args`.

		The object `o` is ignored in most cases. It serves as the `this`-context in the following
		situations:

		* (neko) Allows switching the context to `o` in all cases.
		* (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
		* (js, lua) Require the `o` argument if `func` does not, but should have a context.
			This can occur by accessing a function field natively, e.g. through `Reflect.field`
			or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
			ignored like on other targets.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" static="1">
			<f a="o">
				<x path="Null"><c path="copy.T"/></x>
				<x path="Null"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is `null`.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method">
	<f a="f">
		<f a="">
			<c path="Array"><d/></c>
			<x path="Void"/>
		</f>
		<d/>
	</f>
	<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
</makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
	</class>
	<class path="Std" params="" file="/home/runner/work/haxe/haxe/std/Std.hx" extern="1">
		<is public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.is is deprecated. Use Std.isOfType instead."</e></m></meta>
			<haxe_doc>DEPRECATED. Use `Std.isOfType(v, t)` instead.

		Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<isOfType public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<downcast public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m></meta>
		</instance>
		<string public="1" set="method" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		`x` may optionally start with a + or - to denote a postive or negative value respectively.

		If the optional sign is followed 0x or 0X, hexadecimal notation is recognized where the following
		digits may contain 0-9 and A-F. Both the prefix and digits are case insensitive.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. Octal and binary
		notations are not supported.

		Parsing continues until an invalid character is detected, in which case the result up to
		that point is returned. Scientific notation is not supported. That is `Std.parseInt('10e2')` produces `10`.

		If `x` is `null`, the result is `null`.
		If `x` cannot be parsed as integer or is empty, the result is `null`.

		If `x` starts with a hexadecimal prefix which is not followed by at least one valid hexadecimal
		digit, the result is unspecified.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of `null`. Also, hexadecimal support is **not** specified.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.

		It may also end with `e` or `E` followed by optional minus or plus sign and a sequence of
		digits (defines exponent to base 10).</haxe_doc>
		</parseFloat>
		<random public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Void" params="" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="/home/runner/work/haxe/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Returns the position of the leftmost occurrence of `str` within `this` String.

		If `str` is the empty String `""`, then:
			* If `startIndex` is not specified or < 0, 0 is returned.
			* If `startIndex >= this.length`, `this.length` is returned.
			* Otherwise, `startIndex` is returned,

		Otherwise, if `startIndex` is not specified or < 0, it is treated as 0.

		If `startIndex >= this.length`, -1 is returned.

		Otherwise the search is performed within the substring of `this` String starting
		at `startIndex`. If `str` is found, the position of its first character in `this`
		String relative to position 0 is returned.

		If `str` cannot be found, -1 is returned.]]></haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="StringBuf" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/StringBuf.hx" extern="1">
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length set="method"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" set="method">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addChar public="1" set="method">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<addSub public="1" set="method">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.SysTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/SysTools.hx">
		<winMetaCharacters final="1" public="1" set="null" expr="[&quot; &quot;.code, &quot;(&quot;.code, &quot;)&quot;.code, &quot;%&quot;.code, &quot;!&quot;.code, &quot;^&quot;.code, &quot;\&quot;&quot;.code, &quot;&lt;&quot;.code, &quot;&gt;&quot;.code, &quot;&amp;&quot;.code, &quot;|&quot;.code, &quot;\n&quot;.code, &quot;\r&quot;.code, &quot;,&quot;.code, &quot;;&quot;.code]" line="9" static="1">
			<x path="haxe.ds.ReadOnlyArray"><x path="Int"/></x>
			<meta><m n=":value"><e><![CDATA[[" ".code, "(".code, ")".code, "%".code, "!".code, "^".code, "\"".code, "<".code, ">".code, "&".code, "|".code, "\n".code, "\r".code, ",".code, ";".code]]]></e></m></meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteUnixArg public="1" set="method" line="18" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<quoteWinArg public="1" set="method" line="46" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```haxe
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
	</class>
	<class path="StringTools" params="" file="/home/runner/work/haxe/haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="42" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="108" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="154" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="189" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: `htmlUnescape(htmlEscape(s)) == s`

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<contains public="1" get="inline" set="null" line="207" static="1">
			<f a="s:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `s` contains `value` and  `false` otherwise.

		When `value` is `null`, the result is unspecified.</haxe_doc>
		</contains>
		<startsWith public="1" set="method" line="222" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="245" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="274" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" get="inline" set="null" line="292" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" get="inline" set="null" line="313" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="331" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="351" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="376" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="398" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurrences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s` except the last one. If `by` is also the empty String `""`, `s`
		remains unchanged.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="415" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" set="method" line="457" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof()` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</fastCodeAt>
		<unsafeCodeAt public="1" set="method" line="494" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</unsafeCodeAt>
		<iterator public="1" get="inline" set="null" line="527" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringIterator"/>
			</f>
			<haxe_doc>Returns an iterator of the char codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringIteratorUnicode`.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="538" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIterator"/>
			</f>
			<haxe_doc>Returns an iterator of the char indexes and codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different of runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringKeyValueIteratorUnicode`.</haxe_doc>
		</keyValueIterator>
		<isEof public="1" get="inline" set="null" line="545" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Tells if `c` represents the end-of-file (EOF) character.</haxe_doc>
		</isEof>
		<quoteUnixArg public="1" set="method" line="566" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.quoteUnixArg() is deprecated. Use haxe.SysTools.quoteUnixArg() instead."</e></m>
			</meta>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<winMetaCharacters public="1" expr="cast haxe.SysTools.winMetaCharacters" line="575" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta>
				<m n=":value"><e>cast haxe.SysTools.winMetaCharacters</e></m>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.winMetaCharacters is deprecated. Use haxe.SysTools.winMetaCharacters instead."</e></m>
			</meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteWinArg public="1" set="method" line="592" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.quoteWinArg() is deprecated. Use haxe.SysTools.quoteWinArg() instead."</e></m>
			</meta>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```haxe
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="Sys" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/Sys.hx">
		<print public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output.</haxe_doc>
		</print>
		<println public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output, followed by a newline.
		On Windows, this function outputs a CRLF newline.
		LF newlines are printed on all other platforms.</haxe_doc>
		</println>
		<args public="1" set="method" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns all the arguments that were passed in the command line.
		This does not include the interpreter or the name of the program file.

		(java)(eval) On Windows, non-ASCII Unicode arguments will not work correctly.</haxe_doc>
		</args>
		<getEnv public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the given environment variable, or `null` if it
		doesn't exist.</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" static="1">
			<f a="s:v">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the given environment variable.

		If `v` is `null`, the environment variable is removed.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</putEnv>
		<environment public="1" set="method" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Returns a map of the current environment variables and their values
		as of the invocation of the function.

		(python) On Windows, the variable names are always in upper case.

		(cpp)(hl)(neko) On Windows, the variable names match the last capitalization used when modifying
		the variable if the variable has been modified, otherwise they match their capitalization at
		the start of the process.

		On Windows on remaining targets, variable name capitalization matches however they were capitalized
		at the start of the process or at the moment of their creation.</haxe_doc>
		</environment>
		<sleep public="1" set="method" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspends execution for the given length of time (in seconds).</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" static="1">
			<f a="loc">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Changes the current time locale, which will affect `DateTools.format` date formating.
		Returns `true` if the locale was successfully changed.</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Gets the current working directory (usually the one in which the program was started).</haxe_doc>
		</getCwd>
		<setCwd public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current working directory.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the type of the current system. Possible values are:
		 - `"Windows"`
		 - `"Linux"`
		 - `"BSD"`
		 - `"Mac"`</haxe_doc>
		</systemName>
		<_command set="method" static="1"><f a="cmd">
	<c path="String"/>
	<x path="Int"/>
</f></_command>
		<command public="1" set="method" line="52" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Runs the given command. The command output will be printed to the same output as the current process.
		The current process will block until the command terminates.
		The return value is the exit code of the command (usually `0` indicates no error).

		Command arguments can be passed in two ways:

		 1. Using `args` to pass command arguments. Each argument will be automatically quoted and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a full path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		Use the `sys.io.Process` API for more complex tasks, such as background processes, or providing input to the command.</haxe_doc>
		</command>
		<executablePath public="1" set="method" line="70" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the path to the current executable that we are running.</haxe_doc>
		</executablePath>
		<exit public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Exits the current process with the given exit code.

		(macro)(eval) Being invoked in a macro or eval context (e.g. with `-x` or `--run`) immediately terminates
		the compilation process, which also prevents the execution of any `--next` sections of compilation arguments.</haxe_doc>
		</exit>
		<time public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds).</haxe_doc>
		</time>
		<cpuTime public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds),
		but only accounts for the actual time spent running on the CPU for the current thread/process.</haxe_doc>
		</cpuTime>
		<programPath public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the absolute path to the current program file that we are running.
		Concretely, for an executable binary, it returns the path to the binary.
		For a script (e.g. a PHP file), it returns the path to the script.</haxe_doc>
		</programPath>
		<getChar public="1" set="method" static="1">
			<f a="echo">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a single input character from the standard input and returns it.
		Setting `echo` to `true` will also display the character on the output.</haxe_doc>
		</getChar>
		<stdin public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<haxe_doc>Returns the standard input of the process, from which user input can be read.
		Usually it will block until the user sends a full input line.
		See `getChar` for an alternative.</haxe_doc>
		</stdin>
		<stdout public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard output of the process, to which program output can be written.</haxe_doc>
		</stdout>
		<stderr public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard error of the process, to which program errors can be written.</haxe_doc>
		</stderr>
		<haxe_doc>This class provides access to various base functions of system platforms.
	Look in the `sys` package for more system APIs.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":require"><e>sys</e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Type" params="" file="/home/runner/work/haxe/haxe/std/Type.hx" extern="1">
		<getClass public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Null"><x path="Class"><c path="getClass.T"/></x></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`, including
		inherited fields.

		This only includes fields which are known at compile-time. In
		particular, using `getInstanceFields(getClass(obj))` will not include
		any fields which were added to `obj` at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="/home/runner/work/haxe/haxe/std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
		<haxe_doc>The different possible runtime types of a value.</haxe_doc>
	</enum>
	<abstract path="UInt" params="" file="/home/runner/work/haxe/haxe/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/home/runner/work/haxe/haxe/std/UInt.hx" private="1" module="UInt" final="1">
	<add get="inline" set="null" line="135" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<div get="inline" set="null" line="139" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</div>
	<mul get="inline" set="null" line="143" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</mul>
	<sub get="inline" set="null" line="147" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<gt get="inline" set="null" line="152" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gte get="inline" set="null" line="159" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="165" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="169" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<and get="inline" set="null" line="173" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
	</and>
	<or get="inline" set="null" line="177" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
	</or>
	<xor get="inline" set="null" line="181" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
	</xor>
	<shl get="inline" set="null" line="185" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
	</shl>
	<shr get="inline" set="null" line="189" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</shr>
	<ushr get="inline" set="null" line="193" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
	</ushr>
	<mod get="inline" set="null" line="197" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</mod>
	<addWithFloat get="inline" set="null" line="201" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addWithFloat>
	<mulWithFloat get="inline" set="null" line="205" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulWithFloat>
	<divFloat get="inline" set="null" line="209" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divFloat>
	<floatDiv get="inline" set="null" line="213" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</floatDiv>
	<subFloat get="inline" set="null" line="217" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subFloat>
	<floatSub get="inline" set="null" line="221" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</floatSub>
	<gtFloat get="inline" set="null" line="225" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtFloat>
	<equalsInt params="T" get="inline" set="null" line="229" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsInt>
	<notEqualsInt params="T" get="inline" set="null" line="233" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsInt>
	<equalsFloat params="T" get="inline" set="null" line="237" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsFloat>
	<notEqualsFloat params="T" get="inline" set="null" line="241" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsFloat>
	<gteFloat get="inline" set="null" line="245" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteFloat>
	<floatGt get="inline" set="null" line="249" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</floatGt>
	<floatGte get="inline" set="null" line="253" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</floatGte>
	<ltFloat get="inline" set="null" line="257" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltFloat>
	<lteFloat get="inline" set="null" line="261" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteFloat>
	<floatLt get="inline" set="null" line="265" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</floatLt>
	<floatLte get="inline" set="null" line="269" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</floatLte>
	<modFloat get="inline" set="null" line="273" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modFloat>
	<floatMod get="inline" set="null" line="277" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</floatMod>
	<negBits get="inline" set="null" line="281" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
	</negBits>
	<prefixIncrement get="inline" set="null" line="285" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>++A</e></m></meta>
	</prefixIncrement>
	<postfixIncrement get="inline" set="null" line="289" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</postfixIncrement>
	<prefixDecrement get="inline" set="null" line="293" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>--A</e></m></meta>
	</prefixDecrement>
	<postfixDecrement get="inline" set="null" line="297" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A--</e></m></meta>
	</postfixDecrement>
	<toString get="inline" set="null" line="302" static="1"><f a="this:?radix">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></toString>
	<toInt get="inline" set="null" line="306" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
	<toFloat get="inline" set="null" line="310" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
</class></impl>
	</abstract>
	<class path="_UInt.UInt_Impl_" params="" file="/home/runner/work/haxe/haxe/std/UInt.hx" private="1" module="UInt" final="1">
		<add get="inline" set="null" line="135" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<div get="inline" set="null" line="139" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</div>
		<mul get="inline" set="null" line="143" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</mul>
		<sub get="inline" set="null" line="147" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<gt get="inline" set="null" line="152" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gte get="inline" set="null" line="159" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="165" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="169" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<and get="inline" set="null" line="173" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		</and>
		<or get="inline" set="null" line="177" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
		</or>
		<xor get="inline" set="null" line="181" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
		</xor>
		<shl get="inline" set="null" line="185" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		</shl>
		<shr get="inline" set="null" line="189" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</shr>
		<ushr get="inline" set="null" line="193" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		</ushr>
		<mod get="inline" set="null" line="197" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</mod>
		<addWithFloat get="inline" set="null" line="201" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addWithFloat>
		<mulWithFloat get="inline" set="null" line="205" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulWithFloat>
		<divFloat get="inline" set="null" line="209" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divFloat>
		<floatDiv get="inline" set="null" line="213" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</floatDiv>
		<subFloat get="inline" set="null" line="217" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subFloat>
		<floatSub get="inline" set="null" line="221" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</floatSub>
		<gtFloat get="inline" set="null" line="225" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtFloat>
		<equalsInt params="T" get="inline" set="null" line="229" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsInt>
		<notEqualsInt params="T" get="inline" set="null" line="233" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsInt>
		<equalsFloat params="T" get="inline" set="null" line="237" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsFloat>
		<notEqualsFloat params="T" get="inline" set="null" line="241" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsFloat>
		<gteFloat get="inline" set="null" line="245" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteFloat>
		<floatGt get="inline" set="null" line="249" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</floatGt>
		<floatGte get="inline" set="null" line="253" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</floatGte>
		<ltFloat get="inline" set="null" line="257" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltFloat>
		<lteFloat get="inline" set="null" line="261" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteFloat>
		<floatLt get="inline" set="null" line="265" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</floatLt>
		<floatLte get="inline" set="null" line="269" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</floatLte>
		<modFloat get="inline" set="null" line="273" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modFloat>
		<floatMod get="inline" set="null" line="277" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</floatMod>
		<negBits get="inline" set="null" line="281" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
		</negBits>
		<prefixIncrement get="inline" set="null" line="285" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>++A</e></m></meta>
		</prefixIncrement>
		<postfixIncrement get="inline" set="null" line="289" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</postfixIncrement>
		<prefixDecrement get="inline" set="null" line="293" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>--A</e></m></meta>
		</prefixDecrement>
		<postfixDecrement get="inline" set="null" line="297" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A--</e></m></meta>
		</postfixDecrement>
		<toString get="inline" set="null" line="302" static="1"><f a="this:?radix">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></toString>
		<toInt get="inline" set="null" line="306" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
		<toFloat get="inline" set="null" line="310" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
	</class>
	<abstract path="UnicodeString" params="" file="/home/runner/work/haxe/haxe/std/UnicodeString.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>This abstract provides consistent cross-target unicode support for characters of any width.

	Due to differing internal representations of strings across targets, only the basic
	multilingual plane (BMP) is supported consistently by `String` class.

	This abstract provides API to consistently handle all characters even beyond BMP.

	@see https://haxe.org/manual/std-String-unicode.html</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":access"><e>StringTools</e></m>
		</meta>
		<impl><class path="_UnicodeString.UnicodeString_Impl_" params="" file="/home/runner/work/haxe/haxe/std/UnicodeString.hx" private="1" module="UnicodeString" final="1">
	<validate public="1" set="method" line="44" static="1">
		<f a="b:encoding">
			<c path="haxe.io.Bytes"/>
			<e path="haxe.io.Encoding"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Tells if `b` is a correctly encoded UTF8 byte sequence.</haxe_doc>
	</validate>
	<_new public="1" get="inline" set="null" line="119" static="1">
		<f a="string">
			<c path="String"/>
			<x path="UnicodeString"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates an instance of UnicodeString.</haxe_doc>
	</_new>
	<iterator public="1" get="inline" set="null" line="126" static="1">
		<f a="this">
			<c path="String"/>
			<c path="haxe.iterators.StringIteratorUnicode"/>
		</f>
		<haxe_doc>Returns an iterator of the unicode code points.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="133" static="1">
		<f a="this">
			<c path="String"/>
			<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
		</f>
		<haxe_doc>Returns an iterator of the code point indices and unicode code points.</haxe_doc>
	</keyValueIterator>
	<lt set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<lte set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<gt set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<gte set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<eq set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</eq>
	<neq set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</neq>
	<add set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</add>
	<assignAdd set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A += B</e></m>
		</meta>
	</assignAdd>
	<addString set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<c path="String"/>
			<x path="UnicodeString"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addString>
	<assignAddString set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<c path="String"/>
			<x path="UnicodeString"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A += B</e></m>
			<m n=":commutative"/>
		</meta>
	</assignAddString>
	<meta><m n=":access"><e>StringTools</e></m></meta>
</class></impl>
	</abstract>
	<class path="_UnicodeString.UnicodeString_Impl_" params="" file="/home/runner/work/haxe/haxe/std/UnicodeString.hx" private="1" module="UnicodeString" final="1">
		<validate public="1" set="method" line="44" static="1">
			<f a="b:encoding">
				<c path="haxe.io.Bytes"/>
				<e path="haxe.io.Encoding"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `b` is a correctly encoded UTF8 byte sequence.</haxe_doc>
		</validate>
		<_new public="1" get="inline" set="null" line="119" static="1">
			<f a="string">
				<c path="String"/>
				<x path="UnicodeString"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates an instance of UnicodeString.</haxe_doc>
		</_new>
		<iterator public="1" get="inline" set="null" line="126" static="1">
			<f a="this">
				<c path="String"/>
				<c path="haxe.iterators.StringIteratorUnicode"/>
			</f>
			<haxe_doc>Returns an iterator of the unicode code points.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="133" static="1">
			<f a="this">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
			</f>
			<haxe_doc>Returns an iterator of the code point indices and unicode code points.</haxe_doc>
		</keyValueIterator>
		<lt set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<lte set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<gt set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<gte set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<eq set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</eq>
		<neq set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</neq>
		<add set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</add>
		<assignAdd set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A += B</e></m>
			</meta>
		</assignAdd>
		<addString set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<c path="String"/>
				<x path="UnicodeString"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addString>
		<assignAddString set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<c path="String"/>
				<x path="UnicodeString"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A += B</e></m>
				<m n=":commutative"/>
			</meta>
		</assignAddString>
		<meta><m n=":access"><e>StringTools</e></m></meta>
	</class>
	<abstract path="XmlType" params="" file="/home/runner/work/haxe/haxe/std/Xml.hx" module="Xml">
		<this><x path="Int"/></this>
		<haxe_doc>Xml node types.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="_Xml.XmlType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/Xml.hx" private="1" module="Xml" final="1">
	<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML element type.</haxe_doc>
	</Element>
	<PCData public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents XML parsed character data type.</haxe_doc>
	</PCData>
	<CData public="1" get="inline" set="null" expr="cast 2" line="42" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents XML character data type.</haxe_doc>
	</CData>
	<Comment public="1" get="inline" set="null" expr="cast 3" line="47" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML comment type.</haxe_doc>
	</Comment>
	<DocType public="1" get="inline" set="null" expr="cast 4" line="52" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML doctype element type.</haxe_doc>
	</DocType>
	<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="57" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
	</ProcessingInstruction>
	<Document public="1" get="inline" set="null" expr="cast 6" line="62" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML document type.</haxe_doc>
	</Document>
	<toString public="1" set="method" line="64" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="_Xml.XmlType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/Xml.hx" private="1" module="Xml" final="1">
		<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML element type.</haxe_doc>
		</Element>
		<PCData public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" get="inline" set="null" expr="cast 2" line="42" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" get="inline" set="null" expr="cast 3" line="47" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" get="inline" set="null" expr="cast 4" line="52" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="57" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" get="inline" set="null" expr="cast 6" line="62" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML document type.</haxe_doc>
		</Document>
		<toString public="1" set="method" line="64" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="Xml" params="" file="/home/runner/work/haxe/haxe/std/Xml.hx">
		<Element public="1" set="null" expr="XmlType.Element" line="86" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Element</e></m></meta>
			<haxe_doc>XML element type.</haxe_doc>
		</Element>
		<PCData public="1" set="null" expr="XmlType.PCData" line="91" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.PCData</e></m></meta>
			<haxe_doc>XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" set="null" expr="XmlType.CData" line="96" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.CData</e></m></meta>
			<haxe_doc>XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" set="null" expr="XmlType.Comment" line="101" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Comment</e></m></meta>
			<haxe_doc>XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" expr="XmlType.DocType" line="106" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.DocType</e></m></meta>
			<haxe_doc>XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" expr="XmlType.ProcessingInstruction" line="111" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.ProcessingInstruction</e></m></meta>
			<haxe_doc>XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" expr="XmlType.Document" line="116" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Document</e></m></meta>
			<haxe_doc>XML document type.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="121" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parses the String into an Xml document.</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="182" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="191" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="200" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="209" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="218" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="227" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="236" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<x path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<parent public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be `null`, an Element or a Document.</haxe_doc>
		</parent>
		<children><c path="Array"><c path="Xml"/></c></children>
		<attributeMap><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></attributeMap>
		<get_nodeName get="inline" set="null" line="151"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeName get="inline" set="null" line="158"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeValue get="inline" set="null" line="165"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeValue get="inline" set="null" line="172"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<get public="1" set="method" line="244">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns `null` if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method" line="255">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<remove public="1" set="method" line="266">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="277">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="287">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an `Iterator` on all the attribute names.</haxe_doc>
		</attributes>
		<iterator public="1" get="inline" set="null" line="298">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="307">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="317">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<firstChild public="1" get="inline" set="null" line="329">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="337">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="353">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		A child node can only be inside one given parent node, which is indicated by the `parent` property.
		If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="366">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="381">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.
		A child node can only be inside one given parent node, which is indicated by the [parent] property.
		If the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</insertChild>
		<toString public="1" get="inline" set="null" line="393">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<ensureElementType get="inline" set="null" line="403"><f a=""><x path="Void"/></f></ensureElementType>
		<new set="method" line="397"><f a="nodeType">
	<x path="XmlType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Cross-platform Xml API.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
	</class>
	<abstract path="eval.NativeString" params="" file="/home/runner/work/haxe/haxe/std/eval/NativeString.hx">
		<from>
			<icast field="fromString"><c path="String"/></icast>
			<icast field="fromBytes"><c path="haxe.io.Bytes"/></icast>
		</from>
		<this><x path="eval.NativeString"/></this>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval._NativeString.NativeString_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/NativeString.hx" private="1" module="eval.NativeString" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>String length</haxe_doc>
	</length>
	<get_length set="method" static="1">
		<f a="this">
			<x path="eval.NativeString"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</get_length>
	<fromString public="1" set="method" static="1">
		<f a="s">
			<c path="String"/>
			<x path="eval.NativeString"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":from"/>
		</meta>
	</fromString>
	<fromBytes public="1" set="method" static="1">
		<f a="b">
			<c path="haxe.io.Bytes"/>
			<x path="eval.NativeString"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":from"/>
		</meta>
	</fromBytes>
	<char public="1" set="method" static="1">
		<f a="this:index">
			<x path="eval.NativeString"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Returns a character at the specified `index`.

		Throws an exception if `index` is outside of the string bounds.</haxe_doc>
	</char>
	<code public="1" set="method" static="1">
		<f a="this:index">
			<x path="eval.NativeString"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Returns a character code at the specified `index`.

		Throws an exception if `index` is outside of the string bounds.</haxe_doc>
	</code>
	<sub public="1" set="method" static="1">
		<f a="this:start:?length">
			<x path="eval.NativeString"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="eval.NativeString"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Returns a fresh string up to `length` characters long, containing the
		substring that starts at position `start`.

		If `length` is not specified the all characters from `start` to the end
		of this string are returned.

		Throws an exception if `index` is outside of the string bounds.</haxe_doc>
	</sub>
	<toString public="1" set="method" static="1">
		<f a="this">
			<x path="eval.NativeString"/>
			<c path="String"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</toString>
	<toBytes public="1" set="method" static="1">
		<f a="this">
			<x path="eval.NativeString"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</toBytes>
	<concat public="1" set="method" static="1">
		<f a="this:s">
			<x path="eval.NativeString"/>
			<x path="eval.NativeString"/>
			<x path="eval.NativeString"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</concat>
</class></impl>
	</abstract>
	<class path="eval._NativeString.NativeString_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/NativeString.hx" private="1" module="eval.NativeString" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>String length</haxe_doc>
		</length>
		<get_length set="method" static="1">
			<f a="this">
				<x path="eval.NativeString"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</get_length>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="eval.NativeString"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":from"/>
			</meta>
		</fromString>
		<fromBytes public="1" set="method" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<x path="eval.NativeString"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":from"/>
			</meta>
		</fromBytes>
		<char public="1" set="method" static="1">
			<f a="this:index">
				<x path="eval.NativeString"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Returns a character at the specified `index`.

		Throws an exception if `index` is outside of the string bounds.</haxe_doc>
		</char>
		<code public="1" set="method" static="1">
			<f a="this:index">
				<x path="eval.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Returns a character code at the specified `index`.

		Throws an exception if `index` is outside of the string bounds.</haxe_doc>
		</code>
		<sub public="1" set="method" static="1">
			<f a="this:start:?length">
				<x path="eval.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="eval.NativeString"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Returns a fresh string up to `length` characters long, containing the
		substring that starts at position `start`.

		If `length` is not specified the all characters from `start` to the end
		of this string are returned.

		Throws an exception if `index` is outside of the string bounds.</haxe_doc>
		</sub>
		<toString public="1" set="method" static="1">
			<f a="this">
				<x path="eval.NativeString"/>
				<c path="String"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</toString>
		<toBytes public="1" set="method" static="1">
			<f a="this">
				<x path="eval.NativeString"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</toBytes>
		<concat public="1" set="method" static="1">
			<f a="this:s">
				<x path="eval.NativeString"/>
				<x path="eval.NativeString"/>
				<x path="eval.NativeString"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</concat>
	</class>
	<class path="eval.Vector" params="T" file="/home/runner/work/haxe/haxe/std/eval/Vector.hx" extern="1">
		<fromArrayCopy public="1" params="T" set="method" static="1"><f a="array">
	<c path="Array"><c path="fromArrayCopy.T"/></c>
	<c path="eval.Vector"><c path="fromArrayCopy.T"/></c>
</f></fromArrayCopy>
		<length public="1" set="null"><x path="Int"/></length>
		<blit public="1" params="T" set="method"><f a="srcPos:dest:destPos:len">
	<x path="Int"/>
	<c path="eval.Vector"><c path="blit.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<toArray public="1" set="method"><f a=""><c path="Array"><c path="eval.Vector.T"/></c></f></toArray>
		<copy public="1" params="T" set="method"><f a=""><c path="eval.Vector"><c path="copy.T"/></c></f></copy>
		<join public="1" params="T" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<map public="1" params="S" set="method"><f a="f">
	<f a="">
		<c path="eval.Vector.T"/>
		<c path="map.S"/>
	</f>
	<c path="eval.Vector"><c path="map.S"/></c>
</f></map>
		<new public="1" set="method"><f a="size">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="eval.integers.Int64" params="" file="/home/runner/work/haxe/haxe/std/eval/integers/Int64.hx">
		<from><icast field="ofHxInt64"><x path="haxe.Int64"/></icast></from>
		<this><x path="eval.integers.Int64"/></this>
		<to><icast field="toHxInt64"><x path="haxe.Int64"/></icast></to>
		<haxe_doc>Signed 64-bit integer type and operations.</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.integers._Int64.Int64_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/integers/Int64.hx" private="1" module="eval.integers.Int64" final="1">
	<MAX final="1" public="1" set="null" static="1">
		<x path="eval.integers.Int64"/>
		<haxe_doc>The greatest representable Int64 value.</haxe_doc>
	</MAX>
	<MIN final="1" public="1" set="null" static="1">
		<x path="eval.integers.Int64"/>
		<haxe_doc>The smallest representable Int64 value.</haxe_doc>
	</MIN>
	<ZERO final="1" public="1" set="null" static="1">
		<x path="eval.integers.Int64"/>
		<haxe_doc>The integer `0`</haxe_doc>
	</ZERO>
	<ONE final="1" public="1" set="null" static="1">
		<x path="eval.integers.Int64"/>
		<haxe_doc>The integer `1`</haxe_doc>
	</ONE>
	<ofInt public="1" set="method" static="1">
		<f a="i">
			<x path="Int"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Convert the given int value to Int64.</haxe_doc>
	</ofInt>
	<ofString public="1" set="method" static="1">
		<f a="s">
			<c path="String"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Parse the given string value to Int64.
		Throws if the given string is not a valid representation of Int64.</haxe_doc>
	</ofString>
	<ofHxInt64 public="1" set="method" static="1">
		<f a="hx">
			<x path="haxe.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":from"/>
		</meta>
		<haxe_doc>Convert `haxe.Int64` to `eval.integers.Int64`</haxe_doc>
	</ofHxInt64>
	<max public="1" set="method" static="1">
		<f a="a:b">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Returns the greater of `a` and `b`.</haxe_doc>
	</max>
	<min public="1" set="method" static="1">
		<f a="a:b">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Returns the lesser of `a` and `b`.</haxe_doc>
	</min>
	<compare public="1" set="method" static="1">
		<f a="a:b">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Compare given values.
		Returns `0` if the values are equal.
		Returns negative integer if `a` is lesser than `b`.
		Returns positive integer if `a` is greater than `b`.</haxe_doc>
	</compare>
	<toInt public="1" set="method" static="1">
		<f a="this">
			<x path="eval.integers.Int64"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Convert to an integer value.
		The 64-bit signed integer is taken modulo 2{^32}, i.e. the top 32 bits
		are lost during the conversion.</haxe_doc>
	</toInt>
	<toUInt64 public="1" set="method" static="1">
		<f a="this">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Convert to an unsigned integer value.</haxe_doc>
	</toUInt64>
	<toHxInt64 public="1" set="method" static="1">
		<f a="this">
			<x path="eval.integers.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":to"/>
		</meta>
		<haxe_doc>Convert to `haxe.Int64`.</haxe_doc>
	</toHxInt64>
	<toString public="1" set="method" static="1">
		<f a="this">
			<x path="eval.integers.Int64"/>
			<c path="String"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Return the string representation of this value.</haxe_doc>
	</toString>
	<successor public="1" set="method" static="1">
		<f a="this">
			<x path="eval.integers.Int64"/>
			<c path="String"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Successor.</haxe_doc>
	</successor>
	<predecessor public="1" set="method" static="1">
		<f a="this">
			<x path="eval.integers.Int64"/>
			<c path="String"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Predecessor.</haxe_doc>
	</predecessor>
	<remainder public="1" set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Integer remainder.
		Throws if the divisor is zero.</haxe_doc>
	</remainder>
	<add set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</add>
	<sub set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</sub>
	<mul set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</mul>
	<div set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</div>
	<logand set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</logand>
	<logor set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</logor>
	<logxor set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</logxor>
	<shift_left set="method" static="1">
		<f a="this:i">
			<x path="eval.integers.Int64"/>
			<x path="Int"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</shift_left>
	<shift_right set="method" static="1">
		<f a="this:i">
			<x path="eval.integers.Int64"/>
			<x path="Int"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</shift_right>
	<lognot set="method" static="1">
		<f a="this">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</lognot>
	<_add get="inline" set="null" line="99" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</_add>
	<_sub get="inline" set="null" line="100" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</_sub>
	<_mul get="inline" set="null" line="101" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</_mul>
	<_div get="inline" set="null" line="102" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</_div>
	<_mod get="inline" set="null" line="103" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</_mod>
	<_logand get="inline" set="null" line="104" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
	</_logand>
	<_logor get="inline" set="null" line="105" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
	</_logor>
	<_logxor get="inline" set="null" line="106" static="1">
		<f a="this:u">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
	</_logxor>
	<_shift_left get="inline" set="null" line="107" static="1">
		<f a="this:i">
			<x path="eval.integers.Int64"/>
			<x path="Int"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
	</_shift_left>
	<_shift_right get="inline" set="null" line="108" static="1">
		<f a="this:i">
			<x path="eval.integers.Int64"/>
			<x path="Int"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</_shift_right>
	<_lognot get="inline" set="null" line="109" static="1">
		<f a="this">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
	</_lognot>
	<eq get="inline" set="null" line="111" static="1">
		<f a="a:b">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
	</eq>
	<ne get="inline" set="null" line="112" static="1">
		<f a="a:b">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
	</ne>
	<lt get="inline" set="null" line="113" static="1">
		<f a="a:b">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<gt get="inline" set="null" line="114" static="1">
		<f a="a:b">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<lte get="inline" set="null" line="115" static="1">
		<f a="a:b">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<gte get="inline" set="null" line="116" static="1">
		<f a="a:b">
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
</class></impl>
	</abstract>
	<class path="eval.integers._Int64.Int64_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/integers/Int64.hx" private="1" module="eval.integers.Int64" final="1">
		<MAX final="1" public="1" set="null" static="1">
			<x path="eval.integers.Int64"/>
			<haxe_doc>The greatest representable Int64 value.</haxe_doc>
		</MAX>
		<MIN final="1" public="1" set="null" static="1">
			<x path="eval.integers.Int64"/>
			<haxe_doc>The smallest representable Int64 value.</haxe_doc>
		</MIN>
		<ZERO final="1" public="1" set="null" static="1">
			<x path="eval.integers.Int64"/>
			<haxe_doc>The integer `0`</haxe_doc>
		</ZERO>
		<ONE final="1" public="1" set="null" static="1">
			<x path="eval.integers.Int64"/>
			<haxe_doc>The integer `1`</haxe_doc>
		</ONE>
		<ofInt public="1" set="method" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Convert the given int value to Int64.</haxe_doc>
		</ofInt>
		<ofString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Parse the given string value to Int64.
		Throws if the given string is not a valid representation of Int64.</haxe_doc>
		</ofString>
		<ofHxInt64 public="1" set="method" static="1">
			<f a="hx">
				<x path="haxe.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":from"/>
			</meta>
			<haxe_doc>Convert `haxe.Int64` to `eval.integers.Int64`</haxe_doc>
		</ofHxInt64>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Returns the greater of `a` and `b`.</haxe_doc>
		</max>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Returns the lesser of `a` and `b`.</haxe_doc>
		</min>
		<compare public="1" set="method" static="1">
			<f a="a:b">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Compare given values.
		Returns `0` if the values are equal.
		Returns negative integer if `a` is lesser than `b`.
		Returns positive integer if `a` is greater than `b`.</haxe_doc>
		</compare>
		<toInt public="1" set="method" static="1">
			<f a="this">
				<x path="eval.integers.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Convert to an integer value.
		The 64-bit signed integer is taken modulo 2{^32}, i.e. the top 32 bits
		are lost during the conversion.</haxe_doc>
		</toInt>
		<toUInt64 public="1" set="method" static="1">
			<f a="this">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Convert to an unsigned integer value.</haxe_doc>
		</toUInt64>
		<toHxInt64 public="1" set="method" static="1">
			<f a="this">
				<x path="eval.integers.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>Convert to `haxe.Int64`.</haxe_doc>
		</toHxInt64>
		<toString public="1" set="method" static="1">
			<f a="this">
				<x path="eval.integers.Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Return the string representation of this value.</haxe_doc>
		</toString>
		<successor public="1" set="method" static="1">
			<f a="this">
				<x path="eval.integers.Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Successor.</haxe_doc>
		</successor>
		<predecessor public="1" set="method" static="1">
			<f a="this">
				<x path="eval.integers.Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Predecessor.</haxe_doc>
		</predecessor>
		<remainder public="1" set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Integer remainder.
		Throws if the divisor is zero.</haxe_doc>
		</remainder>
		<add set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</add>
		<sub set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</sub>
		<mul set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</mul>
		<div set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</div>
		<logand set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</logand>
		<logor set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</logor>
		<logxor set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</logxor>
		<shift_left set="method" static="1">
			<f a="this:i">
				<x path="eval.integers.Int64"/>
				<x path="Int"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</shift_left>
		<shift_right set="method" static="1">
			<f a="this:i">
				<x path="eval.integers.Int64"/>
				<x path="Int"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</shift_right>
		<lognot set="method" static="1">
			<f a="this">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</lognot>
		<_add get="inline" set="null" line="99" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</_add>
		<_sub get="inline" set="null" line="100" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</_sub>
		<_mul get="inline" set="null" line="101" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</_mul>
		<_div get="inline" set="null" line="102" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</_div>
		<_mod get="inline" set="null" line="103" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</_mod>
		<_logand get="inline" set="null" line="104" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		</_logand>
		<_logor get="inline" set="null" line="105" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
		</_logor>
		<_logxor get="inline" set="null" line="106" static="1">
			<f a="this:u">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
		</_logxor>
		<_shift_left get="inline" set="null" line="107" static="1">
			<f a="this:i">
				<x path="eval.integers.Int64"/>
				<x path="Int"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		</_shift_left>
		<_shift_right get="inline" set="null" line="108" static="1">
			<f a="this:i">
				<x path="eval.integers.Int64"/>
				<x path="Int"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</_shift_right>
		<_lognot get="inline" set="null" line="109" static="1">
			<f a="this">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
		</_lognot>
		<eq get="inline" set="null" line="111" static="1">
			<f a="a:b">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
		</eq>
		<ne get="inline" set="null" line="112" static="1">
			<f a="a:b">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
		</ne>
		<lt get="inline" set="null" line="113" static="1">
			<f a="a:b">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<gt get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<lte get="inline" set="null" line="115" static="1">
			<f a="a:b">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<gte get="inline" set="null" line="116" static="1">
			<f a="a:b">
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
	</class>
	<abstract path="eval.integers.UInt64" params="" file="/home/runner/work/haxe/haxe/std/eval/integers/UInt64.hx">
		<this><x path="eval.integers.UInt64"/></this>
		<haxe_doc>Unsigned 64-bit integer type and operations.</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.integers._UInt64.UInt64_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/integers/UInt64.hx" private="1" module="eval.integers.UInt64" final="1">
	<MAX final="1" public="1" set="null" static="1">
		<x path="eval.integers.UInt64"/>
		<haxe_doc>The greatest representable UInt64 value.</haxe_doc>
	</MAX>
	<ZERO final="1" public="1" set="null" static="1">
		<x path="eval.integers.UInt64"/>
		<haxe_doc>The integer `0`</haxe_doc>
	</ZERO>
	<ONE final="1" public="1" set="null" static="1">
		<x path="eval.integers.UInt64"/>
		<haxe_doc>The integer `1`</haxe_doc>
	</ONE>
	<ofInt public="1" set="method" static="1">
		<f a="i">
			<x path="Int"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Convert the given int value to an unsigned integer.</haxe_doc>
	</ofInt>
	<ofString public="1" set="method" static="1">
		<f a="s">
			<c path="String"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Parse the given string value to an unsigned integer.
		Throws if the given string is not a valid representation of an unsigned
		integer.</haxe_doc>
	</ofString>
	<max public="1" set="method" static="1">
		<f a="a:b">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Returns the greater of `a` and `b`.</haxe_doc>
	</max>
	<min public="1" set="method" static="1">
		<f a="a:b">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Returns the lesser of `a` and `b`.</haxe_doc>
	</min>
	<compare public="1" set="method" static="1">
		<f a="a:b">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Compare given values.
		Returns `0` if the values are equal.
		Returns negative integer if `a` is lesser than `b`.
		Returns positive integer if `a` is greater than `b`.</haxe_doc>
	</compare>
	<toInt public="1" set="method" static="1">
		<f a="this">
			<x path="eval.integers.UInt64"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Convert to an integer value.
		The 64-bit unsigned integer is taken modulo 2{^32}, i.e. the top 32 bits
		are lost during the conversion.</haxe_doc>
	</toInt>
	<toInt64 public="1" set="method" static="1">
		<f a="this">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.Int64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Convert to a signed integer value.</haxe_doc>
	</toInt64>
	<toString public="1" set="method" static="1">
		<f a="this">
			<x path="eval.integers.UInt64"/>
			<c path="String"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Return the string representation of this value.</haxe_doc>
	</toString>
	<successor public="1" set="method" static="1">
		<f a="this">
			<x path="eval.integers.UInt64"/>
			<c path="String"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Successor.</haxe_doc>
	</successor>
	<predecessor public="1" set="method" static="1">
		<f a="this">
			<x path="eval.integers.UInt64"/>
			<c path="String"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Predecessor.</haxe_doc>
	</predecessor>
	<remainder public="1" set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Integer remainder.
		Throws if the divisor is zero.</haxe_doc>
	</remainder>
	<add set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</add>
	<sub set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</sub>
	<mul set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</mul>
	<div set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</div>
	<logand set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</logand>
	<logor set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</logor>
	<logxor set="method" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</logxor>
	<shift_left set="method" static="1">
		<f a="this:i">
			<x path="eval.integers.UInt64"/>
			<x path="Int"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</shift_left>
	<shift_right set="method" static="1">
		<f a="this:i">
			<x path="eval.integers.UInt64"/>
			<x path="Int"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</shift_right>
	<lognot set="method" static="1">
		<f a="this">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</lognot>
	<_add get="inline" set="null" line="88" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</_add>
	<_sub get="inline" set="null" line="89" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</_sub>
	<_mul get="inline" set="null" line="90" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</_mul>
	<_div get="inline" set="null" line="91" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</_div>
	<_mod get="inline" set="null" line="92" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</_mod>
	<_logand get="inline" set="null" line="93" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
	</_logand>
	<_logor get="inline" set="null" line="94" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
	</_logor>
	<_logxor get="inline" set="null" line="95" static="1">
		<f a="this:u">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
	</_logxor>
	<_shift_left get="inline" set="null" line="96" static="1">
		<f a="this:i">
			<x path="eval.integers.UInt64"/>
			<x path="Int"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
	</_shift_left>
	<_shift_right get="inline" set="null" line="97" static="1">
		<f a="this:i">
			<x path="eval.integers.UInt64"/>
			<x path="Int"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</_shift_right>
	<_lognot get="inline" set="null" line="98" static="1">
		<f a="this">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
	</_lognot>
	<eq get="inline" set="null" line="100" static="1">
		<f a="a:b">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
	</eq>
	<ne get="inline" set="null" line="101" static="1">
		<f a="a:b">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
	</ne>
	<lt get="inline" set="null" line="102" static="1">
		<f a="a:b">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<gt get="inline" set="null" line="103" static="1">
		<f a="a:b">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<lte get="inline" set="null" line="104" static="1">
		<f a="a:b">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<gte get="inline" set="null" line="105" static="1">
		<f a="a:b">
			<x path="eval.integers.UInt64"/>
			<x path="eval.integers.UInt64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
</class></impl>
	</abstract>
	<class path="eval.integers._UInt64.UInt64_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/integers/UInt64.hx" private="1" module="eval.integers.UInt64" final="1">
		<MAX final="1" public="1" set="null" static="1">
			<x path="eval.integers.UInt64"/>
			<haxe_doc>The greatest representable UInt64 value.</haxe_doc>
		</MAX>
		<ZERO final="1" public="1" set="null" static="1">
			<x path="eval.integers.UInt64"/>
			<haxe_doc>The integer `0`</haxe_doc>
		</ZERO>
		<ONE final="1" public="1" set="null" static="1">
			<x path="eval.integers.UInt64"/>
			<haxe_doc>The integer `1`</haxe_doc>
		</ONE>
		<ofInt public="1" set="method" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Convert the given int value to an unsigned integer.</haxe_doc>
		</ofInt>
		<ofString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Parse the given string value to an unsigned integer.
		Throws if the given string is not a valid representation of an unsigned
		integer.</haxe_doc>
		</ofString>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Returns the greater of `a` and `b`.</haxe_doc>
		</max>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Returns the lesser of `a` and `b`.</haxe_doc>
		</min>
		<compare public="1" set="method" static="1">
			<f a="a:b">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Compare given values.
		Returns `0` if the values are equal.
		Returns negative integer if `a` is lesser than `b`.
		Returns positive integer if `a` is greater than `b`.</haxe_doc>
		</compare>
		<toInt public="1" set="method" static="1">
			<f a="this">
				<x path="eval.integers.UInt64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Convert to an integer value.
		The 64-bit unsigned integer is taken modulo 2{^32}, i.e. the top 32 bits
		are lost during the conversion.</haxe_doc>
		</toInt>
		<toInt64 public="1" set="method" static="1">
			<f a="this">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.Int64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Convert to a signed integer value.</haxe_doc>
		</toInt64>
		<toString public="1" set="method" static="1">
			<f a="this">
				<x path="eval.integers.UInt64"/>
				<c path="String"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Return the string representation of this value.</haxe_doc>
		</toString>
		<successor public="1" set="method" static="1">
			<f a="this">
				<x path="eval.integers.UInt64"/>
				<c path="String"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Successor.</haxe_doc>
		</successor>
		<predecessor public="1" set="method" static="1">
			<f a="this">
				<x path="eval.integers.UInt64"/>
				<c path="String"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Predecessor.</haxe_doc>
		</predecessor>
		<remainder public="1" set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Integer remainder.
		Throws if the divisor is zero.</haxe_doc>
		</remainder>
		<add set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</add>
		<sub set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</sub>
		<mul set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</mul>
		<div set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</div>
		<logand set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</logand>
		<logor set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</logor>
		<logxor set="method" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</logxor>
		<shift_left set="method" static="1">
			<f a="this:i">
				<x path="eval.integers.UInt64"/>
				<x path="Int"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</shift_left>
		<shift_right set="method" static="1">
			<f a="this:i">
				<x path="eval.integers.UInt64"/>
				<x path="Int"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</shift_right>
		<lognot set="method" static="1">
			<f a="this">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</lognot>
		<_add get="inline" set="null" line="88" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</_add>
		<_sub get="inline" set="null" line="89" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</_sub>
		<_mul get="inline" set="null" line="90" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</_mul>
		<_div get="inline" set="null" line="91" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</_div>
		<_mod get="inline" set="null" line="92" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</_mod>
		<_logand get="inline" set="null" line="93" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		</_logand>
		<_logor get="inline" set="null" line="94" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
		</_logor>
		<_logxor get="inline" set="null" line="95" static="1">
			<f a="this:u">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
		</_logxor>
		<_shift_left get="inline" set="null" line="96" static="1">
			<f a="this:i">
				<x path="eval.integers.UInt64"/>
				<x path="Int"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		</_shift_left>
		<_shift_right get="inline" set="null" line="97" static="1">
			<f a="this:i">
				<x path="eval.integers.UInt64"/>
				<x path="Int"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</_shift_right>
		<_lognot get="inline" set="null" line="98" static="1">
			<f a="this">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
		</_lognot>
		<eq get="inline" set="null" line="100" static="1">
			<f a="a:b">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
		</eq>
		<ne get="inline" set="null" line="101" static="1">
			<f a="a:b">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
		</ne>
		<lt get="inline" set="null" line="102" static="1">
			<f a="a:b">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<gt get="inline" set="null" line="103" static="1">
			<f a="a:b">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<lte get="inline" set="null" line="104" static="1">
			<f a="a:b">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<gte get="inline" set="null" line="105" static="1">
			<f a="a:b">
				<x path="eval.integers.UInt64"/>
				<x path="eval.integers.UInt64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
	</class>
	<abstract path="eval.luv.Async" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Async.hx">
		<this><x path="eval.luv.Async"/></this>
		<to><icast><x path="eval.luv.Handle"/></icast></to>
		<haxe_doc>Inter-loop communication.

	@see https://aantron.github.io/luv/luv/Luv/Async</haxe_doc>
		<meta>
			<m n=":using"><e>eval.luv.Handle</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="eval.luv._Async.Async_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Async.hx" private="1" module="eval.luv.Async" final="1">
	<init public="1" set="method" static="1">
		<f a="loop:callback">
			<x path="eval.luv.Loop"/>
			<f a="async">
				<x path="eval.luv.Async"/>
				<x path="Void"/>
			</f>
			<e path="eval.luv.Result"><x path="eval.luv.Async"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocates and initializes an async handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
	</init>
	<send public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Async"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Triggers a call to the handle's callback by the handle's loop.</haxe_doc>
	</send>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":using"><e>eval.luv.Handle</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Async.Async_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Async.hx" private="1" module="eval.luv.Async" final="1">
		<init public="1" set="method" static="1">
			<f a="loop:callback">
				<x path="eval.luv.Loop"/>
				<f a="async">
					<x path="eval.luv.Async"/>
					<x path="Void"/>
				</f>
				<e path="eval.luv.Result"><x path="eval.luv.Async"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocates and initializes an async handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
		</init>
		<send public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Async"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Triggers a call to the handle's callback by the handle's loop.</haxe_doc>
		</send>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":using"><e>eval.luv.Handle</e></m>
		</meta>
	</class>
	<abstract path="eval.luv.Barrier" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Barrier.hx">
		<this><x path="eval.luv.Barrier"/></this>
		<haxe_doc>Barriers.

	@see https://aantron.github.io/luv/luv/Luv/Barrier</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.luv._Barrier.Barrier_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Barrier.hx" private="1" module="eval.luv.Barrier" final="1">
	<init public="1" set="method" static="1">
		<f a="count">
			<x path="Int"/>
			<e path="eval.luv.Result"><x path="eval.luv.Barrier"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocates and initializes a barrier.</haxe_doc>
	</init>
	<destroy public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Barrier"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Cleans up a barrier.</haxe_doc>
	</destroy>
	<wait public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Barrier"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Waits on a barrier.</haxe_doc>
	</wait>
</class></impl>
	</abstract>
	<class path="eval.luv._Barrier.Barrier_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Barrier.hx" private="1" module="eval.luv.Barrier" final="1">
		<init public="1" set="method" static="1">
			<f a="count">
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.Barrier"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocates and initializes a barrier.</haxe_doc>
		</init>
		<destroy public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Barrier"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Cleans up a barrier.</haxe_doc>
		</destroy>
		<wait public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Barrier"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Waits on a barrier.</haxe_doc>
		</wait>
	</class>
	<abstract path="eval.luv.Buffer" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Buffer.hx">
		<from>
			<icast field="fromNativeString"><x path="eval.NativeString"/></icast>
			<icast field="fromString"><c path="String"/></icast>
			<icast field="fromBytes"><c path="haxe.io.Bytes"/></icast>
		</from>
		<this><x path="eval.luv.Buffer"/></this>
		<haxe_doc>Data buffers.

	@see https://aantron.github.io/luv/luv/Luv/Buffer</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.luv._Buffer.Buffer_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Buffer.hx" private="1" module="eval.luv.Buffer" final="1">
	<create public="1" set="method" static="1">
		<f a="size">
			<x path="Int"/>
			<x path="eval.luv.Buffer"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocates a fresh buffer of the given size.</haxe_doc>
	</create>
	<fromNativeString public="1" set="method" static="1">
		<f a="s">
			<x path="eval.NativeString"/>
			<x path="eval.luv.Buffer"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":from"/>
		</meta>
		<haxe_doc>Creates a buffer from a string.</haxe_doc>
	</fromNativeString>
	<fromString public="1" set="method" static="1">
		<f a="s">
			<c path="String"/>
			<x path="eval.luv.Buffer"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":from"/>
		</meta>
		<haxe_doc>Creates a buffer from a string.</haxe_doc>
	</fromString>
	<fromBytes public="1" set="method" static="1">
		<f a="b">
			<c path="haxe.io.Bytes"/>
			<x path="eval.luv.Buffer"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":from"/>
		</meta>
		<haxe_doc>Creates a buffer from bytes.</haxe_doc>
	</fromBytes>
	<totalSize public="1" set="method" static="1">
		<f a="buffers">
			<c path="Array"><x path="eval.luv.Buffer"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Evaluates to the sum of the sizes of the buffers in the array.</haxe_doc>
	</totalSize>
	<drop public="1" set="method" static="1">
		<f a="buffers:count">
			<c path="Array"><x path="eval.luv.Buffer"/></c>
			<x path="Int"/>
			<c path="Array"><x path="eval.luv.Buffer"/></c>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>`Buffer.drop(buffers, count)` drops the first `count` bytes from `buffers`.

		For example, if `buffers` contains two buffers of size 16, `Buffer.drop(buffers, 18)`
		will evaluate to an array that has lost the reference to the first buffer,
		and contains only a view into the second buffer of size 14.</haxe_doc>
	</drop>
	<size public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Buffer"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Evaluates to the size of the buffer.</haxe_doc>
	</size>
	<get public="1" set="method" static="1">
		<f a="this:index">
			<x path="eval.luv.Buffer"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Retrieve a byte at the given index.</haxe_doc>
	</get>
	<unsafeGet public="1" set="method" static="1">
		<f a="this:index">
			<x path="eval.luv.Buffer"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Retrieve a byte at the given index without a bounds check.</haxe_doc>
	</unsafeGet>
	<set public="1" set="method" static="1">
		<f a="this:index:byte">
			<x path="eval.luv.Buffer"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Set byte value at the given index.</haxe_doc>
	</set>
	<unsafeSet public="1" set="method" static="1">
		<f a="this:index:byte">
			<x path="eval.luv.Buffer"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Set byte value at the given index without a bounds check.</haxe_doc>
	</unsafeSet>
	<sub public="1" set="method" static="1">
		<f a="this:offset:length">
			<x path="eval.luv.Buffer"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="eval.luv.Buffer"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Creates a view into buffer that starts at the given `offset` and has the given `length`.

		No data is copied.</haxe_doc>
	</sub>
	<blit public="1" set="method" static="1">
		<f a="this:destination">
			<x path="eval.luv.Buffer"/>
			<x path="eval.luv.Buffer"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Copies data from this buffer to destination.

		The amount of data copied is the minimum of the two buffers' size.</haxe_doc>
	</blit>
	<fill public="1" set="method" static="1">
		<f a="this:byte">
			<x path="eval.luv.Buffer"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Fills the given buffer with the given byte.</haxe_doc>
	</fill>
	<toString public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Buffer"/>
			<c path="String"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Creates a string with the same contents as the buffer.</haxe_doc>
	</toString>
	<toNativeString public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Buffer"/>
			<x path="eval.NativeString"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Creates a native string with the same contents as the buffer.</haxe_doc>
	</toNativeString>
	<toBytes public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Buffer"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Creates a `haxe.io.Bytes` instance with the same contents as this buffer.</haxe_doc>
	</toBytes>
	<blitToBytes public="1" set="method" static="1">
		<f a="this:destination:destinationOffset">
			<x path="eval.luv.Buffer"/>
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Copies data from a buffer to bytes buffer.</haxe_doc>
	</blitToBytes>
	<blitFromBytes public="1" set="method" static="1">
		<f a="this:source:sourceOffset">
			<x path="eval.luv.Buffer"/>
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Copies data from bytes to a buffer.</haxe_doc>
	</blitFromBytes>
	<blitFromString public="1" set="method" static="1">
		<f a="this:source:sourceOffset">
			<x path="eval.luv.Buffer"/>
			<x path="eval.NativeString"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Copies data from bytes to a buffer.

		Note: `sourceOffset` is not a character offset but a byte offset.</haxe_doc>
	</blitFromString>
</class></impl>
	</abstract>
	<class path="eval.luv._Buffer.Buffer_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Buffer.hx" private="1" module="eval.luv.Buffer" final="1">
		<create public="1" set="method" static="1">
			<f a="size">
				<x path="Int"/>
				<x path="eval.luv.Buffer"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocates a fresh buffer of the given size.</haxe_doc>
		</create>
		<fromNativeString public="1" set="method" static="1">
			<f a="s">
				<x path="eval.NativeString"/>
				<x path="eval.luv.Buffer"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":from"/>
			</meta>
			<haxe_doc>Creates a buffer from a string.</haxe_doc>
		</fromNativeString>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="eval.luv.Buffer"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":from"/>
			</meta>
			<haxe_doc>Creates a buffer from a string.</haxe_doc>
		</fromString>
		<fromBytes public="1" set="method" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<x path="eval.luv.Buffer"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":from"/>
			</meta>
			<haxe_doc>Creates a buffer from bytes.</haxe_doc>
		</fromBytes>
		<totalSize public="1" set="method" static="1">
			<f a="buffers">
				<c path="Array"><x path="eval.luv.Buffer"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Evaluates to the sum of the sizes of the buffers in the array.</haxe_doc>
		</totalSize>
		<drop public="1" set="method" static="1">
			<f a="buffers:count">
				<c path="Array"><x path="eval.luv.Buffer"/></c>
				<x path="Int"/>
				<c path="Array"><x path="eval.luv.Buffer"/></c>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>`Buffer.drop(buffers, count)` drops the first `count` bytes from `buffers`.

		For example, if `buffers` contains two buffers of size 16, `Buffer.drop(buffers, 18)`
		will evaluate to an array that has lost the reference to the first buffer,
		and contains only a view into the second buffer of size 14.</haxe_doc>
		</drop>
		<size public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Buffer"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Evaluates to the size of the buffer.</haxe_doc>
		</size>
		<get public="1" set="method" static="1">
			<f a="this:index">
				<x path="eval.luv.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Retrieve a byte at the given index.</haxe_doc>
		</get>
		<unsafeGet public="1" set="method" static="1">
			<f a="this:index">
				<x path="eval.luv.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Retrieve a byte at the given index without a bounds check.</haxe_doc>
		</unsafeGet>
		<set public="1" set="method" static="1">
			<f a="this:index:byte">
				<x path="eval.luv.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Set byte value at the given index.</haxe_doc>
		</set>
		<unsafeSet public="1" set="method" static="1">
			<f a="this:index:byte">
				<x path="eval.luv.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Set byte value at the given index without a bounds check.</haxe_doc>
		</unsafeSet>
		<sub public="1" set="method" static="1">
			<f a="this:offset:length">
				<x path="eval.luv.Buffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="eval.luv.Buffer"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Creates a view into buffer that starts at the given `offset` and has the given `length`.

		No data is copied.</haxe_doc>
		</sub>
		<blit public="1" set="method" static="1">
			<f a="this:destination">
				<x path="eval.luv.Buffer"/>
				<x path="eval.luv.Buffer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Copies data from this buffer to destination.

		The amount of data copied is the minimum of the two buffers' size.</haxe_doc>
		</blit>
		<fill public="1" set="method" static="1">
			<f a="this:byte">
				<x path="eval.luv.Buffer"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Fills the given buffer with the given byte.</haxe_doc>
		</fill>
		<toString public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Buffer"/>
				<c path="String"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Creates a string with the same contents as the buffer.</haxe_doc>
		</toString>
		<toNativeString public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Buffer"/>
				<x path="eval.NativeString"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Creates a native string with the same contents as the buffer.</haxe_doc>
		</toNativeString>
		<toBytes public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Buffer"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Creates a `haxe.io.Bytes` instance with the same contents as this buffer.</haxe_doc>
		</toBytes>
		<blitToBytes public="1" set="method" static="1">
			<f a="this:destination:destinationOffset">
				<x path="eval.luv.Buffer"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Copies data from a buffer to bytes buffer.</haxe_doc>
		</blitToBytes>
		<blitFromBytes public="1" set="method" static="1">
			<f a="this:source:sourceOffset">
				<x path="eval.luv.Buffer"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Copies data from bytes to a buffer.</haxe_doc>
		</blitFromBytes>
		<blitFromString public="1" set="method" static="1">
			<f a="this:source:sourceOffset">
				<x path="eval.luv.Buffer"/>
				<x path="eval.NativeString"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Copies data from bytes to a buffer.

		Note: `sourceOffset` is not a character offset but a byte offset.</haxe_doc>
		</blitFromString>
	</class>
	<abstract path="eval.luv.Check" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Check.hx">
		<this><x path="eval.luv.Check"/></this>
		<to><icast><x path="eval.luv.Handle"/></icast></to>
		<haxe_doc>Post-I/O callback.

	@see https://aantron.github.io/luv/luv/Luv/Check</haxe_doc>
		<meta>
			<m n=":using"><e>eval.luv.Handle</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="eval.luv._Check.Check_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Check.hx" private="1" module="eval.luv.Check" final="1">
	<init public="1" set="method" static="1">
		<f a="loop">
			<x path="eval.luv.Loop"/>
			<e path="eval.luv.Result"><x path="eval.luv.Check"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocate and initialize a check handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
	</init>
	<start public="1" set="method" static="1">
		<f a="this:callback">
			<x path="eval.luv.Check"/>
			<f a=""><x path="Void"/></f>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Starts the handle with the given callback.</haxe_doc>
	</start>
	<stop public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Check"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Stops the handle.</haxe_doc>
	</stop>
	<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Check.Check_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Check.hx" private="1" module="eval.luv.Check" final="1">
		<init public="1" set="method" static="1">
			<f a="loop">
				<x path="eval.luv.Loop"/>
				<e path="eval.luv.Result"><x path="eval.luv.Check"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocate and initialize a check handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
		</init>
		<start public="1" set="method" static="1">
			<f a="this:callback">
				<x path="eval.luv.Check"/>
				<f a=""><x path="Void"/></f>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Starts the handle with the given callback.</haxe_doc>
		</start>
		<stop public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Check"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Stops the handle.</haxe_doc>
		</stop>
		<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
	</class>
	<abstract path="eval.luv.Condition" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Condition.hx">
		<this><x path="eval.luv.Condition"/></this>
		<haxe_doc>Condition variables.

	@see https://aantron.github.io/luv/luv/Luv/Condition</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.luv._Condition.Condition_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Condition.hx" private="1" module="eval.luv.Condition" final="1">
	<init public="1" set="method" static="1">
		<f a=""><e path="eval.luv.Result"><x path="eval.luv.Condition"/></e></f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocates and initializes a condition variable.</haxe_doc>
	</init>
	<destroy public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Condition"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Cleans up a condition variable.</haxe_doc>
	</destroy>
	<signal public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Condition"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Signals a condition variable.</haxe_doc>
	</signal>
	<broadcast public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Condition"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Signals a condition variable, waking all waiters.</haxe_doc>
	</broadcast>
	<wait public="1" set="method" static="1">
		<f a="this:mutex">
			<x path="eval.luv.Condition"/>
			<x path="eval.luv.Mutex"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Waits on a condition variable.</haxe_doc>
	</wait>
	<timedWait public="1" set="method" static="1">
		<f a="this:mutex:timeout">
			<x path="eval.luv.Condition"/>
			<x path="eval.luv.Mutex"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Waits on a condition variable with a timeout.
		The timeout is given in nanoseconds.</haxe_doc>
	</timedWait>
</class></impl>
	</abstract>
	<class path="eval.luv._Condition.Condition_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Condition.hx" private="1" module="eval.luv.Condition" final="1">
		<init public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><x path="eval.luv.Condition"/></e></f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocates and initializes a condition variable.</haxe_doc>
		</init>
		<destroy public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Condition"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Cleans up a condition variable.</haxe_doc>
		</destroy>
		<signal public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Condition"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Signals a condition variable.</haxe_doc>
		</signal>
		<broadcast public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Condition"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Signals a condition variable, waking all waiters.</haxe_doc>
		</broadcast>
		<wait public="1" set="method" static="1">
			<f a="this:mutex">
				<x path="eval.luv.Condition"/>
				<x path="eval.luv.Mutex"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Waits on a condition variable.</haxe_doc>
		</wait>
		<timedWait public="1" set="method" static="1">
			<f a="this:mutex:timeout">
				<x path="eval.luv.Condition"/>
				<x path="eval.luv.Mutex"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Waits on a condition variable with a timeout.
		The timeout is given in nanoseconds.</haxe_doc>
		</timedWait>
	</class>
	<abstract path="eval.luv.ConnectedUdp" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/ConnectedUdp.hx">
		<this><x path="eval.luv.Udp"/></this>
		<to>
			<icast><x path="eval.luv.Udp"/></icast>
			<icast><x path="eval.luv.Handle"/></icast>
		</to>
		<haxe_doc>Connected UDP sockets.

	@see https://aantron.github.io/luv/luv/Luv/UDP/Connected</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":using"><e>eval.luv.Handle</e></m>
		</meta>
		<impl><class path="eval.luv._ConnectedUdp.ConnectedUdp_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/ConnectedUdp.hx" private="1" module="eval.luv.ConnectedUdp" final="1">
	<disconnect public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Udp"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<haxe_doc>Removes the peer address assigned to the given socket.</haxe_doc>
	</disconnect>
	<getPeerName public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Udp"/>
			<e path="eval.luv.Result"><x path="eval.luv.SockAddr"/></e>
		</f>
		<haxe_doc>Retrieves the peer address assigned to the given socket.</haxe_doc>
	</getPeerName>
	<send public="1" set="method" static="1">
		<f a="this:data:callback">
			<x path="eval.luv.Udp"/>
			<c path="Array"><x path="eval.luv.Buffer"/></c>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<haxe_doc>Like `eval.luv.UDP.send`, but the remote address used is the peer address
		assigned to the socket.</haxe_doc>
	</send>
	<trySend public="1" set="method" static="1">
		<f a="this:data">
			<x path="eval.luv.Udp"/>
			<c path="Array"><x path="eval.luv.Buffer"/></c>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<haxe_doc>Like `eval.luv.UDP.trySend`, but the remote address used is the peer address
		assigned to the socket.</haxe_doc>
	</trySend>
	<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._ConnectedUdp.ConnectedUdp_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/ConnectedUdp.hx" private="1" module="eval.luv.ConnectedUdp" final="1">
		<disconnect public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Udp"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<haxe_doc>Removes the peer address assigned to the given socket.</haxe_doc>
		</disconnect>
		<getPeerName public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Udp"/>
				<e path="eval.luv.Result"><x path="eval.luv.SockAddr"/></e>
			</f>
			<haxe_doc>Retrieves the peer address assigned to the given socket.</haxe_doc>
		</getPeerName>
		<send public="1" set="method" static="1">
			<f a="this:data:callback">
				<x path="eval.luv.Udp"/>
				<c path="Array"><x path="eval.luv.Buffer"/></c>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Like `eval.luv.UDP.send`, but the remote address used is the peer address
		assigned to the socket.</haxe_doc>
		</send>
		<trySend public="1" set="method" static="1">
			<f a="this:data">
				<x path="eval.luv.Udp"/>
				<c path="Array"><x path="eval.luv.Buffer"/></c>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<haxe_doc>Like `eval.luv.UDP.trySend`, but the remote address used is the peer address
		assigned to the socket.</haxe_doc>
		</trySend>
		<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
	</class>
	<abstract path="eval.luv.DirentKind" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dir.hx" module="eval.luv.Dir">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._Dir.DirentKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dir.hx" private="1" module="eval.luv.Dir" extern="1" final="1">
	<UNKNOWN public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
		<x path="eval.luv.DirentKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UNKNOWN>
	<FILE public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="eval.luv.DirentKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FILE>
	<DIR public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
		<x path="eval.luv.DirentKind"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DIR>
	<LINK public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
		<x path="eval.luv.DirentKind"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LINK>
	<FIFO public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
		<x path="eval.luv.DirentKind"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FIFO>
	<SOCKET public="1" get="inline" set="null" expr="cast 5" line="11" static="1">
		<x path="eval.luv.DirentKind"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SOCKET>
	<CHAR public="1" get="inline" set="null" expr="cast 6" line="12" static="1">
		<x path="eval.luv.DirentKind"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CHAR>
	<BLOCK public="1" get="inline" set="null" expr="cast 7" line="13" static="1">
		<x path="eval.luv.DirentKind"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BLOCK>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Dir.DirentKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dir.hx" private="1" module="eval.luv.Dir" extern="1" final="1">
		<UNKNOWN public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
			<x path="eval.luv.DirentKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UNKNOWN>
		<FILE public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="eval.luv.DirentKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FILE>
		<DIR public="1" get="inline" set="null" expr="cast 2" line="8" static="1">
			<x path="eval.luv.DirentKind"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DIR>
		<LINK public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
			<x path="eval.luv.DirentKind"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LINK>
		<FIFO public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
			<x path="eval.luv.DirentKind"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FIFO>
		<SOCKET public="1" get="inline" set="null" expr="cast 5" line="11" static="1">
			<x path="eval.luv.DirentKind"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SOCKET>
		<CHAR public="1" get="inline" set="null" expr="cast 6" line="12" static="1">
			<x path="eval.luv.DirentKind"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CHAR>
		<BLOCK public="1" get="inline" set="null" expr="cast 7" line="13" static="1">
			<x path="eval.luv.DirentKind"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BLOCK>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="eval.luv.Dirent" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dir.hx" module="eval.luv.Dir"><a>
	<name><x path="eval.NativeString"/></name>
	<kind><x path="eval.luv.DirentKind"/></kind>
</a></typedef>
	<typedef path="eval.luv.DirectoryScan" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dir.hx" module="eval.luv.Dir"><a>
	<next set="method">
		<f a=""><x path="Null"><t path="eval.luv.Dirent"/></x></f>
		<haxe_doc>Retrieves the next directory entry.</haxe_doc>
	</next>
	<end set="method">
		<f a=""><x path="Void"/></f>
		<haxe_doc>Cleans up after a directory scan.</haxe_doc>
	</end>
</a></typedef>
	<abstract path="eval.luv.Dir" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dir.hx">
		<this><x path="eval.luv.Dir"/></this>
		<haxe_doc>@see https://aantron.github.io/luv/luv/Luv/File#module-Dir</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.luv._Dir.Dir_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dir.hx" private="1" module="eval.luv.Dir" final="1">
	<open public="1" set="method" static="1">
		<f a="loop:path:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.Dir"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Opens the directory at the given path for listing.</haxe_doc>
	</open>
	<close public="1" set="method" static="1">
		<f a="this:loop:?request:callback">
			<x path="eval.luv.Dir"/>
			<x path="eval.luv.Loop"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Closes the directory.</haxe_doc>
	</close>
	<read public="1" set="method" static="1">
		<f a="this:loop:?numberOfEntries:?request:callback">
			<x path="eval.luv.Dir"/>
			<x path="eval.luv.Loop"/>
			<x path="Int"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><c path="Array"><t path="eval.luv.Dirent"/></c></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Retrieves a directory entry.</haxe_doc>
	</read>
	<scan public="1" set="method" static="1">
		<f a="loop:path:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><t path="eval.luv.DirectoryScan"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Begins directory listing.</haxe_doc>
	</scan>
</class></impl>
	</abstract>
	<class path="eval.luv._Dir.Dir_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dir.hx" private="1" module="eval.luv.Dir" final="1">
		<open public="1" set="method" static="1">
			<f a="loop:path:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.Dir"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Opens the directory at the given path for listing.</haxe_doc>
		</open>
		<close public="1" set="method" static="1">
			<f a="this:loop:?request:callback">
				<x path="eval.luv.Dir"/>
				<x path="eval.luv.Loop"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Closes the directory.</haxe_doc>
		</close>
		<read public="1" set="method" static="1">
			<f a="this:loop:?numberOfEntries:?request:callback">
				<x path="eval.luv.Dir"/>
				<x path="eval.luv.Loop"/>
				<x path="Int"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><c path="Array"><t path="eval.luv.Dirent"/></c></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Retrieves a directory entry.</haxe_doc>
		</read>
		<scan public="1" set="method" static="1">
			<f a="loop:path:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><t path="eval.luv.DirectoryScan"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Begins directory listing.</haxe_doc>
		</scan>
	</class>
	<class path="eval.luv.DirSync" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dir.hx" module="eval.luv.Dir" extern="1">
		<open public="1" set="method" static="1">
			<f a="path">
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><x path="eval.luv.Dir"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.Dir.open</e></m></meta>
			<haxe_doc>Opens the directory at the given path for listing.</haxe_doc>
		</open>
		<close public="1" set="method" static="1">
			<f a="dir">
				<x path="eval.luv.Dir"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.Dir.close</e></m></meta>
			<haxe_doc>Closes the directory.</haxe_doc>
		</close>
		<read public="1" set="method" static="1">
			<f a="dir:?numberOfEntries">
				<x path="eval.luv.Dir"/>
				<x path="Int"/>
				<e path="eval.luv.Result"><c path="Array"><t path="eval.luv.Dirent"/></c></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.Dir.read</e></m></meta>
			<haxe_doc>Retrieves a directory entry.</haxe_doc>
		</read>
		<scan public="1" set="method" static="1">
			<f a="path">
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><t path="eval.luv.DirectoryScan"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.Dir.scan</e></m></meta>
			<haxe_doc>Begins directory listing.</haxe_doc>
		</scan>
		<haxe_doc>Synchronous version of `eval.luv.Dir` API</haxe_doc>
	</class>
	<abstract path="eval.luv.AddrInfoRequest" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" module="eval.luv.Dns">
		<this><x path="eval.luv.Request"/></this>
		<to><icast><x path="eval.luv.Request"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="eval.luv._Dns.AddrInfoRequest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" private="1" module="eval.luv.Dns" extern="1" final="1"/></impl>
	</abstract>
	<class path="eval.luv._Dns.AddrInfoRequest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" private="1" module="eval.luv.Dns" extern="1" final="1"/>
	<typedef path="eval.luv.AddrInfo" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" module="eval.luv.Dns"><a>
	<sockType><e path="eval.luv.SocketType"/></sockType>
	<protocol><x path="Int"/></protocol>
	<family><e path="eval.luv.AddressFamily"/></family>
	<canonName>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</canonName>
	<addr><x path="eval.luv.SockAddr"/></addr>
</a></typedef>
	<typedef path="eval.luv.AddrInfoOptions" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" module="eval.luv.Dns"><a>
	<sockType>
		<x path="Null"><e path="eval.luv.SocketType"/></x>
		<meta><m n=":optional"/></meta>
	</sockType>
	<request>
		<x path="Null"><x path="eval.luv.AddrInfoRequest"/></x>
		<meta><m n=":optional"/></meta>
	</request>
	<protocol>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</protocol>
	<flags>
		<x path="Null"><c path="Array"><x path="eval.luv.AddrInfoFlag"/></c></x>
		<meta><m n=":optional"/></meta>
	</flags>
	<family>
		<x path="Null"><e path="eval.luv.AddressFamily"/></x>
		<meta><m n=":optional"/></meta>
	</family>
</a></typedef>
	<abstract path="eval.luv.AddrInfoFlag" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" module="eval.luv.Dns">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._Dns.AddrInfoFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" private="1" module="eval.luv.Dns" extern="1" final="1">
	<PASSIVE public="1" get="inline" set="null" expr="cast 0" line="23" static="1">
		<x path="eval.luv.AddrInfoFlag"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PASSIVE>
	<CANONNAME public="1" get="inline" set="null" expr="cast 1" line="24" static="1">
		<x path="eval.luv.AddrInfoFlag"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CANONNAME>
	<NUMERICHOST public="1" get="inline" set="null" expr="cast 2" line="25" static="1">
		<x path="eval.luv.AddrInfoFlag"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMERICHOST>
	<NUMERICSERV public="1" get="inline" set="null" expr="cast 3" line="26" static="1">
		<x path="eval.luv.AddrInfoFlag"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMERICSERV>
	<V4MAPPED public="1" get="inline" set="null" expr="cast 4" line="27" static="1">
		<x path="eval.luv.AddrInfoFlag"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</V4MAPPED>
	<ALL public="1" get="inline" set="null" expr="cast 5" line="28" static="1">
		<x path="eval.luv.AddrInfoFlag"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ALL>
	<ADDRCONFIG public="1" get="inline" set="null" expr="cast 6" line="29" static="1">
		<x path="eval.luv.AddrInfoFlag"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ADDRCONFIG>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Dns.AddrInfoFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" private="1" module="eval.luv.Dns" extern="1" final="1">
		<PASSIVE public="1" get="inline" set="null" expr="cast 0" line="23" static="1">
			<x path="eval.luv.AddrInfoFlag"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PASSIVE>
		<CANONNAME public="1" get="inline" set="null" expr="cast 1" line="24" static="1">
			<x path="eval.luv.AddrInfoFlag"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CANONNAME>
		<NUMERICHOST public="1" get="inline" set="null" expr="cast 2" line="25" static="1">
			<x path="eval.luv.AddrInfoFlag"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMERICHOST>
		<NUMERICSERV public="1" get="inline" set="null" expr="cast 3" line="26" static="1">
			<x path="eval.luv.AddrInfoFlag"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMERICSERV>
		<V4MAPPED public="1" get="inline" set="null" expr="cast 4" line="27" static="1">
			<x path="eval.luv.AddrInfoFlag"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</V4MAPPED>
		<ALL public="1" get="inline" set="null" expr="cast 5" line="28" static="1">
			<x path="eval.luv.AddrInfoFlag"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ALL>
		<ADDRCONFIG public="1" get="inline" set="null" expr="cast 6" line="29" static="1">
			<x path="eval.luv.AddrInfoFlag"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ADDRCONFIG>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="eval.luv.NameInfoRequest" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" module="eval.luv.Dns">
		<this><x path="eval.luv.Request"/></this>
		<to><icast><x path="eval.luv.Request"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="eval.luv._Dns.NameInfoRequest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" private="1" module="eval.luv.Dns" extern="1" final="1"/></impl>
	</abstract>
	<class path="eval.luv._Dns.NameInfoRequest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" private="1" module="eval.luv.Dns" extern="1" final="1"/>
	<abstract path="eval.luv.NameInfoFlag" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" module="eval.luv.Dns">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._Dns.NameInfoFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" private="1" module="eval.luv.Dns" extern="1" final="1">
	<NAMEREQD public="1" get="inline" set="null" expr="cast 0" line="36" static="1">
		<x path="eval.luv.NameInfoFlag"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NAMEREQD>
	<DGRAM public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
		<x path="eval.luv.NameInfoFlag"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DGRAM>
	<NOFQDN public="1" get="inline" set="null" expr="cast 2" line="38" static="1">
		<x path="eval.luv.NameInfoFlag"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NOFQDN>
	<NUMERICHOST public="1" get="inline" set="null" expr="cast 3" line="39" static="1">
		<x path="eval.luv.NameInfoFlag"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMERICHOST>
	<NUMERICSERV public="1" get="inline" set="null" expr="cast 4" line="40" static="1">
		<x path="eval.luv.NameInfoFlag"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NUMERICSERV>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Dns.NameInfoFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" private="1" module="eval.luv.Dns" extern="1" final="1">
		<NAMEREQD public="1" get="inline" set="null" expr="cast 0" line="36" static="1">
			<x path="eval.luv.NameInfoFlag"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NAMEREQD>
		<DGRAM public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
			<x path="eval.luv.NameInfoFlag"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DGRAM>
		<NOFQDN public="1" get="inline" set="null" expr="cast 2" line="38" static="1">
			<x path="eval.luv.NameInfoFlag"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NOFQDN>
		<NUMERICHOST public="1" get="inline" set="null" expr="cast 3" line="39" static="1">
			<x path="eval.luv.NameInfoFlag"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMERICHOST>
		<NUMERICSERV public="1" get="inline" set="null" expr="cast 4" line="40" static="1">
			<x path="eval.luv.NameInfoFlag"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NUMERICSERV>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="eval.luv.NameInfoOptions" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" module="eval.luv.Dns"><a>
	<request>
		<x path="Null"><x path="eval.luv.NameInfoRequest"/></x>
		<meta><m n=":optional"/></meta>
	</request>
	<flags>
		<x path="Null"><c path="Array"><x path="eval.luv.NameInfoFlag"/></c></x>
		<meta><m n=":optional"/></meta>
	</flags>
</a></typedef>
	<class path="eval.luv.Dns" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Dns.hx" extern="1">
		<createAddrRequest public="1" set="method" static="1"><f a=""><x path="eval.luv.AddrInfoRequest"/></f></createAddrRequest>
		<createNameRequest public="1" set="method" static="1"><f a=""><x path="eval.luv.NameInfoRequest"/></f></createNameRequest>
		<getAddrInfo public="1" set="method" static="1">
			<f a="loop:node:service:?options:callback">
				<x path="eval.luv.Loop"/>
				<x path="Null"><c path="String"/></x>
				<x path="Null"><c path="String"/></x>
				<t path="eval.luv.AddrInfoOptions"/>
				<f a="result">
					<e path="eval.luv.Result"><c path="Array"><t path="eval.luv.AddrInfo"/></c></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Retrieves addresses.
		Either `node` or `service` may be `null` but not both.</haxe_doc>
		</getAddrInfo>
		<getNameInfo public="1" set="method" static="1">
			<f a="loop:addr:?options:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.luv.SockAddr"/>
				<t path="eval.luv.NameInfoOptions"/>
				<f a="result">
					<e path="eval.luv.Result"><a>
	<service><c path="String"/></service>
	<hostName><c path="String"/></hostName>
</a></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Retrieves host names.</haxe_doc>
		</getNameInfo>
		<haxe_doc>DNS queries.

	@see https://aantron.github.io/luv/luv/Luv/Dns</haxe_doc>
	</class>
	<class path="eval.luv.Env" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Env.hx" extern="1">
		<getEnv public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<e path="eval.luv.Result"><x path="eval.NativeString"/></e>
			</f>
			<haxe_doc>Retrieves the value of an environment variable.</haxe_doc>
		</getEnv>
		<setEnv public="1" set="method" static="1">
			<f a="name:value">
				<c path="String"/>
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<haxe_doc>Sets an environment variable.</haxe_doc>
		</setEnv>
		<unsetEnv public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<haxe_doc>Deletes an environment variable.</haxe_doc>
		</unsetEnv>
		<environ public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><t path="Map">
	<c path="String"/>
	<x path="eval.NativeString"/>
</t></e></f>
			<haxe_doc>Retrieves all environment variables.</haxe_doc>
		</environ>
		<haxe_doc>Environment variables.

	@see https://aantron.github.io/luv/luv/Luv/Env</haxe_doc>
	</class>
	<abstract path="eval.luv.FileRequest" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" module="eval.luv.File">
		<this><x path="eval.luv.Request"/></this>
		<to><icast><x path="eval.luv.Request"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="eval.luv._File.FileRequest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" private="1" module="eval.luv.File" extern="1" final="1"/></impl>
	</abstract>
	<class path="eval.luv._File.FileRequest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" private="1" module="eval.luv.File" extern="1" final="1"/>
	<abstract path="eval.luv.FileOpenFlag" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" module="eval.luv.File">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._File.FileOpenFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" private="1" module="eval.luv.File" extern="1" final="1">
	<RDONLY public="1" get="inline" set="null" expr="cast 0" line="10" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RDONLY>
	<WRONLY public="1" get="inline" set="null" expr="cast 1" line="11" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WRONLY>
	<RDWR public="1" get="inline" set="null" expr="cast 2" line="12" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RDWR>
	<CREAT public="1" get="inline" set="null" expr="cast 3" line="13" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CREAT>
	<EXCL public="1" get="inline" set="null" expr="cast 4" line="14" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EXCL>
	<EXLOCK public="1" get="inline" set="null" expr="cast 5" line="15" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EXLOCK>
	<NOCTTY public="1" get="inline" set="null" expr="cast 6" line="16" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NOCTTY>
	<NOFOLLOW public="1" get="inline" set="null" expr="cast 7" line="17" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NOFOLLOW>
	<TEMPORARY public="1" get="inline" set="null" expr="cast 8" line="18" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TEMPORARY>
	<TRUNC public="1" get="inline" set="null" expr="cast 9" line="19" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TRUNC>
	<APPEND public="1" get="inline" set="null" expr="cast 10" line="20" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</APPEND>
	<DIRECT public="1" get="inline" set="null" expr="cast 11" line="21" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DIRECT>
	<DSYNC public="1" get="inline" set="null" expr="cast 12" line="22" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DSYNC>
	<FILEMAP public="1" get="inline" set="null" expr="cast 13" line="23" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FILEMAP>
	<NOATIME public="1" get="inline" set="null" expr="cast 14" line="24" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NOATIME>
	<NONBLOCK public="1" get="inline" set="null" expr="cast 15" line="25" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NONBLOCK>
	<RANDOM public="1" get="inline" set="null" expr="cast 16" line="26" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RANDOM>
	<SEQUENTIAL public="1" get="inline" set="null" expr="cast 17" line="27" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SEQUENTIAL>
	<SHORT_LIVED public="1" get="inline" set="null" expr="cast 18" line="28" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SHORT_LIVED>
	<SYMLINK public="1" get="inline" set="null" expr="cast 19" line="29" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 19</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SYMLINK>
	<SYNC public="1" get="inline" set="null" expr="cast 20" line="30" static="1">
		<x path="eval.luv.FileOpenFlag"/>
		<meta>
			<m n=":value"><e>cast 20</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SYNC>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._File.FileOpenFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" private="1" module="eval.luv.File" extern="1" final="1">
		<RDONLY public="1" get="inline" set="null" expr="cast 0" line="10" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RDONLY>
		<WRONLY public="1" get="inline" set="null" expr="cast 1" line="11" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WRONLY>
		<RDWR public="1" get="inline" set="null" expr="cast 2" line="12" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RDWR>
		<CREAT public="1" get="inline" set="null" expr="cast 3" line="13" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CREAT>
		<EXCL public="1" get="inline" set="null" expr="cast 4" line="14" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EXCL>
		<EXLOCK public="1" get="inline" set="null" expr="cast 5" line="15" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EXLOCK>
		<NOCTTY public="1" get="inline" set="null" expr="cast 6" line="16" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NOCTTY>
		<NOFOLLOW public="1" get="inline" set="null" expr="cast 7" line="17" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NOFOLLOW>
		<TEMPORARY public="1" get="inline" set="null" expr="cast 8" line="18" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TEMPORARY>
		<TRUNC public="1" get="inline" set="null" expr="cast 9" line="19" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TRUNC>
		<APPEND public="1" get="inline" set="null" expr="cast 10" line="20" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</APPEND>
		<DIRECT public="1" get="inline" set="null" expr="cast 11" line="21" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DIRECT>
		<DSYNC public="1" get="inline" set="null" expr="cast 12" line="22" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DSYNC>
		<FILEMAP public="1" get="inline" set="null" expr="cast 13" line="23" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FILEMAP>
		<NOATIME public="1" get="inline" set="null" expr="cast 14" line="24" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NOATIME>
		<NONBLOCK public="1" get="inline" set="null" expr="cast 15" line="25" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NONBLOCK>
		<RANDOM public="1" get="inline" set="null" expr="cast 16" line="26" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RANDOM>
		<SEQUENTIAL public="1" get="inline" set="null" expr="cast 17" line="27" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SEQUENTIAL>
		<SHORT_LIVED public="1" get="inline" set="null" expr="cast 18" line="28" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SHORT_LIVED>
		<SYMLINK public="1" get="inline" set="null" expr="cast 19" line="29" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 19</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SYMLINK>
		<SYNC public="1" get="inline" set="null" expr="cast 20" line="30" static="1">
			<x path="eval.luv.FileOpenFlag"/>
			<meta>
				<m n=":value"><e>cast 20</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SYNC>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="eval.luv.FileMode" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" module="eval.luv.File">
		<IRWXU/>
		<IRUSR/>
		<IWUSR/>
		<IXUSR/>
		<IRWXG/>
		<IRGRP/>
		<IWGRP/>
		<IXGRP/>
		<IRWXO/>
		<IROTH/>
		<IWOTH/>
		<IXOTH/>
		<ISUID/>
		<ISGID/>
		<ISVTX/>
		<IFMT/>
		<IFREG/>
		<IFDIR/>
		<IFBLK/>
		<IFCHR/>
		<IFLNK/>
		<IFIFO/>
		<NUMERIC a="mode"><x path="Int"/></NUMERIC>
		<haxe_doc>Permission bits.
	@see https://aantron.github.io/luv/luv/Luv/File/Mode</haxe_doc>
	</enum>
	<abstract path="eval.luv.FileModeNumeric" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" module="eval.luv.File">
		<this><x path="eval.luv.FileModeNumeric"/></this>
		<haxe_doc>Abstract type for a bit field of permissions bits, i.e., an `int` in which
	multiple bits may be set. These bit fields are returned by operations such
	as `eval.luv.File.stat`</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<typedef path="eval.luv.FileStatTimeSpec" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" module="eval.luv.File"><a>
	<sec><x path="eval.integers.Int64"/></sec>
	<nsec><x path="eval.integers.Int64"/></nsec>
</a></typedef>
	<typedef path="eval.luv.FileStat" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" module="eval.luv.File"><a>
	<uid><x path="eval.integers.UInt64"/></uid>
	<size><x path="eval.integers.UInt64"/></size>
	<rdev><x path="eval.integers.UInt64"/></rdev>
	<nlink><x path="eval.integers.UInt64"/></nlink>
	<mtim><t path="eval.luv.FileStatTimeSpec"/></mtim>
	<mode><x path="eval.luv.FileModeNumeric"/></mode>
	<ino><x path="eval.integers.UInt64"/></ino>
	<gid><x path="eval.integers.UInt64"/></gid>
	<gen><x path="eval.integers.UInt64"/></gen>
	<flags><x path="eval.integers.UInt64"/></flags>
	<dev><x path="eval.integers.UInt64"/></dev>
	<ctim><t path="eval.luv.FileStatTimeSpec"/></ctim>
	<blocks><x path="eval.integers.UInt64"/></blocks>
	<blksize><x path="eval.integers.UInt64"/></blksize>
	<birthtim><t path="eval.luv.FileStatTimeSpec"/></birthtim>
	<atim><t path="eval.luv.FileStatTimeSpec"/></atim>
</a></typedef>
	<typedef path="eval.luv.FileStatFs" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" module="eval.luv.File"><a>
	<type><x path="eval.integers.UInt64"/></type>
	<fspare><c path="Array"><x path="eval.integers.UInt64"/></c></fspare>
	<files><x path="eval.integers.UInt64"/></files>
	<ffree><x path="eval.integers.UInt64"/></ffree>
	<bsize><x path="eval.integers.UInt64"/></bsize>
	<blocks><x path="eval.integers.UInt64"/></blocks>
	<bfree><x path="eval.integers.UInt64"/></bfree>
	<bavail><x path="eval.integers.UInt64"/></bavail>
</a></typedef>
	<abstract path="eval.luv.FileCopyFlag" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" module="eval.luv.File">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._File.FileCopyFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" private="1" module="eval.luv.File" extern="1" final="1">
	<COPYFILE_EXCL public="1" get="inline" set="null" expr="cast 0" line="106" static="1">
		<x path="eval.luv.FileCopyFlag"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COPYFILE_EXCL>
	<COPYFILE_FICLONE public="1" get="inline" set="null" expr="cast 1" line="107" static="1">
		<x path="eval.luv.FileCopyFlag"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COPYFILE_FICLONE>
	<COPYFILE_FICLONE_FORCE public="1" get="inline" set="null" expr="cast 2" line="108" static="1">
		<x path="eval.luv.FileCopyFlag"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COPYFILE_FICLONE_FORCE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._File.FileCopyFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" private="1" module="eval.luv.File" extern="1" final="1">
		<COPYFILE_EXCL public="1" get="inline" set="null" expr="cast 0" line="106" static="1">
			<x path="eval.luv.FileCopyFlag"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COPYFILE_EXCL>
		<COPYFILE_FICLONE public="1" get="inline" set="null" expr="cast 1" line="107" static="1">
			<x path="eval.luv.FileCopyFlag"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COPYFILE_FICLONE>
		<COPYFILE_FICLONE_FORCE public="1" get="inline" set="null" expr="cast 2" line="108" static="1">
			<x path="eval.luv.FileCopyFlag"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COPYFILE_FICLONE_FORCE>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="eval.luv.FileAccessFlag" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" module="eval.luv.File">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._File.FileAccessFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" private="1" module="eval.luv.File" extern="1" final="1">
	<F_OK public="1" get="inline" set="null" expr="cast 0" line="112" static="1">
		<x path="eval.luv.FileAccessFlag"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</F_OK>
	<R_OK public="1" get="inline" set="null" expr="cast 1" line="113" static="1">
		<x path="eval.luv.FileAccessFlag"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</R_OK>
	<W_OK public="1" get="inline" set="null" expr="cast 2" line="114" static="1">
		<x path="eval.luv.FileAccessFlag"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</W_OK>
	<X_OK public="1" get="inline" set="null" expr="cast 3" line="115" static="1">
		<x path="eval.luv.FileAccessFlag"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</X_OK>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._File.FileAccessFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" private="1" module="eval.luv.File" extern="1" final="1">
		<F_OK public="1" get="inline" set="null" expr="cast 0" line="112" static="1">
			<x path="eval.luv.FileAccessFlag"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</F_OK>
		<R_OK public="1" get="inline" set="null" expr="cast 1" line="113" static="1">
			<x path="eval.luv.FileAccessFlag"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</R_OK>
		<W_OK public="1" get="inline" set="null" expr="cast 2" line="114" static="1">
			<x path="eval.luv.FileAccessFlag"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</W_OK>
		<X_OK public="1" get="inline" set="null" expr="cast 3" line="115" static="1">
			<x path="eval.luv.FileAccessFlag"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</X_OK>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="eval.luv.FileSymlinkFlag" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" module="eval.luv.File">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._File.FileSymlinkFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" private="1" module="eval.luv.File" extern="1" final="1">
	<SYMLINK_DIR public="1" get="inline" set="null" expr="cast 0" line="119" static="1">
		<x path="eval.luv.FileSymlinkFlag"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SYMLINK_DIR>
	<SYMLINK_JUNCTION public="1" get="inline" set="null" expr="cast 1" line="120" static="1">
		<x path="eval.luv.FileSymlinkFlag"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SYMLINK_JUNCTION>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._File.FileSymlinkFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" private="1" module="eval.luv.File" extern="1" final="1">
		<SYMLINK_DIR public="1" get="inline" set="null" expr="cast 0" line="119" static="1">
			<x path="eval.luv.FileSymlinkFlag"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SYMLINK_DIR>
		<SYMLINK_JUNCTION public="1" get="inline" set="null" expr="cast 1" line="120" static="1">
			<x path="eval.luv.FileSymlinkFlag"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SYMLINK_JUNCTION>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="eval.luv.File" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx">
		<this><x path="eval.luv.File"/></this>
		<to><icast><x path="eval.luv.Handle"/></icast></to>
		<haxe_doc>Files.

	@see https://aantron.github.io/luv/luv/Luv/File</haxe_doc>
		<meta>
			<m n=":using"><e>eval.luv.Handle</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="eval.luv._File.File_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" private="1" module="eval.luv.File" final="1">
	<stdin final="1" public="1" set="null" static="1"><x path="eval.luv.File"/></stdin>
	<stdout final="1" public="1" set="null" static="1"><x path="eval.luv.File"/></stdout>
	<stderr final="1" public="1" set="null" static="1"><x path="eval.luv.File"/></stderr>
	<createRequest public="1" set="method" static="1">
		<f a=""><x path="eval.luv.FileRequest"/></f>
		<meta><m n=":noExpr"/></meta>
	</createRequest>
	<testMode public="1" set="method" static="1">
		<f a="mask:bits">
			<c path="Array"><e path="eval.luv.FileMode"/></c>
			<x path="eval.luv.FileModeNumeric"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Checks whether all the bits in `mask` are set in `bits`.

		For example, if `bits` is equal to octal 0o644, then
		`eval.luv.File.testMode [IRUSR] bits` evaluates to `true`.</haxe_doc>
	</testMode>
	<open public="1" set="method" static="1">
		<f a="loop:path:flags:?mode:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<c path="Array"><x path="eval.luv.FileOpenFlag"/></c>
			<c path="Array"><e path="eval.luv.FileMode"/></c>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.File"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Opens the file at the given path.
		The default value of the `mode` argument is equal to octal `0o644`.</haxe_doc>
	</open>
	<close public="1" set="method" static="1">
		<f a="this:loop:?request:callback">
			<x path="eval.luv.File"/>
			<x path="eval.luv.Loop"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Closes the file.</haxe_doc>
	</close>
	<read public="1" set="method" static="1">
		<f a="this:loop:fileOffset:buffers:?request:callback">
			<x path="eval.luv.File"/>
			<x path="eval.luv.Loop"/>
			<x path="eval.integers.Int64"/>
			<c path="Array"><x path="eval.luv.Buffer"/></c>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.integers.UInt64"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Reads from the file.

		The incoming data is written consecutively to into the given buffers.
		The number of bytes that the operation tries to read is the total length
		of the buffers.

		End of file is indicated by `Result.Ok(0)`. Note that this is different
		from `eval.luv.Stream.readStart`.</haxe_doc>
	</read>
	<write public="1" set="method" static="1">
		<f a="this:loop:fileOffset:buffers:?request:callback">
			<x path="eval.luv.File"/>
			<x path="eval.luv.Loop"/>
			<x path="eval.integers.Int64"/>
			<c path="Array"><x path="eval.luv.Buffer"/></c>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.integers.UInt64"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Writes to the file.</haxe_doc>
	</write>
	<unlink public="1" set="method" static="1">
		<f a="loop:path:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Deletes the file at the given path.</haxe_doc>
	</unlink>
	<rename public="1" set="method" static="1">
		<f a="loop:path:toPath:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.NativeString"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Moves the file at the given path to the path given by `toPath`</haxe_doc>
	</rename>
	<mkstemp public="1" set="method" static="1">
		<f a="loop:pattern:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><a>
	<name><x path="eval.NativeString"/></name>
	<file><x path="eval.luv.File"/></file>
</a></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Creates a temporary file with name based on the given pattern.</haxe_doc>
	</mkstemp>
	<mkdtemp public="1" set="method" static="1">
		<f a="loop:pattern:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.NativeString"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Creates a temporary directory with name based on the given pattern.</haxe_doc>
	</mkdtemp>
	<mkdir public="1" set="method" static="1">
		<f a="loop:path:?mode:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<c path="Array"><e path="eval.luv.FileMode"/></c>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Creates a directory.</haxe_doc>
	</mkdir>
	<rmdir public="1" set="method" static="1">
		<f a="loop:path:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Deletes a directory.</haxe_doc>
	</rmdir>
	<stat public="1" set="method" static="1">
		<f a="loop:path:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><t path="eval.luv.FileStat"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Retrieves status information for the file at the given path.</haxe_doc>
	</stat>
	<lstat public="1" set="method" static="1">
		<f a="loop:path:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><t path="eval.luv.FileStat"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Like `eval.luv.File.stat`, but does not dereference symlinks.</haxe_doc>
	</lstat>
	<fstat public="1" set="method" static="1">
		<f a="this:loop:?request:callback">
			<x path="eval.luv.File"/>
			<x path="eval.luv.Loop"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><t path="eval.luv.FileStat"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Retrieves status information for this file.</haxe_doc>
	</fstat>
	<statFs public="1" set="method" static="1">
		<f a="loop:path:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><t path="eval.luv.FileStatFs"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Retrieves status information for the filesystem containing the given path.</haxe_doc>
	</statFs>
	<fsync public="1" set="method" static="1">
		<f a="this:loop:?request:callback">
			<x path="eval.luv.File"/>
			<x path="eval.luv.Loop"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Flushes file changes to storage.</haxe_doc>
	</fsync>
	<fdataSync public="1" set="method" static="1">
		<f a="this:loop:?request:callback">
			<x path="eval.luv.File"/>
			<x path="eval.luv.Loop"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Like `eval.luv.File.fsync`, but may omit some metadata.</haxe_doc>
	</fdataSync>
	<ftruncate public="1" set="method" static="1">
		<f a="this:loop:length:?request:callback">
			<x path="eval.luv.File"/>
			<x path="eval.luv.Loop"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Truncates the given file to the given length.</haxe_doc>
	</ftruncate>
	<copyFile public="1" set="method" static="1">
		<f a="loop:path:toPath:?flags:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.NativeString"/>
			<c path="Array"><x path="eval.luv.FileCopyFlag"/></c>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Copies the file at the given path to the path given by `toPath`.</haxe_doc>
	</copyFile>
	<sendFile public="1" set="method" static="1">
		<f a="this:loop:toFile:offset:length:?request:callback">
			<x path="eval.luv.File"/>
			<x path="eval.luv.Loop"/>
			<x path="eval.luv.File"/>
			<x path="eval.integers.Int64"/>
			<x path="eval.integers.UInt64"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.integers.UInt64"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Transfers data between file descriptors.</haxe_doc>
	</sendFile>
	<access public="1" set="method" static="1">
		<f a="loop:path:flags:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<c path="Array"><x path="eval.luv.FileAccessFlag"/></c>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Checks whether the calling process can access the file at the given path.</haxe_doc>
	</access>
	<chmod public="1" set="method" static="1">
		<f a="loop:path:mode:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<c path="Array"><e path="eval.luv.FileMode"/></c>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Changes permissions of the file at the given path.</haxe_doc>
	</chmod>
	<fchmod public="1" set="method" static="1">
		<f a="this:loop:mode:?request:callback">
			<x path="eval.luv.File"/>
			<x path="eval.luv.Loop"/>
			<c path="Array"><e path="eval.luv.FileMode"/></c>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Changes permissions of the file.</haxe_doc>
	</fchmod>
	<utime public="1" set="method" static="1">
		<f a="loop:path:atime:mtime:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets timestamps of the file at the given path.</haxe_doc>
	</utime>
	<futime public="1" set="method" static="1">
		<f a="this:loop:atime:mtime:?request:callback">
			<x path="eval.luv.File"/>
			<x path="eval.luv.Loop"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets timestamps of the file.</haxe_doc>
	</futime>
	<lutime public="1" set="method" static="1">
		<f a="loop:path:atime:mtime:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets timestamps of the file at the given path without dereferencing symlinks.</haxe_doc>
	</lutime>
	<link public="1" set="method" static="1">
		<f a="loop:path:link:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.NativeString"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Hardlinks a file at the location given by `link`.</haxe_doc>
	</link>
	<symlink public="1" set="method" static="1">
		<f a="loop:path:link:?flags:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.NativeString"/>
			<c path="Array"><x path="eval.luv.FileSymlinkFlag"/></c>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Symlinks a file at the location given by `link`.</haxe_doc>
	</symlink>
	<readLink public="1" set="method" static="1">
		<f a="loop:path:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.NativeString"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Reads the target path of a symlink.</haxe_doc>
	</readLink>
	<realPath public="1" set="method" static="1">
		<f a="loop:path:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.NativeString"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Resolves a real absolute path to the given file.</haxe_doc>
	</realPath>
	<chown public="1" set="method" static="1">
		<f a="loop:path:uid:gid:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Changes owneship of the file at the given path.</haxe_doc>
	</chown>
	<lchown public="1" set="method" static="1">
		<f a="loop:path:uid:gid:?request:callback">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Changes owneship of the file at the given path. without dereferencing symlinks.</haxe_doc>
	</lchown>
	<fchown public="1" set="method" static="1">
		<f a="this:loop:uid:gid:?request:callback">
			<x path="eval.luv.File"/>
			<x path="eval.luv.Loop"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="eval.luv.FileRequest"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Changes owneship of the file.</haxe_doc>
	</fchown>
	<toInt public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.File"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Returns the integer representation of `eval.luv.File`.

		`eval.luv.File` is defined as an integer file descriptor by libuv on all
		platforms at the moment. This is a convenience function for interoperability
		with `eval.luv.Process`, the API of which assumes that files are represented
		by integers.</haxe_doc>
	</toInt>
	<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._File.File_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" private="1" module="eval.luv.File" final="1">
		<stdin final="1" public="1" set="null" static="1"><x path="eval.luv.File"/></stdin>
		<stdout final="1" public="1" set="null" static="1"><x path="eval.luv.File"/></stdout>
		<stderr final="1" public="1" set="null" static="1"><x path="eval.luv.File"/></stderr>
		<createRequest public="1" set="method" static="1">
			<f a=""><x path="eval.luv.FileRequest"/></f>
			<meta><m n=":noExpr"/></meta>
		</createRequest>
		<testMode public="1" set="method" static="1">
			<f a="mask:bits">
				<c path="Array"><e path="eval.luv.FileMode"/></c>
				<x path="eval.luv.FileModeNumeric"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Checks whether all the bits in `mask` are set in `bits`.

		For example, if `bits` is equal to octal 0o644, then
		`eval.luv.File.testMode [IRUSR] bits` evaluates to `true`.</haxe_doc>
		</testMode>
		<open public="1" set="method" static="1">
			<f a="loop:path:flags:?mode:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<c path="Array"><x path="eval.luv.FileOpenFlag"/></c>
				<c path="Array"><e path="eval.luv.FileMode"/></c>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.File"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Opens the file at the given path.
		The default value of the `mode` argument is equal to octal `0o644`.</haxe_doc>
		</open>
		<close public="1" set="method" static="1">
			<f a="this:loop:?request:callback">
				<x path="eval.luv.File"/>
				<x path="eval.luv.Loop"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Closes the file.</haxe_doc>
		</close>
		<read public="1" set="method" static="1">
			<f a="this:loop:fileOffset:buffers:?request:callback">
				<x path="eval.luv.File"/>
				<x path="eval.luv.Loop"/>
				<x path="eval.integers.Int64"/>
				<c path="Array"><x path="eval.luv.Buffer"/></c>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.integers.UInt64"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Reads from the file.

		The incoming data is written consecutively to into the given buffers.
		The number of bytes that the operation tries to read is the total length
		of the buffers.

		End of file is indicated by `Result.Ok(0)`. Note that this is different
		from `eval.luv.Stream.readStart`.</haxe_doc>
		</read>
		<write public="1" set="method" static="1">
			<f a="this:loop:fileOffset:buffers:?request:callback">
				<x path="eval.luv.File"/>
				<x path="eval.luv.Loop"/>
				<x path="eval.integers.Int64"/>
				<c path="Array"><x path="eval.luv.Buffer"/></c>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.integers.UInt64"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Writes to the file.</haxe_doc>
		</write>
		<unlink public="1" set="method" static="1">
			<f a="loop:path:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Deletes the file at the given path.</haxe_doc>
		</unlink>
		<rename public="1" set="method" static="1">
			<f a="loop:path:toPath:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.NativeString"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Moves the file at the given path to the path given by `toPath`</haxe_doc>
		</rename>
		<mkstemp public="1" set="method" static="1">
			<f a="loop:pattern:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><a>
	<name><x path="eval.NativeString"/></name>
	<file><x path="eval.luv.File"/></file>
</a></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Creates a temporary file with name based on the given pattern.</haxe_doc>
		</mkstemp>
		<mkdtemp public="1" set="method" static="1">
			<f a="loop:pattern:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.NativeString"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Creates a temporary directory with name based on the given pattern.</haxe_doc>
		</mkdtemp>
		<mkdir public="1" set="method" static="1">
			<f a="loop:path:?mode:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<c path="Array"><e path="eval.luv.FileMode"/></c>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Creates a directory.</haxe_doc>
		</mkdir>
		<rmdir public="1" set="method" static="1">
			<f a="loop:path:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Deletes a directory.</haxe_doc>
		</rmdir>
		<stat public="1" set="method" static="1">
			<f a="loop:path:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><t path="eval.luv.FileStat"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Retrieves status information for the file at the given path.</haxe_doc>
		</stat>
		<lstat public="1" set="method" static="1">
			<f a="loop:path:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><t path="eval.luv.FileStat"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Like `eval.luv.File.stat`, but does not dereference symlinks.</haxe_doc>
		</lstat>
		<fstat public="1" set="method" static="1">
			<f a="this:loop:?request:callback">
				<x path="eval.luv.File"/>
				<x path="eval.luv.Loop"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><t path="eval.luv.FileStat"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Retrieves status information for this file.</haxe_doc>
		</fstat>
		<statFs public="1" set="method" static="1">
			<f a="loop:path:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><t path="eval.luv.FileStatFs"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Retrieves status information for the filesystem containing the given path.</haxe_doc>
		</statFs>
		<fsync public="1" set="method" static="1">
			<f a="this:loop:?request:callback">
				<x path="eval.luv.File"/>
				<x path="eval.luv.Loop"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Flushes file changes to storage.</haxe_doc>
		</fsync>
		<fdataSync public="1" set="method" static="1">
			<f a="this:loop:?request:callback">
				<x path="eval.luv.File"/>
				<x path="eval.luv.Loop"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Like `eval.luv.File.fsync`, but may omit some metadata.</haxe_doc>
		</fdataSync>
		<ftruncate public="1" set="method" static="1">
			<f a="this:loop:length:?request:callback">
				<x path="eval.luv.File"/>
				<x path="eval.luv.Loop"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Truncates the given file to the given length.</haxe_doc>
		</ftruncate>
		<copyFile public="1" set="method" static="1">
			<f a="loop:path:toPath:?flags:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.NativeString"/>
				<c path="Array"><x path="eval.luv.FileCopyFlag"/></c>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Copies the file at the given path to the path given by `toPath`.</haxe_doc>
		</copyFile>
		<sendFile public="1" set="method" static="1">
			<f a="this:loop:toFile:offset:length:?request:callback">
				<x path="eval.luv.File"/>
				<x path="eval.luv.Loop"/>
				<x path="eval.luv.File"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.UInt64"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.integers.UInt64"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Transfers data between file descriptors.</haxe_doc>
		</sendFile>
		<access public="1" set="method" static="1">
			<f a="loop:path:flags:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<c path="Array"><x path="eval.luv.FileAccessFlag"/></c>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Checks whether the calling process can access the file at the given path.</haxe_doc>
		</access>
		<chmod public="1" set="method" static="1">
			<f a="loop:path:mode:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<c path="Array"><e path="eval.luv.FileMode"/></c>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Changes permissions of the file at the given path.</haxe_doc>
		</chmod>
		<fchmod public="1" set="method" static="1">
			<f a="this:loop:mode:?request:callback">
				<x path="eval.luv.File"/>
				<x path="eval.luv.Loop"/>
				<c path="Array"><e path="eval.luv.FileMode"/></c>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Changes permissions of the file.</haxe_doc>
		</fchmod>
		<utime public="1" set="method" static="1">
			<f a="loop:path:atime:mtime:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets timestamps of the file at the given path.</haxe_doc>
		</utime>
		<futime public="1" set="method" static="1">
			<f a="this:loop:atime:mtime:?request:callback">
				<x path="eval.luv.File"/>
				<x path="eval.luv.Loop"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets timestamps of the file.</haxe_doc>
		</futime>
		<lutime public="1" set="method" static="1">
			<f a="loop:path:atime:mtime:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets timestamps of the file at the given path without dereferencing symlinks.</haxe_doc>
		</lutime>
		<link public="1" set="method" static="1">
			<f a="loop:path:link:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.NativeString"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Hardlinks a file at the location given by `link`.</haxe_doc>
		</link>
		<symlink public="1" set="method" static="1">
			<f a="loop:path:link:?flags:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.NativeString"/>
				<c path="Array"><x path="eval.luv.FileSymlinkFlag"/></c>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Symlinks a file at the location given by `link`.</haxe_doc>
		</symlink>
		<readLink public="1" set="method" static="1">
			<f a="loop:path:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.NativeString"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Reads the target path of a symlink.</haxe_doc>
		</readLink>
		<realPath public="1" set="method" static="1">
			<f a="loop:path:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.NativeString"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Resolves a real absolute path to the given file.</haxe_doc>
		</realPath>
		<chown public="1" set="method" static="1">
			<f a="loop:path:uid:gid:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Changes owneship of the file at the given path.</haxe_doc>
		</chown>
		<lchown public="1" set="method" static="1">
			<f a="loop:path:uid:gid:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Changes owneship of the file at the given path. without dereferencing symlinks.</haxe_doc>
		</lchown>
		<fchown public="1" set="method" static="1">
			<f a="this:loop:uid:gid:?request:callback">
				<x path="eval.luv.File"/>
				<x path="eval.luv.Loop"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="eval.luv.FileRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Changes owneship of the file.</haxe_doc>
		</fchown>
		<toInt public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.File"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Returns the integer representation of `eval.luv.File`.

		`eval.luv.File` is defined as an integer file descriptor by libuv on all
		platforms at the moment. This is a convenience function for interoperability
		with `eval.luv.Process`, the API of which assumes that files are represented
		by integers.</haxe_doc>
		</toInt>
		<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
	</class>
	<class path="eval.luv.FileSync" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/File.hx" module="eval.luv.File" extern="1">
		<open public="1" set="method" static="1">
			<f a="path:flags:?mode">
				<x path="eval.NativeString"/>
				<c path="Array"><x path="eval.luv.FileOpenFlag"/></c>
				<c path="Array"><e path="eval.luv.FileMode"/></c>
				<e path="eval.luv.Result"><x path="eval.luv.File"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.open</e></m></meta>
			<haxe_doc>Opens the file at the given path.
		The default value of the `mode` argument is equal to octal `0o644`.</haxe_doc>
		</open>
		<close public="1" set="method" static="1">
			<f a="file">
				<x path="eval.luv.File"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.close</e></m></meta>
			<haxe_doc>Closes the file.</haxe_doc>
		</close>
		<read public="1" set="method" static="1">
			<f a="file:fileOffset:buffers">
				<x path="eval.luv.File"/>
				<x path="eval.integers.Int64"/>
				<c path="Array"><x path="eval.luv.Buffer"/></c>
				<e path="eval.luv.Result"><x path="eval.integers.UInt64"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.read</e></m></meta>
			<haxe_doc>Reads from the file.

		The incoming data is written consecutively to into the given buffers.
		The number of bytes that the operation tries to read is the total length
		of the buffers.

		End of file is indicated by `Result.Ok(0)`. Note that this is different
		from `eval.luv.Stream.readStart`.</haxe_doc>
		</read>
		<write public="1" set="method" static="1">
			<f a="file:fileOffset:buffers">
				<x path="eval.luv.File"/>
				<x path="eval.integers.Int64"/>
				<c path="Array"><x path="eval.luv.Buffer"/></c>
				<e path="eval.luv.Result"><x path="eval.integers.UInt64"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.write</e></m></meta>
			<haxe_doc>Writes to the file.</haxe_doc>
		</write>
		<unlink public="1" set="method" static="1">
			<f a="path">
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.unlink</e></m></meta>
			<haxe_doc>Deletes the file at the given path.</haxe_doc>
		</unlink>
		<rename public="1" set="method" static="1">
			<f a="path:toPath">
				<x path="eval.NativeString"/>
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.rename</e></m></meta>
			<haxe_doc>Moves the file at the given path to the path given by `toPath`</haxe_doc>
		</rename>
		<mkstemp public="1" set="method" static="1">
			<f a="pattern">
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><a>
	<name><x path="eval.NativeString"/></name>
	<file><x path="eval.luv.File"/></file>
</a></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.mkstemp</e></m></meta>
			<haxe_doc>Creates a temporary file with name based on the given pattern.</haxe_doc>
		</mkstemp>
		<mkdtemp public="1" set="method" static="1">
			<f a="pattern">
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><x path="eval.NativeString"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.mkdtemp</e></m></meta>
			<haxe_doc>Creates a temporary directory with name based on the given pattern.</haxe_doc>
		</mkdtemp>
		<mkdir public="1" set="method" static="1">
			<f a="path:?mode">
				<x path="eval.NativeString"/>
				<c path="Array"><e path="eval.luv.FileMode"/></c>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.mkdir</e></m></meta>
			<haxe_doc>Creates a directory.</haxe_doc>
		</mkdir>
		<rmdir public="1" set="method" static="1">
			<f a="path">
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.rmdir</e></m></meta>
			<haxe_doc>Deletes a directory.</haxe_doc>
		</rmdir>
		<stat public="1" set="method" static="1">
			<f a="path">
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><t path="eval.luv.FileStat"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.stat</e></m></meta>
			<haxe_doc>Retrieves status information for the file at the given path.</haxe_doc>
		</stat>
		<lstat public="1" set="method" static="1">
			<f a="path">
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><t path="eval.luv.FileStat"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.lstat</e></m></meta>
			<haxe_doc>Like `eval.luv.File.stat`, but does not dereference symlinks.</haxe_doc>
		</lstat>
		<fstat public="1" set="method" static="1">
			<f a="file">
				<x path="eval.luv.File"/>
				<e path="eval.luv.Result"><t path="eval.luv.FileStat"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.fstat</e></m></meta>
			<haxe_doc>Retrieves status information for this file.</haxe_doc>
		</fstat>
		<statFs public="1" set="method" static="1">
			<f a="path">
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><t path="eval.luv.FileStatFs"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.statFs</e></m></meta>
			<haxe_doc>Retrieves status information for the filesystem containing the given path.</haxe_doc>
		</statFs>
		<fsync public="1" set="method" static="1">
			<f a="file">
				<x path="eval.luv.File"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.fsync</e></m></meta>
			<haxe_doc>Flushes file changes to storage.</haxe_doc>
		</fsync>
		<fdataSync public="1" set="method" static="1">
			<f a="file">
				<x path="eval.luv.File"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.fdataSync</e></m></meta>
			<haxe_doc>Like `eval.luv.File.fsync`, but may omit some metadata.</haxe_doc>
		</fdataSync>
		<ftruncate public="1" set="method" static="1">
			<f a="file:length">
				<x path="eval.luv.File"/>
				<x path="eval.integers.Int64"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.ftruncate</e></m></meta>
			<haxe_doc>Truncates the given file to the given length.</haxe_doc>
		</ftruncate>
		<copyFile public="1" set="method" static="1">
			<f a="path:toPath:?flags">
				<x path="eval.NativeString"/>
				<x path="eval.NativeString"/>
				<c path="Array"><x path="eval.luv.FileCopyFlag"/></c>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.copyFile</e></m></meta>
			<haxe_doc>Copies the file at the given path to the path given by `toPath`.</haxe_doc>
		</copyFile>
		<sendFile public="1" set="method" static="1">
			<f a="file:toFile:offset:length">
				<x path="eval.luv.File"/>
				<x path="eval.luv.File"/>
				<x path="eval.integers.Int64"/>
				<x path="eval.integers.UInt64"/>
				<e path="eval.luv.Result"><x path="eval.integers.UInt64"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.sendFile</e></m></meta>
			<haxe_doc>Transfers data between file descriptors.</haxe_doc>
		</sendFile>
		<access public="1" set="method" static="1">
			<f a="path:flags">
				<x path="eval.NativeString"/>
				<c path="Array"><x path="eval.luv.FileAccessFlag"/></c>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.access</e></m></meta>
			<haxe_doc>Checks whether the calling process can access the file at the given path.</haxe_doc>
		</access>
		<chmod public="1" set="method" static="1">
			<f a="path:mode">
				<x path="eval.NativeString"/>
				<c path="Array"><e path="eval.luv.FileMode"/></c>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.chmod</e></m></meta>
			<haxe_doc>Changes permissions of the file at the given path.</haxe_doc>
		</chmod>
		<fchmod public="1" set="method" static="1">
			<f a="file:mode">
				<x path="eval.luv.File"/>
				<c path="Array"><e path="eval.luv.FileMode"/></c>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.fchmod</e></m></meta>
			<haxe_doc>Changes permissions of the file.</haxe_doc>
		</fchmod>
		<utime public="1" set="method" static="1">
			<f a="path:atime:mtime">
				<x path="eval.NativeString"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.utime</e></m></meta>
			<haxe_doc>Sets timestamps of the file at the given path.</haxe_doc>
		</utime>
		<futime public="1" set="method" static="1">
			<f a="file:atime:mtime">
				<x path="eval.luv.File"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.futime</e></m></meta>
			<haxe_doc>Sets timestamps of the file.</haxe_doc>
		</futime>
		<lutime public="1" set="method" static="1">
			<f a="path:atime:mtime">
				<x path="eval.NativeString"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.lutime</e></m></meta>
			<haxe_doc>Sets timestamps of the file at the given path without dereferencing symlinks.</haxe_doc>
		</lutime>
		<link public="1" set="method" static="1">
			<f a="path:link">
				<x path="eval.NativeString"/>
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.link</e></m></meta>
			<haxe_doc>Hardlinks a file at the location given by `link`.</haxe_doc>
		</link>
		<symlink public="1" set="method" static="1">
			<f a="path:link:?flags">
				<x path="eval.NativeString"/>
				<x path="eval.NativeString"/>
				<c path="Array"><x path="eval.luv.FileSymlinkFlag"/></c>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.symlink</e></m></meta>
			<haxe_doc>Symlinks a file at the location given by `link`.</haxe_doc>
		</symlink>
		<readLink public="1" set="method" static="1">
			<f a="path">
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><x path="eval.NativeString"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.readLink</e></m></meta>
			<haxe_doc>Reads the target path of a symlink.</haxe_doc>
		</readLink>
		<realPath public="1" set="method" static="1">
			<f a="path">
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><x path="eval.NativeString"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.realPath</e></m></meta>
			<haxe_doc>Resolves a real absolute path to the given file.</haxe_doc>
		</realPath>
		<chown public="1" set="method" static="1">
			<f a="path:uid:gid">
				<x path="eval.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.chown</e></m></meta>
			<haxe_doc>Changes owneship of the file at the given path.</haxe_doc>
		</chown>
		<lchown public="1" set="method" static="1">
			<f a="path:uid:gid">
				<x path="eval.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.lchown</e></m></meta>
			<haxe_doc>Changes owneship of the file at the given path. without dereferencing symlinks.</haxe_doc>
		</lchown>
		<fchown public="1" set="method" static="1">
			<f a="file:uid:gid">
				<x path="eval.luv.File"/>
				<x path="Int"/>
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":inheritDoc"><e>eval.luv.File.fchown</e></m></meta>
			<haxe_doc>Changes owneship of the file.</haxe_doc>
		</fchown>
		<haxe_doc>Synchronous version of `eval.luv.File` API</haxe_doc>
	</class>
	<abstract path="eval.luv.FsEventType" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/FsEvent.hx" module="eval.luv.FsEvent">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._FsEvent.FsEventType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/FsEvent.hx" private="1" module="eval.luv.FsEvent" extern="1" final="1">
	<RENAME public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="eval.luv.FsEventType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RENAME>
	<CHANGE public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="eval.luv.FsEventType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CHANGE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._FsEvent.FsEventType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/FsEvent.hx" private="1" module="eval.luv.FsEvent" extern="1" final="1">
		<RENAME public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="eval.luv.FsEventType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RENAME>
		<CHANGE public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="eval.luv.FsEventType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CHANGE>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="eval.luv.FsEventFlag" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/FsEvent.hx" module="eval.luv.FsEvent">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._FsEvent.FsEventFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/FsEvent.hx" private="1" module="eval.luv.FsEvent" extern="1" final="1">
	<FS_EVENT_WATCH_ENTRY public="1" get="inline" set="null" expr="cast 0" line="9" static="1">
		<x path="eval.luv.FsEventFlag"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FS_EVENT_WATCH_ENTRY>
	<FS_EVENT_STAT public="1" get="inline" set="null" expr="cast 1" line="10" static="1">
		<x path="eval.luv.FsEventFlag"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FS_EVENT_STAT>
	<FS_EVENT_RECURSIVE public="1" get="inline" set="null" expr="cast 2" line="11" static="1">
		<x path="eval.luv.FsEventFlag"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FS_EVENT_RECURSIVE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._FsEvent.FsEventFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/FsEvent.hx" private="1" module="eval.luv.FsEvent" extern="1" final="1">
		<FS_EVENT_WATCH_ENTRY public="1" get="inline" set="null" expr="cast 0" line="9" static="1">
			<x path="eval.luv.FsEventFlag"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FS_EVENT_WATCH_ENTRY>
		<FS_EVENT_STAT public="1" get="inline" set="null" expr="cast 1" line="10" static="1">
			<x path="eval.luv.FsEventFlag"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FS_EVENT_STAT>
		<FS_EVENT_RECURSIVE public="1" get="inline" set="null" expr="cast 2" line="11" static="1">
			<x path="eval.luv.FsEventFlag"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FS_EVENT_RECURSIVE>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="eval.luv.FsEvent" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/FsEvent.hx">
		<this><x path="eval.luv.FsEvent"/></this>
		<to><icast><x path="eval.luv.Handle"/></icast></to>
		<haxe_doc>Filesystem events.

	@see https://aantron.github.io/luv/luv/Luv/FS_event</haxe_doc>
		<meta>
			<m n=":using"><e>eval.luv.Handle</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="eval.luv._FsEvent.FsEvent_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/FsEvent.hx" private="1" module="eval.luv.FsEvent" final="1">
	<init public="1" set="method" static="1">
		<f a="loop">
			<x path="eval.luv.Loop"/>
			<e path="eval.luv.Result"><x path="eval.luv.FsEvent"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocates and initializes an FS event handle.</haxe_doc>
	</init>
	<start public="1" set="method" static="1">
		<f a="this:path:?flags:callback">
			<x path="eval.luv.FsEvent"/>
			<x path="eval.NativeString"/>
			<c path="Array"><x path="eval.luv.FsEventFlag"/></c>
			<f a="result">
				<e path="eval.luv.Result"><a>
	<file><x path="Null"><x path="eval.NativeString"/></x></file>
	<events><c path="Array"><x path="eval.luv.FsEventType"/></c></events>
</a></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Starts the handle and watches the given path for changes.</haxe_doc>
	</start>
	<stop public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.FsEvent"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Stops the handle.</haxe_doc>
	</stop>
	<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._FsEvent.FsEvent_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/FsEvent.hx" private="1" module="eval.luv.FsEvent" final="1">
		<init public="1" set="method" static="1">
			<f a="loop">
				<x path="eval.luv.Loop"/>
				<e path="eval.luv.Result"><x path="eval.luv.FsEvent"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocates and initializes an FS event handle.</haxe_doc>
		</init>
		<start public="1" set="method" static="1">
			<f a="this:path:?flags:callback">
				<x path="eval.luv.FsEvent"/>
				<x path="eval.NativeString"/>
				<c path="Array"><x path="eval.luv.FsEventFlag"/></c>
				<f a="result">
					<e path="eval.luv.Result"><a>
	<file><x path="Null"><x path="eval.NativeString"/></x></file>
	<events><c path="Array"><x path="eval.luv.FsEventType"/></c></events>
</a></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Starts the handle and watches the given path for changes.</haxe_doc>
		</start>
		<stop public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.FsEvent"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Stops the handle.</haxe_doc>
		</stop>
		<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
	</class>
	<abstract path="eval.luv.FsPoll" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/FsPoll.hx">
		<this><x path="eval.luv.FsPoll"/></this>
		<to><icast><x path="eval.luv.Handle"/></icast></to>
		<haxe_doc>Filesystem polling.

	@see https://aantron.github.io/luv/luv/Luv/FS_poll</haxe_doc>
		<meta>
			<m n=":using"><e>eval.luv.Handle</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="eval.luv._FsPoll.FsPoll_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/FsPoll.hx" private="1" module="eval.luv.FsPoll" final="1">
	<init public="1" set="method" static="1">
		<f a="loop">
			<x path="eval.luv.Loop"/>
			<e path="eval.luv.Result"><x path="eval.luv.FsPoll"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocates and initializes an FS polling handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
	</init>
	<start public="1" set="method" static="1">
		<f a="this:path:?interval:callback">
			<x path="eval.luv.FsPoll"/>
			<x path="eval.NativeString"/>
			<x path="Int"/>
			<f a="result">
				<e path="eval.luv.Result"><a>
	<previous><t path="eval.luv.FileStat"/></previous>
	<current><t path="eval.luv.FileStat"/></current>
</a></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Starts the handle and polls the given path for changes.

		The default value of `interval` is 2000 (milliseconds).</haxe_doc>
	</start>
	<stop public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.FsPoll"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Stops the handle.</haxe_doc>
	</stop>
	<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._FsPoll.FsPoll_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/FsPoll.hx" private="1" module="eval.luv.FsPoll" final="1">
		<init public="1" set="method" static="1">
			<f a="loop">
				<x path="eval.luv.Loop"/>
				<e path="eval.luv.Result"><x path="eval.luv.FsPoll"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocates and initializes an FS polling handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
		</init>
		<start public="1" set="method" static="1">
			<f a="this:path:?interval:callback">
				<x path="eval.luv.FsPoll"/>
				<x path="eval.NativeString"/>
				<x path="Int"/>
				<f a="result">
					<e path="eval.luv.Result"><a>
	<previous><t path="eval.luv.FileStat"/></previous>
	<current><t path="eval.luv.FileStat"/></current>
</a></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Starts the handle and polls the given path for changes.

		The default value of `interval` is 2000 (milliseconds).</haxe_doc>
		</start>
		<stop public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.FsPoll"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Stops the handle.</haxe_doc>
		</stop>
		<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
	</class>
	<abstract path="eval.luv.SocketHandle" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Handle.hx" module="eval.luv.Handle">
		<this><x path="eval.luv.SocketHandle"/></this>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="eval.luv.Handle" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Handle.hx">
		<this><x path="eval.luv.Handle"/></this>
		<haxe_doc>Handles.

	@see https://aantron.github.io/luv/luv/Luv/Handle</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.luv._Handle.Handle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Handle.hx" private="1" module="eval.luv.Handle" final="1">
	<close public="1" set="method" static="1">
		<f a="handle:callback">
			<x path="eval.luv.Handle"/>
			<f a=""><x path="Void"/></f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Closes the given handle.</haxe_doc>
	</close>
	<isActive public="1" set="method" static="1">
		<f a="handle">
			<x path="eval.luv.Handle"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Returns `true` if the handle is active, `false` otherwise.</haxe_doc>
	</isActive>
	<isClosing public="1" set="method" static="1">
		<f a="handle">
			<x path="eval.luv.Handle"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Returns `true` if the handle is closing or closed, `false` otherwise.

		Note: This function should only be used between the initialization of
		the handle and the arrival of the close callback.</haxe_doc>
	</isClosing>
	<ref public="1" set="method" static="1">
		<f a="handle">
			<x path="eval.luv.Handle"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Reference the given handle.

		@see https://aantron.github.io/luv/luv/Luv/Handle/#val-ref</haxe_doc>
	</ref>
	<unref public="1" set="method" static="1">
		<f a="handle">
			<x path="eval.luv.Handle"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Un-reference the given handle.

		@see https://aantron.github.io/luv/luv/Luv/Handle/#val-unref</haxe_doc>
	</unref>
	<hasRef public="1" set="method" static="1">
		<f a="handle">
			<x path="eval.luv.Handle"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Returns `true` if the handle referenced, `false` otherwise.

		@see https://aantron.github.io/luv/luv/Luv/Handle/#val-has_ref</haxe_doc>
	</hasRef>
	<sendBufferSize public="1" set="method" static="1">
		<f a="handle">
			<x path="eval.luv.SocketHandle"/>
			<e path="eval.luv.Result"><x path="Int"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Gets the size of the OS send buffer for a socket.

		@see https://aantron.github.io/luv/luv/Luv/Handle/#val-send_buffer_size</haxe_doc>
	</sendBufferSize>
	<setSendBufferSize public="1" set="method" static="1">
		<f a="handle:size">
			<x path="eval.luv.SocketHandle"/>
			<x path="Int"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets the size of the OS send buffer for a socket.

		@see https://aantron.github.io/luv/luv/Luv/Handle/#val-set_send_buffer_size</haxe_doc>
	</setSendBufferSize>
	<recvBufferSize public="1" set="method" static="1">
		<f a="handle">
			<x path="eval.luv.SocketHandle"/>
			<e path="eval.luv.Result"><x path="Int"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Gets the size of the OS receive buffer for a socket.

		@see https://aantron.github.io/luv/luv/Luv/Handle/#val-recv_buffer_size</haxe_doc>
	</recvBufferSize>
	<setRecvBufferSize public="1" set="method" static="1">
		<f a="handle:size">
			<x path="eval.luv.SocketHandle"/>
			<x path="Int"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets the size of the OS receive buffer for a socket.

		@see https://aantron.github.io/luv/luv/Luv/Handle/#val-set_recv_buffer_size</haxe_doc>
	</setRecvBufferSize>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Handle.Handle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Handle.hx" private="1" module="eval.luv.Handle" final="1">
		<close public="1" set="method" static="1">
			<f a="handle:callback">
				<x path="eval.luv.Handle"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Closes the given handle.</haxe_doc>
		</close>
		<isActive public="1" set="method" static="1">
			<f a="handle">
				<x path="eval.luv.Handle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Returns `true` if the handle is active, `false` otherwise.</haxe_doc>
		</isActive>
		<isClosing public="1" set="method" static="1">
			<f a="handle">
				<x path="eval.luv.Handle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Returns `true` if the handle is closing or closed, `false` otherwise.

		Note: This function should only be used between the initialization of
		the handle and the arrival of the close callback.</haxe_doc>
		</isClosing>
		<ref public="1" set="method" static="1">
			<f a="handle">
				<x path="eval.luv.Handle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Reference the given handle.

		@see https://aantron.github.io/luv/luv/Luv/Handle/#val-ref</haxe_doc>
		</ref>
		<unref public="1" set="method" static="1">
			<f a="handle">
				<x path="eval.luv.Handle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Un-reference the given handle.

		@see https://aantron.github.io/luv/luv/Luv/Handle/#val-unref</haxe_doc>
		</unref>
		<hasRef public="1" set="method" static="1">
			<f a="handle">
				<x path="eval.luv.Handle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Returns `true` if the handle referenced, `false` otherwise.

		@see https://aantron.github.io/luv/luv/Luv/Handle/#val-has_ref</haxe_doc>
		</hasRef>
		<sendBufferSize public="1" set="method" static="1">
			<f a="handle">
				<x path="eval.luv.SocketHandle"/>
				<e path="eval.luv.Result"><x path="Int"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Gets the size of the OS send buffer for a socket.

		@see https://aantron.github.io/luv/luv/Luv/Handle/#val-send_buffer_size</haxe_doc>
		</sendBufferSize>
		<setSendBufferSize public="1" set="method" static="1">
			<f a="handle:size">
				<x path="eval.luv.SocketHandle"/>
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets the size of the OS send buffer for a socket.

		@see https://aantron.github.io/luv/luv/Luv/Handle/#val-set_send_buffer_size</haxe_doc>
		</setSendBufferSize>
		<recvBufferSize public="1" set="method" static="1">
			<f a="handle">
				<x path="eval.luv.SocketHandle"/>
				<e path="eval.luv.Result"><x path="Int"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Gets the size of the OS receive buffer for a socket.

		@see https://aantron.github.io/luv/luv/Luv/Handle/#val-recv_buffer_size</haxe_doc>
		</recvBufferSize>
		<setRecvBufferSize public="1" set="method" static="1">
			<f a="handle:size">
				<x path="eval.luv.SocketHandle"/>
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets the size of the OS receive buffer for a socket.

		@see https://aantron.github.io/luv/luv/Luv/Handle/#val-set_recv_buffer_size</haxe_doc>
		</setRecvBufferSize>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="eval.luv.Idle" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Idle.hx">
		<this><x path="eval.luv.Idle"/></this>
		<to><icast><x path="eval.luv.Handle"/></icast></to>
		<haxe_doc>Per-iteration callback.

	@see https://aantron.github.io/luv/luv/Luv/Idle</haxe_doc>
		<meta>
			<m n=":using"><e>eval.luv.Handle</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="eval.luv._Idle.Idle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Idle.hx" private="1" module="eval.luv.Idle" final="1">
	<init public="1" set="method" static="1">
		<f a="loop">
			<x path="eval.luv.Loop"/>
			<e path="eval.luv.Result"><x path="eval.luv.Idle"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocate and initialize an idle handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
	</init>
	<start public="1" set="method" static="1">
		<f a="this:callback">
			<x path="eval.luv.Idle"/>
			<f a=""><x path="Void"/></f>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Starts the handle with the given callback.</haxe_doc>
	</start>
	<stop public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Idle"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Stops the handle.</haxe_doc>
	</stop>
	<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Idle.Idle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Idle.hx" private="1" module="eval.luv.Idle" final="1">
		<init public="1" set="method" static="1">
			<f a="loop">
				<x path="eval.luv.Loop"/>
				<e path="eval.luv.Result"><x path="eval.luv.Idle"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocate and initialize an idle handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
		</init>
		<start public="1" set="method" static="1">
			<f a="this:callback">
				<x path="eval.luv.Idle"/>
				<f a=""><x path="Void"/></f>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Starts the handle with the given callback.</haxe_doc>
		</start>
		<stop public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Idle"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Stops the handle.</haxe_doc>
		</stop>
		<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
	</class>
	<abstract path="eval.luv.RunMode" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Loop.hx" module="eval.luv.Loop">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._Loop.RunMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Loop.hx" private="1" module="eval.luv.Loop" extern="1" final="1">
	<DEFAULT public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
		<x path="eval.luv.RunMode"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Runs the event loop until there are no more active and referenced handles or requests.</haxe_doc>
	</DEFAULT>
	<ONCE public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="eval.luv.RunMode"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Poll for i/o once. Note that this mode blocks if there are no pending callbacks.</haxe_doc>
	</ONCE>
	<NOWAIT public="1" get="inline" set="null" expr="cast 2" line="9" static="1">
		<x path="eval.luv.RunMode"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Poll for i/o once but don't block if there are no pending callbacks.</haxe_doc>
	</NOWAIT>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Loop.RunMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Loop.hx" private="1" module="eval.luv.Loop" extern="1" final="1">
		<DEFAULT public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
			<x path="eval.luv.RunMode"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Runs the event loop until there are no more active and referenced handles or requests.</haxe_doc>
		</DEFAULT>
		<ONCE public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="eval.luv.RunMode"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Poll for i/o once. Note that this mode blocks if there are no pending callbacks.</haxe_doc>
		</ONCE>
		<NOWAIT public="1" get="inline" set="null" expr="cast 2" line="9" static="1">
			<x path="eval.luv.RunMode"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Poll for i/o once but don't block if there are no pending callbacks.</haxe_doc>
		</NOWAIT>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="eval.luv.LoopOption" params="T" file="/home/runner/work/haxe/haxe/std/eval/luv/Loop.hx" module="eval.luv.Loop">
		<this><x path="Int"/></this>
		<haxe_doc>Configuration options.
	@see http://docs.libuv.org/en/v1.x/loop.html#c.uv_loop_configure</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._Loop.LoopOption_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Loop.hx" private="1" module="eval.luv.Loop" final="1">
	<sigprof final="1" public="1" set="null" static="1"><x path="Int"/></sigprof>
	<LOOP_BLOCK_SIGNAL public="1" get="inline" set="null" expr="cast 0" line="19" static="1">
		<x path="eval.luv.LoopOption"><x path="Int"/></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LOOP_BLOCK_SIGNAL>
	<METRICS_IDLE_TIME public="1" get="inline" set="null" expr="cast 1" line="20" static="1">
		<x path="eval.luv.LoopOption"><x path="eval.luv.NoData"/></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</METRICS_IDLE_TIME>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Loop.LoopOption_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Loop.hx" private="1" module="eval.luv.Loop" final="1">
		<sigprof final="1" public="1" set="null" static="1"><x path="Int"/></sigprof>
		<LOOP_BLOCK_SIGNAL public="1" get="inline" set="null" expr="cast 0" line="19" static="1">
			<x path="eval.luv.LoopOption"><x path="Int"/></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LOOP_BLOCK_SIGNAL>
		<METRICS_IDLE_TIME public="1" get="inline" set="null" expr="cast 1" line="20" static="1">
			<x path="eval.luv.LoopOption"><x path="eval.luv.NoData"/></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</METRICS_IDLE_TIME>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="eval.luv.Loop" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Loop.hx">
		<from><icast field="fromHaxeEventLoop"><c path="sys.thread.EventLoop"/></icast></from>
		<this><x path="eval.luv.Loop"/></this>
		<haxe_doc>Event loops.

	@see https://aantron.github.io/luv/luv/Luv/Loop

	Haxe event loops define an implicit cast to libuv loops. That is, you can use
	`sys.thread.Thread.current().events` in any place where `eval.luv.Loop` is
	expected.</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.luv._Loop.Loop_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Loop.hx" private="1" module="eval.luv.Loop" final="1">
	<fromHaxeEventLoop get="inline" set="null" line="34" static="1">
		<f a="events">
			<c path="sys.thread.EventLoop"/>
			<x path="eval.luv.Loop"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromHaxeEventLoop>
	<defaultLoop public="1" set="method" static="1">
		<f a=""><x path="eval.luv.Loop"/></f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Returns the default event loop.</haxe_doc>
	</defaultLoop>
	<init public="1" set="method" static="1">
		<f a=""><e path="eval.luv.Result"><x path="eval.luv.Loop"/></e></f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocates and initializes a new event loop.</haxe_doc>
	</init>
	<libraryShutdown public="1" set="method" static="1">
		<f a=""><x path="Void"/></f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Releases any state libuv is holding on to.

		Normally there's no need to do this manually.

		Warning! Only call `Loop.libraryShutdown()` once.
		Warning! Don’t call `Loop.libraryShutdown()` when there are still event loops or I/O requests active.
		Warning! Don’t call libuv functions after calling `Loop.libraryShutdown()`.</haxe_doc>
	</libraryShutdown>
	<run public="1" set="method" static="1">
		<f a="this:mode">
			<x path="eval.luv.Loop"/>
			<x path="eval.luv.RunMode"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Runs an event loop.</haxe_doc>
	</run>
	<close public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Loop"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Releases resources associated with an event loop.</haxe_doc>
	</close>
	<alive public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Loop"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Indicates whether the loop is monitoring any activity.</haxe_doc>
	</alive>
	<stop public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Loop"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Stops an event loop as soon as possible.</haxe_doc>
	</stop>
	<now public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Loop"/>
			<x path="eval.integers.UInt64"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Returns the cached loop timestamp.</haxe_doc>
	</now>
	<updateTime public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Loop"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Updates the cached loop timestamp.</haxe_doc>
	</updateTime>
	<configure public="1" params="T" set="method" static="1">
		<f a="this:option:value">
			<x path="eval.luv.Loop"/>
			<x path="eval.luv.LoopOption"><c path="configure.T"/></x>
			<c path="configure.T"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets the loop option.</haxe_doc>
	</configure>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Loop.Loop_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Loop.hx" private="1" module="eval.luv.Loop" final="1">
		<fromHaxeEventLoop get="inline" set="null" line="34" static="1">
			<f a="events">
				<c path="sys.thread.EventLoop"/>
				<x path="eval.luv.Loop"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromHaxeEventLoop>
		<defaultLoop public="1" set="method" static="1">
			<f a=""><x path="eval.luv.Loop"/></f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Returns the default event loop.</haxe_doc>
		</defaultLoop>
		<init public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><x path="eval.luv.Loop"/></e></f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocates and initializes a new event loop.</haxe_doc>
		</init>
		<libraryShutdown public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Releases any state libuv is holding on to.

		Normally there's no need to do this manually.

		Warning! Only call `Loop.libraryShutdown()` once.
		Warning! Don’t call `Loop.libraryShutdown()` when there are still event loops or I/O requests active.
		Warning! Don’t call libuv functions after calling `Loop.libraryShutdown()`.</haxe_doc>
		</libraryShutdown>
		<run public="1" set="method" static="1">
			<f a="this:mode">
				<x path="eval.luv.Loop"/>
				<x path="eval.luv.RunMode"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Runs an event loop.</haxe_doc>
		</run>
		<close public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Loop"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Releases resources associated with an event loop.</haxe_doc>
		</close>
		<alive public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Loop"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Indicates whether the loop is monitoring any activity.</haxe_doc>
		</alive>
		<stop public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Loop"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Stops an event loop as soon as possible.</haxe_doc>
		</stop>
		<now public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Loop"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Returns the cached loop timestamp.</haxe_doc>
		</now>
		<updateTime public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Loop"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Updates the cached loop timestamp.</haxe_doc>
		</updateTime>
		<configure public="1" params="T" set="method" static="1">
			<f a="this:option:value">
				<x path="eval.luv.Loop"/>
				<x path="eval.luv.LoopOption"><c path="configure.T"/></x>
				<c path="configure.T"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets the loop option.</haxe_doc>
		</configure>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.Exception" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/haxe/Exception.hx">
		<caught set="method" line="17" static="1"><f a="value">
	<x path="Any"/>
	<c path="haxe.Exception"/>
</f></caught>
		<thrown set="method" line="28" static="1"><f a="value">
	<x path="Any"/>
	<x path="Any"/>
</f></thrown>
		<message public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Exception message.</haxe_doc>
		</message>
		<stack public="1" get="accessor" set="null">
			<x path="haxe.CallStack"/>
			<haxe_doc>The call stack at the moment of the exception creation.</haxe_doc>
		</stack>
		<previous public="1" get="accessor" set="null">
			<x path="Null"><c path="haxe.Exception"/></x>
			<haxe_doc>Contains an exception, which was passed to `previous` constructor argument.</haxe_doc>
		</previous>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__exceptionMessage>
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__exceptionMessage>
		<__exceptionStack>
			<x path="Null"><x path="haxe.CallStack"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__exceptionStack>
		<__nativeStack>
			<x path="haxe.CallStack"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeStack>
		<__skipStack expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
			</meta>
		</__skipStack>
		<__nativeException>
			<x path="Any"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<unwrap set="method" line="50"><f a=""><x path="Any"/></f></unwrap>
		<toString public="1" set="method" line="55">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.Exception.thrown"</e></m></meta>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<details public="1" set="method" line="59">
			<f a=""><c path="String"/></f>
			<haxe_doc>Detailed exception description.

		Includes message, stack and the chain of previous exceptions (if set).</haxe_doc>
		</details>
		<__shiftStack get="inline" set="null" line="65">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
			</meta>
		</__shiftStack>
		<__unshiftStack get="inline" set="null" line="71">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
			</meta>
		</__unshiftStack>
		<get_message set="method" line="75"><f a=""><c path="String"/></f></get_message>
		<get_previous set="method" line="79"><f a=""><x path="Null"><c path="haxe.Exception"/></x></f></get_previous>
		<get_native final="1" set="method" line="83"><f a=""><x path="Any"/></f></get_native>
		<get_stack set="method" line="87"><f a=""><x path="haxe.CallStack"/></f></get_stack>
		<new public="1" set="method" line="38">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="eval.luv.LuvException" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/LuvException.hx">
		<extends path="haxe.Exception"/>
		<error final="1" public="1">
			<x path="eval.luv.UVError"/>
			<haxe_doc>The error.</haxe_doc>
		</error>
		<new public="1" set="method" line="15">
			<f a="error:?message:?previous">
				<x path="eval.luv.UVError"/>
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Instantiates an error with given message and position.</haxe_doc>
		</new>
		<haxe_doc>Exceptions thrown by functions in `eval.luv` package.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="eval.luv.Metrics" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Metrics.hx" extern="1">
		<idleTime public="1" set="method" static="1">
			<f a="loop">
				<x path="eval.luv.Loop"/>
				<x path="eval.integers.UInt64"/>
			</f>
			<haxe_doc>Retrieves the amount of time the loop has been blocked waiting in the kernel.</haxe_doc>
		</idleTime>
		<haxe_doc>Metrics.

	@see https://aantron.github.io/luv/luv/Luv/Metrics</haxe_doc>
	</class>
	<abstract path="eval.luv.Mutex" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Mutex.hx">
		<this><x path="eval.luv.Mutex"/></this>
		<haxe_doc>Mutexes.

	@see https://aantron.github.io/luv/luv/Luv/Mutex</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.luv._Mutex.Mutex_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Mutex.hx" private="1" module="eval.luv.Mutex" final="1">
	<init public="1" set="method" static="1">
		<f a="?recursive">
			<x path="Bool"/>
			<e path="eval.luv.Result"><x path="eval.luv.Mutex"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocates and initializes a mutex.</haxe_doc>
	</init>
	<destroy public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Mutex"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Cleans up a mutex.</haxe_doc>
	</destroy>
	<lock public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Mutex"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Takes the mutex.

		The calling thread is blocked until it obtains the mutex.</haxe_doc>
	</lock>
	<tryLock public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Mutex"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Tries to take the mutex without blocking.</haxe_doc>
	</tryLock>
	<unlock public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Mutex"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Releases the mutex.</haxe_doc>
	</unlock>
</class></impl>
	</abstract>
	<class path="eval.luv._Mutex.Mutex_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Mutex.hx" private="1" module="eval.luv.Mutex" final="1">
		<init public="1" set="method" static="1">
			<f a="?recursive">
				<x path="Bool"/>
				<e path="eval.luv.Result"><x path="eval.luv.Mutex"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocates and initializes a mutex.</haxe_doc>
		</init>
		<destroy public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Mutex"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Cleans up a mutex.</haxe_doc>
		</destroy>
		<lock public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Mutex"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Takes the mutex.

		The calling thread is blocked until it obtains the mutex.</haxe_doc>
		</lock>
		<tryLock public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Mutex"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Tries to take the mutex without blocking.</haxe_doc>
		</tryLock>
		<unlock public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Mutex"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Releases the mutex.</haxe_doc>
		</unlock>
	</class>
	<typedef path="eval.luv.InterfaceAddress" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Network.hx" module="eval.luv.Network"><a>
	<physical><x path="eval.NativeString"/></physical>
	<netmask><x path="eval.luv.SockAddr"/></netmask>
	<name><c path="String"/></name>
	<isInternal><x path="Bool"/></isInternal>
	<address><x path="eval.luv.SockAddr"/></address>
</a></typedef>
	<class path="eval.luv.Network" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Network.hx" extern="1">
		<interfaceAddresses public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><c path="Array"><t path="eval.luv.InterfaceAddress"/></c></e></f>
			<haxe_doc>Lists network interface addresses.</haxe_doc>
		</interfaceAddresses>
		<ifIndexToName public="1" set="method" static="1">
			<f a="index">
				<x path="Int"/>
				<e path="eval.luv.Result"><c path="String"/></e>
			</f>
			<haxe_doc>Retrieves a network interface name.</haxe_doc>
		</ifIndexToName>
		<ifIndexToIid public="1" set="method" static="1">
			<f a="index">
				<x path="Int"/>
				<e path="eval.luv.Result"><c path="String"/></e>
			</f>
			<haxe_doc>Retrieves a network interface identifier suitable for use in an IPv6 scoped address.</haxe_doc>
		</ifIndexToIid>
		<getHostName public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><c path="String"/></e></f>
			<haxe_doc>Evaluates to the system's hostname.</haxe_doc>
		</getHostName>
		<haxe_doc>Network interfaces and hostname.

	@see https://aantron.github.io/luv/luv/Luv/Network</haxe_doc>
	</class>
	<abstract path="eval.luv.Once" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Once.hx">
		<this><x path="eval.luv.Once"/></this>
		<haxe_doc>Once-only initialization.

	@see https://aantron.github.io/luv/luv/Luv/Once</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.luv._Once.Once_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Once.hx" private="1" module="eval.luv.Once" final="1">
	<init public="1" set="method" static="1">
		<f a=""><e path="eval.luv.Result"><x path="eval.luv.Once"/></e></f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocates and initializes a once-only barrier.</haxe_doc>
	</init>
	<once public="1" set="method" static="1">
		<f a="this:callback">
			<x path="eval.luv.Once"/>
			<f a=""><x path="Void"/></f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Guards the given callback to be called only once.</haxe_doc>
	</once>
</class></impl>
	</abstract>
	<class path="eval.luv._Once.Once_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Once.hx" private="1" module="eval.luv.Once" final="1">
		<init public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><x path="eval.luv.Once"/></e></f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocates and initializes a once-only barrier.</haxe_doc>
		</init>
		<once public="1" set="method" static="1">
			<f a="this:callback">
				<x path="eval.luv.Once"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Guards the given callback to be called only once.</haxe_doc>
		</once>
	</class>
	<abstract path="eval.luv.OsFd" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/OsFd.hx">
		<this><x path="eval.luv.OsFd"/></this>
		<haxe_doc>@see https://aantron.github.io/luv/luv/Luv/Os_fd/Fd</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="eval.luv.OsSocket" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/OsSocket.hx">
		<this><x path="eval.luv.OsSocket"/></this>
		<haxe_doc>@see https://aantron.github.io/luv/luv/Luv/Os_fd/Socket</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<typedef path="eval.luv.PasswdData" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Passwd.hx" module="eval.luv.Passwd"><a>
	<username><c path="String"/></username>
	<uid><x path="Int"/></uid>
	<shell><x path="Null"><c path="String"/></x></shell>
	<homedir><x path="eval.NativeString"/></homedir>
	<gid><x path="Int"/></gid>
</a></typedef>
	<class path="eval.luv.Passwd" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Passwd.hx" extern="1">
		<getPasswd public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><t path="eval.luv.PasswdData"/></e></f>
			<haxe_doc>Gets passwd entry for the current user.</haxe_doc>
		</getPasswd>
		<haxe_doc>Current user information.

	@see https://aantron.github.io/luv/luv/Luv/Passwd</haxe_doc>
	</class>
	<class path="eval.luv.Path" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Path.hx" extern="1">
		<exePath public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><x path="eval.NativeString"/></e></f>
			<haxe_doc>Evaluates to the executable's path.
		It's always the path to the Haxe compiler.</haxe_doc>
		</exePath>
		<cwd public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><x path="eval.NativeString"/></e></f>
			<haxe_doc>Evaluates to the current working directory.</haxe_doc>
		</cwd>
		<chdir public="1" set="method" static="1">
			<f a="dir">
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<haxe_doc>Changes the current working directory.</haxe_doc>
		</chdir>
		<homedir public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><x path="eval.NativeString"/></e></f>
			<haxe_doc>Evaluates to the path of the home directory.</haxe_doc>
		</homedir>
		<tmpdir public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><x path="eval.NativeString"/></e></f>
			<haxe_doc>Evaluates to the path of the temporary directory.</haxe_doc>
		</tmpdir>
		<haxe_doc>Relevant directories.

	@see https://aantron.github.io/luv/luv/Luv/Path</haxe_doc>
	</class>
	<class path="eval.luv.Pid" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Pid.hx" extern="1">
		<getPid public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Evaluates to the pid of the current process.</haxe_doc>
		</getPid>
		<getPPid public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Evaluates to the pid of the parent process.</haxe_doc>
		</getPPid>
		<haxe_doc>Process ids.

	@see https://aantron.github.io/luv/luv/Luv/Pid</haxe_doc>
	</class>
	<abstract path="eval.luv.PipeMode" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Pipe.hx" module="eval.luv.Pipe">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._Pipe.PipeMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Pipe.hx" private="1" module="eval.luv.Pipe" extern="1" final="1">
	<READ public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="eval.luv.PipeMode"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</READ>
	<WRITE public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="eval.luv.PipeMode"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WRITE>
	<READ_WRITE public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="eval.luv.PipeMode"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</READ_WRITE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Pipe.PipeMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Pipe.hx" private="1" module="eval.luv.Pipe" extern="1" final="1">
		<READ public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="eval.luv.PipeMode"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</READ>
		<WRITE public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="eval.luv.PipeMode"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WRITE>
		<READ_WRITE public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="eval.luv.PipeMode"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</READ_WRITE>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="eval.luv.ReceiveHandle" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Pipe.hx" module="eval.luv.Pipe">
		<NONE/>
		<TCP a="associate"><f a="tcp">
	<x path="eval.luv.Tcp"/>
	<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
</f></TCP>
		<PIPE a="associate"><f a="pipe">
	<x path="eval.luv.Pipe"/>
	<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
</f></PIPE>
	</enum>
	<abstract path="eval.luv.Pipe" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Pipe.hx">
		<this><x path="eval.luv.Pipe"/></this>
		<to>
			<icast><x path="eval.luv.Handle"/></icast>
			<icast><x path="eval.luv.Stream"/></icast>
			<icast><x path="eval.luv.TStream"><x path="eval.luv.Pipe"/></x></icast>
			<icast><x path="eval.luv.SocketHandle"/></icast>
		</to>
		<haxe_doc>Pipes

	@see https://aantron.github.io/luv/luv/Luv/Pipe</haxe_doc>
		<meta>
			<m n=":using"><e>eval.luv.Handle</e></m>
			<m n=":using"><e>eval.luv.Stream</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="eval.luv._Pipe.Pipe_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Pipe.hx" private="1" module="eval.luv.Pipe" final="1">
	<init public="1" set="method" static="1">
		<f a="loop:?forHandlePassing" v=":false">
			<x path="eval.luv.Loop"/>
			<x path="Bool"/>
			<e path="eval.luv.Result"><x path="eval.luv.Pipe"/></e>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":value"><e>{ forHandlePassing : false }</e></m>
		</meta>
		<haxe_doc>Allocates and initializes a pipe.

		The pipe is not yet connected to anything at this point.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
	</init>
	<bind public="1" set="method" static="1">
		<f a="this:nameOrAddress">
			<x path="eval.luv.Pipe"/>
			<x path="eval.NativeString"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Assigns a pipe a name or an address.</haxe_doc>
	</bind>
	<connect public="1" set="method" static="1">
		<f a="this:target:callback">
			<x path="eval.luv.Pipe"/>
			<x path="eval.NativeString"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Connects to the pipe at the given name or address.</haxe_doc>
	</connect>
	<getSockName public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Pipe"/>
			<e path="eval.luv.Result"><x path="eval.NativeString"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Retrieves the name or address assigned to the pipe.</haxe_doc>
	</getSockName>
	<getPeerName public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Pipe"/>
			<e path="eval.luv.Result"><x path="eval.NativeString"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Retrieves the name or address of the pipe's peer.</haxe_doc>
	</getPeerName>
	<pendingInstances public="1" set="method" static="1">
		<f a="this:amount">
			<x path="eval.luv.Pipe"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Set the number of pending pipe instance handles when the pipe server is
		waiting for connections.</haxe_doc>
	</pendingInstances>
	<receiveHandle public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Pipe"/>
			<e path="eval.luv.ReceiveHandle"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Receives a file descriptor over the given pipe.

		File descriptors are sent using the `sendHandle` argument of `eval.luv.Stream.write2`.
		On the receiving end, call `eval.luv.Stream.readStart`. When that function
		calls its callback, there may be file descriptors in the pipe, in addition
		to the ordinary data provided to the callback.

		To check, call this function `eval.luv.Pipe.recieveHandle` in a loop until
		it returns `NONE`. Each time it returns `TCP(associate)` or `PIPE(associate)`,
		create an appropriate handle using either `eval.luv.TCP.init` or `eval.uv.Pipe.init`,
		and call `associate` to receive the file descriptor and associate it with handle.</haxe_doc>
	</receiveHandle>
	<chmod public="1" set="method" static="1">
		<f a="this:mode">
			<x path="eval.luv.Pipe"/>
			<x path="eval.luv.PipeMode"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets pipe permissions.</haxe_doc>
	</chmod>
	<meta>
		<m n=":using"><e>eval.luv.Stream</e></m>
		<m n=":using"><e>eval.luv.Handle</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Pipe.Pipe_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Pipe.hx" private="1" module="eval.luv.Pipe" final="1">
		<init public="1" set="method" static="1">
			<f a="loop:?forHandlePassing" v=":false">
				<x path="eval.luv.Loop"/>
				<x path="Bool"/>
				<e path="eval.luv.Result"><x path="eval.luv.Pipe"/></e>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":value"><e>{ forHandlePassing : false }</e></m>
			</meta>
			<haxe_doc>Allocates and initializes a pipe.

		The pipe is not yet connected to anything at this point.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
		</init>
		<bind public="1" set="method" static="1">
			<f a="this:nameOrAddress">
				<x path="eval.luv.Pipe"/>
				<x path="eval.NativeString"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Assigns a pipe a name or an address.</haxe_doc>
		</bind>
		<connect public="1" set="method" static="1">
			<f a="this:target:callback">
				<x path="eval.luv.Pipe"/>
				<x path="eval.NativeString"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Connects to the pipe at the given name or address.</haxe_doc>
		</connect>
		<getSockName public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Pipe"/>
				<e path="eval.luv.Result"><x path="eval.NativeString"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Retrieves the name or address assigned to the pipe.</haxe_doc>
		</getSockName>
		<getPeerName public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Pipe"/>
				<e path="eval.luv.Result"><x path="eval.NativeString"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Retrieves the name or address of the pipe's peer.</haxe_doc>
		</getPeerName>
		<pendingInstances public="1" set="method" static="1">
			<f a="this:amount">
				<x path="eval.luv.Pipe"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Set the number of pending pipe instance handles when the pipe server is
		waiting for connections.</haxe_doc>
		</pendingInstances>
		<receiveHandle public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Pipe"/>
				<e path="eval.luv.ReceiveHandle"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Receives a file descriptor over the given pipe.

		File descriptors are sent using the `sendHandle` argument of `eval.luv.Stream.write2`.
		On the receiving end, call `eval.luv.Stream.readStart`. When that function
		calls its callback, there may be file descriptors in the pipe, in addition
		to the ordinary data provided to the callback.

		To check, call this function `eval.luv.Pipe.recieveHandle` in a loop until
		it returns `NONE`. Each time it returns `TCP(associate)` or `PIPE(associate)`,
		create an appropriate handle using either `eval.luv.TCP.init` or `eval.uv.Pipe.init`,
		and call `associate` to receive the file descriptor and associate it with handle.</haxe_doc>
		</receiveHandle>
		<chmod public="1" set="method" static="1">
			<f a="this:mode">
				<x path="eval.luv.Pipe"/>
				<x path="eval.luv.PipeMode"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets pipe permissions.</haxe_doc>
		</chmod>
		<meta>
			<m n=":using"><e>eval.luv.Stream</e></m>
			<m n=":using"><e>eval.luv.Handle</e></m>
		</meta>
	</class>
	<abstract path="eval.luv.Prepare" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Prepare.hx">
		<this><x path="eval.luv.Prepare"/></this>
		<to><icast><x path="eval.luv.Handle"/></icast></to>
		<haxe_doc>Pre-I/O callback.

	@see https://aantron.github.io/luv/luv/Luv/Prepare</haxe_doc>
		<meta>
			<m n=":using"><e>eval.luv.Handle</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="eval.luv._Prepare.Prepare_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Prepare.hx" private="1" module="eval.luv.Prepare" final="1">
	<init public="1" set="method" static="1">
		<f a="loop">
			<x path="eval.luv.Loop"/>
			<e path="eval.luv.Result"><x path="eval.luv.Prepare"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocate and initialize a prepare handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
	</init>
	<start public="1" set="method" static="1">
		<f a="this:callback">
			<x path="eval.luv.Prepare"/>
			<f a=""><x path="Void"/></f>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Starts the handle with the given callback.</haxe_doc>
	</start>
	<stop public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Prepare"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Stops the handle.</haxe_doc>
	</stop>
	<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Prepare.Prepare_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Prepare.hx" private="1" module="eval.luv.Prepare" final="1">
		<init public="1" set="method" static="1">
			<f a="loop">
				<x path="eval.luv.Loop"/>
				<e path="eval.luv.Result"><x path="eval.luv.Prepare"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocate and initialize a prepare handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
		</init>
		<start public="1" set="method" static="1">
			<f a="this:callback">
				<x path="eval.luv.Prepare"/>
				<f a=""><x path="Void"/></f>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Starts the handle with the given callback.</haxe_doc>
		</start>
		<stop public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Prepare"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Stops the handle.</haxe_doc>
		</stop>
		<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
	</class>
	<abstract path="eval.luv.Redirection" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Process.hx" module="eval.luv.Process">
		<this><x path="eval.luv.Redirection"/></this>
		<haxe_doc>File descriptor redirections for use with `eval.luv.Process.spawn`</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<typedef path="eval.luv.ProcessOptions" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Process.hx" module="eval.luv.Process">
		<a>
			<workingDirectory>
				<x path="Null"><x path="eval.NativeString"/></x>
				<meta><m n=":optional"/></meta>
			</workingDirectory>
			<windowsVerbatimArguments>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</windowsVerbatimArguments>
			<windowsHideGui>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</windowsHideGui>
			<windowsHideConsole>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</windowsHideConsole>
			<windowsHide>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</windowsHide>
			<uid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</uid>
			<redirect>
				<x path="Null"><c path="Array"><x path="eval.luv.Redirection"/></c></x>
				<meta><m n=":optional"/></meta>
			</redirect>
			<onExit>
				<x path="Null"><f a="p:exitStatus:termSignal">
	<x path="eval.luv.Process"/>
	<x path="eval.integers.Int64"/>
	<x path="Int"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
			</onExit>
			<gid>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</gid>
			<environment>
				<x path="Null"><t path="Map">
	<c path="String"/>
	<x path="eval.NativeString"/>
</t></x>
				<meta><m n=":optional"/></meta>
			</environment>
			<detached>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</detached>
		</a>
		<haxe_doc>Options for spawning the process.</haxe_doc>
	</typedef>
	<abstract path="eval.luv.Process" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Process.hx">
		<this><x path="eval.luv.Process"/></this>
		<to><icast><x path="eval.luv.Handle"/></icast></to>
		<haxe_doc>Subprocesses.

	@see https://aantron.github.io/luv/luv/Luv/Process</haxe_doc>
		<meta>
			<m n=":using"><e>eval.luv.Handle</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="eval.luv._Process.Process_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Process.hx" private="1" module="eval.luv.Process" final="1">
	<stdin final="1" public="1" set="null" static="1"><x path="Int"/></stdin>
	<stdout final="1" public="1" set="null" static="1"><x path="Int"/></stdout>
	<stderr final="1" public="1" set="null" static="1"><x path="Int"/></stderr>
	<toParentPipe public="1" set="method" static="1">
		<f a="fd:parentPipe:readableInChild:writableInChild:overlapped">
			<x path="Int"/>
			<x path="eval.luv.Pipe"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="eval.luv.Redirection"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Causes `fd` in the child to be connected to `toParentPipe` in the parent.

		Binds `UV_CREATE_PIPE`.

		`readableInChild` sets `UV_READABLE_PIPE`, and `writableInChild` sets `UV_WRITABLE_PIPE`.

		`overlapped` sets `UV_OVERLAPPED_PIPE`.</haxe_doc>
	</toParentPipe>
	<inheritFd public="1" set="method" static="1">
		<f a="fd:fromParentFd">
			<x path="Int"/>
			<x path="Int"/>
			<x path="eval.luv.Redirection"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Causes `fd` in the child to be connected to the same device or peer as `fromParentFd` in the parent.

		Binds `UV_INHERIT_FD`</haxe_doc>
	</inheritFd>
	<inheritStream public="1" set="method" static="1">
		<f a="fd:fromParentStream">
			<x path="Int"/>
			<x path="eval.luv.Stream"/>
			<x path="eval.luv.Redirection"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Same as `eval.luv.Process.inheritFd`, but takes an `eval.luv.Stream` for the parent file descriptor.

		Binds `UV_INHERIT_STREAM`.</haxe_doc>
	</inheritStream>
	<spawn public="1" set="method" static="1">
		<f a="loop:cmd:args:?options">
			<x path="eval.luv.Loop"/>
			<x path="eval.NativeString"/>
			<c path="Array"><x path="eval.NativeString"/></c>
			<t path="eval.luv.ProcessOptions"/>
			<e path="eval.luv.Result"><x path="eval.luv.Process"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Starts a process.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
	</spawn>
	<disableStdioInheritance public="1" set="method" static="1">
		<f a=""><x path="Void"/></f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Disables (tries) file descriptor inheritance for inherited descriptors.</haxe_doc>
	</disableStdioInheritance>
	<killPid public="1" set="method" static="1">
		<f a="pid:sigNum">
			<x path="Int"/>
			<x path="eval.luv.SigNum"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sends the given signal to the process with the given pid.</haxe_doc>
	</killPid>
	<kill public="1" set="method" static="1">
		<f a="this:sigNum">
			<x path="eval.luv.Process"/>
			<x path="eval.luv.SigNum"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sends the given signal to the process.</haxe_doc>
	</kill>
	<pid public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Process"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Evaluates to the pid of the process.</haxe_doc>
	</pid>
	<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Process.Process_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Process.hx" private="1" module="eval.luv.Process" final="1">
		<stdin final="1" public="1" set="null" static="1"><x path="Int"/></stdin>
		<stdout final="1" public="1" set="null" static="1"><x path="Int"/></stdout>
		<stderr final="1" public="1" set="null" static="1"><x path="Int"/></stderr>
		<toParentPipe public="1" set="method" static="1">
			<f a="fd:parentPipe:readableInChild:writableInChild:overlapped">
				<x path="Int"/>
				<x path="eval.luv.Pipe"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="eval.luv.Redirection"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Causes `fd` in the child to be connected to `toParentPipe` in the parent.

		Binds `UV_CREATE_PIPE`.

		`readableInChild` sets `UV_READABLE_PIPE`, and `writableInChild` sets `UV_WRITABLE_PIPE`.

		`overlapped` sets `UV_OVERLAPPED_PIPE`.</haxe_doc>
		</toParentPipe>
		<inheritFd public="1" set="method" static="1">
			<f a="fd:fromParentFd">
				<x path="Int"/>
				<x path="Int"/>
				<x path="eval.luv.Redirection"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Causes `fd` in the child to be connected to the same device or peer as `fromParentFd` in the parent.

		Binds `UV_INHERIT_FD`</haxe_doc>
		</inheritFd>
		<inheritStream public="1" set="method" static="1">
			<f a="fd:fromParentStream">
				<x path="Int"/>
				<x path="eval.luv.Stream"/>
				<x path="eval.luv.Redirection"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Same as `eval.luv.Process.inheritFd`, but takes an `eval.luv.Stream` for the parent file descriptor.

		Binds `UV_INHERIT_STREAM`.</haxe_doc>
		</inheritStream>
		<spawn public="1" set="method" static="1">
			<f a="loop:cmd:args:?options">
				<x path="eval.luv.Loop"/>
				<x path="eval.NativeString"/>
				<c path="Array"><x path="eval.NativeString"/></c>
				<t path="eval.luv.ProcessOptions"/>
				<e path="eval.luv.Result"><x path="eval.luv.Process"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Starts a process.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
		</spawn>
		<disableStdioInheritance public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Disables (tries) file descriptor inheritance for inherited descriptors.</haxe_doc>
		</disableStdioInheritance>
		<killPid public="1" set="method" static="1">
			<f a="pid:sigNum">
				<x path="Int"/>
				<x path="eval.luv.SigNum"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sends the given signal to the process with the given pid.</haxe_doc>
		</killPid>
		<kill public="1" set="method" static="1">
			<f a="this:sigNum">
				<x path="eval.luv.Process"/>
				<x path="eval.luv.SigNum"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sends the given signal to the process.</haxe_doc>
		</kill>
		<pid public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Process"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Evaluates to the pid of the process.</haxe_doc>
		</pid>
		<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
	</class>
	<abstract path="eval.luv.RandomRequest" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Random.hx" module="eval.luv.Random">
		<this><x path="eval.luv.Request"/></this>
		<to><icast><x path="eval.luv.Request"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="eval.luv._Random.RandomRequest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Random.hx" private="1" module="eval.luv.Random" extern="1" final="1"/></impl>
	</abstract>
	<class path="eval.luv._Random.RandomRequest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Random.hx" private="1" module="eval.luv.Random" extern="1" final="1"/>
	<class path="eval.luv.Random" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Random.hx" extern="1">
		<createRequest public="1" set="method" static="1"><f a=""><x path="eval.luv.RandomRequest"/></f></createRequest>
		<random public="1" set="method" static="1">
			<f a="loop:buffer:?request:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.luv.Buffer"/>
				<x path="eval.luv.RandomRequest"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Fills the given buffer with bits from the system entropy source.</haxe_doc>
		</random>
		<haxe_doc>System entropy source.

	@see https://aantron.github.io/luv/luv/Luv/Random</haxe_doc>
	</class>
	<class path="eval.luv.RandomSync" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Random.hx" module="eval.luv.Random" extern="1"><random public="1" set="method" static="1">
	<f a="buffer">
		<x path="eval.luv.Buffer"/>
		<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
	</f>
	<haxe_doc>Fills the given buffer with bits from the system entropy source.</haxe_doc>
</random></class>
	<abstract path="eval.luv.Request" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Request.hx">
		<this><x path="eval.luv.Request"/></this>
		<haxe_doc>Requests.

	@see https://aantron.github.io/luv/luv/Luv/Request</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.luv._Request.Request_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Request.hx" private="1" module="eval.luv.Request" final="1"><cancel public="1" set="method" static="1">
	<f a="this">
		<x path="eval.luv.Request"/>
		<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
	</f>
	<meta><m n=":noExpr"/></meta>
	<haxe_doc>Tries to cancel a pending request.</haxe_doc>
</cancel></class></impl>
	</abstract>
	<class path="eval.luv._Request.Request_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Request.hx" private="1" module="eval.luv.Request" final="1"><cancel public="1" set="method" static="1">
	<f a="this">
		<x path="eval.luv.Request"/>
		<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
	</f>
	<meta><m n=":noExpr"/></meta>
	<haxe_doc>Tries to cancel a pending request.</haxe_doc>
</cancel></class>
	<typedef path="eval.luv.RUsage" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Resource.hx" module="eval.luv.Resource"><a>
	<utime><a>
	<usec><x path="eval.integers.Int64"/></usec>
	<sec><x path="eval.integers.Int64"/></sec>
</a></utime>
	<stime><a>
	<usec><x path="eval.integers.Int64"/></usec>
	<sec><x path="eval.integers.Int64"/></sec>
</a></stime>
	<oublock><x path="eval.integers.UInt64"/></oublock>
	<nvcsw><x path="eval.integers.UInt64"/></nvcsw>
	<nswap><x path="eval.integers.UInt64"/></nswap>
	<nsignals><x path="eval.integers.UInt64"/></nsignals>
	<nivcsw><x path="eval.integers.UInt64"/></nivcsw>
	<msgsnd><x path="eval.integers.UInt64"/></msgsnd>
	<msgrcv><x path="eval.integers.UInt64"/></msgrcv>
	<minflt><x path="eval.integers.UInt64"/></minflt>
	<maxrss><x path="eval.integers.UInt64"/></maxrss>
	<majflt><x path="eval.integers.UInt64"/></majflt>
	<ixrss><x path="eval.integers.UInt64"/></ixrss>
	<isrss><x path="eval.integers.UInt64"/></isrss>
	<inblock><x path="eval.integers.UInt64"/></inblock>
	<idrss><x path="eval.integers.UInt64"/></idrss>
</a></typedef>
	<class path="eval.luv.Resource" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Resource.hx" extern="1">
		<uptime public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><x path="Float"/></e></f>
			<haxe_doc>Evaluates to the current uptime.</haxe_doc>
		</uptime>
		<loadAvg public="1" set="method" static="1">
			<f a=""><c path="Array"><x path="Float"/></c></f>
			<haxe_doc>Evaluates to the load average.</haxe_doc>
		</loadAvg>
		<freeMemory public="1" set="method" static="1">
			<f a=""><x path="Null"><x path="eval.integers.UInt64"/></x></f>
			<haxe_doc>Evaluates to the amount of free memory, in bytes.
		Returns `null` when unknown.</haxe_doc>
		</freeMemory>
		<totalMemory public="1" set="method" static="1">
			<f a=""><x path="Null"><x path="eval.integers.UInt64"/></x></f>
			<haxe_doc>Evaluates to the total amount of memory, in bytes.
		Returns `null` when unknown.</haxe_doc>
		</totalMemory>
		<constrainedMemory public="1" set="method" static="1">
			<f a=""><x path="Null"><x path="eval.integers.UInt64"/></x></f>
			<haxe_doc>Gets the amount of memory available to the process (in bytes) based on
		limits imposed by the OS.
		If there is no such constraint returns `null`</haxe_doc>
		</constrainedMemory>
		<getPriority public="1" set="method" static="1">
			<f a="pid">
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="Int"/></e>
			</f>
			<haxe_doc>Evaluates to the priority of the process with the given pid.</haxe_doc>
		</getPriority>
		<setPriority public="1" set="method" static="1">
			<f a="pid:priority">
				<x path="Int"/>
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<haxe_doc>Sets the priority of the process with the given pid.</haxe_doc>
		</setPriority>
		<residentSetMemory public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><x path="eval.integers.UInt64"/></e></f>
			<haxe_doc>Evaluates to the resident set size for the current process.</haxe_doc>
		</residentSetMemory>
		<getRUsage public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><t path="eval.luv.RUsage"/></e></f>
			<haxe_doc>Gets the resource usage measures for the current process.</haxe_doc>
		</getRUsage>
		<haxe_doc>Resource usage.

	@see https://aantron.github.io/luv/luv/Luv/Resource</haxe_doc>
	</class>
	<enum path="eval.luv.Result" params="T" file="/home/runner/work/haxe/haxe/std/eval/luv/Result.hx">
		<Ok a="value">
			<c path="eval.luv.Result.T"/>
			<haxe_doc>Operation completed successfully.</haxe_doc>
		</Ok>
		<Error a="e">
			<x path="eval.luv.UVError"/>
			<haxe_doc>Operation failed.</haxe_doc>
		</Error>
		<haxe_doc>Outcome of an operation.</haxe_doc>
		<meta><m n=":using"><e>eval.luv.Result.ResultTools</e></m></meta>
	</enum>
	<abstract path="eval.luv.NoData" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Result.hx" module="eval.luv.Result">
		<this><d/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._Result.NoData_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Result.hx" private="1" module="eval.luv.Result" extern="1" final="1">
	<NoData public="1" get="inline" set="null" expr="cast null" line="15" static="1">
		<x path="eval.luv.NoData"/>
		<meta>
			<m n=":value"><e>cast null</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NoData>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Result.NoData_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Result.hx" private="1" module="eval.luv.Result" extern="1" final="1">
		<NoData public="1" get="inline" set="null" expr="cast null" line="15" static="1">
			<x path="eval.luv.NoData"/>
			<meta>
				<m n=":value"><e>cast null</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NoData>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="eval.luv.ResultTools" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Result.hx" module="eval.luv.Result">
		<resolve public="1" params="T" get="inline" set="null" line="23" static="1">
			<f a="result">
				<e path="eval.luv.Result"><c path="resolve.T"/></e>
				<c path="resolve.T"/>
			</f>
			<haxe_doc>Returns the result value on success or throws `eval.luv.LuvException`
		on failure.</haxe_doc>
		</resolve>
		<isOk public="1" params="T" get="inline" set="null" line="34" static="1">
			<f a="result">
				<e path="eval.luv.Result"><c path="isOk.T"/></e>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the result is `Ok`.
		Returns `false` if the result is `Error`.</haxe_doc>
		</isOk>
	</class>
	<abstract path="eval.luv.RwLock" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/RwLock.hx">
		<this><x path="eval.luv.RwLock"/></this>
		<haxe_doc>Read-write locks.

	@see https://aantron.github.io/luv/luv/Luv/Rwlock</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.luv._RwLock.RwLock_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/RwLock.hx" private="1" module="eval.luv.RwLock" final="1">
	<init public="1" set="method" static="1">
		<f a=""><e path="eval.luv.Result"><x path="eval.luv.RwLock"/></e></f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocates and initializes a read-write lock.</haxe_doc>
	</init>
	<destroy public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.RwLock"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Cleans up a read-write lock.</haxe_doc>
	</destroy>
	<rdLock public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.RwLock"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Takes a read-write lock for reading (shared access).</haxe_doc>
	</rdLock>
	<rdTryLock public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.RwLock"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Tries to take a read-write lock for reading without blocking.</haxe_doc>
	</rdTryLock>
	<rdUnlock public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.RwLock"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Releases a read-write lock after it was taken for reading.</haxe_doc>
	</rdUnlock>
	<wrLock public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.RwLock"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Takes a read-write lock for writing (exclusive access).</haxe_doc>
	</wrLock>
	<wrTryLock public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.RwLock"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Tries to take a read-write lock for writing without blocking.</haxe_doc>
	</wrTryLock>
	<wrUnlock public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.RwLock"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Releases a read-write lock after it was taken for writing.</haxe_doc>
	</wrUnlock>
</class></impl>
	</abstract>
	<class path="eval.luv._RwLock.RwLock_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/RwLock.hx" private="1" module="eval.luv.RwLock" final="1">
		<init public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><x path="eval.luv.RwLock"/></e></f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocates and initializes a read-write lock.</haxe_doc>
		</init>
		<destroy public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.RwLock"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Cleans up a read-write lock.</haxe_doc>
		</destroy>
		<rdLock public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.RwLock"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Takes a read-write lock for reading (shared access).</haxe_doc>
		</rdLock>
		<rdTryLock public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.RwLock"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Tries to take a read-write lock for reading without blocking.</haxe_doc>
		</rdTryLock>
		<rdUnlock public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.RwLock"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Releases a read-write lock after it was taken for reading.</haxe_doc>
		</rdUnlock>
		<wrLock public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.RwLock"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Takes a read-write lock for writing (exclusive access).</haxe_doc>
		</wrLock>
		<wrTryLock public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.RwLock"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Tries to take a read-write lock for writing without blocking.</haxe_doc>
		</wrTryLock>
		<wrUnlock public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.RwLock"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Releases a read-write lock after it was taken for writing.</haxe_doc>
		</wrUnlock>
	</class>
	<abstract path="eval.luv.Semaphore" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Semaphore.hx">
		<this><x path="eval.luv.Semaphore"/></this>
		<haxe_doc>Semaphores.

	@see https://aantron.github.io/luv/luv/Luv/Semaphore</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.luv._Semaphore.Semaphore_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Semaphore.hx" private="1" module="eval.luv.Semaphore" final="1">
	<init public="1" set="method" static="1">
		<f a="value">
			<x path="Int"/>
			<e path="eval.luv.Result"><x path="eval.luv.Semaphore"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocates and initializes a read-write lock.</haxe_doc>
	</init>
	<destroy public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Semaphore"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Cleans up a semaphore.</haxe_doc>
	</destroy>
	<post public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Semaphore"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Increments a semaphore.</haxe_doc>
	</post>
	<wait public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Semaphore"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Decrements a semaphore.</haxe_doc>
	</wait>
	<tryWait public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Semaphore"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Tries to decrement a semaphore without blocking.</haxe_doc>
	</tryWait>
</class></impl>
	</abstract>
	<class path="eval.luv._Semaphore.Semaphore_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Semaphore.hx" private="1" module="eval.luv.Semaphore" final="1">
		<init public="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.Semaphore"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocates and initializes a read-write lock.</haxe_doc>
		</init>
		<destroy public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Semaphore"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Cleans up a semaphore.</haxe_doc>
		</destroy>
		<post public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Semaphore"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Increments a semaphore.</haxe_doc>
		</post>
		<wait public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Semaphore"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Decrements a semaphore.</haxe_doc>
		</wait>
		<tryWait public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Semaphore"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Tries to decrement a semaphore without blocking.</haxe_doc>
		</tryWait>
	</class>
	<abstract path="eval.luv.SigNum" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Signal.hx" module="eval.luv.Signal">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>For the moment, the signals exposed are those that are both present on Unix
	and present or emulated by libuv on Windows.

	You can also provide a plain integer signal code instead of the values of
	this enum.

	@see https://aantron.github.io/luv/luv/Luv/Signal#signals</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._Signal.SigNum_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Signal.hx" private="1" module="eval.luv.Signal" extern="1" final="1">
	<SIGABRT public="1" set="null" static="1">
		<x path="eval.luv.SigNum"/>
		<meta><m n=":enum"/></meta>
	</SIGABRT>
	<SIGFPE public="1" set="null" static="1">
		<x path="eval.luv.SigNum"/>
		<meta><m n=":enum"/></meta>
	</SIGFPE>
	<SIGHUP public="1" set="null" static="1">
		<x path="eval.luv.SigNum"/>
		<meta><m n=":enum"/></meta>
	</SIGHUP>
	<SIGILL public="1" set="null" static="1">
		<x path="eval.luv.SigNum"/>
		<meta><m n=":enum"/></meta>
	</SIGILL>
	<SIGINT public="1" set="null" static="1">
		<x path="eval.luv.SigNum"/>
		<meta><m n=":enum"/></meta>
	</SIGINT>
	<SIGKILL public="1" set="null" static="1">
		<x path="eval.luv.SigNum"/>
		<meta><m n=":enum"/></meta>
	</SIGKILL>
	<SIGSEGV public="1" set="null" static="1">
		<x path="eval.luv.SigNum"/>
		<meta><m n=":enum"/></meta>
	</SIGSEGV>
	<SIGTERM public="1" set="null" static="1">
		<x path="eval.luv.SigNum"/>
		<meta><m n=":enum"/></meta>
	</SIGTERM>
	<SIGWINCH public="1" set="null" static="1">
		<x path="eval.luv.SigNum"/>
		<meta><m n=":enum"/></meta>
	</SIGWINCH>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Signal.SigNum_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Signal.hx" private="1" module="eval.luv.Signal" extern="1" final="1">
		<SIGABRT public="1" set="null" static="1">
			<x path="eval.luv.SigNum"/>
			<meta><m n=":enum"/></meta>
		</SIGABRT>
		<SIGFPE public="1" set="null" static="1">
			<x path="eval.luv.SigNum"/>
			<meta><m n=":enum"/></meta>
		</SIGFPE>
		<SIGHUP public="1" set="null" static="1">
			<x path="eval.luv.SigNum"/>
			<meta><m n=":enum"/></meta>
		</SIGHUP>
		<SIGILL public="1" set="null" static="1">
			<x path="eval.luv.SigNum"/>
			<meta><m n=":enum"/></meta>
		</SIGILL>
		<SIGINT public="1" set="null" static="1">
			<x path="eval.luv.SigNum"/>
			<meta><m n=":enum"/></meta>
		</SIGINT>
		<SIGKILL public="1" set="null" static="1">
			<x path="eval.luv.SigNum"/>
			<meta><m n=":enum"/></meta>
		</SIGKILL>
		<SIGSEGV public="1" set="null" static="1">
			<x path="eval.luv.SigNum"/>
			<meta><m n=":enum"/></meta>
		</SIGSEGV>
		<SIGTERM public="1" set="null" static="1">
			<x path="eval.luv.SigNum"/>
			<meta><m n=":enum"/></meta>
		</SIGTERM>
		<SIGWINCH public="1" set="null" static="1">
			<x path="eval.luv.SigNum"/>
			<meta><m n=":enum"/></meta>
		</SIGWINCH>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="eval.luv.Signal" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Signal.hx">
		<this><x path="eval.luv.Signal"/></this>
		<to><icast><x path="eval.luv.Handle"/></icast></to>
		<haxe_doc>Signals.

	@see https://aantron.github.io/luv/luv/Luv/Signal</haxe_doc>
		<meta>
			<m n=":using"><e>eval.luv.Handle</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="eval.luv._Signal.Signal_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Signal.hx" private="1" module="eval.luv.Signal" final="1">
	<init public="1" set="method" static="1">
		<f a="loop">
			<x path="eval.luv.Loop"/>
			<e path="eval.luv.Result"><x path="eval.luv.Signal"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocates and initializes a signal handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
	</init>
	<start public="1" set="method" static="1">
		<f a="this:sigNum:callback">
			<x path="eval.luv.Signal"/>
			<x path="eval.luv.SigNum"/>
			<f a=""><x path="Void"/></f>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Starts the signal handle.</haxe_doc>
	</start>
	<startOneshot public="1" set="method" static="1">
		<f a="this:sigNum:callback">
			<x path="eval.luv.Signal"/>
			<x path="eval.luv.SigNum"/>
			<f a=""><x path="Void"/></f>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Like `eval.luv.Signal.start`, but the handle is stopped after one callback call.</haxe_doc>
	</startOneshot>
	<stop public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Signal"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Stops the signal handle.</haxe_doc>
	</stop>
	<signum public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Signal"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Evaluates to the signal number associated with the handle.</haxe_doc>
	</signum>
	<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Signal.Signal_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Signal.hx" private="1" module="eval.luv.Signal" final="1">
		<init public="1" set="method" static="1">
			<f a="loop">
				<x path="eval.luv.Loop"/>
				<e path="eval.luv.Result"><x path="eval.luv.Signal"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocates and initializes a signal handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
		</init>
		<start public="1" set="method" static="1">
			<f a="this:sigNum:callback">
				<x path="eval.luv.Signal"/>
				<x path="eval.luv.SigNum"/>
				<f a=""><x path="Void"/></f>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Starts the signal handle.</haxe_doc>
		</start>
		<startOneshot public="1" set="method" static="1">
			<f a="this:sigNum:callback">
				<x path="eval.luv.Signal"/>
				<x path="eval.luv.SigNum"/>
				<f a=""><x path="Void"/></f>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Like `eval.luv.Signal.start`, but the handle is stopped after one callback call.</haxe_doc>
		</startOneshot>
		<stop public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Signal"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Stops the signal handle.</haxe_doc>
		</stop>
		<signum public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Signal"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Evaluates to the signal number associated with the handle.</haxe_doc>
		</signum>
		<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
	</class>
	<enum path="eval.luv.AddressFamily" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/SockAddr.hx" module="eval.luv.SockAddr">
		<UNSPEC/>
		<INET/>
		<INET6/>
		<OTHER a="i"><x path="Int"/></OTHER>
		<haxe_doc>Network address families.</haxe_doc>
	</enum>
	<enum path="eval.luv.SocketType" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/SockAddr.hx" module="eval.luv.SockAddr">
		<STREAM/>
		<DGRAM/>
		<RAW/>
		<OTHER a="i"><x path="Int"/></OTHER>
		<haxe_doc>Socket types.</haxe_doc>
	</enum>
	<abstract path="eval.luv.SockAddr" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/SockAddr.hx">
		<this><x path="eval.luv.SockAddr"/></this>
		<haxe_doc>Binds `struct sockaddr`.

	@see https://aantron.github.io/luv/luv/Luv/Sockaddr</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.luv._SockAddr.SockAddr_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/SockAddr.hx" private="1" module="eval.luv.SockAddr" final="1">
	<port public="1" get="accessor" set="null" static="1">
		<x path="Null"><x path="Int"/></x>
		<haxe_doc>Extracts the port in a network address.</haxe_doc>
	</port>
	<get_port set="method" static="1">
		<f a="this">
			<x path="eval.luv.SockAddr"/>
			<x path="Null"><x path="Int"/></x>
		</f>
		<meta><m n=":noExpr"/></meta>
	</get_port>
	<ipv4 public="1" set="method" static="1">
		<f a="host:port">
			<c path="String"/>
			<x path="Int"/>
			<e path="eval.luv.Result"><x path="eval.luv.SockAddr"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Converts a string and port number to an IPv4 struct sockaddr.</haxe_doc>
	</ipv4>
	<ipv6 public="1" set="method" static="1">
		<f a="host:port">
			<c path="String"/>
			<x path="Int"/>
			<e path="eval.luv.Result"><x path="eval.luv.SockAddr"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Converts a string and port number to an IPv6 struct sockaddr.</haxe_doc>
	</ipv6>
	<toString public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.SockAddr"/>
			<c path="String"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Converts a network address to a string.</haxe_doc>
	</toString>
</class></impl>
	</abstract>
	<class path="eval.luv._SockAddr.SockAddr_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/SockAddr.hx" private="1" module="eval.luv.SockAddr" final="1">
		<port public="1" get="accessor" set="null" static="1">
			<x path="Null"><x path="Int"/></x>
			<haxe_doc>Extracts the port in a network address.</haxe_doc>
		</port>
		<get_port set="method" static="1">
			<f a="this">
				<x path="eval.luv.SockAddr"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta><m n=":noExpr"/></meta>
		</get_port>
		<ipv4 public="1" set="method" static="1">
			<f a="host:port">
				<c path="String"/>
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.SockAddr"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Converts a string and port number to an IPv4 struct sockaddr.</haxe_doc>
		</ipv4>
		<ipv6 public="1" set="method" static="1">
			<f a="host:port">
				<c path="String"/>
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.SockAddr"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Converts a string and port number to an IPv6 struct sockaddr.</haxe_doc>
		</ipv6>
		<toString public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.SockAddr"/>
				<c path="String"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Converts a network address to a string.</haxe_doc>
		</toString>
	</class>
	<abstract path="eval.luv.TStream" params="T" file="/home/runner/work/haxe/haxe/std/eval/luv/Stream.hx" module="eval.luv.Stream">
		<this><x path="eval.luv.TStream"><c path="eval.luv.TStream.T"/></x></this>
		<to><icast><x path="eval.luv.Stream"/></icast></to>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<enum path="eval.luv.SendHandle" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Stream.hx" module="eval.luv.Stream">
		<TCP a="tcp"><x path="eval.luv.Tcp"/></TCP>
		<PIPE a="pipe"><x path="eval.luv.Pipe"/></PIPE>
	</enum>
	<abstract path="eval.luv.Stream" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Stream.hx">
		<this><x path="eval.luv.Stream"/></this>
		<to><icast><x path="eval.luv.Handle"/></icast></to>
		<haxe_doc>Streams.

	@see https://aantron.github.io/luv/luv/Luv/Stream</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.luv._Stream.Stream_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Stream.hx" private="1" module="eval.luv.Stream" final="1">
	<shutdown public="1" set="method" static="1">
		<f a="stream:callback">
			<x path="eval.luv.Stream"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Shuts down the write side of the stream.</haxe_doc>
	</shutdown>
	<listen public="1" set="method" static="1">
		<f a="stream:callback:?backlog">
			<x path="eval.luv.Stream"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Starts listening for incoming connections.

		`backlog` indicates the number of connections the kernel might queue.
		When a new incoming connection is received the `callback` is called.</haxe_doc>
	</listen>
	<accept public="1" params="T" set="method" static="1">
		<f a="server:client">
			<x path="eval.luv.TStream"><c path="accept.T"/></x>
			<x path="eval.luv.TStream"><c path="accept.T"/></x>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>This call is used in conjunction with `Stream.listen()` to accept incoming
		connections. Call this function after receiving a `callback` of `listen(callback)`
		to accept the connection. Before calling this function the client handle
		must be initialized.

		When the `callback` of `listen(callback)` is called it is guaranteed that
		this function will complete successfully the first time.

		`client` should be a freshly-initialized stream.</haxe_doc>
	</accept>
	<readStart public="1" set="method" static="1">
		<f a="stream:callback:?allocate">
			<x path="eval.luv.Stream"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.Buffer"/></e>
				<x path="Void"/>
			</f>
			<f a="size">
				<x path="Int"/>
				<x path="eval.luv.Buffer"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Calls the `callback` whenever data is available on the stream.

		The amount of data read is equal to the length of the buffer passed to
		the `callback`. `allocate` is called immediately before each call to the
		main `callback`, to create buffer, into which the data will be read.

		The end of the stream (typically, when the remote peer closes or shuts down
		the connection) is indicated by `UVError.UV_EOF` being passed to the `callback`.
		Note that this behavior is different from `eval.luv.File.read`.

		Zero-length reads are possible, and do not indicate the end of stream. Instead,
		they usually indicate `UVError.UV_EAGAIN` inside libuv; libuv still calls the
		`callback` in order to give the C user a chance to deallocate the data buffer.
		This is not usually an issue in OCaml (which is the backend for eval target of
		Haxe), so a wrapper of this function can usually simply ignore zero-length reads.
		It is then also safe to convert `UVError.UV_EOF` to zero-length reads in a
		higher-level API, for consistency with reading files, and in accordance with OS
		API convention.

		To read only once, call `eval.luv.Stream.readStop` immediately, in the `callback`.
		Otherwise, the main callback will be called repeatedly.</haxe_doc>
	</readStart>
	<readStop public="1" set="method" static="1">
		<f a="stream">
			<x path="eval.luv.Stream"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Stops reading.</haxe_doc>
	</readStop>
	<write public="1" set="method" static="1">
		<f a="stream:data:callback">
			<x path="eval.luv.Stream"/>
			<c path="Array"><x path="eval.luv.Buffer"/></c>
			<f a="result:bytesWritten">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Writes the given buffer to the stream.

		The second argument passed to the `callback` is the number of bytes written.
		libuv has an internal queue of writes, in part to implement retry. This means
		that writes can be partial at the libuv API level, so it is possible to receive
		both an `UVError` result, and for some data to have been successfully written.</haxe_doc>
	</write>
	<write2 public="1" set="method" static="1">
		<f a="stream:data:sendHandle:callback">
			<x path="eval.luv.TStream"><x path="eval.luv.Pipe"/></x>
			<c path="Array"><x path="eval.luv.Buffer"/></c>
			<e path="eval.luv.SendHandle"/>
			<f a="result:bytesWritten">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Like `eval.luv.Stream.write`, but allows sending a TCP socket or pipe over the
		stream.</haxe_doc>
	</write2>
	<tryWrite public="1" set="method" static="1">
		<f a="stream:data">
			<x path="eval.luv.Stream"/>
			<c path="Array"><x path="eval.luv.Buffer"/></c>
			<e path="eval.luv.Result"><x path="Int"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Same as `eval.luv.Stream.write()`, but won’t queue a write request if it can’t
		be completed immediately.

		Returns the number of bytes written.</haxe_doc>
	</tryWrite>
	<isReadable public="1" set="method" static="1">
		<f a="stream">
			<x path="eval.luv.Stream"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Indicates whether the stream is readable (has data).</haxe_doc>
	</isReadable>
	<isWritable public="1" set="method" static="1">
		<f a="stream">
			<x path="eval.luv.Stream"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Indicates whether the stream is writable (has space in buffers).</haxe_doc>
	</isWritable>
	<setBlocking public="1" set="method" static="1">
		<f a="stream:block">
			<x path="eval.luv.Stream"/>
			<x path="Bool"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets the blocking mode of the stream.</haxe_doc>
	</setBlocking>
</class></impl>
	</abstract>
	<class path="eval.luv._Stream.Stream_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Stream.hx" private="1" module="eval.luv.Stream" final="1">
		<shutdown public="1" set="method" static="1">
			<f a="stream:callback">
				<x path="eval.luv.Stream"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Shuts down the write side of the stream.</haxe_doc>
		</shutdown>
		<listen public="1" set="method" static="1">
			<f a="stream:callback:?backlog">
				<x path="eval.luv.Stream"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Starts listening for incoming connections.

		`backlog` indicates the number of connections the kernel might queue.
		When a new incoming connection is received the `callback` is called.</haxe_doc>
		</listen>
		<accept public="1" params="T" set="method" static="1">
			<f a="server:client">
				<x path="eval.luv.TStream"><c path="accept.T"/></x>
				<x path="eval.luv.TStream"><c path="accept.T"/></x>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>This call is used in conjunction with `Stream.listen()` to accept incoming
		connections. Call this function after receiving a `callback` of `listen(callback)`
		to accept the connection. Before calling this function the client handle
		must be initialized.

		When the `callback` of `listen(callback)` is called it is guaranteed that
		this function will complete successfully the first time.

		`client` should be a freshly-initialized stream.</haxe_doc>
		</accept>
		<readStart public="1" set="method" static="1">
			<f a="stream:callback:?allocate">
				<x path="eval.luv.Stream"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.Buffer"/></e>
					<x path="Void"/>
				</f>
				<f a="size">
					<x path="Int"/>
					<x path="eval.luv.Buffer"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Calls the `callback` whenever data is available on the stream.

		The amount of data read is equal to the length of the buffer passed to
		the `callback`. `allocate` is called immediately before each call to the
		main `callback`, to create buffer, into which the data will be read.

		The end of the stream (typically, when the remote peer closes or shuts down
		the connection) is indicated by `UVError.UV_EOF` being passed to the `callback`.
		Note that this behavior is different from `eval.luv.File.read`.

		Zero-length reads are possible, and do not indicate the end of stream. Instead,
		they usually indicate `UVError.UV_EAGAIN` inside libuv; libuv still calls the
		`callback` in order to give the C user a chance to deallocate the data buffer.
		This is not usually an issue in OCaml (which is the backend for eval target of
		Haxe), so a wrapper of this function can usually simply ignore zero-length reads.
		It is then also safe to convert `UVError.UV_EOF` to zero-length reads in a
		higher-level API, for consistency with reading files, and in accordance with OS
		API convention.

		To read only once, call `eval.luv.Stream.readStop` immediately, in the `callback`.
		Otherwise, the main callback will be called repeatedly.</haxe_doc>
		</readStart>
		<readStop public="1" set="method" static="1">
			<f a="stream">
				<x path="eval.luv.Stream"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Stops reading.</haxe_doc>
		</readStop>
		<write public="1" set="method" static="1">
			<f a="stream:data:callback">
				<x path="eval.luv.Stream"/>
				<c path="Array"><x path="eval.luv.Buffer"/></c>
				<f a="result:bytesWritten">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Writes the given buffer to the stream.

		The second argument passed to the `callback` is the number of bytes written.
		libuv has an internal queue of writes, in part to implement retry. This means
		that writes can be partial at the libuv API level, so it is possible to receive
		both an `UVError` result, and for some data to have been successfully written.</haxe_doc>
		</write>
		<write2 public="1" set="method" static="1">
			<f a="stream:data:sendHandle:callback">
				<x path="eval.luv.TStream"><x path="eval.luv.Pipe"/></x>
				<c path="Array"><x path="eval.luv.Buffer"/></c>
				<e path="eval.luv.SendHandle"/>
				<f a="result:bytesWritten">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Like `eval.luv.Stream.write`, but allows sending a TCP socket or pipe over the
		stream.</haxe_doc>
		</write2>
		<tryWrite public="1" set="method" static="1">
			<f a="stream:data">
				<x path="eval.luv.Stream"/>
				<c path="Array"><x path="eval.luv.Buffer"/></c>
				<e path="eval.luv.Result"><x path="Int"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Same as `eval.luv.Stream.write()`, but won’t queue a write request if it can’t
		be completed immediately.

		Returns the number of bytes written.</haxe_doc>
		</tryWrite>
		<isReadable public="1" set="method" static="1">
			<f a="stream">
				<x path="eval.luv.Stream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Indicates whether the stream is readable (has data).</haxe_doc>
		</isReadable>
		<isWritable public="1" set="method" static="1">
			<f a="stream">
				<x path="eval.luv.Stream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Indicates whether the stream is writable (has space in buffers).</haxe_doc>
		</isWritable>
		<setBlocking public="1" set="method" static="1">
			<f a="stream:block">
				<x path="eval.luv.Stream"/>
				<x path="Bool"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets the blocking mode of the stream.</haxe_doc>
		</setBlocking>
	</class>
	<typedef path="eval.luv.CpuInfo" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/SystemInfo.hx" module="eval.luv.SystemInfo"><a>
	<times><a>
	<user><x path="eval.integers.UInt64"/></user>
	<sys><x path="eval.integers.UInt64"/></sys>
	<nice><x path="eval.integers.UInt64"/></nice>
	<irq><x path="eval.integers.UInt64"/></irq>
	<idle><x path="eval.integers.UInt64"/></idle>
</a></times>
	<speed><x path="Int"/></speed>
	<model><c path="String"/></model>
</a></typedef>
	<typedef path="eval.luv.Uname" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/SystemInfo.hx" module="eval.luv.SystemInfo"><a>
	<version><c path="String"/></version>
	<sysname><c path="String"/></sysname>
	<release><c path="String"/></release>
	<machine><c path="String"/></machine>
</a></typedef>
	<class path="eval.luv.SystemInfo" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/SystemInfo.hx" extern="1">
		<cpuInfo public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><c path="Array"><t path="eval.luv.CpuInfo"/></c></e></f>
			<haxe_doc>Gets information about the CPUs on the system.</haxe_doc>
		</cpuInfo>
		<uname public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><t path="eval.luv.Uname"/></e></f>
			<haxe_doc>Gets information about the CPUs on the system.</haxe_doc>
		</uname>
		<haxe_doc>System information.

	@see https://aantron.github.io/luv/luv/Luv/System_info</haxe_doc>
	</class>
	<abstract path="eval.luv.Tcp" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Tcp.hx">
		<this><x path="eval.luv.Tcp"/></this>
		<to>
			<icast><x path="eval.luv.Handle"/></icast>
			<icast><x path="eval.luv.Stream"/></icast>
			<icast><x path="eval.luv.TStream"><x path="eval.luv.Tcp"/></x></icast>
			<icast><x path="eval.luv.SocketHandle"/></icast>
		</to>
		<haxe_doc>TCP sockets.

	@see https://aantron.github.io/luv/luv/Luv/TCP</haxe_doc>
		<meta>
			<m n=":using"><e>eval.luv.Handle</e></m>
			<m n=":using"><e>eval.luv.Stream</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="eval.luv._Tcp.Tcp_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Tcp.hx" private="1" module="eval.luv.Tcp" final="1">
	<init public="1" set="method" static="1">
		<f a="loop:?domain">
			<x path="eval.luv.Loop"/>
			<e path="eval.luv.AddressFamily"/>
			<e path="eval.luv.Result"><x path="eval.luv.Tcp"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocates and initializes a TCP stream.

		The stream is not yet connected or listening.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
	</init>
	<noDelay public="1" set="method" static="1">
		<f a="this:enable">
			<x path="eval.luv.Tcp"/>
			<x path="Bool"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets TCP_NODELAY.</haxe_doc>
	</noDelay>
	<keepAlive public="1" set="method" static="1">
		<f a="this:value">
			<x path="eval.luv.Tcp"/>
			<e path="haxe.ds.Option"><x path="Int"/></e>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets the TCP keepalive.</haxe_doc>
	</keepAlive>
	<simultaneousAccepts public="1" set="method" static="1">
		<f a="this:value">
			<x path="eval.luv.Tcp"/>
			<x path="Bool"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets simultaneous accept.</haxe_doc>
	</simultaneousAccepts>
	<bind public="1" set="method" static="1">
		<f a="this:addr:?ipv6Only" v="::false">
			<x path="eval.luv.Tcp"/>
			<x path="eval.luv.SockAddr"/>
			<x path="Bool"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":value"><e>{ ipv6Only : false }</e></m>
		</meta>
		<haxe_doc>Assigns an address to the TCP socket.</haxe_doc>
	</bind>
	<getSockName public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Tcp"/>
			<e path="eval.luv.Result"><x path="eval.luv.SockAddr"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Retrieves the address assigned to the TCP socket.</haxe_doc>
	</getSockName>
	<getPeerName public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Tcp"/>
			<e path="eval.luv.Result"><x path="eval.luv.SockAddr"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Retrieves the address of the TCP socket's peer.</haxe_doc>
	</getPeerName>
	<connect public="1" set="method" static="1">
		<f a="this:addr:callback">
			<x path="eval.luv.Tcp"/>
			<x path="eval.luv.SockAddr"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Connects to a host.</haxe_doc>
	</connect>
	<closeReset public="1" set="method" static="1">
		<f a="this:callback">
			<x path="eval.luv.Tcp"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Resets the connection.</haxe_doc>
	</closeReset>
	<meta>
		<m n=":using"><e>eval.luv.Stream</e></m>
		<m n=":using"><e>eval.luv.Handle</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Tcp.Tcp_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Tcp.hx" private="1" module="eval.luv.Tcp" final="1">
		<init public="1" set="method" static="1">
			<f a="loop:?domain">
				<x path="eval.luv.Loop"/>
				<e path="eval.luv.AddressFamily"/>
				<e path="eval.luv.Result"><x path="eval.luv.Tcp"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocates and initializes a TCP stream.

		The stream is not yet connected or listening.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
		</init>
		<noDelay public="1" set="method" static="1">
			<f a="this:enable">
				<x path="eval.luv.Tcp"/>
				<x path="Bool"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets TCP_NODELAY.</haxe_doc>
		</noDelay>
		<keepAlive public="1" set="method" static="1">
			<f a="this:value">
				<x path="eval.luv.Tcp"/>
				<e path="haxe.ds.Option"><x path="Int"/></e>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets the TCP keepalive.</haxe_doc>
		</keepAlive>
		<simultaneousAccepts public="1" set="method" static="1">
			<f a="this:value">
				<x path="eval.luv.Tcp"/>
				<x path="Bool"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets simultaneous accept.</haxe_doc>
		</simultaneousAccepts>
		<bind public="1" set="method" static="1">
			<f a="this:addr:?ipv6Only" v="::false">
				<x path="eval.luv.Tcp"/>
				<x path="eval.luv.SockAddr"/>
				<x path="Bool"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":value"><e>{ ipv6Only : false }</e></m>
			</meta>
			<haxe_doc>Assigns an address to the TCP socket.</haxe_doc>
		</bind>
		<getSockName public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Tcp"/>
				<e path="eval.luv.Result"><x path="eval.luv.SockAddr"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Retrieves the address assigned to the TCP socket.</haxe_doc>
		</getSockName>
		<getPeerName public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Tcp"/>
				<e path="eval.luv.Result"><x path="eval.luv.SockAddr"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Retrieves the address of the TCP socket's peer.</haxe_doc>
		</getPeerName>
		<connect public="1" set="method" static="1">
			<f a="this:addr:callback">
				<x path="eval.luv.Tcp"/>
				<x path="eval.luv.SockAddr"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Connects to a host.</haxe_doc>
		</connect>
		<closeReset public="1" set="method" static="1">
			<f a="this:callback">
				<x path="eval.luv.Tcp"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Resets the connection.</haxe_doc>
		</closeReset>
		<meta>
			<m n=":using"><e>eval.luv.Stream</e></m>
			<m n=":using"><e>eval.luv.Handle</e></m>
		</meta>
	</class>
	<abstract path="eval.luv.Thread" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Thread.hx">
		<this><x path="eval.luv.Thread"/></this>
		<haxe_doc>Threads.

	@see https://aantron.github.io/luv/luv/Luv/Thread

	`eval.luv` integrates libuv with the OCaml runtime lock. This means that, as
	in any other OCaml program, two threads cannot be running OCaml code at the
	same time. Thus, two threads cannot be running Haxe code at the same time
	because eval interpreter is written in OCaml.
	However, `eval.luv` releases the lock when calling a potentially-blocking libuv API,
	so that other threads can run while the calling thread is blocked. In particular,
	the lock is released during calls to `eval.luv.Loop.run`, which means that other
	threads can run in between when you make a call to a non-blocking API, and when
	its callback is called by libuv.</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="eval.luv._Thread.Thread_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Thread.hx" private="1" module="eval.luv.Thread" final="1">
	<self public="1" set="method" static="1">
		<f a=""><x path="eval.luv.Thread"/></f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Returns the representation of the calling thread.</haxe_doc>
	</self>
	<create public="1" set="method" static="1">
		<f a="fn:?stackSize">
			<f a=""><x path="Void"/></f>
			<x path="Int"/>
			<e path="eval.luv.Result"><x path="eval.luv.Thread"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Starts a new thread, which will run the given function.</haxe_doc>
	</create>
	<join public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Thread"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Waits for the thread to terminate.</haxe_doc>
	</join>
</class></impl>
	</abstract>
	<class path="eval.luv._Thread.Thread_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Thread.hx" private="1" module="eval.luv.Thread" final="1">
		<self public="1" set="method" static="1">
			<f a=""><x path="eval.luv.Thread"/></f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Returns the representation of the calling thread.</haxe_doc>
		</self>
		<create public="1" set="method" static="1">
			<f a="fn:?stackSize">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.Thread"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Starts a new thread, which will run the given function.</haxe_doc>
		</create>
		<join public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Thread"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Waits for the thread to terminate.</haxe_doc>
		</join>
	</class>
	<abstract path="eval.luv.ThreadPoolRequest" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/ThreadPool.hx" module="eval.luv.ThreadPool">
		<this><x path="eval.luv.Request"/></this>
		<to><icast><x path="eval.luv.Request"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="eval.luv._ThreadPool.ThreadPoolRequest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/ThreadPool.hx" private="1" module="eval.luv.ThreadPool" extern="1" final="1"/></impl>
	</abstract>
	<class path="eval.luv._ThreadPool.ThreadPoolRequest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/ThreadPool.hx" private="1" module="eval.luv.ThreadPool" extern="1" final="1"/>
	<class path="eval.luv.ThreadPool" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/ThreadPool.hx" extern="1">
		<createRequest public="1" set="method" static="1"><f a=""><x path="eval.luv.ThreadPoolRequest"/></f></createRequest>
		<queueWork public="1" set="method" static="1">
			<f a="loop:?request:work:callback">
				<x path="eval.luv.Loop"/>
				<x path="eval.luv.ThreadPoolRequest"/>
				<f a=""><x path="Void"/></f>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Schedules a function to be called by a thread in the thread pool.

		`work` is the function that will be called in the thread pool.
		`callback` will be called by the `loop` after `work` completes, or
		immediately, in case there is an error scheduling `work`.</haxe_doc>
		</queueWork>
		<setSize public="1" set="method" static="1">
			<f a="size:?ifNotAlreadySet">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets thread pool size.

		This function should be called as soon during process startup as possible.</haxe_doc>
		</setSize>
		<haxe_doc>Thread pool.

	@see https://aantron.github.io/luv/luv/Luv/Thread_pool</haxe_doc>
	</class>
	<class path="eval.luv.Time" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Time.hx" extern="1">
		<getTimeOfDay public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><a>
	<usec><x path="Int"/></usec>
	<sec><x path="eval.integers.Int64"/></sec>
</a></e></f>
			<haxe_doc>Get time.</haxe_doc>
		</getTimeOfDay>
		<hrTime public="1" set="method" static="1">
			<f a=""><x path="eval.integers.UInt64"/></f>
			<haxe_doc>Samples the high-resolution timer.</haxe_doc>
		</hrTime>
		<sleep public="1" set="method" static="1">
			<f a="duration">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspends the calling thread for at least the given number of milliseconds.</haxe_doc>
		</sleep>
		<haxe_doc>Current time.

	@see https://aantron.github.io/luv/luv/Luv/Time</haxe_doc>
	</class>
	<abstract path="eval.luv.Timer" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Timer.hx">
		<this><x path="eval.luv.Timer"/></this>
		<to><icast><x path="eval.luv.Handle"/></icast></to>
		<haxe_doc>Timers.

	@see https://aantron.github.io/luv/luv/Luv/Timer</haxe_doc>
		<meta>
			<m n=":using"><e>eval.luv.Handle</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="eval.luv._Timer.Timer_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Timer.hx" private="1" module="eval.luv.Timer" final="1">
	<repeat public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<haxe_doc>The timer repeat interval.</haxe_doc>
	</repeat>
	<get_repeat set="method" static="1">
		<f a="this">
			<x path="eval.luv.Timer"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</get_repeat>
	<set_repeat set="method" static="1">
		<f a="this:v">
			<x path="eval.luv.Timer"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</set_repeat>
	<dueIn public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>Evaluates to the time until the timer expires, or zero if it has already expired.</haxe_doc>
	</dueIn>
	<get_dueIn set="method" static="1">
		<f a="this">
			<x path="eval.luv.Timer"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
	</get_dueIn>
	<init public="1" set="method" static="1">
		<f a="loop">
			<x path="eval.luv.Loop"/>
			<e path="eval.luv.Result"><x path="eval.luv.Timer"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocate and initialize an idle handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
	</init>
	<start public="1" set="method" static="1">
		<f a="this:callback:timeoutMs:?repeatMs">
			<x path="eval.luv.Timer"/>
			<f a=""><x path="Void"/></f>
			<x path="Int"/>
			<x path="Int"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Starts a timer.</haxe_doc>
	</start>
	<stop public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Timer"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Stops a timer.</haxe_doc>
	</stop>
	<again public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Timer"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Restarts a timer.</haxe_doc>
	</again>
	<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Timer.Timer_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Timer.hx" private="1" module="eval.luv.Timer" final="1">
		<repeat public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<haxe_doc>The timer repeat interval.</haxe_doc>
		</repeat>
		<get_repeat set="method" static="1">
			<f a="this">
				<x path="eval.luv.Timer"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</get_repeat>
		<set_repeat set="method" static="1">
			<f a="this:v">
				<x path="eval.luv.Timer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</set_repeat>
		<dueIn public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Evaluates to the time until the timer expires, or zero if it has already expired.</haxe_doc>
		</dueIn>
		<get_dueIn set="method" static="1">
			<f a="this">
				<x path="eval.luv.Timer"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
		</get_dueIn>
		<init public="1" set="method" static="1">
			<f a="loop">
				<x path="eval.luv.Loop"/>
				<e path="eval.luv.Result"><x path="eval.luv.Timer"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocate and initialize an idle handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
		</init>
		<start public="1" set="method" static="1">
			<f a="this:callback:timeoutMs:?repeatMs">
				<x path="eval.luv.Timer"/>
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Starts a timer.</haxe_doc>
		</start>
		<stop public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Timer"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Stops a timer.</haxe_doc>
		</stop>
		<again public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Timer"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Restarts a timer.</haxe_doc>
		</again>
		<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
	</class>
	<abstract path="eval.luv.TtyMode" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Tty.hx" module="eval.luv.Tty">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._Tty.TtyMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Tty.hx" private="1" module="eval.luv.Tty" extern="1" final="1">
	<NORMAL public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="eval.luv.TtyMode"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NORMAL>
	<RAW public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="eval.luv.TtyMode"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RAW>
	<IO public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="eval.luv.TtyMode"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IO>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Tty.TtyMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Tty.hx" private="1" module="eval.luv.Tty" extern="1" final="1">
		<NORMAL public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="eval.luv.TtyMode"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NORMAL>
		<RAW public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="eval.luv.TtyMode"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RAW>
		<IO public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="eval.luv.TtyMode"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IO>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="eval.luv.VTermState" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Tty.hx" module="eval.luv.Tty">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._Tty.VTermState_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Tty.hx" private="1" module="eval.luv.Tty" extern="1" final="1">
	<SUPPORTED public="1" get="inline" set="null" expr="cast 0" line="10" static="1">
		<x path="eval.luv.VTermState"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SUPPORTED>
	<UNSUPPORTED public="1" get="inline" set="null" expr="cast 1" line="11" static="1">
		<x path="eval.luv.VTermState"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UNSUPPORTED>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Tty.VTermState_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Tty.hx" private="1" module="eval.luv.Tty" extern="1" final="1">
		<SUPPORTED public="1" get="inline" set="null" expr="cast 0" line="10" static="1">
			<x path="eval.luv.VTermState"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SUPPORTED>
		<UNSUPPORTED public="1" get="inline" set="null" expr="cast 1" line="11" static="1">
			<x path="eval.luv.VTermState"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UNSUPPORTED>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="eval.luv.Tty" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Tty.hx">
		<this><x path="eval.luv.Tty"/></this>
		<to>
			<icast><x path="eval.luv.Handle"/></icast>
			<icast><x path="eval.luv.Stream"/></icast>
			<icast><x path="eval.luv.TStream"><x path="eval.luv.Tty"/></x></icast>
		</to>
		<haxe_doc>Consoles.

	@see https://aantron.github.io/luv/luv/Luv/Tty</haxe_doc>
		<meta>
			<m n=":using"><e>eval.luv.Handle</e></m>
			<m n=":using"><e>eval.luv.Stream</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="eval.luv._Tty.Tty_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Tty.hx" private="1" module="eval.luv.Tty" final="1">
	<resetMode public="1" set="method" static="1">
		<f a=""><e path="eval.luv.Result"><x path="eval.luv.NoData"/></e></f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>To be called when the program exits.
		Resets TTY settings to default values for the next process to take over.</haxe_doc>
	</resetMode>
	<setVTermState public="1" set="method" static="1">
		<f a="state">
			<x path="eval.luv.VTermState"/>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Controls whether console virtual terminal sequences are processed by libuv
		or console. Useful in particular for enabling ConEmu support of ANSI X3.64
		and Xterm 256 colors. Otherwise Windows10 consoles are usually detected
		automatically.

		This function is only meaningful on Windows systems. On Unix it is silently
		ignored.</haxe_doc>
	</setVTermState>
	<getVTermState public="1" set="method" static="1">
		<f a=""><e path="eval.luv.Result"><x path="eval.luv.VTermState"/></e></f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Get the current state of whether console virtual terminal sequences are
		handled by libuv or the console.

		This function is not implemented on Unix, where it returns `UVError.UV_ENOTSUP`.</haxe_doc>
	</getVTermState>
	<init public="1" set="method" static="1">
		<f a="loop:file">
			<x path="eval.luv.Loop"/>
			<x path="eval.luv.File"/>
			<e path="eval.luv.Result"><x path="eval.luv.Tty"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Allocates and initializes a TTY handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
	</init>
	<setMode public="1" set="method" static="1">
		<f a="this:mode">
			<x path="eval.luv.Tty"/>
			<x path="eval.luv.TtyMode"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets the TTY's mode.</haxe_doc>
	</setMode>
	<getWinSize public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Tty"/>
			<e path="eval.luv.Result"><a>
	<width><x path="Int"/></width>
	<height><x path="Int"/></height>
</a></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Retrieves the current window size.</haxe_doc>
	</getWinSize>
	<meta>
		<m n=":using"><e>eval.luv.Stream</e></m>
		<m n=":using"><e>eval.luv.Handle</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Tty.Tty_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Tty.hx" private="1" module="eval.luv.Tty" final="1">
		<resetMode public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><x path="eval.luv.NoData"/></e></f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>To be called when the program exits.
		Resets TTY settings to default values for the next process to take over.</haxe_doc>
		</resetMode>
		<setVTermState public="1" set="method" static="1">
			<f a="state">
				<x path="eval.luv.VTermState"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Controls whether console virtual terminal sequences are processed by libuv
		or console. Useful in particular for enabling ConEmu support of ANSI X3.64
		and Xterm 256 colors. Otherwise Windows10 consoles are usually detected
		automatically.

		This function is only meaningful on Windows systems. On Unix it is silently
		ignored.</haxe_doc>
		</setVTermState>
		<getVTermState public="1" set="method" static="1">
			<f a=""><e path="eval.luv.Result"><x path="eval.luv.VTermState"/></e></f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Get the current state of whether console virtual terminal sequences are
		handled by libuv or the console.

		This function is not implemented on Unix, where it returns `UVError.UV_ENOTSUP`.</haxe_doc>
		</getVTermState>
		<init public="1" set="method" static="1">
			<f a="loop:file">
				<x path="eval.luv.Loop"/>
				<x path="eval.luv.File"/>
				<e path="eval.luv.Result"><x path="eval.luv.Tty"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Allocates and initializes a TTY handle.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
		</init>
		<setMode public="1" set="method" static="1">
			<f a="this:mode">
				<x path="eval.luv.Tty"/>
				<x path="eval.luv.TtyMode"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets the TTY's mode.</haxe_doc>
		</setMode>
		<getWinSize public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Tty"/>
				<e path="eval.luv.Result"><a>
	<width><x path="Int"/></width>
	<height><x path="Int"/></height>
</a></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Retrieves the current window size.</haxe_doc>
		</getWinSize>
		<meta>
			<m n=":using"><e>eval.luv.Stream</e></m>
			<m n=":using"><e>eval.luv.Handle</e></m>
		</meta>
	</class>
	<abstract path="eval.luv.UVError" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/UVError.hx">
		<this><x path="Int"/></this>
		<haxe_doc>Error handling.

	@see https://aantron.github.io/luv/luv/Luv/Error</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._UVError.UVError_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/UVError.hx" private="1" module="eval.luv.UVError" final="1">
	<UV_E2BIG public="1" get="inline" set="null" expr="cast 0" line="10" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>argument list too long</haxe_doc>
	</UV_E2BIG>
	<UV_EACCES public="1" get="inline" set="null" expr="cast 1" line="12" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>permission denied</haxe_doc>
	</UV_EACCES>
	<UV_EADDRINUSE public="1" get="inline" set="null" expr="cast 2" line="14" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>address already in use</haxe_doc>
	</UV_EADDRINUSE>
	<UV_EADDRNOTAVAIL public="1" get="inline" set="null" expr="cast 3" line="16" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>address not available</haxe_doc>
	</UV_EADDRNOTAVAIL>
	<UV_EAFNOSUPPORT public="1" get="inline" set="null" expr="cast 4" line="18" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>address family not supported</haxe_doc>
	</UV_EAFNOSUPPORT>
	<UV_EAGAIN public="1" get="inline" set="null" expr="cast 5" line="20" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>resource temporarily unavailable</haxe_doc>
	</UV_EAGAIN>
	<UV_EAI_ADDRFAMILY public="1" get="inline" set="null" expr="cast 6" line="22" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>address family not supported</haxe_doc>
	</UV_EAI_ADDRFAMILY>
	<UV_EAI_AGAIN public="1" get="inline" set="null" expr="cast 7" line="24" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>temporary failure</haxe_doc>
	</UV_EAI_AGAIN>
	<UV_EAI_BADFLAGS public="1" get="inline" set="null" expr="cast 8" line="26" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>bad ai_flags value</haxe_doc>
	</UV_EAI_BADFLAGS>
	<UV_EAI_BADHINTS public="1" get="inline" set="null" expr="cast 9" line="28" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>invalid value for hints</haxe_doc>
	</UV_EAI_BADHINTS>
	<UV_EAI_CANCELED public="1" get="inline" set="null" expr="cast 10" line="30" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>request canceled</haxe_doc>
	</UV_EAI_CANCELED>
	<UV_EAI_FAIL public="1" get="inline" set="null" expr="cast 11" line="32" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>permanent failure</haxe_doc>
	</UV_EAI_FAIL>
	<UV_EAI_FAMILY public="1" get="inline" set="null" expr="cast 12" line="34" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>ai_family not supported</haxe_doc>
	</UV_EAI_FAMILY>
	<UV_EAI_MEMORY public="1" get="inline" set="null" expr="cast 13" line="36" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>out of memory</haxe_doc>
	</UV_EAI_MEMORY>
	<UV_EAI_NODATA public="1" get="inline" set="null" expr="cast 14" line="38" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>no address</haxe_doc>
	</UV_EAI_NODATA>
	<UV_EAI_NONAME public="1" get="inline" set="null" expr="cast 15" line="40" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>unknown node or service</haxe_doc>
	</UV_EAI_NONAME>
	<UV_EAI_OVERFLOW public="1" get="inline" set="null" expr="cast 16" line="42" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>argument buffer overflow</haxe_doc>
	</UV_EAI_OVERFLOW>
	<UV_EAI_PROTOCOL public="1" get="inline" set="null" expr="cast 17" line="44" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>resolved protocol is unknown</haxe_doc>
	</UV_EAI_PROTOCOL>
	<UV_EAI_SERVICE public="1" get="inline" set="null" expr="cast 18" line="46" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>service not available for socket type</haxe_doc>
	</UV_EAI_SERVICE>
	<UV_EAI_SOCKTYPE public="1" get="inline" set="null" expr="cast 19" line="48" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 19</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>socket type not supported</haxe_doc>
	</UV_EAI_SOCKTYPE>
	<UV_EALREADY public="1" get="inline" set="null" expr="cast 20" line="50" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 20</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>connection already in progress</haxe_doc>
	</UV_EALREADY>
	<UV_EBADF public="1" get="inline" set="null" expr="cast 21" line="52" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 21</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>bad file descriptor</haxe_doc>
	</UV_EBADF>
	<UV_EBUSY public="1" get="inline" set="null" expr="cast 22" line="54" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 22</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>resource busy or locked</haxe_doc>
	</UV_EBUSY>
	<UV_ECANCELED public="1" get="inline" set="null" expr="cast 23" line="56" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 23</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>operation canceled</haxe_doc>
	</UV_ECANCELED>
	<UV_ECONNABORTED public="1" get="inline" set="null" expr="cast 25" line="60" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 25</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>software caused connection abort</haxe_doc>
	</UV_ECONNABORTED>
	<UV_ECONNREFUSED public="1" get="inline" set="null" expr="cast 26" line="62" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 26</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>connection refused</haxe_doc>
	</UV_ECONNREFUSED>
	<UV_ECONNRESET public="1" get="inline" set="null" expr="cast 27" line="64" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 27</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>connection reset by peer</haxe_doc>
	</UV_ECONNRESET>
	<UV_EDESTADDRREQ public="1" get="inline" set="null" expr="cast 28" line="66" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 28</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>destination address required</haxe_doc>
	</UV_EDESTADDRREQ>
	<UV_EEXIST public="1" get="inline" set="null" expr="cast 29" line="68" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 29</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>file already exists</haxe_doc>
	</UV_EEXIST>
	<UV_EFAULT public="1" get="inline" set="null" expr="cast 30" line="70" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 30</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>bad address in system call argument</haxe_doc>
	</UV_EFAULT>
	<UV_EFBIG public="1" get="inline" set="null" expr="cast 31" line="72" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 31</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>file too large</haxe_doc>
	</UV_EFBIG>
	<UV_EHOSTUNREACH public="1" get="inline" set="null" expr="cast 32" line="74" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 32</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>host is unreachable</haxe_doc>
	</UV_EHOSTUNREACH>
	<UV_EINTR public="1" get="inline" set="null" expr="cast 33" line="76" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 33</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>interrupted system call</haxe_doc>
	</UV_EINTR>
	<UV_EINVAL public="1" get="inline" set="null" expr="cast 34" line="78" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 34</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>invalid argument</haxe_doc>
	</UV_EINVAL>
	<UV_EIO public="1" get="inline" set="null" expr="cast 35" line="80" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 35</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>i/o error</haxe_doc>
	</UV_EIO>
	<UV_EISCONN public="1" get="inline" set="null" expr="cast 36" line="82" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 36</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>socket is already connected</haxe_doc>
	</UV_EISCONN>
	<UV_EISDIR public="1" get="inline" set="null" expr="cast 37" line="84" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 37</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>illegal operation on a directory</haxe_doc>
	</UV_EISDIR>
	<UV_ELOOP public="1" get="inline" set="null" expr="cast 38" line="86" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 38</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>too many symbolic links encountered</haxe_doc>
	</UV_ELOOP>
	<UV_EMFILE public="1" get="inline" set="null" expr="cast 39" line="88" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 39</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>too many open files</haxe_doc>
	</UV_EMFILE>
	<UV_EMSGSIZE public="1" get="inline" set="null" expr="cast 40" line="90" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 40</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>message too long</haxe_doc>
	</UV_EMSGSIZE>
	<UV_ENAMETOOLONG public="1" get="inline" set="null" expr="cast 41" line="92" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 41</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>name too long</haxe_doc>
	</UV_ENAMETOOLONG>
	<UV_ENETDOWN public="1" get="inline" set="null" expr="cast 42" line="94" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 42</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>network is down</haxe_doc>
	</UV_ENETDOWN>
	<UV_ENETUNREACH public="1" get="inline" set="null" expr="cast 43" line="96" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 43</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>network is unreachable</haxe_doc>
	</UV_ENETUNREACH>
	<UV_ENFILE public="1" get="inline" set="null" expr="cast 44" line="98" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 44</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>file table overflow</haxe_doc>
	</UV_ENFILE>
	<UV_ENOBUFS public="1" get="inline" set="null" expr="cast 45" line="100" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 45</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>no buffer space available</haxe_doc>
	</UV_ENOBUFS>
	<UV_ENODEV public="1" get="inline" set="null" expr="cast 46" line="102" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 46</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>no such device</haxe_doc>
	</UV_ENODEV>
	<UV_ENOENT public="1" get="inline" set="null" expr="cast 47" line="104" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 47</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>no such file or directory</haxe_doc>
	</UV_ENOENT>
	<UV_ENOMEM public="1" get="inline" set="null" expr="cast 48" line="106" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 48</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>not enough memory</haxe_doc>
	</UV_ENOMEM>
	<UV_ENONET public="1" get="inline" set="null" expr="cast 49" line="108" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 49</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>machine is not on the network</haxe_doc>
	</UV_ENONET>
	<UV_ENOPROTOOPT public="1" get="inline" set="null" expr="cast 50" line="110" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 50</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>protocol not available</haxe_doc>
	</UV_ENOPROTOOPT>
	<UV_ENOSPC public="1" get="inline" set="null" expr="cast 51" line="112" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 51</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>no space left on device</haxe_doc>
	</UV_ENOSPC>
	<UV_ENOSYS public="1" get="inline" set="null" expr="cast 52" line="114" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 52</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>function not implemented</haxe_doc>
	</UV_ENOSYS>
	<UV_ENOTCONN public="1" get="inline" set="null" expr="cast 53" line="116" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 53</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>socket is not connected</haxe_doc>
	</UV_ENOTCONN>
	<UV_ENOTDIR public="1" get="inline" set="null" expr="cast 54" line="118" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 54</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>not a directory</haxe_doc>
	</UV_ENOTDIR>
	<UV_ENOTEMPTY public="1" get="inline" set="null" expr="cast 55" line="120" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 55</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>directory not empty</haxe_doc>
	</UV_ENOTEMPTY>
	<UV_ENOTSOCK public="1" get="inline" set="null" expr="cast 56" line="122" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 56</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>socket operation on non-socket</haxe_doc>
	</UV_ENOTSOCK>
	<UV_ENOTSUP public="1" get="inline" set="null" expr="cast 57" line="124" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 57</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>operation not supported on socket</haxe_doc>
	</UV_ENOTSUP>
	<UV_EPERM public="1" get="inline" set="null" expr="cast 58" line="126" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 58</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>operation not permitted</haxe_doc>
	</UV_EPERM>
	<UV_EPIPE public="1" get="inline" set="null" expr="cast 59" line="128" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 59</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>broken pipe</haxe_doc>
	</UV_EPIPE>
	<UV_EPROTO public="1" get="inline" set="null" expr="cast 60" line="130" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 60</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>protocol error</haxe_doc>
	</UV_EPROTO>
	<UV_EPROTONOSUPPORT public="1" get="inline" set="null" expr="cast 61" line="132" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 61</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>protocol not supported</haxe_doc>
	</UV_EPROTONOSUPPORT>
	<UV_EPROTOTYPE public="1" get="inline" set="null" expr="cast 62" line="134" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 62</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>protocol wrong type for socket</haxe_doc>
	</UV_EPROTOTYPE>
	<UV_ERANGE public="1" get="inline" set="null" expr="cast 63" line="136" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 63</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>result too large</haxe_doc>
	</UV_ERANGE>
	<UV_EROFS public="1" get="inline" set="null" expr="cast 64" line="138" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 64</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>read-only file system</haxe_doc>
	</UV_EROFS>
	<UV_ESHUTDOWN public="1" get="inline" set="null" expr="cast 65" line="140" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 65</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>cannot send after transport endpoint shutdown</haxe_doc>
	</UV_ESHUTDOWN>
	<UV_ESPIPE public="1" get="inline" set="null" expr="cast 66" line="142" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 66</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>invalid seek</haxe_doc>
	</UV_ESPIPE>
	<UV_ESRCH public="1" get="inline" set="null" expr="cast 67" line="144" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 67</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>no such process</haxe_doc>
	</UV_ESRCH>
	<UV_ETIMEDOUT public="1" get="inline" set="null" expr="cast 68" line="146" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 68</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>connection timed out</haxe_doc>
	</UV_ETIMEDOUT>
	<UV_ETXTBSY public="1" get="inline" set="null" expr="cast 69" line="148" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 69</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>text file is busy</haxe_doc>
	</UV_ETXTBSY>
	<UV_EXDEV public="1" get="inline" set="null" expr="cast 70" line="150" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 70</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>cross-device link not permitted</haxe_doc>
	</UV_EXDEV>
	<UV_UNKNOWN public="1" get="inline" set="null" expr="cast 71" line="152" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 71</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>unknown error</haxe_doc>
	</UV_UNKNOWN>
	<UV_EOF public="1" get="inline" set="null" expr="cast 72" line="154" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 72</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>end of file</haxe_doc>
	</UV_EOF>
	<UV_ENXIO public="1" get="inline" set="null" expr="cast 73" line="156" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 73</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>no such device or address</haxe_doc>
	</UV_ENXIO>
	<UV_EMLINK public="1" get="inline" set="null" expr="cast 74" line="158" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 74</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>too many links</haxe_doc>
	</UV_EMLINK>
	<UV_ENOTTY public="1" get="inline" set="null" expr="cast 75" line="160" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 75</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>inappropriate ioctl for device</haxe_doc>
	</UV_ENOTTY>
	<UV_EFTYPE public="1" get="inline" set="null" expr="cast 76" line="162" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 76</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>inappropriate file type or format</haxe_doc>
	</UV_EFTYPE>
	<UV_EILSEQ public="1" get="inline" set="null" expr="cast 77" line="164" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 77</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>illegal byte sequence</haxe_doc>
	</UV_EILSEQ>
	<UV_EOVERFLOW public="1" get="inline" set="null" expr="cast 78" line="166" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 78</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>value too large for defined data type</haxe_doc>
	</UV_EOVERFLOW>
	<UV_ESOCKTNOSUPPORT public="1" get="inline" set="null" expr="cast 79" line="168" static="1">
		<x path="eval.luv.UVError"/>
		<meta>
			<m n=":value"><e>cast 79</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>socket type not supported</haxe_doc>
	</UV_ESOCKTNOSUPPORT>
	<translateSysError public="1" set="method" static="1">
		<f a="code">
			<x path="Int"/>
			<x path="eval.luv.UVError"/>
		</f>
		<haxe_doc>Converts a system error code to a libuv error.</haxe_doc>
	</translateSysError>
	<setOnUnhandledException public="1" set="method" static="1">
		<f a="callback">
			<f a="e">
				<c path="haxe.Exception"/>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<haxe_doc>Setup a callback for unhandled exceptions.

		@see https://aantron.github.io/luv/luv/Luv/Error#val-set_on_unhandled_exception</haxe_doc>
	</setOnUnhandledException>
	<errName public="1" set="method" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns the name of the given error.</haxe_doc>
	</errName>
	<toString public="1" set="method" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns the error message corresponding to the given error.</haxe_doc>
	</toString>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="eval.luv._UVError.UVError_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/UVError.hx" private="1" module="eval.luv.UVError" final="1">
		<UV_E2BIG public="1" get="inline" set="null" expr="cast 0" line="10" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>argument list too long</haxe_doc>
		</UV_E2BIG>
		<UV_EACCES public="1" get="inline" set="null" expr="cast 1" line="12" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>permission denied</haxe_doc>
		</UV_EACCES>
		<UV_EADDRINUSE public="1" get="inline" set="null" expr="cast 2" line="14" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>address already in use</haxe_doc>
		</UV_EADDRINUSE>
		<UV_EADDRNOTAVAIL public="1" get="inline" set="null" expr="cast 3" line="16" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>address not available</haxe_doc>
		</UV_EADDRNOTAVAIL>
		<UV_EAFNOSUPPORT public="1" get="inline" set="null" expr="cast 4" line="18" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>address family not supported</haxe_doc>
		</UV_EAFNOSUPPORT>
		<UV_EAGAIN public="1" get="inline" set="null" expr="cast 5" line="20" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>resource temporarily unavailable</haxe_doc>
		</UV_EAGAIN>
		<UV_EAI_ADDRFAMILY public="1" get="inline" set="null" expr="cast 6" line="22" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>address family not supported</haxe_doc>
		</UV_EAI_ADDRFAMILY>
		<UV_EAI_AGAIN public="1" get="inline" set="null" expr="cast 7" line="24" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>temporary failure</haxe_doc>
		</UV_EAI_AGAIN>
		<UV_EAI_BADFLAGS public="1" get="inline" set="null" expr="cast 8" line="26" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>bad ai_flags value</haxe_doc>
		</UV_EAI_BADFLAGS>
		<UV_EAI_BADHINTS public="1" get="inline" set="null" expr="cast 9" line="28" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>invalid value for hints</haxe_doc>
		</UV_EAI_BADHINTS>
		<UV_EAI_CANCELED public="1" get="inline" set="null" expr="cast 10" line="30" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>request canceled</haxe_doc>
		</UV_EAI_CANCELED>
		<UV_EAI_FAIL public="1" get="inline" set="null" expr="cast 11" line="32" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>permanent failure</haxe_doc>
		</UV_EAI_FAIL>
		<UV_EAI_FAMILY public="1" get="inline" set="null" expr="cast 12" line="34" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>ai_family not supported</haxe_doc>
		</UV_EAI_FAMILY>
		<UV_EAI_MEMORY public="1" get="inline" set="null" expr="cast 13" line="36" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>out of memory</haxe_doc>
		</UV_EAI_MEMORY>
		<UV_EAI_NODATA public="1" get="inline" set="null" expr="cast 14" line="38" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>no address</haxe_doc>
		</UV_EAI_NODATA>
		<UV_EAI_NONAME public="1" get="inline" set="null" expr="cast 15" line="40" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>unknown node or service</haxe_doc>
		</UV_EAI_NONAME>
		<UV_EAI_OVERFLOW public="1" get="inline" set="null" expr="cast 16" line="42" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>argument buffer overflow</haxe_doc>
		</UV_EAI_OVERFLOW>
		<UV_EAI_PROTOCOL public="1" get="inline" set="null" expr="cast 17" line="44" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>resolved protocol is unknown</haxe_doc>
		</UV_EAI_PROTOCOL>
		<UV_EAI_SERVICE public="1" get="inline" set="null" expr="cast 18" line="46" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>service not available for socket type</haxe_doc>
		</UV_EAI_SERVICE>
		<UV_EAI_SOCKTYPE public="1" get="inline" set="null" expr="cast 19" line="48" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 19</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>socket type not supported</haxe_doc>
		</UV_EAI_SOCKTYPE>
		<UV_EALREADY public="1" get="inline" set="null" expr="cast 20" line="50" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 20</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>connection already in progress</haxe_doc>
		</UV_EALREADY>
		<UV_EBADF public="1" get="inline" set="null" expr="cast 21" line="52" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 21</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>bad file descriptor</haxe_doc>
		</UV_EBADF>
		<UV_EBUSY public="1" get="inline" set="null" expr="cast 22" line="54" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 22</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>resource busy or locked</haxe_doc>
		</UV_EBUSY>
		<UV_ECANCELED public="1" get="inline" set="null" expr="cast 23" line="56" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 23</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>operation canceled</haxe_doc>
		</UV_ECANCELED>
		<UV_ECONNABORTED public="1" get="inline" set="null" expr="cast 25" line="60" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 25</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>software caused connection abort</haxe_doc>
		</UV_ECONNABORTED>
		<UV_ECONNREFUSED public="1" get="inline" set="null" expr="cast 26" line="62" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 26</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>connection refused</haxe_doc>
		</UV_ECONNREFUSED>
		<UV_ECONNRESET public="1" get="inline" set="null" expr="cast 27" line="64" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 27</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>connection reset by peer</haxe_doc>
		</UV_ECONNRESET>
		<UV_EDESTADDRREQ public="1" get="inline" set="null" expr="cast 28" line="66" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 28</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>destination address required</haxe_doc>
		</UV_EDESTADDRREQ>
		<UV_EEXIST public="1" get="inline" set="null" expr="cast 29" line="68" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 29</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>file already exists</haxe_doc>
		</UV_EEXIST>
		<UV_EFAULT public="1" get="inline" set="null" expr="cast 30" line="70" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 30</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>bad address in system call argument</haxe_doc>
		</UV_EFAULT>
		<UV_EFBIG public="1" get="inline" set="null" expr="cast 31" line="72" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 31</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>file too large</haxe_doc>
		</UV_EFBIG>
		<UV_EHOSTUNREACH public="1" get="inline" set="null" expr="cast 32" line="74" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 32</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>host is unreachable</haxe_doc>
		</UV_EHOSTUNREACH>
		<UV_EINTR public="1" get="inline" set="null" expr="cast 33" line="76" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 33</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>interrupted system call</haxe_doc>
		</UV_EINTR>
		<UV_EINVAL public="1" get="inline" set="null" expr="cast 34" line="78" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 34</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>invalid argument</haxe_doc>
		</UV_EINVAL>
		<UV_EIO public="1" get="inline" set="null" expr="cast 35" line="80" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 35</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>i/o error</haxe_doc>
		</UV_EIO>
		<UV_EISCONN public="1" get="inline" set="null" expr="cast 36" line="82" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 36</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>socket is already connected</haxe_doc>
		</UV_EISCONN>
		<UV_EISDIR public="1" get="inline" set="null" expr="cast 37" line="84" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 37</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>illegal operation on a directory</haxe_doc>
		</UV_EISDIR>
		<UV_ELOOP public="1" get="inline" set="null" expr="cast 38" line="86" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 38</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>too many symbolic links encountered</haxe_doc>
		</UV_ELOOP>
		<UV_EMFILE public="1" get="inline" set="null" expr="cast 39" line="88" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 39</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>too many open files</haxe_doc>
		</UV_EMFILE>
		<UV_EMSGSIZE public="1" get="inline" set="null" expr="cast 40" line="90" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 40</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>message too long</haxe_doc>
		</UV_EMSGSIZE>
		<UV_ENAMETOOLONG public="1" get="inline" set="null" expr="cast 41" line="92" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 41</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>name too long</haxe_doc>
		</UV_ENAMETOOLONG>
		<UV_ENETDOWN public="1" get="inline" set="null" expr="cast 42" line="94" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 42</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>network is down</haxe_doc>
		</UV_ENETDOWN>
		<UV_ENETUNREACH public="1" get="inline" set="null" expr="cast 43" line="96" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 43</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>network is unreachable</haxe_doc>
		</UV_ENETUNREACH>
		<UV_ENFILE public="1" get="inline" set="null" expr="cast 44" line="98" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 44</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>file table overflow</haxe_doc>
		</UV_ENFILE>
		<UV_ENOBUFS public="1" get="inline" set="null" expr="cast 45" line="100" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 45</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>no buffer space available</haxe_doc>
		</UV_ENOBUFS>
		<UV_ENODEV public="1" get="inline" set="null" expr="cast 46" line="102" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 46</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>no such device</haxe_doc>
		</UV_ENODEV>
		<UV_ENOENT public="1" get="inline" set="null" expr="cast 47" line="104" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 47</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>no such file or directory</haxe_doc>
		</UV_ENOENT>
		<UV_ENOMEM public="1" get="inline" set="null" expr="cast 48" line="106" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 48</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>not enough memory</haxe_doc>
		</UV_ENOMEM>
		<UV_ENONET public="1" get="inline" set="null" expr="cast 49" line="108" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 49</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>machine is not on the network</haxe_doc>
		</UV_ENONET>
		<UV_ENOPROTOOPT public="1" get="inline" set="null" expr="cast 50" line="110" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 50</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>protocol not available</haxe_doc>
		</UV_ENOPROTOOPT>
		<UV_ENOSPC public="1" get="inline" set="null" expr="cast 51" line="112" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 51</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>no space left on device</haxe_doc>
		</UV_ENOSPC>
		<UV_ENOSYS public="1" get="inline" set="null" expr="cast 52" line="114" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 52</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>function not implemented</haxe_doc>
		</UV_ENOSYS>
		<UV_ENOTCONN public="1" get="inline" set="null" expr="cast 53" line="116" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 53</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>socket is not connected</haxe_doc>
		</UV_ENOTCONN>
		<UV_ENOTDIR public="1" get="inline" set="null" expr="cast 54" line="118" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 54</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>not a directory</haxe_doc>
		</UV_ENOTDIR>
		<UV_ENOTEMPTY public="1" get="inline" set="null" expr="cast 55" line="120" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 55</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>directory not empty</haxe_doc>
		</UV_ENOTEMPTY>
		<UV_ENOTSOCK public="1" get="inline" set="null" expr="cast 56" line="122" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 56</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>socket operation on non-socket</haxe_doc>
		</UV_ENOTSOCK>
		<UV_ENOTSUP public="1" get="inline" set="null" expr="cast 57" line="124" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 57</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>operation not supported on socket</haxe_doc>
		</UV_ENOTSUP>
		<UV_EPERM public="1" get="inline" set="null" expr="cast 58" line="126" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 58</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>operation not permitted</haxe_doc>
		</UV_EPERM>
		<UV_EPIPE public="1" get="inline" set="null" expr="cast 59" line="128" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 59</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>broken pipe</haxe_doc>
		</UV_EPIPE>
		<UV_EPROTO public="1" get="inline" set="null" expr="cast 60" line="130" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 60</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>protocol error</haxe_doc>
		</UV_EPROTO>
		<UV_EPROTONOSUPPORT public="1" get="inline" set="null" expr="cast 61" line="132" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 61</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>protocol not supported</haxe_doc>
		</UV_EPROTONOSUPPORT>
		<UV_EPROTOTYPE public="1" get="inline" set="null" expr="cast 62" line="134" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 62</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>protocol wrong type for socket</haxe_doc>
		</UV_EPROTOTYPE>
		<UV_ERANGE public="1" get="inline" set="null" expr="cast 63" line="136" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 63</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>result too large</haxe_doc>
		</UV_ERANGE>
		<UV_EROFS public="1" get="inline" set="null" expr="cast 64" line="138" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 64</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>read-only file system</haxe_doc>
		</UV_EROFS>
		<UV_ESHUTDOWN public="1" get="inline" set="null" expr="cast 65" line="140" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 65</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>cannot send after transport endpoint shutdown</haxe_doc>
		</UV_ESHUTDOWN>
		<UV_ESPIPE public="1" get="inline" set="null" expr="cast 66" line="142" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 66</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>invalid seek</haxe_doc>
		</UV_ESPIPE>
		<UV_ESRCH public="1" get="inline" set="null" expr="cast 67" line="144" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 67</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>no such process</haxe_doc>
		</UV_ESRCH>
		<UV_ETIMEDOUT public="1" get="inline" set="null" expr="cast 68" line="146" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 68</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>connection timed out</haxe_doc>
		</UV_ETIMEDOUT>
		<UV_ETXTBSY public="1" get="inline" set="null" expr="cast 69" line="148" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 69</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>text file is busy</haxe_doc>
		</UV_ETXTBSY>
		<UV_EXDEV public="1" get="inline" set="null" expr="cast 70" line="150" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 70</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>cross-device link not permitted</haxe_doc>
		</UV_EXDEV>
		<UV_UNKNOWN public="1" get="inline" set="null" expr="cast 71" line="152" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 71</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>unknown error</haxe_doc>
		</UV_UNKNOWN>
		<UV_EOF public="1" get="inline" set="null" expr="cast 72" line="154" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 72</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>end of file</haxe_doc>
		</UV_EOF>
		<UV_ENXIO public="1" get="inline" set="null" expr="cast 73" line="156" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 73</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>no such device or address</haxe_doc>
		</UV_ENXIO>
		<UV_EMLINK public="1" get="inline" set="null" expr="cast 74" line="158" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 74</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>too many links</haxe_doc>
		</UV_EMLINK>
		<UV_ENOTTY public="1" get="inline" set="null" expr="cast 75" line="160" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 75</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>inappropriate ioctl for device</haxe_doc>
		</UV_ENOTTY>
		<UV_EFTYPE public="1" get="inline" set="null" expr="cast 76" line="162" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 76</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>inappropriate file type or format</haxe_doc>
		</UV_EFTYPE>
		<UV_EILSEQ public="1" get="inline" set="null" expr="cast 77" line="164" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 77</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>illegal byte sequence</haxe_doc>
		</UV_EILSEQ>
		<UV_EOVERFLOW public="1" get="inline" set="null" expr="cast 78" line="166" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 78</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>value too large for defined data type</haxe_doc>
		</UV_EOVERFLOW>
		<UV_ESOCKTNOSUPPORT public="1" get="inline" set="null" expr="cast 79" line="168" static="1">
			<x path="eval.luv.UVError"/>
			<meta>
				<m n=":value"><e>cast 79</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>socket type not supported</haxe_doc>
		</UV_ESOCKTNOSUPPORT>
		<translateSysError public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="eval.luv.UVError"/>
			</f>
			<haxe_doc>Converts a system error code to a libuv error.</haxe_doc>
		</translateSysError>
		<setOnUnhandledException public="1" set="method" static="1">
			<f a="callback">
				<f a="e">
					<c path="haxe.Exception"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Setup a callback for unhandled exceptions.

		@see https://aantron.github.io/luv/luv/Luv/Error#val-set_on_unhandled_exception</haxe_doc>
		</setOnUnhandledException>
		<errName public="1" set="method" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of the given error.</haxe_doc>
		</errName>
		<toString public="1" set="method" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the error message corresponding to the given error.</haxe_doc>
		</toString>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="eval.luv.UdpMembership" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Udp.hx" module="eval.luv.Udp">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._Udp.UdpMembership_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Udp.hx" private="1" module="eval.luv.Udp" extern="1" final="1">
	<LEAVE_GROUP public="1" get="inline" set="null" expr="cast 0" line="7" static="1">
		<x path="eval.luv.UdpMembership"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LEAVE_GROUP>
	<JOIN_GROUP public="1" get="inline" set="null" expr="cast 1" line="8" static="1">
		<x path="eval.luv.UdpMembership"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</JOIN_GROUP>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Udp.UdpMembership_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Udp.hx" private="1" module="eval.luv.Udp" extern="1" final="1">
		<LEAVE_GROUP public="1" get="inline" set="null" expr="cast 0" line="7" static="1">
			<x path="eval.luv.UdpMembership"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LEAVE_GROUP>
		<JOIN_GROUP public="1" get="inline" set="null" expr="cast 1" line="8" static="1">
			<x path="eval.luv.UdpMembership"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</JOIN_GROUP>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="eval.luv.RecvFlag" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Udp.hx" module="eval.luv.Udp">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="eval.luv._Udp.RecvFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Udp.hx" private="1" module="eval.luv.Udp" extern="1" final="1">
	<PARTIAL public="1" get="inline" set="null" expr="cast 0" line="12" static="1">
		<x path="eval.luv.RecvFlag"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PARTIAL>
	<MMSG_CHUNK public="1" get="inline" set="null" expr="cast 1" line="13" static="1">
		<x path="eval.luv.RecvFlag"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MMSG_CHUNK>
	<MMSG_FREE public="1" get="inline" set="null" expr="cast 2" line="14" static="1">
		<x path="eval.luv.RecvFlag"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MMSG_FREE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Udp.RecvFlag_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Udp.hx" private="1" module="eval.luv.Udp" extern="1" final="1">
		<PARTIAL public="1" get="inline" set="null" expr="cast 0" line="12" static="1">
			<x path="eval.luv.RecvFlag"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PARTIAL>
		<MMSG_CHUNK public="1" get="inline" set="null" expr="cast 1" line="13" static="1">
			<x path="eval.luv.RecvFlag"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MMSG_CHUNK>
		<MMSG_FREE public="1" get="inline" set="null" expr="cast 2" line="14" static="1">
			<x path="eval.luv.RecvFlag"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MMSG_FREE>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="eval.luv.Udp" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Udp.hx">
		<this><x path="eval.luv.Udp"/></this>
		<to>
			<icast><x path="eval.luv.Handle"/></icast>
			<icast><x path="eval.luv.SocketHandle"/></icast>
		</to>
		<haxe_doc>UDP sockets.

	@see https://aantron.github.io/luv/luv/Luv/UDP</haxe_doc>
		<meta>
			<m n=":using"><e>eval.luv.Handle</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="eval.luv._Udp.Udp_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Udp.hx" private="1" module="eval.luv.Udp" final="1">
	<init public="1" set="method" static="1">
		<f a="loop:?domain:?recvmmsg" v="::false">
			<x path="eval.luv.Loop"/>
			<e path="eval.luv.AddressFamily"/>
			<x path="Bool"/>
			<e path="eval.luv.Result"><x path="eval.luv.Udp"/></e>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":value"><e>{ recvmmsg : false }</e></m>
		</meta>
		<haxe_doc>Allocates and initializes a UDP socket.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
	</init>
	<bind public="1" set="method" static="1">
		<f a="this:addr:?ipv6Only:?reuseAddr" v="::false:false">
			<x path="eval.luv.Udp"/>
			<x path="eval.luv.SockAddr"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":value"><e>{ reuseAddr : false, ipv6Only : false }</e></m>
		</meta>
		<haxe_doc>Assigns an address to the UDP socket.</haxe_doc>
	</bind>
	<connect public="1" set="method" static="1">
		<f a="this:addr">
			<x path="eval.luv.Udp"/>
			<x path="eval.luv.SockAddr"/>
			<e path="eval.luv.Result"><x path="eval.luv.ConnectedUdp"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Assigns a peer address to the socket.</haxe_doc>
	</connect>
	<getSockName public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Udp"/>
			<e path="eval.luv.Result"><x path="eval.luv.SockAddr"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Retrieves the address assigned to the UDP socket.</haxe_doc>
	</getSockName>
	<setMembership public="1" set="method" static="1">
		<f a="this:group:interfaceName:membership">
			<x path="eval.luv.Udp"/>
			<c path="String"/>
			<c path="String"/>
			<x path="eval.luv.UdpMembership"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets multicast group membership.</haxe_doc>
	</setMembership>
	<setSourceMembership public="1" set="method" static="1">
		<f a="this:group:interfaceName:source:membership">
			<x path="eval.luv.Udp"/>
			<c path="String"/>
			<c path="String"/>
			<c path="String"/>
			<x path="eval.luv.UdpMembership"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets source-specific multicast group membership.</haxe_doc>
	</setSourceMembership>
	<setMulticastLoop public="1" set="method" static="1">
		<f a="this:value">
			<x path="eval.luv.Udp"/>
			<x path="Bool"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Set multicast loopback.</haxe_doc>
	</setMulticastLoop>
	<setMulticastTtl public="1" set="method" static="1">
		<f a="this:value">
			<x path="eval.luv.Udp"/>
			<x path="Int"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Set multicast TTL.</haxe_doc>
	</setMulticastTtl>
	<setMulticastInterface public="1" set="method" static="1">
		<f a="this:value">
			<x path="eval.luv.Udp"/>
			<x path="Int"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets the interface to be used for multicast.</haxe_doc>
	</setMulticastInterface>
	<setBroadcast public="1" set="method" static="1">
		<f a="this:value">
			<x path="eval.luv.Udp"/>
			<x path="Bool"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets broadcast.</haxe_doc>
	</setBroadcast>
	<setTtl public="1" set="method" static="1">
		<f a="this:value">
			<x path="eval.luv.Udp"/>
			<x path="Int"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sets the TTL.</haxe_doc>
	</setTtl>
	<send public="1" set="method" static="1">
		<f a="this:data:addr:callback">
			<x path="eval.luv.Udp"/>
			<c path="Array"><x path="eval.luv.Buffer"/></c>
			<x path="eval.luv.SockAddr"/>
			<f a="result">
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Sends a datagram.

		For connected UDP sockets, see `eval.luv.UDP.Connected.send`.</haxe_doc>
	</send>
	<trySend public="1" set="method" static="1">
		<f a="this:data:addr">
			<x path="eval.luv.Udp"/>
			<c path="Array"><x path="eval.luv.Buffer"/></c>
			<x path="eval.luv.SockAddr"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Like `eval.luv.UDP.send`, but only attempts to send the datagram immediately.</haxe_doc>
	</trySend>
	<recvStart public="1" set="method" static="1">
		<f a="this:callback">
			<x path="eval.luv.Udp"/>
			<f a="result:?allocate">
				<e path="eval.luv.Result"><a>
	<flags><c path="Array"><x path="eval.luv.RecvFlag"/></c></flags>
	<data><x path="eval.luv.Buffer"/></data>
	<addr><e path="haxe.ds.Option"><x path="eval.luv.SockAddr"/></e></addr>
</a></e>
				<f a="size">
					<x path="Int"/>
					<x path="eval.luv.Buffer"/>
				</f>
				<x path="Void"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Calls `callback` whenever a datagram is received on the UDP socket.

		@see https://aantron.github.io/luv/luv/Luv/UDP/index.html#val-recv_start</haxe_doc>
	</recvStart>
	<recvStop public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Udp"/>
			<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Stops the callback provided to `eval.luv.UDP.recvStart`.</haxe_doc>
	</recvStop>
	<usingRecvmmsg public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Udp"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Evaluates to true if and only if the UDP was created with `recvmmsg = true`
		and the platform supports recvmmsg(2).</haxe_doc>
	</usingRecvmmsg>
	<getSendQueueSize public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Udp"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Number of bytes queued for sending. This field strictly shows how much
		information is currently queued.</haxe_doc>
	</getSendQueueSize>
	<getSendQueueCount public="1" set="method" static="1">
		<f a="this">
			<x path="eval.luv.Udp"/>
			<x path="Int"/>
		</f>
		<meta><m n=":noExpr"/></meta>
		<haxe_doc>Number of send requests currently in the queue awaiting to be processed.</haxe_doc>
	</getSendQueueCount>
	<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
</class></impl>
	</abstract>
	<class path="eval.luv._Udp.Udp_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Udp.hx" private="1" module="eval.luv.Udp" final="1">
		<init public="1" set="method" static="1">
			<f a="loop:?domain:?recvmmsg" v="::false">
				<x path="eval.luv.Loop"/>
				<e path="eval.luv.AddressFamily"/>
				<x path="Bool"/>
				<e path="eval.luv.Result"><x path="eval.luv.Udp"/></e>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":value"><e>{ recvmmsg : false }</e></m>
			</meta>
			<haxe_doc>Allocates and initializes a UDP socket.

		The handle should be cleaned up with `eval.luv.Handle.close` when no longer needed.</haxe_doc>
		</init>
		<bind public="1" set="method" static="1">
			<f a="this:addr:?ipv6Only:?reuseAddr" v="::false:false">
				<x path="eval.luv.Udp"/>
				<x path="eval.luv.SockAddr"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":value"><e>{ reuseAddr : false, ipv6Only : false }</e></m>
			</meta>
			<haxe_doc>Assigns an address to the UDP socket.</haxe_doc>
		</bind>
		<connect public="1" set="method" static="1">
			<f a="this:addr">
				<x path="eval.luv.Udp"/>
				<x path="eval.luv.SockAddr"/>
				<e path="eval.luv.Result"><x path="eval.luv.ConnectedUdp"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Assigns a peer address to the socket.</haxe_doc>
		</connect>
		<getSockName public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Udp"/>
				<e path="eval.luv.Result"><x path="eval.luv.SockAddr"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Retrieves the address assigned to the UDP socket.</haxe_doc>
		</getSockName>
		<setMembership public="1" set="method" static="1">
			<f a="this:group:interfaceName:membership">
				<x path="eval.luv.Udp"/>
				<c path="String"/>
				<c path="String"/>
				<x path="eval.luv.UdpMembership"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets multicast group membership.</haxe_doc>
		</setMembership>
		<setSourceMembership public="1" set="method" static="1">
			<f a="this:group:interfaceName:source:membership">
				<x path="eval.luv.Udp"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="eval.luv.UdpMembership"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets source-specific multicast group membership.</haxe_doc>
		</setSourceMembership>
		<setMulticastLoop public="1" set="method" static="1">
			<f a="this:value">
				<x path="eval.luv.Udp"/>
				<x path="Bool"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Set multicast loopback.</haxe_doc>
		</setMulticastLoop>
		<setMulticastTtl public="1" set="method" static="1">
			<f a="this:value">
				<x path="eval.luv.Udp"/>
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Set multicast TTL.</haxe_doc>
		</setMulticastTtl>
		<setMulticastInterface public="1" set="method" static="1">
			<f a="this:value">
				<x path="eval.luv.Udp"/>
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets the interface to be used for multicast.</haxe_doc>
		</setMulticastInterface>
		<setBroadcast public="1" set="method" static="1">
			<f a="this:value">
				<x path="eval.luv.Udp"/>
				<x path="Bool"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets broadcast.</haxe_doc>
		</setBroadcast>
		<setTtl public="1" set="method" static="1">
			<f a="this:value">
				<x path="eval.luv.Udp"/>
				<x path="Int"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sets the TTL.</haxe_doc>
		</setTtl>
		<send public="1" set="method" static="1">
			<f a="this:data:addr:callback">
				<x path="eval.luv.Udp"/>
				<c path="Array"><x path="eval.luv.Buffer"/></c>
				<x path="eval.luv.SockAddr"/>
				<f a="result">
					<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Sends a datagram.

		For connected UDP sockets, see `eval.luv.UDP.Connected.send`.</haxe_doc>
		</send>
		<trySend public="1" set="method" static="1">
			<f a="this:data:addr">
				<x path="eval.luv.Udp"/>
				<c path="Array"><x path="eval.luv.Buffer"/></c>
				<x path="eval.luv.SockAddr"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Like `eval.luv.UDP.send`, but only attempts to send the datagram immediately.</haxe_doc>
		</trySend>
		<recvStart public="1" set="method" static="1">
			<f a="this:callback">
				<x path="eval.luv.Udp"/>
				<f a="result:?allocate">
					<e path="eval.luv.Result"><a>
	<flags><c path="Array"><x path="eval.luv.RecvFlag"/></c></flags>
	<data><x path="eval.luv.Buffer"/></data>
	<addr><e path="haxe.ds.Option"><x path="eval.luv.SockAddr"/></e></addr>
</a></e>
					<f a="size">
						<x path="Int"/>
						<x path="eval.luv.Buffer"/>
					</f>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Calls `callback` whenever a datagram is received on the UDP socket.

		@see https://aantron.github.io/luv/luv/Luv/UDP/index.html#val-recv_start</haxe_doc>
		</recvStart>
		<recvStop public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Udp"/>
				<e path="eval.luv.Result"><x path="eval.luv.NoData"/></e>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Stops the callback provided to `eval.luv.UDP.recvStart`.</haxe_doc>
		</recvStop>
		<usingRecvmmsg public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Udp"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Evaluates to true if and only if the UDP was created with `recvmmsg = true`
		and the platform supports recvmmsg(2).</haxe_doc>
		</usingRecvmmsg>
		<getSendQueueSize public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Udp"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Number of bytes queued for sending. This field strictly shows how much
		information is currently queued.</haxe_doc>
		</getSendQueueSize>
		<getSendQueueCount public="1" set="method" static="1">
			<f a="this">
				<x path="eval.luv.Udp"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noExpr"/></meta>
			<haxe_doc>Number of send requests currently in the queue awaiting to be processed.</haxe_doc>
		</getSendQueueCount>
		<meta><m n=":using"><e>eval.luv.Handle</e></m></meta>
	</class>
	<class path="eval.luv.Version" params="" file="/home/runner/work/haxe/haxe/std/eval/luv/Version.hx" extern="1">
		<string public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the libuv version as a string.</haxe_doc>
		</string>
		<major final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>libuv major version number.</haxe_doc>
		</major>
		<minor final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>libuv minor version number.</haxe_doc>
		</minor>
		<patch final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>libuv patch version number.</haxe_doc>
		</patch>
		<isRelease final="1" public="1" set="null" static="1">
			<x path="Bool"/>
			<haxe_doc>`true` if the libuv version is a release, and `false` if it is a development version.
		This does not depend on Haxe compilation arguments and will almost always be `true`.</haxe_doc>
		</isRelease>
		<suffix final="1" public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc>libuv version suffix for development releases.</haxe_doc>
		</suffix>
		<hex final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>libuv version packed into a single integer.</haxe_doc>
		</hex>
		<haxe_doc>Version information for the vendored libuv.

	@see https://aantron.github.io/luv/luv/Luv/Version</haxe_doc>
	</class>
	<class path="eval.vm.Context" params="" file="/home/runner/work/haxe/haxe/std/eval/vm/Context.hx" extern="1">
		<addBreakpoint public="1" set="method" static="1"><f a="file:line">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBreakpoint>
		<breakHere public="1" set="method" static="1"><f a=""><x path="Void"/></f></breakHere>
		<callMacroApi public="1" set="method" static="1"><f a="s">
	<c path="String"/>
	<d/>
</f></callMacroApi>
		<loadPlugin public="1" params="T" set="method" static="1">
			<f a="filePath">
				<c path="String"/>
				<c path="loadPlugin.T"/>
			</f>
			<haxe_doc><![CDATA[Loads and returns a plugin from file `filePath`.

		If Haxe is built natively, the extension automatically defaults to `.cmxs`,
		even if a different extension is provided in `filePath`. In bytecode mode,
		the default extension is `.cmo`.

		Sample plugin:

		```ocaml
		open EvalValue
		open EvalContext
		open EvalEncode

		let add_int = vfun2 (fun v1 v2 -> match v1,v2 with
			| VInt32 i1,VInt32 i2 -> vint32 (Int32.add i1 i2)
			| _ -> exc_string "Expected int + int"
		)
		;;
		EvalStdLib.StdContext.register ["add_int",add_int]
		```

		Usage from Haxe:

		```haxe
		var module:TestPlugin = eval.vm.Context.loadPlugin("testPlugin.cmo");
		trace(module.add_int(4, 3));
		```

		Plugins have to be compiled with the same OCaml version as the Haxe compiler
		and using the same Haxe version. If a plugin cannot be loaded, an exception
		of type `String` is thrown.]]></haxe_doc>
		</loadPlugin>
	</class>
	<typedef path="eval.vm.Stat" params="" file="/home/runner/work/haxe/haxe/std/eval/vm/Gc.hx" module="eval.vm.Gc">
		<a>
			<top_heap_words>
				<x path="Int"/>
				<haxe_doc>Maximum size reached by the major heap, in words.</haxe_doc>
			</top_heap_words>
			<stack_size>
				<x path="Int"/>
				<haxe_doc>Current size of the stack, in words.</haxe_doc>
			</stack_size>
			<promoted_words>
				<x path="Float"/>
				<haxe_doc>Number of words allocated in the minor heap that survived a minor collection and were moved to the major heap since the program was started.</haxe_doc>
			</promoted_words>
			<minor_words>
				<x path="Float"/>
				<haxe_doc>Number of words allocated in the minor heap since the program was started. This number is accurate in byte-code programs, but only an approximation in programs compiled to native code.</haxe_doc>
			</minor_words>
			<minor_collections>
				<x path="Float"/>
				<haxe_doc>Number of minor collections since the program was started.</haxe_doc>
			</minor_collections>
			<major_words>
				<x path="Float"/>
				<haxe_doc>Number of words allocated in the major heap, including the promoted words, since the program was started.</haxe_doc>
			</major_words>
			<major_collections>
				<x path="Float"/>
				<haxe_doc>Number of major collection cycles completed since the program was started.</haxe_doc>
			</major_collections>
			<live_words>
				<x path="Int"/>
				<haxe_doc>Number of words of live data in the major heap, including the header words.</haxe_doc>
			</live_words>
			<live_blocks>
				<x path="Int"/>
				<haxe_doc>Number of live blocks in the major heap.</haxe_doc>
			</live_blocks>
			<largest_free>
				<x path="Int"/>
				<haxe_doc>Size (in words) of the largest block in the free list.</haxe_doc>
			</largest_free>
			<heap_words>
				<x path="Int"/>
				<haxe_doc>Total size of the major heap, in words.</haxe_doc>
			</heap_words>
			<heap_chunks>
				<x path="Int"/>
				<haxe_doc>Number of contiguous pieces of memory that make up the major heap.</haxe_doc>
			</heap_chunks>
			<free_words>
				<x path="Int"/>
				<haxe_doc>Number of words in the free list.</haxe_doc>
			</free_words>
			<free_blocks>
				<x path="Int"/>
				<haxe_doc>Number of blocks in the free list.</haxe_doc>
			</free_blocks>
			<fragments>
				<x path="Int"/>
				<haxe_doc>Number of wasted words due to fragmentation. These are 1-words free blocks placed between two live blocks. They are not available for allocation.</haxe_doc>
			</fragments>
			<compactions>
				<x path="Int"/>
				<haxe_doc>Number of heap compactions since the program was started.</haxe_doc>
			</compactions>
		</a>
		<haxe_doc>The memory management counters are returned in a stat record.
	The total amount of memory allocated by the program since it was started is (in words) minor_words + major_words - promoted_words. Multiply by the word size (4 on a 32-bit machine, 8 on a 64-bit machine) to get the number of bytes.</haxe_doc>
	</typedef>
	<typedef path="eval.vm.Control" params="" file="/home/runner/work/haxe/haxe/std/eval/vm/Gc.hx" module="eval.vm.Gc">
		<a>
			<verbose>
				<x path="Int"/>
				<haxe_doc>This value controls the GC messages on standard error output. It is a sum of some of the following flags, to print messages on the corresponding events:
			* 0x001 Start of major GC cycle.
			* 0x002 Minor collection and major GC slice.
			* 0x004 Growing and shrinking of the heap.
			* 0x008 Resizing of stacks and memory manager tables.
			* 0x010 Heap compaction.
			* 0x020 Change of GC parameters.
			* 0x040 Computation of major GC slice size.
			* 0x080 Calling of finalisation functions.
			* 0x100 Bytecode executable and shared library search at start-up.
			* 0x200 Computation of compaction-triggering condition.
			* 0x400 Output GC statistics at program exit. Default: 0.</haxe_doc>
			</verbose>
			<stack_limit>
				<x path="Int"/>
				<haxe_doc>The maximum size of the stack (in words). This is only relevant to the byte-code runtime, as the native code runtime uses the operating system's stack. Default: 1024k.</haxe_doc>
			</stack_limit>
			<space_overhead>
				<x path="Int"/>
				<haxe_doc>The major GC speed is computed from this parameter. This is the memory that will be "wasted" because the GC does not immediatly collect unreachable blocks. It is expressed as a percentage of the memory used for live data. The GC will work more (use more CPU time and collect blocks more eagerly) if space_overhead is smaller. Default: 80.</haxe_doc>
			</space_overhead>
			<minor_heap_size>
				<x path="Int"/>
				<haxe_doc>The size (in words) of the minor heap. Changing this parameter will trigger a minor collection. Default: 256k.</haxe_doc>
			</minor_heap_size>
			<max_overhead>
				<x path="Int"/>
				<haxe_doc><![CDATA[Heap compaction is triggered when the estimated amount of "wasted" memory is more than max_overhead percent of the amount of live data. If max_overhead is set to 0, heap compaction is triggered at the end of each major GC cycle (this setting is intended for testing purposes only). If max_overhead >= 1000000, compaction is never triggered. If compaction is permanently disabled, it is strongly suggested to set allocation_policy to 1. Default: 500.]]></haxe_doc>
			</max_overhead>
			<major_heap_increment>
				<x path="Int"/>
				<haxe_doc>How much to add to the major heap when increasing it. If this number is less than or equal to 1000, it is a percentage of the current heap size (i.e. setting it to 100 will double the heap size at each increase). If it is more than 1000, it is a fixed number of words that will be added to the heap. Default: 15.</haxe_doc>
			</major_heap_increment>
			<allocation_policy>
				<x path="Int"/>
				<haxe_doc>The policy used for allocating in the heap. Possible values are 0 and 1. 0 is the next-fit policy, which is quite fast but can result in fragmentation. 1 is the first-fit policy, which can be slower in some cases but can be better for programs with fragmentation problems. Default: 0.</haxe_doc>
			</allocation_policy>
		</a>
		<haxe_doc>The GC parameters are given as a control record. Note that these parameters can also be initialised by setting the OCAMLRUNPARAM environment variable. See the documentation of ocamlrun.</haxe_doc>
	</typedef>
	<class path="eval.vm.Gc" params="" file="/home/runner/work/haxe/haxe/std/eval/vm/Gc.hx" extern="1">
		<allocated_bytes public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Return the total number of bytes allocated since the program was started. It is returned as a float to avoid overflow problems with int on 32-bit machines.</haxe_doc>
		</allocated_bytes>
		<compact public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Perform a full major collection and compact the heap. Note that heap compaction is a lengthy operation.</haxe_doc>
		</compact>
		<counters public="1" set="method" static="1">
			<f a=""><a>
	<promoted_words><x path="Float"/></promoted_words>
	<minor_words><x path="Float"/></minor_words>
	<major_words><x path="Float"/></major_words>
</a></f>
			<haxe_doc>Return (minor_words, promoted_words, major_words). This function is as fast as quick_stat.</haxe_doc>
		</counters>
		<finalise public="1" params="T" set="method" static="1">
			<f a="f:v">
				<f a="">
					<c path="finalise.T"/>
					<x path="Void"/>
				</f>
				<c path="finalise.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Registers f as a finalisation function for v. v must be heap-allocated. f will be called with v as argument at some point between the first time v becomes unreachable (including through weak pointers) and the time v is collected by the GC. Several functions can be registered for the same value, or even several instances of the same function. Each instance will be called once (or never, if the program terminates before v becomes unreachable).
		The GC will call the finalisation functions in the order of deallocation. When several values become unreachable at the same time (i.e. during the same GC cycle), the finalisation functions will be called in the reverse order of the corresponding calls to finalise. If finalise is called in the same order as the values are allocated, that means each value is finalised before the values it depends upon. Of course, this becomes false if additional dependencies are introduced by assignments.

		In the presence of multiple OCaml threads it should be assumed that any particular finaliser may be executed in any of the threads.</haxe_doc>
		</finalise>
		<full_major public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Do a minor collection, finish the current major collection cycle, and perform a complete new cycle. This will collect all currently unreachable blocks.</haxe_doc>
		</full_major>
		<get public="1" set="method" static="1">
			<f a=""><t path="eval.vm.Control"/></f>
			<haxe_doc>Return the current values of the GC parameters in a control record.</haxe_doc>
		</get>
		<major public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Do a minor collection and finish the current major collection cycle.</haxe_doc>
		</major>
		<major_slice public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Do a minor collection and a slice of major collection. n is the size of the slice: the GC will do enough work to free (on average) n words of memory. If n = 0, the GC will try to do enough work to ensure that the next automatic slice has no work to do. This function returns an unspecified integer (currently: 0).</haxe_doc>
		</major_slice>
		<minor public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Trigger a minor collection.</haxe_doc>
		</minor>
		<print_stat public="1" set="method" static="1">
			<f a="out_channel">
				<c path="haxe.io.Output"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print the current values of the memory management counters (in human-readable form) into the channel argument.</haxe_doc>
		</print_stat>
		<quick_stat public="1" set="method" static="1">
			<f a=""><t path="eval.vm.Stat"/></f>
			<haxe_doc>Same as stat except that live_words, live_blocks, free_words, free_blocks, largest_free, and fragments are set to 0. This function is much faster than stat because it does not need to go through the heap.</haxe_doc>
		</quick_stat>
		<set public="1" set="method" static="1">
			<f a="r">
				<t path="eval.vm.Control"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the GC parameters according to the control record r.</haxe_doc>
		</set>
		<stat public="1" set="method" static="1">
			<f a=""><t path="eval.vm.Stat"/></f>
			<haxe_doc>Return the current values of the memory management counters in a stat record. This function examines every heap block to get the statistics.</haxe_doc>
		</stat>
		<haxe_doc>Memory management control and statistics; finalised values.</haxe_doc>
	</class>
	<class path="eval.vm.NativeSocket" params="" file="/home/runner/work/haxe/haxe/std/eval/vm/NativeSocket.hx" extern="1">
		<select public="1" set="method" static="1"><f a="read:write:others:?timeout">
	<c path="Array"><c path="sys.net.Socket"/></c>
	<c path="Array"><c path="sys.net.Socket"/></c>
	<c path="Array"><c path="sys.net.Socket"/></c>
	<x path="Float"/>
	<a>
		<write><c path="Array"><c path="sys.net.Socket"/></c></write>
		<read><c path="Array"><c path="sys.net.Socket"/></c></read>
		<others><c path="Array"><c path="sys.net.Socket"/></c></others>
	</a>
</f></select>
		<accept public="1" set="method"><f a=""><c path="eval.vm.NativeSocket"/></f></accept>
		<bind public="1" set="method"><f a="host:port">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bind>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="host:port">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
		<host public="1" set="method"><f a=""><a>
	<port><x path="Int"/></port>
	<ip><x path="Int"/></ip>
</a></f></host>
		<listen public="1" set="method"><f a="connections">
	<x path="Int"/>
	<x path="Void"/>
</f></listen>
		<peer public="1" set="method"><f a=""><a>
	<port><x path="Int"/></port>
	<ip><x path="Int"/></ip>
</a></f></peer>
		<receive public="1" set="method"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></receive>
		<receiveChar public="1" set="method"><f a=""><x path="Int"/></f></receiveChar>
		<send public="1" set="method"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></send>
		<sendChar public="1" set="method"><f a="char">
	<x path="Int"/>
	<x path="Void"/>
</f></sendChar>
		<setFastSend public="1" set="method"><f a="b">
	<x path="Bool"/>
	<x path="Void"/>
</f></setFastSend>
		<setTimeout public="1" set="method"><f a="timeout">
	<x path="Float"/>
	<x path="Void"/>
</f></setTimeout>
		<shutdown public="1" set="method"><f a="read:write">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></shutdown>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="eval.vm.NativeThread" params="" file="/home/runner/work/haxe/haxe/std/eval/vm/NativeThread.hx" extern="1">
		<delay public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspends the execution of the calling thread for `f` seconds. The other program
		threads continue to run during this time.</haxe_doc>
		</delay>
		<exit public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Terminate prematurely the currently executing thread.</haxe_doc>
		</exit>
		<join public="1" set="method" static="1">
			<f a="thread">
				<c path="eval.vm.NativeThread"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspends the execution of the calling thread until the thread `thread` has
		terminated.</haxe_doc>
		</join>
		<self public="1" set="method" static="1">
			<f a=""><c path="eval.vm.NativeThread"/></f>
			<haxe_doc>Return the thread currently executing.</haxe_doc>
		</self>
		<yield public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Re-schedule the calling thread without suspending it. This function can be used
		to give scheduling hints, telling the scheduler that now is a good time to switch
		to other threads.</haxe_doc>
		</yield>
		<readMessage public="1" params="T" set="method" static="1"><f a="block">
	<x path="Bool"/>
	<c path="readMessage.T"/>
</f></readMessage>
		<id public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the identifier of the given thread. A thread identifier is an integer
		that identifies uniquely the thread. It can be used to build data structures
		indexed by threads.</haxe_doc>
		</id>
		<kill public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Terminate prematurely the thread whose handle is given. This functionality is
		available only with bytecode-level threads.</haxe_doc>
		</kill>
		<sendMessage public="1" params="T" set="method"><f a="msg">
	<c path="sendMessage.T"/>
	<x path="Void"/>
</f></sendMessage>
		<events get="null" set="null">
			<x path="Null"><c path="sys.thread.EventLoop"/></x>
			<meta><m n=":allow"><e>sys.thread.Thread</e></m></meta>
		</events>
		<new public="1" set="method">
			<f a="f">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new thread that executes function `f`.

		Exceptions caused while executing `f` are printed to stderr and are not
		propagated to the parent thread.</haxe_doc>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="haxe.StackItem" params="" file="/home/runner/work/haxe/haxe/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line:?column">
			<x path="Null"><e path="haxe.StackItem"/></x>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<x path="Null"><c path="String"/></x>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<abstract path="haxe.CallStack" params="" file="/home/runner/work/haxe/haxe/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The length of this stack.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="46" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<x path="Int"/>
</f></get_length>
	<callStack public="1" set="method" line="51" static="1">
		<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
		<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
	</callStack>
	<exceptionStack public="1" set="method" line="63" static="1">
		<f a="?fullStack" v="false">
			<x path="Bool"/>
			<c path="Array"><e path="haxe.StackItem"/></c>
		</f>
		<meta><m n=":value"><e>{ fullStack : false }</e></m></meta>
		<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.
		Set `fullStack` parameter to true in order to return the full exception stack.

		May not work if catch type was a derivative from `haxe.Exception`.</haxe_doc>
	</exceptionStack>
	<toString public="1" set="method" line="71" static="1">
		<f a="stack">
			<x path="haxe.CallStack"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
	</toString>
	<subtract public="1" set="method" line="84" static="1">
		<f a="this:stack">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="haxe.CallStack"/>
			<x path="haxe.CallStack"/>
		</f>
		<haxe_doc>Returns a range of entries of current stack from the beginning to the the
		common part of this and `stack`.</haxe_doc>
	</subtract>
	<copy public="1" get="inline" set="null" line="107" static="1">
		<f a="this">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="haxe.CallStack"/>
		</f>
		<haxe_doc>Make a copy of the stack.</haxe_doc>
	</copy>
	<get public="1" get="inline" set="null" line="111" static="1">
		<f a="this:index">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="Int"/>
			<e path="haxe.StackItem"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<asArray get="inline" set="null" line="115" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></asArray>
	<equalItems set="method" line="119" static="1"><f a="item1:item2">
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Bool"/>
</f></equalItems>
	<exceptionToString set="method" line="135" static="1"><f a="e">
	<c path="haxe.Exception"/>
	<c path="String"/>
</f></exceptionToString>
	<itemToString set="method" line="155" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
	<meta>
		<m n=":using"><e>haxe.CallStack</e></m>
		<m n=":allow"><e>haxe.Exception</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._CallStack.CallStack_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The length of this stack.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="46" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<x path="Int"/>
</f></get_length>
		<callStack public="1" set="method" line="51" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="63" static="1">
			<f a="?fullStack" v="false">
				<x path="Bool"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":value"><e>{ fullStack : false }</e></m></meta>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.
		Set `fullStack` parameter to true in order to return the full exception stack.

		May not work if catch type was a derivative from `haxe.Exception`.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="71" static="1">
			<f a="stack">
				<x path="haxe.CallStack"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<subtract public="1" set="method" line="84" static="1">
			<f a="this:stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="haxe.CallStack"/>
				<x path="haxe.CallStack"/>
			</f>
			<haxe_doc>Returns a range of entries of current stack from the beginning to the the
		common part of this and `stack`.</haxe_doc>
		</subtract>
		<copy public="1" get="inline" set="null" line="107" static="1">
			<f a="this">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="haxe.CallStack"/>
			</f>
			<haxe_doc>Make a copy of the stack.</haxe_doc>
		</copy>
		<get public="1" get="inline" set="null" line="111" static="1">
			<f a="this:index">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="Int"/>
				<e path="haxe.StackItem"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<asArray get="inline" set="null" line="115" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></asArray>
		<equalItems set="method" line="119" static="1"><f a="item1:item2">
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Bool"/>
</f></equalItems>
		<exceptionToString set="method" line="135" static="1"><f a="e">
	<c path="haxe.Exception"/>
	<c path="String"/>
</f></exceptionToString>
		<itemToString set="method" line="155" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<meta>
			<m n=":using"><e>haxe.CallStack</e></m>
			<m n=":allow"><e>haxe.Exception</e></m>
		</meta>
	</class>
	<abstract path="haxe.Function" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.Function_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<abstract path="haxe.FlatEnum" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<abstract path="haxe.NotVoid" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.NotVoid_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<abstract path="haxe.Constructible" params="T" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<class path="haxe.IMap" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Null"><c path="haxe.IMap.V"/></x>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<keyValueIterator public="1" set="method"><f a=""><t path="KeyValueIterator">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</t></f></keyValueIterator>
		<copy public="1" set="method"><f a=""><c path="haxe.IMap">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</c></f></copy>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
	</class>
	<abstract path="haxe.DynamicAccess" params="T" file="/home/runner/work/haxe/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1">
	<_new public="1" get="inline" set="null" line="40" static="1">
		<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new structure.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="51" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Null"><c path="haxe.DynamicAccess.T"/></x>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, `null` is returned.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="69" static="1">
		<f a="this:key:value">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<c path="haxe.DynamicAccess.T"/>
			<c path="haxe.DynamicAccess.T"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<exists public="1" get="inline" set="null" line="84" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="94" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="100" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="Array"><c path="String"/></c>
		</f>
		<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
	</keys>
	<copy public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x>
		</f>
		<haxe_doc>Returns a shallow copy of the structure</haxe_doc>
	</copy>
	<iterator public="1" get="inline" set="null" line="113" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="haxe.iterators.DynamicAccessIterator"><c path="haxe.DynamicAccess.T"/></c>
		</f>
		<haxe_doc>Returns an Iterator over the values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="122" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="haxe.iterators.DynamicAccessKeyValueIterator"><c path="haxe.DynamicAccess.T"/></c>
		</f>
		<haxe_doc>Returns an Iterator over the keys and values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
	</keyValueIterator>
</class></impl>
	</abstract>
	<class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1">
		<_new public="1" get="inline" set="null" line="40" static="1">
			<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new structure.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="51" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Null"><c path="haxe.DynamicAccess.T"/></x>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, `null` is returned.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="69" static="1">
			<f a="this:key:value">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<c path="haxe.DynamicAccess.T"/>
				<c path="haxe.DynamicAccess.T"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="84" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="94" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="100" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
		</keys>
		<copy public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x>
			</f>
			<haxe_doc>Returns a shallow copy of the structure</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="113" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="haxe.iterators.DynamicAccessIterator"><c path="haxe.DynamicAccess.T"/></c>
			</f>
			<haxe_doc>Returns an Iterator over the values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="122" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="haxe.iterators.DynamicAccessKeyValueIterator"><c path="haxe.DynamicAccess.T"/></c>
			</f>
			<haxe_doc>Returns an Iterator over the keys and values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
		</keyValueIterator>
	</class>
	<class path="sys.thread.Mutex" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/Mutex.hx" extern="1">
		<acquire public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>The current thread acquire the mutex or wait if not available.
		The same thread can acquire several times the same mutex but
		must release it as many times it has been acquired.</haxe_doc>
		</acquire>
		<tryAcquire public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Try to acquire the mutex, returns true if acquire or false
		if it's already locked by another thread.</haxe_doc>
		</tryAcquire>
		<release public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Release a mutex that has been acquired by the current thread.
		The behavior is undefined if the current thread does not own
		the mutex.</haxe_doc>
		</release>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a mutex.</haxe_doc>
		</new>
		<haxe_doc>Creates a mutex, which can be used to acquire a temporary lock
	to access some resource. The main difference with a lock is
	that a mutex must always be released by the owner thread.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.EntryPoint" params="" file="/home/runner/work/haxe/haxe/std/haxe/EntryPoint.hx">
		<mutex expr="new Mutex()" line="37" static="1">
			<c path="sys.thread.Mutex"/>
			<meta><m n=":value"><e>new Mutex()</e></m></meta>
		</mutex>
		<mainThread expr="Thread.current()" line="39" static="1">
			<x path="sys.thread.Thread"/>
			<meta><m n=":value"><e>Thread.current()</e></m></meta>
		</mainThread>
		<pending expr="new Array&lt;Void&gt;()" line="44" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Array<Void>()]]></e></m></meta>
		</pending>
		<threadCount public="1" set="null" expr="0" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</threadCount>
		<wakeup public="1" set="method" line="50" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Wakeup a sleeping `run()`</haxe_doc>
		</wakeup>
		<runInMainThread public="1" set="method" line="56" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<addThread public="1" set="method" line="71" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<processEvents set="method" line="99" static="1"><f a=""><x path="Float"/></f></processEvents>
		<run public="1" set="method" line="126" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Start the main loop. Depending on the platform, this can return immediately or will only return when the application exits.</haxe_doc>
		</run>
		<haxe_doc>If `haxe.MainLoop` is kept from DCE, then we will insert an `haxe.EntryPoint.run()` call just at then end of `main()`.
	This class can be redefined by custom frameworks so they can handle their own main loop logic.</haxe_doc>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="/home/runner/work/haxe/haxe/std/haxe/EnumFlags.hx">
		<from><icast field="from"><c path="from.T"/></icast></from>
		<this><x path="Int"/></this>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.

	Enum constructor indices are preserved from Haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as `has(EnumCtor)`. Otherwise
	`Type.enumIndex()` reflection is used.</haxe_doc>
		<impl><class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags" final="1">
	<_new public="1" get="inline" set="null" line="39" static="1">
		<f a="?i" v="0">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":value"><e>{ i : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
	</_new>
	<from params="T" set="method" line="43" static="1">
		<f a="e">
			<c path="from.T"/>
			<x path="haxe.EnumFlags"><c path="from.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</from>
	<or set="method" static="1">
		<f a="this:f">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>a | b</e></m>
		</meta>
	</or>
	<and set="method" static="1">
		<f a="this:f">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[a & b]]></e></m>
		</meta>
	</and>
	<xor set="method" static="1">
		<f a="this:f">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>a ^ b</e></m>
		</meta>
	</xor>
	<has public="1" get="inline" set="null" line="59" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</has>
	<set public="1" get="inline" set="null" line="71" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<unset public="1" get="inline" set="null" line="83" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</unset>
	<setTo public="1" get="inline" set="null" line="96" static="1">
		<f a="this:v:condition">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Depending on the value of `condition` sets (`condition=true`) or unsets (`condition=false`)
		the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</setTo>
	<ofInt public="1" params="T" get="inline" set="null" line="107" static="1">
		<f a="i">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
		</f>
		<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="115" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
	</toInt>
</class></impl>
	</abstract>
	<class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags" final="1">
		<_new public="1" get="inline" set="null" line="39" static="1">
			<f a="?i" v="0">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":value"><e>{ i : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
		</_new>
		<from params="T" set="method" line="43" static="1">
			<f a="e">
				<c path="from.T"/>
				<x path="haxe.EnumFlags"><c path="from.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</from>
		<or set="method" static="1">
			<f a="this:f">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>a | b</e></m>
			</meta>
		</or>
		<and set="method" static="1">
			<f a="this:f">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[a & b]]></e></m>
			</meta>
		</and>
		<xor set="method" static="1">
			<f a="this:f">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>a ^ b</e></m>
			</meta>
		</xor>
		<has public="1" get="inline" set="null" line="59" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</has>
		<set public="1" get="inline" set="null" line="71" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<unset public="1" get="inline" set="null" line="83" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</unset>
		<setTo public="1" get="inline" set="null" line="96" static="1">
			<f a="this:v:condition">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Depending on the value of `condition` sets (`condition=true`) or unsets (`condition=false`)
		the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</setTo>
		<ofInt public="1" params="T" get="inline" set="null" line="107" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
			</f>
			<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="115" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
		</toInt>
	</class>
	<class path="haxe.EnumTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:

			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="138" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="149" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="163" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="175" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<typedef path="haxe.Http" params="" file="/home/runner/work/haxe/haxe/std/haxe/Http.hx"><c path="sys.Http"/></typedef>
	<abstract path="haxe.Int32" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1">
	<negate get="inline" set="null" line="32" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
	</negate>
	<preIncrement get="inline" set="null" line="35" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>++A</e></m></meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="37" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="44" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>--A</e></m></meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="46" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A--</e></m></meta>
	</postDecrement>
	<add get="inline" set="null" line="53" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="56" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<addFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addFloat>
	<sub get="inline" set="null" line="61" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="64" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="67" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<subFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subFloat>
	<floatSub set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="haxe.Int32"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</floatSub>
	<mul set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mul>
	<mulInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<mulFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulFloat>
	<div set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</div>
	<divInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divInt>
	<intDiv set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</intDiv>
	<divFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divFloat>
	<floatDiv set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="haxe.Int32"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</floatDiv>
	<mod set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</mod>
	<modInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modInt>
	<intMod set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</intMod>
	<modFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modFloat>
	<floatMod set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="haxe.Int32"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</floatMod>
	<eq set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</eq>
	<eqInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<eqFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqFloat>
	<neq set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</neq>
	<neqInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<neqFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqFloat>
	<lt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<ltInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</ltInt>
	<intLt set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</intLt>
	<ltFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</ltFloat>
	<floatLt set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</floatLt>
	<lte set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<lteInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lteInt>
	<intLte set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</intLte>
	<lteFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lteFloat>
	<floatLte set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</floatLte>
	<gt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<gtInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gtInt>
	<intGt set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</intGt>
	<gtFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gtFloat>
	<floatGt set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</floatGt>
	<gte set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<gteInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gteInt>
	<intGte set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</intGte>
	<gteFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gteFloat>
	<floatGte set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</floatGte>
	<complement set="method" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</complement>
	<and set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</and>
	<andInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
			<m n=":commutative"/>
		</meta>
	</andInt>
	<or set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</or>
	<orInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
			<m n=":commutative"/>
		</meta>
	</orInt>
	<xor set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xor>
	<xorInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
			<m n=":commutative"/>
		</meta>
	</xorInt>
	<shr set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shr>
	<shrInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shrInt>
	<intShr set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</intShr>
	<ushr set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >>> B]]></e></m>
		</meta>
	</ushr>
	<ushrInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >>> B]]></e></m>
		</meta>
	</ushrInt>
	<intUshr set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >>> B]]></e></m>
		</meta>
	</intUshr>
	<shl set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shl>
	<shlInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shlInt>
	<intShl set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</intShl>
	<toFloat get="inline" set="null" line="249" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
	<ucompare public="1" set="method" line="254" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="267" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1">
		<negate get="inline" set="null" line="32" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
		</negate>
		<preIncrement get="inline" set="null" line="35" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>++A</e></m></meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="37" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="44" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>--A</e></m></meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="46" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A--</e></m></meta>
		</postDecrement>
		<add get="inline" set="null" line="53" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="56" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<addFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addFloat>
		<sub get="inline" set="null" line="61" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="64" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="67" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<subFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subFloat>
		<floatSub set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="haxe.Int32"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</floatSub>
		<mul set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mul>
		<mulInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<mulFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulFloat>
		<div set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</div>
		<divInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divInt>
		<intDiv set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</intDiv>
		<divFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divFloat>
		<floatDiv set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="haxe.Int32"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</floatDiv>
		<mod set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</mod>
		<modInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modInt>
		<intMod set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</intMod>
		<modFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modFloat>
		<floatMod set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="haxe.Int32"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</floatMod>
		<eq set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</eq>
		<eqInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<eqFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqFloat>
		<neq set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</neq>
		<neqInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<neqFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqFloat>
		<lt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<ltInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</ltInt>
		<intLt set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</intLt>
		<ltFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</ltFloat>
		<floatLt set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</floatLt>
		<lte set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<lteInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lteInt>
		<intLte set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</intLte>
		<lteFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lteFloat>
		<floatLte set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</floatLte>
		<gt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<gtInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gtInt>
		<intGt set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</intGt>
		<gtFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gtFloat>
		<floatGt set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</floatGt>
		<gte set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<gteInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gteInt>
		<intGte set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</intGte>
		<gteFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gteFloat>
		<floatGte set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</floatGte>
		<complement set="method" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</complement>
		<and set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</and>
		<andInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
				<m n=":commutative"/>
			</meta>
		</andInt>
		<or set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</or>
		<orInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
				<m n=":commutative"/>
			</meta>
		</orInt>
		<xor set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xor>
		<xorInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
				<m n=":commutative"/>
			</meta>
		</xorInt>
		<shr set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shr>
		<shrInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shrInt>
		<intShr set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</intShr>
		<ushr set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >>> B]]></e></m>
			</meta>
		</ushr>
		<ushrInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >>> B]]></e></m>
			</meta>
		</ushrInt>
		<intUshr set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >>> B]]></e></m>
			</meta>
		</intUshr>
		<shl set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shl>
		<shlInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shlInt>
		<intShl set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</intShl>
		<toFloat get="inline" set="null" line="249" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
		<ucompare public="1" set="method" line="254" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="267" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	</class>
	<abstract path="haxe.Int64" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1">
	<_new get="inline" set="null" line="36" static="1">
		<f a="x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<copy public="1" get="inline" set="null" line="43" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<make public="1" get="inline" set="null" line="49" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<ofInt public="1" get="inline" set="null" line="56" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="62" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<is public="1" get="inline" set="null" line="70" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<meta><m n=":deprecated"><e>"haxe.Int64.is() is deprecated. Use haxe.Int64.isInt64() instead"</e></m></meta>
	</is>
	<isInt64 public="1" get="inline" set="null" line="78" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</isInt64>
	<getHigh public="1" get="inline" set="null" line="85" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" get="inline" set="null" line="92" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" get="inline" set="null" line="98" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" get="inline" set="null" line="104" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" get="inline" set="null" line="111" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" get="inline" set="null" line="122" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" get="inline" set="null" line="131" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<toString set="method" line="133" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<c path="String"/>
</f></toString>
	<parseString public="1" get="inline" set="null" line="159" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
	<fromFloat public="1" get="inline" set="null" line="163" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
	<divMod public="1" set="method" line="171" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<neg public="1" get="inline" set="null" line="221" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="229" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>++A</e></m></meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="237" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="243" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>--A</e></m></meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="251" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A--</e></m></meta>
	</postDecrement>
	<add public="1" get="inline" set="null" line="260" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt get="inline" set="null" line="269" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="274" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt get="inline" set="null" line="283" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="286" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul public="1" get="inline" set="null" line="292" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt get="inline" set="null" line="315" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" get="inline" set="null" line="321" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt get="inline" set="null" line="324" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divInt>
	<intDiv get="inline" set="null" line="327" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</intDiv>
	<mod public="1" get="inline" set="null" line="333" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt get="inline" set="null" line="336" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modInt>
	<intMod get="inline" set="null" line="339" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</intMod>
	<eq public="1" get="inline" set="null" line="345" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt get="inline" set="null" line="348" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" get="inline" set="null" line="354" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt get="inline" set="null" line="357" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt get="inline" set="null" line="360" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<ltInt get="inline" set="null" line="363" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltInt>
	<intLt get="inline" set="null" line="366" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</intLt>
	<lte get="inline" set="null" line="369" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<lteInt get="inline" set="null" line="372" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteInt>
	<intLte get="inline" set="null" line="375" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</intLte>
	<gt get="inline" set="null" line="378" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gtInt get="inline" set="null" line="381" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtInt>
	<intGt get="inline" set="null" line="384" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</intGt>
	<gte get="inline" set="null" line="387" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<gteInt get="inline" set="null" line="390" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteInt>
	<intGte get="inline" set="null" line="393" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</intGte>
	<complement get="inline" set="null" line="399" static="1">
		<f a="a">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
	</complement>
	<and public="1" get="inline" set="null" line="405" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" get="inline" set="null" line="411" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="417" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" get="inline" set="null" line="422" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" get="inline" set="null" line="431" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" get="inline" set="null" line="440" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<high public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></high>
	<get_high get="inline" set="null" line="448" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_high>
	<set_high get="inline" set="null" line="451" static="1"><f a="this:x">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
</f></set_high>
	<low public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></low>
	<get_low get="inline" set="null" line="456" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_low>
	<set_low get="inline" set="null" line="459" static="1"><f a="this:x">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
</f></set_low>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1">
		<_new get="inline" set="null" line="36" static="1">
			<f a="x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<copy public="1" get="inline" set="null" line="43" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<make public="1" get="inline" set="null" line="49" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<ofInt public="1" get="inline" set="null" line="56" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="62" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<is public="1" get="inline" set="null" line="70" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"haxe.Int64.is() is deprecated. Use haxe.Int64.isInt64() instead"</e></m></meta>
		</is>
		<isInt64 public="1" get="inline" set="null" line="78" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</isInt64>
		<getHigh public="1" get="inline" set="null" line="85" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" get="inline" set="null" line="92" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" get="inline" set="null" line="98" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" get="inline" set="null" line="104" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" get="inline" set="null" line="111" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" get="inline" set="null" line="122" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="131" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<toString set="method" line="133" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<c path="String"/>
</f></toString>
		<parseString public="1" get="inline" set="null" line="159" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
		<fromFloat public="1" get="inline" set="null" line="163" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
		<divMod public="1" set="method" line="171" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<neg public="1" get="inline" set="null" line="221" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="229" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>++A</e></m></meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="237" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="243" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>--A</e></m></meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="251" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A--</e></m></meta>
		</postDecrement>
		<add public="1" get="inline" set="null" line="260" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt get="inline" set="null" line="269" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="274" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt get="inline" set="null" line="283" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="286" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul public="1" get="inline" set="null" line="292" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt get="inline" set="null" line="315" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" get="inline" set="null" line="321" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt get="inline" set="null" line="324" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divInt>
		<intDiv get="inline" set="null" line="327" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</intDiv>
		<mod public="1" get="inline" set="null" line="333" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt get="inline" set="null" line="336" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modInt>
		<intMod get="inline" set="null" line="339" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</intMod>
		<eq public="1" get="inline" set="null" line="345" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt get="inline" set="null" line="348" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" get="inline" set="null" line="354" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt get="inline" set="null" line="357" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt get="inline" set="null" line="360" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<ltInt get="inline" set="null" line="363" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltInt>
		<intLt get="inline" set="null" line="366" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</intLt>
		<lte get="inline" set="null" line="369" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<lteInt get="inline" set="null" line="372" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteInt>
		<intLte get="inline" set="null" line="375" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</intLte>
		<gt get="inline" set="null" line="378" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gtInt get="inline" set="null" line="381" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtInt>
		<intGt get="inline" set="null" line="384" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</intGt>
		<gte get="inline" set="null" line="387" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<gteInt get="inline" set="null" line="390" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteInt>
		<intGte get="inline" set="null" line="393" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</intGte>
		<complement get="inline" set="null" line="399" static="1">
			<f a="a">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
		</complement>
		<and public="1" get="inline" set="null" line="405" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" get="inline" set="null" line="411" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="417" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" get="inline" set="null" line="422" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="431" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" get="inline" set="null" line="440" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<high public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></high>
		<get_high get="inline" set="null" line="448" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_high>
		<set_high get="inline" set="null" line="451" static="1"><f a="this:x">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
</f></set_high>
		<low public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></low>
		<get_low get="inline" set="null" line="456" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_low>
		<set_low get="inline" set="null" line="459" static="1"><f a="this:x">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
</f></set_low>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe._Int64.___Int64" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<high public="1"><x path="haxe.Int32"/></high>
		<low public="1"><x path="haxe.Int32"/></low>
		<toString public="1" set="method" line="484">
			<f a=""><c path="String"/></f>
			<haxe_doc>We also define toString here to ensure we always get a pretty string
		when tracing or calling `Std.string`. This tends not to happen when
		`toString` is only in the abstract.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="473"><f a="high:low">
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.Int64Helper" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int64Helper.hx">
		<parseString public="1" set="method" line="36" static="1">
			<f a="sParam">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given string.</haxe_doc>
		</parseString>
		<fromFloat public="1" set="method" line="79" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given float.</haxe_doc>
		</fromFloat>
		<haxe_doc>Helper for parsing to `Int64` instances.</haxe_doc>
	</class>
	<class path="haxe.Json" params="" file="/home/runner/work/haxe/haxe/std/haxe/Json.hx">
		<parse public="1" get="inline" set="null" line="43" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `text` is not valid JSON, an exception will be thrown.

		@see https://haxe.org/manual/std-Json-parsing.html]]></haxe_doc>
		</parse>
		<stringify public="1" get="inline" set="null" line="59" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes the given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve the
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.

		@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		</stringify>
		<haxe_doc>Cross-platform JSON API: it will automatically use the optimized native API if available.
	Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
	This will provide extra encoding (but not decoding) features such as enums (replaced by their index) and StringMaps.

	@see https://haxe.org/manual/std-Json.html</haxe_doc>
	</class>
	<class path="haxe.Log" params="" file="/home/runner/work/haxe/haxe/std/haxe/Log.hx">
		<formatOutput public="1" set="method" line="33" static="1">
			<f a="v:infos">
				<d/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<trace public="1" set="dynamic" line="62" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
	</class>
	<class path="haxe.MainEvent" params="" file="/home/runner/work/haxe/haxe/std/haxe/MainLoop.hx" module="haxe.MainLoop">
		<f><f a=""><x path="Void"/></f></f>
		<prev><c path="haxe.MainEvent"/></prev>
		<next><c path="haxe.MainEvent"/></next>
		<isBlocking public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
			<haxe_doc>Tells if the event can lock the process from exiting (default:true)</haxe_doc>
		</isBlocking>
		<nextRun public="1" set="null"><x path="Float"/></nextRun>
		<priority public="1" set="null"><x path="Int"/></priority>
		<delay public="1" set="method" line="32">
			<f a="t">
				<x path="Null"><x path="Float"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Delay the execution of the event for the given time, in seconds.
		If t is null, the event will be run at tick() time.</haxe_doc>
		</delay>
		<call public="1" get="inline" set="null" line="39">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Call the event. Will do nothing if the event has been stopped.</haxe_doc>
		</call>
		<stop public="1" set="method" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop the event from firing anymore.</haxe_doc>
		</stop>
		<new set="method" line="22"><f a="f:p">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.MainLoop" params="" file="/home/runner/work/haxe/haxe/std/haxe/MainLoop.hx">
		<pending static="1"><c path="haxe.MainEvent"/></pending>
		<threadCount public="1" get="accessor" set="null" static="1"><x path="Int"/></threadCount>
		<get_threadCount get="inline" set="null" line="69" static="1"><f a=""><x path="Int"/></f></get_threadCount>
		<hasEvents public="1" set="method" line="71" static="1"><f a=""><x path="Bool"/></f></hasEvents>
		<addThread public="1" set="method" line="81" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<runInMainThread public="1" set="method" line="85" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<add public="1" set="method" line="92" static="1">
			<f a="f:?priority" v=":0">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.MainEvent"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0 }</e></m></meta>
			<haxe_doc>Add a pending event to be run into the main loop.</haxe_doc>
		</add>
		<sortEvents set="method" line="104" static="1"><f a=""><x path="Void"/></f></sortEvents>
		<tick set="method" line="169" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Run the pending events. Return the time for next event.</haxe_doc>
		</tick>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>haxe.MainEvent</e></m>
		</meta>
	</class>
	<class path="haxe.NativeStackTrace" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/haxe/NativeStackTrace.hx">
		<saveStack public="1" get="inline" set="null" line="12" static="1">
			<f a="exception">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature"><e>"haxe.NativeStackTrace.exceptionStack"</e></m></meta>
		</saveStack>
		<callStack public="1" set="method" line="15" static="1"><f a=""><c path="Array"><e path="haxe.StackItem"/></c></f></callStack>
		<_callStack set="method" line="20" static="1"><f a=""><c path="Array"><e path="haxe.StackItem"/></c></f></_callStack>
		<exceptionStack public="1" set="method" line="25" static="1"><f a=""><c path="Array"><e path="haxe.StackItem"/></c></f></exceptionStack>
		<toHaxe public="1" get="inline" set="null" line="29" static="1">
			<f a="stack:?skip" v=":0">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="Int"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":value"><e>{ skip : 0 }</e></m></meta>
		</toHaxe>
		<haxe_doc>Do not use manually.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/home/runner/work/haxe/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Resource" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/haxe/Resource.hx" extern="1">
		<listNames public="1" set="method" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Lists all available resource names. The resource name is the name part
		of the `--resource file@name` command line parameter.</haxe_doc>
		</listNames>
		<getString public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as a `String`.

		If `name` does not match any resource name, `null` is returned.</haxe_doc>
		</getString>
		<getBytes public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as an instance of
		haxe.io.Bytes.

		If `name` does not match any resource name, `null` is returned.</haxe_doc>
		</getBytes>
		<haxe_doc>Resource can be used to access resources that were added through the
	`--resource file@name` command line parameter.

	Depending on their type they can be obtained as `String` through
	`getString(name)`, or as binary data through `getBytes(name)`.

	A list of all available resource names can be obtained from `listNames()`.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe._Rest.NativeRest" params="T" file="/home/runner/work/haxe/haxe/std/haxe/Rest.hx" private="1" module="haxe.Rest"><c path="Array"><c path="haxe._Rest.NativeRest.T"/></c></typedef>
	<abstract path="haxe.Rest" params="T" file="/home/runner/work/haxe/haxe/std/haxe/Rest.hx">
		<from><icast field="of"><c path="Array"><c path="of.T"/></c></icast></from>
		<this><t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t></this>
		<to><icast field="toArray"><c path="Array"><c path="haxe.Rest.T"/></c></icast></to>
		<haxe_doc><![CDATA[A special type that represents a "rest" function argument.

	The special `...` syntax can be used for convenience and improved readability:

	```haxe
	function f(...rest:Int) {
		$type(rest); // haxe.Rest<Int>
	}

	f(1, 2, 3);

	final array = [1, 2, 3];
	f(...array);
	```

	Should be used as a type for the last argument of a method, indicating that
	an arbitrary number of arguments of the given type can be passed to that method.

	Allows to use array access by index to get values of rest arguments.
	If the index exceeds the amount of rest arguments passed, the result is unspecified.]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe._Rest.Rest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>Amount of arguments passed as rest arguments</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="35" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<x path="Int"/>
</f></get_length>
	<of public="1" params="T" get="inline" set="null" line="46" static="1">
		<f a="array">
			<c path="Array"><c path="of.T"/></c>
			<x path="haxe.Rest"><c path="of.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Create rest arguments using contents of `array`.

		WARNING:
		Depending on a target platform modifying `array` after using this method
		may affect the created `Rest` instance.
		Use `Rest.of(array.copy())` to avoid that.</haxe_doc>
	</of>
	<_new get="inline" set="null" line="48" static="1">
		<f a="array">
			<c path="Array"><c path="haxe.Rest.T"/></c>
			<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get get="inline" set="null" line="52" static="1">
		<f a="this:index">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<x path="Int"/>
			<c path="haxe.Rest.T"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<toArray public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<c path="Array"><c path="haxe.Rest.T"/></c>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc>Creates an array containing all the values of rest arguments.</haxe_doc>
	</toArray>
	<iterator public="1" get="inline" set="null" line="61" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestIterator"><c path="haxe.Rest.T"/></c>
</f></iterator>
	<keyValueIterator public="1" get="inline" set="null" line="64" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestKeyValueIterator"><c path="haxe.Rest.T"/></c>
</f></keyValueIterator>
	<append public="1" set="method" line="69" static="1">
		<f a="this:item">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<c path="haxe.Rest.T"/>
			<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
		</f>
		<haxe_doc>Create a new rest arguments collection by appending `item` to this one.</haxe_doc>
	</append>
	<prepend public="1" set="method" line="78" static="1">
		<f a="this:item">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<c path="haxe.Rest.T"/>
			<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
		</f>
		<haxe_doc>Create a new rest arguments collection by prepending this one with `item`.</haxe_doc>
	</prepend>
	<toString public="1" get="inline" set="null" line="84" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="String"/>
</f></toString>
	<meta><m n=":coreApi"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._Rest.Rest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Amount of arguments passed as rest arguments</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="35" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<x path="Int"/>
</f></get_length>
		<of public="1" params="T" get="inline" set="null" line="46" static="1">
			<f a="array">
				<c path="Array"><c path="of.T"/></c>
				<x path="haxe.Rest"><c path="of.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Create rest arguments using contents of `array`.

		WARNING:
		Depending on a target platform modifying `array` after using this method
		may affect the created `Rest` instance.
		Use `Rest.of(array.copy())` to avoid that.</haxe_doc>
		</of>
		<_new get="inline" set="null" line="48" static="1">
			<f a="array">
				<c path="Array"><c path="haxe.Rest.T"/></c>
				<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get get="inline" set="null" line="52" static="1">
			<f a="this:index">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<x path="Int"/>
				<c path="haxe.Rest.T"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<toArray public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<c path="Array"><c path="haxe.Rest.T"/></c>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc>Creates an array containing all the values of rest arguments.</haxe_doc>
		</toArray>
		<iterator public="1" get="inline" set="null" line="61" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestIterator"><c path="haxe.Rest.T"/></c>
</f></iterator>
		<keyValueIterator public="1" get="inline" set="null" line="64" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestKeyValueIterator"><c path="haxe.Rest.T"/></c>
</f></keyValueIterator>
		<append public="1" set="method" line="69" static="1">
			<f a="this:item">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<c path="haxe.Rest.T"/>
				<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
			</f>
			<haxe_doc>Create a new rest arguments collection by appending `item` to this one.</haxe_doc>
		</append>
		<prepend public="1" set="method" line="78" static="1">
			<f a="this:item">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<c path="haxe.Rest.T"/>
				<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
			</f>
			<haxe_doc>Create a new rest arguments collection by prepending this one with `item`.</haxe_doc>
		</prepend>
		<toString public="1" get="inline" set="null" line="84" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="String"/>
</f></toString>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.Serializer" params="" file="/home/runner/work/haxe/haxe/std/haxe/Serializer.hx">
		<USE_CACHE public="1" expr="false" line="57" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set `USE_CACHE` to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of `Serializer` by
		setting their `useCache` field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" expr="false" line="69" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of `Serializer` by
		setting their `useEnumIndex` field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="71" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<BASE64_CODES expr="null" line="72" static="1">
			<x path="Null"><x path="haxe.ds.Vector"><x path="Null"><x path="Int"/></x></x></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</BASE64_CODES>
		<run public="1" set="method" line="582" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

	This is a convenience function for creating a new instance of
	Serializer, serialize `v` into it and obtain the result through a call
	to `toString()`.</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<scount><x path="Int"/></scount>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See `USE_CACHE` for a complete description.</haxe_doc>
		</useCache>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See `USE_ENUM_INDEX` for a complete description.</haxe_doc>
		</useEnumIndex>
		<toString public="1" set="method" line="118">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		https://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<serializeString set="method" line="154"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="174"><f a="v">
	<d/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeFields set="method" line="211"><f a="v">
	<a/>
	<x path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="229">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes `v`.

	All haxe-defined values and objects with the exception of functions can
	be serialized. Serialization of external/native objects is not
	guaranteed to work.

	The values of `this.useCache` and `this.useEnumIndex` may affect
	serialization output.</haxe_doc>
		</serialize>
		<__getField get="inline" set="null" line="557"><f a="o:f">
	<d/>
	<c path="String"/>
	<d/>
</f></__getField>
		<serializeException public="1" set="method" line="559"><f a="e">
	<d/>
	<x path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="103">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each `Serializer` instance maintains its own cache if `this.useCache` is
		`true`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The Serializer class can be used to encode values and objects into a `String`,
	from which the `Unserializer` class can recreate the original representation.

	This class can be used in two ways:

	- create a `new Serializer()` instance, call its `serialize()` method with
		any argument and finally retrieve the String representation from
		`toString()`
	- call `Serializer.run()` to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/std-serialization-format.html>]]></haxe_doc>
	</class>
	<enum path="haxe._Template.TemplateExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/Template.hx" private="1" module="haxe.Template">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
			<e path="haxe._Template.TemplateExpr"/>
		</OpIf>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpBlock a="l"><c path="haxe.ds.List"><e path="haxe._Template.TemplateExpr"/></c></OpBlock>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
		</OpForeach>
		<OpMacro a="name:params">
			<c path="String"/>
			<c path="haxe.ds.List"><e path="haxe._Template.TemplateExpr"/></c>
		</OpMacro>
	</enum>
	<typedef path="haxe._Template.Token" params="" file="/home/runner/work/haxe/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="/home/runner/work/haxe/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
	</class>
	<class path="haxe.Template" params="" file="/home/runner/work/haxe/haxe/std/haxe/Template.hx">
		<splitter expr="~/(::[A-Za-z0-9_ ()&amp;|!+=/&gt;&lt;*.&quot;-]+::|\$\$([A-Za-z0-9_-]+)\()/" line="58" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(::[A-Za-z0-9_ ()&|!+=/><*."-]+::|\$\$([A-Za-z0-9_-]+)\()/]]></e></m></meta>
		</splitter>
		<expr_splitter expr="~/(\(|\)|[ 
	]*&quot;[^&quot;]*&quot;[ 
	]*|[!+=/&gt;&lt;*.&amp;|-]+)/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(\(|\)|[ 
	]*"[^"]*"[ 
	]*|[!+=/><*.&|-]+)/]]></e></m></meta>
		</expr_splitter>
		<expr_trim expr="~/^[ ]*([^ ]+)[ ]*$/" line="60" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ ]*([^ ]+)[ ]*$/</e></m></meta>
		</expr_trim>
		<expr_int expr="~/^[0-9]+$/" line="61" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[0-9]+$/</e></m></meta>
		</expr_int>
		<expr_float expr="~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/" line="62" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/</e></m></meta>
		</expr_float>
		<globals public="1" expr="{ }" line="68" static="1">
			<d/>
			<meta><m n=":value"><e>{ }</e></m></meta>
			<haxe_doc>Global replacements which are used across all `Template` instances. This
		has lower priority than the context argument of `execute()`.</haxe_doc>
		</globals>
		<hxKeepArrayIterator expr="[].iterator()" line="71" static="1">
			<c path="haxe.iterators.ArrayIterator"><x path="Any"/></c>
			<meta>
				<m n=":value"><e>[].iterator()</e></m>
				<m n=":ifFeature"><e>"haxe.Template.run"</e></m>
			</meta>
		</hxKeepArrayIterator>
		<expr><e path="haxe._Template.TemplateExpr"/></expr>
		<context><d/></context>
		<macros><d/></macros>
		<stack><c path="haxe.ds.List"><d/></c></stack>
		<buf><c path="StringBuf"/></buf>
		<execute public="1" set="method" line="112">
			<f a="context:?macros">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Executes `this` `Template`, taking into account `context` for
		replacements and `macros` for callback functions.

		If `context` has a field `name`, its value replaces all occurrences of
		`::name::` in the `Template`. Otherwise `Template.globals` is checked instead,
		If `name` is not a field of that either, `::name::` is replaced with `null`.

		If `macros` has a field `name`, all occurrences of `$$name(args)` are
		replaced with the result of calling that field. The first argument is
		always the `resolve()` method, followed by the given arguments.
		If `macros` has no such field, the result is unspecified.

		If `context` is `null`, the result is unspecified. If `macros` is `null`,
		no macros are used.</haxe_doc>
		</execute>
		<resolve set="method" line="121"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<parseTokens set="method" line="137"><f a="data">
	<c path="String"/>
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
</f></parseTokens>
		<parseBlock set="method" line="184"><f a="tokens">
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parseBlock>
		<parse set="method" line="199"><f a="tokens">
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parse>
		<parseExpr set="method" line="265"><f a="data">
	<c path="String"/>
	<f a=""><x path="Any"/></f>
</f></parseExpr>
		<makeConst set="method" line="304"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<makePath set="method" line="329"><f a="e:l">
	<f a=""><d/></f>
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makePath>
		<makeExpr set="method" line="345"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr>
		<skipSpaces set="method" line="349"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<x path="Void"/>
</f></skipSpaces>
		<makeExpr2 set="method" line="362"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr2>
		<run set="method" line="441"><f a="e">
	<e path="haxe._Template.TemplateExpr"/>
	<x path="Void"/>
</f></run>
		<new public="1" set="method" line="89">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Template` instance from `str`.

		`str` is parsed into tokens, which are stored for internal use. This
		means that multiple `execute()` operations on a single `Template` instance
		are more efficient than one `execute()` operations on multiple `Template`
		instances.

		If `str` is `null`, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`Template` provides a basic templating mechanism to replace values in a source
	String, and to have some basic logic.

	A complete documentation of the supported syntax is available at:
	<https://haxe.org/manual/std-template.html>]]></haxe_doc>
	</class>
	<class path="haxe.Timer" params="" file="/home/runner/work/haxe/haxe/std/haxe/Timer.hx">
		<delay public="1" set="method" line="145" static="1">
			<f a="f:time_ms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>Invokes `f` after `time_ms` milliseconds.

		This is a convenience function for creating a new Timer instance with
		`time_ms` as argument, binding its `run()` method to `f` and then stopping
		`this` Timer upon the first invocation.

		If `f` is `null`, the result is unspecified.</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="165" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<t path="haxe.PosInfos"/>
				<c path="measure.T"/>
			</f>
			<haxe_doc>Measures the time it takes to execute `f`, in seconds with fractions.

		This is a convenience function for calculating the difference between
		`Timer.stamp()` before and after the invocation of `f`.

		The difference is passed as argument to `Log.trace()`, with `"s"` appended
		to denote the unit. The optional `pos` argument is passed through.

		If `f` is `null`, the result is unspecified.</haxe_doc>
		</measure>
		<stamp public="1" get="inline" set="null" line="178" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a timestamp, in seconds with fractions.

		The value itself might differ depending on platforms, only differences
		between two values make sense.</haxe_doc>
		</stamp>
		<thread><x path="sys.thread.Thread"/></thread>
		<eventHandler><x path="sys.thread.EventHandler"/></eventHandler>
		<stop public="1" set="method" line="100">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="134">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:

		```haxe
		var timer = new haxe.Timer(1000); // 1000ms delay
		timer.run = function() { ... }
		```

		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="70">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this.run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The `Timer` class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the `Timer` class with a given
	interval, set its `run()` method to a custom function to be invoked and
	eventually call `stop()` to stop the `Timer`.

	Note that a running `Timer` may or may not prevent the program to exit
	automatically when `main()` returns.

	It is also possible to extend this class and override its `run()` method in
	the child class.

	Notice for threaded targets:
	`Timer` instances require threads they were created in to run with Haxe's event loops.
	Main thread of a Haxe program always contains an event loop. For other cases use 
	`sys.thread.Thread.createWithEventLoop` and `sys.thread.Thread.runWithEventLoop` methods.</haxe_doc>
	</class>
	<abstract path="haxe.Ucs2" params="" file="/home/runner/work/haxe/haxe/std/haxe/Ucs2.hx">
		<this><c path="String"/></this>
		<haxe_doc>Cross platform UCS2 string API.</haxe_doc>
		<impl><class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2" final="1">
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<_new get="inline" set="null" line="31" static="1">
		<f a="str">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="40" static="1"><f a="this">
	<c path="String"/>
	<x path="Int"/>
</f></get_length>
	<toUpperCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
	</toUpperCase>
	<toLowerCase public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
	</toLowerCase>
	<charAt public="1" get="inline" set="null" line="68" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
	</charAt>
	<charCodeAt public="1" get="inline" set="null" line="81" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="Null"><x path="Int"/></x>
		</f>
		<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be used
		instead to extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
	</charCodeAt>
	<indexOf public="1" get="inline" set="null" line="96" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</indexOf>
	<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</lastIndexOf>
	<split public="1" get="inline" set="null" line="135" static="1">
		<f a="this:delimiter">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<c path="Array"><x path="haxe.Ucs2"/></c>
		</f>
		<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
	</split>
	<substr public="1" get="inline" set="null" line="154" static="1">
		<f a="this:pos:?len">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
	</substr>
	<substring public="1" get="inline" set="null" line="171" static="1">
		<f a="this:startIndex:?endIndex">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
	</substring>
	<toNativeString public="1" get="inline" set="null" line="178" static="1">
		<f a="this">
			<c path="String"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns the native underlying String.</haxe_doc>
	</toNativeString>
	<fromCharCode public="1" get="inline" set="null" line="188" static="1">
		<f a="code">
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
	</fromCharCode>
</class></impl>
	</abstract>
	<class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2" final="1">
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<_new get="inline" set="null" line="31" static="1">
			<f a="str">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="40" static="1"><f a="this">
	<c path="String"/>
	<x path="Int"/>
</f></get_length>
		<toUpperCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" get="inline" set="null" line="68" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" get="inline" set="null" line="81" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be used
		instead to extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" get="inline" set="null" line="96" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" get="inline" set="null" line="135" static="1">
			<f a="this:delimiter">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<c path="Array"><x path="haxe.Ucs2"/></c>
			</f>
			<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
		</split>
		<substr public="1" get="inline" set="null" line="154" static="1">
			<f a="this:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" get="inline" set="null" line="171" static="1">
			<f a="this:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
		</substring>
		<toNativeString public="1" get="inline" set="null" line="178" static="1">
			<f a="this">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the native underlying String.</haxe_doc>
		</toNativeString>
		<fromCharCode public="1" get="inline" set="null" line="188" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
	</class>
	<class path="haxe._Unserializer.DefaultResolver" params="" file="/home/runner/work/haxe/haxe/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<resolveClass public="1" get="inline" set="null" line="515"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="518"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new public="1" set="method" line="512"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.Unserializer" params="" file="/home/runner/work/haxe/haxe/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" expr="new DefaultResolver()" line="67" static="1">
			<t path="haxe.TypeResolver"/>
			<meta><m n=":value"><e>new DefaultResolver()</e></m></meta>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a `Class` or `Enum` instance from a given `String`.
		By default, the Haxe `Type` Api is used.

		A type resolver must provide two methods:

		1. `resolveClass(name:String):Class<Dynamic>` is called to determine a
				`Class` from a class name
		2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an
				`Enum` from an enum name

		This value is applied when a new `Unserializer` instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="69" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<CODES expr="null" line="72" static="1">
			<x path="Null"><c path="Array"><x path="Int"/></c></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</CODES>
		<initCodes set="method" line="74" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="470" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its `unserialize()` method
		once.</haxe_doc>
		</run>
		<fastLength get="inline" set="null" line="478" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></fastLength>
		<fastCharCodeAt get="inline" set="null" line="486" static="1"><f a="s:pos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></fastCharCodeAt>
		<fastCharAt get="inline" set="null" line="494" static="1"><f a="s:pos">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></fastCharAt>
		<fastSubstr get="inline" set="null" line="502" static="1"><f a="s:pos:length">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></fastSubstr>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="126">
			<f a="r">
				<x path="Null"><t path="haxe.TypeResolver"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is `null`, a special resolver is used which returns `null` for all
		input values.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</setResolver>
		<getResolver public="1" set="method" line="138">
			<f a=""><t path="haxe.TypeResolver"/></f>
			<haxe_doc>Gets the type resolver of `this` Unserializer instance.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</getResolver>
		<get get="inline" set="null" line="142"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<readDigits set="method" line="150"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="175"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="190"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum params="T" set="method" line="205"><f a="edecl:tag">
	<x path="Enum"><c path="unserializeEnum.T"/></x>
	<c path="String"/>
	<c path="unserializeEnum.T"/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="237">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different Haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from `Type.createEmptyInstance`, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="101">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Unserializer` class is the complement to the `Serializer` class. It parses
	a serialization `String` and creates objects from the contained data.

	This class can be used in two ways:

	- create a `new Unserializer()` instance with a given serialization
		String, then call its `unserialize()` method until all values are
		extracted
	- call `Unserializer.run()`  to unserialize a single value from a given
		String

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/serialization/format>]]></haxe_doc>
	</class>
	<class path="haxe._Unserializer.NullResolver" params="" file="/home/runner/work/haxe/haxe/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe._Unserializer.NullResolver"/></instance>
		<get_instance get="inline" set="null" line="532" static="1"><f a=""><c path="haxe._Unserializer.NullResolver"/></f></get_instance>
		<resolveClass public="1" get="inline" set="null" line="525"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="528"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new set="method" line="522"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.Utf8" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/haxe/Utf8.hx" extern="1">
		<iter public="1" set="method" static="1">
			<f a="s:chars">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call the `chars` function for each UTF8 char of the string.</haxe_doc>
		</iter>
		<encode public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode the input ISO string into the corresponding UTF8 one.</haxe_doc>
		</encode>
		<decode public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an UTF8 string back to an ISO string.
		Throw an exception if a given UTF8 character is not supported by the decoder.</haxe_doc>
		</decode>
		<charCodeAt public="1" set="method" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `String.charCodeAt` but uses the UTF8 character position.</haxe_doc>
		</charCodeAt>
		<validate public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the String is correctly encoded as UTF8.</haxe_doc>
		</validate>
		<length public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of UTF8 chars of the String.</haxe_doc>
		</length>
		<compare public="1" set="method" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare two UTF8 strings, character by character.</haxe_doc>
		</compare>
		<sub public="1" set="method" static="1">
			<f a="s:pos:len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>This is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.</haxe_doc>
		</sub>
		<addChar public="1" set="method">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="?size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since not all platforms guarantee that `String` always uses UTF-8 encoding, you
	can use this cross-platform API to perform operations on such strings.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":deprecated"><e>"haxe.Utf8 is deprecated. Use UnicodeString instead."</e></m>
		</meta>
	</class>
	<class path="haxe.ValueException" params="" file="/home/runner/work/haxe/haxe/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<unwrap set="method" line="35" override="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		This method must return the same value on subsequent calls.
		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
	</class>
	<class path="haxe.crypto.Adler32" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Adler32.hx">
		<read public="1" set="method" line="60" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.crypto.Adler32"/>
</f></read>
		<make public="1" set="method" line="71" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></make>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<get public="1" set="method" line="37"><f a=""><x path="Int"/></f></get>
		<update public="1" set="method" line="41"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="52"><f a="a">
	<c path="haxe.crypto.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Adler32 of the given Bytes.</haxe_doc>
	</class>
	<enum path="haxe.io.Error" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":keep"/></meta>
	</enum>
	<class path="haxe.io.Bytes" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/haxe/io/Bytes.hx" extern="1">
		<alloc public="1" set="method" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" static="1"><f a="s:?encoding">
	<c path="String"/>
	<e path="haxe.io.Encoding"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<ofHex public="1" set="method" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofHex>
		<fastGet public="1" set="method" static="1"><f a="b:pos">
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
</f></fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<get public="1" set="method"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" set="method"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<blit public="1" set="method"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<fill public="1" set="method"><f a="pos:len:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<sub public="1" set="method"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<getDouble public="1" set="method"><f a="pos">
	<x path="Int"/>
	<x path="Float"/>
</f></getDouble>
		<getFloat public="1" set="method"><f a="pos">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloat>
		<setDouble public="1" set="method"><f a="pos:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setDouble>
		<setFloat public="1" set="method"><f a="pos:v">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setFloat>
		<getUInt16 public="1" set="method"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></getUInt16>
		<setUInt16 public="1" set="method"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUInt16>
		<getInt32 public="1" set="method"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt32>
		<getInt64 public="1" set="method"><f a="pos">
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></getInt64>
		<setInt32 public="1" set="method"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt32>
		<setInt64 public="1" set="method"><f a="pos:v">
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setInt64>
		<getString public="1" set="method"><f a="pos:len:?encoding">
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.io.Encoding"/>
	<c path="String"/>
</f></getString>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method"><f a=""><c path="String"/></f></toHex>
		<getData public="1" set="method"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new public="1" set="method"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.crypto.Base64" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<URL_CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_&quot;" line="32" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"</e></m></meta>
		</URL_CHARS>
		<URL_BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(URL_CHARS)" line="33" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(URL_CHARS)</e></m></meta>
		</URL_BYTES>
		<encode public="1" set="method" line="35" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</encode>
		<decode public="1" set="method" line="48" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</decode>
		<urlEncode public="1" set="method" line="55" static="1">
			<f a="bytes:?complement" v=":false">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : false }</e></m></meta>
		</urlEncode>
		<urlDecode public="1" set="method" line="68" static="1">
			<f a="str:?complement" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : false }</e></m></meta>
		</urlDecode>
		<haxe_doc>Allows one to encode/decode String and bytes using Base64 encoding.</haxe_doc>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="128" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="133" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="112"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="120"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows one to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
	</class>
	<class path="haxe.crypto.Crc32" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Crc32.hx">
		<make public="1" set="method" line="59" static="1">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Calculates the CRC32 of the given data bytes</haxe_doc>
		</make>
		<crc><x path="Int"/></crc>
		<byte public="1" get="inline" set="null" line="35"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></byte>
		<update public="1" get="inline" set="null" line="42"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<get public="1" get="inline" set="null" line="52"><f a=""><x path="Int"/></f></get>
		<new public="1" get="inline" set="null" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Crc32 of the given Bytes.</haxe_doc>
	</class>
	<enum path="haxe.crypto.HashMethod" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Hmac.hx" module="haxe.crypto.Hmac">
		<MD5/>
		<SHA1/>
		<SHA256/>
		<haxe_doc>Hash methods for Hmac calculation.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.crypto.Hmac" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Hmac.hx">
		<method><e path="haxe.crypto.HashMethod"/></method>
		<blockSize><x path="Int"/></blockSize>
		<length><x path="Int"/></length>
		<doHash get="inline" set="null" line="54"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></doHash>
		<nullPad set="method" line="62"><f a="s:chunkLen">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></nullPad>
		<make public="1" set="method" line="73"><f a="key:msg">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<new public="1" set="method" line="42"><f a="hashMethod">
	<e path="haxe.crypto.HashMethod"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Calculates a Hmac of the given Bytes using a HashMethod.</haxe_doc>
	</class>
	<class path="haxe.crypto.Md5" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Md5.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<bytes2blks set="method" line="90" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<str2blks set="method" line="120" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bitOR set="method" line="57"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="63"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="69"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<addme set="method" line="75"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<hex set="method" line="81"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<rol set="method" line="154"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<cmn set="method" line="158"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<ff set="method" line="162"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<gg set="method" line="166"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<hh set="method" line="170"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<ii set="method" line="174"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<doEncode set="method" line="178"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<new set="method" line="55"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a MD5 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha1" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Sha1.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="95" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Convert a string to a sequence of 16-word blocks, stored as an array.
		Append padding bits and the length, as described in the SHA1 standard.</haxe_doc>
		</str2blks>
		<bytes2blks set="method" line="115" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="50"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<rol get="inline" set="null" line="135">
			<f a="num:cnt">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Bitwise rotate a 32-bit number to the left</haxe_doc>
		</rol>
		<ft set="method" line="142">
			<f a="t:b:c:d">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Perform the appropriate triplet combination function for the current iteration</haxe_doc>
		</ft>
		<kt set="method" line="155">
			<f a="t">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Determine the appropriate additive constant for the current iteration</haxe_doc>
		</kt>
		<hex set="method" line="165"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha1 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha224" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Sha224.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="126" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<safeAdd get="inline" set="null" line="142" static="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<doEncode set="method" line="50"><f a="str:strlen">
	<c path="String"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<ROTR get="inline" set="null" line="149"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ROTR>
		<SHR get="inline" set="null" line="154"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></SHR>
		<Ch get="inline" set="null" line="159"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj get="inline" set="null" line="164"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0 get="inline" set="null" line="168"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0>
		<Sigma1 get="inline" set="null" line="172"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1>
		<Gamma0 get="inline" set="null" line="176"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0>
		<Gamma1 get="inline" set="null" line="180"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1>
		<hex set="method" line="184"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha224 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha256" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Sha256.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="113" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Convert a string to a sequence of 16-word blocks, stored as an array.
		Append padding bits and the length, as described in the SHA1 standard.</haxe_doc>
		</str2blks>
		<bytes2blks set="method" line="133" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="50"><f a="m:l">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<S get="inline" set="null" line="150"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></S>
		<R get="inline" set="null" line="154"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></R>
		<Ch get="inline" set="null" line="158"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj get="inline" set="null" line="162"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0256 get="inline" set="null" line="166"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0256>
		<Sigma1256 get="inline" set="null" line="170"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1256>
		<Gamma0256 get="inline" set="null" line="174"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0256>
		<Gamma1256 get="inline" set="null" line="178"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1256>
		<safeAdd get="inline" set="null" line="182"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<hex set="method" line="188"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha256 of a String.</haxe_doc>
	</class>
	<abstract path="haxe.display.UnresolvedIdentifierSuggestion" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Diagnostic.UnresolvedIdentifierSuggestion_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
	<UISImport public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.UnresolvedIdentifierSuggestion"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UISImport>
	<UISTypo public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.UnresolvedIdentifierSuggestion"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UISTypo>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Diagnostic.UnresolvedIdentifierSuggestion_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
		<UISImport public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.UnresolvedIdentifierSuggestion"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UISImport>
		<UISTypo public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.UnresolvedIdentifierSuggestion"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UISTypo>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.MissingFieldCauseKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Diagnostic.MissingFieldCauseKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
	<AbstractParent public="1" get="inline" set="null" expr="cast &quot;AbstractParent&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a><parent><t path="haxe.display.JsonTypePathWithParams"/></parent></a></x>
		<meta>
			<m n=":value"><e>cast "AbstractParent"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AbstractParent>
	<ImplementedInterface public="1" get="inline" set="null" expr="cast &quot;ImplementedInterface&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a><parent><t path="haxe.display.JsonTypePathWithParams"/></parent></a></x>
		<meta>
			<m n=":value"><e>cast "ImplementedInterface"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImplementedInterface>
	<PropertyAccessor public="1" get="inline" set="null" expr="cast &quot;PropertyAccessor&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a>
	<property><t path="haxe.display.JsonClassField"/></property>
	<isGetter><x path="Bool"/></isGetter>
</a></x>
		<meta>
			<m n=":value"><e>cast "PropertyAccessor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PropertyAccessor>
	<FieldAccess public="1" get="inline" set="null" expr="cast &quot;FieldAccess&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a/></x>
		<meta>
			<m n=":value"><e>cast "FieldAccess"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FieldAccess>
	<FinalFields public="1" get="inline" set="null" expr="cast &quot;FinalFields&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a><fields><c path="Array"><t path="haxe.display.JsonClassField"/></c></fields></a></x>
		<meta>
			<m n=":value"><e>cast "FinalFields"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FinalFields>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Diagnostic.MissingFieldCauseKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
		<AbstractParent public="1" get="inline" set="null" expr="cast &quot;AbstractParent&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a><parent><t path="haxe.display.JsonTypePathWithParams"/></parent></a></x>
			<meta>
				<m n=":value"><e>cast "AbstractParent"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AbstractParent>
		<ImplementedInterface public="1" get="inline" set="null" expr="cast &quot;ImplementedInterface&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a><parent><t path="haxe.display.JsonTypePathWithParams"/></parent></a></x>
			<meta>
				<m n=":value"><e>cast "ImplementedInterface"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImplementedInterface>
		<PropertyAccessor public="1" get="inline" set="null" expr="cast &quot;PropertyAccessor&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a>
	<property><t path="haxe.display.JsonClassField"/></property>
	<isGetter><x path="Bool"/></isGetter>
</a></x>
			<meta>
				<m n=":value"><e>cast "PropertyAccessor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PropertyAccessor>
		<FieldAccess public="1" get="inline" set="null" expr="cast &quot;FieldAccess&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a/></x>
			<meta>
				<m n=":value"><e>cast "FieldAccess"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FieldAccess>
		<FinalFields public="1" get="inline" set="null" expr="cast &quot;FinalFields&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a><fields><c path="Array"><t path="haxe.display.JsonClassField"/></c></fields></a></x>
			<meta>
				<m n=":value"><e>cast "FinalFields"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FinalFields>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.MissingFieldCause" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<kind><x path="haxe.display.MissingFieldCauseKind"><c path="haxe.display.MissingFieldCause.T"/></x></kind>
	<args><c path="haxe.display.MissingFieldCause.T"/></args>
</a></typedef>
	<typedef path="haxe.display.MissingField" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<unique>
		<x path="Bool"/>
		<haxe_doc>When implementing multiple interfaces, there can be field duplicates among them. This flag is only
		true for the first such occurrence of a field, so that the "Implement all" code action doesn't end
		up implementing the same field multiple times.</haxe_doc>
	</unique>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<field><t path="haxe.display.JsonClassField"/></field>
</a></typedef>
	<typedef path="haxe.display.MissingFieldDiagnostic" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<fields><c path="Array"><t path="haxe.display.MissingField"/></c></fields>
	<cause><t path="haxe.display.MissingFieldCause"><d/></t></cause>
</a></typedef>
	<typedef path="haxe.display.MissingFieldDiagnostics" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<moduleType><t path="haxe.display.JsonModuleType"><d/></t></moduleType>
	<moduleFile><c path="String"/></moduleFile>
	<entries><c path="Array"><t path="haxe.display.MissingFieldDiagnostic"/></c></entries>
</a></typedef>
	<typedef path="haxe.display.ReplaceableCodeDiagnostics" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<range><t path="haxe.display.Range"/></range>
	<newCode>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</newCode>
	<description><c path="String"/></description>
</a></typedef>
	<abstract path="haxe.display.DiagnosticKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Diagnostic.DiagnosticKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
	<DKUnusedImport public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><x path="Void"/></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DKUnusedImport>
	<DKUnresolvedIdentifier public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><c path="Array"><a>
	<name><c path="String"/></name>
	<kind><x path="haxe.display.UnresolvedIdentifierSuggestion"/></kind>
</a></c></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DKUnresolvedIdentifier>
	<DKCompilerError public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DKCompilerError>
	<ReplaceableCode public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><t path="haxe.display.ReplaceableCodeDiagnostics"/></x>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ReplaceableCode>
	<DKParserError public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DKParserError>
	<DeprecationWarning public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DeprecationWarning>
	<InactiveBlock public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><x path="Void"/></x>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</InactiveBlock>
	<MissingFields public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><t path="haxe.display.MissingFieldDiagnostics"/></x>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MissingFields>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Diagnostic.DiagnosticKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
		<DKUnusedImport public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><x path="Void"/></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DKUnusedImport>
		<DKUnresolvedIdentifier public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><c path="Array"><a>
	<name><c path="String"/></name>
	<kind><x path="haxe.display.UnresolvedIdentifierSuggestion"/></kind>
</a></c></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DKUnresolvedIdentifier>
		<DKCompilerError public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DKCompilerError>
		<ReplaceableCode public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><t path="haxe.display.ReplaceableCodeDiagnostics"/></x>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ReplaceableCode>
		<DKParserError public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DKParserError>
		<DeprecationWarning public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DeprecationWarning>
		<InactiveBlock public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><x path="Void"/></x>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</InactiveBlock>
		<MissingFields public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><t path="haxe.display.MissingFieldDiagnostics"/></x>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MissingFields>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.DiagnosticSeverity" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Diagnostic.DiagnosticSeverity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
	<Error public="1" get="inline" set="null" expr="cast 1" line="67" static="1">
		<x path="haxe.display.DiagnosticSeverity"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Error>
	<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.DiagnosticSeverity"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Warning>
	<Information public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.DiagnosticSeverity"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Information>
	<Hint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.DiagnosticSeverity"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Hint>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Diagnostic.DiagnosticSeverity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
		<Error public="1" get="inline" set="null" expr="cast 1" line="67" static="1">
			<x path="haxe.display.DiagnosticSeverity"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Error>
		<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.DiagnosticSeverity"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Warning>
		<Information public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.DiagnosticSeverity"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Information>
		<Hint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.DiagnosticSeverity"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Hint>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.Diagnostic" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx"><a>
	<severity><x path="haxe.display.DiagnosticSeverity"/></severity>
	<relatedInformation><c path="Array"><t path="haxe.display.DiagnosticRelatedInformation"/></c></relatedInformation>
	<range><t path="haxe.display.Range"/></range>
	<kind><x path="haxe.display.DiagnosticKind"><c path="haxe.display.Diagnostic.T"/></x></kind>
	<code><x path="Null"><c path="String"/></x></code>
	<args><c path="haxe.display.Diagnostic.T"/></args>
</a></typedef>
	<typedef path="haxe.display.DiagnosticRelatedInformation" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<message><c path="String"/></message>
	<location><t path="haxe.display.Location"/></location>
	<depth><x path="Int"/></depth>
</a></typedef>
	<class path="haxe.display.DisplayMethods" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<Diagnostics public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;DiagnosticsParams,DiagnosticsResult&gt;(&quot;display/diagnostics&quot;)" line="39" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.DiagnosticsParams"/>
				<t path="haxe.display.DiagnosticsResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<DiagnosticsParams,DiagnosticsResult>("display/diagnostics")]]></e></m></meta>
			<haxe_doc>The request is sent from the client to Haxe to get diagnostics for a specific file, a list of files or the whole project.</haxe_doc>
		</Diagnostics>
		<Completion public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;CompletionParams,CompletionResult&gt;(&quot;display/completion&quot;)" line="45" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.CompletionParams"/>
				<t path="haxe.display.CompletionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<CompletionParams,CompletionResult>("display/completion")]]></e></m></meta>
			<haxe_doc>The completion request is sent from the client to Haxe to request code completion.
		Haxe automatically determines the type of completion to use based on the passed position, see `CompletionResultKind`.</haxe_doc>
		</Completion>
		<CompletionItemResolve public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;CompletionItemResolveParams,CompletionItemResolveResult&gt;(&quot;display/completionItem/resolve&quot;)" line="50" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.CompletionItemResolveParams"/>
				<t path="haxe.display.CompletionItemResolveResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<CompletionItemResolveParams,CompletionItemResolveResult>("display/completionItem/resolve")]]></e></m></meta>
			<haxe_doc>The request is sent from the client to Haxe to resolve additional information for a given completion item.</haxe_doc>
		</CompletionItemResolve>
		<FindReferences public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FindReferencesParams,GotoDefinitionResult&gt;(&quot;display/references&quot;)" line="55" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FindReferencesParams"/>
				<t path="haxe.display.GotoDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FindReferencesParams,GotoDefinitionResult>("display/references")]]></e></m></meta>
			<haxe_doc>The find references request is sent from the client to Haxe to find locations that reference the symbol at a given text document position.</haxe_doc>
		</FindReferences>
		<GotoDefinition public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoDefinitionResult&gt;(&quot;display/definition&quot;)" line="60" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoDefinitionResult>("display/definition")]]></e></m></meta>
			<haxe_doc>The goto definition request is sent from the client to Haxe to resolve the definition location(s) of a symbol at a given text document position.</haxe_doc>
		</GotoDefinition>
		<GotoImplementation public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoDefinitionResult&gt;(&quot;display/implementation&quot;)" line="65" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoDefinitionResult>("display/implementation")]]></e></m></meta>
			<haxe_doc>The goto implementation request is sent from the client to Haxe to resolve the implementation location(s) of a symbol at a given text document position.</haxe_doc>
		</GotoImplementation>
		<GotoTypeDefinition public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoTypeDefinitionResult&gt;(&quot;display/typeDefinition&quot;)" line="70" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoTypeDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoTypeDefinitionResult>("display/typeDefinition")]]></e></m></meta>
			<haxe_doc>The goto type definition request is sent from the client to Haxe to resolve the type definition location(s) of a symbol at a given text document position.</haxe_doc>
		</GotoTypeDefinition>
		<Hover public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,HoverResult&gt;(&quot;display/hover&quot;)" line="75" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.HoverResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,HoverResult>("display/hover")]]></e></m></meta>
			<haxe_doc>The hover request is sent from the client to Haxe to request hover information at a given text document position.</haxe_doc>
		</Hover>
		<DeterminePackage public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,DeterminePackageResult&gt;(&quot;display/package&quot;)" line="80" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.DeterminePackageResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,DeterminePackageResult>("display/package")]]></e></m></meta>
			<haxe_doc>This request is sent from the client to Haxe to determine the package for a given file, based on class paths configuration.</haxe_doc>
		</DeterminePackage>
		<SignatureHelp public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;SignatureHelpParams,SignatureHelpResult&gt;(&quot;display/signatureHelp&quot;)" line="85" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.SignatureHelpParams"/>
				<t path="haxe.display.SignatureHelpResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<SignatureHelpParams,SignatureHelpResult>("display/signatureHelp")]]></e></m></meta>
			<haxe_doc>The signature help request is sent from the client to Haxe to request signature information at a given cursor position.</haxe_doc>
		</SignatureHelp>
		<Metadata public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;MetadataParams,MetadataResult&gt;(&quot;display/metadata&quot;)" line="90" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.MetadataParams"/>
				<t path="haxe.display.MetadataResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<MetadataParams,MetadataResult>("display/metadata")]]></e></m></meta>
			<haxe_doc>The metadata request is sent from the client to Haxe to get a list of all registered metadata and their documentation.</haxe_doc>
		</Metadata>
		<Defines public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;DefinesParams,DefinesResult&gt;(&quot;display/defines&quot;)" line="95" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.DefinesParams"/>
				<t path="haxe.display.DefinesResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<DefinesParams,DefinesResult>("display/defines")]]></e></m></meta>
			<haxe_doc>The defines request is sent from the client to Haxe to get a list of all registered defines and their documentation.</haxe_doc>
		</Defines>
		<haxe_doc>Methods of the JSON-RPC-based `--display` protocol in Haxe 4.
	A lot of the methods are *inspired* by the Language Server Protocol, but there is **no** intention to be directly compatible with it.</haxe_doc>
		<meta><m n=":publicFields"/></meta>
	</class>
	<typedef path="haxe.display.CompletionParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<wasAutoTriggered><x path="Bool"/></wasAutoTriggered>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<meta>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>list of metas to include in responses</haxe_doc>
			</meta>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>Completion</haxe_doc>
	</typedef>
	<typedef path="haxe.display.FieldResolution" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<qualifier>
		<c path="String"/>
		<haxe_doc>The qualifier that has to be inserted to use the field if `!isQualified`.
		Can either be `this` or `super` for instance fields for the type name for `static` fields.</haxe_doc>
	</qualifier>
	<isQualified>
		<x path="Bool"/>
		<haxe_doc>Whether it's valid to use the unqualified name of the field or not.
		This is `false` if the identifier is shadowed.</haxe_doc>
	</isQualified>
</a></typedef>
	<typedef path="haxe.display.DisplayLocal" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<type><t path="haxe.display.JsonType"><c path="haxe.display.DisplayLocal.T"/></t></type>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<origin><x path="haxe.display.LocalOrigin"/></origin>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<isInline><x path="Bool"/></isInline>
	<isFinal><x path="Bool"/></isFinal>
	<id><x path="Int"/></id>
	<extra>
		<x path="Null"><a>
	<params><c path="Array"><t path="haxe.display.JsonTypeParameter"/></c></params>
	<expr><t path="haxe.display.JsonExpr"/></expr>
</a></x>
		<meta><m n=":optional"/></meta>
	</extra>
	<capture><x path="Bool"/></capture>
</a></typedef>
	<abstract path="haxe.display.LocalOrigin" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.LocalOrigin_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<LocalVariable public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LocalVariable>
	<Argument public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Argument>
	<ForVariable public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ForVariable>
	<PatternVariable public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PatternVariable>
	<CatchVariable public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CatchVariable>
	<LocalFunction public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LocalFunction>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.LocalOrigin_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<LocalVariable public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LocalVariable>
		<Argument public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Argument>
		<ForVariable public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ForVariable>
		<PatternVariable public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PatternVariable>
		<CatchVariable public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CatchVariable>
		<LocalFunction public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LocalFunction>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.ClassFieldOriginKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.ClassFieldOriginKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The field is declared on the current type itself.</haxe_doc>
	</Self>
	<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The field is a static field brought into context via a static import
		(`import pack.Module.Type.field`).</haxe_doc>
	</StaticImport>
	<Parent public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The field is declared on a parent type, such as:
		- a super class field that is not overriden
		- a forwarded abstract field</haxe_doc>
	</Parent>
	<StaticExtension public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The field is a static extension method brought
		into context with the `using` keyword.</haxe_doc>
	</StaticExtension>
	<AnonymousStructure public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>This field doesn't belong to any named type, just an anonymous structure.</haxe_doc>
	</AnonymousStructure>
	<BuiltIn public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Special fields built into the compiler, such as:
		- `code` on single-character Strings
		- `bind()` on functions.</haxe_doc>
	</BuiltIn>
	<Unknown public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The origin of this class field is unknown.</haxe_doc>
	</Unknown>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.ClassFieldOriginKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The field is declared on the current type itself.</haxe_doc>
		</Self>
		<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The field is a static field brought into context via a static import
		(`import pack.Module.Type.field`).</haxe_doc>
		</StaticImport>
		<Parent public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The field is declared on a parent type, such as:
		- a super class field that is not overriden
		- a forwarded abstract field</haxe_doc>
		</Parent>
		<StaticExtension public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The field is a static extension method brought
		into context with the `using` keyword.</haxe_doc>
		</StaticExtension>
		<AnonymousStructure public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>This field doesn't belong to any named type, just an anonymous structure.</haxe_doc>
		</AnonymousStructure>
		<BuiltIn public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Special fields built into the compiler, such as:
		- `code` on single-character Strings
		- `bind()` on functions.</haxe_doc>
		</BuiltIn>
		<Unknown public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The origin of this class field is unknown.</haxe_doc>
		</Unknown>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.ClassFieldOrigin" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.ClassFieldOriginKind"><c path="haxe.display.ClassFieldOrigin.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.ClassFieldOrigin.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.ClassFieldOccurrence" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<resolution><t path="haxe.display.FieldResolution"/></resolution>
	<origin>
		<x path="Null"><t path="haxe.display.ClassFieldOrigin"><c path="haxe.display.ClassFieldOccurrence.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<field><t path="haxe.display.JsonClassField"/></field>
</a></typedef>
	<abstract path="haxe.display.EnumFieldOriginKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.EnumFieldOriginKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The enum value is declared on the current type itself.</haxe_doc>
	</Self>
	<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The enum value is brought into context via a static import
		(`import pack.Module.Enum.Value`).</haxe_doc>
	</StaticImport>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.EnumFieldOriginKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The enum value is declared on the current type itself.</haxe_doc>
		</Self>
		<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The enum value is brought into context via a static import
		(`import pack.Module.Enum.Value`).</haxe_doc>
		</StaticImport>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.EnumFieldOrigin" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.EnumFieldOriginKind"><c path="haxe.display.EnumFieldOrigin.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.EnumFieldOrigin.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.EnumFieldOccurrence" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<resolution><t path="haxe.display.FieldResolution"/></resolution>
	<origin>
		<x path="Null"><t path="haxe.display.EnumFieldOrigin"><c path="haxe.display.EnumFieldOccurrence.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<field><t path="haxe.display.JsonEnumField"/></field>
</a></typedef>
	<abstract path="haxe.display.Literal" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.Literal_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Null public="1" get="inline" set="null" expr="cast &quot;null&quot;" line="232" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "null"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Null>
	<True public="1" get="inline" set="null" expr="cast &quot;true&quot;" line="233" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "true"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</True>
	<False public="1" get="inline" set="null" expr="cast &quot;false&quot;" line="234" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "false"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</False>
	<This public="1" get="inline" set="null" expr="cast &quot;this&quot;" line="235" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "this"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</This>
	<Trace public="1" get="inline" set="null" expr="cast &quot;trace&quot;" line="236" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "trace"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Trace>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.Literal_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Null public="1" get="inline" set="null" expr="cast &quot;null&quot;" line="232" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "null"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Null>
		<True public="1" get="inline" set="null" expr="cast &quot;true&quot;" line="233" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "true"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</True>
		<False public="1" get="inline" set="null" expr="cast &quot;false&quot;" line="234" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "false"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</False>
		<This public="1" get="inline" set="null" expr="cast &quot;this&quot;" line="235" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "this"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</This>
		<Trace public="1" get="inline" set="null" expr="cast &quot;trace&quot;" line="236" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "trace"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Trace>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.DisplayModuleTypeKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.DisplayModuleTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Class public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Class>
	<Interface public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Interface>
	<Enum public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Enum>
	<Abstract public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Abstract>
	<EnumAbstract public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EnumAbstract>
	<TypeAlias public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>A `typedef` that is just an alias for another type.</haxe_doc>
	</TypeAlias>
	<Struct public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>A `typedef` that is an alias for an anonymous structure.</haxe_doc>
	</Struct>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.DisplayModuleTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Class public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Class>
		<Interface public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Interface>
		<Enum public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Enum>
		<Abstract public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Abstract>
		<EnumAbstract public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EnumAbstract>
		<TypeAlias public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>A `typedef` that is just an alias for another type.</haxe_doc>
		</TypeAlias>
		<Struct public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>A `typedef` that is an alias for an anonymous structure.</haxe_doc>
		</Struct>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.DisplayModuleType" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<path><t path="haxe.display.JsonTypePath"/></path>
	<params><c path="Array"><t path="haxe.display.DisplayModuleTypeParameter"/></c></params>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><x path="haxe.display.DisplayModuleTypeKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isFinal><x path="Bool"/></isFinal>
	<isExtern><x path="Bool"/></isExtern>
	<isAbstract><x path="Bool"/></isAbstract>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.DisplayModuleTypeParameter" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<constraints><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></constraints>
</a></typedef>
	<typedef path="haxe.display.DisplayLiteral" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><name><c path="String"/></name></a></typedef>
	<abstract path="haxe.display.MetadataTarget" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.MetadataTarget_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Class public="1" get="inline" set="null" expr="cast &quot;TClass&quot;" line="280" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TClass"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Class>
	<ClassField public="1" get="inline" set="null" expr="cast &quot;TClassField&quot;" line="281" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TClassField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ClassField>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="282" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAbstract"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Abstract>
	<AbstractField public="1" get="inline" set="null" expr="cast &quot;TAbstractField&quot;" line="283" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAbstractField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AbstractField>
	<Enum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="284" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TEnum"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Enum>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;TTypedef&quot;" line="285" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TTypedef"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Typedef>
	<AnyField public="1" get="inline" set="null" expr="cast &quot;TAnyField&quot;" line="286" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAnyField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AnyField>
	<Expr public="1" get="inline" set="null" expr="cast &quot;TExpr&quot;" line="287" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TExpr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Expr>
	<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TTypeParameter&quot;" line="288" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TTypeParameter"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeParameter>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.MetadataTarget_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Class public="1" get="inline" set="null" expr="cast &quot;TClass&quot;" line="280" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TClass"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Class>
		<ClassField public="1" get="inline" set="null" expr="cast &quot;TClassField&quot;" line="281" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TClassField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ClassField>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="282" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAbstract"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Abstract>
		<AbstractField public="1" get="inline" set="null" expr="cast &quot;TAbstractField&quot;" line="283" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAbstractField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AbstractField>
		<Enum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="284" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TEnum"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Enum>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;TTypedef&quot;" line="285" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TTypedef"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Typedef>
		<AnyField public="1" get="inline" set="null" expr="cast &quot;TAnyField&quot;" line="286" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAnyField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AnyField>
		<Expr public="1" get="inline" set="null" expr="cast &quot;TExpr&quot;" line="287" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TExpr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Expr>
		<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TTypeParameter&quot;" line="288" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TTypeParameter"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeParameter>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.Platform" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.Platform_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Cross public="1" get="inline" set="null" expr="cast &quot;cross&quot;" line="292" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "cross"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Cross>
	<Js public="1" get="inline" set="null" expr="cast &quot;js&quot;" line="293" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "js"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Js>
	<Lua public="1" get="inline" set="null" expr="cast &quot;lua&quot;" line="294" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "lua"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Lua>
	<Neko public="1" get="inline" set="null" expr="cast &quot;neko&quot;" line="295" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "neko"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Neko>
	<Flash public="1" get="inline" set="null" expr="cast &quot;flash&quot;" line="296" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "flash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Flash>
	<Php public="1" get="inline" set="null" expr="cast &quot;php&quot;" line="297" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "php"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Php>
	<Cpp public="1" get="inline" set="null" expr="cast &quot;cpp&quot;" line="298" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "cpp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Cpp>
	<Java public="1" get="inline" set="null" expr="cast &quot;java&quot;" line="299" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "java"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Java>
	<Python public="1" get="inline" set="null" expr="cast &quot;python&quot;" line="300" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "python"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Python>
	<Hl public="1" get="inline" set="null" expr="cast &quot;hl&quot;" line="301" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "hl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Hl>
	<Eval public="1" get="inline" set="null" expr="cast &quot;eval&quot;" line="302" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "eval"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Eval>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.Platform_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Cross public="1" get="inline" set="null" expr="cast &quot;cross&quot;" line="292" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "cross"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Cross>
		<Js public="1" get="inline" set="null" expr="cast &quot;js&quot;" line="293" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "js"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Js>
		<Lua public="1" get="inline" set="null" expr="cast &quot;lua&quot;" line="294" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "lua"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Lua>
		<Neko public="1" get="inline" set="null" expr="cast &quot;neko&quot;" line="295" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "neko"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Neko>
		<Flash public="1" get="inline" set="null" expr="cast &quot;flash&quot;" line="296" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "flash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Flash>
		<Php public="1" get="inline" set="null" expr="cast &quot;php&quot;" line="297" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "php"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Php>
		<Cpp public="1" get="inline" set="null" expr="cast &quot;cpp&quot;" line="298" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "cpp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Cpp>
		<Java public="1" get="inline" set="null" expr="cast &quot;java&quot;" line="299" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "java"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Java>
		<Python public="1" get="inline" set="null" expr="cast &quot;python&quot;" line="300" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "python"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Python>
		<Hl public="1" get="inline" set="null" expr="cast &quot;hl&quot;" line="301" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "hl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Hl>
		<Eval public="1" get="inline" set="null" expr="cast &quot;eval&quot;" line="302" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "eval"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Eval>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.Metadata" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<targets><c path="Array"><x path="haxe.display.MetadataTarget"/></c></targets>
	<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
	<parameters><c path="Array"><c path="String"/></c></parameters>
	<origin>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<name><c path="String"/></name>
	<links>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
	</links>
	<internal><x path="Bool"/></internal>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.Define" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<value><x path="Null"><c path="String"/></x></value>
	<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
	<parameters><c path="Array"><c path="String"/></c></parameters>
	<origin>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<name><c path="String"/></name>
	<links><c path="Array"><c path="String"/></c></links>
	<doc><t path="haxe.display.JsonDoc"/></doc>
	<deprecated>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</deprecated>
</a></typedef>
	<typedef path="haxe.display.Keyword" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><name><x path="haxe.display.KeywordKind"/></name></a></typedef>
	<abstract path="haxe.display.KeywordKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.KeywordKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Implements public="1" get="inline" set="null" expr="cast &quot;implements&quot;" line="332" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "implements"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Implements>
	<Extends public="1" get="inline" set="null" expr="cast &quot;extends&quot;" line="333" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "extends"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Extends>
	<Function public="1" get="inline" set="null" expr="cast &quot;function&quot;" line="334" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "function"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Function>
	<Var public="1" get="inline" set="null" expr="cast &quot;var&quot;" line="335" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "var"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Var>
	<If public="1" get="inline" set="null" expr="cast &quot;if&quot;" line="336" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "if"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</If>
	<Else public="1" get="inline" set="null" expr="cast &quot;else&quot;" line="337" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "else"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Else>
	<While public="1" get="inline" set="null" expr="cast &quot;while&quot;" line="338" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "while"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</While>
	<Do public="1" get="inline" set="null" expr="cast &quot;do&quot;" line="339" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "do"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Do>
	<For public="1" get="inline" set="null" expr="cast &quot;for&quot;" line="340" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "for"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</For>
	<Break public="1" get="inline" set="null" expr="cast &quot;break&quot;" line="341" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "break"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Break>
	<Return public="1" get="inline" set="null" expr="cast &quot;return&quot;" line="342" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "return"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Return>
	<Continue public="1" get="inline" set="null" expr="cast &quot;continue&quot;" line="343" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "continue"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Continue>
	<Switch public="1" get="inline" set="null" expr="cast &quot;switch&quot;" line="344" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "switch"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Switch>
	<Case public="1" get="inline" set="null" expr="cast &quot;case&quot;" line="345" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "case"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Case>
	<Default public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="346" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "default"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Default>
	<Try public="1" get="inline" set="null" expr="cast &quot;try&quot;" line="347" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "try"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Try>
	<Catch public="1" get="inline" set="null" expr="cast &quot;catch&quot;" line="348" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "catch"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Catch>
	<New public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="349" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "new"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</New>
	<Throw public="1" get="inline" set="null" expr="cast &quot;throw&quot;" line="350" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "throw"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Throw>
	<Untyped public="1" get="inline" set="null" expr="cast &quot;untyped&quot;" line="351" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "untyped"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Untyped>
	<Cast public="1" get="inline" set="null" expr="cast &quot;cast&quot;" line="352" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "cast"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Cast>
	<Macro public="1" get="inline" set="null" expr="cast &quot;macro&quot;" line="353" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "macro"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Macro>
	<Package public="1" get="inline" set="null" expr="cast &quot;package&quot;" line="354" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "package"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Package>
	<Import public="1" get="inline" set="null" expr="cast &quot;import&quot;" line="355" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "import"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Import>
	<Using public="1" get="inline" set="null" expr="cast &quot;using&quot;" line="356" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "using"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Using>
	<Public public="1" get="inline" set="null" expr="cast &quot;public&quot;" line="357" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "public"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Public>
	<Private public="1" get="inline" set="null" expr="cast &quot;private&quot;" line="358" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "private"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Private>
	<Static public="1" get="inline" set="null" expr="cast &quot;static&quot;" line="359" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "static"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Static>
	<Extern public="1" get="inline" set="null" expr="cast &quot;extern&quot;" line="360" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "extern"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Extern>
	<Dynamic public="1" get="inline" set="null" expr="cast &quot;dynamic&quot;" line="361" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "dynamic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Dynamic>
	<Override public="1" get="inline" set="null" expr="cast &quot;override&quot;" line="362" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "override"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Override>
	<Overload public="1" get="inline" set="null" expr="cast &quot;overload&quot;" line="363" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "overload"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Overload>
	<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="364" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "class"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Class>
	<Interface public="1" get="inline" set="null" expr="cast &quot;interface&quot;" line="365" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "interface"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Interface>
	<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="366" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "enum"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Enum>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="367" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "abstract"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Abstract>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="368" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "typedef"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Typedef>
	<Final public="1" get="inline" set="null" expr="cast &quot;final&quot;" line="369" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "final"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Final>
	<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="370" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "inline"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Inline>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.KeywordKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Implements public="1" get="inline" set="null" expr="cast &quot;implements&quot;" line="332" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "implements"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Implements>
		<Extends public="1" get="inline" set="null" expr="cast &quot;extends&quot;" line="333" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "extends"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Extends>
		<Function public="1" get="inline" set="null" expr="cast &quot;function&quot;" line="334" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "function"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Function>
		<Var public="1" get="inline" set="null" expr="cast &quot;var&quot;" line="335" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "var"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Var>
		<If public="1" get="inline" set="null" expr="cast &quot;if&quot;" line="336" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "if"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</If>
		<Else public="1" get="inline" set="null" expr="cast &quot;else&quot;" line="337" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "else"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Else>
		<While public="1" get="inline" set="null" expr="cast &quot;while&quot;" line="338" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "while"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</While>
		<Do public="1" get="inline" set="null" expr="cast &quot;do&quot;" line="339" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "do"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Do>
		<For public="1" get="inline" set="null" expr="cast &quot;for&quot;" line="340" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "for"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</For>
		<Break public="1" get="inline" set="null" expr="cast &quot;break&quot;" line="341" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "break"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Break>
		<Return public="1" get="inline" set="null" expr="cast &quot;return&quot;" line="342" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "return"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Return>
		<Continue public="1" get="inline" set="null" expr="cast &quot;continue&quot;" line="343" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "continue"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Continue>
		<Switch public="1" get="inline" set="null" expr="cast &quot;switch&quot;" line="344" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "switch"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Switch>
		<Case public="1" get="inline" set="null" expr="cast &quot;case&quot;" line="345" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "case"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Case>
		<Default public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="346" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "default"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Default>
		<Try public="1" get="inline" set="null" expr="cast &quot;try&quot;" line="347" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "try"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Try>
		<Catch public="1" get="inline" set="null" expr="cast &quot;catch&quot;" line="348" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "catch"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Catch>
		<New public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="349" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "new"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</New>
		<Throw public="1" get="inline" set="null" expr="cast &quot;throw&quot;" line="350" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "throw"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Throw>
		<Untyped public="1" get="inline" set="null" expr="cast &quot;untyped&quot;" line="351" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "untyped"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Untyped>
		<Cast public="1" get="inline" set="null" expr="cast &quot;cast&quot;" line="352" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "cast"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Cast>
		<Macro public="1" get="inline" set="null" expr="cast &quot;macro&quot;" line="353" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "macro"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Macro>
		<Package public="1" get="inline" set="null" expr="cast &quot;package&quot;" line="354" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "package"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Package>
		<Import public="1" get="inline" set="null" expr="cast &quot;import&quot;" line="355" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "import"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Import>
		<Using public="1" get="inline" set="null" expr="cast &quot;using&quot;" line="356" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "using"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Using>
		<Public public="1" get="inline" set="null" expr="cast &quot;public&quot;" line="357" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "public"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Public>
		<Private public="1" get="inline" set="null" expr="cast &quot;private&quot;" line="358" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "private"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Private>
		<Static public="1" get="inline" set="null" expr="cast &quot;static&quot;" line="359" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "static"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Static>
		<Extern public="1" get="inline" set="null" expr="cast &quot;extern&quot;" line="360" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "extern"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Extern>
		<Dynamic public="1" get="inline" set="null" expr="cast &quot;dynamic&quot;" line="361" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "dynamic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Dynamic>
		<Override public="1" get="inline" set="null" expr="cast &quot;override&quot;" line="362" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "override"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Override>
		<Overload public="1" get="inline" set="null" expr="cast &quot;overload&quot;" line="363" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "overload"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Overload>
		<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="364" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "class"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Class>
		<Interface public="1" get="inline" set="null" expr="cast &quot;interface&quot;" line="365" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "interface"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Interface>
		<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="366" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "enum"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Enum>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="367" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "abstract"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Abstract>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="368" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "typedef"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Typedef>
		<Final public="1" get="inline" set="null" expr="cast &quot;final&quot;" line="369" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "final"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Final>
		<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="370" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "inline"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Inline>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.Package" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><path><t path="haxe.display.JsonPackagePath"/></path></a></typedef>
	<typedef path="haxe.display.Module" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><path><t path="haxe.display.JsonModulePath"/></path></a></typedef>
	<abstract path="haxe.display.DisplayItemKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.DisplayItemKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Local public="1" get="inline" set="null" expr="cast &quot;Local&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLocal"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "Local"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Local>
	<ClassField public="1" get="inline" set="null" expr="cast &quot;ClassField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "ClassField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ClassField>
	<EnumField public="1" get="inline" set="null" expr="cast &quot;EnumField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.EnumFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "EnumField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EnumField>
	<EnumAbstractField public="1" get="inline" set="null" expr="cast &quot;EnumAbstractField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "EnumAbstractField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Only for the enum values in enum abstracts, other fields use `ClassField`.</haxe_doc>
	</EnumAbstractField>
	<Type public="1" get="inline" set="null" expr="cast &quot;Type&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleType"/></x>
		<meta>
			<m n=":value"><e>cast "Type"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Type>
	<Package public="1" get="inline" set="null" expr="cast &quot;Package&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Package"/></x>
		<meta>
			<m n=":value"><e>cast "Package"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Package>
	<Module public="1" get="inline" set="null" expr="cast &quot;Module&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Module"/></x>
		<meta>
			<m n=":value"><e>cast "Module"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Module>
	<Literal public="1" get="inline" set="null" expr="cast &quot;Literal&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLiteral"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "Literal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Literal>
	<Metadata public="1" get="inline" set="null" expr="cast &quot;Metadata&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Metadata"/></x>
		<meta>
			<m n=":value"><e>cast "Metadata"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Metadata>
	<Keyword public="1" get="inline" set="null" expr="cast &quot;Keyword&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Keyword"/></x>
		<meta>
			<m n=":value"><e>cast "Keyword"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Keyword>
	<AnonymousStructure public="1" get="inline" set="null" expr="cast &quot;AnonymousStructure&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast "AnonymousStructure"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AnonymousStructure>
	<Expression public="1" get="inline" set="null" expr="cast &quot;Expression&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonTExpr"/></x>
		<meta>
			<m n=":value"><e>cast "Expression"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Expression>
	<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TypeParameter&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleTypeParameter"/></x>
		<meta>
			<m n=":value"><e>cast "TypeParameter"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeParameter>
	<Define public="1" get="inline" set="null" expr="cast &quot;Define&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Define"/></x>
		<meta>
			<m n=":value"><e>cast "Define"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Define>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.DisplayItemKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Local public="1" get="inline" set="null" expr="cast &quot;Local&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLocal"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "Local"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Local>
		<ClassField public="1" get="inline" set="null" expr="cast &quot;ClassField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "ClassField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ClassField>
		<EnumField public="1" get="inline" set="null" expr="cast &quot;EnumField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.EnumFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "EnumField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EnumField>
		<EnumAbstractField public="1" get="inline" set="null" expr="cast &quot;EnumAbstractField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "EnumAbstractField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Only for the enum values in enum abstracts, other fields use `ClassField`.</haxe_doc>
		</EnumAbstractField>
		<Type public="1" get="inline" set="null" expr="cast &quot;Type&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleType"/></x>
			<meta>
				<m n=":value"><e>cast "Type"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Type>
		<Package public="1" get="inline" set="null" expr="cast &quot;Package&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Package"/></x>
			<meta>
				<m n=":value"><e>cast "Package"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Package>
		<Module public="1" get="inline" set="null" expr="cast &quot;Module&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Module"/></x>
			<meta>
				<m n=":value"><e>cast "Module"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Module>
		<Literal public="1" get="inline" set="null" expr="cast &quot;Literal&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLiteral"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "Literal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Literal>
		<Metadata public="1" get="inline" set="null" expr="cast &quot;Metadata&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Metadata"/></x>
			<meta>
				<m n=":value"><e>cast "Metadata"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Metadata>
		<Keyword public="1" get="inline" set="null" expr="cast &quot;Keyword&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Keyword"/></x>
			<meta>
				<m n=":value"><e>cast "Keyword"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Keyword>
		<AnonymousStructure public="1" get="inline" set="null" expr="cast &quot;AnonymousStructure&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast "AnonymousStructure"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AnonymousStructure>
		<Expression public="1" get="inline" set="null" expr="cast &quot;Expression&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonTExpr"/></x>
			<meta>
				<m n=":value"><e>cast "Expression"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Expression>
		<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TypeParameter&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleTypeParameter"/></x>
			<meta>
				<m n=":value"><e>cast "TypeParameter"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeParameter>
		<Define public="1" get="inline" set="null" expr="cast &quot;Define&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Define"/></x>
			<meta>
				<m n=":value"><e>cast "Define"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Define>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.DisplayItem" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<type>
		<x path="Null"><t path="haxe.display.JsonType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</type>
	<kind><x path="haxe.display.DisplayItemKind"><c path="haxe.display.DisplayItem.T"/></x></kind>
	<index>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</index>
	<args><c path="haxe.display.DisplayItem.T"/></args>
</a></typedef>
	<typedef path="haxe.display.DisplayItemOccurrence" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.DisplayItemOccurrence.T"/></t></item>
</a></typedef>
	<typedef path="haxe.display.FieldCompletionSubject" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<keyValueIterator>
		<x path="Null"><a>
	<value><t path="haxe.display.JsonType"><d/></t></value>
	<key><t path="haxe.display.JsonType"><d/></t></key>
</a></x>
		<meta><m n=":optional"/></meta>
	</keyValueIterator>
	<iterator>
		<x path="Null"><a><type><t path="haxe.display.JsonType"><d/></t></type></a></x>
		<meta><m n=":optional"/></meta>
	</iterator>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.FieldCompletionSubject.T"/></t></item>
</a></typedef>
	<typedef path="haxe.display.ToplevelCompletion" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<expectedTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.ToplevelCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedTypeFollowed>
	<expectedType>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.ToplevelCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedType>
	<compatibleTypes>
		<x path="Null"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></x>
		<meta><m n=":optional"/></meta>
	</compatibleTypes>
</a></typedef>
	<typedef path="haxe.display.StructExtensionCompletion" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><isIntersectionType><x path="Bool"/></isIntersectionType></a></typedef>
	<typedef path="haxe.display.PatternCompletion" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<isOutermostPattern><x path="Bool"/></isOutermostPattern>
	<expectedTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.PatternCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedTypeFollowed>
	<expectedType>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.PatternCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedType>
	<compatibleTypes>
		<x path="Null"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></x>
		<meta><m n=":optional"/></meta>
	</compatibleTypes>
</a></typedef>
	<typedef path="haxe.display.DiagnosticsParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<fileContents>
		<x path="Null"><c path="Array"><a>
	<file><x path="haxe.display.FsPath"/></file>
	<contents>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</contents>
</a></c></x>
		<meta><m n=":optional"/></meta>
	</fileContents>
	<file>
		<x path="Null"><x path="haxe.display.FsPath"/></x>
		<meta><m n=":optional"/></meta>
	</file>
	<contents>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</contents>
</a></typedef>
	<typedef path="haxe.display.DiagnosticsResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="haxe.ds.ReadOnlyArray"><a>
	<file><x path="haxe.display.FsPath"/></file>
	<diagnostics><x path="haxe.ds.ReadOnlyArray"><t path="haxe.display.Diagnostic"><x path="Any"/></t></x></diagnostics>
</a></x></t></typedef>
	<abstract path="haxe.display.CompletionModeKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.CompletionModeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Field public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.FieldCompletionSubject"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Field>
	<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</StructureField>
	<Toplevel public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.ToplevelCompletion"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Toplevel>
	<Metadata public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Metadata>
	<TypeHint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeHint>
	<Extends public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Extends>
	<Implements public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Implements>
	<StructExtension public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.StructExtensionCompletion"/></x>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</StructExtension>
	<Import public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Import>
	<Using public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Using>
	<New public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</New>
	<Pattern public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.PatternCompletion"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Pattern>
	<Override public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Override>
	<TypeRelation public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeRelation>
	<TypeDeclaration public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeDeclaration>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.CompletionModeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Field public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.FieldCompletionSubject"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Field>
		<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</StructureField>
		<Toplevel public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.ToplevelCompletion"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Toplevel>
		<Metadata public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Metadata>
		<TypeHint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeHint>
		<Extends public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Extends>
		<Implements public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Implements>
		<StructExtension public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.StructExtensionCompletion"/></x>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</StructExtension>
		<Import public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Import>
		<Using public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Using>
		<New public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</New>
		<Pattern public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.PatternCompletion"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Pattern>
		<Override public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Override>
		<TypeRelation public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeRelation>
		<TypeDeclaration public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeDeclaration>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.CompletionMode" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionMode.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.CompletionMode.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.CompletionResponse" params="T1:T2" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<replaceRange>
		<x path="Null"><t path="haxe.display.Range"/></x>
		<meta><m n=":optional"/></meta>
	</replaceRange>
	<mode><t path="haxe.display.CompletionMode"><c path="haxe.display.CompletionResponse.T2"/></t></mode>
	<items><c path="Array"><t path="haxe.display.DisplayItem"><c path="haxe.display.CompletionResponse.T1"/></t></c></items>
	<isIncomplete>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</isIncomplete>
	<filterString>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</filterString>
</a></typedef>
	<typedef path="haxe.display.CompletionResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="Null"><t path="haxe.display.CompletionResponse">
	<d/>
	<d/>
</t></x></t></typedef>
	<typedef path="haxe.display.CompletionItemResolveParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a><index><x path="Int"/></index></a>
		<haxe_doc>CompletionItem Resolve</haxe_doc>
	</typedef>
	<typedef path="haxe.display.CompletionItemResolveResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><a><item><t path="haxe.display.DisplayItem"><d/></t></item></a></t></typedef>
	<typedef path="haxe.display.FindReferencesParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<kind>
				<x path="Null"><x path="haxe.display.FindReferencesKind"/></x>
				<meta><m n=":optional"/></meta>
			</kind>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>FindReferences</haxe_doc>
	</typedef>
	<abstract path="haxe.display.FindReferencesKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.FindReferencesKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Direct public="1" get="inline" set="null" expr="cast &quot;direct&quot;" line="508" static="1">
		<x path="haxe.display.FindReferencesKind"/>
		<meta>
			<m n=":value"><e>cast "direct"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Find only direct references to the requested symbol.
		Does not look for references to parent or overriding methods.</haxe_doc>
	</Direct>
	<WithBaseAndDescendants public="1" get="inline" set="null" expr="cast &quot;withBaseAndDescendants&quot;" line="513" static="1">
		<x path="haxe.display.FindReferencesKind"/>
		<meta>
			<m n=":value"><e>cast "withBaseAndDescendants"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Find references to the base field and all the overidding fields in the inheritance chain.</haxe_doc>
	</WithBaseAndDescendants>
	<WithDescendants public="1" get="inline" set="null" expr="cast &quot;withDescendants&quot;" line="519" static="1">
		<x path="haxe.display.FindReferencesKind"/>
		<meta>
			<m n=":value"><e>cast "withDescendants"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Find references to the requested field and references to all
		descendants of the requested field.</haxe_doc>
	</WithDescendants>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.FindReferencesKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Direct public="1" get="inline" set="null" expr="cast &quot;direct&quot;" line="508" static="1">
			<x path="haxe.display.FindReferencesKind"/>
			<meta>
				<m n=":value"><e>cast "direct"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Find only direct references to the requested symbol.
		Does not look for references to parent or overriding methods.</haxe_doc>
		</Direct>
		<WithBaseAndDescendants public="1" get="inline" set="null" expr="cast &quot;withBaseAndDescendants&quot;" line="513" static="1">
			<x path="haxe.display.FindReferencesKind"/>
			<meta>
				<m n=":value"><e>cast "withBaseAndDescendants"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Find references to the base field and all the overidding fields in the inheritance chain.</haxe_doc>
		</WithBaseAndDescendants>
		<WithDescendants public="1" get="inline" set="null" expr="cast &quot;withDescendants&quot;" line="519" static="1">
			<x path="haxe.display.FindReferencesKind"/>
			<meta>
				<m n=":value"><e>cast "withDescendants"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Find references to the requested field and references to all
		descendants of the requested field.</haxe_doc>
		</WithDescendants>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.GotoDefinitionResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Location"/></c></t>
		<haxe_doc>GotoDefinition</haxe_doc>
	</typedef>
	<typedef path="haxe.display.GotoTypeDefinitionResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Location"/></c></t>
		<haxe_doc>GotoTypeDefinition</haxe_doc>
	</typedef>
	<typedef path="haxe.display.HoverResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><x path="Null"><t path="haxe.display.HoverDisplayItemOccurence"><d/></t></x></t>
		<haxe_doc>Hover</haxe_doc>
	</typedef>
	<typedef path="haxe.display.HoverDisplayItemOccurence" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.HoverDisplayItemOccurence.T"/></t></item>
	<expected>
		<x path="Null"><a>
	<type>
		<x path="Null"><t path="haxe.display.JsonType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</type>
	<name>
		<x path="Null"><a>
	<name><c path="String"/></name>
	<kind><x path="haxe.display.HoverExpectedNameKind"/></kind>
	<doc>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</doc>
</a></x>
		<meta><m n=":optional"/></meta>
	</name>
</a></x>
		<meta><m n=":optional"/></meta>
	</expected>
</a></typedef>
	<abstract path="haxe.display.HoverExpectedNameKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.HoverExpectedNameKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<FunctionArgument public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.HoverExpectedNameKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FunctionArgument>
	<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.HoverExpectedNameKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</StructureField>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.HoverExpectedNameKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<FunctionArgument public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.HoverExpectedNameKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FunctionArgument>
		<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.HoverExpectedNameKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</StructureField>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.DeterminePackageResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><c path="String"/></c></t>
		<haxe_doc>DeterminePackage</haxe_doc>
	</typedef>
	<typedef path="haxe.display.SignatureHelpParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<wasAutoTriggered><x path="Bool"/></wasAutoTriggered>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>SignatureHelp</haxe_doc>
	</typedef>
	<typedef path="haxe.display.SignatureInformation" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<ret><t path="haxe.display.JsonType"><d/></t></ret>
	<documentation>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</documentation>
	<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
</a></typedef>
	<abstract path="haxe.display.SignatureItemKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.SignatureItemKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Call public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.SignatureItemKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Call>
	<ArrayAccess public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.SignatureItemKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ArrayAccess>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.SignatureItemKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Call public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.SignatureItemKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Call>
		<ArrayAccess public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.SignatureItemKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ArrayAccess>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.SignatureItem" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<signatures><c path="Array"><t path="haxe.display.SignatureInformation"/></c></signatures>
	<kind><x path="haxe.display.SignatureItemKind"/></kind>
	<activeSignature><x path="Int"/></activeSignature>
	<activeParameter><x path="Int"/></activeParameter>
</a></typedef>
	<typedef path="haxe.display.SignatureHelpResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="Null"><t path="haxe.display.SignatureItem"/></x></t></typedef>
	<typedef path="haxe.display.MetadataParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<user><x path="Bool"/></user>
	<compiler><x path="Bool"/></compiler>
</a></typedef>
	<typedef path="haxe.display.MetadataResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Metadata"/></c></t></typedef>
	<typedef path="haxe.display.DefinesParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<user><x path="Bool"/></user>
	<compiler><x path="Bool"/></compiler>
</a></typedef>
	<typedef path="haxe.display.DefinesResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Define"/></c></t></typedef>
	<typedef path="haxe.display.PositionParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>General types</haxe_doc>
	</typedef>
	<abstract path="haxe.display.FsPath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/FsPath.hx">
		<this><c path="String"/></this>
		<impl><class path="haxe.display._FsPath.FsPath_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/FsPath.hx" private="1" module="haxe.display.FsPath" final="1">
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="path">
			<c path="String"/>
			<x path="haxe.display.FsPath"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<toString public="1" get="inline" set="null" line="30" static="1"><f a="this">
	<c path="String"/>
	<c path="String"/>
</f></toString>
</class></impl>
	</abstract>
	<class path="haxe.display._FsPath.FsPath_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/FsPath.hx" private="1" module="haxe.display.FsPath" final="1">
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="path">
				<c path="String"/>
				<x path="haxe.display.FsPath"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<toString public="1" get="inline" set="null" line="30" static="1"><f a="this">
	<c path="String"/>
	<c path="String"/>
</f></toString>
	</class>
	<typedef path="haxe.display.JsonTodo" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><d/></typedef>
	<typedef path="haxe.display.JsonPos" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.display.JsonDoc" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><x path="Null"><c path="String"/></x></typedef>
	<abstract path="haxe.display.ImportStatus" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.ImportStatus_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<Imported public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>This type is already available with it's unqualified name for one of these reasons:
		  - it's a toplevel type
		  - it's imported with an `import` in the current module
		  - it's imported in an `import.hx` file</haxe_doc>
	</Imported>
	<Unimported public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The type is currently not imported. It can be accessed either
		with its fully qualified name or by inserting an import.</haxe_doc>
	</Unimported>
	<Shadowed public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>A type with the same name is already imported in the module.
		The fully qualified name has to be used to access it.</haxe_doc>
	</Shadowed>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.ImportStatus_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<Imported public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>This type is already available with it's unqualified name for one of these reasons:
		  - it's a toplevel type
		  - it's imported with an `import` in the current module
		  - it's imported in an `import.hx` file</haxe_doc>
		</Imported>
		<Unimported public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The type is currently not imported. It can be accessed either
		with its fully qualified name or by inserting an import.</haxe_doc>
		</Unimported>
		<Shadowed public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>A type with the same name is already imported in the module.
		The fully qualified name has to be used to access it.</haxe_doc>
		</Shadowed>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonPackagePath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a><pack><c path="Array"><c path="String"/></c></pack></a></typedef>
	<typedef path="haxe.display.JsonModulePath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
</a></typedef>
	<typedef path="haxe.display.JsonTypePath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<typeName><c path="String"/></typeName>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
</a></typedef>
	<typedef path="haxe.display.JsonStaticFieldPath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<typeName><c path="String"/></typeName>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
	<fieldName><c path="String"/></fieldName>
</a></typedef>
	<typedef path="haxe.display.JsonTypePathWithParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<path><t path="haxe.display.JsonTypePath"/></path>
	<params><t path="haxe.display.JsonTypes"/></params>
</a></typedef>
	<typedef path="haxe.display.JsonFunctionArgument" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<value>
		<x path="Null"><a><string><c path="String"/></string></a></x>
		<meta><m n=":optional"/></meta>
	</value>
	<t><t path="haxe.display.JsonType"><d/></t></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.display.JsonFunctionSignature" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<ret><t path="haxe.display.JsonType"><d/></t></ret>
	<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
</a></typedef>
	<abstract path="haxe.display.JsonAnonStatusKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonAnonStatusKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<AClosed public="1" get="inline" set="null" expr="cast &quot;AClosed&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AClosed"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AClosed>
	<AOpened public="1" get="inline" set="null" expr="cast &quot;AOpened&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AOpened"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AOpened>
	<AConst public="1" get="inline" set="null" expr="cast &quot;AConst&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AConst"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AConst>
	<AExtend public="1" get="inline" set="null" expr="cast &quot;AExtend&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypes"/></x>
		<meta>
			<m n=":value"><e>cast "AExtend"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AExtend>
	<AClassStatics public="1" get="inline" set="null" expr="cast &quot;AClassStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AClassStatics"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AClassStatics>
	<AEnumStatics public="1" get="inline" set="null" expr="cast &quot;AEnumStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AEnumStatics"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AEnumStatics>
	<AAbstractStatics public="1" get="inline" set="null" expr="cast &quot;AAbstractStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AAbstractStatics"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AAbstractStatics>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonAnonStatusKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<AClosed public="1" get="inline" set="null" expr="cast &quot;AClosed&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AClosed"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AClosed>
		<AOpened public="1" get="inline" set="null" expr="cast &quot;AOpened&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AOpened"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AOpened>
		<AConst public="1" get="inline" set="null" expr="cast &quot;AConst&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AConst"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AConst>
		<AExtend public="1" get="inline" set="null" expr="cast &quot;AExtend&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypes"/></x>
			<meta>
				<m n=":value"><e>cast "AExtend"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AExtend>
		<AClassStatics public="1" get="inline" set="null" expr="cast &quot;AClassStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AClassStatics"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AClassStatics>
		<AEnumStatics public="1" get="inline" set="null" expr="cast &quot;AEnumStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AEnumStatics"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AEnumStatics>
		<AAbstractStatics public="1" get="inline" set="null" expr="cast &quot;AAbstractStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AAbstractStatics"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AAbstractStatics>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonAnonStatus" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatus.T"/></x></kind>
	<args><c path="haxe.display.JsonAnonStatus.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonAnon" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<status><t path="haxe.display.JsonAnonStatus"><d/></t></status>
	<fields><t path="haxe.display.JsonClassFields"/></fields>
</a></typedef>
	<abstract path="haxe.display.JsonTypeKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<TMono public="1" get="inline" set="null" expr="cast &quot;TMono&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonTypeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TMono"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TMono>
	<TInst public="1" get="inline" set="null" expr="cast &quot;TInst&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TInst"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TInst>
	<TEnum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TEnum"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TEnum>
	<TType public="1" get="inline" set="null" expr="cast &quot;TType&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TType"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TType>
	<TAbstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TAbstract"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TAbstract>
	<TFun public="1" get="inline" set="null" expr="cast &quot;TFun&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonFunctionSignature"/></x>
		<meta>
			<m n=":value"><e>cast "TFun"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TFun>
	<TAnonymous public="1" get="inline" set="null" expr="cast &quot;TAnonymous&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast "TAnonymous"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TAnonymous>
	<TDynamic public="1" get="inline" set="null" expr="cast &quot;TDynamic&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><x path="Null"><t path="haxe.display.JsonType"><d/></t></x></x>
		<meta>
			<m n=":value"><e>cast "TDynamic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TDynamic>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<TMono public="1" get="inline" set="null" expr="cast &quot;TMono&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonTypeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TMono"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TMono>
		<TInst public="1" get="inline" set="null" expr="cast &quot;TInst&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TInst"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TInst>
		<TEnum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TEnum"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TEnum>
		<TType public="1" get="inline" set="null" expr="cast &quot;TType&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TType"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TType>
		<TAbstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TAbstract"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TAbstract>
		<TFun public="1" get="inline" set="null" expr="cast &quot;TFun&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonFunctionSignature"/></x>
			<meta>
				<m n=":value"><e>cast "TFun"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TFun>
		<TAnonymous public="1" get="inline" set="null" expr="cast &quot;TAnonymous&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast "TAnonymous"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TAnonymous>
		<TDynamic public="1" get="inline" set="null" expr="cast &quot;TDynamic&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><x path="Null"><t path="haxe.display.JsonType"><d/></t></x></x>
			<meta>
				<m n=":value"><e>cast "TDynamic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TDynamic>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonType" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonType.T"/></x></kind>
	<args><c path="haxe.display.JsonType.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonTypes" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></typedef>
	<typedef path="haxe.display.JsonTypeParameter" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<name><c path="String"/></name>
	<constraints><t path="haxe.display.JsonTypes"/></constraints>
</a></typedef>
	<typedef path="haxe.display.JsonTypeParameters" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonTypeParameter"/></c></typedef>
	<abstract path="haxe.display.JsonBinopKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonBinopKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<OpAdd public="1" get="inline" set="null" expr="cast &quot;OpAdd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAdd"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpAdd>
	<OpMult public="1" get="inline" set="null" expr="cast &quot;OpMult&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpMult"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpMult>
	<OpDiv public="1" get="inline" set="null" expr="cast &quot;OpDiv&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpDiv"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpDiv>
	<OpSub public="1" get="inline" set="null" expr="cast &quot;OpSub&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpSub"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpSub>
	<OpAssign public="1" get="inline" set="null" expr="cast &quot;OpAssign&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAssign"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpAssign>
	<OpEq public="1" get="inline" set="null" expr="cast &quot;OpEq&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpEq"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpEq>
	<OpNotEq public="1" get="inline" set="null" expr="cast &quot;OpNotEq&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpNotEq"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNotEq>
	<OpGt public="1" get="inline" set="null" expr="cast &quot;OpGt&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpGt"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpGt>
	<OpGte public="1" get="inline" set="null" expr="cast &quot;OpGte&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpGte"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpGte>
	<OpLt public="1" get="inline" set="null" expr="cast &quot;OpLt&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpLt"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpLt>
	<OpLte public="1" get="inline" set="null" expr="cast &quot;OpLte&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpLte"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpLte>
	<OpAnd public="1" get="inline" set="null" expr="cast &quot;OpAnd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAnd"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpAnd>
	<OpOr public="1" get="inline" set="null" expr="cast &quot;OpOr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpOr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpOr>
	<OpXor public="1" get="inline" set="null" expr="cast &quot;OpXor&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpXor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpXor>
	<OpBoolAnd public="1" get="inline" set="null" expr="cast &quot;OpBoolAnd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpBoolAnd"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpBoolAnd>
	<OpBoolOr public="1" get="inline" set="null" expr="cast &quot;OpBoolOr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpBoolOr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpBoolOr>
	<OpShl public="1" get="inline" set="null" expr="cast &quot;OpShl&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpShl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpShl>
	<OpShr public="1" get="inline" set="null" expr="cast &quot;OpShr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpShr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpShr>
	<OpUShr public="1" get="inline" set="null" expr="cast &quot;OpUShr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpUShr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpUShr>
	<OpMod public="1" get="inline" set="null" expr="cast &quot;OpMod&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpMod"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpMod>
	<OpAssignOp public="1" get="inline" set="null" expr="cast &quot;OpAssignOp&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><t path="haxe.display.JsonBinop"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "OpAssignOp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpAssignOp>
	<OpInterval public="1" get="inline" set="null" expr="cast &quot;OpInterval&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpInterval"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpInterval>
	<OpArrow public="1" get="inline" set="null" expr="cast &quot;OpArrow&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpArrow"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpArrow>
	<OpIn public="1" get="inline" set="null" expr="cast &quot;OpIn&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpIn"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpIn>
	<OpNullCoal public="1" get="inline" set="null" expr="cast &quot;OpNullCoal&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpNullCoal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNullCoal>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonBinopKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<OpAdd public="1" get="inline" set="null" expr="cast &quot;OpAdd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAdd"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpAdd>
		<OpMult public="1" get="inline" set="null" expr="cast &quot;OpMult&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpMult"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpMult>
		<OpDiv public="1" get="inline" set="null" expr="cast &quot;OpDiv&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpDiv"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpDiv>
		<OpSub public="1" get="inline" set="null" expr="cast &quot;OpSub&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpSub"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpSub>
		<OpAssign public="1" get="inline" set="null" expr="cast &quot;OpAssign&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAssign"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpAssign>
		<OpEq public="1" get="inline" set="null" expr="cast &quot;OpEq&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpEq"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpEq>
		<OpNotEq public="1" get="inline" set="null" expr="cast &quot;OpNotEq&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpNotEq"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNotEq>
		<OpGt public="1" get="inline" set="null" expr="cast &quot;OpGt&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpGt"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpGt>
		<OpGte public="1" get="inline" set="null" expr="cast &quot;OpGte&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpGte"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpGte>
		<OpLt public="1" get="inline" set="null" expr="cast &quot;OpLt&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpLt"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpLt>
		<OpLte public="1" get="inline" set="null" expr="cast &quot;OpLte&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpLte"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpLte>
		<OpAnd public="1" get="inline" set="null" expr="cast &quot;OpAnd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAnd"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpAnd>
		<OpOr public="1" get="inline" set="null" expr="cast &quot;OpOr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpOr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpOr>
		<OpXor public="1" get="inline" set="null" expr="cast &quot;OpXor&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpXor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpXor>
		<OpBoolAnd public="1" get="inline" set="null" expr="cast &quot;OpBoolAnd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpBoolAnd"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpBoolAnd>
		<OpBoolOr public="1" get="inline" set="null" expr="cast &quot;OpBoolOr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpBoolOr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpBoolOr>
		<OpShl public="1" get="inline" set="null" expr="cast &quot;OpShl&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpShl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpShl>
		<OpShr public="1" get="inline" set="null" expr="cast &quot;OpShr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpShr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpShr>
		<OpUShr public="1" get="inline" set="null" expr="cast &quot;OpUShr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpUShr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpUShr>
		<OpMod public="1" get="inline" set="null" expr="cast &quot;OpMod&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpMod"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpMod>
		<OpAssignOp public="1" get="inline" set="null" expr="cast &quot;OpAssignOp&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><t path="haxe.display.JsonBinop"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "OpAssignOp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpAssignOp>
		<OpInterval public="1" get="inline" set="null" expr="cast &quot;OpInterval&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpInterval"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpInterval>
		<OpArrow public="1" get="inline" set="null" expr="cast &quot;OpArrow&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpArrow"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpArrow>
		<OpIn public="1" get="inline" set="null" expr="cast &quot;OpIn&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpIn"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpIn>
		<OpNullCoal public="1" get="inline" set="null" expr="cast &quot;OpNullCoal&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpNullCoal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNullCoal>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonBinop" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinop.T"/></x></kind>
	<args><c path="haxe.display.JsonBinop.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonUnop" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonUnop_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<OpIncrement public="1" get="inline" set="null" expr="cast &quot;OpIncrement&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpIncrement"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpIncrement>
	<OpDecrement public="1" get="inline" set="null" expr="cast &quot;OpDecrement&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpDecrement"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpDecrement>
	<OpNot public="1" get="inline" set="null" expr="cast &quot;OpNot&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNot"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNot>
	<OpNeg public="1" get="inline" set="null" expr="cast &quot;OpNeg&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNeg>
	<OpNegBits public="1" get="inline" set="null" expr="cast &quot;OpNegBits&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNegBits"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNegBits>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonUnop_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<OpIncrement public="1" get="inline" set="null" expr="cast &quot;OpIncrement&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpIncrement"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpIncrement>
		<OpDecrement public="1" get="inline" set="null" expr="cast &quot;OpDecrement&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpDecrement"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpDecrement>
		<OpNot public="1" get="inline" set="null" expr="cast &quot;OpNot&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNot"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNot>
		<OpNeg public="1" get="inline" set="null" expr="cast &quot;OpNeg&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNeg>
		<OpNegBits public="1" get="inline" set="null" expr="cast &quot;OpNegBits&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNegBits"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNegBits>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><t path="haxe.display.JsonTodo"/></typedef>
	<typedef path="haxe.display.JsonMetadataEntry" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<name><c path="String"/></name>
	<args><c path="Array"><t path="haxe.display.JsonExpr"/></c></args>
</a></typedef>
	<typedef path="haxe.display.JsonMetadata" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonMetadataEntry"/></c></typedef>
	<abstract path="haxe.display.JsonTConstantKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTConstantKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<TInt public="1" get="inline" set="null" expr="cast &quot;TInt&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TInt"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TInt>
	<TFloat public="1" get="inline" set="null" expr="cast &quot;TFloat&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TFloat"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TFloat>
	<TString public="1" get="inline" set="null" expr="cast &quot;TString&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TString"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TString>
	<TBool public="1" get="inline" set="null" expr="cast &quot;TBool&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><x path="Bool"/></x>
		<meta>
			<m n=":value"><e>cast "TBool"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TBool>
	<TNull public="1" get="inline" set="null" expr="cast &quot;TNull&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TNull"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TNull>
	<TThis public="1" get="inline" set="null" expr="cast &quot;TThis&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TThis"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TThis>
	<TSuper public="1" get="inline" set="null" expr="cast &quot;TSuper&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TSuper"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TSuper>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonTConstantKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<TInt public="1" get="inline" set="null" expr="cast &quot;TInt&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TInt"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TInt>
		<TFloat public="1" get="inline" set="null" expr="cast &quot;TFloat&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TFloat"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TFloat>
		<TString public="1" get="inline" set="null" expr="cast &quot;TString&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TString"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TString>
		<TBool public="1" get="inline" set="null" expr="cast &quot;TBool&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><x path="Bool"/></x>
			<meta>
				<m n=":value"><e>cast "TBool"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TBool>
		<TNull public="1" get="inline" set="null" expr="cast &quot;TNull&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TNull"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TNull>
		<TThis public="1" get="inline" set="null" expr="cast &quot;TThis&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TThis"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TThis>
		<TSuper public="1" get="inline" set="null" expr="cast &quot;TSuper&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TSuper"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TSuper>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonTConstant" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstant.T"/></x></kind>
	<args><c path="haxe.display.JsonTConstant.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonTExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><t path="haxe.display.JsonTodo"/></typedef>
	<abstract path="haxe.display.JsonVarAccessKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonVarAccessKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<AccNormal public="1" get="inline" set="null" expr="cast &quot;AccNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNormal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccNormal>
	<AccNo public="1" get="inline" set="null" expr="cast &quot;AccNo&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccNo>
	<AccNever public="1" get="inline" set="null" expr="cast &quot;AccNever&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNever"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccNever>
	<AccResolve public="1" get="inline" set="null" expr="cast &quot;AccResolve&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccResolve"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccResolve>
	<AccCall public="1" get="inline" set="null" expr="cast &quot;AccCall&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccCall"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccCall>
	<AccInline public="1" get="inline" set="null" expr="cast &quot;AccInline&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccInline"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccInline>
	<AccRequire public="1" get="inline" set="null" expr="cast &quot;AccRequire&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><a>
	<require><c path="String"/></require>
	<message><x path="Null"><c path="String"/></x></message>
</a></x>
		<meta>
			<m n=":value"><e>cast "AccRequire"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccRequire>
	<AccCtor public="1" get="inline" set="null" expr="cast &quot;AccCtor&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccCtor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccCtor>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonVarAccessKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<AccNormal public="1" get="inline" set="null" expr="cast &quot;AccNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNormal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccNormal>
		<AccNo public="1" get="inline" set="null" expr="cast &quot;AccNo&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccNo>
		<AccNever public="1" get="inline" set="null" expr="cast &quot;AccNever&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNever"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccNever>
		<AccResolve public="1" get="inline" set="null" expr="cast &quot;AccResolve&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccResolve"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccResolve>
		<AccCall public="1" get="inline" set="null" expr="cast &quot;AccCall&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccCall"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccCall>
		<AccInline public="1" get="inline" set="null" expr="cast &quot;AccInline&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccInline"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccInline>
		<AccRequire public="1" get="inline" set="null" expr="cast &quot;AccRequire&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><a>
	<require><c path="String"/></require>
	<message><x path="Null"><c path="String"/></x></message>
</a></x>
			<meta>
				<m n=":value"><e>cast "AccRequire"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccRequire>
		<AccCtor public="1" get="inline" set="null" expr="cast &quot;AccCtor&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccCtor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccCtor>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonVarAccess" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccess.T"/></x></kind>
	<args><c path="haxe.display.JsonVarAccess.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonMethodKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonMethodKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<MethNormal public="1" get="inline" set="null" expr="cast &quot;MethNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethNormal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethNormal>
	<MethInline public="1" get="inline" set="null" expr="cast &quot;MethInline&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethInline"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethInline>
	<MethDynamic public="1" get="inline" set="null" expr="cast &quot;MethDynamic&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethDynamic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethDynamic>
	<MethMacro public="1" get="inline" set="null" expr="cast &quot;MethMacro&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethMacro"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethMacro>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonMethodKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<MethNormal public="1" get="inline" set="null" expr="cast &quot;MethNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethNormal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethNormal>
		<MethInline public="1" get="inline" set="null" expr="cast &quot;MethInline&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethInline"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethInline>
		<MethDynamic public="1" get="inline" set="null" expr="cast &quot;MethDynamic&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethDynamic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethDynamic>
		<MethMacro public="1" get="inline" set="null" expr="cast &quot;MethMacro&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethMacro"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethMacro>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.JsonFieldKindKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonFieldKindKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<FVar public="1" get="inline" set="null" expr="cast &quot;FVar&quot;" line="1" static="1">
		<x path="haxe.display.JsonFieldKindKind"><a>
	<write><t path="haxe.display.JsonVarAccess"><d/></t></write>
	<read><t path="haxe.display.JsonVarAccess"><d/></t></read>
</a></x>
		<meta>
			<m n=":value"><e>cast "FVar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FVar>
	<FMethod public="1" get="inline" set="null" expr="cast &quot;FMethod&quot;" line="1" static="1">
		<x path="haxe.display.JsonFieldKindKind"><x path="haxe.display.JsonMethodKind"/></x>
		<meta>
			<m n=":value"><e>cast "FMethod"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FMethod>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonFieldKindKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<FVar public="1" get="inline" set="null" expr="cast &quot;FVar&quot;" line="1" static="1">
			<x path="haxe.display.JsonFieldKindKind"><a>
	<write><t path="haxe.display.JsonVarAccess"><d/></t></write>
	<read><t path="haxe.display.JsonVarAccess"><d/></t></read>
</a></x>
			<meta>
				<m n=":value"><e>cast "FVar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FVar>
		<FMethod public="1" get="inline" set="null" expr="cast &quot;FMethod&quot;" line="1" static="1">
			<x path="haxe.display.JsonFieldKindKind"><x path="haxe.display.JsonMethodKind"/></x>
			<meta>
				<m n=":value"><e>cast "FMethod"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FMethod>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonFieldKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonFieldKindKind"><c path="haxe.display.JsonFieldKind.T"/></x></kind>
	<args><c path="haxe.display.JsonFieldKind.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonClassFieldScope" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassFieldScope_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<Static public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Static>
	<Member public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Member>
	<Constructor public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Constructor>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonClassFieldScope_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<Static public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Static>
		<Member public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Member>
		<Constructor public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Constructor>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonClassField" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<scope><x path="haxe.display.JsonClassFieldScope"/></scope>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<overloads><t path="haxe.display.JsonClassFields"/></overloads>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><t path="haxe.display.JsonFieldKind"><d/></t></kind>
	<isPublic><x path="Bool"/></isPublic>
	<isFinal><x path="Bool"/></isFinal>
	<isAbstract><x path="Bool"/></isAbstract>
	<expr>
		<x path="Null"><a><string><c path="String"/></string></a></x>
		<meta><m n=":optional"/></meta>
	</expr>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.JsonClassFields" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonClassField"/></c></typedef>
	<typedef path="haxe.display.JsonClassFieldReference" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="String"/></typedef>
	<typedef path="haxe.display.JsonEnumField" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.JsonEnumFields" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonEnumField"/></c></typedef>
	<abstract path="haxe.display.JsonClassKindKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassKindKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<KNormal public="1" get="inline" set="null" expr="cast &quot;KNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KNormal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KNormal>
	<KTypeParameter public="1" get="inline" set="null" expr="cast &quot;KTypeParameter&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypes"/></x>
		<meta>
			<m n=":value"><e>cast "KTypeParameter"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KTypeParameter>
	<KExtension public="1" get="inline" set="null" expr="cast &quot;KExtension&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "KExtension"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KExtension>
	<KExpr public="1" get="inline" set="null" expr="cast &quot;KExpr&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonExpr"/></x>
		<meta>
			<m n=":value"><e>cast "KExpr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KExpr>
	<KGeneric public="1" get="inline" set="null" expr="cast &quot;KGeneric&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KGeneric"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KGeneric>
	<KGenericInstance public="1" get="inline" set="null" expr="cast &quot;KGenericInstance&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "KGenericInstance"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KGenericInstance>
	<KMacroType public="1" get="inline" set="null" expr="cast &quot;KMacroType&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KMacroType"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KMacroType>
	<KAbstractImpl public="1" get="inline" set="null" expr="cast &quot;KAbstractImpl&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "KAbstractImpl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KAbstractImpl>
	<KGenericBuild public="1" get="inline" set="null" expr="cast &quot;KGenericBuild&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KGenericBuild"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KGenericBuild>
	<KModuleFields public="1" get="inline" set="null" expr="cast &quot;KModuleFields&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonModulePath"/></x>
		<meta>
			<m n=":value"><e>cast "KModuleFields"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KModuleFields>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonClassKindKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<KNormal public="1" get="inline" set="null" expr="cast &quot;KNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KNormal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KNormal>
		<KTypeParameter public="1" get="inline" set="null" expr="cast &quot;KTypeParameter&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypes"/></x>
			<meta>
				<m n=":value"><e>cast "KTypeParameter"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KTypeParameter>
		<KExtension public="1" get="inline" set="null" expr="cast &quot;KExtension&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "KExtension"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KExtension>
		<KExpr public="1" get="inline" set="null" expr="cast &quot;KExpr&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonExpr"/></x>
			<meta>
				<m n=":value"><e>cast "KExpr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KExpr>
		<KGeneric public="1" get="inline" set="null" expr="cast &quot;KGeneric&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KGeneric"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KGeneric>
		<KGenericInstance public="1" get="inline" set="null" expr="cast &quot;KGenericInstance&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "KGenericInstance"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KGenericInstance>
		<KMacroType public="1" get="inline" set="null" expr="cast &quot;KMacroType&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KMacroType"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KMacroType>
		<KAbstractImpl public="1" get="inline" set="null" expr="cast &quot;KAbstractImpl&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "KAbstractImpl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KAbstractImpl>
		<KGenericBuild public="1" get="inline" set="null" expr="cast &quot;KGenericBuild&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KGenericBuild"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KGenericBuild>
		<KModuleFields public="1" get="inline" set="null" expr="cast &quot;KModuleFields&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonModulePath"/></x>
			<meta>
				<m n=":value"><e>cast "KModuleFields"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KModuleFields>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonClassKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKind.T"/></x></kind>
	<args><c path="haxe.display.JsonClassKind.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonClass" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<superClass><x path="Null"><t path="haxe.display.JsonTypePathWithParams"/></x></superClass>
	<statics><t path="haxe.display.JsonClassFields"/></statics>
	<overrides><c path="Array"><t path="haxe.display.JsonClassFieldReference"/></c></overrides>
	<kind><t path="haxe.display.JsonClassKind"><d/></t></kind>
	<isInterface><x path="Bool"/></isInterface>
	<isFinal><x path="Bool"/></isFinal>
	<isExtern><x path="Bool"/></isExtern>
	<isAbstract><x path="Bool"/></isAbstract>
	<interfaces><c path="Array"><t path="haxe.display.JsonTypePathWithParams"/></c></interfaces>
	<init><x path="Null"><t path="haxe.display.JsonTExpr"/></x></init>
	<fields><t path="haxe.display.JsonClassFields"/></fields>
	<constructor><x path="Null"><t path="haxe.display.JsonClassField"/></x></constructor>
</a></typedef>
	<typedef path="haxe.display.JsonEnum" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<isExtern><x path="Bool"/></isExtern>
	<constructors><t path="haxe.display.JsonEnumFields"/></constructors>
</a></typedef>
	<typedef path="haxe.display.JsonTypedef" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a><type><t path="haxe.display.JsonType"><d/></t></type></a></typedef>
	<typedef path="haxe.display.JsonAbstractBinop" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<op><t path="haxe.display.JsonBinop"><d/></t></op>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstractUnop" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<postFix><x path="Bool"/></postFix>
	<op><x path="haxe.display.JsonUnop"/></op>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstractCast" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<t><t path="haxe.display.JsonType"><d/></t></t>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstract" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<unops><c path="Array"><t path="haxe.display.JsonAbstractUnop"/></c></unops>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<to><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></to>
	<resolve><x path="Null"><t path="haxe.display.JsonClassFieldReference"/></x></resolve>
	<impl><x path="Null"><t path="haxe.display.JsonClass"/></x></impl>
	<from><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></from>
	<binops><c path="Array"><t path="haxe.display.JsonAbstractBinop"/></c></binops>
	<array><t path="haxe.display.JsonClassFields"/></array>
</a></typedef>
	<abstract path="haxe.display.JsonModuleTypeKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonModuleTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="357" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonClass"/></x>
		<meta>
			<m n=":value"><e>cast "class"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Class>
	<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="358" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonEnum"/></x>
		<meta>
			<m n=":value"><e>cast "enum"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Enum>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="359" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonTypedef"/></x>
		<meta>
			<m n=":value"><e>cast "typedef"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Typedef>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="360" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonAbstract"/></x>
		<meta>
			<m n=":value"><e>cast "abstract"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Abstract>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonModuleTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="357" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonClass"/></x>
			<meta>
				<m n=":value"><e>cast "class"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Class>
		<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="358" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonEnum"/></x>
			<meta>
				<m n=":value"><e>cast "enum"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Enum>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="359" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonTypedef"/></x>
			<meta>
				<m n=":value"><e>cast "typedef"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Typedef>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="360" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonAbstract"/></x>
			<meta>
				<m n=":value"><e>cast "abstract"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Abstract>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonModuleType" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<moduleName><c path="String"/></moduleName>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><x path="haxe.display.JsonModuleTypeKind"><c path="haxe.display.JsonModuleType.T"/></x></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<doc><t path="haxe.display.JsonDoc"/></doc>
	<args><c path="haxe.display.JsonModuleType.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonModuleTypes" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx"><c path="Array"><t path="haxe.display.JsonModuleType"><d/></t></c></typedef>
	<typedef path="haxe.display.Position" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Position.hx">
		<a>
			<line>
				<x path="Int"/>
				<haxe_doc>Line position in a document (1-based).</haxe_doc>
			</line>
			<character>
				<x path="Int"/>
				<haxe_doc>Character offset on a line in a document (1-based).</haxe_doc>
			</character>
		</a>
		<haxe_doc>Position in a text document expressed as 1-based line and character offset.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.Range" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<start>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's start position</haxe_doc>
			</start>
			<end>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's end position</haxe_doc>
			</end>
		</a>
		<haxe_doc>A range in a text document expressed as (1-based) start and end positions.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.Location" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<range><t path="haxe.display.Range"/></range>
			<file><x path="haxe.display.FsPath"/></file>
		</a>
		<haxe_doc>Represents a location inside a resource, such as a line inside a text file.</haxe_doc>
	</typedef>
	<class path="haxe.display.Methods" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<Initialize public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;InitializeParams,InitializeResult&gt;(&quot;initialize&quot;)" line="32" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.InitializeParams"/>
				<t path="haxe.display.InitializeResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<InitializeParams,InitializeResult>("initialize")]]></e></m></meta>
			<haxe_doc>The initialize request is sent from the client to Haxe to determine the capabilities.</haxe_doc>
		</Initialize>
		<ResetCache public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ResetCacheParams,ResetCacheResult&gt;(&quot;server/resetCache&quot;)" line="34" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ResetCacheParams"/>
				<t path="haxe.display.ResetCacheResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ResetCacheParams,ResetCacheResult>("server/resetCache")]]></e></m></meta>
		</ResetCache>
		<meta><m n=":publicFields"/></meta>
	</class>
	<typedef path="haxe.display.ResetCacheParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a/></typedef>
	<typedef path="haxe.display.ResetCacheResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a><success final="1" set="null"><x path="Bool"/></success></a></typedef>
	<typedef path="haxe.display.InitializeParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<supportsResolve final="1" set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</supportsResolve>
	<maxCompletionItems final="1" set="null">
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of completion items to return</haxe_doc>
	</maxCompletionItems>
	<exclude final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>dot paths to exclude from readClassPaths / toplevel completion</haxe_doc>
	</exclude>
</a></typedef>
	<typedef path="haxe.display.Version" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<a>
			<pre final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</pre>
			<patch final="1" set="null"><x path="Int"/></patch>
			<minor final="1" set="null"><x path="Int"/></minor>
			<major final="1" set="null"><x path="Int"/></major>
			<build final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</build>
		</a>
		<haxe_doc>Represents a semantic version, see https://semver.org/.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.InitializeResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><t path="haxe.display.Response"><a>
	<protocolVersion final="1" set="null"><t path="haxe.display.Version"/></protocolVersion>
	<methods final="1" set="null"><c path="Array"><c path="String"/></c></methods>
	<haxeVersion final="1" set="null"><t path="haxe.display.Version"/></haxeVersion>
</a></t></typedef>
	<typedef path="haxe.display.Timer" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<time final="1" set="null"><x path="Float"/></time>
	<percentTotal final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</percentTotal>
	<percentParent final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</percentParent>
	<path final="1" set="null">
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</path>
	<name final="1" set="null"><c path="String"/></name>
	<info final="1" set="null">
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</info>
	<children final="1" set="null">
		<x path="Null"><c path="Array"><t path="haxe.display.Timer"/></c></x>
		<meta><m n=":optional"/></meta>
	</children>
	<calls final="1" set="null">
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</calls>
</a></typedef>
	<typedef path="haxe.display.Response" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<timestamp final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>UNIX timestamp at the moment the data was sent.</haxe_doc>
	</timestamp>
	<timers final="1" set="null">
		<x path="Null"><t path="haxe.display.Timer"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Only sent if `--times` is enabled.</haxe_doc>
	</timers>
	<result final="1" set="null">
		<x path="Null"><c path="haxe.display.Response.T"/></x>
		<meta><m n=":optional"/></meta>
	</result>
</a></typedef>
	<typedef path="haxe.display.FileParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a><file><x path="haxe.display.FsPath"/></file></a></typedef>
	<abstract path="haxe.display.HaxeRequestMethod" params="TParams:TResponse" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<impl><class path="haxe.display._Protocol.HaxeRequestMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="98" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeRequestMethod">
			<c path="haxe.display.HaxeRequestMethod.TParams"/>
			<c path="haxe.display.HaxeRequestMethod.TResponse"/>
		</x>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeRequestMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="98" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeRequestMethod">
			<c path="haxe.display.HaxeRequestMethod.TParams"/>
			<c path="haxe.display.HaxeRequestMethod.TResponse"/>
		</x>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class>
	<abstract path="haxe.display.HaxeNotificationMethod" params="TParams" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<impl><class path="haxe.display._Protocol.HaxeNotificationMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="103" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeNotificationMethod"><c path="haxe.display.HaxeNotificationMethod.TParams"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeNotificationMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="103" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeNotificationMethod"><c path="haxe.display.HaxeNotificationMethod.TParams"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class>
	<typedef path="haxe.display.HaxeResponseErrorData" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><c path="Array"><a>
	<severity><x path="haxe.display.HaxeResponseErrorSeverity"/></severity>
	<message><c path="String"/></message>
	<location>
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</location>
</a></c></typedef>
	<abstract path="haxe.display.HaxeResponseErrorSeverity" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Protocol.HaxeResponseErrorSeverity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" extern="1" final="1">
	<Error public="1" get="inline" set="null" expr="cast 1" line="114" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Error>
	<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Warning>
	<Hint public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Hint>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeResponseErrorSeverity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" extern="1" final="1">
		<Error public="1" get="inline" set="null" expr="cast 1" line="114" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Error>
		<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Warning>
		<Hint public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Hint>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="haxe.display.NoData" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><meta><m n=":flatEnum"/></meta></enum>
	<class path="haxe.display.ServerMethods" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server">
		<ReadClassPaths public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;{ var ?files : Int}&gt;&gt;(&quot;server/readClassPaths&quot;)" line="34" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><a><files>
	<x path="Null"><x path="Int"/></x>
	<meta><m n=":optional"/></meta>
</files></a></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<{ var ?files : Int}>>("server/readClassPaths")]]></e></m></meta>
			<haxe_doc>This request is sent from the client to Haxe to explore the class paths. This effectively creates a cache for toplevel completion.</haxe_doc>
		</ReadClassPaths>
		<Configure public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ConfigureParams,Response&lt;NoData&gt;&gt;(&quot;server/configure&quot;)" line="36" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ConfigureParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ConfigureParams,Response<NoData>>("server/configure")]]></e></m></meta>
		</Configure>
		<Invalidate public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,Response&lt;NoData&gt;&gt;(&quot;server/invalidate&quot;)" line="37" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,Response<NoData>>("server/invalidate")]]></e></m></meta>
		</Invalidate>
		<Contexts public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;Array&lt;HaxeServerContext&gt;&gt;&gt;(&quot;server/contexts&quot;)" line="38" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.HaxeServerContext"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<Array<HaxeServerContext>>>("server/contexts")]]></e></m></meta>
		</Contexts>
		<Memory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;HaxeMemoryResult&gt;&gt;(&quot;server/memory&quot;)" line="39" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<HaxeMemoryResult>>("server/memory")]]></e></m></meta>
		</Memory>
		<ContextMemory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;HaxeContextMemoryResult&gt;&gt;(&quot;server/memory/context&quot;)" line="40" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeContextMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<HaxeContextMemoryResult>>("server/memory/context")]]></e></m></meta>
		</ContextMemory>
		<ModuleMemory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ModuleParams,Response&lt;HaxeModuleMemoryResult&gt;&gt;(&quot;server/memory/module&quot;)" line="41" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ModuleParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeModuleMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ModuleParams,Response<HaxeModuleMemoryResult>>("server/memory/module")]]></e></m></meta>
		</ModuleMemory>
		<Modules public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;Array&lt;String&gt;&gt;&gt;(&quot;server/modules&quot;)" line="42" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><c path="Array"><c path="String"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<Array<String>>>("server/modules")]]></e></m></meta>
		</Modules>
		<Module public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ModuleParams,Response&lt;JsonModule&gt;&gt;(&quot;server/module&quot;)" line="43" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ModuleParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.JsonModule"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ModuleParams,Response<JsonModule>>("server/module")]]></e></m></meta>
		</Module>
		<Type public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;TypeParams,Response&lt;JsonModuleType&lt;Any&gt;&gt;&gt;(&quot;server/type&quot;)" line="44" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.TypeParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.JsonModuleType"><x path="Any"/></t></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<TypeParams,Response<JsonModuleType<Any>>>("server/type")]]></e></m></meta>
		</Type>
		<Files public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;Array&lt;JsonServerFile&gt;&gt;&gt;(&quot;server/files&quot;)" line="45" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.JsonServerFile"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<Array<JsonServerFile>>>("server/files")]]></e></m></meta>
		</Files>
		<ModuleCreated public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,Response&lt;NoData&gt;&gt;(&quot;server/moduleCreated&quot;)" line="46" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,Response<NoData>>("server/moduleCreated")]]></e></m></meta>
		</ModuleCreated>
		<meta><m n=":publicFields"/></meta>
	</class>
	<typedef path="haxe.display.ConfigurePrintParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<unchangedContent>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</unchangedContent>
	<uncaughtError>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</uncaughtError>
	<stats>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</stats>
	<socketMessage>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</socketMessage>
	<skippingDep>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</skippingDep>
	<signature>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</signature>
	<reusing>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</reusing>
	<removedDirectory>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</removedDirectory>
	<parsed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</parsed>
	<notCached>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</notCached>
	<newContext>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</newContext>
	<modulePathChanged>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modulePathChanged>
	<message>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</message>
	<foundDirectories>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</foundDirectories>
	<displayPosition>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</displayPosition>
	<defines>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</defines>
	<completion>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</completion>
	<changedDirectories>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</changedDirectories>
	<cachedModules>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cachedModules>
	<arguments>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</arguments>
	<addedDirectory>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</addedDirectory>
</a></typedef>
	<typedef path="haxe.display.ConfigureParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<print final="1" set="null">
		<x path="Null"><t path="haxe.display.ConfigurePrintParams"/></x>
		<meta><m n=":optional"/></meta>
	</print>
	<noModuleChecks final="1" set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</noModuleChecks>
	<legacyCompletion final="1" set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</legacyCompletion>
</a></typedef>
	<typedef path="haxe.display.HaxeServerContext" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<signature final="1" set="null"><c path="String"/></signature>
	<platform final="1" set="null"><c path="String"/></platform>
	<index final="1" set="null"><x path="Int"/></index>
	<desc final="1" set="null"><c path="String"/></desc>
	<defines final="1" set="null"><c path="Array"><a>
	<value><c path="String"/></value>
	<key><c path="String"/></key>
</a></c></defines>
	<classPaths final="1" set="null"><c path="Array"><c path="String"/></c></classPaths>
</a></typedef>
	<typedef path="haxe.display.ModuleId" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<sign final="1" set="null"><c path="String"/></sign>
	<path final="1" set="null"><c path="String"/></path>
</a></typedef>
	<typedef path="haxe.display.JsonModule" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<types final="1" set="null"><c path="Array"><t path="haxe.display.JsonTypePath"/></c></types>
	<sign final="1" set="null"><c path="String"/></sign>
	<path final="1" set="null"><t path="haxe.display.JsonModulePath"/></path>
	<id final="1" set="null"><x path="Int"/></id>
	<file final="1" set="null"><c path="String"/></file>
	<dependents final="1" set="null"><c path="Array"><t path="haxe.display.ModuleId"/></c></dependents>
	<dependencies final="1" set="null"><c path="Array"><t path="haxe.display.ModuleId"/></c></dependencies>
	<cacheState final="1" set="null"><x path="Null"><c path="String"/></x></cacheState>
</a></typedef>
	<typedef path="haxe.display.JsonServerFile" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<time final="1" set="null"><x path="Float"/></time>
	<pack final="1" set="null"><c path="String"/></pack>
	<moduleName final="1" set="null"><x path="Null"><c path="String"/></x></moduleName>
	<file final="1" set="null"><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.display.AdditionalSize" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<name final="1" set="null"><c path="String"/></name>
	<child final="1" set="null"><c path="Array"><t path="haxe.display.AdditionalSize"/></c></child>
</a></typedef>
	<typedef path="haxe.display.HaxeMemoryResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<memory final="1" set="null"><a>
	<totalCache final="1" set="null"><x path="Int"/></totalCache>
	<nativeLibCache final="1" set="null"><x path="Int"/></nativeLibCache>
	<haxelibCache final="1" set="null"><x path="Int"/></haxelibCache>
	<directoryCache final="1" set="null"><x path="Int"/></directoryCache>
	<contextCache final="1" set="null"><x path="Int"/></contextCache>
	<additionalSizes final="1" set="null">
		<x path="Null"><c path="Array"><t path="haxe.display.AdditionalSize"/></c></x>
		<meta><m n=":optional"/></meta>
	</additionalSizes>
</a></memory>
	<contexts final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<context final="1" set="null"><t path="haxe.display.HaxeServerContext"/></context>
</a></c></contexts>
</a></typedef>
	<typedef path="haxe.display.HaxeContextMemoryResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<syntaxCache final="1" set="null"><a><size final="1" set="null"><x path="Int"/></size></a></syntaxCache>
	<moduleCache final="1" set="null"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<list final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<path final="1" set="null"><c path="String"/></path>
	<hasTypes final="1" set="null"><x path="Bool"/></hasTypes>
</a></c></list>
</a></moduleCache>
	<leaks final="1" set="null">
		<x path="Null"><c path="Array"><a>
	<path final="1" set="null"><c path="String"/></path>
	<leaks final="1" set="null"><c path="Array"><a><path final="1" set="null"><c path="String"/></path></a></c></leaks>
</a></c></x>
		<meta><m n=":optional"/></meta>
	</leaks>
	<binaryCache final="1" set="null"><a><size final="1" set="null"><x path="Int"/></size></a></binaryCache>
</a></typedef>
	<typedef path="haxe.display.HaxeModuleMemoryResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<types final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<pos final="1" set="null">
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</pos>
	<name final="1" set="null"><c path="String"/></name>
	<fields final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<pos final="1" set="null">
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</pos>
	<name final="1" set="null"><c path="String"/></name>
</a></c></fields>
</a></c></types>
	<moduleExtra final="1" set="null"><x path="Int"/></moduleExtra>
</a></typedef>
	<typedef path="haxe.display.ContextParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a><signature final="1" set="null"><c path="String"/></signature></a></typedef>
	<typedef path="haxe.display.ModuleParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<signature final="1" set="null"><c path="String"/></signature>
	<path final="1" set="null"><c path="String"/></path>
</a></typedef>
	<typedef path="haxe.display.TypeParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<typeName final="1" set="null"><c path="String"/></typeName>
	<signature final="1" set="null"><c path="String"/></signature>
	<modulePath final="1" set="null"><c path="String"/></modulePath>
</a></typedef>
	<class path="haxe.ds.ArraySort" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/ArraySort.hx">
		<sort public="1" params="T" set="method" line="42" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array `a` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies Array `a` in place.

		This operation is stable: The order of equal elements is preserved.

		If `a` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="46" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="68" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="94" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="rotate.T"/>
		<c path="rotate.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="115" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="124" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="139" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="153" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<compare params="T" get="inline" set="null" line="159" static="1"><f a="a:cmp:i:j">
	<c path="Array"><c path="compare.T"/></c>
	<f a=":">
		<c path="compare.T"/>
		<c path="compare.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></compare>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its `sort`
	method. It should be used instead of `Array.sort` in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/BalancedTree.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.BalancedTree.K"/>
			<c path="haxe.ds.BalancedTree.V"/>
		</implements>
		<iteratorLoop params="K:V" set="method" line="172" static="1"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="iteratorLoop.K"/>
		<c path="iteratorLoop.V"/>
	</c>
	<c path="Array"><c path="iteratorLoop.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Null"><c path="haxe.ds.BalancedTree.V"/></x>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="85">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="101">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="120">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="129">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<keys public="1" set="method" line="138">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<copy public="1" set="method" line="144"><f a=""><c path="haxe.ds.BalancedTree">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></f></copy>
		<setLoop set="method" line="150"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="163"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<keysLoop set="method" line="180"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="188"><f a="t1:t2">
	<x path="Null"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></x>
	<x path="Null"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></x>
	<x path="Null"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></x>
</f></merge>
		<minBinding set="method" line="197"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="201"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="205"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="225"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="229"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method" line="236">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all keys from `this` BalancedTree.</haxe_doc>
		</clear>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="264"><f a=""><x path="Int"/></f></get_height>
		<toString public="1" set="method" line="266"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
	</class>
	<enum path="haxe.ds.Either" params="L:R" file="/home/runner/work/haxe/haxe/std/haxe/ds/Either.hx">
		<Left a="v"><c path="haxe.ds.Either.L"/></Left>
		<Right a="v"><c path="haxe.ds.Either.R"/></Right>
		<haxe_doc>Either represents values which are either of type `L` (Left) or type `R`
	(Right).</haxe_doc>
	</enum>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="32" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="57"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="69"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<copy public="1" set="method" line="79" override="1"><f a=""><c path="haxe.ds.EnumValueMap">
	<c path="haxe.ds.EnumValueMap.K"/>
	<c path="haxe.ds.EnumValueMap.V"/>
</c></f></copy>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<new public="1" set="method" line="37"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>A cell of `haxe.ds.GenericStack`.

	@see https://haxe.org/manual/std-GenericStack.html</haxe_doc>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<add public="1" get="inline" set="null" line="112">
			<f a="item">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes element `item` onto the stack.</haxe_doc>
		</add>
		<first public="1" get="inline" set="null" line="121">
			<f a=""><x path="Null"><c path="haxe.ds.GenericStack.T"/></x></f>
			<haxe_doc>Returns the topmost stack element without removing it.

		If the stack is empty, null is returned.</haxe_doc>
		</first>
		<pop public="1" get="inline" set="null" line="130">
			<f a=""><x path="Null"><c path="haxe.ds.GenericStack.T"/></x></f>
			<haxe_doc>Returns the topmost stack element and removes it.

		If the stack is empty, null is returned.</haxe_doc>
		</pop>
		<isEmpty public="1" get="inline" set="null" line="143">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if the stack is empty.</haxe_doc>
		</isEmpty>
		<remove public="1" set="method" line="156">
			<f a="v">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first element which is equal to `v` according to the `==`
		operator.

		This method traverses the stack until it finds a matching element and
		unlinks it, returning true.

		If no matching element is found, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="185">
			<f a=""><t path="Iterator"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns an iterator over the elements of `this` GenericStack.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="203">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` GenericStack.</haxe_doc>
		</toString>
		<new public="1" set="method" line="107">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A stack of elements.

	This class is generic, which means one type is generated for each type
	parameter T on static targets. For example:

	- `new GenericStack<Int>()` generates `GenericStack_Int`
	- `new GenericStack<String>()` generates `GenericStack_String`

	The generated name is an implementation detail and should not be relied
	upon.

	@see https://haxe.org/manual/std-GenericStack.html]]></haxe_doc>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1">
	<_new public="1" get="inline" set="null" line="38" static="1">
		<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new HashMap.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="45" static="1">
		<f a="this:k:v">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>See `Map.set`</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="53" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Null"><c path="haxe.ds.HashMap.V"/></x>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>See `Map.get`</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="60" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>See `Map.exists`</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="67" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>See `Map.remove`</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="75" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<haxe_doc>See `Map.keys`</haxe_doc>
	</keys>
	<copy public="1" set="method" line="82" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<x path="haxe.ds.HashMap">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</x>
		</f>
		<haxe_doc>See `Map.copy`</haxe_doc>
	</copy>
	<iterator public="1" get="inline" set="null" line="92" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<haxe_doc>See `Map.iterator`</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="99" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.iterators.HashMapKeyValueIterator">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
		</f>
		<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
	</keyValueIterator>
	<clear public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<x path="Void"/>
		</f>
		<haxe_doc>See `Map.clear`</haxe_doc>
	</clear>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1">
		<_new public="1" get="inline" set="null" line="38" static="1">
			<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new HashMap.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="45" static="1">
			<f a="this:k:v">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="53" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Null"><c path="haxe.ds.HashMap.V"/></x>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="60" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="67" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="75" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<copy public="1" set="method" line="82" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<x path="haxe.ds.HashMap">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</x>
			</f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="92" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="99" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.iterators.HashMapKeyValueIterator">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
			</f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<clear public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
	</class>
	<class path="haxe.ds._HashMap.HashMapData" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<keys public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.K"/></c></keys>
		<values public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.V"/></c></values>
		<new public="1" get="inline" set="null" line="116"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/IntMap.hx" extern="1">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`

		(java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="78">
			<f a=""><t path="KeyValueIterator">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.IntMap"><c path="haxe.ds.IntMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<class path="haxe.ds.List" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/List.hx">
		<h><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></h>
		<q><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="53">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="68">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="81">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="90">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="99">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="113">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="137">
			<f a="v">
				<c path="haxe.ds.List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" get="inline" set="null" line="160">
			<f a=""><c path="haxe.ds._List.ListIterator"><c path="haxe.ds.List.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="167">
			<f a=""><c path="haxe.ds._List.ListKeyValueIterator"><c path="haxe.ds.List.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the List indices and values.</haxe_doc>
		</keyValueIterator>
		<toString public="1" set="method" line="177">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="198">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="217">
			<f a="f">
				<f a="">
					<c path="haxe.ds.List.T"/>
					<x path="Bool"/>
				</f>
				<c path="haxe.ds.List"><c path="haxe.ds.List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="233">
			<f a="f">
				<f a="">
					<c path="haxe.ds.List.T"/>
					<c path="map.X"/>
				</f>
				<c path="haxe.ds.List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
	</class>
	<class path="haxe.ds._List.ListNode" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<create public="1" params="T" get="inline" set="null" line="271" static="1"><f a="item:next">
	<c path="create.T"/>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
</f></create>
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="266"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds._List.ListIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<head><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="284"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="288"><f a=""><c path="haxe.ds._List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="280"><f a="head">
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListIterator.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds._List.ListKeyValueIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<idx><x path="Int"/></idx>
		<head><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListKeyValueIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="304"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="308"><f a=""><a>
	<value><c path="haxe.ds._List.ListKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="299"><f a="head">
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.ListSort" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/ListSort.hx">
		<sort public="1" params="T" get="inline" set="null" line="42" static="1">
			<f a="list:cmp">
				<c path="sort.T"/>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<c path="sort.T"/>
			</f>
			<haxe_doc><![CDATA[Sorts List `lst` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies List `a` in place and returns its head once modified.
		The `prev` of the head is set to the tail of the sorted list.

		If `list` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<sortSingleLinked public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="list:cmp">
				<c path="sortSingleLinked.T"/>
				<f a=":">
					<c path="sortSingleLinked.T"/>
					<c path="sortSingleLinked.T"/>
					<x path="Int"/>
				</f>
				<c path="sortSingleLinked.T"/>
			</f>
			<haxe_doc>Same as `sort` but on single linked list.</haxe_doc>
		</sortSingleLinked>
		<haxe_doc>ListSort provides a stable implementation of merge sort through its `sort`
	method. It has a O(N.log(N)) complexity and does not require additional memory allocation.</haxe_doc>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="74" static="1">
		<f a="this:key:value">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<c path="haxe.ds.Map.V"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="92" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Null"><c path="haxe.ds.Map.V"/></x>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, `null` is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="100" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="109" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="116" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.Map.K"/></t>
		</f>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="125" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.Map.V"/></t>
		</f>
		<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="134" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="KeyValueIterator">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</t>
		</f>
		<haxe_doc>Returns an Iterator over the keys and values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</keyValueIterator>
	<copy public="1" get="inline" set="null" line="143" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<x path="haxe.ds.Map">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</x>
		</f>
		<haxe_doc>Returns a shallow copy of `this` map.

		The order of values is undefined.</haxe_doc>
	</copy>
	<toString public="1" get="inline" set="null" line="152" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<clear public="1" get="inline" set="null" line="159" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<x path="Void"/>
		</f>
		<haxe_doc>Removes all keys from `this` Map.</haxe_doc>
	</clear>
	<arrayWrite public="1" get="inline" set="null" line="163" static="1">
		<f a="this:k:v">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<c path="haxe.ds.Map.V"/>
			<c path="haxe.ds.Map.V"/>
		</f>
		<meta>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap params="K:V" get="inline" set="null" line="168" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toStringMap.K"/>
				<c path="toStringMap.V"/>
			</c>
			<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":to"/>
		</meta>
	</toStringMap>
	<toIntMap params="K:V" get="inline" set="null" line="172" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toIntMap.K"/>
				<c path="toIntMap.V"/>
			</c>
			<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":to"/>
		</meta>
	</toIntMap>
	<toEnumValueMapMap params="K:V" get="inline" set="null" line="176" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":to"/>
		</meta>
	</toEnumValueMapMap>
	<toObjectMap params="K:V" get="inline" set="null" line="180" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":to"/>
		</meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="184" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="188" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="192" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="haxe.ds.Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="74" static="1">
			<f a="this:key:value">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="92" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Null"><c path="haxe.ds.Map.V"/></x>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, `null` is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="100" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="109" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="116" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.Map.K"/></t>
			</f>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="125" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.Map.V"/></t>
			</f>
			<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="134" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="KeyValueIterator">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</t>
			</f>
			<haxe_doc>Returns an Iterator over the keys and values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</keyValueIterator>
		<copy public="1" get="inline" set="null" line="143" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<x path="haxe.ds.Map">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</x>
			</f>
			<haxe_doc>Returns a shallow copy of `this` map.

		The order of values is undefined.</haxe_doc>
		</copy>
		<toString public="1" get="inline" set="null" line="152" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<clear public="1" get="inline" set="null" line="159" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes all keys from `this` Map.</haxe_doc>
		</clear>
		<arrayWrite public="1" get="inline" set="null" line="163" static="1">
			<f a="this:k:v">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
				<c path="haxe.ds.Map.V"/>
			</f>
			<meta>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap params="K:V" get="inline" set="null" line="168" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toStringMap.K"/>
					<c path="toStringMap.V"/>
				</c>
				<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap params="K:V" get="inline" set="null" line="172" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toIntMap.K"/>
					<c path="toIntMap.V"/>
				</c>
				<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K:V" get="inline" set="null" line="176" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K:V" get="inline" set="null" line="180" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="184" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="haxe.ds.Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="188" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="haxe.ds.Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="192" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="haxe.ds.Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/ObjectMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Null"><c path="haxe.ds.ObjectMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`

		(java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`

		(java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="81">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<enum path="haxe.ds.Option" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).

	@see https://haxe.org/manual/std-Option.html</haxe_doc>
	</enum>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The length of `this` Array.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="41" static="1"><f a="this">
	<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
	<x path="Int"/>
</f></get_length>
	<get get="inline" set="null" line="44" static="1">
		<f a="this:i">
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			<x path="Int"/>
			<c path="haxe.ds.ReadOnlyArray.T"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<concat public="1" get="inline" set="null" line="59" static="1">
		<f a="this:a">
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			<x path="haxe.ds.ReadOnlyArray"><c path="haxe.ds.ReadOnlyArray.T"/></x>
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
		</f>
		<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
	</concat>
</class></impl>
	</abstract>
	<class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="41" static="1"><f a="this">
	<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
	<x path="Int"/>
</f></get_length>
		<get get="inline" set="null" line="44" static="1">
			<f a="this:i">
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
				<x path="Int"/>
				<c path="haxe.ds.ReadOnlyArray.T"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<concat public="1" get="inline" set="null" line="59" static="1">
			<f a="this:a">
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
				<x path="haxe.ds.ReadOnlyArray"><c path="haxe.ds.ReadOnlyArray.T"/></x>
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/StringMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`

		(java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="78">
			<f a=""><t path="KeyValueIterator">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.StringMap"><c path="haxe.ds.StringMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="eval.Vector"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
	<_new public="1" get="inline" set="null" line="62" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
		<overloads><_new public="1" get="inline" set="null" line="92">
	<f a="length:defaultValue">
		<x path="Int"/>
		<c path="haxe.ds.Vector.T"/>
		<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
	<haxe_doc>Creates a new Vector of length `length` filled with `defaultValue` elements.

		Can be faster than `new Vector(length)` for iteration on some targets for non-nullable elements.

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
</_new></overloads>
	</_new>
	<get public="1" get="inline" set="null" line="126" static="1">
		<f a="this:index">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
		<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="144" static="1">
		<f a="this:index:val">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
		<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</set>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="161" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
		</f>
		<meta><m n=":has_untyped"/></meta>
	</get_length>
	<fill public="1" get="inline" set="null" line="177" static="1">
		<f a="this:value">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="haxe.ds.Vector.T"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Sets all `length` elements of `this` Vector to `value`.</haxe_doc>
	</fill>
	<blit public="1" params="T" get="inline" set="null" line="186" static="1">
		<f a="src:srcPos:dest:destPos:len">
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
	</blit>
	<toArray public="1" get="inline" set="null" line="225" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="Array"><c path="haxe.ds.Vector.T"/></c>
		</f>
		<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
	</toArray>
	<toData public="1" get="inline" set="null" line="254" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
		</f>
		<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
	</toData>
	<fromData public="1" params="T" get="inline" set="null" line="264" static="1">
		<f a="data">
			<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
			<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
		</f>
		<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
	</fromData>
	<fromArrayCopy public="1" params="T" get="inline" set="null" line="277" static="1">
		<f a="array">
			<c path="Array"><c path="fromArrayCopy.T"/></c>
			<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
		</f>
		<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
	</fromArrayCopy>
	<copy public="1" params="T" get="inline" set="null" line="306" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="haxe.ds.Vector"><c path="copy.T"/></x>
		</f>
		<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
	</copy>
	<join public="1" params="T" get="inline" set="null" line="329" static="1">
		<f a="this:sep">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="String"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
	</join>
	<map public="1" params="S" get="inline" set="null" line="352" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<f a="">
				<c path="haxe.ds.Vector.T"/>
				<c path="map.S"/>
			</f>
			<x path="haxe.ds.Vector"><c path="map.S"/></x>
		</f>
		<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
	</map>
	<sort public="1" get="inline" set="null" line="379" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<f a=":">
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
	</sort>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
		<_new public="1" get="inline" set="null" line="62" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
			<overloads><_new public="1" get="inline" set="null" line="92">
	<f a="length:defaultValue">
		<x path="Int"/>
		<c path="haxe.ds.Vector.T"/>
		<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
	<haxe_doc>Creates a new Vector of length `length` filled with `defaultValue` elements.

		Can be faster than `new Vector(length)` for iteration on some targets for non-nullable elements.

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
</_new></overloads>
		</_new>
		<get public="1" get="inline" set="null" line="126" static="1">
			<f a="this:index">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
			<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="144" static="1">
			<f a="this:index:val">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
			<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</set>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="161" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</get_length>
		<fill public="1" get="inline" set="null" line="177" static="1">
			<f a="this:value">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="haxe.ds.Vector.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets all `length` elements of `this` Vector to `value`.</haxe_doc>
		</fill>
		<blit public="1" params="T" get="inline" set="null" line="186" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
		</blit>
		<toArray public="1" get="inline" set="null" line="225" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="Array"><c path="haxe.ds.Vector.T"/></c>
			</f>
			<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
		</toArray>
		<toData public="1" get="inline" set="null" line="254" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
		</toData>
		<fromData public="1" params="T" get="inline" set="null" line="264" static="1">
			<f a="data">
				<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
				<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
			</f>
			<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
		</fromData>
		<fromArrayCopy public="1" params="T" get="inline" set="null" line="277" static="1">
			<f a="array">
				<c path="Array"><c path="fromArrayCopy.T"/></c>
				<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
			</f>
			<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
		</fromArrayCopy>
		<copy public="1" params="T" get="inline" set="null" line="306" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="haxe.ds.Vector"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<join public="1" params="T" get="inline" set="null" line="329" static="1">
			<f a="this:sep">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<map public="1" params="S" get="inline" set="null" line="352" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<f a="">
					<c path="haxe.ds.Vector.T"/>
					<c path="map.S"/>
				</f>
				<x path="haxe.ds.Vector"><c path="map.S"/></x>
			</f>
			<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<sort public="1" get="inline" set="null" line="379" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<f a=":">
					<c path="haxe.ds.Vector.T"/>
					<c path="haxe.ds.Vector.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/WeakMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<set public="1" set="method" line="45">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="50">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Null"><c path="haxe.ds.WeakMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="57">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="64">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="71">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="78">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="85">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="92">
			<f a=""><c path="haxe.ds.WeakMap">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="99">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="106">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="38">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.

	The keys are considered to be weak references on static targets.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<class path="haxe.exceptions.PosException" params="" file="/home/runner/work/haxe/haxe/std/haxe/exceptions/PosException.hx">
		<extends path="haxe.Exception"/>
		<posInfos final="1" public="1">
			<t path="haxe.PosInfos"/>
			<haxe_doc>Position where this exception was created.</haxe_doc>
		</posInfos>
		<toString public="1" set="method" line="24" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<new public="1" set="method" line="12"><f a="message:?previous:?pos">
	<c path="String"/>
	<c path="haxe.Exception"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception that carry position information of a place where it was created.</haxe_doc>
	</class>
	<class path="haxe.exceptions.ArgumentException" params="" file="/home/runner/work/haxe/haxe/std/haxe/exceptions/ArgumentException.hx">
		<extends path="haxe.exceptions.PosException"/>
		<argument final="1" public="1">
			<c path="String"/>
			<haxe_doc>An argument name.</haxe_doc>
		</argument>
		<new public="1" set="method" line="12"><f a="argument:?message:?previous:?pos">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.Exception"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception that is thrown when an invalid value provided for an argument of a function.</haxe_doc>
	</class>
	<class path="haxe.exceptions.NotImplementedException" params="" file="/home/runner/work/haxe/haxe/std/haxe/exceptions/NotImplementedException.hx">
		<extends path="haxe.exceptions.PosException"/>
		<new public="1" set="method" line="7">
			<f a="?message:?previous:?pos" v="&quot;Not implemented&quot;::">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "Not implemented" }</e></m></meta>
		</new>
		<haxe_doc>An exception that is thrown when requested function or operation does not have an implementation.</haxe_doc>
	</class>
	<abstract path="haxe.extern.AsVar" params="T" file="/home/runner/work/haxe/haxe/std/haxe/extern/AsVar.hx">
		<from><icast><c path="haxe.extern.AsVar.T"/></icast></from>
		<this><c path="haxe.extern.AsVar.T"/></this>
		<to><icast><c path="haxe.extern.AsVar.T"/></icast></to>
		<haxe_doc>If this type is used as an argument type, the compiler ensures that
	argument expressions are bound to a local variable.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
		<impl><class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1" final="1"/>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/home/runner/work/haxe/haxe/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1" final="1"/>
	<typedef path="haxe.extern.Rest" params="T" file="/home/runner/work/haxe/haxe/std/haxe/extern/Rest.hx">
		<x path="haxe.Rest"><c path="haxe.extern.Rest.T"/></x>
		<haxe_doc><![CDATA[DEPRECATED: use haxe.Rest instead.
	
	A special type that represents "rest" function argument.
	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
	</typedef>
	<class path="haxe.format.JsonParser" params="" file="/home/runner/work/haxe/haxe/std/haxe/format/JsonParser.hx">
		<parse public="1" get="inline" set="null" line="44" static="1">
			<f a="str">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `str` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `str` is not valid JSON, an exception will be thrown.

		If `str` is null, the result is unspecified.]]></haxe_doc>
		</parse>
		<str><c path="String"/></str>
		<pos><x path="Int"/></pos>
		<doParse set="method" line="56"><f a=""><d/></f></doParse>
		<parseRec set="method" line="70"><f a=""><d/></f></parseRec>
		<parseString set="method" line="152"><f a=""><c path="String"/></f></parseString>
		<parseNumber get="inline" set="null" line="256"><f a="c">
	<x path="Int"/>
	<d/>
</f></parseNumber>
		<nextChar get="inline" set="null" line="312"><f a=""><x path="Int"/></f></nextChar>
		<invalidChar set="method" line="316"><f a=""><x path="Void"/></f></invalidChar>
		<invalidNumber set="method" line="321"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<new set="method" line="51"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON parser in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-parsing.html</haxe_doc>
	</class>
	<class path="haxe.format.JsonPrinter" params="" file="/home/runner/work/haxe/haxe/std/haxe/format/JsonPrinter.hx">
		<print public="1" set="method" line="44" static="1">
			<f a="o:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `o`'s value and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.</haxe_doc>
		</print>
		<buf><c path="StringBuf"/></buf>
		<replacer><f a="key:value">
	<d/>
	<d/>
	<d/>
</f></replacer>
		<indent><c path="String"/></indent>
		<pretty><x path="Bool"/></pretty>
		<nind><x path="Int"/></nind>
		<ipad get="inline" set="null" line="71"><f a=""><x path="Void"/></f></ipad>
		<newl get="inline" set="null" line="76"><f a=""><x path="Void"/></f></newl>
		<write set="method" line="81"><f a="k:v">
	<d/>
	<d/>
	<x path="Void"/>
</f></write>
		<addChar get="inline" set="null" line="140"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addChar>
		<add get="inline" set="null" line="148"><f a="v">
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<classString set="method" line="157"><f a="v">
	<d/>
	<x path="Void"/>
</f></classString>
		<objString get="inline" set="null" line="161"><f a="v">
	<d/>
	<x path="Void"/>
</f></objString>
		<fieldsString set="method" line="165"><f a="v:fields">
	<d/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></fieldsString>
		<quote set="method" line="195"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></quote>
		<new set="method" line="56"><f a="replacer:space">
	<f a="key:value">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON printer in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
	</class>
	<typedef path="haxe.http._HttpBase.StringKeyValue" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpBase.hx" private="1" module="haxe.http.HttpBase"><a>
	<value><c path="String"/></value>
	<name><c path="String"/></name>
</a></typedef>
	<class path="haxe.http.HttpBase" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpBase.hx">
		<url public="1">
			<c path="String"/>
			<haxe_doc>The url of `this` request. It is used only by the `request()` method and
		can be changed in order to send the same request to different target
		Urls.</haxe_doc>
		</url>
		<responseData public="1" get="accessor" set="null"><x path="Null"><c path="String"/></x></responseData>
		<responseBytes public="1" set="null"><x path="Null"><c path="haxe.io.Bytes"/></x></responseBytes>
		<responseAsString><x path="Null"><c path="String"/></x></responseAsString>
		<postData><x path="Null"><c path="String"/></x></postData>
		<postBytes><x path="Null"><c path="haxe.io.Bytes"/></x></postBytes>
		<headers><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></headers>
		<params><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></params>
		<emptyOnData final="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></emptyOnData>
		<setHeader public="1" set="method" line="85">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the header identified as `name` to value `value`.

		If `name` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setHeader>
		<addHeader public="1" set="method" line="98"><f a="header:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addHeader>
		<setParameter public="1" set="method" line="112">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the parameter identified as `name` to value `value`.

		If `name` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setParameter>
		<addParameter public="1" set="method" line="125"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addParameter>
		<setPostData public="1" set="method" line="142">
			<f a="data">
				<x path="Null"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data` string.

		There can only be one post data per request. Subsequent calls to
		this method or to `setPostBytes()` overwrite the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostData>
		<setPostBytes public="1" set="method" line="160">
			<f a="data">
				<x path="Null"><c path="haxe.io.Bytes"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data` bytes.

		There can only be one post data per request. Subsequent calls to
		this method or to `setPostData()` overwrite the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostBytes>
		<request public="1" set="method" line="185">
			<f a="?post">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends `this` Http request to the Url specified by `this.url`.

		If `post` is true, the request is sent as POST request, otherwise it is
		sent as GET request.

		Depending on the outcome of the request, this method calls the
		`onStatus()`, `onError()`, `onData()` or `onBytes()` callback functions.

		If `this.url` is null, the result is unspecified.

		If `this.url` is an invalid or inaccessible Url, the `onError()` callback
		function is called.

		[js] If `this.async` is false, the callback functions are called before
		this method returns.</haxe_doc>
		</request>
		<onData public="1" set="dynamic" line="196">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onData = function(data) { // handle result }`</haxe_doc>
		</onData>
		<onBytes public="1" set="dynamic" line="205">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onBytes = function(data) { // handle result }`</haxe_doc>
		</onBytes>
		<onError public="1" set="dynamic" line="214">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a request error, with `msg` containing the
		error description.

		The intended usage is to bind it to a custom function:
		`httpInstance.onError = function(msg) { // handle error }`</haxe_doc>
		</onError>
		<onStatus public="1" set="dynamic" line="223">
			<f a="status">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a Http status change, with `status` being the
		new status.

		The intended usage is to bind it to a custom function:
		`httpInstance.onStatus = function(status) { // handle status }`</haxe_doc>
		</onStatus>
		<hasOnData set="method" line="228">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Override this if extending `haxe.Http` with overriding `onData`</haxe_doc>
		</hasOnData>
		<success set="method" line="232"><f a="data">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></success>
		<get_responseData set="method" line="241"><f a=""><x path="Null"><c path="String"/></x></f></get_responseData>
		<new public="1" set="method" line="71">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Http instance with `url` as parameter.

		This does not do a request until `request()` is called.

		If `url` is null, the field url must be set to a value before making the
		call to `request()`, or the result is unspecified.

		(Php) Https (SSL) connections are allowed only if the OpenSSL extension
		is enabled.</haxe_doc>
		</new>
		<haxe_doc>This class can be used to handle Http requests consistently across
	platforms. There are two intended usages:

	- call `haxe.Http.requestUrl(url)` and receive the result as a `String`
	(only available on `sys` targets)
	- create a `new haxe.Http(url)`, register your callbacks for `onData`,
	`onError` and `onStatus`, then call `request()`.</haxe_doc>
	</class>
	<abstract path="haxe.http.HttpMethod" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpMethod.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>HTTP defines methods (sometimes referred to as _verbs_) to indicate the desired action to be
	performed on the identified resource. What this resource represents, whether pre-existing data
	or data that is generated dynamically, depends on the implementation of the server.

	Often, the resource corresponds to a file or the output of an executable residing on the server.
	The HTTP/1.0 specification defined the `GET`, `POST` and `HEAD` methods and the HTTP/1.1
	specification added 5 new methods: `OPTIONS`, `PUT`, `DELETE`, `TRACE` and `CONNECT`.

	By being specified in these documents their semantics are well known and can be depended upon.
	Any client can use any method and the server can be configured to support any combination of methods.
	If a method is unknown to an intermediate it will be treated as an unsafe and non-idempotent method.
	There is no limit to the number of methods that can be defined and this allows for future methods to
	be specified without breaking existing infrastructure.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.http._HttpMethod.HttpMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpMethod.hx" private="1" module="haxe.http.HttpMethod" extern="1" final="1">
	<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="28" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "POST"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `POST` method requests that the server accept the entity enclosed in the request as
		a new subordinate of the web resource identified by the URI.
		
		The data `POST`ed might be, for example, an annotation for existing resources;
		a message for a bulletin board, newsgroup, mailing list, or comment thread;
		a block of data that is the result of submitting a web form to a data-handling process;
		or an item to add to a database.</haxe_doc>
	</Post>
	<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="40" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "GET"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `GET` method requests a representation of the specified resource.

		Requests using `GET` should only retrieve data and should have no other effect.
		(This is also true of some other HTTP methods.) The W3C has published guidance
		principles on this distinction, saying, _"Web application design should be informed
		by the above principles, but also by the relevant limitations."_

		See safe methods below.</haxe_doc>
	</Get>
	<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="47" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "HEAD"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `HEAD` method asks for a response identical to that of a `GET` request,
		but without the response body. This is useful for retrieving meta-information
		written in response headers, without having to transport the entire content.</haxe_doc>
	</Head>
	<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="54" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "PUT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `PUT` method requests that the enclosed entity be stored under the supplied URI.
		If the URI refers to an already existing resource, it is modified; if the URI does
		not point to an existing resource, then the server can create the resource with that URI.</haxe_doc>
	</Put>
	<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="59" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "DELETE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `DELETE` method deletes the specified resource.</haxe_doc>
	</Delete>
	<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="65" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "TRACE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `TRACE` method echoes the received request so that a client can see
		what (if any) changes or additions have been made by intermediate servers.</haxe_doc>
	</Trace>
	<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="72" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "OPTIONS"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `OPTIONS` method returns the HTTP methods that the server supports for the
		specified URL. This can be used to check the functionality of a web server by
		requesting `*` instead of a specific resource.</haxe_doc>
	</Options>
	<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="78" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "CONNECT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `CONNECT` method converts the request connection to a transparent TCP/IP tunnel,
		usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.</haxe_doc>
	</Connect>
	<Patch public="1" get="inline" set="null" expr="cast &quot;PATCH&quot;" line="83" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "PATCH"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `PATCH` method applies partial modifications to a resource.</haxe_doc>
	</Patch>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.http._HttpMethod.HttpMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpMethod.hx" private="1" module="haxe.http.HttpMethod" extern="1" final="1">
		<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="28" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "POST"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `POST` method requests that the server accept the entity enclosed in the request as
		a new subordinate of the web resource identified by the URI.
		
		The data `POST`ed might be, for example, an annotation for existing resources;
		a message for a bulletin board, newsgroup, mailing list, or comment thread;
		a block of data that is the result of submitting a web form to a data-handling process;
		or an item to add to a database.</haxe_doc>
		</Post>
		<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="40" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "GET"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `GET` method requests a representation of the specified resource.

		Requests using `GET` should only retrieve data and should have no other effect.
		(This is also true of some other HTTP methods.) The W3C has published guidance
		principles on this distinction, saying, _"Web application design should be informed
		by the above principles, but also by the relevant limitations."_

		See safe methods below.</haxe_doc>
		</Get>
		<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="47" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "HEAD"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `HEAD` method asks for a response identical to that of a `GET` request,
		but without the response body. This is useful for retrieving meta-information
		written in response headers, without having to transport the entire content.</haxe_doc>
		</Head>
		<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="54" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "PUT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `PUT` method requests that the enclosed entity be stored under the supplied URI.
		If the URI refers to an already existing resource, it is modified; if the URI does
		not point to an existing resource, then the server can create the resource with that URI.</haxe_doc>
		</Put>
		<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="59" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "DELETE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `DELETE` method deletes the specified resource.</haxe_doc>
		</Delete>
		<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="65" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "TRACE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `TRACE` method echoes the received request so that a client can see
		what (if any) changes or additions have been made by intermediate servers.</haxe_doc>
		</Trace>
		<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="72" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "OPTIONS"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `OPTIONS` method returns the HTTP methods that the server supports for the
		specified URL. This can be used to check the functionality of a web server by
		requesting `*` instead of a specific resource.</haxe_doc>
		</Options>
		<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="78" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "CONNECT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `CONNECT` method converts the request connection to a transparent TCP/IP tunnel,
		usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.</haxe_doc>
		</Connect>
		<Patch public="1" get="inline" set="null" expr="cast &quot;PATCH&quot;" line="83" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "PATCH"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `PATCH` method applies partial modifications to a resource.</haxe_doc>
		</Patch>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.http.HttpStatus" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpStatus.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>HTTP Request Status</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.http._HttpStatus.HttpStatus_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpStatus.hx" private="1" module="haxe.http.HttpStatus" extern="1" final="1">
	<Continue public="1" get="inline" set="null" expr="cast 100" line="7" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 100</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Continue>
	<SwitchingProtocols public="1" get="inline" set="null" expr="cast 101" line="8" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 101</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SwitchingProtocols>
	<Processing public="1" get="inline" set="null" expr="cast 102" line="9" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 102</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Processing>
	<OK public="1" get="inline" set="null" expr="cast 200" line="10" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 200</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OK>
	<Created public="1" get="inline" set="null" expr="cast 201" line="11" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 201</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Created>
	<Accepted public="1" get="inline" set="null" expr="cast 202" line="12" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 202</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Accepted>
	<NonAuthoritativeInformation public="1" get="inline" set="null" expr="cast 203" line="13" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 203</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NonAuthoritativeInformation>
	<NoContent public="1" get="inline" set="null" expr="cast 204" line="14" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 204</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NoContent>
	<ResetContent public="1" get="inline" set="null" expr="cast 205" line="15" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 205</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ResetContent>
	<PartialContent public="1" get="inline" set="null" expr="cast 206" line="16" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 206</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PartialContent>
	<MultiStatus public="1" get="inline" set="null" expr="cast 207" line="17" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 207</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MultiStatus>
	<AlreadyReported public="1" get="inline" set="null" expr="cast 208" line="18" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 208</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AlreadyReported>
	<IMUsed public="1" get="inline" set="null" expr="cast 226" line="19" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 226</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IMUsed>
	<MultipleChoices public="1" get="inline" set="null" expr="cast 300" line="20" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 300</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MultipleChoices>
	<MovedPermanently public="1" get="inline" set="null" expr="cast 301" line="21" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 301</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MovedPermanently>
	<Found public="1" get="inline" set="null" expr="cast 302" line="22" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 302</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Found>
	<SeeOther public="1" get="inline" set="null" expr="cast 303" line="23" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 303</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SeeOther>
	<NotModified public="1" get="inline" set="null" expr="cast 304" line="24" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 304</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotModified>
	<UseProxy public="1" get="inline" set="null" expr="cast 305" line="25" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 305</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UseProxy>
	<SwitchProxy public="1" get="inline" set="null" expr="cast 306" line="26" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 306</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SwitchProxy>
	<TemporaryRedirect public="1" get="inline" set="null" expr="cast 307" line="27" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 307</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TemporaryRedirect>
	<PermanentRedirect public="1" get="inline" set="null" expr="cast 308" line="28" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 308</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PermanentRedirect>
	<BadRequest public="1" get="inline" set="null" expr="cast 400" line="29" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 400</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BadRequest>
	<Unauthorized public="1" get="inline" set="null" expr="cast 401" line="30" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 401</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Unauthorized>
	<PaymentRequired public="1" get="inline" set="null" expr="cast 402" line="31" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 402</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PaymentRequired>
	<Forbidden public="1" get="inline" set="null" expr="cast 403" line="32" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 403</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Forbidden>
	<NotFound public="1" get="inline" set="null" expr="cast 404" line="33" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 404</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotFound>
	<MethodNotAllowed public="1" get="inline" set="null" expr="cast 405" line="34" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 405</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethodNotAllowed>
	<NotAcceptable public="1" get="inline" set="null" expr="cast 406" line="35" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 406</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotAcceptable>
	<ProxyAuthenticationRequired public="1" get="inline" set="null" expr="cast 407" line="36" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 407</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ProxyAuthenticationRequired>
	<RequestTimeout public="1" get="inline" set="null" expr="cast 408" line="37" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 408</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RequestTimeout>
	<Conflict public="1" get="inline" set="null" expr="cast 409" line="38" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 409</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Conflict>
	<Gone public="1" get="inline" set="null" expr="cast 410" line="39" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 410</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Gone>
	<LengthRequired public="1" get="inline" set="null" expr="cast 411" line="40" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 411</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LengthRequired>
	<PreconditionFailed public="1" get="inline" set="null" expr="cast 412" line="41" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 412</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PreconditionFailed>
	<PayloadTooLarge public="1" get="inline" set="null" expr="cast 413" line="42" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 413</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PayloadTooLarge>
	<URITooLong public="1" get="inline" set="null" expr="cast 414" line="43" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 414</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</URITooLong>
	<UnsupportedMediaType public="1" get="inline" set="null" expr="cast 415" line="44" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 415</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UnsupportedMediaType>
	<RangeNotSatisfiable public="1" get="inline" set="null" expr="cast 416" line="45" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 416</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RangeNotSatisfiable>
	<ExpectationFailed public="1" get="inline" set="null" expr="cast 417" line="46" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 417</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ExpectationFailed>
	<ImATeapot public="1" get="inline" set="null" expr="cast 418" line="47" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 418</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImATeapot>
	<MisdirectedRequest public="1" get="inline" set="null" expr="cast 421" line="48" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 421</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MisdirectedRequest>
	<UnprocessableEntity public="1" get="inline" set="null" expr="cast 422" line="49" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 422</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UnprocessableEntity>
	<Locked public="1" get="inline" set="null" expr="cast 423" line="50" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 423</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Locked>
	<FailedDependency public="1" get="inline" set="null" expr="cast 424" line="51" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 424</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FailedDependency>
	<UpgradeRequired public="1" get="inline" set="null" expr="cast 426" line="52" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 426</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UpgradeRequired>
	<PreconditionRequired public="1" get="inline" set="null" expr="cast 428" line="53" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 428</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PreconditionRequired>
	<TooManyRequests public="1" get="inline" set="null" expr="cast 429" line="54" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 429</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TooManyRequests>
	<RequestHeaderFieldsTooLarge public="1" get="inline" set="null" expr="cast 431" line="55" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 431</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RequestHeaderFieldsTooLarge>
	<UnavailableForLegalReasons public="1" get="inline" set="null" expr="cast 451" line="56" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 451</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UnavailableForLegalReasons>
	<InternalServerError public="1" get="inline" set="null" expr="cast 500" line="57" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 500</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</InternalServerError>
	<NotImplemented public="1" get="inline" set="null" expr="cast 501" line="58" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 501</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotImplemented>
	<BadGateway public="1" get="inline" set="null" expr="cast 502" line="59" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 502</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BadGateway>
	<ServiceUnavailable public="1" get="inline" set="null" expr="cast 503" line="60" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 503</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ServiceUnavailable>
	<GatewayTimeout public="1" get="inline" set="null" expr="cast 504" line="61" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 504</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GatewayTimeout>
	<HTTPVersionNotSupported public="1" get="inline" set="null" expr="cast 505" line="62" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 505</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HTTPVersionNotSupported>
	<VariantAlsoNegotiates public="1" get="inline" set="null" expr="cast 506" line="63" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 506</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VariantAlsoNegotiates>
	<InsufficientStorage public="1" get="inline" set="null" expr="cast 507" line="64" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 507</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</InsufficientStorage>
	<LoopDetected public="1" get="inline" set="null" expr="cast 508" line="65" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 508</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LoopDetected>
	<NotExtended public="1" get="inline" set="null" expr="cast 510" line="66" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 510</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotExtended>
	<NetworkAuthenticationRequired public="1" get="inline" set="null" expr="cast 511" line="67" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 511</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NetworkAuthenticationRequired>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.http._HttpStatus.HttpStatus_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpStatus.hx" private="1" module="haxe.http.HttpStatus" extern="1" final="1">
		<Continue public="1" get="inline" set="null" expr="cast 100" line="7" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 100</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Continue>
		<SwitchingProtocols public="1" get="inline" set="null" expr="cast 101" line="8" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 101</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SwitchingProtocols>
		<Processing public="1" get="inline" set="null" expr="cast 102" line="9" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 102</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Processing>
		<OK public="1" get="inline" set="null" expr="cast 200" line="10" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 200</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OK>
		<Created public="1" get="inline" set="null" expr="cast 201" line="11" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 201</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Created>
		<Accepted public="1" get="inline" set="null" expr="cast 202" line="12" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 202</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Accepted>
		<NonAuthoritativeInformation public="1" get="inline" set="null" expr="cast 203" line="13" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 203</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NonAuthoritativeInformation>
		<NoContent public="1" get="inline" set="null" expr="cast 204" line="14" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 204</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NoContent>
		<ResetContent public="1" get="inline" set="null" expr="cast 205" line="15" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 205</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ResetContent>
		<PartialContent public="1" get="inline" set="null" expr="cast 206" line="16" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 206</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PartialContent>
		<MultiStatus public="1" get="inline" set="null" expr="cast 207" line="17" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 207</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MultiStatus>
		<AlreadyReported public="1" get="inline" set="null" expr="cast 208" line="18" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 208</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AlreadyReported>
		<IMUsed public="1" get="inline" set="null" expr="cast 226" line="19" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 226</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IMUsed>
		<MultipleChoices public="1" get="inline" set="null" expr="cast 300" line="20" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 300</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MultipleChoices>
		<MovedPermanently public="1" get="inline" set="null" expr="cast 301" line="21" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 301</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MovedPermanently>
		<Found public="1" get="inline" set="null" expr="cast 302" line="22" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 302</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Found>
		<SeeOther public="1" get="inline" set="null" expr="cast 303" line="23" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 303</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SeeOther>
		<NotModified public="1" get="inline" set="null" expr="cast 304" line="24" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 304</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotModified>
		<UseProxy public="1" get="inline" set="null" expr="cast 305" line="25" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 305</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UseProxy>
		<SwitchProxy public="1" get="inline" set="null" expr="cast 306" line="26" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 306</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SwitchProxy>
		<TemporaryRedirect public="1" get="inline" set="null" expr="cast 307" line="27" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 307</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TemporaryRedirect>
		<PermanentRedirect public="1" get="inline" set="null" expr="cast 308" line="28" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 308</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PermanentRedirect>
		<BadRequest public="1" get="inline" set="null" expr="cast 400" line="29" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 400</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BadRequest>
		<Unauthorized public="1" get="inline" set="null" expr="cast 401" line="30" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 401</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Unauthorized>
		<PaymentRequired public="1" get="inline" set="null" expr="cast 402" line="31" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 402</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PaymentRequired>
		<Forbidden public="1" get="inline" set="null" expr="cast 403" line="32" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 403</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Forbidden>
		<NotFound public="1" get="inline" set="null" expr="cast 404" line="33" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 404</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotFound>
		<MethodNotAllowed public="1" get="inline" set="null" expr="cast 405" line="34" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 405</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethodNotAllowed>
		<NotAcceptable public="1" get="inline" set="null" expr="cast 406" line="35" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 406</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotAcceptable>
		<ProxyAuthenticationRequired public="1" get="inline" set="null" expr="cast 407" line="36" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 407</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ProxyAuthenticationRequired>
		<RequestTimeout public="1" get="inline" set="null" expr="cast 408" line="37" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 408</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RequestTimeout>
		<Conflict public="1" get="inline" set="null" expr="cast 409" line="38" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 409</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Conflict>
		<Gone public="1" get="inline" set="null" expr="cast 410" line="39" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 410</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Gone>
		<LengthRequired public="1" get="inline" set="null" expr="cast 411" line="40" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 411</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LengthRequired>
		<PreconditionFailed public="1" get="inline" set="null" expr="cast 412" line="41" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 412</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PreconditionFailed>
		<PayloadTooLarge public="1" get="inline" set="null" expr="cast 413" line="42" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 413</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PayloadTooLarge>
		<URITooLong public="1" get="inline" set="null" expr="cast 414" line="43" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 414</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</URITooLong>
		<UnsupportedMediaType public="1" get="inline" set="null" expr="cast 415" line="44" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 415</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UnsupportedMediaType>
		<RangeNotSatisfiable public="1" get="inline" set="null" expr="cast 416" line="45" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 416</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RangeNotSatisfiable>
		<ExpectationFailed public="1" get="inline" set="null" expr="cast 417" line="46" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 417</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ExpectationFailed>
		<ImATeapot public="1" get="inline" set="null" expr="cast 418" line="47" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 418</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImATeapot>
		<MisdirectedRequest public="1" get="inline" set="null" expr="cast 421" line="48" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 421</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MisdirectedRequest>
		<UnprocessableEntity public="1" get="inline" set="null" expr="cast 422" line="49" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 422</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UnprocessableEntity>
		<Locked public="1" get="inline" set="null" expr="cast 423" line="50" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 423</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Locked>
		<FailedDependency public="1" get="inline" set="null" expr="cast 424" line="51" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 424</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FailedDependency>
		<UpgradeRequired public="1" get="inline" set="null" expr="cast 426" line="52" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 426</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UpgradeRequired>
		<PreconditionRequired public="1" get="inline" set="null" expr="cast 428" line="53" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 428</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PreconditionRequired>
		<TooManyRequests public="1" get="inline" set="null" expr="cast 429" line="54" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 429</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TooManyRequests>
		<RequestHeaderFieldsTooLarge public="1" get="inline" set="null" expr="cast 431" line="55" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 431</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RequestHeaderFieldsTooLarge>
		<UnavailableForLegalReasons public="1" get="inline" set="null" expr="cast 451" line="56" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 451</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UnavailableForLegalReasons>
		<InternalServerError public="1" get="inline" set="null" expr="cast 500" line="57" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 500</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</InternalServerError>
		<NotImplemented public="1" get="inline" set="null" expr="cast 501" line="58" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 501</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotImplemented>
		<BadGateway public="1" get="inline" set="null" expr="cast 502" line="59" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 502</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BadGateway>
		<ServiceUnavailable public="1" get="inline" set="null" expr="cast 503" line="60" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 503</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ServiceUnavailable>
		<GatewayTimeout public="1" get="inline" set="null" expr="cast 504" line="61" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 504</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GatewayTimeout>
		<HTTPVersionNotSupported public="1" get="inline" set="null" expr="cast 505" line="62" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 505</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HTTPVersionNotSupported>
		<VariantAlsoNegotiates public="1" get="inline" set="null" expr="cast 506" line="63" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 506</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VariantAlsoNegotiates>
		<InsufficientStorage public="1" get="inline" set="null" expr="cast 507" line="64" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 507</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</InsufficientStorage>
		<LoopDetected public="1" get="inline" set="null" expr="cast 508" line="65" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 508</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LoopDetected>
		<NotExtended public="1" get="inline" set="null" expr="cast 510" line="66" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 510</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotExtended>
		<NetworkAuthenticationRequired public="1" get="inline" set="null" expr="cast 511" line="67" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 511</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NetworkAuthenticationRequired>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.hxb.WriterTargetConfig" params="" file="/home/runner/work/haxe/haxe/std/haxe/hxb/WriterConfig.hx" module="haxe.hxb.WriterConfig"><a>
	<include>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dot paths of modules or packages to be included in the archive. This takes priority
		over exclude. By default, all modules that aren't explicitly excluded are
		included.</haxe_doc>
	</include>
	<hxbVersion>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The hxb version to target. By default, the version of the Haxe compiler itself
		is targeted. See https://github.com/HaxeFoundation/haxe/issues/11505</haxe_doc>
	</hxbVersion>
	<generateDocumentation>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If false, no documentation</haxe_doc>
	</generateDocumentation>
	<generate>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If `false`, this target is ignored by the writer.</haxe_doc>
	</generate>
	<exclude>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dot paths of modules or packages to be exluded from the archive.</haxe_doc>
	</exclude>
</a></typedef>
	<typedef path="haxe.hxb.WriterConfig" params="" file="/home/runner/work/haxe/haxe/std/haxe/hxb/WriterConfig.hx"><a>
	<targetConfig>
		<x path="Null"><t path="haxe.hxb.WriterTargetConfig"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The configuration for the current target context. If it is `null`, all data
		for the target context is generated.</haxe_doc>
	</targetConfig>
	<macroConfig>
		<x path="Null"><t path="haxe.hxb.WriterTargetConfig"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The configuration for the macro context. If it is `null`, all data for the
		macro context is generated.</haxe_doc>
	</macroConfig>
	<archivePath>
		<c path="String"/>
		<haxe_doc>The file path for the archive. Occurrences of `$target` are replaced
		by the name of the current target (js, hl, etc.).</haxe_doc>
	</archivePath>
</a></typedef>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="haxe.io.ArrayBufferViewImpl"/></typedef>
	<class path="haxe.io.ArrayBufferViewImpl" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView">
		<bytes public="1"><c path="haxe.io.Bytes"/></bytes>
		<byteOffset public="1"><x path="Int"/></byteOffset>
		<byteLength public="1"><x path="Int"/></byteLength>
		<sub public="1" set="method" line="38"><f a="begin:?length">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></sub>
		<subarray public="1" set="method" line="46"><f a="?begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></subarray>
		<new public="1" set="method" line="32"><f a="bytes:pos:length">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1">
	<buffer public="1" get="accessor" set="null" static="1"><c path="haxe.io.Bytes"/></buffer>
	<byteOffset public="1" get="accessor" set="null" static="1"><x path="Int"/></byteOffset>
	<byteLength public="1" get="accessor" set="null" static="1"><x path="Int"/></byteLength>
	<_new public="1" get="inline" set="null" line="60" static="1">
		<f a="size">
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_byteOffset get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
</f></get_byteOffset>
	<get_byteLength get="inline" set="null" line="68" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
</f></get_byteLength>
	<get_buffer get="inline" set="null" line="71" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<c path="haxe.io.Bytes"/>
</f></get_buffer>
	<sub public="1" get="inline" set="null" line="73" static="1"><f a="this:begin:?length">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="77" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="81" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<t path="haxe.io.ArrayBufferViewData"/>
</f></getData>
	<fromData public="1" get="inline" set="null" line="85" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
	<fromBytes public="1" set="method" line="89" static="1">
		<f a="bytes:?pos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1">
		<buffer public="1" get="accessor" set="null" static="1"><c path="haxe.io.Bytes"/></buffer>
		<byteOffset public="1" get="accessor" set="null" static="1"><x path="Int"/></byteOffset>
		<byteLength public="1" get="accessor" set="null" static="1"><x path="Int"/></byteLength>
		<_new public="1" get="inline" set="null" line="60" static="1">
			<f a="size">
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_byteOffset get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
</f></get_byteOffset>
		<get_byteLength get="inline" set="null" line="68" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
</f></get_byteLength>
		<get_buffer get="inline" set="null" line="71" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<c path="haxe.io.Bytes"/>
</f></get_buffer>
		<sub public="1" get="inline" set="null" line="73" static="1"><f a="this:begin:?length">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="77" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="81" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<t path="haxe.io.ArrayBufferViewData"/>
</f></getData>
		<fromData public="1" get="inline" set="null" line="85" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
		<fromBytes public="1" set="method" line="89" static="1">
			<f a="bytes:?pos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<class path="haxe.io.Input" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<readByte public="1" set="method" line="47">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="62">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="90">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="92"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="104">
			<f a="?bufsize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="130">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="143">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="161">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="174">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="197">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="206">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="215">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="227">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="241">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="252">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="267">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="279">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="302">
			<f a="len:?encoding">
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
	</class>
	<class path="haxe.io.BufferInput" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/BufferInput.hx">
		<extends path="haxe.io.Input"/>
		<i public="1"><c path="haxe.io.Input"/></i>
		<buf public="1"><c path="haxe.io.Bytes"/></buf>
		<available public="1"><x path="Int"/></available>
		<pos public="1"><x path="Int"/></pos>
		<refill public="1" set="method" line="38"><f a=""><x path="Void"/></f></refill>
		<readByte public="1" set="method" line="46" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="55" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="31">
			<f a="i:buf:?pos:?available" v="::0:0">
				<c path="haxe.io.Input"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ available : 0, pos : 0 }</e></m></meta>
		</new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/haxe/io/BytesBuffer.hx" extern="1">
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<get_length set="method"><f a=""><x path="Int"/></f></get_length>
		<addByte public="1" set="method"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<add public="1" set="method"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addString public="1" set="method"><f a="v:?encoding">
	<c path="String"/>
	<e path="haxe.io.Encoding"/>
	<x path="Void"/>
</f></addString>
		<addInt32 public="1" set="method"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addInt64 public="1" set="method"><f a="v">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addInt64>
		<addFloat public="1" set="method"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" set="method"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" set="method"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer should no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="haxe.io._BytesData.NativeBytesDataAbstract" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/haxe/io/BytesData.hx" private="1" module="haxe.io.BytesData">
		<from><icast><c path="haxe.io.Bytes"/></icast></from>
		<this><c path="haxe.io.Bytes"/></this>
		<to><icast><c path="haxe.io.Bytes"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="haxe.io._BytesData.NativeBytesDataAbstract_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/haxe/io/BytesData.hx" private="1" module="haxe.io.BytesData" final="1">
	<get public="1" get="inline" set="null" line="28" static="1">
		<f a="this:i">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="31" static="1">
		<f a="this:i:v">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<d/>
			<x path="Void"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
</class></impl>
	</abstract>
	<class path="haxe.io._BytesData.NativeBytesDataAbstract_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/haxe/io/BytesData.hx" private="1" module="haxe.io.BytesData" final="1">
		<get public="1" get="inline" set="null" line="28" static="1">
			<f a="this:i">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="31" static="1">
			<f a="this:i:v">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/haxe/io/BytesData.hx"><x path="haxe.io._BytesData.NativeBytesDataAbstract"/></typedef>
	<class path="haxe.io.BytesInput" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_position get="inline" set="null" line="67"><f a=""><x path="Int"/></f></get_position>
		<get_length get="inline" set="null" line="75"><f a=""><x path="Int"/></f></get_length>
		<set_position set="method" line="83"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<readByte public="1" set="method" line="96" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="119" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="39"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Output" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="103">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="120">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="133">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="142">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="156">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="167">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="178">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="195">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="206">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="225">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<prepare public="1" set="method" line="246">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least `nbytes` bytes.

		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="254">
			<f a="i:?bufsize">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read all available data from `i` and write it.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read and written. Its default value is 4096.</haxe_doc>
		</writeInput>
		<writeString public="1" set="method" line="278">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="47"><f a=""><x path="Int"/></f></get_length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="137">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns the `Bytes` of this output.

		This function should not be called more than once on a given
		`BytesOutput` instance.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="haxe.io.Encoding" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.io.Eof" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.io.Eof.*"</e></m></meta>
		</toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
	</class>
	<class path="haxe.io.FPHelper" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/FPHelper.hx">
		<i64tmp expr="Int64.ofInt(0)" line="35" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":value"><e>Int64.ofInt(0)</e></m></meta>
		</i64tmp>
		<LN2 get="inline" set="null" expr="0.6931471805599453" line="37" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.6931471805599453</e></m></meta>
		</LN2>
		<_i32ToFloat get="inline" set="null" line="39" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></_i32ToFloat>
		<_i64ToDouble get="inline" set="null" line="48" static="1"><f a="lo:hi">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></_i64ToDouble>
		<_floatToI32 get="inline" set="null" line="58" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></_floatToI32>
		<_doubleToI64 get="inline" set="null" line="76" static="1"><f a="v">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></_doubleToI64>
		<i32ToFloat public="1" set="method" line="133" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></i32ToFloat>
		<floatToI32 public="1" set="method" line="168" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></floatToI32>
		<i64ToDouble public="1" set="method" line="197" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></i64ToDouble>
		<doubleToI64 public="1" set="method" line="240" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns an Int64 representing the bytes representation of the double precision IEEE float value.
		WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.
		We still ensure that this is safe to use in a multithread environment</haxe_doc>
		</doubleToI64>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
	</class>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float32Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float32Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<t path="haxe.io.Float32ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float32Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float32Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<t path="haxe.io.Float32ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.Float64ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float64Array.hx" module="haxe.io.Float64Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float64Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float64Array.hx">
		<this><t path="haxe.io.Float64ArrayData"/></this>
		<impl><class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>8</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float64Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float64Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<t path="haxe.io.Float64ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float64Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float64Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<t path="haxe.io.Float64ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.Int32ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Int32Array.hx" module="haxe.io.Int32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Int32Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Int32Array.hx">
		<this><t path="haxe.io.Int32ArrayData"/></this>
		<impl><class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<t path="haxe.io.Int32ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<t path="haxe.io.Int32ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<abstract path="haxe.io.Mime" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Mime.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>HTML MimeType Enum
	@see http://www.sitepoint.com/web-foundations/mime-types-complete-list/</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.io._Mime.Mime_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Mime.hx" private="1" module="haxe.io.Mime" extern="1" final="1">
	<XWorldX3dmf public="1" get="inline" set="null" expr="cast &quot;x-world/x-3dmf&quot;" line="8" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-world/x-3dmf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XWorldX3dmf>
	<ApplicationOctetStream public="1" get="inline" set="null" expr="cast &quot;application/octet-stream&quot;" line="9" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/octet-stream"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationOctetStream>
	<ApplicationXAuthorwareBin public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-bin&quot;" line="10" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-bin"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXAuthorwareBin>
	<ApplicationXAuthorwareMap public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-map&quot;" line="11" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-map"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXAuthorwareMap>
	<ApplicationXAuthorwareSeg public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-seg&quot;" line="12" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-seg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXAuthorwareSeg>
	<TextVndAbc public="1" get="inline" set="null" expr="cast &quot;text/vnd.abc&quot;" line="13" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.abc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextVndAbc>
	<TextHtml public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="14" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/html"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextHtml>
	<VideoAnimaflex public="1" get="inline" set="null" expr="cast &quot;video/animaflex&quot;" line="15" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/animaflex"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoAnimaflex>
	<ApplicationPostscript public="1" get="inline" set="null" expr="cast &quot;application/postscript&quot;" line="16" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/postscript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPostscript>
	<AudioAiff public="1" get="inline" set="null" expr="cast &quot;audio/aiff&quot;" line="17" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/aiff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioAiff>
	<AudioXAiff public="1" get="inline" set="null" expr="cast &quot;audio/x-aiff&quot;" line="18" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-aiff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXAiff>
	<ApplicationXAim public="1" get="inline" set="null" expr="cast &quot;application/x-aim&quot;" line="19" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-aim"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXAim>
	<TextXAudiosoftIntra public="1" get="inline" set="null" expr="cast &quot;text/x-audiosoft-intra&quot;" line="20" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-audiosoft-intra"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXAudiosoftIntra>
	<ApplicationXNaviAnimation public="1" get="inline" set="null" expr="cast &quot;application/x-navi-animation&quot;" line="21" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navi-animation"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNaviAnimation>
	<ApplicationXNokia9000CommunicatorAddOnSoftware public="1" get="inline" set="null" expr="cast &quot;application/x-nokia-9000-communicator-add-on-software&quot;" line="22" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-nokia-9000-communicator-add-on-software"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNokia9000CommunicatorAddOnSoftware>
	<ApplicationMime public="1" get="inline" set="null" expr="cast &quot;application/mime&quot;" line="23" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMime>
	<ApplicationArj public="1" get="inline" set="null" expr="cast &quot;application/arj&quot;" line="24" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/arj"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationArj>
	<ImageXJg public="1" get="inline" set="null" expr="cast &quot;image/x-jg&quot;" line="25" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-jg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXJg>
	<VideoXMsAsf public="1" get="inline" set="null" expr="cast &quot;video/x-ms-asf&quot;" line="26" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-ms-asf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXMsAsf>
	<TextXAsm public="1" get="inline" set="null" expr="cast &quot;text/x-asm&quot;" line="27" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-asm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXAsm>
	<TextAsp public="1" get="inline" set="null" expr="cast &quot;text/asp&quot;" line="28" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/asp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextAsp>
	<ApplicationXMplayer2 public="1" get="inline" set="null" expr="cast &quot;application/x-mplayer2&quot;" line="29" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mplayer2"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMplayer2>
	<AudioBasic public="1" get="inline" set="null" expr="cast &quot;audio/basic&quot;" line="30" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/basic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioBasic>
	<ApplicationXTroffMsvideo public="1" get="inline" set="null" expr="cast &quot;application/x-troff-msvideo&quot;" line="31" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-msvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroffMsvideo>
	<VideoAvi public="1" get="inline" set="null" expr="cast &quot;video/avi&quot;" line="32" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/avi"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoAvi>
	<VideoMsvideo public="1" get="inline" set="null" expr="cast &quot;video/msvideo&quot;" line="33" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/msvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoMsvideo>
	<VideoXMsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-msvideo&quot;" line="34" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-msvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXMsvideo>
	<VideoAvsVideo public="1" get="inline" set="null" expr="cast &quot;video/avs-video&quot;" line="35" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/avs-video"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoAvsVideo>
	<ApplicationXBcpio public="1" get="inline" set="null" expr="cast &quot;application/x-bcpio&quot;" line="36" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bcpio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBcpio>
	<ApplicationMacBinary public="1" get="inline" set="null" expr="cast &quot;application/mac-binary&quot;" line="37" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mac-binary"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMacBinary>
	<ApplicationMacbinary public="1" get="inline" set="null" expr="cast &quot;application/macbinary&quot;" line="38" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/macbinary"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMacbinary>
	<ApplicationXBinary public="1" get="inline" set="null" expr="cast &quot;application/x-binary&quot;" line="39" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-binary"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBinary>
	<ApplicationXMacbinary public="1" get="inline" set="null" expr="cast &quot;application/x-macbinary&quot;" line="40" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-macbinary"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMacbinary>
	<ImageBmp public="1" get="inline" set="null" expr="cast &quot;image/bmp&quot;" line="41" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/bmp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageBmp>
	<ImageXWindowsBmp public="1" get="inline" set="null" expr="cast &quot;image/x-windows-bmp&quot;" line="42" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-windows-bmp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXWindowsBmp>
	<ApplicationBook public="1" get="inline" set="null" expr="cast &quot;application/book&quot;" line="43" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/book"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationBook>
	<ApplicationXBzip2 public="1" get="inline" set="null" expr="cast &quot;application/x-bzip2&quot;" line="44" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bzip2"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBzip2>
	<ApplicationXBsh public="1" get="inline" set="null" expr="cast &quot;application/x-bsh&quot;" line="45" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bsh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBsh>
	<ApplicationXBzip public="1" get="inline" set="null" expr="cast &quot;application/x-bzip&quot;" line="46" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bzip"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBzip>
	<TextPlain public="1" get="inline" set="null" expr="cast &quot;text/plain&quot;" line="47" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/plain"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextPlain>
	<TextXC public="1" get="inline" set="null" expr="cast &quot;text/x-c&quot;" line="48" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-c"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXC>
	<ApplicationVndMsPkiSeccat public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.seccat&quot;" line="49" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.seccat"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsPkiSeccat>
	<ApplicationClariscad public="1" get="inline" set="null" expr="cast &quot;application/clariscad&quot;" line="50" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/clariscad"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationClariscad>
	<ApplicationXCocoa public="1" get="inline" set="null" expr="cast &quot;application/x-cocoa&quot;" line="51" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cocoa"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCocoa>
	<ApplicationCdf public="1" get="inline" set="null" expr="cast &quot;application/cdf&quot;" line="52" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/cdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationCdf>
	<ApplicationXCdf public="1" get="inline" set="null" expr="cast &quot;application/x-cdf&quot;" line="53" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCdf>
	<ApplicationXNetcdf public="1" get="inline" set="null" expr="cast &quot;application/x-netcdf&quot;" line="54" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-netcdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNetcdf>
	<ApplicationPkixCert public="1" get="inline" set="null" expr="cast &quot;application/pkix-cert&quot;" line="55" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkix-cert"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkixCert>
	<ApplicationXX509CaCert public="1" get="inline" set="null" expr="cast &quot;application/x-x509-ca-cert&quot;" line="56" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-x509-ca-cert"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXX509CaCert>
	<ApplicationXChat public="1" get="inline" set="null" expr="cast &quot;application/x-chat&quot;" line="57" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-chat"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXChat>
	<ApplicationJava public="1" get="inline" set="null" expr="cast &quot;application/java&quot;" line="58" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/java"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationJava>
	<ApplicationJavaByteCode public="1" get="inline" set="null" expr="cast &quot;application/java-byte-code&quot;" line="59" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/java-byte-code"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationJavaByteCode>
	<ApplicationXJavaClass public="1" get="inline" set="null" expr="cast &quot;application/x-java-class&quot;" line="60" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-java-class"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXJavaClass>
	<ApplicationXCpio public="1" get="inline" set="null" expr="cast &quot;application/x-cpio&quot;" line="61" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cpio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCpio>
	<ApplicationMacCompactpro public="1" get="inline" set="null" expr="cast &quot;application/mac-compactpro&quot;" line="62" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mac-compactpro"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMacCompactpro>
	<ApplicationPkcsCrl public="1" get="inline" set="null" expr="cast &quot;application/pkcs-crl&quot;" line="63" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs-crl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcsCrl>
	<ApplicationXCsh public="1" get="inline" set="null" expr="cast &quot;application/x-csh&quot;" line="64" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-csh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCsh>
	<TextCss public="1" get="inline" set="null" expr="cast &quot;text/css&quot;" line="65" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/css"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextCss>
	<ApplicationXDirector public="1" get="inline" set="null" expr="cast &quot;application/x-director&quot;" line="66" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-director"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXDirector>
	<ApplicationXDeepv public="1" get="inline" set="null" expr="cast &quot;application/x-deepv&quot;" line="67" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-deepv"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXDeepv>
	<VideoXDv public="1" get="inline" set="null" expr="cast &quot;video/x-dv&quot;" line="68" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-dv"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXDv>
	<VideoDl public="1" get="inline" set="null" expr="cast &quot;video/dl&quot;" line="69" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/dl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoDl>
	<ApplicationMsword public="1" get="inline" set="null" expr="cast &quot;application/msword&quot;" line="70" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/msword"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMsword>
	<ApplicationCommonground public="1" get="inline" set="null" expr="cast &quot;application/commonground&quot;" line="71" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/commonground"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationCommonground>
	<ApplicationDrafting public="1" get="inline" set="null" expr="cast &quot;application/drafting&quot;" line="72" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/drafting"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationDrafting>
	<ApplicationXDvi public="1" get="inline" set="null" expr="cast &quot;application/x-dvi&quot;" line="73" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-dvi"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXDvi>
	<DrawingXDwf public="1" get="inline" set="null" expr="cast &quot;drawing/x-dwf (old)&quot;" line="74" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "drawing/x-dwf (old)"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DrawingXDwf>
	<ApplicationAcad public="1" get="inline" set="null" expr="cast &quot;application/acad&quot;" line="75" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/acad"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationAcad>
	<ApplicationDxf public="1" get="inline" set="null" expr="cast &quot;application/dxf&quot;" line="76" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/dxf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationDxf>
	<TextXScriptElisp public="1" get="inline" set="null" expr="cast &quot;text/x-script.elisp&quot;" line="77" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.elisp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptElisp>
	<ApplicationXBytecodeElisp public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.elisp (compiled elisp)&quot;" line="78" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bytecode.elisp (compiled elisp)"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBytecodeElisp>
	<ApplicationXEnvoy public="1" get="inline" set="null" expr="cast &quot;application/x-envoy&quot;" line="79" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-envoy"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXEnvoy>
	<ApplicationXEsrehber public="1" get="inline" set="null" expr="cast &quot;application/x-esrehber&quot;" line="80" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-esrehber"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXEsrehber>
	<TextXSetext public="1" get="inline" set="null" expr="cast &quot;text/x-setext&quot;" line="81" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-setext"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXSetext>
	<ApplicationEnvoy public="1" get="inline" set="null" expr="cast &quot;application/envoy&quot;" line="82" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/envoy"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationEnvoy>
	<TextXFortran public="1" get="inline" set="null" expr="cast &quot;text/x-fortran&quot;" line="83" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-fortran"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXFortran>
	<ApplicationVndFdf public="1" get="inline" set="null" expr="cast &quot;application/vnd.fdf&quot;" line="84" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.fdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndFdf>
	<ImageFif public="1" get="inline" set="null" expr="cast &quot;image/fif&quot;" line="85" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/fif"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageFif>
	<VideoFli public="1" get="inline" set="null" expr="cast &quot;video/fli&quot;" line="86" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/fli"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoFli>
	<ImageFlorian public="1" get="inline" set="null" expr="cast &quot;image/florian&quot;" line="87" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/florian"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageFlorian>
	<TextVndFmiFlexstor public="1" get="inline" set="null" expr="cast &quot;text/vnd.fmi.flexstor&quot;" line="88" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.fmi.flexstor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextVndFmiFlexstor>
	<VideoXAtomic3dFeature public="1" get="inline" set="null" expr="cast &quot;video/x-atomic3d-feature&quot;" line="89" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-atomic3d-feature"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXAtomic3dFeature>
	<ImageVndFpx public="1" get="inline" set="null" expr="cast &quot;image/vnd.fpx&quot;" line="90" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.fpx"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndFpx>
	<ApplicationFreeloader public="1" get="inline" set="null" expr="cast &quot;application/freeloader&quot;" line="91" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/freeloader"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationFreeloader>
	<AudioMake public="1" get="inline" set="null" expr="cast &quot;audio/make&quot;" line="92" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/make"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMake>
	<ImageG3fax public="1" get="inline" set="null" expr="cast &quot;image/g3fax&quot;" line="93" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/g3fax"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageG3fax>
	<ImageGif public="1" get="inline" set="null" expr="cast &quot;image/gif&quot;" line="94" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/gif"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageGif>
	<VideoGl public="1" get="inline" set="null" expr="cast &quot;video/gl&quot;" line="95" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/gl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoGl>
	<AudioXGsm public="1" get="inline" set="null" expr="cast &quot;audio/x-gsm&quot;" line="96" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-gsm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXGsm>
	<ApplicationXGsp public="1" get="inline" set="null" expr="cast &quot;application/x-gsp&quot;" line="97" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gsp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXGsp>
	<ApplicationXGss public="1" get="inline" set="null" expr="cast &quot;application/x-gss&quot;" line="98" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gss"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXGss>
	<ApplicationXGtar public="1" get="inline" set="null" expr="cast &quot;application/x-gtar&quot;" line="99" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gtar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXGtar>
	<ApplicationXCompressed public="1" get="inline" set="null" expr="cast &quot;application/x-compressed&quot;" line="100" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-compressed"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCompressed>
	<ApplicationXGzip public="1" get="inline" set="null" expr="cast &quot;application/x-gzip&quot;" line="101" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gzip"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXGzip>
	<ApplicationXHdf public="1" get="inline" set="null" expr="cast &quot;application/x-hdf&quot;" line="102" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-hdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXHdf>
	<ApplicationXHelpfile public="1" get="inline" set="null" expr="cast &quot;application/x-helpfile&quot;" line="103" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-helpfile"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXHelpfile>
	<TextXScript public="1" get="inline" set="null" expr="cast &quot;text/x-script&quot;" line="104" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScript>
	<ApplicationHlp public="1" get="inline" set="null" expr="cast &quot;application/hlp&quot;" line="105" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/hlp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationHlp>
	<ApplicationVndHpHpgl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-hpgl&quot;" line="106" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.hp-hpgl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndHpHpgl>
	<ApplicationBinhex public="1" get="inline" set="null" expr="cast &quot;application/binhex&quot;" line="107" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/binhex"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationBinhex>
	<ApplicationHta public="1" get="inline" set="null" expr="cast &quot;application/hta&quot;" line="108" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/hta"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationHta>
	<TextXComponent public="1" get="inline" set="null" expr="cast &quot;text/x-component&quot;" line="109" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-component"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXComponent>
	<TextWebviewhtml public="1" get="inline" set="null" expr="cast &quot;text/webviewhtml&quot;" line="110" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/webviewhtml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextWebviewhtml>
	<XConferenceXCooltalk public="1" get="inline" set="null" expr="cast &quot;x-conference/x-cooltalk&quot;" line="111" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-conference/x-cooltalk"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XConferenceXCooltalk>
	<ImageXIcon public="1" get="inline" set="null" expr="cast &quot;image/x-icon&quot;" line="112" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-icon"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXIcon>
	<ImageIef public="1" get="inline" set="null" expr="cast &quot;image/ief&quot;" line="113" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/ief"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageIef>
	<ApplicationIges public="1" get="inline" set="null" expr="cast &quot;application/iges&quot;" line="114" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/iges"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationIges>
	<ApplicationXIma public="1" get="inline" set="null" expr="cast &quot;application/x-ima&quot;" line="115" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ima"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXIma>
	<ApplicationXHttpdImap public="1" get="inline" set="null" expr="cast &quot;application/x-httpd-imap&quot;" line="116" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-httpd-imap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXHttpdImap>
	<ApplicationInf public="1" get="inline" set="null" expr="cast &quot;application/inf&quot;" line="117" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/inf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationInf>
	<ApplicationXInternettSignup public="1" get="inline" set="null" expr="cast &quot;application/x-internett-signup&quot;" line="118" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-internett-signup"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXInternettSignup>
	<ApplicationXIp2 public="1" get="inline" set="null" expr="cast &quot;application/x-ip2&quot;" line="119" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ip2"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXIp2>
	<VideoXIsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-isvideo&quot;" line="120" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-isvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXIsvideo>
	<AudioIt public="1" get="inline" set="null" expr="cast &quot;audio/it&quot;" line="121" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/it"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioIt>
	<ApplicationXInventor public="1" get="inline" set="null" expr="cast &quot;application/x-inventor&quot;" line="122" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-inventor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXInventor>
	<IWorldIVrml public="1" get="inline" set="null" expr="cast &quot;i-world/i-vrml&quot;" line="123" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "i-world/i-vrml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IWorldIVrml>
	<ApplicationXLivescreen public="1" get="inline" set="null" expr="cast &quot;application/x-livescreen&quot;" line="124" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-livescreen"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLivescreen>
	<AudioXJam public="1" get="inline" set="null" expr="cast &quot;audio/x-jam&quot;" line="125" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-jam"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXJam>
	<ApplicationXJavaCommerce public="1" get="inline" set="null" expr="cast &quot;application/x-java-commerce&quot;" line="126" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-java-commerce"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXJavaCommerce>
	<ImageJpeg public="1" get="inline" set="null" expr="cast &quot;image/jpeg&quot;" line="127" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/jpeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageJpeg>
	<ImageXJps public="1" get="inline" set="null" expr="cast &quot;image/x-jps&quot;" line="128" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-jps"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXJps>
	<TextJavascript public="1" get="inline" set="null" expr="cast &quot;text/javascript&quot;" line="129" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/javascript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextJavascript>
	<ApplicationJson public="1" get="inline" set="null" expr="cast &quot;application/json&quot;" line="130" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/json"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationJson>
	<ApplicationJavascript public="1" get="inline" set="null" expr="cast &quot;application/javascript&quot;" line="131" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/javascript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationJavascript>
	<ImageJutvision public="1" get="inline" set="null" expr="cast &quot;image/jutvision&quot;" line="132" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/jutvision"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageJutvision>
	<AudioMidi public="1" get="inline" set="null" expr="cast &quot;audio/midi&quot;" line="133" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/midi"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMidi>
	<ApplicationXKsh public="1" get="inline" set="null" expr="cast &quot;application/x-ksh&quot;" line="134" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ksh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXKsh>
	<AudioNspaudio public="1" get="inline" set="null" expr="cast &quot;audio/nspaudio&quot;" line="135" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/nspaudio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioNspaudio>
	<AudioXLiveaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-liveaudio&quot;" line="136" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-liveaudio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXLiveaudio>
	<ApplicationXLatex public="1" get="inline" set="null" expr="cast &quot;application/x-latex&quot;" line="137" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-latex"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLatex>
	<ApplicationXLisp public="1" get="inline" set="null" expr="cast &quot;application/x-lisp&quot;" line="138" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lisp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLisp>
	<TextXLaAsf public="1" get="inline" set="null" expr="cast &quot;text/x-la-asf&quot;" line="139" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-la-asf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXLaAsf>
	<ApplicationLzx public="1" get="inline" set="null" expr="cast &quot;application/lzx&quot;" line="140" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/lzx"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationLzx>
	<VideoMpeg public="1" get="inline" set="null" expr="cast &quot;video/mpeg&quot;" line="141" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/mpeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoMpeg>
	<AudioMpeg public="1" get="inline" set="null" expr="cast &quot;audio/mpeg&quot;" line="142" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mpeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMpeg>
	<AudioXMpequrl public="1" get="inline" set="null" expr="cast &quot;audio/x-mpequrl&quot;" line="143" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-mpequrl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXMpequrl>
	<ApplicationXTroffMan public="1" get="inline" set="null" expr="cast &quot;application/x-troff-man&quot;" line="144" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-man"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroffMan>
	<ApplicationXNavimap public="1" get="inline" set="null" expr="cast &quot;application/x-navimap&quot;" line="145" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navimap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNavimap>
	<ApplicationMbedlet public="1" get="inline" set="null" expr="cast &quot;application/mbedlet&quot;" line="146" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mbedlet"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMbedlet>
	<ApplicationXMagicCapPackage10 public="1" get="inline" set="null" expr="cast &quot;application/x-magic-cap-package-1.0&quot;" line="147" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-magic-cap-package-1.0"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMagicCapPackage10>
	<ApplicationMcad public="1" get="inline" set="null" expr="cast &quot;application/mcad&quot;" line="148" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mcad"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMcad>
	<ImageVasa public="1" get="inline" set="null" expr="cast &quot;image/vasa&quot;" line="149" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vasa"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVasa>
	<ApplicationNetmc public="1" get="inline" set="null" expr="cast &quot;application/netmc&quot;" line="150" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/netmc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationNetmc>
	<ApplicationXTroffMe public="1" get="inline" set="null" expr="cast &quot;application/x-troff-me&quot;" line="151" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-me"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroffMe>
	<MessageRfc822 public="1" get="inline" set="null" expr="cast &quot;message/rfc822&quot;" line="152" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "message/rfc822"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MessageRfc822>
	<ApplicationXMif public="1" get="inline" set="null" expr="cast &quot;application/x-mif&quot;" line="153" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mif"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMif>
	<WwwMime public="1" get="inline" set="null" expr="cast &quot;www/mime&quot;" line="154" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "www/mime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WwwMime>
	<AudioXVndAudioexplosionMjuicemediafile public="1" get="inline" set="null" expr="cast &quot;audio/x-vnd.audioexplosion.mjuicemediafile&quot;" line="155" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-vnd.audioexplosion.mjuicemediafile"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXVndAudioexplosionMjuicemediafile>
	<VideoXMotionJpeg public="1" get="inline" set="null" expr="cast &quot;video/x-motion-jpeg&quot;" line="156" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-motion-jpeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXMotionJpeg>
	<ApplicationBase64 public="1" get="inline" set="null" expr="cast &quot;application/base64&quot;" line="157" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/base64"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationBase64>
	<AudioMod public="1" get="inline" set="null" expr="cast &quot;audio/mod&quot;" line="158" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mod"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMod>
	<VideoQuicktime public="1" get="inline" set="null" expr="cast &quot;video/quicktime&quot;" line="159" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/quicktime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoQuicktime>
	<VideoXSgiMovie public="1" get="inline" set="null" expr="cast &quot;video/x-sgi-movie&quot;" line="160" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-sgi-movie"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXSgiMovie>
	<AudioMpeg3 public="1" get="inline" set="null" expr="cast &quot;audio/mpeg3&quot;" line="161" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mpeg3"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMpeg3>
	<ApplicationXProject public="1" get="inline" set="null" expr="cast &quot;application/x-project&quot;" line="162" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-project"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXProject>
	<ApplicationVndMsProject public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-project&quot;" line="163" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-project"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsProject>
	<ApplicationMarc public="1" get="inline" set="null" expr="cast &quot;application/marc&quot;" line="164" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/marc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMarc>
	<ApplicationXTroffMs public="1" get="inline" set="null" expr="cast &quot;application/x-troff-ms&quot;" line="165" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-ms"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroffMs>
	<ApplicationXVndAudioexplosionMzz public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.audioexplosion.mzz&quot;" line="166" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vnd.audioexplosion.mzz"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXVndAudioexplosionMzz>
	<ImageNaplps public="1" get="inline" set="null" expr="cast &quot;image/naplps&quot;" line="167" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/naplps"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageNaplps>
	<ApplicationVndNokiaConfigurationMessage public="1" get="inline" set="null" expr="cast &quot;application/vnd.nokia.configuration-message&quot;" line="168" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.nokia.configuration-message"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndNokiaConfigurationMessage>
	<ImageXNiff public="1" get="inline" set="null" expr="cast &quot;image/x-niff&quot;" line="169" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-niff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXNiff>
	<ApplicationXMixTransfer public="1" get="inline" set="null" expr="cast &quot;application/x-mix-transfer&quot;" line="170" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mix-transfer"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMixTransfer>
	<ApplicationXConference public="1" get="inline" set="null" expr="cast &quot;application/x-conference&quot;" line="171" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-conference"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXConference>
	<ApplicationXNavidoc public="1" get="inline" set="null" expr="cast &quot;application/x-navidoc&quot;" line="172" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navidoc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNavidoc>
	<ApplicationOda public="1" get="inline" set="null" expr="cast &quot;application/oda&quot;" line="173" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/oda"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationOda>
	<ApplicationXOmc public="1" get="inline" set="null" expr="cast &quot;application/x-omc&quot;" line="174" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXOmc>
	<ApplicationXOmcdatamaker public="1" get="inline" set="null" expr="cast &quot;application/x-omcdatamaker&quot;" line="175" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omcdatamaker"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXOmcdatamaker>
	<ApplicationXOmcregerator public="1" get="inline" set="null" expr="cast &quot;application/x-omcregerator&quot;" line="176" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omcregerator"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXOmcregerator>
	<TextXPascal public="1" get="inline" set="null" expr="cast &quot;text/x-pascal&quot;" line="177" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-pascal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXPascal>
	<ApplicationPkcs10 public="1" get="inline" set="null" expr="cast &quot;application/pkcs10&quot;" line="178" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs10"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcs10>
	<ApplicationPkcs12 public="1" get="inline" set="null" expr="cast &quot;application/pkcs-12&quot;" line="179" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs-12"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcs12>
	<ApplicationXPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-signature&quot;" line="180" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-signature"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPkcs7Signature>
	<ApplicationPkcs7Mime public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-mime&quot;" line="181" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs7-mime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcs7Mime>
	<ApplicationXPkcs7Certreqresp public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certreqresp&quot;" line="182" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-certreqresp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPkcs7Certreqresp>
	<ApplicationPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-signature&quot;" line="183" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs7-signature"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcs7Signature>
	<ApplicationPro_eng public="1" get="inline" set="null" expr="cast &quot;application/pro_eng&quot;" line="184" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pro_eng"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPro_eng>
	<TextPascal public="1" get="inline" set="null" expr="cast &quot;text/pascal&quot;" line="185" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/pascal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextPascal>
	<ImageXPortableBitmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-bitmap&quot;" line="186" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-bitmap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPortableBitmap>
	<ApplicationVndHpPcl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-pcl&quot;" line="187" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.hp-pcl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndHpPcl>
	<ImageXPict public="1" get="inline" set="null" expr="cast &quot;image/x-pict&quot;" line="188" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-pict"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPict>
	<ImageXPcx public="1" get="inline" set="null" expr="cast &quot;image/x-pcx&quot;" line="189" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-pcx"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPcx>
	<ChemicalXPdb public="1" get="inline" set="null" expr="cast &quot;chemical/x-pdb&quot;" line="190" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "chemical/x-pdb"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ChemicalXPdb>
	<ApplicationPdf public="1" get="inline" set="null" expr="cast &quot;application/pdf&quot;" line="191" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPdf>
	<ImageXPortableGraymap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-graymap&quot;" line="192" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-graymap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPortableGraymap>
	<ImagePict public="1" get="inline" set="null" expr="cast &quot;image/pict&quot;" line="193" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/pict"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImagePict>
	<ApplicationXNewtonCompatiblePkg public="1" get="inline" set="null" expr="cast &quot;application/x-newton-compatible-pkg&quot;" line="194" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-newton-compatible-pkg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNewtonCompatiblePkg>
	<ApplicationVndMsPkiPko public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.pko&quot;" line="195" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.pko"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsPkiPko>
	<ApplicationXPixclscript public="1" get="inline" set="null" expr="cast &quot;application/x-pixclscript&quot;" line="196" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pixclscript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPixclscript>
	<ImageXXpixmap public="1" get="inline" set="null" expr="cast &quot;image/x-xpixmap&quot;" line="197" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xpixmap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXXpixmap>
	<ApplicationXPagemaker public="1" get="inline" set="null" expr="cast &quot;application/x-pagemaker&quot;" line="198" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pagemaker"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPagemaker>
	<ImagePng public="1" get="inline" set="null" expr="cast &quot;image/png&quot;" line="199" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/png"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImagePng>
	<ApplicationXPortableAnymap public="1" get="inline" set="null" expr="cast &quot;application/x-portable-anymap&quot;" line="200" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-portable-anymap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPortableAnymap>
	<ApplicationMspowerpoint public="1" get="inline" set="null" expr="cast &quot;application/mspowerpoint&quot;" line="201" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mspowerpoint"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMspowerpoint>
	<ModelXPov public="1" get="inline" set="null" expr="cast &quot;model/x-pov&quot;" line="202" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "model/x-pov"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ModelXPov>
	<ApplicationVndMsPowerpoint public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-powerpoint&quot;" line="203" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-powerpoint"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsPowerpoint>
	<ImageXPortablePixmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-pixmap&quot;" line="204" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-pixmap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPortablePixmap>
	<ApplicationXFreelance public="1" get="inline" set="null" expr="cast &quot;application/x-freelance&quot;" line="205" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-freelance"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXFreelance>
	<PaleovuXPv public="1" get="inline" set="null" expr="cast &quot;paleovu/x-pv&quot;" line="206" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "paleovu/x-pv"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PaleovuXPv>
	<TextXScriptPhyton public="1" get="inline" set="null" expr="cast &quot;text/x-script.phyton&quot;" line="207" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.phyton"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptPhyton>
	<ApplicationXBytecodePython public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.python&quot;" line="208" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bytecode.python"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBytecodePython>
	<AudioVndQcelp public="1" get="inline" set="null" expr="cast &quot;audio/vnd.qcelp&quot;" line="209" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/vnd.qcelp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioVndQcelp>
	<ImageXQuicktime public="1" get="inline" set="null" expr="cast &quot;image/x-quicktime&quot;" line="210" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-quicktime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXQuicktime>
	<VideoXQtc public="1" get="inline" set="null" expr="cast &quot;video/x-qtc&quot;" line="211" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-qtc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXQtc>
	<AudioXPnRealaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio&quot;" line="212" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-pn-realaudio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXPnRealaudio>
	<ApplicationXCmuRaster public="1" get="inline" set="null" expr="cast &quot;application/x-cmu-raster&quot;" line="213" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cmu-raster"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCmuRaster>
	<ImageCmuRaster public="1" get="inline" set="null" expr="cast &quot;image/cmu-raster&quot;" line="214" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/cmu-raster"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageCmuRaster>
	<TextXScriptRexx public="1" get="inline" set="null" expr="cast &quot;text/x-script.rexx&quot;" line="215" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.rexx"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptRexx>
	<ImageVndRnRealflash public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realflash&quot;" line="216" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.rn-realflash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndRnRealflash>
	<ImageXRgb public="1" get="inline" set="null" expr="cast &quot;image/x-rgb&quot;" line="217" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-rgb"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXRgb>
	<ApplicationVndRnRealmedia public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realmedia&quot;" line="218" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.rn-realmedia"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndRnRealmedia>
	<AudioMid public="1" get="inline" set="null" expr="cast &quot;audio/mid&quot;" line="219" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mid"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMid>
	<ApplicationRingingTones public="1" get="inline" set="null" expr="cast &quot;application/ringing-tones&quot;" line="220" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/ringing-tones"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationRingingTones>
	<ApplicationVndRnRealplayer public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realplayer&quot;" line="221" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.rn-realplayer"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndRnRealplayer>
	<ApplicationXTroff public="1" get="inline" set="null" expr="cast &quot;application/x-troff&quot;" line="222" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroff>
	<ImageVndRnRealpix public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realpix&quot;" line="223" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.rn-realpix"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndRnRealpix>
	<AudioXPnRealaudioPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio-plugin&quot;" line="224" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-pn-realaudio-plugin"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXPnRealaudioPlugin>
	<TextRichtext public="1" get="inline" set="null" expr="cast &quot;text/richtext&quot;" line="225" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/richtext"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextRichtext>
	<ApplicationRtf public="1" get="inline" set="null" expr="cast &quot;application/rtf&quot;" line="226" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/rtf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationRtf>
	<VideoVndRnRealvideo public="1" get="inline" set="null" expr="cast &quot;video/vnd.rn-realvideo&quot;" line="227" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vnd.rn-realvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoVndRnRealvideo>
	<AudioS3m public="1" get="inline" set="null" expr="cast &quot;audio/s3m&quot;" line="228" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/s3m"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioS3m>
	<ApplicationXTbook public="1" get="inline" set="null" expr="cast &quot;application/x-tbook&quot;" line="229" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tbook"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTbook>
	<ApplicationXLotusscreencam public="1" get="inline" set="null" expr="cast &quot;application/x-lotusscreencam&quot;" line="230" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lotusscreencam"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLotusscreencam>
	<ApplicationSdp public="1" get="inline" set="null" expr="cast &quot;application/sdp&quot;" line="231" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sdp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSdp>
	<ApplicationSounder public="1" get="inline" set="null" expr="cast &quot;application/sounder&quot;" line="232" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sounder"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSounder>
	<ApplicationSea public="1" get="inline" set="null" expr="cast &quot;application/sea&quot;" line="233" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sea"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSea>
	<ApplicationSet public="1" get="inline" set="null" expr="cast &quot;application/set&quot;" line="234" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/set"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSet>
	<AudioXPsid public="1" get="inline" set="null" expr="cast &quot;audio/x-psid&quot;" line="235" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-psid"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXPsid>
	<ApplicationXSit public="1" get="inline" set="null" expr="cast &quot;application/x-sit&quot;" line="236" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sit"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSit>
	<ApplicationXKoan public="1" get="inline" set="null" expr="cast &quot;application/x-koan&quot;" line="237" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-koan"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXKoan>
	<ApplicationXSeelogo public="1" get="inline" set="null" expr="cast &quot;application/x-seelogo&quot;" line="238" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-seelogo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSeelogo>
	<ApplicationSmil public="1" get="inline" set="null" expr="cast &quot;application/smil&quot;" line="239" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/smil"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSmil>
	<ApplicationSolids public="1" get="inline" set="null" expr="cast &quot;application/solids&quot;" line="240" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/solids"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSolids>
	<ApplicationXPkcs7Certificates public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certificates&quot;" line="241" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-certificates"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPkcs7Certificates>
	<ApplicationFuturesplash public="1" get="inline" set="null" expr="cast &quot;application/futuresplash&quot;" line="242" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/futuresplash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationFuturesplash>
	<ApplicationXSprite public="1" get="inline" set="null" expr="cast &quot;application/x-sprite&quot;" line="243" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sprite"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSprite>
	<ApplicationXWaisSource public="1" get="inline" set="null" expr="cast &quot;application/x-wais-source&quot;" line="244" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-wais-source"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXWaisSource>
	<TextXServerParsedHtml public="1" get="inline" set="null" expr="cast &quot;text/x-server-parsed-html&quot;" line="245" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-server-parsed-html"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXServerParsedHtml>
	<ApplicationStreamingmedia public="1" get="inline" set="null" expr="cast &quot;application/streamingmedia&quot;" line="246" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/streamingmedia"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationStreamingmedia>
	<ApplicationVndMsPkiCertstore public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.certstore&quot;" line="247" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.certstore"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsPkiCertstore>
	<ApplicationStep public="1" get="inline" set="null" expr="cast &quot;application/step&quot;" line="248" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/step"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationStep>
	<ApplicationSla public="1" get="inline" set="null" expr="cast &quot;application/sla&quot;" line="249" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sla"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSla>
	<ApplicationXSv4cpio public="1" get="inline" set="null" expr="cast &quot;application/x-sv4cpio&quot;" line="250" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sv4cpio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSv4cpio>
	<ApplicationXSv4crc public="1" get="inline" set="null" expr="cast &quot;application/x-sv4crc&quot;" line="251" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sv4crc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSv4crc>
	<ImageVndDwg public="1" get="inline" set="null" expr="cast &quot;image/vnd.dwg&quot;" line="252" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.dwg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndDwg>
	<ApplicationXWorld public="1" get="inline" set="null" expr="cast &quot;application/x-world&quot;" line="253" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-world"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXWorld>
	<ApplicationXShockwaveFlash public="1" get="inline" set="null" expr="cast &quot;application/x-shockwave-flash&quot;" line="254" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-shockwave-flash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXShockwaveFlash>
	<TextXSpeech public="1" get="inline" set="null" expr="cast &quot;text/x-speech&quot;" line="255" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-speech"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXSpeech>
	<ApplicationXTar public="1" get="inline" set="null" expr="cast &quot;application/x-tar&quot;" line="256" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTar>
	<ApplicationToolbook public="1" get="inline" set="null" expr="cast &quot;application/toolbook&quot;" line="257" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/toolbook"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationToolbook>
	<ApplicationXTcl public="1" get="inline" set="null" expr="cast &quot;application/x-tcl&quot;" line="258" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tcl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTcl>
	<TextXScriptTcsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.tcsh&quot;" line="259" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.tcsh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptTcsh>
	<ApplicationXTex public="1" get="inline" set="null" expr="cast &quot;application/x-tex&quot;" line="260" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tex"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTex>
	<ApplicationXTexinfo public="1" get="inline" set="null" expr="cast &quot;application/x-texinfo&quot;" line="261" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-texinfo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTexinfo>
	<ApplicationGnutar public="1" get="inline" set="null" expr="cast &quot;application/gnutar&quot;" line="262" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/gnutar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationGnutar>
	<ImageTiff public="1" get="inline" set="null" expr="cast &quot;image/tiff&quot;" line="263" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/tiff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageTiff>
	<AudioTspAudio public="1" get="inline" set="null" expr="cast &quot;audio/tsp-audio&quot;" line="264" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/tsp-audio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioTspAudio>
	<ApplicationDsptype public="1" get="inline" set="null" expr="cast &quot;application/dsptype&quot;" line="265" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/dsptype"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationDsptype>
	<TextTabSeparatedValues public="1" get="inline" set="null" expr="cast &quot;text/tab-separated-values&quot;" line="266" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/tab-separated-values"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextTabSeparatedValues>
	<TextXUil public="1" get="inline" set="null" expr="cast &quot;text/x-uil&quot;" line="267" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-uil"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXUil>
	<TextUriList public="1" get="inline" set="null" expr="cast &quot;text/uri-list&quot;" line="268" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/uri-list"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextUriList>
	<ApplicationIDeas public="1" get="inline" set="null" expr="cast &quot;application/i-deas&quot;" line="269" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/i-deas"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationIDeas>
	<ApplicationXUstar public="1" get="inline" set="null" expr="cast &quot;application/x-ustar&quot;" line="270" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ustar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXUstar>
	<TextXUuencode public="1" get="inline" set="null" expr="cast &quot;text/x-uuencode&quot;" line="271" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-uuencode"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXUuencode>
	<ApplicationXCdlink public="1" get="inline" set="null" expr="cast &quot;application/x-cdlink&quot;" line="272" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cdlink"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCdlink>
	<TextXVcalendar public="1" get="inline" set="null" expr="cast &quot;text/x-vcalendar&quot;" line="273" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-vcalendar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXVcalendar>
	<ApplicationVda public="1" get="inline" set="null" expr="cast &quot;application/vda&quot;" line="274" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vda"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVda>
	<VideoVdo public="1" get="inline" set="null" expr="cast &quot;video/vdo&quot;" line="275" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vdo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoVdo>
	<ApplicationGroupwise public="1" get="inline" set="null" expr="cast &quot;application/groupwise&quot;" line="276" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/groupwise"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationGroupwise>
	<VideoVivo public="1" get="inline" set="null" expr="cast &quot;video/vivo&quot;" line="277" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vivo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoVivo>
	<ApplicationVocaltecMediaDesc public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-desc&quot;" line="278" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vocaltec-media-desc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVocaltecMediaDesc>
	<ApplicationVocaltecMediaFile public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-file&quot;" line="279" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vocaltec-media-file"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVocaltecMediaFile>
	<AudioVoc public="1" get="inline" set="null" expr="cast &quot;audio/voc&quot;" line="280" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/voc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioVoc>
	<VideoVosaic public="1" get="inline" set="null" expr="cast &quot;video/vosaic&quot;" line="281" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vosaic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoVosaic>
	<AudioVoxware public="1" get="inline" set="null" expr="cast &quot;audio/voxware&quot;" line="282" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/voxware"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioVoxware>
	<AudioXTwinvqPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq-plugin&quot;" line="283" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-twinvq-plugin"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXTwinvqPlugin>
	<AudioXTwinvq public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq&quot;" line="284" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-twinvq"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXTwinvq>
	<ApplicationXVrml public="1" get="inline" set="null" expr="cast &quot;application/x-vrml&quot;" line="285" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vrml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXVrml>
	<XWorldXVrt public="1" get="inline" set="null" expr="cast &quot;x-world/x-vrt&quot;" line="286" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-world/x-vrt"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XWorldXVrt>
	<ApplicationXVisio public="1" get="inline" set="null" expr="cast &quot;application/x-visio&quot;" line="287" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-visio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXVisio>
	<ApplicationWordperfect60 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.0&quot;" line="288" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect6.0"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationWordperfect60>
	<ApplicationWordperfect61 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.1&quot;" line="289" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect6.1"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationWordperfect61>
	<AudioWav public="1" get="inline" set="null" expr="cast &quot;audio/wav&quot;" line="290" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/wav"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioWav>
	<ApplicationXQpro public="1" get="inline" set="null" expr="cast &quot;application/x-qpro&quot;" line="291" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-qpro"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXQpro>
	<ImageVndWapWbmp public="1" get="inline" set="null" expr="cast &quot;image/vnd.wap.wbmp&quot;" line="292" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.wap.wbmp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndWapWbmp>
	<ApplicationVndXara public="1" get="inline" set="null" expr="cast &quot;application/vnd.xara&quot;" line="293" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.xara"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndXara>
	<ImageWebp public="1" get="inline" set="null" expr="cast &quot;image/webp&quot;" line="294" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/webp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageWebp>
	<ApplicationX123 public="1" get="inline" set="null" expr="cast &quot;application/x-123&quot;" line="295" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-123"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationX123>
	<WindowsMetafile public="1" get="inline" set="null" expr="cast &quot;windows/metafile&quot;" line="296" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "windows/metafile"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WindowsMetafile>
	<TextVndWapWml public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wml&quot;" line="297" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.wap.wml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextVndWapWml>
	<ApplicationVndWapWmlc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlc&quot;" line="298" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.wap.wmlc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndWapWmlc>
	<TextVndWapWmlscript public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wmlscript&quot;" line="299" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.wap.wmlscript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextVndWapWmlscript>
	<ApplicationVndWapWmlscriptc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlscriptc&quot;" line="300" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.wap.wmlscriptc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndWapWmlscriptc>
	<ApplicationWordperfect public="1" get="inline" set="null" expr="cast &quot;application/wordperfect&quot;" line="301" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationWordperfect>
	<ApplicationXLotus public="1" get="inline" set="null" expr="cast &quot;application/x-lotus&quot;" line="302" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lotus"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLotus>
	<ApplicationMswrite public="1" get="inline" set="null" expr="cast &quot;application/mswrite&quot;" line="303" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mswrite"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMswrite>
	<ModelVrml public="1" get="inline" set="null" expr="cast &quot;model/vrml&quot;" line="304" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "model/vrml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ModelVrml>
	<TextScriplet public="1" get="inline" set="null" expr="cast &quot;text/scriplet&quot;" line="305" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/scriplet"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextScriplet>
	<ApplicationXWintalk public="1" get="inline" set="null" expr="cast &quot;application/x-wintalk&quot;" line="306" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-wintalk"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXWintalk>
	<ImageXXbitmap public="1" get="inline" set="null" expr="cast &quot;image/x-xbitmap&quot;" line="307" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xbitmap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXXbitmap>
	<VideoXAmtDemorun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-demorun&quot;" line="308" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-amt-demorun"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXAmtDemorun>
	<XglDrawing public="1" get="inline" set="null" expr="cast &quot;xgl/drawing&quot;" line="309" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "xgl/drawing"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XglDrawing>
	<ImageVndXiff public="1" get="inline" set="null" expr="cast &quot;image/vnd.xiff&quot;" line="310" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.xiff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndXiff>
	<ApplicationExcel public="1" get="inline" set="null" expr="cast &quot;application/excel&quot;" line="311" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/excel"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationExcel>
	<AudioXm public="1" get="inline" set="null" expr="cast &quot;audio/xm&quot;" line="312" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/xm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXm>
	<ApplicationXml public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="313" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/xml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXml>
	<XglMovie public="1" get="inline" set="null" expr="cast &quot;xgl/movie&quot;" line="314" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "xgl/movie"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XglMovie>
	<ApplicationXVndLsXpix public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.ls-xpix&quot;" line="315" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vnd.ls-xpix"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXVndLsXpix>
	<VideoXAmtShowrun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-showrun&quot;" line="316" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-amt-showrun"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXAmtShowrun>
	<ImageXXwd public="1" get="inline" set="null" expr="cast &quot;image/x-xwd&quot;" line="317" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xwd"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXXwd>
	<ApplicationXCompress public="1" get="inline" set="null" expr="cast &quot;application/x-compress&quot;" line="318" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-compress"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCompress>
	<MultipartXZip public="1" get="inline" set="null" expr="cast &quot;multipart/x-zip&quot;" line="319" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "multipart/x-zip"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MultipartXZip>
	<TextXScriptZsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.zsh&quot;" line="320" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.zsh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptZsh>
	<ImageAvif public="1" get="inline" set="null" expr="cast &quot;image/avif&quot;" line="321" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/avif"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageAvif>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Mime.Mime_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Mime.hx" private="1" module="haxe.io.Mime" extern="1" final="1">
		<XWorldX3dmf public="1" get="inline" set="null" expr="cast &quot;x-world/x-3dmf&quot;" line="8" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-world/x-3dmf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XWorldX3dmf>
		<ApplicationOctetStream public="1" get="inline" set="null" expr="cast &quot;application/octet-stream&quot;" line="9" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/octet-stream"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationOctetStream>
		<ApplicationXAuthorwareBin public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-bin&quot;" line="10" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-bin"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXAuthorwareBin>
		<ApplicationXAuthorwareMap public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-map&quot;" line="11" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-map"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXAuthorwareMap>
		<ApplicationXAuthorwareSeg public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-seg&quot;" line="12" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-seg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXAuthorwareSeg>
		<TextVndAbc public="1" get="inline" set="null" expr="cast &quot;text/vnd.abc&quot;" line="13" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.abc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextVndAbc>
		<TextHtml public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="14" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/html"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextHtml>
		<VideoAnimaflex public="1" get="inline" set="null" expr="cast &quot;video/animaflex&quot;" line="15" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/animaflex"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoAnimaflex>
		<ApplicationPostscript public="1" get="inline" set="null" expr="cast &quot;application/postscript&quot;" line="16" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/postscript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPostscript>
		<AudioAiff public="1" get="inline" set="null" expr="cast &quot;audio/aiff&quot;" line="17" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/aiff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioAiff>
		<AudioXAiff public="1" get="inline" set="null" expr="cast &quot;audio/x-aiff&quot;" line="18" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-aiff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXAiff>
		<ApplicationXAim public="1" get="inline" set="null" expr="cast &quot;application/x-aim&quot;" line="19" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-aim"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXAim>
		<TextXAudiosoftIntra public="1" get="inline" set="null" expr="cast &quot;text/x-audiosoft-intra&quot;" line="20" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-audiosoft-intra"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXAudiosoftIntra>
		<ApplicationXNaviAnimation public="1" get="inline" set="null" expr="cast &quot;application/x-navi-animation&quot;" line="21" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navi-animation"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNaviAnimation>
		<ApplicationXNokia9000CommunicatorAddOnSoftware public="1" get="inline" set="null" expr="cast &quot;application/x-nokia-9000-communicator-add-on-software&quot;" line="22" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-nokia-9000-communicator-add-on-software"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNokia9000CommunicatorAddOnSoftware>
		<ApplicationMime public="1" get="inline" set="null" expr="cast &quot;application/mime&quot;" line="23" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMime>
		<ApplicationArj public="1" get="inline" set="null" expr="cast &quot;application/arj&quot;" line="24" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/arj"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationArj>
		<ImageXJg public="1" get="inline" set="null" expr="cast &quot;image/x-jg&quot;" line="25" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-jg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXJg>
		<VideoXMsAsf public="1" get="inline" set="null" expr="cast &quot;video/x-ms-asf&quot;" line="26" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-ms-asf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXMsAsf>
		<TextXAsm public="1" get="inline" set="null" expr="cast &quot;text/x-asm&quot;" line="27" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-asm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXAsm>
		<TextAsp public="1" get="inline" set="null" expr="cast &quot;text/asp&quot;" line="28" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/asp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextAsp>
		<ApplicationXMplayer2 public="1" get="inline" set="null" expr="cast &quot;application/x-mplayer2&quot;" line="29" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mplayer2"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMplayer2>
		<AudioBasic public="1" get="inline" set="null" expr="cast &quot;audio/basic&quot;" line="30" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/basic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioBasic>
		<ApplicationXTroffMsvideo public="1" get="inline" set="null" expr="cast &quot;application/x-troff-msvideo&quot;" line="31" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-msvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroffMsvideo>
		<VideoAvi public="1" get="inline" set="null" expr="cast &quot;video/avi&quot;" line="32" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/avi"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoAvi>
		<VideoMsvideo public="1" get="inline" set="null" expr="cast &quot;video/msvideo&quot;" line="33" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/msvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoMsvideo>
		<VideoXMsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-msvideo&quot;" line="34" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-msvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXMsvideo>
		<VideoAvsVideo public="1" get="inline" set="null" expr="cast &quot;video/avs-video&quot;" line="35" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/avs-video"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoAvsVideo>
		<ApplicationXBcpio public="1" get="inline" set="null" expr="cast &quot;application/x-bcpio&quot;" line="36" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bcpio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBcpio>
		<ApplicationMacBinary public="1" get="inline" set="null" expr="cast &quot;application/mac-binary&quot;" line="37" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mac-binary"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMacBinary>
		<ApplicationMacbinary public="1" get="inline" set="null" expr="cast &quot;application/macbinary&quot;" line="38" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/macbinary"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMacbinary>
		<ApplicationXBinary public="1" get="inline" set="null" expr="cast &quot;application/x-binary&quot;" line="39" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-binary"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBinary>
		<ApplicationXMacbinary public="1" get="inline" set="null" expr="cast &quot;application/x-macbinary&quot;" line="40" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-macbinary"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMacbinary>
		<ImageBmp public="1" get="inline" set="null" expr="cast &quot;image/bmp&quot;" line="41" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/bmp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageBmp>
		<ImageXWindowsBmp public="1" get="inline" set="null" expr="cast &quot;image/x-windows-bmp&quot;" line="42" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-windows-bmp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXWindowsBmp>
		<ApplicationBook public="1" get="inline" set="null" expr="cast &quot;application/book&quot;" line="43" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/book"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationBook>
		<ApplicationXBzip2 public="1" get="inline" set="null" expr="cast &quot;application/x-bzip2&quot;" line="44" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bzip2"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBzip2>
		<ApplicationXBsh public="1" get="inline" set="null" expr="cast &quot;application/x-bsh&quot;" line="45" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bsh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBsh>
		<ApplicationXBzip public="1" get="inline" set="null" expr="cast &quot;application/x-bzip&quot;" line="46" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bzip"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBzip>
		<TextPlain public="1" get="inline" set="null" expr="cast &quot;text/plain&quot;" line="47" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/plain"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextPlain>
		<TextXC public="1" get="inline" set="null" expr="cast &quot;text/x-c&quot;" line="48" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-c"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXC>
		<ApplicationVndMsPkiSeccat public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.seccat&quot;" line="49" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.seccat"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsPkiSeccat>
		<ApplicationClariscad public="1" get="inline" set="null" expr="cast &quot;application/clariscad&quot;" line="50" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/clariscad"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationClariscad>
		<ApplicationXCocoa public="1" get="inline" set="null" expr="cast &quot;application/x-cocoa&quot;" line="51" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cocoa"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCocoa>
		<ApplicationCdf public="1" get="inline" set="null" expr="cast &quot;application/cdf&quot;" line="52" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/cdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationCdf>
		<ApplicationXCdf public="1" get="inline" set="null" expr="cast &quot;application/x-cdf&quot;" line="53" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCdf>
		<ApplicationXNetcdf public="1" get="inline" set="null" expr="cast &quot;application/x-netcdf&quot;" line="54" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-netcdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNetcdf>
		<ApplicationPkixCert public="1" get="inline" set="null" expr="cast &quot;application/pkix-cert&quot;" line="55" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkix-cert"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkixCert>
		<ApplicationXX509CaCert public="1" get="inline" set="null" expr="cast &quot;application/x-x509-ca-cert&quot;" line="56" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-x509-ca-cert"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXX509CaCert>
		<ApplicationXChat public="1" get="inline" set="null" expr="cast &quot;application/x-chat&quot;" line="57" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-chat"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXChat>
		<ApplicationJava public="1" get="inline" set="null" expr="cast &quot;application/java&quot;" line="58" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/java"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationJava>
		<ApplicationJavaByteCode public="1" get="inline" set="null" expr="cast &quot;application/java-byte-code&quot;" line="59" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/java-byte-code"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationJavaByteCode>
		<ApplicationXJavaClass public="1" get="inline" set="null" expr="cast &quot;application/x-java-class&quot;" line="60" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-java-class"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXJavaClass>
		<ApplicationXCpio public="1" get="inline" set="null" expr="cast &quot;application/x-cpio&quot;" line="61" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cpio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCpio>
		<ApplicationMacCompactpro public="1" get="inline" set="null" expr="cast &quot;application/mac-compactpro&quot;" line="62" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mac-compactpro"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMacCompactpro>
		<ApplicationPkcsCrl public="1" get="inline" set="null" expr="cast &quot;application/pkcs-crl&quot;" line="63" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs-crl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcsCrl>
		<ApplicationXCsh public="1" get="inline" set="null" expr="cast &quot;application/x-csh&quot;" line="64" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-csh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCsh>
		<TextCss public="1" get="inline" set="null" expr="cast &quot;text/css&quot;" line="65" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/css"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextCss>
		<ApplicationXDirector public="1" get="inline" set="null" expr="cast &quot;application/x-director&quot;" line="66" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-director"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXDirector>
		<ApplicationXDeepv public="1" get="inline" set="null" expr="cast &quot;application/x-deepv&quot;" line="67" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-deepv"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXDeepv>
		<VideoXDv public="1" get="inline" set="null" expr="cast &quot;video/x-dv&quot;" line="68" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-dv"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXDv>
		<VideoDl public="1" get="inline" set="null" expr="cast &quot;video/dl&quot;" line="69" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/dl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoDl>
		<ApplicationMsword public="1" get="inline" set="null" expr="cast &quot;application/msword&quot;" line="70" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/msword"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMsword>
		<ApplicationCommonground public="1" get="inline" set="null" expr="cast &quot;application/commonground&quot;" line="71" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/commonground"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationCommonground>
		<ApplicationDrafting public="1" get="inline" set="null" expr="cast &quot;application/drafting&quot;" line="72" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/drafting"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationDrafting>
		<ApplicationXDvi public="1" get="inline" set="null" expr="cast &quot;application/x-dvi&quot;" line="73" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-dvi"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXDvi>
		<DrawingXDwf public="1" get="inline" set="null" expr="cast &quot;drawing/x-dwf (old)&quot;" line="74" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "drawing/x-dwf (old)"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DrawingXDwf>
		<ApplicationAcad public="1" get="inline" set="null" expr="cast &quot;application/acad&quot;" line="75" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/acad"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationAcad>
		<ApplicationDxf public="1" get="inline" set="null" expr="cast &quot;application/dxf&quot;" line="76" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/dxf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationDxf>
		<TextXScriptElisp public="1" get="inline" set="null" expr="cast &quot;text/x-script.elisp&quot;" line="77" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.elisp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptElisp>
		<ApplicationXBytecodeElisp public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.elisp (compiled elisp)&quot;" line="78" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bytecode.elisp (compiled elisp)"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBytecodeElisp>
		<ApplicationXEnvoy public="1" get="inline" set="null" expr="cast &quot;application/x-envoy&quot;" line="79" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-envoy"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXEnvoy>
		<ApplicationXEsrehber public="1" get="inline" set="null" expr="cast &quot;application/x-esrehber&quot;" line="80" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-esrehber"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXEsrehber>
		<TextXSetext public="1" get="inline" set="null" expr="cast &quot;text/x-setext&quot;" line="81" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-setext"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXSetext>
		<ApplicationEnvoy public="1" get="inline" set="null" expr="cast &quot;application/envoy&quot;" line="82" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/envoy"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationEnvoy>
		<TextXFortran public="1" get="inline" set="null" expr="cast &quot;text/x-fortran&quot;" line="83" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-fortran"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXFortran>
		<ApplicationVndFdf public="1" get="inline" set="null" expr="cast &quot;application/vnd.fdf&quot;" line="84" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.fdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndFdf>
		<ImageFif public="1" get="inline" set="null" expr="cast &quot;image/fif&quot;" line="85" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/fif"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageFif>
		<VideoFli public="1" get="inline" set="null" expr="cast &quot;video/fli&quot;" line="86" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/fli"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoFli>
		<ImageFlorian public="1" get="inline" set="null" expr="cast &quot;image/florian&quot;" line="87" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/florian"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageFlorian>
		<TextVndFmiFlexstor public="1" get="inline" set="null" expr="cast &quot;text/vnd.fmi.flexstor&quot;" line="88" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.fmi.flexstor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextVndFmiFlexstor>
		<VideoXAtomic3dFeature public="1" get="inline" set="null" expr="cast &quot;video/x-atomic3d-feature&quot;" line="89" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-atomic3d-feature"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXAtomic3dFeature>
		<ImageVndFpx public="1" get="inline" set="null" expr="cast &quot;image/vnd.fpx&quot;" line="90" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.fpx"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndFpx>
		<ApplicationFreeloader public="1" get="inline" set="null" expr="cast &quot;application/freeloader&quot;" line="91" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/freeloader"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationFreeloader>
		<AudioMake public="1" get="inline" set="null" expr="cast &quot;audio/make&quot;" line="92" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/make"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMake>
		<ImageG3fax public="1" get="inline" set="null" expr="cast &quot;image/g3fax&quot;" line="93" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/g3fax"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageG3fax>
		<ImageGif public="1" get="inline" set="null" expr="cast &quot;image/gif&quot;" line="94" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/gif"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageGif>
		<VideoGl public="1" get="inline" set="null" expr="cast &quot;video/gl&quot;" line="95" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/gl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoGl>
		<AudioXGsm public="1" get="inline" set="null" expr="cast &quot;audio/x-gsm&quot;" line="96" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-gsm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXGsm>
		<ApplicationXGsp public="1" get="inline" set="null" expr="cast &quot;application/x-gsp&quot;" line="97" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gsp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXGsp>
		<ApplicationXGss public="1" get="inline" set="null" expr="cast &quot;application/x-gss&quot;" line="98" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gss"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXGss>
		<ApplicationXGtar public="1" get="inline" set="null" expr="cast &quot;application/x-gtar&quot;" line="99" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gtar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXGtar>
		<ApplicationXCompressed public="1" get="inline" set="null" expr="cast &quot;application/x-compressed&quot;" line="100" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-compressed"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCompressed>
		<ApplicationXGzip public="1" get="inline" set="null" expr="cast &quot;application/x-gzip&quot;" line="101" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gzip"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXGzip>
		<ApplicationXHdf public="1" get="inline" set="null" expr="cast &quot;application/x-hdf&quot;" line="102" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-hdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXHdf>
		<ApplicationXHelpfile public="1" get="inline" set="null" expr="cast &quot;application/x-helpfile&quot;" line="103" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-helpfile"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXHelpfile>
		<TextXScript public="1" get="inline" set="null" expr="cast &quot;text/x-script&quot;" line="104" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScript>
		<ApplicationHlp public="1" get="inline" set="null" expr="cast &quot;application/hlp&quot;" line="105" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/hlp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationHlp>
		<ApplicationVndHpHpgl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-hpgl&quot;" line="106" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.hp-hpgl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndHpHpgl>
		<ApplicationBinhex public="1" get="inline" set="null" expr="cast &quot;application/binhex&quot;" line="107" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/binhex"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationBinhex>
		<ApplicationHta public="1" get="inline" set="null" expr="cast &quot;application/hta&quot;" line="108" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/hta"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationHta>
		<TextXComponent public="1" get="inline" set="null" expr="cast &quot;text/x-component&quot;" line="109" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-component"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXComponent>
		<TextWebviewhtml public="1" get="inline" set="null" expr="cast &quot;text/webviewhtml&quot;" line="110" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/webviewhtml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextWebviewhtml>
		<XConferenceXCooltalk public="1" get="inline" set="null" expr="cast &quot;x-conference/x-cooltalk&quot;" line="111" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-conference/x-cooltalk"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XConferenceXCooltalk>
		<ImageXIcon public="1" get="inline" set="null" expr="cast &quot;image/x-icon&quot;" line="112" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-icon"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXIcon>
		<ImageIef public="1" get="inline" set="null" expr="cast &quot;image/ief&quot;" line="113" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/ief"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageIef>
		<ApplicationIges public="1" get="inline" set="null" expr="cast &quot;application/iges&quot;" line="114" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/iges"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationIges>
		<ApplicationXIma public="1" get="inline" set="null" expr="cast &quot;application/x-ima&quot;" line="115" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ima"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXIma>
		<ApplicationXHttpdImap public="1" get="inline" set="null" expr="cast &quot;application/x-httpd-imap&quot;" line="116" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-httpd-imap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXHttpdImap>
		<ApplicationInf public="1" get="inline" set="null" expr="cast &quot;application/inf&quot;" line="117" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/inf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationInf>
		<ApplicationXInternettSignup public="1" get="inline" set="null" expr="cast &quot;application/x-internett-signup&quot;" line="118" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-internett-signup"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXInternettSignup>
		<ApplicationXIp2 public="1" get="inline" set="null" expr="cast &quot;application/x-ip2&quot;" line="119" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ip2"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXIp2>
		<VideoXIsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-isvideo&quot;" line="120" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-isvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXIsvideo>
		<AudioIt public="1" get="inline" set="null" expr="cast &quot;audio/it&quot;" line="121" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/it"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioIt>
		<ApplicationXInventor public="1" get="inline" set="null" expr="cast &quot;application/x-inventor&quot;" line="122" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-inventor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXInventor>
		<IWorldIVrml public="1" get="inline" set="null" expr="cast &quot;i-world/i-vrml&quot;" line="123" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "i-world/i-vrml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IWorldIVrml>
		<ApplicationXLivescreen public="1" get="inline" set="null" expr="cast &quot;application/x-livescreen&quot;" line="124" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-livescreen"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLivescreen>
		<AudioXJam public="1" get="inline" set="null" expr="cast &quot;audio/x-jam&quot;" line="125" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-jam"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXJam>
		<ApplicationXJavaCommerce public="1" get="inline" set="null" expr="cast &quot;application/x-java-commerce&quot;" line="126" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-java-commerce"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXJavaCommerce>
		<ImageJpeg public="1" get="inline" set="null" expr="cast &quot;image/jpeg&quot;" line="127" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/jpeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageJpeg>
		<ImageXJps public="1" get="inline" set="null" expr="cast &quot;image/x-jps&quot;" line="128" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-jps"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXJps>
		<TextJavascript public="1" get="inline" set="null" expr="cast &quot;text/javascript&quot;" line="129" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/javascript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextJavascript>
		<ApplicationJson public="1" get="inline" set="null" expr="cast &quot;application/json&quot;" line="130" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/json"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationJson>
		<ApplicationJavascript public="1" get="inline" set="null" expr="cast &quot;application/javascript&quot;" line="131" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/javascript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationJavascript>
		<ImageJutvision public="1" get="inline" set="null" expr="cast &quot;image/jutvision&quot;" line="132" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/jutvision"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageJutvision>
		<AudioMidi public="1" get="inline" set="null" expr="cast &quot;audio/midi&quot;" line="133" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/midi"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMidi>
		<ApplicationXKsh public="1" get="inline" set="null" expr="cast &quot;application/x-ksh&quot;" line="134" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ksh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXKsh>
		<AudioNspaudio public="1" get="inline" set="null" expr="cast &quot;audio/nspaudio&quot;" line="135" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/nspaudio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioNspaudio>
		<AudioXLiveaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-liveaudio&quot;" line="136" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-liveaudio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXLiveaudio>
		<ApplicationXLatex public="1" get="inline" set="null" expr="cast &quot;application/x-latex&quot;" line="137" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-latex"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLatex>
		<ApplicationXLisp public="1" get="inline" set="null" expr="cast &quot;application/x-lisp&quot;" line="138" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lisp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLisp>
		<TextXLaAsf public="1" get="inline" set="null" expr="cast &quot;text/x-la-asf&quot;" line="139" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-la-asf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXLaAsf>
		<ApplicationLzx public="1" get="inline" set="null" expr="cast &quot;application/lzx&quot;" line="140" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/lzx"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationLzx>
		<VideoMpeg public="1" get="inline" set="null" expr="cast &quot;video/mpeg&quot;" line="141" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/mpeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoMpeg>
		<AudioMpeg public="1" get="inline" set="null" expr="cast &quot;audio/mpeg&quot;" line="142" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mpeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMpeg>
		<AudioXMpequrl public="1" get="inline" set="null" expr="cast &quot;audio/x-mpequrl&quot;" line="143" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-mpequrl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXMpequrl>
		<ApplicationXTroffMan public="1" get="inline" set="null" expr="cast &quot;application/x-troff-man&quot;" line="144" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-man"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroffMan>
		<ApplicationXNavimap public="1" get="inline" set="null" expr="cast &quot;application/x-navimap&quot;" line="145" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navimap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNavimap>
		<ApplicationMbedlet public="1" get="inline" set="null" expr="cast &quot;application/mbedlet&quot;" line="146" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mbedlet"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMbedlet>
		<ApplicationXMagicCapPackage10 public="1" get="inline" set="null" expr="cast &quot;application/x-magic-cap-package-1.0&quot;" line="147" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-magic-cap-package-1.0"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMagicCapPackage10>
		<ApplicationMcad public="1" get="inline" set="null" expr="cast &quot;application/mcad&quot;" line="148" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mcad"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMcad>
		<ImageVasa public="1" get="inline" set="null" expr="cast &quot;image/vasa&quot;" line="149" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vasa"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVasa>
		<ApplicationNetmc public="1" get="inline" set="null" expr="cast &quot;application/netmc&quot;" line="150" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/netmc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationNetmc>
		<ApplicationXTroffMe public="1" get="inline" set="null" expr="cast &quot;application/x-troff-me&quot;" line="151" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-me"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroffMe>
		<MessageRfc822 public="1" get="inline" set="null" expr="cast &quot;message/rfc822&quot;" line="152" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "message/rfc822"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MessageRfc822>
		<ApplicationXMif public="1" get="inline" set="null" expr="cast &quot;application/x-mif&quot;" line="153" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mif"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMif>
		<WwwMime public="1" get="inline" set="null" expr="cast &quot;www/mime&quot;" line="154" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "www/mime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WwwMime>
		<AudioXVndAudioexplosionMjuicemediafile public="1" get="inline" set="null" expr="cast &quot;audio/x-vnd.audioexplosion.mjuicemediafile&quot;" line="155" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-vnd.audioexplosion.mjuicemediafile"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXVndAudioexplosionMjuicemediafile>
		<VideoXMotionJpeg public="1" get="inline" set="null" expr="cast &quot;video/x-motion-jpeg&quot;" line="156" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-motion-jpeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXMotionJpeg>
		<ApplicationBase64 public="1" get="inline" set="null" expr="cast &quot;application/base64&quot;" line="157" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/base64"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationBase64>
		<AudioMod public="1" get="inline" set="null" expr="cast &quot;audio/mod&quot;" line="158" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mod"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMod>
		<VideoQuicktime public="1" get="inline" set="null" expr="cast &quot;video/quicktime&quot;" line="159" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/quicktime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoQuicktime>
		<VideoXSgiMovie public="1" get="inline" set="null" expr="cast &quot;video/x-sgi-movie&quot;" line="160" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-sgi-movie"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXSgiMovie>
		<AudioMpeg3 public="1" get="inline" set="null" expr="cast &quot;audio/mpeg3&quot;" line="161" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mpeg3"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMpeg3>
		<ApplicationXProject public="1" get="inline" set="null" expr="cast &quot;application/x-project&quot;" line="162" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-project"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXProject>
		<ApplicationVndMsProject public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-project&quot;" line="163" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-project"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsProject>
		<ApplicationMarc public="1" get="inline" set="null" expr="cast &quot;application/marc&quot;" line="164" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/marc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMarc>
		<ApplicationXTroffMs public="1" get="inline" set="null" expr="cast &quot;application/x-troff-ms&quot;" line="165" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-ms"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroffMs>
		<ApplicationXVndAudioexplosionMzz public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.audioexplosion.mzz&quot;" line="166" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vnd.audioexplosion.mzz"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXVndAudioexplosionMzz>
		<ImageNaplps public="1" get="inline" set="null" expr="cast &quot;image/naplps&quot;" line="167" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/naplps"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageNaplps>
		<ApplicationVndNokiaConfigurationMessage public="1" get="inline" set="null" expr="cast &quot;application/vnd.nokia.configuration-message&quot;" line="168" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.nokia.configuration-message"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndNokiaConfigurationMessage>
		<ImageXNiff public="1" get="inline" set="null" expr="cast &quot;image/x-niff&quot;" line="169" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-niff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXNiff>
		<ApplicationXMixTransfer public="1" get="inline" set="null" expr="cast &quot;application/x-mix-transfer&quot;" line="170" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mix-transfer"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMixTransfer>
		<ApplicationXConference public="1" get="inline" set="null" expr="cast &quot;application/x-conference&quot;" line="171" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-conference"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXConference>
		<ApplicationXNavidoc public="1" get="inline" set="null" expr="cast &quot;application/x-navidoc&quot;" line="172" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navidoc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNavidoc>
		<ApplicationOda public="1" get="inline" set="null" expr="cast &quot;application/oda&quot;" line="173" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/oda"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationOda>
		<ApplicationXOmc public="1" get="inline" set="null" expr="cast &quot;application/x-omc&quot;" line="174" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXOmc>
		<ApplicationXOmcdatamaker public="1" get="inline" set="null" expr="cast &quot;application/x-omcdatamaker&quot;" line="175" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omcdatamaker"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXOmcdatamaker>
		<ApplicationXOmcregerator public="1" get="inline" set="null" expr="cast &quot;application/x-omcregerator&quot;" line="176" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omcregerator"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXOmcregerator>
		<TextXPascal public="1" get="inline" set="null" expr="cast &quot;text/x-pascal&quot;" line="177" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-pascal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXPascal>
		<ApplicationPkcs10 public="1" get="inline" set="null" expr="cast &quot;application/pkcs10&quot;" line="178" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs10"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcs10>
		<ApplicationPkcs12 public="1" get="inline" set="null" expr="cast &quot;application/pkcs-12&quot;" line="179" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs-12"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcs12>
		<ApplicationXPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-signature&quot;" line="180" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-signature"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPkcs7Signature>
		<ApplicationPkcs7Mime public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-mime&quot;" line="181" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs7-mime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcs7Mime>
		<ApplicationXPkcs7Certreqresp public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certreqresp&quot;" line="182" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-certreqresp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPkcs7Certreqresp>
		<ApplicationPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-signature&quot;" line="183" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs7-signature"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcs7Signature>
		<ApplicationPro_eng public="1" get="inline" set="null" expr="cast &quot;application/pro_eng&quot;" line="184" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pro_eng"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPro_eng>
		<TextPascal public="1" get="inline" set="null" expr="cast &quot;text/pascal&quot;" line="185" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/pascal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextPascal>
		<ImageXPortableBitmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-bitmap&quot;" line="186" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-bitmap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPortableBitmap>
		<ApplicationVndHpPcl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-pcl&quot;" line="187" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.hp-pcl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndHpPcl>
		<ImageXPict public="1" get="inline" set="null" expr="cast &quot;image/x-pict&quot;" line="188" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-pict"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPict>
		<ImageXPcx public="1" get="inline" set="null" expr="cast &quot;image/x-pcx&quot;" line="189" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-pcx"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPcx>
		<ChemicalXPdb public="1" get="inline" set="null" expr="cast &quot;chemical/x-pdb&quot;" line="190" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "chemical/x-pdb"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ChemicalXPdb>
		<ApplicationPdf public="1" get="inline" set="null" expr="cast &quot;application/pdf&quot;" line="191" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPdf>
		<ImageXPortableGraymap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-graymap&quot;" line="192" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-graymap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPortableGraymap>
		<ImagePict public="1" get="inline" set="null" expr="cast &quot;image/pict&quot;" line="193" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/pict"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImagePict>
		<ApplicationXNewtonCompatiblePkg public="1" get="inline" set="null" expr="cast &quot;application/x-newton-compatible-pkg&quot;" line="194" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-newton-compatible-pkg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNewtonCompatiblePkg>
		<ApplicationVndMsPkiPko public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.pko&quot;" line="195" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.pko"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsPkiPko>
		<ApplicationXPixclscript public="1" get="inline" set="null" expr="cast &quot;application/x-pixclscript&quot;" line="196" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pixclscript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPixclscript>
		<ImageXXpixmap public="1" get="inline" set="null" expr="cast &quot;image/x-xpixmap&quot;" line="197" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xpixmap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXXpixmap>
		<ApplicationXPagemaker public="1" get="inline" set="null" expr="cast &quot;application/x-pagemaker&quot;" line="198" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pagemaker"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPagemaker>
		<ImagePng public="1" get="inline" set="null" expr="cast &quot;image/png&quot;" line="199" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/png"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImagePng>
		<ApplicationXPortableAnymap public="1" get="inline" set="null" expr="cast &quot;application/x-portable-anymap&quot;" line="200" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-portable-anymap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPortableAnymap>
		<ApplicationMspowerpoint public="1" get="inline" set="null" expr="cast &quot;application/mspowerpoint&quot;" line="201" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mspowerpoint"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMspowerpoint>
		<ModelXPov public="1" get="inline" set="null" expr="cast &quot;model/x-pov&quot;" line="202" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "model/x-pov"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ModelXPov>
		<ApplicationVndMsPowerpoint public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-powerpoint&quot;" line="203" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-powerpoint"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsPowerpoint>
		<ImageXPortablePixmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-pixmap&quot;" line="204" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-pixmap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPortablePixmap>
		<ApplicationXFreelance public="1" get="inline" set="null" expr="cast &quot;application/x-freelance&quot;" line="205" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-freelance"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXFreelance>
		<PaleovuXPv public="1" get="inline" set="null" expr="cast &quot;paleovu/x-pv&quot;" line="206" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "paleovu/x-pv"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PaleovuXPv>
		<TextXScriptPhyton public="1" get="inline" set="null" expr="cast &quot;text/x-script.phyton&quot;" line="207" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.phyton"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptPhyton>
		<ApplicationXBytecodePython public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.python&quot;" line="208" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bytecode.python"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBytecodePython>
		<AudioVndQcelp public="1" get="inline" set="null" expr="cast &quot;audio/vnd.qcelp&quot;" line="209" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/vnd.qcelp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioVndQcelp>
		<ImageXQuicktime public="1" get="inline" set="null" expr="cast &quot;image/x-quicktime&quot;" line="210" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-quicktime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXQuicktime>
		<VideoXQtc public="1" get="inline" set="null" expr="cast &quot;video/x-qtc&quot;" line="211" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-qtc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXQtc>
		<AudioXPnRealaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio&quot;" line="212" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-pn-realaudio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXPnRealaudio>
		<ApplicationXCmuRaster public="1" get="inline" set="null" expr="cast &quot;application/x-cmu-raster&quot;" line="213" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cmu-raster"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCmuRaster>
		<ImageCmuRaster public="1" get="inline" set="null" expr="cast &quot;image/cmu-raster&quot;" line="214" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/cmu-raster"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageCmuRaster>
		<TextXScriptRexx public="1" get="inline" set="null" expr="cast &quot;text/x-script.rexx&quot;" line="215" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.rexx"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptRexx>
		<ImageVndRnRealflash public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realflash&quot;" line="216" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.rn-realflash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndRnRealflash>
		<ImageXRgb public="1" get="inline" set="null" expr="cast &quot;image/x-rgb&quot;" line="217" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-rgb"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXRgb>
		<ApplicationVndRnRealmedia public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realmedia&quot;" line="218" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.rn-realmedia"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndRnRealmedia>
		<AudioMid public="1" get="inline" set="null" expr="cast &quot;audio/mid&quot;" line="219" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mid"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMid>
		<ApplicationRingingTones public="1" get="inline" set="null" expr="cast &quot;application/ringing-tones&quot;" line="220" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/ringing-tones"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationRingingTones>
		<ApplicationVndRnRealplayer public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realplayer&quot;" line="221" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.rn-realplayer"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndRnRealplayer>
		<ApplicationXTroff public="1" get="inline" set="null" expr="cast &quot;application/x-troff&quot;" line="222" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroff>
		<ImageVndRnRealpix public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realpix&quot;" line="223" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.rn-realpix"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndRnRealpix>
		<AudioXPnRealaudioPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio-plugin&quot;" line="224" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-pn-realaudio-plugin"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXPnRealaudioPlugin>
		<TextRichtext public="1" get="inline" set="null" expr="cast &quot;text/richtext&quot;" line="225" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/richtext"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextRichtext>
		<ApplicationRtf public="1" get="inline" set="null" expr="cast &quot;application/rtf&quot;" line="226" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/rtf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationRtf>
		<VideoVndRnRealvideo public="1" get="inline" set="null" expr="cast &quot;video/vnd.rn-realvideo&quot;" line="227" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vnd.rn-realvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoVndRnRealvideo>
		<AudioS3m public="1" get="inline" set="null" expr="cast &quot;audio/s3m&quot;" line="228" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/s3m"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioS3m>
		<ApplicationXTbook public="1" get="inline" set="null" expr="cast &quot;application/x-tbook&quot;" line="229" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tbook"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTbook>
		<ApplicationXLotusscreencam public="1" get="inline" set="null" expr="cast &quot;application/x-lotusscreencam&quot;" line="230" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lotusscreencam"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLotusscreencam>
		<ApplicationSdp public="1" get="inline" set="null" expr="cast &quot;application/sdp&quot;" line="231" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sdp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSdp>
		<ApplicationSounder public="1" get="inline" set="null" expr="cast &quot;application/sounder&quot;" line="232" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sounder"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSounder>
		<ApplicationSea public="1" get="inline" set="null" expr="cast &quot;application/sea&quot;" line="233" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sea"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSea>
		<ApplicationSet public="1" get="inline" set="null" expr="cast &quot;application/set&quot;" line="234" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/set"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSet>
		<AudioXPsid public="1" get="inline" set="null" expr="cast &quot;audio/x-psid&quot;" line="235" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-psid"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXPsid>
		<ApplicationXSit public="1" get="inline" set="null" expr="cast &quot;application/x-sit&quot;" line="236" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sit"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSit>
		<ApplicationXKoan public="1" get="inline" set="null" expr="cast &quot;application/x-koan&quot;" line="237" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-koan"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXKoan>
		<ApplicationXSeelogo public="1" get="inline" set="null" expr="cast &quot;application/x-seelogo&quot;" line="238" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-seelogo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSeelogo>
		<ApplicationSmil public="1" get="inline" set="null" expr="cast &quot;application/smil&quot;" line="239" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/smil"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSmil>
		<ApplicationSolids public="1" get="inline" set="null" expr="cast &quot;application/solids&quot;" line="240" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/solids"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSolids>
		<ApplicationXPkcs7Certificates public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certificates&quot;" line="241" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-certificates"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPkcs7Certificates>
		<ApplicationFuturesplash public="1" get="inline" set="null" expr="cast &quot;application/futuresplash&quot;" line="242" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/futuresplash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationFuturesplash>
		<ApplicationXSprite public="1" get="inline" set="null" expr="cast &quot;application/x-sprite&quot;" line="243" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sprite"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSprite>
		<ApplicationXWaisSource public="1" get="inline" set="null" expr="cast &quot;application/x-wais-source&quot;" line="244" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-wais-source"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXWaisSource>
		<TextXServerParsedHtml public="1" get="inline" set="null" expr="cast &quot;text/x-server-parsed-html&quot;" line="245" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-server-parsed-html"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXServerParsedHtml>
		<ApplicationStreamingmedia public="1" get="inline" set="null" expr="cast &quot;application/streamingmedia&quot;" line="246" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/streamingmedia"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationStreamingmedia>
		<ApplicationVndMsPkiCertstore public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.certstore&quot;" line="247" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.certstore"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsPkiCertstore>
		<ApplicationStep public="1" get="inline" set="null" expr="cast &quot;application/step&quot;" line="248" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/step"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationStep>
		<ApplicationSla public="1" get="inline" set="null" expr="cast &quot;application/sla&quot;" line="249" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sla"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSla>
		<ApplicationXSv4cpio public="1" get="inline" set="null" expr="cast &quot;application/x-sv4cpio&quot;" line="250" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sv4cpio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSv4cpio>
		<ApplicationXSv4crc public="1" get="inline" set="null" expr="cast &quot;application/x-sv4crc&quot;" line="251" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sv4crc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSv4crc>
		<ImageVndDwg public="1" get="inline" set="null" expr="cast &quot;image/vnd.dwg&quot;" line="252" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.dwg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndDwg>
		<ApplicationXWorld public="1" get="inline" set="null" expr="cast &quot;application/x-world&quot;" line="253" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-world"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXWorld>
		<ApplicationXShockwaveFlash public="1" get="inline" set="null" expr="cast &quot;application/x-shockwave-flash&quot;" line="254" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-shockwave-flash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXShockwaveFlash>
		<TextXSpeech public="1" get="inline" set="null" expr="cast &quot;text/x-speech&quot;" line="255" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-speech"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXSpeech>
		<ApplicationXTar public="1" get="inline" set="null" expr="cast &quot;application/x-tar&quot;" line="256" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTar>
		<ApplicationToolbook public="1" get="inline" set="null" expr="cast &quot;application/toolbook&quot;" line="257" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/toolbook"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationToolbook>
		<ApplicationXTcl public="1" get="inline" set="null" expr="cast &quot;application/x-tcl&quot;" line="258" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tcl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTcl>
		<TextXScriptTcsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.tcsh&quot;" line="259" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.tcsh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptTcsh>
		<ApplicationXTex public="1" get="inline" set="null" expr="cast &quot;application/x-tex&quot;" line="260" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tex"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTex>
		<ApplicationXTexinfo public="1" get="inline" set="null" expr="cast &quot;application/x-texinfo&quot;" line="261" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-texinfo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTexinfo>
		<ApplicationGnutar public="1" get="inline" set="null" expr="cast &quot;application/gnutar&quot;" line="262" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/gnutar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationGnutar>
		<ImageTiff public="1" get="inline" set="null" expr="cast &quot;image/tiff&quot;" line="263" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/tiff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageTiff>
		<AudioTspAudio public="1" get="inline" set="null" expr="cast &quot;audio/tsp-audio&quot;" line="264" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/tsp-audio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioTspAudio>
		<ApplicationDsptype public="1" get="inline" set="null" expr="cast &quot;application/dsptype&quot;" line="265" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/dsptype"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationDsptype>
		<TextTabSeparatedValues public="1" get="inline" set="null" expr="cast &quot;text/tab-separated-values&quot;" line="266" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/tab-separated-values"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextTabSeparatedValues>
		<TextXUil public="1" get="inline" set="null" expr="cast &quot;text/x-uil&quot;" line="267" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-uil"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXUil>
		<TextUriList public="1" get="inline" set="null" expr="cast &quot;text/uri-list&quot;" line="268" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/uri-list"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextUriList>
		<ApplicationIDeas public="1" get="inline" set="null" expr="cast &quot;application/i-deas&quot;" line="269" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/i-deas"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationIDeas>
		<ApplicationXUstar public="1" get="inline" set="null" expr="cast &quot;application/x-ustar&quot;" line="270" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ustar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXUstar>
		<TextXUuencode public="1" get="inline" set="null" expr="cast &quot;text/x-uuencode&quot;" line="271" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-uuencode"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXUuencode>
		<ApplicationXCdlink public="1" get="inline" set="null" expr="cast &quot;application/x-cdlink&quot;" line="272" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cdlink"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCdlink>
		<TextXVcalendar public="1" get="inline" set="null" expr="cast &quot;text/x-vcalendar&quot;" line="273" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-vcalendar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXVcalendar>
		<ApplicationVda public="1" get="inline" set="null" expr="cast &quot;application/vda&quot;" line="274" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vda"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVda>
		<VideoVdo public="1" get="inline" set="null" expr="cast &quot;video/vdo&quot;" line="275" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vdo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoVdo>
		<ApplicationGroupwise public="1" get="inline" set="null" expr="cast &quot;application/groupwise&quot;" line="276" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/groupwise"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationGroupwise>
		<VideoVivo public="1" get="inline" set="null" expr="cast &quot;video/vivo&quot;" line="277" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vivo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoVivo>
		<ApplicationVocaltecMediaDesc public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-desc&quot;" line="278" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vocaltec-media-desc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVocaltecMediaDesc>
		<ApplicationVocaltecMediaFile public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-file&quot;" line="279" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vocaltec-media-file"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVocaltecMediaFile>
		<AudioVoc public="1" get="inline" set="null" expr="cast &quot;audio/voc&quot;" line="280" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/voc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioVoc>
		<VideoVosaic public="1" get="inline" set="null" expr="cast &quot;video/vosaic&quot;" line="281" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vosaic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoVosaic>
		<AudioVoxware public="1" get="inline" set="null" expr="cast &quot;audio/voxware&quot;" line="282" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/voxware"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioVoxware>
		<AudioXTwinvqPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq-plugin&quot;" line="283" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-twinvq-plugin"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXTwinvqPlugin>
		<AudioXTwinvq public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq&quot;" line="284" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-twinvq"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXTwinvq>
		<ApplicationXVrml public="1" get="inline" set="null" expr="cast &quot;application/x-vrml&quot;" line="285" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vrml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXVrml>
		<XWorldXVrt public="1" get="inline" set="null" expr="cast &quot;x-world/x-vrt&quot;" line="286" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-world/x-vrt"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XWorldXVrt>
		<ApplicationXVisio public="1" get="inline" set="null" expr="cast &quot;application/x-visio&quot;" line="287" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-visio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXVisio>
		<ApplicationWordperfect60 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.0&quot;" line="288" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect6.0"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationWordperfect60>
		<ApplicationWordperfect61 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.1&quot;" line="289" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect6.1"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationWordperfect61>
		<AudioWav public="1" get="inline" set="null" expr="cast &quot;audio/wav&quot;" line="290" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/wav"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioWav>
		<ApplicationXQpro public="1" get="inline" set="null" expr="cast &quot;application/x-qpro&quot;" line="291" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-qpro"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXQpro>
		<ImageVndWapWbmp public="1" get="inline" set="null" expr="cast &quot;image/vnd.wap.wbmp&quot;" line="292" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.wap.wbmp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndWapWbmp>
		<ApplicationVndXara public="1" get="inline" set="null" expr="cast &quot;application/vnd.xara&quot;" line="293" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.xara"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndXara>
		<ImageWebp public="1" get="inline" set="null" expr="cast &quot;image/webp&quot;" line="294" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/webp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageWebp>
		<ApplicationX123 public="1" get="inline" set="null" expr="cast &quot;application/x-123&quot;" line="295" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-123"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationX123>
		<WindowsMetafile public="1" get="inline" set="null" expr="cast &quot;windows/metafile&quot;" line="296" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "windows/metafile"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WindowsMetafile>
		<TextVndWapWml public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wml&quot;" line="297" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.wap.wml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextVndWapWml>
		<ApplicationVndWapWmlc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlc&quot;" line="298" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.wap.wmlc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndWapWmlc>
		<TextVndWapWmlscript public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wmlscript&quot;" line="299" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.wap.wmlscript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextVndWapWmlscript>
		<ApplicationVndWapWmlscriptc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlscriptc&quot;" line="300" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.wap.wmlscriptc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndWapWmlscriptc>
		<ApplicationWordperfect public="1" get="inline" set="null" expr="cast &quot;application/wordperfect&quot;" line="301" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationWordperfect>
		<ApplicationXLotus public="1" get="inline" set="null" expr="cast &quot;application/x-lotus&quot;" line="302" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lotus"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLotus>
		<ApplicationMswrite public="1" get="inline" set="null" expr="cast &quot;application/mswrite&quot;" line="303" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mswrite"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMswrite>
		<ModelVrml public="1" get="inline" set="null" expr="cast &quot;model/vrml&quot;" line="304" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "model/vrml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ModelVrml>
		<TextScriplet public="1" get="inline" set="null" expr="cast &quot;text/scriplet&quot;" line="305" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/scriplet"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextScriplet>
		<ApplicationXWintalk public="1" get="inline" set="null" expr="cast &quot;application/x-wintalk&quot;" line="306" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-wintalk"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXWintalk>
		<ImageXXbitmap public="1" get="inline" set="null" expr="cast &quot;image/x-xbitmap&quot;" line="307" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xbitmap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXXbitmap>
		<VideoXAmtDemorun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-demorun&quot;" line="308" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-amt-demorun"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXAmtDemorun>
		<XglDrawing public="1" get="inline" set="null" expr="cast &quot;xgl/drawing&quot;" line="309" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "xgl/drawing"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XglDrawing>
		<ImageVndXiff public="1" get="inline" set="null" expr="cast &quot;image/vnd.xiff&quot;" line="310" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.xiff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndXiff>
		<ApplicationExcel public="1" get="inline" set="null" expr="cast &quot;application/excel&quot;" line="311" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/excel"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationExcel>
		<AudioXm public="1" get="inline" set="null" expr="cast &quot;audio/xm&quot;" line="312" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/xm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXm>
		<ApplicationXml public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="313" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/xml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXml>
		<XglMovie public="1" get="inline" set="null" expr="cast &quot;xgl/movie&quot;" line="314" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "xgl/movie"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XglMovie>
		<ApplicationXVndLsXpix public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.ls-xpix&quot;" line="315" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vnd.ls-xpix"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXVndLsXpix>
		<VideoXAmtShowrun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-showrun&quot;" line="316" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-amt-showrun"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXAmtShowrun>
		<ImageXXwd public="1" get="inline" set="null" expr="cast &quot;image/x-xwd&quot;" line="317" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xwd"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXXwd>
		<ApplicationXCompress public="1" get="inline" set="null" expr="cast &quot;application/x-compress&quot;" line="318" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-compress"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCompress>
		<MultipartXZip public="1" get="inline" set="null" expr="cast &quot;multipart/x-zip&quot;" line="319" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "multipart/x-zip"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MultipartXZip>
		<TextXScriptZsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.zsh&quot;" line="320" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.zsh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptZsh>
		<ImageAvif public="1" get="inline" set="null" expr="cast &quot;image/avif&quot;" line="321" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/avif"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageAvif>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.io.Path" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Path.hx">
		<withoutExtension public="1" set="method" line="123" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the file extension.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutExtension>
		<withoutDirectory public="1" set="method" line="134" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the directory.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutDirectory>
		<directory public="1" set="method" line="147" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of `path`.

		If the directory is `null`, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</directory>
		<extension public="1" set="method" line="161" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If `path` has no extension, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</extension>
		<withExtension public="1" set="method" line="175" static="1">
			<f a="path:ext">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `path` where the extension is `ext`.

		If `path` has no extension, `ext` is added as extension.

		If `path` or `ext` are `null`, the result is unspecified.</haxe_doc>
		</withExtension>
		<join public="1" set="method" line="189" static="1">
			<f a="paths">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all paths in `paths` together.

		If `paths` is empty, the empty String `""` is returned. Otherwise the
		paths are joined with a slash between them.

		If `paths` is `null`, the result is unspecified.</haxe_doc>
		</join>
		<normalize public="1" set="method" line="210" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Normalize a given `path` (e.g. turn `'/usr/local/../lib'` into `'/usr/lib'`).

		Also replaces backslashes `\` with slashes `/` and afterwards turns
		multiple slashes into a single one.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</normalize>
		<addTrailingSlash public="1" set="method" line="271" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		`""`.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="299" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<isAbsolute public="1" set="method" line="314" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the path is an absolute path, and `false` otherwise.</haxe_doc>
		</isAbsolute>
		<unescape set="method" line="324" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></unescape>
		<escape set="method" line="329" static="1">
			<f a="path:?allowSlashes" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ allowSlashes : false }</e></m></meta>
		</escape>
		<dir public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is `null`.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for `".htaccess"` or `"/dir/"`, the value
		is the empty String `""`.</haxe_doc>
		</file>
		<ext public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is `null`.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>`true` if the last directory separator is a backslash, `false` otherwise.</haxe_doc>
		</backslash>
		<toString public="1" set="method" line="114">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` path.

		If `this.backslash` is `true`, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		`this.dir` and `this.file`.

		If `this.directory` or `this.extension` is `null`, their representation
		is the empty String `""`.</haxe_doc>
		</toString>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Path` instance by parsing `path`.

		Path information can be retrieved by accessing the `dir`, `file` and `ext`
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- `directory1/directory2/filename.extension`
	- `directory1\directory2\filename.extension`</haxe_doc>
	</class>
	<abstract path="haxe.io.Scheme" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Scheme.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>A scheme consists of a sequence of characters beginning with a letter and followed
	by any combination of letters, digits, plus (`+`, period (`.`), or hyphen (`-`).

	Although schemes are case-insensitive, the canonical form is lowercase
	and documents that specify schemes must do so with lowercase letters.
	It is followed by a colon (`:`).</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.io._Scheme.Scheme_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Scheme.hx" private="1" module="haxe.io.Scheme" extern="1" final="1">
	<Http public="1" get="inline" set="null" expr="cast &quot;http&quot;" line="12" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "http"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Http>
	<Https public="1" get="inline" set="null" expr="cast &quot;https&quot;" line="13" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "https"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Https>
	<Ftp public="1" get="inline" set="null" expr="cast &quot;ftp&quot;" line="14" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "ftp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Ftp>
	<MailTo public="1" get="inline" set="null" expr="cast &quot;mailto&quot;" line="15" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "mailto"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MailTo>
	<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="16" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "file"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</File>
	<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="17" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "data"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Data>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Scheme.Scheme_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Scheme.hx" private="1" module="haxe.io.Scheme" extern="1" final="1">
		<Http public="1" get="inline" set="null" expr="cast &quot;http&quot;" line="12" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "http"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Http>
		<Https public="1" get="inline" set="null" expr="cast &quot;https&quot;" line="13" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "https"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Https>
		<Ftp public="1" get="inline" set="null" expr="cast &quot;ftp&quot;" line="14" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "ftp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Ftp>
		<MailTo public="1" get="inline" set="null" expr="cast &quot;mailto&quot;" line="15" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "mailto"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MailTo>
		<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="16" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "file"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</File>
		<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="17" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "data"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Data>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.io.StringInput" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.io.UInt16ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt16Array.hx" module="haxe.io.UInt16Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt16Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt16Array.hx">
		<this><t path="haxe.io.UInt16ArrayData"/></this>
		<impl><class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt16Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt16Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<t path="haxe.io.UInt16ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt16Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt16Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<t path="haxe.io.UInt16ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.UInt32ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt32Array.hx" module="haxe.io.UInt32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt32Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt32Array.hx">
		<this><t path="haxe.io.UInt32ArrayData"/></this>
		<impl><class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt32Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt32Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<t path="haxe.io.UInt32ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="UInt"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt32Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt32Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<t path="haxe.io.UInt32ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="UInt"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<t path="haxe.io.UInt8ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<t path="haxe.io.UInt8ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<class path="haxe.iterators.ArrayKeyValueIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/ArrayKeyValueIterator.hx">
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<array><c path="Array"><c path="haxe.iterators.ArrayKeyValueIterator.T"/></c></array>
		<hasNext public="1" get="inline" set="null" line="34"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="38"><f a=""><a>
	<value><c path="haxe.iterators.ArrayKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="30"><f a="array">
	<c path="Array"><c path="haxe.iterators.ArrayKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":ifFeature">
	<e>"anon_read.keyValueIterator"</e>
	<e>"dynamic_read.keyValueIterator"</e>
</m></meta>
	</class>
	<class path="haxe.iterators.DynamicAccessIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/DynamicAccessIterator.hx">
		<access final="1"><x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessIterator.T"/></x></access>
		<keys final="1"><c path="Array"><c path="String"/></c></keys>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="42">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="49">
			<f a=""><c path="haxe.iterators.DynamicAccessIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="33"><f a="access">
	<x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessIterator.T"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>This iterator can be used to iterate over the values of `haxe.DynamicAccess`.</haxe_doc>
	</class>
	<class path="haxe.iterators.DynamicAccessKeyValueIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/DynamicAccessKeyValueIterator.hx">
		<access final="1"><x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></x></access>
		<keys final="1"><c path="Array"><c path="String"/></c></keys>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="42">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="49">
			<f a=""><a>
	<value><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></value>
	<key><c path="String"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="33"><f a="access">
	<x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>This Key/Value iterator can be used to iterate over `haxe.DynamicAccess`.</haxe_doc>
	</class>
	<class path="haxe.iterators.HashMapKeyValueIterator" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/iterators/HashMapKeyValueIterator.hx">
		<map final="1"><x path="haxe.ds.HashMap">
	<c path="haxe.iterators.HashMapKeyValueIterator.K"/>
	<c path="haxe.iterators.HashMapKeyValueIterator.V"/>
</x></map>
		<keys final="1"><t path="Iterator"><c path="haxe.iterators.HashMapKeyValueIterator.K"/></t></keys>
		<hasNext public="1" get="inline" set="null" line="17">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="24">
			<f a=""><a>
	<value><c path="haxe.iterators.HashMapKeyValueIterator.V"/></value>
	<key><c path="haxe.iterators.HashMapKeyValueIterator.K"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="9"><f a="map">
	<x path="haxe.ds.HashMap">
		<c path="haxe.iterators.HashMapKeyValueIterator.K"/>
		<c path="haxe.iterators.HashMapKeyValueIterator.V"/>
	</x>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.iterators.MapKeyValueIterator" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/iterators/MapKeyValueIterator.hx">
		<map><c path="haxe.IMap">
	<c path="haxe.iterators.MapKeyValueIterator.K"/>
	<c path="haxe.iterators.MapKeyValueIterator.V"/>
</c></map>
		<keys><t path="Iterator"><c path="haxe.iterators.MapKeyValueIterator.K"/></t></keys>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="50">
			<f a=""><a>
	<value><c path="haxe.iterators.MapKeyValueIterator.V"/></value>
	<key><c path="haxe.iterators.MapKeyValueIterator.K"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35"><f a="map">
	<c path="haxe.IMap">
		<c path="haxe.iterators.MapKeyValueIterator.K"/>
		<c path="haxe.iterators.MapKeyValueIterator.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<haxe_doc>This Key/Value iterator can be used to iterate across maps.</haxe_doc>
		<meta><m n=":ifFeature">
	<e>"anon_read.keyValueIterator"</e>
	<e>"dynamic_read.keyValueIterator"</e>
</m></meta>
	</class>
	<class path="haxe.iterators.RestIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/RestIterator.hx">
		<args final="1"><x path="haxe.Rest"><c path="haxe.iterators.RestIterator.T"/></x></args>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="12"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="16"><f a=""><c path="haxe.iterators.RestIterator.T"/></f></next>
		<new get="inline" set="null" line="8">
			<f a="args">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>haxe.Rest</e></m></meta>
		</new>
	</class>
	<class path="haxe.iterators.RestKeyValueIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/RestKeyValueIterator.hx">
		<args final="1"><x path="haxe.Rest"><c path="haxe.iterators.RestKeyValueIterator.T"/></x></args>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="12"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="16"><f a=""><a>
	<value><c path="haxe.iterators.RestKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new get="inline" set="null" line="8">
			<f a="args">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>haxe.Rest</e></m></meta>
		</new>
	</class>
	<class path="haxe.iterators.StringIterator" params="" file="/home/runner/work/haxe/haxe/std/haxe/iterators/StringIterator.hx">
		<offset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="45">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><x path="Int"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="38">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringIterator` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate over char codes in a string.

	Note that char codes may differ across platforms because of different
	internal encoding of strings in different of runtimes.</haxe_doc>
	</class>
	<class path="haxe.iterators.StringIteratorUnicode" params="" file="/home/runner/work/haxe/haxe/std/haxe/iterators/StringIteratorUnicode.hx">
		<unicodeIterator public="1" get="inline" set="null" line="70" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringIteratorUnicode"/>
			</f>
			<haxe_doc>Convenience function which can be used as a static extension.</haxe_doc>
		</unicodeIterator>
		<offset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="47">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="55">
			<f a=""><x path="Int"/></f>
			<meta><m n=":access"><e>StringTools</e></m></meta>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="40">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringIteratorUnicode` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate across strings in a cross-platform
	way. It handles surrogate pairs on platforms that require it. On each
	iteration, it returns the next character code.

	Note that this has different semantics than a standard for-loop over the
	String's length due to the fact that it deals with surrogate pairs.</haxe_doc>
	</class>
	<class path="haxe.iterators.StringKeyValueIterator" params="" file="/home/runner/work/haxe/haxe/std/haxe/iterators/StringKeyValueIterator.hx">
		<offset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="45">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `KeyValueIterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><a>
	<value><x path="Int"/></value>
	<key><x path="Int"/></key>
</a></f>
			<haxe_doc>See `KeyValueIterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="38">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringKeyValueIterator` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate over char indexes and char codes in a string.

	Note that char codes may differ across platforms because of different
	internal encoding of strings in different runtimes.</haxe_doc>
	</class>
	<class path="haxe.iterators.StringKeyValueIteratorUnicode" params="" file="/home/runner/work/haxe/haxe/std/haxe/iterators/StringKeyValueIteratorUnicode.hx">
		<unicodeKeyValueIterator public="1" get="inline" set="null" line="73" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
			</f>
			<haxe_doc>Convenience function which can be used as a static extension.</haxe_doc>
		</unicodeKeyValueIterator>
		<byteOffset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</byteOffset>
		<charOffset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</charOffset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="50">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="58">
			<f a=""><a>
	<value><x path="Int"/></value>
	<key><x path="Int"/></key>
</a></f>
			<meta><m n=":access"><e>StringTools</e></m></meta>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="43">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringKeyValueIteratorUnicode` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate across strings in a cross-platform
	way. It handles surrogate pairs on platforms that require it. On each
	iteration, it returns the next character offset as key and the next
	character code as value.

	Note that in the general case, because of surrogate pairs, the key values
	should not be used as offsets for various String API operations. For the
	same reason, the last key value returned might be less than `s.length - 1`.</haxe_doc>
	</class>
	<abstract path="haxe.macro.ModuleCheckPolicy" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx" module="haxe.macro.CompilationServer">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1" final="1">
	<NoFileSystemCheck public="1" get="inline" set="null" expr="cast 0" line="31" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
	</NoFileSystemCheck>
	<CheckFileModificationTime public="1" get="inline" set="null" expr="cast 1" line="36" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Default behavior: check last modification time.</haxe_doc>
	</CheckFileModificationTime>
	<CheckFileContentModification public="1" get="inline" set="null" expr="cast 2" line="42" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
	</CheckFileContentModification>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1" final="1">
		<NoFileSystemCheck public="1" get="inline" set="null" expr="cast 0" line="31" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
		</NoFileSystemCheck>
		<CheckFileModificationTime public="1" get="inline" set="null" expr="cast 1" line="36" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Default behavior: check last modification time.</haxe_doc>
		</CheckFileModificationTime>
		<CheckFileContentModification public="1" get="inline" set="null" expr="cast 2" line="42" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
		</CheckFileContentModification>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.macro.CompilationServer" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx"><haxe_doc>This class provides some methods which can be invoked from command line using
	`--macro server.field(args)`.</haxe_doc></class>
	<class path="haxe.macro.Compiler" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx">
		<getDefine public="1" set="method" static="1">
			<f a="key">
				<d/>
				<d/>
			</f>
			<haxe_doc>A conditional compilation flag can be set on the command line using
		`-D key=value`.

		Returns the value of a compiler flag.

		If the compiler flag is defined but no value is set,
		`Compiler.getDefine` returns `"1"` (e.g. `-D key`).

		If the compiler flag is not defined, `Compiler.getDefine` returns
		`null`.

		Note: This is a macro and cannot be called from within other macros. Refer
		to `haxe.macro.Context.definedValue` to obtain defined values in macro context.

		@see https://haxe.org/manual/lf-condition-compilation.html</haxe_doc>
		</getDefine>
		<getHxbWriterConfiguration public="1" set="method" line="471" static="1">
			<f a=""><x path="Null"><t path="haxe.hxb.WriterConfig"/></x></f>
			<haxe_doc>Gets the current hxb writer configuration, if any.</haxe_doc>
		</getHxbWriterConfiguration>
		<setHxbWriterConfiguration public="1" set="method" line="496" static="1">
			<f a="config">
				<x path="Null"><t path="haxe.hxb.WriterConfig"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hxb writer configuration to `config`. If no hxb writer configuration
		exists, it is created.

		The intended usage is

		```
		var config = Compiler.getHxbWriterConfiguration();
		config.archivePath = "newPath.zip";
		// Other changes
		Compiler.setHxbWriterConfiguration(config);
		```

		If `config` is `null`, hxb writing is disabled.

		@see haxe.hxb.WriterConfig</haxe_doc>
		</setHxbWriterConfiguration>
		<haxe_doc>All these methods can be called for compiler configuration macros.</haxe_doc>
	</class>
	<abstract path="haxe.macro.IncludePosition" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
	<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="507" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "top"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Prepend the file content to the output file.</haxe_doc>
	</Top>
	<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="514" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "closure"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
	</Closure>
	<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="519" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "inline"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
	</Inline>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
		<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="507" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "top"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Prepend the file content to the output file.</haxe_doc>
		</Top>
		<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="514" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "closure"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
		</Closure>
		<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="519" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "inline"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
		</Inline>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.macro.NullSafetyMode" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.NullSafetyMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
	<Off public="1" get="inline" set="null" expr="cast &quot;Off&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Off"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Disable null safety.</haxe_doc>
	</Off>
	<Loose public="1" get="inline" set="null" expr="cast &quot;Loose&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Loose"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc><![CDATA[Loose safety.
		If an expression is checked `!= null`, then it's considered safe even if it could be modified after the check.
		E.g.
		```haxe
		function example(o:{field:Null<String>}) {
			if(o.field != null) {
				mutate(o);
				var notNullable:String = o.field; //no error
			}
		}

		function mutate(o:{field:Null<String>}) {
			o.field = null;
		}
		```]]></haxe_doc>
	</Loose>
	<Strict public="1" get="inline" set="null" expr="cast &quot;Strict&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Strict"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc><![CDATA[Full scale null safety.
		If a field is checked `!= null` it stays safe until a call is made or any field of any object is reassigned,
		because that could potentially alter an object of the checked field.
		E.g.
		```haxe
		function example(o:{field:Null<String>}, b:{o:{field:Null<String>}}) {
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				someCall();
				var notNullable:String = o.field; // Error!
			}
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				b.o = {field:null};
				var notNullable:String = o.field; // Error!
			}
		}
		```]]></haxe_doc>
	</Strict>
	<StrictThreaded public="1" get="inline" set="null" expr="cast &quot;StrictThreaded&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "StrictThreaded"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Full scale null safety for a multi-threaded environment.
		With this mode checking a field `!= null` does not make it safe, because it could be changed from another thread
		at the same time or immediately after the check.
		The only nullable thing could be safe are local variables.</haxe_doc>
	</StrictThreaded>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._Compiler.NullSafetyMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
		<Off public="1" get="inline" set="null" expr="cast &quot;Off&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Off"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Disable null safety.</haxe_doc>
		</Off>
		<Loose public="1" get="inline" set="null" expr="cast &quot;Loose&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Loose"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc><![CDATA[Loose safety.
		If an expression is checked `!= null`, then it's considered safe even if it could be modified after the check.
		E.g.
		```haxe
		function example(o:{field:Null<String>}) {
			if(o.field != null) {
				mutate(o);
				var notNullable:String = o.field; //no error
			}
		}

		function mutate(o:{field:Null<String>}) {
			o.field = null;
		}
		```]]></haxe_doc>
		</Loose>
		<Strict public="1" get="inline" set="null" expr="cast &quot;Strict&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Strict"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc><![CDATA[Full scale null safety.
		If a field is checked `!= null` it stays safe until a call is made or any field of any object is reassigned,
		because that could potentially alter an object of the checked field.
		E.g.
		```haxe
		function example(o:{field:Null<String>}, b:{o:{field:Null<String>}}) {
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				someCall();
				var notNullable:String = o.field; // Error!
			}
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				b.o = {field:null};
				var notNullable:String = o.field; // Error!
			}
		}
		```]]></haxe_doc>
		</Strict>
		<StrictThreaded public="1" get="inline" set="null" expr="cast &quot;StrictThreaded&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "StrictThreaded"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Full scale null safety for a multi-threaded environment.
		With this mode checking a field `!= null` does not make it safe, because it could be changed from another thread
		at the same time or immediately after the check.
		The only nullable thing could be safe are local variables.</haxe_doc>
		</StrictThreaded>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.macro.MetadataDescription" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler"><a>
	<targets final="1" set="null">
		<x path="Null"><c path="Array"><x path="haxe.display.MetadataTarget"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Places where this metadata can be applied.</haxe_doc>
	</targets>
	<platforms final="1" set="null">
		<x path="Null"><c path="Array"><e path="haxe.macro.Platform"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Haxe target(s) for which this metadata is used.</haxe_doc>
	</platforms>
	<params final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>List (small description) of parameters that this metadata accepts.</haxe_doc>
	</params>
	<metadata final="1" set="null"><c path="String"/></metadata>
	<links final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>External resources for more information about this metadata.</haxe_doc>
	</links>
	<doc final="1" set="null"><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.macro.DefineDescription" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler"><a>
	<platforms final="1" set="null">
		<x path="Null"><c path="Array"><e path="haxe.macro.Platform"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Haxe target(s) for which this define is used.</haxe_doc>
	</platforms>
	<params final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>List (small description) of parameters that this define accepts.</haxe_doc>
	</params>
	<links final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>External resources for more information about this define.</haxe_doc>
	</links>
	<doc final="1" set="null"><c path="String"/></doc>
	<define final="1" set="null"><c path="String"/></define>
</a></typedef>
	<typedef path="haxe.macro.CompilerConfiguration" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler"><a>
	<version final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The version integer of the current Haxe compiler build.</haxe_doc>
	</version>
	<verbose final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>If `--verbose` mode is enabled, this is `true`.</haxe_doc>
	</verbose>
	<stdPath final="1" set="null">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>A list of paths being used for the standard library.</haxe_doc>
	</stdPath>
	<platformConfig final="1" set="null">
		<t path="haxe.macro.PlatformConfig"/>
		<haxe_doc>The compilation configuration for the target platform.</haxe_doc>
	</platformConfig>
	<platform final="1" set="null">
		<e path="haxe.macro.Platform"/>
		<haxe_doc>The target platform.</haxe_doc>
	</platform>
	<packageRules final="1" set="null">
		<t path="Map">
			<c path="String"/>
			<e path="haxe.macro.PackageRule"/>
		</t>
		<haxe_doc>Special access rules for packages depending on the compiler configuration.

		For example, the "java" package is "Forbidden" when the target platform is Python.</haxe_doc>
	</packageRules>
	<mainClass final="1" set="null">
		<t path="haxe.macro.TypePath"/>
		<haxe_doc>The path of the class passed using the `-main` argument.</haxe_doc>
	</mainClass>
	<foptimize final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>If `--no-opt` is enabled, this is `false`.</haxe_doc>
	</foptimize>
	<debug final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>If `--debug` mode is enabled, this is `true`.</haxe_doc>
	</debug>
	<args final="1" set="null">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>Returns an array of the arguments passed to the compiler from either the `.hxml` file or the command line.</haxe_doc>
	</args>
</a></typedef>
	<enum path="haxe.macro.Platform" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<Cross/>
		<Js/>
		<Lua/>
		<Neko/>
		<Flash/>
		<Php/>
		<Cpp/>
		<Jvm/>
		<Python/>
		<Hl/>
		<Eval/>
		<CustomTarget a="name"><c path="String"/></CustomTarget>
	</enum>
	<enum path="haxe.macro.PackageRule" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<Forbidden/>
		<Directory a="path"><c path="String"/></Directory>
		<Remap a="path"><c path="String"/></Remap>
	</enum>
	<class path="haxe.macro.ComplexTypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/ComplexTypeTools.hx">
		<toString public="1" set="method" line="40" static="1">
			<f a="c">
				<e path="haxe.macro.ComplexType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts type `c` to a human-readable `String` representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<haxe_doc>This class provides some utility methods to work with AST-level types. It is
	best used through `using haxe.macro.ComplexTypeTools` syntax and then provides
	additional methods on `haxe.macro.ComplexType` instances.</haxe_doc>
	</class>
	<enum path="haxe.macro.Message" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Context.hx" module="haxe.macro.Context">
		<Info a="msg:pos">
			<c path="String"/>
			<t path="haxe.macro.Position"/>
		</Info>
		<Warning a="msg:pos">
			<c path="String"/>
			<t path="haxe.macro.Position"/>
		</Warning>
	</enum>
	<class path="haxe.macro.Context" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Context.hx">
		<error public="1" set="method" line="50" static="1">
			<f a="msg:pos:?depth" v="::0">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ depth : 0 }</e></m></meta>
			<haxe_doc>Displays a compilation error `msg` at the given `Position` `pos`
		and aborts the current macro call.</haxe_doc>
		</error>
		<fatalError public="1" set="method" line="58" static="1">
			<f a="msg:pos:?depth" v="::0">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ depth : 0 }</e></m></meta>
			<haxe_doc>Displays a compilation error `msg` at the given `Position` `pos`
		and aborts the compilation.</haxe_doc>
		</fatalError>
		<reportError public="1" set="method" line="66" static="1">
			<f a="msg:pos:?depth" v="::0">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ depth : 0 }</e></m></meta>
			<haxe_doc>Displays a compilation error `msg` at the given `Position` `pos`
		without aborting the current macro call.</haxe_doc>
		</reportError>
		<warning public="1" set="method" line="73" static="1">
			<f a="msg:pos:?depth" v="::0">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ depth : 0 }</e></m></meta>
			<haxe_doc>Displays a compilation warning `msg` at the given `Position` `pos`.</haxe_doc>
		</warning>
		<info public="1" set="method" line="80" static="1">
			<f a="msg:pos:?depth" v="::0">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ depth : 0 }</e></m></meta>
			<haxe_doc>Displays a compilation info `msg` at the given `Position` `pos`.</haxe_doc>
		</info>
		<getMessages public="1" set="method" line="87" static="1">
			<f a=""><c path="Array"><e path="haxe.macro.Message"/></c></f>
			<haxe_doc>Gets a list of all current compilation info/warning messages.</haxe_doc>
		</getMessages>
		<filterMessages public="1" set="method" line="95" static="1">
			<f a="predicate">
				<f a="">
					<e path="haxe.macro.Message"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Filters all current info/warning messages. Filtered out messages will
		not be displayed by the compiler.</haxe_doc>
		</filterMessages>
		<initMacrosDone public="1" set="method" line="103" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Check if compiler is past initializations macros or not.
		When it is, configuration phase is over and parsing/typing can start.</haxe_doc>
		</initMacrosDone>
		<resolvePath public="1" set="method" line="118" static="1">
			<f a="file">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Resolves a file name `file` based on the current class paths.

		The resolution follows the usual class path rules where the last
		declared class path has priority.

		If a class path was declared relative, this method returns the relative
		file path. Otherwise it returns the absolute file path.

		If no type can be found, an exception of type `String` is thrown.</haxe_doc>
		</resolvePath>
		<getClassPath public="1" set="method" line="129" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns an `Array` of current class paths in the order of their
		declaration.

		Modifying the returned array has no effect on the compiler. Class paths
		can be added using `haxe.macro.Compiler.addClassPath`.</haxe_doc>
		</getClassPath>
		<containsDisplayPosition public="1" set="method" line="136" static="1">
			<f a="pos">
				<t path="haxe.macro.Position"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check if current display position is within `pos`.</haxe_doc>
		</containsDisplayPosition>
		<getDisplayMode public="1" set="method" line="140" static="1"><f a=""><e path="haxe.macro.DisplayMode"/></f></getDisplayMode>
		<currentPos public="1" set="method" line="147" static="1">
			<f a=""><t path="haxe.macro.Position"/></f>
			<haxe_doc>Returns the position at which the macro was called.</haxe_doc>
		</currentPos>
		<getMacroStack public="1" set="method" line="155" static="1">
			<f a=""><c path="Array"><t path="haxe.macro.Position"/></c></f>
			<haxe_doc>Get the call stack (excluding the call to `Context.getMacroStack()`
		that led to current macro.</haxe_doc>
		</getMacroStack>
		<getExpectedType public="1" set="method" line="168" static="1">
			<f a=""><x path="Null"><e path="haxe.macro.Type"/></x></f>
			<haxe_doc>Returns the type which is expected at the place the macro is called.

		This affects usages such as `var x:Int = macroCall()`, where the
		expected type will be reported as `Int`.

		Might return `null` if no specific type is expected or if the calling
		macro is not an expression-macro.</haxe_doc>
		</getExpectedType>
		<getCallArguments public="1" set="method" line="179" static="1">
			<f a=""><x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x></f>
			<haxe_doc>Returns the call arguments that lead to the invocation of the current
		`@:genericBuild` macro, if available.

		Returns `null` if the current macro is not a `@:genericBuild` macro.</haxe_doc>
		</getCallArguments>
		<getLocalClass public="1" set="method" line="189" static="1">
			<f a=""><x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></x></f>
			<haxe_doc>Returns the current class in which the macro was called.

		If no such class exists, `null` is returned.</haxe_doc>
		</getLocalClass>
		<getLocalModule public="1" set="method" line="203" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the current module path in/on which the macro was called.</haxe_doc>
		</getLocalModule>
		<getLocalType public="1" set="method" line="213" static="1">
			<f a=""><x path="Null"><e path="haxe.macro.Type"/></x></f>
			<haxe_doc>Returns the current type in/on which the macro was called.

		If no such type exists, `null` is returned.</haxe_doc>
		</getLocalType>
		<getLocalMethod public="1" set="method" line="223" static="1">
			<f a=""><x path="Null"><c path="String"/></x></f>
			<haxe_doc>Returns the name of the method from which the macro was called.

		If no such method exists, `null` is returned.</haxe_doc>
		</getLocalMethod>
		<getLocalUsing public="1" set="method" line="234" static="1">
			<f a=""><c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></c></f>
			<haxe_doc>Returns an `Array` of classes which are available for `using` usage in
		the context the macro was called.

		Modifying the returned array has no effect on the compiler.</haxe_doc>
		</getLocalUsing>
		<getLocalImports public="1" set="method" line="244" static="1">
			<f a=""><c path="Array"><t path="haxe.macro.ImportExpr"/></c></f>
			<haxe_doc>Returns an `Array` of all imports in the context the macro was called.

		Modifying the returned array has no effect on the compiler.</haxe_doc>
		</getLocalImports>
		<getLocalVars public="1" set="method" line="259" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<e path="haxe.macro.Type"/>
</t></f>
			<meta><m n=":deprecated"><e>"Use Context.getLocalTVars() instead"</e></m></meta>
			<haxe_doc>Returns a map of local variables accessible in the context the macro was
		called.

		The keys of the returned map are the variable names, the values are
		their types.

		Modifying the returned map has no effect on the compiler.</haxe_doc>
		</getLocalVars>
		<getLocalTVars public="1" set="method" line="268" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<t path="haxe.macro.TVar"/>
</t></f>
			<haxe_doc>Similar to `getLocalVars`, but returns elements of type `TVar` instead
		of `Type`.</haxe_doc>
		</getLocalTVars>
		<defined public="1" set="method" line="281" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the conditional compilation flag `s` has been set.

		Compiler flags are set using the `-D` command line parameter, or
		by calling `haxe.macro.Compiler.define`.

		@see https://haxe.org/manual/lf-condition-compilation.html</haxe_doc>
		</defined>
		<definedValue public="1" set="method" line="297" static="1">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Returns the value defined for the conditional compilation flag `key`.

		If no value is defined for `key`, `null` is returned.

		Compiler flags values are set using the `-D key=value` command line
		parameter, or by calling `haxe.macro.Compiler.define`.

		The default value is `"1"`.

		@see https://haxe.org/manual/lf-condition-compilation.html</haxe_doc>
		</definedValue>
		<getDefines public="1" set="method" line="311" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Returns a map of all conditional compilation flags that have been set.

		Compiler flags are set using the `-D` command line parameter, or
		by calling `haxe.macro.Compiler.define`.

		Modifying the returned map has no effect on the compiler.

		@see https://haxe.org/manual/lf-condition-compilation.html</haxe_doc>
		</getDefines>
		<getType public="1" set="method" line="327" static="1">
			<f a="name">
				<c path="String"/>
				<e path="haxe.macro.Type"/>
			</f>
			<haxe_doc>Resolves a type identified by `name`.

		The resolution follows the usual class path rules where the last
		declared class path has priority.

		If no type can be found, an exception of type `String` is thrown.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</getType>
		<getModule public="1" set="method" line="345" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Array"><e path="haxe.macro.Type"/></c>
			</f>
			<haxe_doc>Resolves a module identified by `name` and returns an `Array` of all
		its contained types.

		The resolution follows the usual class path rules where the last
		declared class path has priority.

		If no module can be found, an exception of type `String` is thrown.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</getModule>
		<getMainExpr public="1" set="method" line="357" static="1">
			<f a=""><x path="Null"><t path="haxe.macro.TypedExpr"/></x></f>
			<haxe_doc>Returns the typed expression of the call to the main function.

		This function will only work in the generation phase. Any calls
		made outside a function passed to `haxe.macro.Context.onGenerate`
		or `haxe.macro.Context.onAfterGenerate` will return `null`.</haxe_doc>
		</getMainExpr>
		<getAllModuleTypes public="1" set="method" line="373" static="1">
			<f a=""><c path="Array"><e path="haxe.macro.ModuleType"/></c></f>
			<haxe_doc>Returns an array of module types to be generated in the output.

		This list may change depending on the phase of compilation and
		should not be treated as conclusive until the generation phase.

		Modifying the returned array has no effect on the compilation.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</getAllModuleTypes>
		<parse public="1" set="method" line="386" static="1">
			<f a="expr:pos">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Parses `expr` as Haxe code, returning the corresponding AST.

		String interpolation of single quote strings within `expr` is not
		supported.

		The provided `Position` `pos` is used for all generated inner AST nodes.</haxe_doc>
		</parse>
		<parseInlineString public="1" set="method" line="394" static="1">
			<f a="expr:pos">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Similar to `parse`, but error positions are reported within the provided
		String `expr`.</haxe_doc>
		</parseInlineString>
		<makeExpr public="1" set="method" line="407" static="1">
			<f a="v:pos">
				<d/>
				<t path="haxe.macro.Position"/>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Builds an expression from `v`.

		This method generates AST nodes depending on the macro-runtime value of
		`v`. As such, only basic types and enums are supported and the behavior
		for other types is undefined.

		The provided `Position` `pos` is used for all generated inner AST nodes.</haxe_doc>
		</makeExpr>
		<signature public="1" set="method" line="414" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a hashed MD5 signature of value `v`.</haxe_doc>
		</signature>
		<onGenerate public="1" set="method" line="435" static="1">
			<f a="callback:?persistent" v=":true">
				<f a="">
					<c path="Array"><e path="haxe.macro.Type"/></c>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ persistent : true }</e></m></meta>
			<haxe_doc>Adds a callback function `callback` which is invoked after the
		compiler's typing phase, just before its generation phase.

		The callback receives an `Array` containing all types which are about
		to be generated. Modifications are limited to metadata, it is mainly
		intended to obtain information.

		By default, the callback is made before types are stored in the compilation
		server, if active. This means that any effect persists for the next compilation.
		If `persistent` is set to `false`, changes to types made by the callback only
		affect the current compilation. If no compilation server is used, this flag has
		no effect.

		*Note*: the callback is still invoked when generation is disabled with  `--no-output`.</haxe_doc>
		</onGenerate>
		<onAfterGenerate public="1" set="method" line="448" static="1">
			<f a="callback">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a callback function `callback` which is invoked after the compiler
		generation phase.

		Compilation has completed at this point and cannot be influenced
		anymore. However, contextual information is still available.

		*Note*: the callback is still invoked when generation is disabled with  `--no-output`.</haxe_doc>
		</onAfterGenerate>
		<onAfterTyping public="1" set="method" line="460" static="1">
			<f a="callback">
				<f a="">
					<c path="Array"><e path="haxe.macro.ModuleType"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a callback function `callback` which is invoked after the compiler
		is done typing, but before optimization. The callback receives the types
		which have been typed.

		It is possible to define new types in the callback, in which case it
		will be called again with the new types as argument.</haxe_doc>
		</onAfterTyping>
		<onAfterInitMacros public="1" set="method" line="472" static="1">
			<f a="callback">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a callback function `callback` which is invoked after the compiler
		is done running initialization macros, when typing begins.

		`onAfterInitMacros` should be used to delay typer-dependant code from
		your initalization macros, to properly separate configuration phase and
		actual typing.</haxe_doc>
		</onAfterInitMacros>
		<onTypeNotFound public="1" set="method" line="488" static="1">
			<f a="callback">
				<f a="">
					<c path="String"/>
					<t path="haxe.macro.TypeDefinition"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a callback function `callback` which is invoked when a type name
		cannot be resolved.

		The callback may return a type definition, which is then used for the
		expected type. If it returns `null`, the type is considered to still not
		exist.</haxe_doc>
		</onTypeNotFound>
		<typeof public="1" set="method" line="502" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<e path="haxe.macro.Type"/>
			</f>
			<haxe_doc>Types expression `e` and returns its type.

		Typing the expression may result in a compiler error which can be
		caught using `try ... catch`.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</typeof>
		<typeExpr public="1" set="method" line="520" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Types expression `e` and returns the corresponding `TypedExpr`.

		Typing the expression may result in a compiler error which can be
		caught using `try ... catch`. Note that not all compiler errors can
		be caught this way because the compiler might delay various checks
		to a later stage, at which point the exception handler is no longer
		active.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</typeExpr>
		<resolveType public="1" set="method" line="536" static="1">
			<f a="t:p">
				<e path="haxe.macro.ComplexType"/>
				<t path="haxe.macro.Position"/>
				<e path="haxe.macro.Type"/>
			</f>
			<haxe_doc>Resolve type `t` and returns the corresponding `Type`.

		Resolving the type may result in a compiler error which can be
		caught using `try ... catch`.
		Resolution is performed based on the current context in which the macro is called.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</resolveType>
		<resolveComplexType public="1" set="method" line="550" static="1">
			<f a="t:p">
				<e path="haxe.macro.ComplexType"/>
				<t path="haxe.macro.Position"/>
				<e path="haxe.macro.ComplexType"/>
			</f>
			<haxe_doc>Resolve type `t` and returns the corresponding `ComplexType`.

		Resolving the type may result in a compiler error which can be
		caught using `try ... catch`.
		Resolution is performed based on the current context in which the macro is called.
		The difference with `resolveType` is that it only performs type resolution, it does not
		build any type or trigger macros.</haxe_doc>
		</resolveComplexType>
		<toComplexType public="1" set="method" line="560" static="1">
			<f a="t">
				<e path="haxe.macro.Type"/>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			</f>
			<haxe_doc>Returns the `ComplexType` corresponding to the given `Type` `t`.

		See `haxe.macro.TypeTools.toComplexType` for details.</haxe_doc>
		</toComplexType>
		<unify public="1" set="method" line="571" static="1">
			<f a="t1:t2">
				<e path="haxe.macro.Type"/>
				<e path="haxe.macro.Type"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tries to unify `t1` and `t2` and returns `true` if successful.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</unify>
		<follow public="1" set="method" line="585" static="1">
			<f a="t:?once">
				<e path="haxe.macro.Type"/>
				<x path="Bool"/>
				<e path="haxe.macro.Type"/>
			</f>
			<haxe_doc>Follows a type.

		See `haxe.macro.TypeTools.follow` for details.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</follow>
		<followWithAbstracts public="1" set="method" line="599" static="1">
			<f a="t:?once" v=":false">
				<e path="haxe.macro.Type"/>
				<x path="Bool"/>
				<e path="haxe.macro.Type"/>
			</f>
			<meta><m n=":value"><e>{ once : false }</e></m></meta>
			<haxe_doc>Follows a type, including abstracts' underlying implementation

		See `haxe.macro.TypeTools.followWithAbstracts` for details.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</followWithAbstracts>
		<getPosInfos public="1" set="method" line="607" static="1">
			<f a="p">
				<t path="haxe.macro.Position"/>
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
			</f>
			<haxe_doc>Returns the information stored in `Position` `p`.</haxe_doc>
		</getPosInfos>
		<makePosition public="1" set="method" line="614" static="1">
			<f a="inf">
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
				<t path="haxe.macro.Position"/>
			</f>
			<haxe_doc>Builds a `Position` from `inf`.</haxe_doc>
		</makePosition>
		<getResources public="1" set="method" line="624" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</t></f>
			<haxe_doc>Returns a map of all registered resources for this compilation unit.

		Modifying the returned map has no effect on the compilation, use
		`haxe.macro.Context.addResource` to add new resources to the compilation unit.</haxe_doc>
		</getResources>
		<addResource public="1" set="method" line="640" static="1">
			<f a="name:data">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Makes resource `data` available as `name`.

		The resource is then available using the `haxe.macro.Resource` API.

		If a previous resource was bound to `name`, it is overwritten.

		Compilation server : when using the compilation server, the resource is bound
		to the Haxe module which calls the macro, so it will be included again if
		that module is reused. If this resource concerns several modules, prefix its
		name with a `$` sign, this will bind it to the macro module instead.</haxe_doc>
		</addResource>
		<getBuildFields public="1" set="method" line="649" static="1">
			<f a=""><c path="Array"><t path="haxe.macro.Field"/></c></f>
			<haxe_doc>Returns an `Array` of fields of the class which is to be built.

		This is only defined for `@:build/@:autoBuild` macros.</haxe_doc>
		</getBuildFields>
		<defineType public="1" set="method" line="665" static="1">
			<f a="t:?moduleDependency">
				<t path="haxe.macro.TypeDefinition"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines a new type from `TypeDefinition` `t`.

		If `moduleDependency` is given and is not `null`, it should contain
		a module path that will be used as a dependency for the newly defined module
		instead of the current module.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</defineType>
		<makeMonomorph public="1" set="method" line="680" static="1">
			<f a=""><e path="haxe.macro.Type"/></f>
			<haxe_doc>Creates and returns a new instance of monomorph (`TMono`) type.

		Returned monomorph can be used with e.g. `Context.unify` to make the compiler
		bind the monomorph to an actual type and let macro further process the resulting type.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</makeMonomorph>
		<defineModule public="1" set="method" line="697" static="1">
			<f a="modulePath:types:?imports:?usings">
				<c path="String"/>
				<c path="Array"><t path="haxe.macro.TypeDefinition"/></c>
				<c path="Array"><t path="haxe.macro.ImportExpr"/></c>
				<c path="Array"><t path="haxe.macro.TypePath"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines a new module as `modulePath` with several `TypeDefinition`
		`types`. This is analogous to defining a .hx file.

		The individual `types` can reference each other and any identifier
		respects the `imports` and `usings` as usual, expect that imports are
		not allowed to have `.*` wildcards or `as s` shorthands.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</defineModule>
		<getTypedExpr public="1" set="method" line="715" static="1">
			<f a="t">
				<t path="haxe.macro.TypedExpr"/>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Returns a syntax-level expression corresponding to typed expression `t`.

		This process may lose some information.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</getTypedExpr>
		<storeTypedExpr public="1" set="method" line="736" static="1">
			<f a="t">
				<t path="haxe.macro.TypedExpr"/>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Store typed expression `t` internally and give a syntax-level expression
		that can be returned from a macro and will be replaced by the stored
		typed expression.

		If `t` is `null` or invalid, an exception is thrown.

		NOTE: the returned value references an internally stored typed expression
		that is reset between compilations, so care should be taken when storing
		the expression returned by this method in a static variable and using the
		compilation server.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</storeTypedExpr>
		<storeExpr public="1" set="method" line="760" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Types expression `e`, stores the resulting typed expression internally and
		returns a syntax-level expression that can be returned from a macro and
		will be replaced by the stored typed expression.

		If `e` is `null` or invalid, an exception is thrown.

		A call to `storeExpr(e)` is equivalent to `storeTypedExpr(typeExpr(e))` without
		the overhead of encoding and decoding between regular and macro runtime.

		NOTE: the returned value references an internally stored typed expression
		that is reset between compilations, so care should be taken when storing
		the expression returned by this method in a static variable and using the
		compilation server.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</storeExpr>
		<typeAndStoreExpr public="1" set="method" line="773" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<a>
					<type final="1" set="null"><t path="haxe.macro.Ref"><e path="haxe.macro.Type"/></t></type>
					<expr final="1" set="null"><t path="haxe.macro.Expr"/></expr>
				</a>
			</f>
			<haxe_doc>This function works like `storeExpr`, but also returns access to the expression's
		type through the `type` field of the return value.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</typeAndStoreExpr>
		<registerModuleDependency public="1" set="method" line="791" static="1">
			<f a="modulePath:externFile">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Manually adds a dependency between module `modulePath` and an external
		file `externFile`.

		This affects the compilation cache, causing the module to be typed if
		`externFile` has changed.

		Has no effect if the compilation cache is not used.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</registerModuleDependency>
		<timer public="1" set="method" line="809" static="1">
			<f a="id">
				<c path="String"/>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>Creates a timer which will be printed in the compilation report
		if `--times` compilation argument is set.

		Note that a timer may be omitted from the report if the amount of time
		measured is too small.

		This method immediately starts a timer and returns a function to stop it:
		```
		var stopTimer = haxe.macro.Context.timer("my heavy task");
		runTask();
		stopTimer();
		```</haxe_doc>
		</timer>
		<withImports public="1" params="X" set="method" line="826" static="1">
			<f a="imports:usings:code">
				<c path="Array"><c path="String"/></c>
				<c path="Array"><c path="String"/></c>
				<f a=""><c path="withImports.X"/></f>
				<c path="withImports.X"/>
			</f>
			<haxe_doc>Executes `code` in a context that has `imports` and `usings` added.

		This is equivalent to temporarily having `import` and `using` statements in a file. These
		are only active during the execution of `code` and do not affect anything afterwards. This
		is true even if `code` throws an exception.

		If any argument is `null`, the result is unspecified.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</withImports>
		<withOptions public="1" params="X" set="method" line="845" static="1">
			<f a="options:code">
				<a>
					<allowTransform>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</allowTransform>
					<allowInlining>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</allowInlining>
				</a>
				<f a=""><c path="withOptions.X"/></f>
				<c path="withOptions.X"/>
			</f>
			<haxe_doc>Executes `code` in a context that has some compiler options set, restore the compiler to its
		default behavior afterwards.

		`allowInlining`: enable or disable inlining during typing with `typeExpr`.

		`allowTransform`: when disabled, the code typed with `typeExpr` will be almost exactly the same
		as the input code. This will disable some abstract types transformations.

		Usage of this function from initialization macros is deprecated and may
		cause compilation server issues. Use `Context.onAfterInitMacros` to
		run your code once typer is ready to be used.</haxe_doc>
		</withOptions>
		<registerModuleReuseCall public="1" set="method" line="851" static="1">
			<f a="modulePath:macroCall">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</registerModuleReuseCall>
		<onMacroContextReused public="1" set="method" line="856" static="1">
			<f a="callb">
				<f a=""><x path="Bool"/></f>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</onMacroContextReused>
		<load set="method" line="864" static="1">
			<f a="f:nargs">
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta>
				<m n=":allow"><e>haxe.macro.TypeTools</e></m>
				<m n=":allow"><e>haxe.macro.MacroStringTools</e></m>
				<m n=":allow"><e>haxe.macro.TypedExprTools</e></m>
				<m n=":allow"><e>haxe.macro.PositionTools</e></m>
			</meta>
		</load>
		<includeFile set="method" line="874" static="1"><f a="file:position">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></includeFile>
		<sExpr set="method" line="878" static="1"><f a="e:pretty">
	<t path="haxe.macro.TypedExpr"/>
	<x path="Bool"/>
	<c path="String"/>
</f></sExpr>
		<assertInitMacro set="method" line="883" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":allow"><e>haxe.macro.Compiler</e></m></meta>
		</assertInitMacro>
		<assertInitMacrosDone set="method" line="895" static="1">
			<f a="?includeSuggestion" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ includeSuggestion : true }</e></m>
				<m n=":allow"><e>haxe.macro.Compiler</e></m>
			</meta>
		</assertInitMacrosDone>
		<haxe_doc>Context provides an API for macro programming.

	It contains common functions that interact with the macro interpreter to
	query or set information. Other API functions are available in the tools
	classes:

	- `haxe.macro.ComplexTypeTools`
	- `haxe.macro.ExprTools`
	- `haxe.macro.TypeTools`</haxe_doc>
	</class>
	<enum path="haxe.macro.DisplayMode" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/DisplayMode.hx">
		<None/>
		<Default/>
		<Definition/>
		<TypeDefinition/>
		<Implementation/>
		<Package/>
		<Hover/>
		<References a="withDefinition:findDescendants:findBase">
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</References>
		<ModuleSymbols/>
		<WorkspaceSymbols a="filter"><c path="String"/></WorkspaceSymbols>
		<Signature/>
	</enum>
	<class path="haxe.macro.ExampleJSGenerator" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/ExampleJSGenerator.hx">
		<api><t path="haxe.macro.JSGenApi"/></api>
		<buf><c path="StringBuf"/></buf>
		<inits><t path="List"><t path="haxe.macro.TypedExpr"/></t></inits>
		<statics><t path="List"><a>
	<f><t path="haxe.macro.ClassField"/></f>
	<c><t path="haxe.macro.ClassType"/></c>
</a></t></statics>
		<packages><c path="haxe.ds.StringMap"><x path="Bool"/></c></packages>
		<forbidden><c path="haxe.ds.StringMap"><x path="Bool"/></c></forbidden>
		<getType set="method" line="50"><f a="t">
	<e path="haxe.macro.Type"/>
	<c path="String"/>
</f></getType>
		<print get="inline" set="null" line="59"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></print>
		<newline get="inline" set="null" line="63"><f a=""><x path="Void"/></f></newline>
		<genExpr get="inline" set="null" line="67"><f a="e">
	<t path="haxe.macro.TypedExpr"/>
	<x path="Void"/>
</f></genExpr>
		<field set="method" line="71"><f a="p">
	<c path="String"/>
	<c path="String"/>
</f></field>
		<genPackage set="method" line="75"><f a="p">
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></genPackage>
		<getPath set="method" line="96"><f a="t">
	<t path="haxe.macro.BaseType"/>
	<c path="String"/>
</f></getPath>
		<checkFieldName set="method" line="100"><f a="c:f">
	<t path="haxe.macro.ClassType"/>
	<t path="haxe.macro.ClassField"/>
	<x path="Void"/>
</f></checkFieldName>
		<genClassField set="method" line="105"><f a="c:p:f">
	<t path="haxe.macro.ClassType"/>
	<c path="String"/>
	<t path="haxe.macro.ClassField"/>
	<x path="Void"/>
</f></genClassField>
		<genStaticField set="method" line="118"><f a="c:p:f">
	<t path="haxe.macro.ClassType"/>
	<c path="String"/>
	<t path="haxe.macro.ClassField"/>
	<x path="Void"/>
</f></genStaticField>
		<genClass set="method" line="136"><f a="c">
	<t path="haxe.macro.ClassType"/>
	<x path="Void"/>
</f></genClass>
		<genEnum set="method" line="176"><f a="e">
	<t path="haxe.macro.EnumType"/>
	<x path="Void"/>
</f></genEnum>
		<genStaticValue set="method" line="207"><f a="c:cf">
	<t path="haxe.macro.ClassType"/>
	<t path="haxe.macro.ClassField"/>
	<x path="Void"/>
</f></genStaticValue>
		<genType set="method" line="215"><f a="t">
	<e path="haxe.macro.Type"/>
	<x path="Void"/>
</f></genType>
		<generate public="1" set="method" line="231"><f a=""><x path="Void"/></f></generate>
		<new public="1" set="method" line="38"><f a="api">
	<t path="haxe.macro.JSGenApi"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.macro.Position" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.StringLiteralKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<DoubleQuotes/>
		<SingleQuotes/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.Constant" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v:?s">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents an integer literal.</haxe_doc>
		</CInt>
		<CFloat a="f:?s">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents a float literal.</haxe_doc>
		</CFloat>
		<CString a="s:?kind">
			<c path="String"/>
			<e path="haxe.macro.StringLiteralKind"/>
			<haxe_doc>Represents a string literal.</haxe_doc>
		</CString>
		<CIdent a="s">
			<c path="String"/>
			<haxe_doc>Represents an identifier.</haxe_doc>
		</CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents a regular expression literal.

		Example: `~/haxe/i`

		- The first argument `haxe` is a string with regular expression pattern.
		- The second argument `i` is a string with regular expression flags.

		@see https://haxe.org/manual/std-regex.html</haxe_doc>
		</CRegexp>
		<haxe_doc>Represents a constant.
	@see https://haxe.org/manual/expression-constants.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=` `-=` `/=` `*=` `<<=` `>>=` `>>>=` `|=` `&=` `^=` `%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
		<OpIn><haxe_doc>`in`</haxe_doc></OpIn>
		<OpNullCoal><haxe_doc>`??`</haxe_doc></OpNullCoal>
		<haxe_doc>A binary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<OpSpread><haxe_doc>`...`</haxe_doc></OpSpread>
		<haxe_doc>A unary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.EFieldKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<Normal/>
		<Safe/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<namePos>
				<x path="Null"><t path="haxe.macro.Position"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The position of the variable name.</haxe_doc>
			</namePos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Metadata associatied with the variable, if available.</haxe_doc>
			</meta>
			<isStatic>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable is static.</haxe_doc>
			</isStatic>
			<isFinal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable can be assigned to.</haxe_doc>
			</isFinal>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@see https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<enum path="haxe.macro.QuoteStatus" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<Unquoted><haxe_doc>No quotes</haxe_doc></Unquoted>
		<Quoted><haxe_doc>Double quotes `"`</haxe_doc></Quoted>
		<haxe_doc>Represents the way something is quoted.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.ObjectField" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<quotes>
				<x path="Null"><e path="haxe.macro.QuoteStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>How the field name is quoted.</haxe_doc>
			</quotes>
			<field>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</field>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The field expression.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents the field of an object declaration.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FunctionKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FAnonymous><haxe_doc>Anonymous function</haxe_doc></FAnonymous>
		<FNamed a="name:?inlined">
			<c path="String"/>
			<x path="Bool"/>
			<haxe_doc>Named function</haxe_doc>
		</FNamed>
		<FArrow><haxe_doc>Arrow function</haxe_doc></FArrow>
		<haxe_doc>Represents function kind in the AST</haxe_doc>
	</enum>
	<enum path="haxe.macro.ExprDef" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c">
			<e path="haxe.macro.Constant"/>
			<haxe_doc>A constant.</haxe_doc>
		</EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</EBinop>
		<EField a="e:field:?kind">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
			<e path="haxe.macro.EFieldKind"/>
			<haxe_doc>Field access on `e.field`.

		If `kind` is null, it is equal to Normal.</haxe_doc>
		</EField>
		<EParenthesis a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</EParenthesis>
		<EObjectDecl a="fields">
			<c path="Array"><t path="haxe.macro.ObjectField"/></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</EObjectDecl>
		<EArrayDecl a="values">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A call `e(params)`.</haxe_doc>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A constructor call `new t(params)`.</haxe_doc>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An unary operator `op` on `e`:

		- `e++` (`op = OpIncrement, postFix = true`)
		- `e--` (`op = OpDecrement, postFix = true`)
		- `++e` (`op = OpIncrement, postFix = false`)
		- `--e` (`op = OpDecrement, postFix = false`)
		- `-e` (`op = OpNeg, postFix = false`)
		- `!e` (`op = OpNot, postFix = false`)
		- `~e` (`op = OpNegBits, postFix = false`)</haxe_doc>
		</EUnop>
		<EVars a="vars">
			<c path="Array"><t path="haxe.macro.Var"/></c>
			<haxe_doc>Variable declarations.</haxe_doc>
		</EVars>
		<EFunction a="kind:f">
			<x path="Null"><e path="haxe.macro.FunctionKind"/></x>
			<t path="haxe.macro.Function"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</EFunction>
		<EBlock a="exprs">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A block of expressions `{exprs}`.</haxe_doc>
		</EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</EFor>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>An `if (econd) eif` or `if (econd) eif else eelse` expression.</haxe_doc>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.

		When `normalWhile` is `true` it is `while (...)`.

		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>Represents a `switch` expression with related cases and an optional.
		`default` case if `edef != null`.</haxe_doc>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</ETry>
		<EReturn a="?e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</EReturn>
		<EBreak><haxe_doc>A `break` expression.</haxe_doc></EBreak>
		<EContinue><haxe_doc>A `continue` expression.</haxe_doc></EContinue>
		<EUntyped a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An `untyped e` source code.</haxe_doc>
		</EUntyped>
		<EThrow a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</ECast>
		<EDisplay a="e:displayKind">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.DisplayKind"/>
			<haxe_doc>Used internally to provide completion.</haxe_doc>
		</EDisplay>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(econd) ? eif : eelse` expression.</haxe_doc>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>A `(e:t)` expression.</haxe_doc>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `@m e` expression.</haxe_doc>
		</EMeta>
		<EIs a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>An `expr is Type` expression.</haxe_doc>
		</EIs>
		<haxe_doc>Represents the kind of a node in the AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.DisplayKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<DKCall/>
		<DKDot/>
		<DKStructure/>
		<DKMarked/>
		<DKPattern a="outermost"><x path="Bool"/></DKPattern>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Represents the type path.</haxe_doc>
		</TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a function type.
		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFunction>
		<TAnonymous a="fields">
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc>Represents an anonymous structure type.
		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TParent a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc><![CDATA[Represents parentheses around a type, e.g. the `(Int -> Void)` part in
		`(Int -> Void) -> String`.]]></haxe_doc>
		</TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc><![CDATA[Represents typedef extensions `> Iterable<T>`.
		The array `p` holds the type paths to the given types.
		@see https://haxe.org/manual/type-system-extensions.html]]></haxe_doc>
		</TExtend>
		<TOptional a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an optional type.</haxe_doc>
		</TOptional>
		<TNamed a="n:t">
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a type with a name.</haxe_doc>
		</TNamed>
		<TIntersection a="tl">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc><![CDATA[Represents an intersection type `T1 & T2 & ... & TN`.]]></haxe_doc>
		</TIntersection>
		<haxe_doc>Represents a type syntax in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has `name = "Module"`, `sub = "Type"`, if available.</haxe_doc>
			</sub>
			<params>
				<x path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPExpr a="e"><t path="haxe.macro.Expr"/></TPExpr>
		<haxe_doc><![CDATA[Represents a concrete type parameter in the AST.

	Haxe allows expressions in concrete type parameters, e.g.
	`new YourType<["hello", "world"]>`. In that case the value is `TPExpr` while
	in the normal case it's `TPType`.]]></haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<defaultType>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional default type of the type parameter.</haxe_doc>
			</defaultType>
			<constraints>
				<x path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<x path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Access" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic><haxe_doc>Public access modifier, grants access from anywhere.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APublic>
		<APrivate><haxe_doc>Private access modifier, grants access to class and its sub-classes
		only.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APrivate>
		<AStatic><haxe_doc>Static access modifier.</haxe_doc></AStatic>
		<AOverride><haxe_doc>Override access modifier.
		@see https://haxe.org/manual/class-field-override.html</haxe_doc></AOverride>
		<ADynamic><haxe_doc>Dynamic (re-)bindable access modifier.
		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></ADynamic>
		<AInline><haxe_doc>Inline access modifier. Allows expressions to be directly inserted in
		place of calls to them.
		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></AInline>
		<AMacro><haxe_doc>Macro access modifier. Allows expression macro functions. These are
		normal functions which are executed as soon as they are typed.</haxe_doc></AMacro>
		<AFinal><haxe_doc>Final access modifier. For functions, they can not be overridden. For
		variables, it means they can be assigned to only once.</haxe_doc></AFinal>
		<AExtern><haxe_doc>Extern access modifier.</haxe_doc></AExtern>
		<AAbstract><haxe_doc>Abstract access modifier.</haxe_doc></AAbstract>
		<AOverload><haxe_doc>Overload access modifier.</haxe_doc></AOverload>
		<AEnum><haxe_doc>Enum access modifier.</haxe_doc></AEnum>
		<haxe_doc>Represents an access modifier.
	@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a variable field type.</haxe_doc>
		</FVar>
		<FFun a="f">
			<t path="haxe.macro.Function"/>
			<haxe_doc>Represents a function field type.</haxe_doc>
		</FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a property with getter and setter field type.</haxe_doc>
		</FProp>
		<haxe_doc>Represents the field type in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the type, if available. If the type has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDEnum><haxe_doc>Represents an enum kind.</haxe_doc></TDEnum>
		<TDStructure><haxe_doc>Represents a structure kind.</haxe_doc></TDStructure>
		<TDClass a="?superClass:?interfaces:?isInterface:?isFinal:?isAbstract">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<haxe_doc>Represents a class kind.</haxe_doc>
		</TDClass>
		<TDAlias a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an alias/typedef kind.</haxe_doc>
		</TDAlias>
		<TDAbstract a="tthis:?flags:?from:?to">
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<c path="Array"><e path="haxe.macro.AbstractFlag"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc>Represents an abstract kind.</haxe_doc>
		</TDAbstract>
		<TDField a="kind:?access">
			<e path="haxe.macro.FieldType"/>
			<c path="Array"><e path="haxe.macro.Access"/></c>
			<haxe_doc>Represents a module-level field.</haxe_doc>
		</TDField>
		<haxe_doc>Represents a type definition kind.</haxe_doc>
	</enum>
	<enum path="haxe.macro.AbstractFlag" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<AbEnum><haxe_doc>Indicates that this abstract is an `enum abstract`</haxe_doc></AbEnum>
		<AbFrom a="ct">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Indicates that this abstract can be assigned from `ct`.
		This flag can be added several times to add multiple "from" types.</haxe_doc>
		</AbFrom>
		<AbTo a="ct">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Indicates that this abstract can be assigned to `ct`.
		This flag can be added several times to add multiple "to" types.</haxe_doc>
		</AbTo>
		<haxe_doc>Represents an abstract flag.</haxe_doc>
	</enum>
	<class path="haxe.macro.Error" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<extends path="haxe.Exception"/>
		<pos public="1">
			<t path="haxe.macro.Position"/>
			<haxe_doc>The position of the error.</haxe_doc>
		</pos>
		<childErrors>
			<c path="Array"><c path="haxe.macro.Error"/></c>
			<haxe_doc>Child error messages, if any.</haxe_doc>
		</childErrors>
		<new public="1" set="method" line="1055">
			<f a="message:pos:?previous">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<c path="haxe.Exception"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Instantiates an error with given message and position.</haxe_doc>
		</new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<enum path="haxe.macro.ImportMode" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<INormal><haxe_doc>Represents a default import `import c`.</haxe_doc></INormal>
		<IAsName a="alias">
			<c path="String"/>
			<haxe_doc>Represents the alias import `import c as alias`.</haxe_doc>
		</IAsName>
		<IAll><haxe_doc>Represents the wildcard import `import *`.</haxe_doc></IAll>
		<haxe_doc>Represents the import mode.
	@see https://haxe.org/manual/type-system-import.html</haxe_doc>
	</enum>
	<typedef path="haxe.macro.ImportExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<class path="haxe.macro.ExprTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/ExprTools.hx">
		<toString public="1" set="method" line="45" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts expression `e` to a human-readable String representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<iter public="1" set="method" line="71" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		If `e` has no sub-expressions, this operation has no effect.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function findStrings(e:Expr) {
			switch(e.expr) {
				case EConst(CString(s)):
					// handle s
				case _:
					ExprTools.iter(e, findStrings);
			}
		}
		```</haxe_doc>
		</iter>
		<map public="1" set="method" line="140" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<t path="haxe.macro.Expr"/>
				</f>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		If `e` has no sub-expressions, this operation returns `e` unchanged.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function capitalizeStrings(e:Expr) {
			return switch(e.expr) {
				case EConst(CString(s)):
					{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };
				case _:
					ExprTools.map(e, capitalizeStrings);
			}
		}
		```</haxe_doc>
		</map>
		<getValue public="1" set="method" line="230" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Returns the value `e` represents.

		Supported expressions are:

		 - `Int`, `Float` and `String` literals
		 - identifiers `true`, `false` and `null`
		 - structure declarations if all their fields are values
		 - array declarations if all their elements are values
		 - unary operators `-`, `!` and `~` if the operand is a value
		 - binary operators except `=>`, `...` and assignments

		Parentheses, metadata and the `untyped` keyword are ignored.

		If any non-value is encountered, an exception of type `String` is
		thrown.

		If `e` is null, the result is unspecified.]]></haxe_doc>
		</getValue>
		<opt get="inline" set="null" line="291" static="1"><f a="e:f">
	<x path="Null"><t path="haxe.macro.Expr"/></x>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<t path="haxe.macro.Expr"/>
</f></opt>
		<opt2 get="inline" set="null" line="294" static="1"><f a="e:f">
	<x path="Null"><t path="haxe.macro.Expr"/></x>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></opt2>
		<haxe_doc>This class provides some utility methods to work with expressions. It is
	best used through 'using haxe.macro.ExprTools' syntax and then provides
	additional methods on haxe.macro.Expr instances.

	While mainly intended to be used in macros, it works in non-macro code as
	well.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprArrayTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/ExprTools.hx" module="haxe.macro.ExprTools">
		<map public="1" set="method" line="303" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></map>
		<iter public="1" set="method" line="310" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<haxe_doc>This class provides functions on expression arrays for convenience. For a
	detailed reference on each method, see the documentation of ExprTools.</haxe_doc>
	</class>
	<class path="haxe.macro.Format" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Format.hx"><haxe_doc>The actual macro implemented for Std.format</haxe_doc></class>
	<typedef path="haxe.macro.JSGenApi" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/JSGenApi.hx">
		<a>
			<types>
				<c path="Array"><e path="haxe.macro.Type"/></c>
				<haxe_doc>all the types that were compiled by Haxe</haxe_doc>
			</types>
			<setTypeAccessor set="method">
				<f a="callb">
					<f a="">
						<e path="haxe.macro.Type"/>
						<c path="String"/>
					</f>
					<x path="Void"/>
				</f>
				<haxe_doc>define the JS code that gets generated when a class or enum is accessed in a typed expression</haxe_doc>
			</setTypeAccessor>
			<setCurrentClass set="method">
				<f a="c">
					<t path="haxe.macro.ClassType"/>
					<x path="Void"/>
				</f>
				<haxe_doc>select the current classe</haxe_doc>
			</setCurrentClass>
			<quoteString set="method">
				<f a="s">
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc>quote and escape the given string constant</haxe_doc>
			</quoteString>
			<outputFile>
				<c path="String"/>
				<haxe_doc>the file in which the JS code can be generated</haxe_doc>
			</outputFile>
			<main>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>the main call expression, if a -main class is defined</haxe_doc>
			</main>
			<isKeyword set="method">
				<f a="ident">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>tells if the given identifier is a JS keyword</haxe_doc>
			</isKeyword>
			<hasFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>check if a feature is used</haxe_doc>
			</hasFeature>
			<generateValue set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for a given typed expression-value</haxe_doc>
			</generateValue>
			<generateStatement set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for any given typed expression</haxe_doc>
			</generateStatement>
			<buildMetaData set="method">
				<f a="t">
					<t path="haxe.macro.BaseType"/>
					<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				</f>
				<haxe_doc>create the metadata expression for the given type</haxe_doc>
			</buildMetaData>
			<addFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>add a feature</haxe_doc>
			</addFeature>
		</a>
		<haxe_doc>This is the api that is passed to the custom JS generator.</haxe_doc>
	</typedef>
	<class path="haxe.macro.MacroStringTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/MacroStringTools.hx">
		<toFieldExpr public="1" set="method" line="65" static="1">
			<f a="sl:?pos">
				<c path="Array"><c path="String"/></c>
				<t path="haxe.macro.Position"/>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Converts an array of Strings `sl` to a field expression.

		If `sl` has no elements, the result is null.

		If `sl` has one element, the result is `EConst(CIdent(sl[0])`.

		Otherwise the result is a chain of `EField` nodes.

		If `sl` is null, the result is unspecified.</haxe_doc>
		</toFieldExpr>
		<toDotPath public="1" set="method" line="88" static="1">
			<f a="pack:name">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a path given by package `pack` and name `name` to a `String`
		separated by dots.

		If `pack` has no elements, the result is `name`.

		If `pack` is null, the result is unspecified.

		Otherwise the elements of `pack` are joined with a separating dot, with
		an appended dot separating the result from `name`.</haxe_doc>
		</toDotPath>
		<toComplex public="1" set="method" line="92" static="1"><f a="path">
	<c path="String"/>
	<e path="haxe.macro.ComplexType"/>
</f></toComplex>
		<haxe_doc>This class provides some utility methods to work with strings in macro
	context.</haxe_doc>
	</class>
	<class path="haxe.macro.MacroType" params="Const" file="/home/runner/work/haxe/haxe/std/haxe/macro/MacroType.hx" extern="1"><haxe_doc><![CDATA[This type is meant to be used to generate custom types using a macro.
	For instance by doing MacroType<[my.Class.myMacro(55)]>]]></haxe_doc></class>
	<typedef path="haxe.macro.PlatformConfig" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx">
		<a>
			<usesUtf16 final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Uses utf16 encoding with ucs2 api</haxe_doc>
			</usesUtf16>
			<thisBeforeSuper final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports accessing `this` before calling `super(...)`</haxe_doc>
			</thisBeforeSuper>
			<sys final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Has access to the "sys" package</haxe_doc>
			</sys>
			<supportsUnicode final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports Unicode</haxe_doc>
			</supportsUnicode>
			<supportsThreads final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports threads</haxe_doc>
			</supportsThreads>
			<supportsRestArgs final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports rest arguments</haxe_doc>
			</supportsRestArgs>
			<supportsFunctionEquality final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Supports function == function</haxe_doc>
			</supportsFunctionEquality>
			<supportsAtomics final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports atomic operations via haxe.Atomic</haxe_doc>
			</supportsAtomics>
			<staticTypeSystem final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Has a static type system, with not-nullable basic types (Int/Float/Bool)</haxe_doc>
			</staticTypeSystem>
			<scoping final="1" set="null">
				<t path="haxe.macro.VarScopingConfig"/>
				<haxe_doc>The scoping of local variables</haxe_doc>
			</scoping>
			<reservedTypePaths final="1" set="null">
				<c path="Array"><t path="haxe.macro.TypePath"/></c>
				<haxe_doc>Type paths that are reserved on the platform</haxe_doc>
			</reservedTypePaths>
			<padNulls final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>When calling a method with optional args, do we replace the missing args with "null" constants</haxe_doc>
			</padNulls>
			<overloadFunctions final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Does the platform natively support overloaded functions</haxe_doc>
			</overloadFunctions>
			<exceptions final="1" set="null">
				<t path="haxe.macro.ExceptionsConfig"/>
				<haxe_doc>Exceptions handling config</haxe_doc>
			</exceptions>
			<capturePolicy final="1" set="null">
				<e path="haxe.macro.CapturePolicy"/>
				<haxe_doc>Captured variables handling (see before)</haxe_doc>
			</capturePolicy>
			<addFinalReturn final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Add a final return to methods not having one already - prevent some compiler warnings</haxe_doc>
			</addFinalReturn>
		</a>
		<haxe_doc>Represents the internal structure generated with options assigned based on
	the target platform.

	Warning: `PlatformConfig` and the typedefs unique to its fields correspond to
	compiler-internal data structures and might change in minor Haxe releases in
	order to adapt to internal changes.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.CapturePolicy" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig">
		<None><haxe_doc>Do nothing, let the platform handle it</haxe_doc></None>
		<WrapRef><haxe_doc>Wrap all captured variables into a single-element array to allow modifications</haxe_doc></WrapRef>
		<LoopVars><haxe_doc>Similar to wrap ref, but will only apply to the locals that are declared in loops</haxe_doc></LoopVars>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.VarScopingConfig" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig"><a>
	<scope final="1" set="null"><e path="haxe.macro.VarScope"/></scope>
	<flags final="1" set="null"><c path="Array"><e path="haxe.macro.VarScopingFlags"/></c></flags>
</a></typedef>
	<enum path="haxe.macro.VarScope" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig">
		<FunctionScope/>
		<BlockScope/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.VarScopingFlags" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig">
		<VarHoisting><haxe_doc>Variables are hoisted in their scope</haxe_doc></VarHoisting>
		<NoShadowing><haxe_doc>It's not allowed to shadow existing variables in a scope.</haxe_doc></NoShadowing>
		<NoCatchVarShadowing><haxe_doc>It's not allowed to shadow a `catch` variable.</haxe_doc></NoCatchVarShadowing>
		<ReserveCurrentTopLevelSymbol><haxe_doc>Local vars cannot have the same name as the current top-level package or
		(if in the root package) current class name</haxe_doc></ReserveCurrentTopLevelSymbol>
		<ReserveAllTopLevelSymbols><haxe_doc>Local vars cannot have a name used for any top-level symbol
		(packages and classes in the root package)</haxe_doc></ReserveAllTopLevelSymbols>
		<ReserveAllTypesFlat><haxe_doc>Reserve all type-paths converted to "flat path" with `Path.flat_path`</haxe_doc></ReserveAllTypesFlat>
		<ReserveNames a="names">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>List of names cannot be taken by local vars</haxe_doc>
		</ReserveNames>
		<SwitchCasesNoBlocks><haxe_doc>Cases in a `switch` won't have blocks, but will share the same outer scope.</haxe_doc></SwitchCasesNoBlocks>
	</enum>
	<typedef path="haxe.macro.ExceptionsConfig" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig"><a>
	<wildcardCatch final="1" set="null">
		<t path="haxe.macro.TypePath"/>
		<haxe_doc>Path of a native class or interface, which can be used for wildcard catches.</haxe_doc>
	</wildcardCatch>
	<nativeThrows final="1" set="null">
		<c path="Array"><t path="haxe.macro.TypePath"/></c>
		<haxe_doc>Base types which may be thrown from Haxe code without wrapping.</haxe_doc>
	</nativeThrows>
	<nativeCatches final="1" set="null">
		<c path="Array"><t path="haxe.macro.TypePath"/></c>
		<haxe_doc>Base types which may be caught from Haxe code without wrapping.</haxe_doc>
	</nativeCatches>
	<baseThrow final="1" set="null">
		<t path="haxe.macro.TypePath"/>
		<haxe_doc>Path of a native base class or interface, which can be thrown.
		This type is used to cast `haxe.Exception.thrown(v)` calls to.
		For example `throw 123` is compiled to `throw (cast Exception.thrown(123):ec_base_throw)`</haxe_doc>
	</baseThrow>
	<avoidWrapping final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>Hint exceptions filter to avoid wrapping for targets, which can throw/catch any type
		Ignored on targets with a specific native base type for exceptions.</haxe_doc>
	</avoidWrapping>
</a></typedef>
	<class path="haxe.macro.PositionTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PositionTools.hx">
		<here public="1" set="method" static="1">
			<f a=""><t path="haxe.macro.Position"/></f>
			<haxe_doc>Returns the `Position` where the caller of `here` is.</haxe_doc>
		</here>
		<getInfos public="1" set="method" line="44" static="1">
			<f a="p">
				<t path="haxe.macro.Position"/>
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
			</f>
			<haxe_doc>Like `Context.getPosInfos`, except this method is available on all platforms.</haxe_doc>
		</getInfos>
		<make public="1" set="method" line="55" static="1">
			<f a="inf">
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
				<t path="haxe.macro.Position"/>
			</f>
			<haxe_doc>Like `Context.makePosition`, except this method is available on all platforms.</haxe_doc>
		</make>
	</class>
	<class path="haxe.macro.Printer" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Printer.hx">
		<tabs><c path="String"/></tabs>
		<tabString><c path="String"/></tabString>
		<printUnop public="1" set="method" line="44"><f a="op">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></printUnop>
		<printBinop public="1" set="method" line="54"><f a="op">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></printBinop>
		<escapeString set="method" line="83"><f a="s:delim">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<printFormatString public="1" set="method" line="93"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printFormatString>
		<printString public="1" set="method" line="97"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printString>
		<printConstant public="1" set="method" line="102"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></printConstant>
		<printTypeParam public="1" set="method" line="113"><f a="param">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></printTypeParam>
		<printTypePath public="1" set="method" line="119"><f a="tp">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></printTypePath>
		<printComplexType public="1" set="method" line="126"><f a="ct">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></printComplexType>
		<printMetadata public="1" set="method" line="154"><f a="meta">
	<t path="haxe.macro.MetadataEntry"/>
	<c path="String"/>
</f></printMetadata>
		<printAccess public="1" set="method" line="157"><f a="access">
	<e path="haxe.macro.Access"/>
	<c path="String"/>
</f></printAccess>
		<printField public="1" set="method" line="172"><f a="field">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printField>
		<printTypeParamDecl public="1" set="method" line="200"><f a="tpd">
	<t path="haxe.macro.TypeParamDecl"/>
	<c path="String"/>
</f></printTypeParamDecl>
		<printFunctionArg public="1" set="method" line="207"><f a="arg">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></printFunctionArg>
		<printFunction public="1" set="method" line="209"><f a="func:?kind">
	<t path="haxe.macro.Function"/>
	<e path="haxe.macro.FunctionKind"/>
	<c path="String"/>
</f></printFunction>
		<printVar public="1" set="method" line="223"><f a="v">
	<t path="haxe.macro.Var"/>
	<c path="String"/>
</f></printVar>
		<printObjectFieldKey public="1" set="method" line="231"><f a="of">
	<t path="haxe.macro.ObjectField"/>
	<c path="String"/>
</f></printObjectFieldKey>
		<printObjectField public="1" set="method" line="238"><f a="of">
	<t path="haxe.macro.ObjectField"/>
	<c path="String"/>
</f></printObjectField>
		<printExpr public="1" set="method" line="243"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExpr>
		<printExprs public="1" set="method" line="302"><f a="el:sep">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<c path="String"/>
	<c path="String"/>
</f></printExprs>
		<printExtension set="method" line="306"><f a="tpl:fields">
	<c path="Array"><t path="haxe.macro.TypePath"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printExtension>
		<printStructure set="method" line="313"><f a="fields">
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printStructure>
		<printTypeDefinition public="1" set="method" line="317">
			<f a="t:?printPackage" v=":true">
				<t path="haxe.macro.TypeDefinition"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ printPackage : true }</e></m></meta>
		</printTypeDefinition>
		<printFieldWithDelimiter set="method" line="436"><f a="f">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printFieldWithDelimiter>
		<opt params="T" set="method" line="447">
			<f a="v:f:?prefix" v="::&quot;&quot;">
				<c path="opt.T"/>
				<f a="">
					<c path="opt.T"/>
					<c path="String"/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ prefix : "" }</e></m></meta>
		</opt>
		<printExprWithPositions public="1" set="method" line="449"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExprWithPositions>
		<new public="1" set="method" line="38">
			<f a="?tabString" v="&quot;\t&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tabString : "\t" }</e></m></meta>
		</new>
		<haxe_doc>This class provides some utility methods to convert elements from the
	macro context to a human-readable String representation.</haxe_doc>
	</class>
	<typedef path="haxe.macro.TExprTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ExprTools"/>
		<haxe_doc><![CDATA[This class can be added via `using haxe.macro.Tools` in order to enable
	`using` functionality on these macro tool classes:

	- `haxe.macro.ExprTools`
	- `haxe.macro.ComplexTypeTools`
	- `haxe.macro.TypeTools`
	- `haxe.macro.MacroStringTools`
	- `haxe.macro.TypedExprTools`
	- `haxe.macro.PositionTools`

	  @see <https://haxe.org/manual/lf-static-extension.html>]]></haxe_doc>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TComplexTypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ComplexTypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TMacroStringTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.MacroStringTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypedExprTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypedExprTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TPositionTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.PositionTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Type" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx">
		<TMono a="t">
			<t path="haxe.macro.Ref"><x path="Null"><e path="haxe.macro.Type"/></x></t>
			<haxe_doc>Represents a monomorph.

		@see https://haxe.org/manual/types-monomorph.html</haxe_doc>
		</TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an enum instance.

		@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a class instance.

		@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a typedef.

		@see https://haxe.org/manual/type-system-typedef.html</haxe_doc>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
			<haxe_doc>Represents a function type.

		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFun>
		<TAnonymous a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t>
			<haxe_doc>Represents an anonymous structure type.

		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TDynamic a="t">
			<x path="Null"><e path="haxe.macro.Type"/></x>
			<haxe_doc>Represents Dynamic.

		@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		</TDynamic>
		<TLazy a="f">
			<f a=""><e path="haxe.macro.Type"/></f>
			<haxe_doc>Used internally by the compiler to delay some typing.</haxe_doc>
		</TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an abstract type.

		@see https://haxe.org/manual/types-abstract.html</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.AnonStatus" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AClosed><haxe_doc>A closed structure is considered complete. That is, no further fields
		can be added to it.</haxe_doc></AClosed>
		<AOpened><haxe_doc>An open structure allows having additional fields added to it, which is
		used during type inference. It is closed upon unification.</haxe_doc></AOpened>
		<AConst><haxe_doc>A const structure is one that appears directly in syntax. It cannot be
		assigned to a smaller structure type (that is, it does not allow
		structural sub-typing).</haxe_doc></AConst>
		<AExtend a="tl">
			<t path="haxe.macro.Ref"><c path="Array"><e path="haxe.macro.Type"/></c></t>
			<haxe_doc>Represents a structure which extends one or multiple structures defined
		in `tl`.

		@see https://haxe.org/manual/type-system-extensions.html</haxe_doc>
		</AExtend>
		<AClassStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A structure that represents the static fields of a class.</haxe_doc>
		</AClassStatics>
		<AEnumStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>A structure that represents the constructors of an enum.</haxe_doc>
		</AEnumStatics>
		<AAbstractStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>A structure that represents the static fields of an abstract.</haxe_doc>
		</AAbstractStatics>
		<haxe_doc>Represents the kind of the anonymous structure type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParameter" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<defaultType>
				<x path="Null"><e path="haxe.macro.Type"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The default type for this type parameter.</haxe_doc>
			</defaultType>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is final.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is extern.</haxe_doc>
			</isExtern>
			<isAbstract>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is abstract.</haxe_doc>
			</isAbstract>
			<expr set="method">
				<f a=""><x path="Null"><t path="haxe.macro.TypedExpr"/></x></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ClassKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KNormal><haxe_doc>A normal class.</haxe_doc></KNormal>
		<KTypeParameter a="constraints">
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A type parameter class with a set of constraints.</haxe_doc>
		</KTypeParameter>
		<KModuleFields a="module">
			<c path="String"/>
			<haxe_doc>A class containing module fields.</haxe_doc>
		</KModuleFields>
		<KExpr a="expr">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A special kind of class to encode expressions into type parameters.</haxe_doc>
		</KExpr>
		<KGeneric><haxe_doc>A `@:generic` base class.</haxe_doc></KGeneric>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A concrete `@:generic` instance, referencing the original class and the
		applied type parameters.</haxe_doc>
		</KGenericInstance>
		<KMacroType><haxe_doc>A special class for `haxe.macro.MacroType`.

		@deprecated</haxe_doc></KMacroType>
		<KAbstractImpl a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An implementation class of an abstract, i.e. where all its run-time code
		is.</haxe_doc>
		</KAbstractImpl>
		<KGenericBuild><haxe_doc>A `@:genericBuild` class</haxe_doc></KGenericBuild>
		<haxe_doc>Represents the kind of a class.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.BaseType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<x path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></x>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>If true the class is final and cannot be extended.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<isAbstract>
				<x path="Bool"/>
				<haxe_doc>If true the class is abstract and cannot be instantiated directly.</haxe_doc>
			</isAbstract>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></x>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<t path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</t>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolveWrite>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolveWrite>
			<resolve>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></x>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
			<haxe_doc>A variable of property, depending on the `read` and `write` values.</haxe_doc>
		</FVar>
		<FMethod a="k">
			<e path="haxe.macro.MethodKind"/>
			<haxe_doc>A method</haxe_doc>
		</FMethod>
		<haxe_doc>Represents a field kind.</haxe_doc>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccNormal><haxe_doc>Normal access (`default`).</haxe_doc></AccNormal>
		<AccNo><haxe_doc>Private access (`null`).</haxe_doc></AccNo>
		<AccNever><haxe_doc>No access (`never`).</haxe_doc></AccNever>
		<AccResolve><haxe_doc>Unused.</haxe_doc></AccResolve>
		<AccCall><haxe_doc>Access through accessor function (`get`, `set`, `dynamic`).</haxe_doc></AccCall>
		<AccInline><haxe_doc>Inline access (`inline`).</haxe_doc></AccInline>
		<AccRequire a="r:?msg">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Failed access due to a `@:require` metadata.</haxe_doc>
		</AccRequire>
		<AccCtor><haxe_doc>Access is only allowed from the constructor.</haxe_doc></AccCtor>
		<haxe_doc>Represents the variable accessor.</haxe_doc>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal><haxe_doc>A normal method.</haxe_doc></MethNormal>
		<MethInline><haxe_doc>An inline method.

		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></MethInline>
		<MethDynamic><haxe_doc>A dynamic, rebindable method.

		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></MethDynamic>
		<MethMacro><haxe_doc>A macro method.</haxe_doc></MethMacro>
		<haxe_doc>Represents the method kind.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.TConstant" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TInt a="i">
			<x path="Int"/>
			<haxe_doc>An `Int` literal.</haxe_doc>
		</TInt>
		<TFloat a="s">
			<c path="String"/>
			<haxe_doc>A `Float` literal, represented as String to avoid precision loss.</haxe_doc>
		</TFloat>
		<TString a="s">
			<c path="String"/>
			<haxe_doc>A `String` literal.</haxe_doc>
		</TString>
		<TBool a="b">
			<x path="Bool"/>
			<haxe_doc>A `Bool` literal.</haxe_doc>
		</TBool>
		<TNull><haxe_doc>The constant `null`.</haxe_doc></TNull>
		<TThis><haxe_doc>The constant `this`.</haxe_doc></TThis>
		<TSuper><haxe_doc>The constant `super`.</haxe_doc></TSuper>
		<haxe_doc>Represents typed constant.</haxe_doc>
	</enum>
	<enum path="haxe.macro.ModuleType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TClassDecl a="c">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A class.</haxe_doc>
		</TClassDecl>
		<TEnumDecl a="e">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>An enum.</haxe_doc>
		</TEnumDecl>
		<TTypeDecl a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<haxe_doc>A typedef.</haxe_doc>
		</TTypeDecl>
		<TAbstract a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An abstract.</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a module type. These are the types that can be declared in a Haxe
	module and which are passed to the generators (except `TTypeDecl`).</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TFunc" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><x path="Null"><t path="haxe.macro.TypedExpr"/></x></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FInstance a="c:params:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on a class instance `c` with type parameters
		`params`.</haxe_doc>
		</FInstance>
		<FStatic a="c:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Static access of a field `cf` on a class `c`.</haxe_doc>
		</FStatic>
		<FAnon a="cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on an anonymous structure.</haxe_doc>
		</FAnon>
		<FDynamic a="s">
			<c path="String"/>
			<haxe_doc>Dynamic field access of a field named `s`.</haxe_doc>
		</FDynamic>
		<FClosure a="c:cf">
			<x path="Null"><a>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
	<c><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></c>
</a></x>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Closure field access of field `cf` on a class instance `c` with type
		parameters `params`.</haxe_doc>
		</FClosure>
		<FEnum a="e:ef">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<t path="haxe.macro.EnumField"/>
			<haxe_doc>Field access to an enum constructor `ef` of enum `e`.</haxe_doc>
		</FEnum>
		<haxe_doc>Represents the kind of field access in the typed AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.TypedExprDef" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TConst a="c">
			<e path="haxe.macro.TConstant"/>
			<haxe_doc>A constant.</haxe_doc>
		</TConst>
		<TLocal a="v">
			<t path="haxe.macro.TVar"/>
			<haxe_doc>Reference to a local variable `v`.</haxe_doc>
		</TLocal>
		<TArray a="e1:e2">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</TArray>
		<TBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</TBinop>
		<TField a="e:fa">
			<t path="haxe.macro.TypedExpr"/>
			<e path="haxe.macro.FieldAccess"/>
			<haxe_doc>Field access on `e` according to `fa`.</haxe_doc>
		</TField>
		<TTypeExpr a="m">
			<e path="haxe.macro.ModuleType"/>
			<haxe_doc>Reference to a module type `m`.</haxe_doc>
		</TTypeExpr>
		<TParenthesis a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</TParenthesis>
		<TObjectDecl a="fields">
			<c path="Array"><a>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</TObjectDecl>
		<TArrayDecl a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</TArrayDecl>
		<TCall a="e:el">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A call `e(el)`.</haxe_doc>
		</TCall>
		<TNew a="c:params:el">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc><![CDATA[A constructor call `new c<params>(el)`.]]></haxe_doc>
		</TNew>
		<TUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</TUnop>
		<TFunction a="tfunc">
			<t path="haxe.macro.TFunc"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</TFunction>
		<TVar a="v:expr">
			<t path="haxe.macro.TVar"/>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>A variable declaration `var v` or `var v = expr`.</haxe_doc>
		</TVar>
		<TBlock a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A block declaration `{el}`.</haxe_doc>
		</TBlock>
		<TFor a="v:e1:e2">
			<t path="haxe.macro.TVar"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</TFor>
		<TIf a="econd:eif:eelse">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</TIf>
		<TWhile a="econd:e:normalWhile">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</TWhile>
		<TSwitch a="e:cases:edef">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.TypedExpr"/></c></values>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>Represents a `switch` expression with related cases and an optional
		`default` case if edef != null.</haxe_doc>
		</TSwitch>
		<TTry a="e:catches">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<v><t path="haxe.macro.TVar"/></v>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</TTry>
		<TReturn a="e">
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</TReturn>
		<TBreak><haxe_doc>A `break` expression.</haxe_doc></TBreak>
		<TContinue><haxe_doc>A `continue` expression.</haxe_doc></TContinue>
		<TThrow a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</TThrow>
		<TCast a="e:m">
			<t path="haxe.macro.TypedExpr"/>
			<x path="Null"><e path="haxe.macro.ModuleType"/></x>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</TCast>
		<TMeta a="m:e1">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `@m e1` expression.</haxe_doc>
		</TMeta>
		<TEnumParameter a="e1:ef:index">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.EnumField"/>
			<x path="Int"/>
			<haxe_doc>Access to an enum parameter (generated by the pattern matcher).</haxe_doc>
		</TEnumParameter>
		<TEnumIndex a="e1">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Access to an enum index (generated by the pattern matcher).</haxe_doc>
		</TEnumIndex>
		<TIdent a="s">
			<c path="String"/>
			<haxe_doc>An unknown identifier.</haxe_doc>
		</TIdent>
		<haxe_doc>Represents kind of a node in the typed AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TVar" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<x path="Null"><t path="haxe.macro.MetaAccess"/></x>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<isStatic set="null">
				<x path="Bool"/>
				<haxe_doc>Whether the variable is a local static variable</haxe_doc>
			</isStatic>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<x path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><x path="Null"><t path="haxe.macro.TypedExpr"/></x></expr>
</a></x>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<class path="haxe.macro.TypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/TypeTools.hx">
		<nullable set="method" line="38" static="1"><f a="complexType">
	<e path="haxe.macro.ComplexType"/>
	<e path="haxe.macro.ComplexType"/>
</f></nullable>
		<toField set="method" line="41" static="1"><f a="cf">
	<t path="haxe.macro.ClassField"/>
	<t path="haxe.macro.Field"/>
</f></toField>
		<toComplexType public="1" set="method" line="99" static="1">
			<f a="type">
				<x path="Null"><e path="haxe.macro.Type"/></x>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			</f>
			<haxe_doc>Returns a syntax-level type corresponding to Type `t`.

		This function is mostly inverse to `ComplexTypeTools.toType`, but may
		lose some information on types that do not have a corresponding syntax
		version, such as monomorphs. In these cases, the result is null.

		If `t` is null, an internal exception is thrown.</haxe_doc>
		</toComplexType>
		<toTypeParam set="method" line="144" static="1"><f a="type">
	<e path="haxe.macro.Type"/>
	<e path="haxe.macro.TypeParam"/>
</f></toTypeParam>
		<toTypePath set="method" line="152" static="1"><f a="baseType:params">
	<t path="haxe.macro.BaseType"/>
	<c path="Array"><e path="haxe.macro.Type"/></c>
	<t path="haxe.macro.TypePath"/>
</f></toTypePath>
		<findField public="1" set="method" line="478" static="1">
			<f a="c:name:?isStatic" v="::false">
				<t path="haxe.macro.ClassType"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
			</f>
			<meta><m n=":value"><e>{ isStatic : false }</e></m></meta>
			<haxe_doc>Resolves the field named `name` on class `c`.

		If `isStatic` is true, the classes' static fields are checked. Otherwise
		the classes' member fields are checked.

		If the field is found, it is returned. Otherwise if `c` has a super
		class, `findField` recursively checks that super class. Otherwise null
		is returned.

		If any argument is null, the result is unspecified.</haxe_doc>
		</findField>
		<haxe_doc>This class provides some utility methods to work with types. It is
	best used through 'using haxe.macro.TypeTools' syntax and then provides
	additional methods on haxe.macro.Type instances.</haxe_doc>
	</class>
	<class path="haxe.macro.TypedExprTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/TypedExprTools.hx">
		<with set="method" line="33" static="1"><f a="e:?edef:?t">
	<t path="haxe.macro.TypedExpr"/>
	<e path="haxe.macro.TypedExprDef"/>
	<e path="haxe.macro.Type"/>
	<a>
		<t><x path="Null"><e path="haxe.macro.Type"/></x></t>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><x path="Null"><e path="haxe.macro.TypedExprDef"/></x></expr>
	</a>
</f></with>
		<map public="1" set="method" line="48" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</map>
		<iter public="1" set="method" line="85" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		See `haxe.macro.ExprTools.iter` for details on iterating expressions in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</iter>
		<mapWithType public="1" set="method" line="138" static="1">
			<f a="e:f:ft:fv">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<f a="">
					<e path="haxe.macro.Type"/>
					<e path="haxe.macro.Type"/>
				</f>
				<f a="">
					<t path="haxe.macro.TVar"/>
					<t path="haxe.macro.TVar"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.
		Additionally, types are mapped using `ft` and variables are mapped using
		`fv`.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</mapWithType>
		<haxe_doc>This class provides some utility methods to work with typed expressions.
	It is best used through 'using haxe.macro.TypedExprTools' syntax and then
	provides additional methods on `haxe.macro.TypedExpr` instances.</haxe_doc>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="String"/>
		<haxe_doc>The (dot-)path of the runtime type.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.FunctionArgument" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<value>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</value>
			<t><e path="haxe.rtti.CType"/></t>
			<opt><x path="Bool"/></opt>
			<name><c path="String"/></name>
		</a>
		<haxe_doc>The function argument runtime type information.</haxe_doc>
	</typedef>
	<enum path="haxe.rtti.CType" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="Array"><t path="haxe.rtti.FunctionArgument"/></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CAnonymous a="fields"><c path="Array"><t path="haxe.rtti.ClassField"/></c></CAnonymous>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CAbstract a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CAbstract>
		<haxe_doc>The runtime member types.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The path of the type.</haxe_doc>
			</path>
			<params>
				<c path="Array"><e path="haxe.rtti.CType"/></c>
				<haxe_doc>The array of parameters types.</haxe_doc>
			</params>
		</a>
		<haxe_doc>The type parameters in the runtime type information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>An array of strings representing the names of the type parameters the type
	has. As of Haxe 3.2.0, this does not include the constraints.</haxe_doc>
	</typedef>
	<enum path="haxe.rtti.Rights" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RCall a="m"><c path="String"/></RCall>
		<RMethod/>
		<RDynamic/>
		<RInline/>
		<haxe_doc>Represents the runtime rights of a type.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.MetaData" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><a>
	<params><c path="Array"><c path="String"/></c></params>
	<name><c path="String"/></name>
</a></c>
		<haxe_doc>The list of runtime metadata.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.ClassField" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the field.</haxe_doc>
			</type>
			<set>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [write access](https://haxe.org/manual/class-field-property.html#define-write-access)
		behavior of the field.</haxe_doc>
			</set>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the field is available.</haxe_doc>
			</platforms>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters
		the field has.</haxe_doc>
			</params>
			<overloads>
				<x path="Null"><c path="Array"><t path="haxe.rtti.ClassField"/></c></x>
				<haxe_doc>The list of available overloads for the fields or `null` if no overloads
		exists.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the field was annotated with.</haxe_doc>
			</meta>
			<line>
				<x path="Null"><x path="Int"/></x>
				<haxe_doc>The line number where the field is defined. This information is only
		available if the field has an expression.
		Otherwise the value is `null`.</haxe_doc>
			</line>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field is `public`.</haxe_doc>
			</isPublic>
			<isOverride>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field overrides another field.</haxe_doc>
			</isOverride>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field is `final`.</haxe_doc>
			</isFinal>
			<get>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [read access](https://haxe.org/manual/class-field-property.html#define-read-access)
		behavior of the field.</haxe_doc>
			</get>
			<expr>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The actual expression of the field or `null` if there is no expression.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the field. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or
		if the field has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc><![CDATA[The runtime class field information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#class-field-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The general runtime type information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<tdynamic>
				<x path="Null"><e path="haxe.rtti.CType"/></x>
				<haxe_doc>The type which is dynamically implemented by the class or `null` if no
		such type exists.</haxe_doc>
			</tdynamic>
			<superClass>
				<x path="Null"><t path="haxe.rtti.PathParams"/></x>
				<haxe_doc>The class' parent class defined by its type path and list of type
		parameters.</haxe_doc>
			</superClass>
			<statics>
				<c path="Array"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of static class fields.</haxe_doc>
			</statics>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is actually an [interface](https://haxe.org/manual/types-interfaces.html).</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is `final`.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><t path="haxe.rtti.PathParams"/></c>
				<haxe_doc>The list of interfaces defined by their type path and list of type
		parameters.</haxe_doc>
			</interfaces>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<fields>
				<c path="Array"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of member [class fields](https://haxe.org/manual/class-field.html).</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The runtime class definition information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the constructor is
		available.</haxe_doc>
			</platforms>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the constructor was annotated with.</haxe_doc>
			</meta>
			<doc>
				<c path="String"/>
				<haxe_doc>The documentation of the constructor. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<args>
				<x path="Null"><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></x>
				<haxe_doc>The list of arguments the constructor has or `null` if no arguments are
		available.</haxe_doc>
			</args>
		</a>
		<haxe_doc><![CDATA[The runtime enum constructor information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-constructor-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the enum is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<constructors>
				<c path="Array"><t path="haxe.rtti.EnumField"/></c>
				<haxe_doc>The list of enum constructors.</haxe_doc>
			</constructors>
		</a>
		<haxe_doc><![CDATA[The enum runtime type information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-type-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<types>
				<t path="Map">
					<c path="String"/>
					<e path="haxe.rtti.CType"/>
				</t>
				<haxe_doc>The types of the typedef, by platform.</haxe_doc>
			</types>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the typedef.</haxe_doc>
			</type>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The typedef runtime information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Abstractdef" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<to><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><x path="Null"><c path="String"/></x></field>
</a></c></to>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<impl><t path="haxe.rtti.Classdef"/></impl>
			<from><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><x path="Null"><c path="String"/></x></field>
</a></c></from>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<athis><e path="haxe.rtti.CType"/></athis>
		</a>
		<haxe_doc><![CDATA[The abstract type runtime information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#abstract-type-information>]]></haxe_doc>
	</typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TAbstractdecl a="a"><t path="haxe.rtti.Abstractdef"/></TAbstractdecl>
		<haxe_doc>The tree types of the runtime type.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		<haxe_doc>Array of `TypeTree`.</haxe_doc>
	</typedef>
	<class path="haxe.rtti.TypeApi" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="377" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="398" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the given `CType` is a variable or `false` if it is a
		function.</haxe_doc>
		</isVar>
		<leq params="T" set="method" line="405" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="leq.T"/></c>
	<c path="Array"><c path="leq.T"/></c>
	<x path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="425" static="1">
			<f a="r1:r2">
				<e path="haxe.rtti.Rights"/>
				<e path="haxe.rtti.Rights"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `r1 == r2`, this function performs a deep equality check on
		the given `Rights` instances.

		If `r1` or `r2` are `null`, the result is unspecified.</haxe_doc>
		</rightsEq>
		<typeEq public="1" set="method" line="446" static="1">
			<f a="t1:t2">
				<e path="haxe.rtti.CType"/>
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `t1 == t2`, this function performs a deep equality check on
		the given `CType` instances.

		If `t1` or `t2` are `null`, the result is unspecified.</haxe_doc>
		</typeEq>
		<fieldEq public="1" set="method" line="506" static="1">
			<f a="f1:f2">
				<t path="haxe.rtti.ClassField"/>
				<t path="haxe.rtti.ClassField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `f1 == f2`, this function performs a deep equality check on
		the given `ClassField` instances.

		If `f1` or `f2` are `null`, the result is unspecified.</haxe_doc>
		</fieldEq>
		<constructorEq public="1" set="method" line="532" static="1">
			<f a="c1:c2">
				<t path="haxe.rtti.EnumField"/>
				<t path="haxe.rtti.EnumField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `c1 == c2`, this function performs a deep equality check on
		the arguments of the enum constructors, if exists.

		If `c1` or `c2` are `null`, the result is unspecified.</haxe_doc>
		</constructorEq>
		<haxe_doc>Contains type and equality checks functionalities for RTTI.</haxe_doc>
	</class>
	<class path="haxe.rtti.CTypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<toString public="1" set="method" line="555" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the string representation of `CType`.</haxe_doc>
		</toString>
		<nameWithParams set="method" line="578" static="1"><f a="name:params">
	<c path="String"/>
	<c path="Array"><e path="haxe.rtti.CType"/></c>
	<c path="String"/>
</f></nameWithParams>
		<functionArgumentName set="method" line="585" static="1"><f a="arg">
	<t path="haxe.rtti.FunctionArgument"/>
	<c path="String"/>
</f></functionArgumentName>
		<classField set="method" line="592" static="1"><f a="cf">
	<t path="haxe.rtti.ClassField"/>
	<c path="String"/>
</f></classField>
		<haxe_doc>The `CTypeTools` class contains some extra functionalities for handling
	`CType` instances.</haxe_doc>
	</class>
	<typedef path="haxe.rtti._Meta.MetaObject" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/Meta.hx" private="1" module="haxe.rtti.Meta"><a>
	<statics>
		<x path="Null"><d><d><x path="Null"><c path="Array"><d/></c></x></d></d></x>
		<meta><m n=":optional"/></meta>
	</statics>
	<obj>
		<x path="Null"><d><x path="Null"><c path="Array"><d/></c></x></d></x>
		<meta><m n=":optional"/></meta>
	</obj>
	<fields>
		<x path="Null"><d><d><x path="Null"><c path="Array"><d/></c></x></d></d></x>
		<meta><m n=":optional"/></meta>
	</fields>
</a></typedef>
	<class path="haxe.rtti.Meta" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="40" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given type (class or enum)</haxe_doc>
		</getType>
		<isInterface set="method" line="46" static="1"><f a="t">
	<d/>
	<x path="Bool"/>
</f></isInterface>
		<getMeta set="method" line="54" static="1">
			<f a="t">
				<d/>
				<t path="haxe.rtti._Meta.MetaObject"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getMeta>
		<getStatics public="1" set="method" line="79" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class static fields</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="87" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc><![CDATA[An API to access classes and enums metadata at runtime.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.rtti.Rtti" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/Rtti.hx">
		<getRtti public="1" params="T" set="method" line="41" static="1">
			<f a="c">
				<x path="Class"><c path="getRtti.T"/></x>
				<t path="haxe.rtti.Classdef"/>
			</f>
			<haxe_doc>Returns the `haxe.rtti.CType.Classdef` corresponding to class `c`.

		If `c` has no runtime type information, e.g. because no `@:rtti` was
		added, an exception of type `String` is thrown.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getRtti>
		<hasRtti public="1" params="T" set="method" line="61" static="1">
			<f a="c">
				<x path="Class"><c path="hasRtti.T"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `c` has runtime type information.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</hasRtti>
		<haxe_doc><![CDATA[Rtti is a helper class which supplements the `@:rtti` metadata.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="43"><f a="?l">
	<t path="haxe.rtti.TypeRoot"/>
	<x path="Void"/>
</f></sort>
		<sortFields set="method" line="72"><f a="a">
	<c path="Array"><t path="haxe.rtti.ClassField"/></c>
	<x path="Void"/>
</f></sortFields>
		<process public="1" set="method" line="90"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></process>
		<mergeRights set="method" line="96"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeRights>
		<mergeDoc set="method" line="105"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeDoc>
		<mergeFields set="method" line="113"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeFields>
		<newField public="1" set="dynamic" line="118"><f a="c:f">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Void"/>
</f></newField>
		<mergeClasses set="method" line="120"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<x path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="158"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<x path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="178"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<x path="Bool"/>
</f></mergeTypedefs>
		<mergeAbstracts set="method" line="186"><f a="a:a2">
	<t path="haxe.rtti.Abstractdef"/>
	<t path="haxe.rtti.Abstractdef"/>
	<x path="Bool"/>
</f></mergeAbstracts>
		<merge set="method" line="203"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<x path="Void"/>
</f></merge>
		<mkPath set="method" line="295"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="299"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="306"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="316"><f a="c">
	<x path="haxe.xml.Access"/>
	<d/>
</f></xerror>
		<xroot set="method" line="320"><f a="x">
	<x path="haxe.xml.Access"/>
	<x path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="325"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xmeta set="method" line="336"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.MetaData"/>
</f></xmeta>
		<xoverloads set="method" line="347"><f a="x">
	<x path="haxe.xml.Access"/>
	<c path="Array"><t path="haxe.rtti.ClassField"/></c>
</f></xoverloads>
		<xpath set="method" line="355"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="366"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="417">
			<f a="x:?defPublic" v=":false">
				<x path="haxe.xml.Access"/>
				<x path="Bool"/>
				<t path="haxe.rtti.ClassField"/>
			</f>
			<meta><m n=":value"><e>{ defPublic : false }</e></m></meta>
		</xclassfield>
		<xenum set="method" line="446"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="471"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xabstract set="method" line="502"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Abstractdef"/>
</f></xabstract>
		<xtypedef set="method" line="540"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="568"><f a="x">
	<x path="haxe.xml.Access"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="624"><f a="x">
	<x path="haxe.xml.Access"/>
	<c path="Array"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="631"><f a=""><c path="Array"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="39"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[XmlParser processes the runtime type information (RTTI) which
	is stored as a XML string in a static field `__rtti`.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<abstract path="haxe.xml._Access.NodeAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="27" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="haxe.xml.Access"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="27" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="haxe.xml.Access"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class>
	<abstract path="haxe.xml._Access.AttribAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
	<resolve public="1" set="method" line="39" static="1">
		<f a="this:name">
			<c path="Xml"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":op"><e>a.b</e></m></meta>
	</resolve>
	<_hx_set set="method" line="49" static="1">
		<f a="this:name:value">
			<c path="Xml"/>
			<c path="String"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":op"><e>a.b</e></m></meta>
	</_hx_set>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
		<resolve public="1" set="method" line="39" static="1">
			<f a="this:name">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":op"><e>a.b</e></m></meta>
		</resolve>
		<_hx_set set="method" line="49" static="1">
			<f a="this:name:value">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":op"><e>a.b</e></m></meta>
		</_hx_set>
	</class>
	<abstract path="haxe.xml._Access.HasAttribAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="59" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="59" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class>
	<abstract path="haxe.xml._Access.HasNodeAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.HasNodeAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="68" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.HasNodeAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="68" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class>
	<abstract path="haxe.xml._Access.NodeListAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.NodeListAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="75" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<c path="Array"><x path="haxe.xml.Access"/></c>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.NodeListAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="75" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<c path="Array"><x path="haxe.xml.Access"/></c>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class>
	<abstract path="haxe.xml.Access" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx">
		<this><c path="Xml"/></this>
		<haxe_doc>The `haxe.xml.Access` API helps providing a fast dot-syntax access to the
	most common `Xml` methods.</haxe_doc>
		<impl><class path="haxe.xml._Access.Access_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
	<x public="1" get="accessor" set="null" static="1"><c path="Xml"/></x>
	<get_x public="1" get="inline" set="null" line="91" static="1"><f a="this">
	<c path="Xml"/>
	<c path="Xml"/>
</f></get_x>
	<name public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
	</name>
	<get_name get="inline" set="null" line="98" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_name>
	<innerData public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
	</innerData>
	<innerHTML public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
	</innerHTML>
	<node public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.NodeAccess"/>
		<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var access = new haxe.xml.Access(Xml.parse("<user><name>John</name></user>"));
		var user = access.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
	</node>
	<get_node get="inline" set="null" line="134" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.NodeAccess"/>
</f></get_node>
	<nodes public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.NodeListAccess"/>
		<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Access(Xml.parse("
			<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
			</users>"
		));

		var users = fast.node.users;
		for (user in users.nodes.user) {
			trace(user.att.name);
		}
		```]]></haxe_doc>
	</nodes>
	<get_nodes get="inline" set="null" line="156" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.NodeListAccess"/>
</f></get_nodes>
	<att public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.AttribAccess"/>
		<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
	</att>
	<get_att get="inline" set="null" line="175" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.AttribAccess"/>
</f></get_att>
	<has public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.HasAttribAccess"/>
		<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
	</has>
	<get_has get="inline" set="null" line="183" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.HasAttribAccess"/>
</f></get_has>
	<hasNode public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.HasNodeAccess"/>
		<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
	</hasNode>
	<get_hasNode get="inline" set="null" line="199" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.HasNodeAccess"/>
</f></get_hasNode>
	<elements public="1" get="accessor" set="null" static="1">
		<t path="Iterator"><x path="haxe.xml.Access"/></t>
		<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
	</elements>
	<get_elements get="inline" set="null" line="207" static="1"><f a="this">
	<c path="Xml"/>
	<t path="Iterator"><x path="haxe.xml.Access"/></t>
</f></get_elements>
	<_new public="1" get="inline" set="null" line="209" static="1">
		<f a="x">
			<c path="Xml"/>
			<x path="haxe.xml.Access"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_innerData set="method" line="215" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_innerData>
	<get_innerHTML set="method" line="237" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_innerHTML>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.Access_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
		<x public="1" get="accessor" set="null" static="1"><c path="Xml"/></x>
		<get_x public="1" get="inline" set="null" line="91" static="1"><f a="this">
	<c path="Xml"/>
	<c path="Xml"/>
</f></get_x>
		<name public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
		</name>
		<get_name get="inline" set="null" line="98" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_name>
		<innerData public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
		</innerData>
		<innerHTML public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
		</innerHTML>
		<node public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.NodeAccess"/>
			<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var access = new haxe.xml.Access(Xml.parse("<user><name>John</name></user>"));
		var user = access.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
		</node>
		<get_node get="inline" set="null" line="134" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.NodeAccess"/>
</f></get_node>
		<nodes public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.NodeListAccess"/>
			<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Access(Xml.parse("
			<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
			</users>"
		));

		var users = fast.node.users;
		for (user in users.nodes.user) {
			trace(user.att.name);
		}
		```]]></haxe_doc>
		</nodes>
		<get_nodes get="inline" set="null" line="156" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.NodeListAccess"/>
</f></get_nodes>
		<att public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.AttribAccess"/>
			<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
		</att>
		<get_att get="inline" set="null" line="175" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.AttribAccess"/>
</f></get_att>
		<has public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.HasAttribAccess"/>
			<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
		</has>
		<get_has get="inline" set="null" line="183" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.HasAttribAccess"/>
</f></get_has>
		<hasNode public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.HasNodeAccess"/>
			<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
		</hasNode>
		<get_hasNode get="inline" set="null" line="199" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.HasNodeAccess"/>
</f></get_hasNode>
		<elements public="1" get="accessor" set="null" static="1">
			<t path="Iterator"><x path="haxe.xml.Access"/></t>
			<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
		</elements>
		<get_elements get="inline" set="null" line="207" static="1"><f a="this">
	<c path="Xml"/>
	<t path="Iterator"><x path="haxe.xml.Access"/></t>
</f></get_elements>
		<_new public="1" get="inline" set="null" line="209" static="1">
			<f a="x">
				<c path="Xml"/>
				<x path="haxe.xml.Access"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_innerData set="method" line="215" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_innerData>
		<get_innerHTML set="method" line="237" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_innerHTML>
	</class>
	<enum path="haxe.xml.Filter" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<FInt/>
		<FBool/>
		<FEnum a="values"><c path="Array"><c path="String"/></c></FEnum>
		<FReg a="matcher"><c path="EReg"/></FReg>
	</enum>
	<enum path="haxe.xml.Attrib" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check"><Att a="name:?filter:?defvalue">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<c path="String"/>
</Att></enum>
	<enum path="haxe.xml.Rule" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<RNode a="name:?attribs:?childs">
			<c path="String"/>
			<c path="Array"><e path="haxe.xml.Attrib"/></c>
			<e path="haxe.xml.Rule"/>
		</RNode>
		<RData a="?filter"><e path="haxe.xml.Filter"/></RData>
		<RMulti a="rule:?atLeastOne">
			<e path="haxe.xml.Rule"/>
			<x path="Bool"/>
		</RMulti>
		<RList a="rules:?ordered">
			<c path="Array"><e path="haxe.xml.Rule"/></c>
			<x path="Bool"/>
		</RList>
		<RChoice a="choices"><c path="Array"><e path="haxe.xml.Rule"/></c></RChoice>
		<ROptional a="rule"><e path="haxe.xml.Rule"/></ROptional>
	</enum>
	<enum path="haxe.xml._Check.CheckResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx" private="1" module="haxe.xml.Check">
		<CMatch/>
		<CMissing a="r"><e path="haxe.xml.Rule"/></CMissing>
		<CExtra a="x"><c path="Xml"/></CExtra>
		<CElementExpected a="name:x">
			<c path="String"/>
			<c path="Xml"/>
		</CElementExpected>
		<CDataExpected a="x"><c path="Xml"/></CDataExpected>
		<CExtraAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CExtraAttrib>
		<CMissingAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CMissingAttrib>
		<CInvalidAttrib a="att:x:f">
			<c path="String"/>
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidAttrib>
		<CInvalidData a="x:f">
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidData>
		<CInElement a="x:r">
			<c path="Xml"/>
			<e path="haxe.xml._Check.CheckResult"/>
		</CInElement>
	</enum>
	<class path="haxe.xml.Check" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx">
		<blanks expr="~/^[ 
	]*$/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ 
	]*$/</e></m></meta>
		</blanks>
		<isBlank set="method" line="61" static="1"><f a="x">
	<c path="Xml"/>
	<x path="Bool"/>
</f></isBlank>
		<filterMatch set="method" line="65" static="1"><f a="s:f">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<x path="Bool"/>
</f></filterMatch>
		<isNullable set="method" line="81" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<x path="Bool"/>
</f></isNullable>
		<check set="method" line="104" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></check>
		<checkList set="method" line="169" static="1"><f a="it:r">
	<t path="Iterator"><c path="Xml"/></t>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></checkList>
		<makeWhere set="method" line="242" static="1"><f a="path">
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeWhere>
		<makeString set="method" line="257" static="1"><f a="x">
	<c path="Xml"/>
	<c path="String"/>
</f></makeString>
		<makeRule set="method" line="266" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<c path="String"/>
</f></makeRule>
		<makeError set="method" line="283" static="1"><f a="m:?path">
	<e path="haxe.xml._Check.CheckResult"/>
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeError>
		<checkNode public="1" set="method" line="314" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkNode>
		<checkDocument public="1" set="method" line="321" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkDocument>
	</class>
	<typedef path="haxe.xml.Fast" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Fast.hx">
		<x path="haxe.xml.Access"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<abstract path="haxe.xml._Parser.S" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.xml._Parser.S_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1" final="1">
	<IGNORE_SPACES public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IGNORE_SPACES>
	<BEGIN public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BEGIN>
	<BEGIN_NODE public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BEGIN_NODE>
	<TAG_NAME public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TAG_NAME>
	<BODY public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BODY>
	<ATTRIB_NAME public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ATTRIB_NAME>
	<EQUALS public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EQUALS>
	<ATTVAL_BEGIN public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ATTVAL_BEGIN>
	<ATTRIB_VAL public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ATTRIB_VAL>
	<CHILDS public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CHILDS>
	<CLOSE public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CLOSE>
	<WAIT_END public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WAIT_END>
	<WAIT_END_RET public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WAIT_END_RET>
	<PCDATA public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PCDATA>
	<HEADER public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HEADER>
	<COMMENT public="1" get="inline" set="null" expr="cast 15" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COMMENT>
	<DOCTYPE public="1" get="inline" set="null" expr="cast 16" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DOCTYPE>
	<CDATA public="1" get="inline" set="null" expr="cast 17" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CDATA>
	<ESCAPE public="1" get="inline" set="null" expr="cast 18" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ESCAPE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Parser.S_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1" final="1">
		<IGNORE_SPACES public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IGNORE_SPACES>
		<BEGIN public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BEGIN>
		<BEGIN_NODE public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BEGIN_NODE>
		<TAG_NAME public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TAG_NAME>
		<BODY public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BODY>
		<ATTRIB_NAME public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ATTRIB_NAME>
		<EQUALS public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EQUALS>
		<ATTVAL_BEGIN public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ATTVAL_BEGIN>
		<ATTRIB_VAL public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ATTRIB_VAL>
		<CHILDS public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CHILDS>
		<CLOSE public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CLOSE>
		<WAIT_END public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WAIT_END>
		<WAIT_END_RET public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WAIT_END_RET>
		<PCDATA public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PCDATA>
		<HEADER public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HEADER>
		<COMMENT public="1" get="inline" set="null" expr="cast 15" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COMMENT>
		<DOCTYPE public="1" get="inline" set="null" expr="cast 16" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DOCTYPE>
		<CDATA public="1" get="inline" set="null" expr="cast 17" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CDATA>
		<ESCAPE public="1" get="inline" set="null" expr="cast 18" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ESCAPE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.xml.XmlParserException" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx" module="haxe.xml.Parser">
		<message public="1">
			<c path="String"/>
			<haxe_doc>the XML parsing error message</haxe_doc>
		</message>
		<lineNumber public="1">
			<x path="Int"/>
			<haxe_doc>the line number at which the XML parsing error occurred</haxe_doc>
		</lineNumber>
		<positionAtLine public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the reported line at which the parsing error occurred</haxe_doc>
		</positionAtLine>
		<position public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the XML string at which the parsing error occurred</haxe_doc>
		</position>
		<xml public="1">
			<c path="String"/>
			<haxe_doc>the invalid XML string</haxe_doc>
		</xml>
		<toString public="1" set="method" line="94"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="75"><f a="message:xml:position">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.xml.Parser" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx">
		<escapes expr="{
	var h = new haxe.ds.StringMap();
	h.set(&quot;lt&quot;, &quot;&lt;&quot;);
	h.set(&quot;gt&quot;, &quot;&gt;&quot;);
	h.set(&quot;amp&quot;, &quot;&amp;&quot;);
	h.set(&quot;quot&quot;, &quot;\&quot;&quot;);
	h.set(&quot;apos&quot;, &quot;&apos;&quot;);
	h;
}" line="100" static="1">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[{
	var h = new haxe.ds.StringMap();
	h.set("lt", "<");
	h.set("gt", ">");
	h.set("amp", "&");
	h.set("quot", "\"");
	h.set("apos", "'");
	h;
}]]></e></m></meta>
		</escapes>
		<parse public="1" set="method" line="115" static="1">
			<f a="str:?strict" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":value"><e>{ strict : false }</e></m></meta>
			<haxe_doc>Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.

		@throws haxe.xml.XmlParserException</haxe_doc>
		</parse>
		<doParse set="method" line="121" static="1">
			<f a="str:strict:?p:?parent" v="::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="Xml"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ p : 0 }</e></m></meta>
		</doParse>
		<isValidChar get="inline" set="null" line="415" static="1"><f a="c">
	<x path="Int"/>
	<x path="Bool"/>
</f></isValidChar>
	</class>
	<class path="haxe.xml.Printer" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Printer.hx">
		<print public="1" set="method" line="35" static="1">
			<f a="xml:?pretty" v=":false">
				<c path="Xml"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pretty : false }</e></m></meta>
			<haxe_doc>Convert `Xml` to string representation.

		Set `pretty` to `true` to prettify the result.</haxe_doc>
		</print>
		<output><c path="StringBuf"/></output>
		<pretty><x path="Bool"/></pretty>
		<writeNode set="method" line="49"><f a="value:tabs">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeNode>
		<write get="inline" set="null" line="104"><f a="input">
	<c path="String"/>
	<x path="Void"/>
</f></write>
		<newline get="inline" set="null" line="108"><f a=""><x path="Void"/></f></newline>
		<hasChildren set="method" line="114"><f a="value">
	<c path="Xml"/>
	<x path="Bool"/>
</f></hasChildren>
		<new set="method" line="44"><f a="pretty">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class provides utility methods to convert Xml instances to
	String representation.</haxe_doc>
	</class>
	<class path="haxe.zip.Compress" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/haxe/zip/Compress.hx" extern="1">
		<run public="1" set="method" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method"><f a="level">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip.ExtraField" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Entry.hx" module="haxe.zip.Entry">
		<FUnknown a="tag:bytes">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</FUnknown>
		<FInfoZipUnicodePath a="name:crc">
			<c path="String"/>
			<x path="Int"/>
		</FInfoZipUnicodePath>
		<FUtf8/>
	</enum>
	<typedef path="haxe.zip.Entry" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Entry.hx"><a>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<extraFields>
		<x path="Null"><c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c></x>
		<meta><m n=":optional"/></meta>
	</extraFields>
	<dataSize><x path="Int"/></dataSize>
	<data><x path="Null"><c path="haxe.io.Bytes"/></x></data>
	<crc32><x path="Null"><x path="Int"/></x></crc32>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<enum path="haxe.zip.FlushMode" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/FlushMode.hx">
		<NO/>
		<SYNC/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.zip.Huffman" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="haxe.zip.Huffman"/>
			<e path="haxe.zip.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="haxe.zip.Huffman"/></c>
		</NeedBits>
	</enum>
	<class path="haxe.zip.HuffTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Huffman.hx" module="haxe.zip.Huffman">
		<treeDepth set="method" line="34"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="45"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<e path="haxe.zip.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="62"><f a="table:p:cd:d:t">
	<c path="Array"><e path="haxe.zip.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="75"><f a="bits:maxbits:v:len">
	<c path="haxe.ds.IntMap"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="86"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></make>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.zip._InflateImpl.Window" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<SIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 15" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 15]]></e></m></meta>
		</SIZE>
		<BUFSIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 16" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 16]]></e></m></meta>
		</BUFSIZE>
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="haxe.crypto.Adler32"/></crc>
		<slide public="1" set="method" line="44"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="53"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="60"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="67"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="71"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="75"><f a=""><c path="haxe.crypto.Adler32"/></f></checksum>
		<new public="1" set="method" line="37"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip._InflateImpl.State" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.zip.InflateImpl" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]" line="97" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]</e></m></meta>
		</LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL expr="[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]" line="100" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]</e></m></meta>
		</LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]" line="103" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]</e></m></meta>
		</DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL expr="[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]" line="106" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]</e></m></meta>
		</DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS expr="[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]" line="109" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]</e></m></meta>
		</CODE_LENGTHS_POS>
		<FIXED_HUFFMAN expr="null" line="127" static="1">
			<x path="Null"><e path="haxe.zip.Huffman"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</FIXED_HUFFMAN>
		<run public="1" set="method" line="388" static="1">
			<f a="i:?bufsize" v=":65536">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ bufsize : 65536 }</e></m></meta>
		</run>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="haxe.zip._InflateImpl.State"/></state>
		<isFinal><x path="Bool"/></isFinal>
		<huffman><e path="haxe.zip.Huffman"/></huffman>
		<huffdist><x path="Null"><e path="haxe.zip.Huffman"/></x></huffdist>
		<htools><c path="haxe.zip.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="haxe.zip._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="149"><f a=""><x path="Null"><e path="haxe.zip.Huffman"/></x></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="159"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="168"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="179"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="190"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="199"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="204"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="211"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="218"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="224"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="228"><f a="h">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="236"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="268"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="129">
			<f a="i:?header:?crc" v=":true:true">
				<c path="haxe.io.Input"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ crc : true, header : true }</e></m></meta>
		</new>
		<haxe_doc>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</haxe_doc>
	</class>
	<class path="haxe.zip.Reader" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Reader.hx">
		<readZip public="1" set="method" line="194" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c>
</f></readZip>
		<unzip public="1" set="method" line="199" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Null"><c path="haxe.io.Bytes"/></x>
</f></unzip>
		<i><c path="haxe.io.Input"/></i>
		<readZipDate set="method" line="36"><f a=""><c path="Date"/></f></readZipDate>
		<readExtraFields set="method" line="48"><f a="length">
	<x path="Int"/>
	<c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c>
</f></readExtraFields>
		<readEntryHeader public="1" set="method" line="78"><f a=""><t path="haxe.zip.Entry"/></f></readEntryHeader>
		<read public="1" set="method" line="121"><f a=""><c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c></f></read>
		<new public="1" set="method" line="32"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Tools" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Tools.hx">
		<compress public="1" set="method" line="26" static="1"><f a="f:level">
	<t path="haxe.zip.Entry"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compress>
		<uncompress public="1" set="method" line="38" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></uncompress>
	</class>
	<class path="haxe.zip.Uncompress" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/haxe/zip/Uncompress.hx" extern="1">
		<run public="1" set="method" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method"><f a="?windowBits">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Writer" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Writer.hx">
		<CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE get="inline" set="null" expr="46" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
			<haxe_doc>The next constant is required for computing the Central
		Directory Record(CDR) size. CDR consists of some fields
		of constant size and a filename. Constant represents
		total length of all fields with constant size for each
		file in archive</haxe_doc>
		</CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE>
		<LOCAL_FILE_HEADER_FIELDS_SIZE get="inline" set="null" expr="30" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
			<haxe_doc>The following constant is the total size of all fields
		of Local File Header. It's required for calculating
		offset of start of central directory record</haxe_doc>
		</LOCAL_FILE_HEADER_FIELDS_SIZE>
		<o><c path="haxe.io.Output"/></o>
		<files><c path="haxe.ds.List"><a>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
	<fields><c path="haxe.io.Bytes"/></fields>
	<date><c path="Date"/></date>
	<crc><x path="Int"/></crc>
	<compressed><x path="Bool"/></compressed>
	<clen><x path="Int"/></clen>
</a></c></files>
		<writeZipDate set="method" line="60"><f a="date">
	<c path="Date"/>
	<x path="Void"/>
</f></writeZipDate>
		<writeEntryHeader public="1" set="method" line="71"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></writeEntryHeader>
		<write public="1" set="method" line="141"><f a="files">
	<c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c>
	<x path="Void"/>
</f></write>
		<writeCDR public="1" set="method" line="149"><f a=""><x path="Void"/></f></writeCDR>
		<new public="1" set="method" line="55"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="mbedtls.Config" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/Config.hx" extern="1">
		<authmode public="1" set="method"><f a="authmode">
	<x path="mbedtls.SslAuthmode"/>
	<x path="Void"/>
</f></authmode>
		<ca_chain public="1" set="method"><f a="ca_chain">
	<c path="mbedtls.X509Crt"/>
	<x path="Void"/>
</f></ca_chain>
		<defaults public="1" set="method"><f a="endpoint:transport:preset">
	<x path="mbedtls.SslEndpoint"/>
	<x path="mbedtls.SslTransport"/>
	<x path="mbedtls.SslPreset"/>
	<x path="Int"/>
</f></defaults>
		<rng public="1" params="T" set="method"><f a="p_rng">
	<c path="rng.T"/>
	<x path="Void"/>
</f></rng>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="mbedtls.CtrDrbg" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/CtrDrbg.hx" extern="1">
		<random public="1" set="method"><f a="output:output_len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
</f></random>
		<seed public="1" set="method"><f a="entropy:?custom">
	<c path="mbedtls.Entropy"/>
	<c path="String"/>
	<x path="Int"/>
</f></seed>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="mbedtls.Entropy" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/Entropy.hx" extern="1"><new public="1" set="method"><f a=""><x path="Void"/></f></new></class>
	<class path="mbedtls.Error" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/Error.hx"><strerror public="1" set="method" static="1"><f a="code">
	<x path="Int"/>
	<c path="String"/>
</f></strerror></class>
	<class path="mbedtls.PkContext" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/PkContext.hx" extern="1">
		<parse_key public="1" set="method"><f a="key:?pwd:ctr_dbg">
	<c path="haxe.io.Bytes"/>
	<c path="String"/>
	<c path="mbedtls.CtrDrbg"/>
	<x path="Int"/>
</f></parse_key>
		<parse_keyfile public="1" set="method"><f a="path:?password:ctr_dbg">
	<c path="String"/>
	<c path="String"/>
	<c path="mbedtls.CtrDrbg"/>
	<x path="Int"/>
</f></parse_keyfile>
		<parse_public_key public="1" set="method"><f a="key">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></parse_public_key>
		<parse_public_keyfile public="1" set="method"><f a="path">
	<c path="String"/>
	<x path="Int"/>
</f></parse_public_keyfile>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="mbedtls.Ssl" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/Ssl.hx" extern="1">
		<get_peer_cert public="1" set="method"><f a=""><x path="Null"><c path="mbedtls.X509Crt"/></x></f></get_peer_cert>
		<handshake public="1" set="method"><f a=""><x path="Int"/></f></handshake>
		<read public="1" set="method"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></read>
		<set_hostname public="1" set="method"><f a="hostname">
	<c path="String"/>
	<x path="Int"/>
</f></set_hostname>
		<setup public="1" set="method"><f a="conf">
	<c path="mbedtls.Config"/>
	<x path="Int"/>
</f></setup>
		<write public="1" set="method"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></write>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="mbedtls.SslAuthmode" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/SslAuthmode.hx">
		<this><x path="Int"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"mbedtls.SslAuthmode"</e></m>
		</meta>
		<impl><class path="mbedtls._SslAuthmode.SslAuthmode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/SslAuthmode.hx" private="1" module="mbedtls.SslAuthmode" extern="1" final="1">
	<SSL_VERIFY_NONE public="1" set="null" static="1">
		<x path="mbedtls.SslAuthmode"/>
		<meta><m n=":enum"/></meta>
	</SSL_VERIFY_NONE>
	<SSL_VERIFY_OPTIONAL public="1" set="null" static="1">
		<x path="mbedtls.SslAuthmode"/>
		<meta><m n=":enum"/></meta>
	</SSL_VERIFY_OPTIONAL>
	<SSL_VERIFY_REQUIRED public="1" set="null" static="1">
		<x path="mbedtls.SslAuthmode"/>
		<meta><m n=":enum"/></meta>
	</SSL_VERIFY_REQUIRED>
	<meta>
		<m n=":native"><e>"mbedtls.SslAuthmode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="mbedtls._SslAuthmode.SslAuthmode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/SslAuthmode.hx" private="1" module="mbedtls.SslAuthmode" extern="1" final="1">
		<SSL_VERIFY_NONE public="1" set="null" static="1">
			<x path="mbedtls.SslAuthmode"/>
			<meta><m n=":enum"/></meta>
		</SSL_VERIFY_NONE>
		<SSL_VERIFY_OPTIONAL public="1" set="null" static="1">
			<x path="mbedtls.SslAuthmode"/>
			<meta><m n=":enum"/></meta>
		</SSL_VERIFY_OPTIONAL>
		<SSL_VERIFY_REQUIRED public="1" set="null" static="1">
			<x path="mbedtls.SslAuthmode"/>
			<meta><m n=":enum"/></meta>
		</SSL_VERIFY_REQUIRED>
		<meta>
			<m n=":native"><e>"mbedtls.SslAuthmode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="mbedtls.SslEndpoint" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/SslEndpoint.hx">
		<this><x path="Int"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"mbedtls.SslEndpoint"</e></m>
		</meta>
		<impl><class path="mbedtls._SslEndpoint.SslEndpoint_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/SslEndpoint.hx" private="1" module="mbedtls.SslEndpoint" extern="1" final="1">
	<SSL_IS_CLIENT public="1" set="null" static="1">
		<x path="mbedtls.SslEndpoint"/>
		<meta><m n=":enum"/></meta>
	</SSL_IS_CLIENT>
	<SSL_IS_SERVER public="1" set="null" static="1">
		<x path="mbedtls.SslEndpoint"/>
		<meta><m n=":enum"/></meta>
	</SSL_IS_SERVER>
	<meta>
		<m n=":native"><e>"mbedtls.SslEndpoint"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="mbedtls._SslEndpoint.SslEndpoint_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/SslEndpoint.hx" private="1" module="mbedtls.SslEndpoint" extern="1" final="1">
		<SSL_IS_CLIENT public="1" set="null" static="1">
			<x path="mbedtls.SslEndpoint"/>
			<meta><m n=":enum"/></meta>
		</SSL_IS_CLIENT>
		<SSL_IS_SERVER public="1" set="null" static="1">
			<x path="mbedtls.SslEndpoint"/>
			<meta><m n=":enum"/></meta>
		</SSL_IS_SERVER>
		<meta>
			<m n=":native"><e>"mbedtls.SslEndpoint"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="mbedtls.SslPreset" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/SslPreset.hx">
		<this><x path="Int"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"mbedtls.SslPreset"</e></m>
		</meta>
		<impl><class path="mbedtls._SslPreset.SslPreset_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/SslPreset.hx" private="1" module="mbedtls.SslPreset" extern="1" final="1">
	<SSL_PRESET_DEFAULT public="1" set="null" static="1">
		<x path="mbedtls.SslPreset"/>
		<meta><m n=":enum"/></meta>
	</SSL_PRESET_DEFAULT>
	<SSL_PRESET_SUITEB public="1" set="null" static="1">
		<x path="mbedtls.SslPreset"/>
		<meta><m n=":enum"/></meta>
	</SSL_PRESET_SUITEB>
	<meta>
		<m n=":native"><e>"mbedtls.SslPreset"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="mbedtls._SslPreset.SslPreset_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/SslPreset.hx" private="1" module="mbedtls.SslPreset" extern="1" final="1">
		<SSL_PRESET_DEFAULT public="1" set="null" static="1">
			<x path="mbedtls.SslPreset"/>
			<meta><m n=":enum"/></meta>
		</SSL_PRESET_DEFAULT>
		<SSL_PRESET_SUITEB public="1" set="null" static="1">
			<x path="mbedtls.SslPreset"/>
			<meta><m n=":enum"/></meta>
		</SSL_PRESET_SUITEB>
		<meta>
			<m n=":native"><e>"mbedtls.SslPreset"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="mbedtls.SslTransport" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/SslTransport.hx">
		<this><x path="Int"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"mbedtls.SslTransport"</e></m>
		</meta>
		<impl><class path="mbedtls._SslTransport.SslTransport_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/SslTransport.hx" private="1" module="mbedtls.SslTransport" extern="1" final="1">
	<SSL_TRANSPORT_STREAM public="1" set="null" static="1">
		<x path="mbedtls.SslTransport"/>
		<meta><m n=":enum"/></meta>
	</SSL_TRANSPORT_STREAM>
	<SSL_TRANSPORT_DATAGRAM public="1" set="null" static="1">
		<x path="mbedtls.SslTransport"/>
		<meta><m n=":enum"/></meta>
	</SSL_TRANSPORT_DATAGRAM>
	<meta>
		<m n=":native"><e>"mbedtls.SslTransport"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="mbedtls._SslTransport.SslTransport_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/SslTransport.hx" private="1" module="mbedtls.SslTransport" extern="1" final="1">
		<SSL_TRANSPORT_STREAM public="1" set="null" static="1">
			<x path="mbedtls.SslTransport"/>
			<meta><m n=":enum"/></meta>
		</SSL_TRANSPORT_STREAM>
		<SSL_TRANSPORT_DATAGRAM public="1" set="null" static="1">
			<x path="mbedtls.SslTransport"/>
			<meta><m n=":enum"/></meta>
		</SSL_TRANSPORT_DATAGRAM>
		<meta>
			<m n=":native"><e>"mbedtls.SslTransport"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="mbedtls.X509Crt" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/mbedtls/X509Crt.hx" extern="1">
		<next public="1" set="method"><f a=""><x path="Null"><c path="mbedtls.X509Crt"/></x></f></next>
		<parse public="1" set="method"><f a="buf">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></parse>
		<parse_file public="1" set="method"><f a="path">
	<c path="String"/>
	<x path="Int"/>
</f></parse_file>
		<parse_path public="1" set="method"><f a="path">
	<c path="String"/>
	<x path="Int"/>
</f></parse_path>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="sys.FileStat" params="" file="/home/runner/work/haxe/haxe/std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>The user id for the file owner.</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>The size of the file, in bytes.</haxe_doc>
			</size>
			<rdev>
				<x path="Int"/>
				<haxe_doc>The device type on which stat resides (special files only).</haxe_doc>
			</rdev>
			<nlink>
				<x path="Int"/>
				<haxe_doc>The number of hard links to stat.</haxe_doc>
			</nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>The last modification time for the file.</haxe_doc>
			</mtime>
			<mode>
				<x path="Int"/>
				<haxe_doc>The permission bits of stat. The meaning of the bits is platform dependent.</haxe_doc>
			</mode>
			<ino>
				<x path="Int"/>
				<haxe_doc>The inode number for stat.</haxe_doc>
			</ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>The user group id for the file owner.</haxe_doc>
			</gid>
			<dev>
				<x path="Int"/>
				<haxe_doc>The device on which stat resides.</haxe_doc>
			</dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>The creation time for the file (not all file systems support this).</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>The last access time for the file (when enabled by the file system).</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File information, as given by `sys.FileSystem.stat`.</haxe_doc>
	</typedef>
	<class path="sys.FileSystem" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/FileSystem.hx">
		<exists public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the file or directory specified by `path` exists.</haxe_doc>
		</exists>
		<rename public="1" set="method" static="1">
			<f a="path:newPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renames/moves the file or directory specified by `path` to `newPath`.

		If `path` is not a valid file system entry, or if it is not accessible,
		or if `newPath` is not accessible, an exception is thrown.</haxe_doc>
		</rename>
		<stat public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<t path="sys.FileStat"/>
			</f>
			<haxe_doc>Returns `FileStat` information for the file or directory specified by
		`path`.</haxe_doc>
		</stat>
		<fullPath public="1" set="method" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. Symlinks will be
		followed and the path will be normalized.</haxe_doc>
		</fullPath>
		<absolutePath public="1" set="method" line="37" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. The path doesn't
		have to exist.</haxe_doc>
		</absolutePath>
		<isDirectory public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the file or directory specified by `path` is a directory.

		If `path` is not a valid file system entry or if its destination is not
		accessible, an exception is thrown.</haxe_doc>
		</isDirectory>
		<createDirectory public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a directory specified by `path`.

		This method is recursive: The parent directories don't have to exist.

		If the directory cannot be created, an exception is thrown.</haxe_doc>
		</createDirectory>
		<deleteFile public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the file specified by `path`.

		If `path` does not denote a valid file, or if that file cannot be
		deleted, an exception is thrown.</haxe_doc>
		</deleteFile>
		<deleteDirectory public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the directory specified by `path`. Only empty directories can
		be deleted.

		If `path` does not denote a valid directory, or if that directory cannot
		be deleted, an exception is thrown.</haxe_doc>
		</deleteDirectory>
		<readDirectory public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the names of all files and directories in the directory specified
		by `path`. `"."` and `".."` are not included in the output.

		If `path` does not denote a valid directory, an exception is thrown.</haxe_doc>
		</readDirectory>
		<haxe_doc>This class provides information about files and directories.

	If `null` is passed as a file path to any function in this class, the
	result is unspecified, and may differ from target to target.

	See `sys.io.File` for the complementary file API.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.Http" params="" file="/home/runner/work/haxe/haxe/std/sys/Http.hx">
		<extends path="haxe.http.HttpBase"/>
		<PROXY public="1" expr="null" line="48" static="1">
			<a>
				<port><x path="Int"/></port>
				<host><c path="String"/></host>
				<auth><a>
	<user><c path="String"/></user>
	<pass><c path="String"/></pass>
</a></auth>
			</a>
			<meta><m n=":value"><e>null</e></m></meta>
		</PROXY>
		<requestUrl public="1" set="method" line="528" static="1">
			<f a="url">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Makes a synchronous request to `url`.

	This creates a new Http instance and makes a GET request by calling its
	`request(false)` method.

	If `url` is null, the result is unspecified.</haxe_doc>
		</requestUrl>
		<noShutdown public="1"><x path="Bool"/></noShutdown>
		<cnxTimeout public="1"><x path="Float"/></cnxTimeout>
		<responseHeaders public="1"><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></responseHeaders>
		<responseHeadersSameKey><t path="Map">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</t></responseHeadersSameKey>
		<chunk_size><x path="Null"><x path="Int"/></x></chunk_size>
		<chunk_buf><c path="haxe.io.Bytes"/></chunk_buf>
		<file><a>
	<size><x path="Int"/></size>
	<param><c path="String"/></param>
	<mimeType><c path="String"/></mimeType>
	<io><c path="haxe.io.Input"/></io>
	<filename><c path="String"/></filename>
</a></file>
		<request public="1" set="method" line="58" override="1"><f a="?post">
	<x path="Bool"/>
	<x path="Void"/>
</f></request>
		<fileTransfert public="1" get="inline" set="null" line="78">
			<f a="argname:filename:file:size:?mimeType" v="::::&quot;application/octet-stream&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ mimeType : "application/octet-stream" }</e></m>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"Use fileTransfer instead"</e></m>
			</meta>
		</fileTransfert>
		<fileTransfer public="1" set="method" line="82">
			<f a="argname:filename:file:size:?mimeType" v="::::&quot;application/octet-stream&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mimeType : "application/octet-stream" }</e></m></meta>
		</fileTransfer>
		<customRequest public="1" set="method" line="92"><f a="post:api:?sock:?method">
	<x path="Bool"/>
	<c path="haxe.io.Output"/>
	<c path="sys.net.Socket"/>
	<c path="String"/>
	<x path="Void"/>
</f></customRequest>
		<getResponseHeaderValues public="1" set="method" line="265">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
			</f>
			<haxe_doc>Returns an array of values for a single response header or returns
		null if no such header exists.
		This method can be useful when you need to get a multiple headers with
		the same name (e.g. `Set-Cookie`), that are unreachable via the
		`responseHeaders` variable.</haxe_doc>
		</getResponseHeaderValues>
		<writeBody set="method" line="275"><f a="body:fileInput:fileSize:boundary:sock">
	<x path="Null"><c path="haxe.io.BytesOutput"/></x>
	<x path="Null"><c path="haxe.io.Input"/></x>
	<x path="Int"/>
	<x path="Null"><c path="String"/></x>
	<c path="sys.net.Socket"/>
	<x path="Void"/>
</f></writeBody>
		<readHttpResponse set="method" line="300"><f a="api:sock">
	<c path="haxe.io.Output"/>
	<c path="sys.net.Socket"/>
	<x path="Void"/>
</f></readHttpResponse>
		<readChunk set="method" line="462"><f a="chunk_re:api:buf:len">
	<c path="EReg"/>
	<c path="haxe.io.Output"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></readChunk>
		<new public="1" set="method" line="50"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.io.File" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/io/File.hx">
		<getContent public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the content of the file specified by `path` as a String.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getContent>
		<saveContent public="1" set="method" static="1">
			<f a="path:content">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `content` in the file specified by `path`.

		If the file cannot be written to, an exception is thrown.

		If `path` or `content` are null, the result is unspecified.</haxe_doc>
		</saveContent>
		<getBytes public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the binary content of the file specified by `path`.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getBytes>
		<saveBytes public="1" set="method" static="1">
			<f a="path:bytes">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `bytes` in the file specified by `path` in binary mode.

		If the file cannot be written to, an exception is thrown.

		If `path` or `bytes` are null, the result is unspecified.</haxe_doc>
		</saveBytes>
		<read public="1" set="method" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileInput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Returns an `FileInput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file does not exist or can not be read, an exception is thrown.

		Operations on the returned `FileInput` handle read on the opened file.

		File handles should be closed via `FileInput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</read>
		<write public="1" set="method" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Returns an `FileOutput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file cannot be written to, an exception is thrown.

		Operations on the returned `FileOutput` handle write to the opened file.
		If the file existed, its previous content is overwritten.

		File handles should be closed via `FileOutput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</write>
		<append public="1" set="method" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Similar to `sys.io.File.write`, but appends to the file if it exists
		instead of overwriting its contents.</haxe_doc>
		</append>
		<update public="1" set="method" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Similar to `sys.io.File.append`. While `append` can only seek or write
		starting from the end of the file's previous contents, `update` can
		seek to any position, so the file's previous contents can be
		selectively overwritten.</haxe_doc>
		</update>
		<copy public="1" set="method" line="43" static="1">
			<f a="srcPath:dstPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the contents of the file specified by `srcPath` to the file
		specified by `dstPath`.

		If the `srcPath` does not exist or cannot be read, or if the `dstPath`
		file cannot be written to, an exception is thrown.

		If the file at `dstPath` exists, its contents are overwritten.

		If `srcPath` or `dstPath` are null, the result is unspecified.</haxe_doc>
		</copy>
		<haxe_doc>API for reading and writing files.

	See `sys.FileSystem` for the complementary file system API.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.io.FileInput" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/io/FileInput.hx">
		<extends path="haxe.io.Input"/>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<eof public="1" set="method"><f a=""><x path="Bool"/></f></eof>
		<seek public="1" set="method"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method"><f a=""><x path="Int"/></f></tell>
		<readByte public="1" set="method" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" override="1"><f a="bytes:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<haxe_doc>Use `sys.io.File.read` to create a `FileInput`.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.io.FileOutput" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/io/FileOutput.hx">
		<extends path="haxe.io.Output"/>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></flush>
		<seek public="1" set="method"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method"><f a=""><x path="Int"/></f></tell>
		<writeByte public="1" set="method" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" override="1"><f a="bytes:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<haxe_doc>Use `sys.io.File.write` to create a `FileOutput`.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="sys.io.FileSeek" params="" file="/home/runner/work/haxe/haxe/std/sys/io/FileSeek.hx">
		<SeekBegin/>
		<SeekCur/>
		<SeekEnd/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="sys.io._Process.NativeProcess" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/io/Process.hx" private="1" module="sys.io.Process" extern="1">
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<exitCode public="1" set="method"><f a=""><x path="Int"/></f></exitCode>
		<getPid public="1" set="method"><f a=""><x path="Int"/></f></getPid>
		<kill public="1" set="method"><f a=""><x path="Void"/></f></kill>
		<readStderr public="1" set="method"><f a="bytes:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readStderr>
		<readStdout public="1" set="method"><f a="bytes:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readStdout>
		<closeStdin public="1" set="method"><f a=""><x path="Void"/></f></closeStdin>
		<writeStdin public="1" set="method"><f a="bytes:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeStdin>
		<new public="1" set="method"><f a="cmd:?args">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.io._Process.Stdin" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="haxe.io.Output"/>
		<proc><c path="sys.io._Process.NativeProcess"/></proc>
		<buf><c path="haxe.io.Bytes"/></buf>
		<close public="1" set="method" line="49" override="1"><f a=""><x path="Void"/></f></close>
		<writeByte public="1" set="method" line="54" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<new public="1" set="method" line="44"><f a="proc">
	<c path="sys.io._Process.NativeProcess"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.io._Process.Stdout" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="haxe.io.Input"/>
		<proc><c path="sys.io._Process.NativeProcess"/></proc>
		<out><x path="Bool"/></out>
		<buf><c path="haxe.io.Bytes"/></buf>
		<readByte public="1" set="method" line="79" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="85" override="1"><f a="bytes:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="73"><f a="proc:out">
	<c path="sys.io._Process.NativeProcess"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.io.Process" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/io/Process.hx">
		<stdout public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard output. The output stream where a process writes its output data.</haxe_doc>
		</stdout>
		<stderr public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard error. The output stream to output error messages or diagnostics.</haxe_doc>
		</stderr>
		<stdin public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>Standard input. The stream data going into a process.</haxe_doc>
		</stdin>
		<proc><c path="sys.io._Process.NativeProcess"/></proc>
		<getPid public="1" get="inline" set="null" line="116">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the process ID.</haxe_doc>
		</getPid>
		<exitCode public="1" set="method" line="120">
			<f a="?block" v="true">
				<x path="Bool"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta><m n=":value"><e>{ block : true }</e></m></meta>
			<haxe_doc>Query the exit code of the process.
		If `block` is true or not specified, it will block until the process terminates.
		If `block` is false, it will return either the process exit code if it's already terminated or null if it's still running.
		If the process has already exited, return the exit code immediately.</haxe_doc>
		</exitCode>
		<close public="1" get="inline" set="null" line="126">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the process handle and release the associated resources.
		All `Process` fields should not be used after `close()` is called.</haxe_doc>
		</close>
		<kill public="1" get="inline" set="null" line="130">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Kill the process.</haxe_doc>
		</kill>
		<new public="1" set="method" line="106">
			<f a="cmd:?args:?detached">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a `Process` object, which run the given command immediately.

		Command arguments can be passed in two ways: 1. using `args`, 2. appending to `cmd` and leaving `args` as `null`.

		 1. When using `args` to pass command arguments, each argument will be automatically quoted, and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		`detached` allows the created process to be standalone. You cannot communicate with it but you can look at its exit code. Not supported on php.

		`close()` should be called when the `Process` is no longer used.</haxe_doc>
		</new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.net.Address" params="" file="/home/runner/work/haxe/haxe/std/sys/net/Address.hx">
		<host public="1"><x path="Int"/></host>
		<port public="1"><x path="Int"/></port>
		<getHost public="1" set="method" line="38">
			<f a=""><c path="sys.net.Host"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getHost>
		<compare public="1" set="method" line="44"><f a="a">
	<c path="sys.net.Address"/>
	<x path="Int"/>
</f></compare>
		<clone public="1" set="method" line="54"><f a=""><c path="sys.net.Address"/></f></clone>
		<new public="1" set="method" line="33"><f a=""><x path="Void"/></f></new>
		<haxe_doc>An address is used to represent a port on a given host ip.
	It is used by `sys.net.UdpSocket`.</haxe_doc>
	</class>
	<class path="sys.net.Host" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/net/Host.hx">
		<localhost public="1" set="method" static="1"><f a=""><c path="String"/></f></localhost>
		<hostReverse set="method" static="1"><f a="ip">
	<x path="Int"/>
	<c path="String"/>
</f></hostReverse>
		<hostToString set="method" static="1"><f a="ip">
	<x path="Int"/>
	<c path="String"/>
</f></hostToString>
		<resolve set="method" static="1"><f a="name">
	<c path="String"/>
	<x path="Int"/>
</f></resolve>
		<host public="1" set="null"><c path="String"/></host>
		<ip public="1" set="null"><x path="Int"/></ip>
		<toString public="1" set="method" line="34"><f a=""><c path="String"/></f></toString>
		<reverse public="1" set="method" line="38"><f a=""><c path="String"/></f></reverse>
		<init set="method" line="42"><f a="ip">
	<x path="Int"/>
	<x path="Void"/>
</f></init>
		<new public="1" set="method" line="29"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.net._Socket.SocketOutput" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/net/Socket.hx" private="1" module="sys.net.Socket">
		<extends path="haxe.io.Output"/>
		<socket><c path="eval.vm.NativeSocket"/></socket>
		<writeByte public="1" set="method" line="35" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="48" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<close public="1" set="method" line="59" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="31"><f a="socket">
	<c path="eval.vm.NativeSocket"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.net._Socket.SocketInput" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/net/Socket.hx" private="1" module="sys.net.Socket">
		<extends path="haxe.io.Input"/>
		<socket><c path="eval.vm.NativeSocket"/></socket>
		<readByte public="1" set="method" line="72" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="83" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="98" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="68"><f a="socket">
	<c path="eval.vm.NativeSocket"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.net.Socket" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/net/Socket.hx">
		<select public="1" set="method" line="188" static="1">
			<f a="read:write:others:?timeout">
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<x path="Float"/>
				<a>
					<write><c path="Array"><c path="sys.net.Socket"/></c></write>
					<read><c path="Array"><c path="sys.net.Socket"/></c></read>
					<others><c path="Array"><c path="sys.net.Socket"/></c></others>
				</a>
			</f>
			<haxe_doc>Wait until one of the sockets group is ready for the given operation:

		 - `read` contains sockets on which we want to wait for available data to be read,
		 - `write` contains sockets on which we want to wait until we are allowed to write some data to their output buffers,
		 - `others` contains sockets on which we want to wait for exceptional conditions.
		 - `select` will block until one of the condition is met, in which case it will return the sockets for which the condition was true.

		In case a `timeout` (in seconds) is specified, select might wait at worst until the timeout expires.</haxe_doc>
		</select>
		<input public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>The stream on which you can read available data. By default the stream is blocking until the requested data is available,
		use `setBlocking(false)` or `setTimeout` to prevent infinite waiting.</haxe_doc>
		</input>
		<output public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>The stream on which you can send data. Please note that in case the output buffer you will block while writing the data, use `setBlocking(false)` or `setTimeout` to prevent that.</haxe_doc>
		</output>
		<custom public="1">
			<d/>
			<haxe_doc>A custom value that can be associated with the socket. Can be used to retrieve your custom infos after a `select`.
	*</haxe_doc>
		</custom>
		<socket>
			<c path="eval.vm.NativeSocket"/>
			<meta><m n=":ifFeature"><e>"sys.net.Socket.select"</e></m></meta>
		</socket>
		<init set="method" line="116"><f a="socket">
	<c path="eval.vm.NativeSocket"/>
	<x path="Void"/>
</f></init>
		<close public="1" set="method" line="122">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the socket : make sure to properly close all your sockets or you will crash when you run out of file descriptors.</haxe_doc>
		</close>
		<read public="1" set="method" line="126">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read the whole data available on the socket.

		*Note*: this is **not** meant to be used together with `setBlocking(false)`,
		as it will always throw `haxe.io.Error.Blocked`. `input` methods should be used directly instead.</haxe_doc>
		</read>
		<write public="1" set="method" line="130">
			<f a="content">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write the whole data to the socket output.

		*Note*: this is **not** meant to be used together with `setBlocking(false)`, as
		`haxe.io.Error.Blocked` may be thrown mid-write with no indication of how many bytes have been written.
		`output.writeBytes()` should be used instead as it returns this information.</haxe_doc>
		</write>
		<connect public="1" set="method" line="134">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Connect to the given server host/port. Throw an exception in case we couldn't successfully connect.</haxe_doc>
		</connect>
		<listen public="1" set="method" line="138">
			<f a="connections">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allow the socket to listen for incoming questions. The parameter tells how many pending connections we can have until they get refused. Use `accept()` to accept incoming connections.</haxe_doc>
		</listen>
		<shutdown public="1" set="method" line="142">
			<f a="read:write">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Shutdown the socket, either for reading or writing.</haxe_doc>
		</shutdown>
		<bind public="1" set="method" line="146">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Bind the socket to the given host/port so it can afterwards listen for connections there.</haxe_doc>
		</bind>
		<accept public="1" set="method" line="150">
			<f a=""><c path="sys.net.Socket"/></f>
			<haxe_doc>Accept a new connected client. This will return a connected socket on which you can read/write some data.</haxe_doc>
		</accept>
		<peer public="1" set="method" line="158">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<meta><m n=":access"><e>sys.net.Host.init</e></m></meta>
			<haxe_doc>Return the information about the other side of a connected socket.</haxe_doc>
		</peer>
		<host public="1" set="method" line="166">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<meta><m n=":access"><e>sys.net.Host.init</e></m></meta>
			<haxe_doc>Return the information about our side of a connected socket.</haxe_doc>
		</host>
		<setTimeout public="1" set="method" line="173">
			<f a="timeout">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Gives a timeout (in seconds) after which blocking socket operations (such as reading and writing) will abort and throw an exception.</haxe_doc>
		</setTimeout>
		<waitForRead public="1" set="method" line="177">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Block until some data is available for read on the socket.</haxe_doc>
		</waitForRead>
		<setBlocking public="1" set="method" line="181">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the blocking mode of the socket. A blocking socket is the default behavior. A non-blocking socket will abort blocking operations immediately by throwing a haxe.io.Error.Blocked value.</haxe_doc>
		</setBlocking>
		<setFastSend public="1" set="method" line="183">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows the socket to immediately send the data when written to its output : this will cause less ping but might increase the number of packets / data size, especially when doing a lot of small writes.</haxe_doc>
		</setFastSend>
		<new public="1" set="method" line="112">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new unconnected socket.</haxe_doc>
		</new>
		<haxe_doc>A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.net.UdpSocket" params="" file="/home/runner/work/haxe/haxe/std/sys/net/UdpSocket.hx">
		<extends path="sys.net.Socket"/>
		<setBroadcast public="1" set="method" line="37">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows the socket to send to broadcast addresses.</haxe_doc>
		</setBroadcast>
		<sendTo public="1" set="method" line="44">
			<f a="buf:pos:len:addr">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="sys.net.Address"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Sends data to the specified target host/port address.</haxe_doc>
		</sendTo>
		<readFrom public="1" set="method" line="51">
			<f a="buf:pos:len:addr">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="sys.net.Address"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads data from any incoming address and store the receiver address into the address parameter.</haxe_doc>
		</readFrom>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A UDP socket class</haxe_doc>
	</class>
	<class path="sys.ssl.Certificate" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/ssl/Certificate.hx">
		<loadFile public="1" set="method" line="37" static="1"><f a="file">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></loadFile>
		<loadPath public="1" set="method" line="43" static="1"><f a="path">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></loadPath>
		<fromString public="1" set="method" line="49" static="1"><f a="str">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></fromString>
		<loadDefaults public="1" set="method" line="55" static="1"><f a=""><c path="sys.ssl.Certificate"/></f></loadDefaults>
		<native><c path="mbedtls.X509Crt"/></native>
		<commonName public="1" get="accessor" set="null"><x path="Null"><c path="String"/></x></commonName>
		<altNames public="1" get="accessor" set="null"><c path="Array"><c path="String"/></c></altNames>
		<notBefore public="1" get="accessor" set="null"><c path="Date"/></notBefore>
		<notAfter public="1" get="accessor" set="null"><c path="Date"/></notAfter>
		<subject public="1" set="method"><f a="field">
	<c path="String"/>
	<x path="Null"><c path="String"/></x>
</f></subject>
		<issuer public="1" set="method"><f a="field">
	<c path="String"/>
	<x path="Null"><c path="String"/></x>
</f></issuer>
		<next public="1" set="method" line="73"><f a=""><x path="Null"><c path="sys.ssl.Certificate"/></x></f></next>
		<add public="1" set="method" line="81"><f a="pem">
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<addDER public="1" set="method" line="85"><f a="der">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></addDER>
		<get_commonName set="method" line="89"><f a=""><x path="Null"><c path="String"/></x></f></get_commonName>
		<get_altNames set="method"><f a=""><c path="Array"><c path="String"/></c></f></get_altNames>
		<get_notBefore set="method"><f a=""><c path="Date"/></f></get_notBefore>
		<get_notAfter set="method"><f a=""><c path="Date"/></f></get_notAfter>
		<getNative get="inline" set="null" line="99"><f a=""><c path="mbedtls.X509Crt"/></f></getNative>
		<new set="method" line="33"><f a="native">
	<c path="mbedtls.X509Crt"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.ssl.Digest" params="" file="/home/runner/work/haxe/haxe/std/sys/ssl/Digest.hx" extern="1">
		<make public="1" set="method" static="1"><f a="data:alg">
	<c path="haxe.io.Bytes"/>
	<x path="sys.ssl.DigestAlgorithm"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<sign public="1" set="method" static="1"><f a="data:privKey:alg">
	<c path="haxe.io.Bytes"/>
	<c path="sys.ssl.Key"/>
	<x path="sys.ssl.DigestAlgorithm"/>
	<c path="haxe.io.Bytes"/>
</f></sign>
		<verify public="1" set="method" static="1"><f a="data:signature:pubKey:alg">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="sys.ssl.Key"/>
	<x path="sys.ssl.DigestAlgorithm"/>
	<x path="Bool"/>
</f></verify>
	</class>
	<abstract path="sys.ssl.DigestAlgorithm" params="" file="/home/runner/work/haxe/haxe/std/sys/ssl/DigestAlgorithm.hx">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="sys.ssl._DigestAlgorithm.DigestAlgorithm_Impl_" params="" file="/home/runner/work/haxe/haxe/std/sys/ssl/DigestAlgorithm.hx" private="1" module="sys.ssl.DigestAlgorithm" extern="1" final="1">
	<MD5 public="1" get="inline" set="null" expr="cast &quot;MD5&quot;" line="26" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "MD5"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MD5>
	<SHA1 public="1" get="inline" set="null" expr="cast &quot;SHA1&quot;" line="27" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA1"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SHA1>
	<SHA224 public="1" get="inline" set="null" expr="cast &quot;SHA224&quot;" line="28" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA224"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SHA224>
	<SHA256 public="1" get="inline" set="null" expr="cast &quot;SHA256&quot;" line="29" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA256"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SHA256>
	<SHA384 public="1" get="inline" set="null" expr="cast &quot;SHA384&quot;" line="30" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA384"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SHA384>
	<SHA512 public="1" get="inline" set="null" expr="cast &quot;SHA512&quot;" line="31" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA512"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SHA512>
	<RIPEMD160 public="1" get="inline" set="null" expr="cast &quot;RIPEMD160&quot;" line="32" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "RIPEMD160"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIPEMD160>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="sys.ssl._DigestAlgorithm.DigestAlgorithm_Impl_" params="" file="/home/runner/work/haxe/haxe/std/sys/ssl/DigestAlgorithm.hx" private="1" module="sys.ssl.DigestAlgorithm" extern="1" final="1">
		<MD5 public="1" get="inline" set="null" expr="cast &quot;MD5&quot;" line="26" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "MD5"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MD5>
		<SHA1 public="1" get="inline" set="null" expr="cast &quot;SHA1&quot;" line="27" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA1"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SHA1>
		<SHA224 public="1" get="inline" set="null" expr="cast &quot;SHA224&quot;" line="28" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA224"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SHA224>
		<SHA256 public="1" get="inline" set="null" expr="cast &quot;SHA256&quot;" line="29" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA256"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SHA256>
		<SHA384 public="1" get="inline" set="null" expr="cast &quot;SHA384&quot;" line="30" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA384"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SHA384>
		<SHA512 public="1" get="inline" set="null" expr="cast &quot;SHA512&quot;" line="31" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA512"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SHA512>
		<RIPEMD160 public="1" get="inline" set="null" expr="cast &quot;RIPEMD160&quot;" line="32" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "RIPEMD160"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIPEMD160>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="sys.ssl.Key" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/ssl/Key.hx">
		<loadFile public="1" set="method" line="36" static="1"><f a="file:?isPublic:?pass">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="sys.ssl.Key"/>
</f></loadFile>
		<parse set="method" line="49" static="1"><f a="data:isPublic:?pass">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="sys.ssl.Key"/>
</f></parse>
		<readPEM public="1" set="method" line="62" static="1"><f a="data:isPublic:?pass">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="sys.ssl.Key"/>
</f></readPEM>
		<readDER public="1" set="method" line="66" static="1"><f a="data:isPublic">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
	<c path="sys.ssl.Key"/>
</f></readDER>
		<native><c path="mbedtls.PkContext"/></native>
		<new set="method" line="32"><f a=""><x path="Void"/></f></new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.ssl.Mbedtls" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/ssl/Mbedtls.hx">
		<entropy static="1"><x path="Null"><c path="mbedtls.Entropy"/></x></entropy>
		<ctr static="1"><x path="Null"><c path="mbedtls.CtrDrbg"/></x></ctr>
		<getDefaultEntropy public="1" set="method" line="13" static="1"><f a=""><x path="Null"><c path="mbedtls.Entropy"/></x></f></getDefaultEntropy>
		<getDefaultCtrDrbg public="1" set="method" line="20" static="1"><f a=""><x path="Null"><c path="mbedtls.CtrDrbg"/></x></f></getDefaultCtrDrbg>
		<loadDefaultCertificates public="1" set="method" line="28" static="1"><f a="certificate">
	<c path="mbedtls.X509Crt"/>
	<x path="Void"/>
</f></loadDefaultCertificates>
		<setSocket public="1" set="method" static="1"><f a="ssl:socket">
	<c path="mbedtls.Ssl"/>
	<c path="eval.vm.NativeSocket"/>
	<x path="Int"/>
</f></setSocket>
		<loadDefaults set="method" static="1"><f a="certificate">
	<c path="mbedtls.X509Crt"/>
	<x path="Int"/>
</f></loadDefaults>
	</class>
	<class path="sys.ssl._Socket.SocketInput" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/ssl/Socket.hx" private="1" module="sys.ssl.Socket">
		<extends path="haxe.io.Input"/>
		<socket>
			<c path="sys.ssl.Socket"/>
			<meta><m n=":allow"><e>sys.ssl.Socket</e></m></meta>
		</socket>
		<readBuf><c path="haxe.io.Bytes"/></readBuf>
		<readByte public="1" set="method" line="17" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="27" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="39" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="12"><f a="s">
	<c path="sys.ssl.Socket"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.ssl._Socket.SocketOutput" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/ssl/Socket.hx" private="1" module="sys.ssl.Socket">
		<extends path="haxe.io.Output"/>
		<socket>
			<c path="sys.ssl.Socket"/>
			<meta><m n=":allow"><e>sys.ssl.Socket</e></m></meta>
		</socket>
		<writeBuf><c path="haxe.io.Bytes"/></writeBuf>
		<writeByte public="1" set="method" line="55" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="65" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<close public="1" set="method" line="77" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="50"><f a="s">
	<c path="sys.ssl.Socket"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.ssl.Socket" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/ssl/Socket.hx">
		<extends path="sys.net.Socket"/>
		<DEFAULT_VERIFY_CERT public="1" expr="true" line="86" static="1">
			<x path="Null"><x path="Bool"/></x>
			<meta><m n=":value"><e>true</e></m></meta>
		</DEFAULT_VERIFY_CERT>
		<DEFAULT_CA public="1" static="1"><x path="Null"><c path="sys.ssl.Certificate"/></x></DEFAULT_CA>
		<conf><c path="mbedtls.Config"/></conf>
		<ssl><c path="mbedtls.Ssl"/></ssl>
		<verifyCert public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>Define if peer certificate is verified during SSL handshake.</haxe_doc>
		</verifyCert>
		<caCert><x path="Null"><c path="sys.ssl.Certificate"/></x></caCert>
		<hostname><c path="String"/></hostname>
		<handshakeDone><x path="Bool"/></handshakeDone>
		<isBlocking expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</isBlocking>
		<init set="method" line="101" override="1"><f a="socket">
	<c path="eval.vm.NativeSocket"/>
	<x path="Void"/>
</f></init>
		<connect public="1" set="method" line="112" override="1"><f a="host:port">
	<c path="sys.net.Host"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
		<handshake public="1" set="method" line="127">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Perform the SSL handshake.</haxe_doc>
		</handshake>
		<setBlocking public="1" set="method" line="139" override="1"><f a="b">
	<x path="Bool"/>
	<x path="Void"/>
</f></setBlocking>
		<setCA public="1" set="method" line="144">
			<f a="cert">
				<c path="sys.ssl.Certificate"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure the certificate chain for peer certificate verification.</haxe_doc>
		</setCA>
		<setHostname public="1" set="method" line="148">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure the hostname for Server Name Indication TLS extension.</haxe_doc>
		</setHostname>
		<close public="1" set="method" line="152" override="1"><f a=""><x path="Void"/></f></close>
		<bind public="1" set="method" line="161" override="1"><f a="host:port">
	<c path="sys.net.Host"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bind>
		<accept public="1" set="method" line="167" override="1"><f a=""><c path="sys.ssl.Socket"/></f></accept>
		<addSNICertificate public="1" set="method" line="183">
			<f a="cbServernameMatch:cert:key">
				<f a="">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<c path="sys.ssl.Certificate"/>
				<c path="sys.ssl.Key"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure additionals certificates and private keys for Server Name Indication extension.
		The callback may be called during handshake to determine the certificate to use.</haxe_doc>
		</addSNICertificate>
		<peerCertificate public="1" set="method" line="187">
			<f a=""><c path="sys.ssl.Certificate"/></f>
			<haxe_doc>Return the certificate received from the other side of a connection.</haxe_doc>
		</peerCertificate>
		<setCertificate public="1" set="method" line="191">
			<f a="cert:key">
				<c path="sys.ssl.Certificate"/>
				<c path="sys.ssl.Key"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure own certificate and private key.</haxe_doc>
		</setCertificate>
		<buildConfig set="method" line="195"><f a="server">
	<x path="Bool"/>
	<c path="mbedtls.Config"/>
</f></buildConfig>
		<new public="1" set="method" line="85"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A TLS socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.thread.Condition" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/thread/Condition.hx">
		<destroy set="method" line="13" static="1"><f a="cond">
	<c path="sys.thread.Condition"/>
	<x path="Void"/>
</f></destroy>
		<cond final="1"><x path="eval.luv.Condition"/></cond>
		<mutex final="1"><x path="eval.luv.Mutex"/></mutex>
		<acquire public="1" set="method" line="18">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Acquires the internal mutex.</haxe_doc>
		</acquire>
		<tryAcquire public="1" set="method" line="22">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tries to acquire the internal mutex.
		@see `Mutex.tryAcquire`</haxe_doc>
		</tryAcquire>
		<release public="1" set="method" line="26">
			<f a=""><x path="Void"/></f>
			<haxe_doc>*
		Releases the internal mutex.</haxe_doc>
		</release>
		<wait public="1" set="method" line="30">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Atomically releases the mutex and blocks until the condition variable pointed is signaled by a call to
		`signal` or to `broadcast`. When the calling thread becomes unblocked it
		acquires the internal mutex.
		The internal mutex should be locked before this function is called.</haxe_doc>
		</wait>
		<signal public="1" set="method" line="34">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unblocks one of the threads that are blocked on the
		condition variable at the time of the call. If no threads are blocked
		on the condition variable at the time of the call, the function does nothing.</haxe_doc>
		</signal>
		<broadcast public="1" set="method" line="38">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unblocks all of the threads that are blocked on the
		condition variable at the time of the call. If no threads are blocked
		on the condition variable at the time of the call, the function does
		nothing.</haxe_doc>
		</broadcast>
		<new public="1" set="method" line="7">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create a new condition variable.
		A thread that waits on a newly created condition variable will block.</haxe_doc>
		</new>
		<haxe_doc>Creates a new condition variable.
	Conditions variables can be used to block one or more threads at the same time,
	until another thread modifies a shared variable (the condition)
	and signals the condition variable.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.thread.Deque" params="T" file="/home/runner/work/haxe/haxe/std/sys/thread/Deque.hx" extern="1">
		<add public="1" set="method">
			<f a="i">
				<c path="sys.thread.Deque.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an element at the end of `this` Deque.

		(Java,Jvm): throws `java.lang.NullPointerException` if `i` is `null`.</haxe_doc>
		</add>
		<push public="1" set="method">
			<f a="i">
				<c path="sys.thread.Deque.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an element at the front of `this` Deque.

		(Java,Jvm): throws `java.lang.NullPointerException` if `i` is `null`.</haxe_doc>
		</push>
		<pop public="1" set="method">
			<f a="block">
				<x path="Bool"/>
				<x path="Null"><c path="sys.thread.Deque.T"/></x>
			</f>
			<haxe_doc>Tries to retrieve an element from the front of `this` Deque.

		If an element is available, it is removed from the queue and returned.

		If no element is available and `block` is `false`, `null` is returned.

		Otherwise, execution blocks until an element is available and returns it.</haxe_doc>
		</pop>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create a new Deque instance which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>A Deque is a double-ended queue with a `pop` method that can block until
	an element is available. It is commonly used to synchronize threads.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.thread.IThreadPool" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/IThreadPool.hx" interface="1">
		<get_threadsCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</get_threadsCount>
		<get_isShutdown public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</get_isShutdown>
		<threadsCount public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>Amount of alive threads in this pool.</haxe_doc>
		</threadsCount>
		<isShutdown public="1" get="accessor" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates if `shutdown` method of this pool has been called.</haxe_doc>
		</isShutdown>
		<run public="1" set="method">
			<f a="task">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Submit a task to run in a thread.

		Throws an exception if the pool is shut down.</haxe_doc>
		</run>
		<shutdown public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Initiates a shutdown.
		All previousely submitted tasks will be executed, but no new tasks will
		be accepted.

		Multiple calls to this method have no effect.</haxe_doc>
		</shutdown>
		<haxe_doc>A thread pool interface.</haxe_doc>
	</class>
	<class path="sys.thread.ElasticThreadPool" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/ElasticThreadPool.hx">
		<implements path="sys.thread.IThreadPool"/>
		<threadsCount public="1" get="accessor" set="null"><x path="Int"/></threadsCount>
		<maxThreadsCount public="1"><x path="Int"/></maxThreadsCount>
		<isShutdown public="1" get="accessor" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates if `shutdown` method of this pool has been called.</haxe_doc>
		</isShutdown>
		<_isShutdown expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</_isShutdown>
		<get_isShutdown set="method" line="46"><f a=""><x path="Bool"/></f></get_isShutdown>
		<pool final="1" expr="[]">
			<c path="Array"><c path="sys.thread._ElasticThreadPool.Worker"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pool>
		<queue final="1" expr="new Deque&lt;Void -&gt; Void&gt;()">
			<c path="sys.thread.Deque"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Deque<Void -> Void>()]]></e></m></meta>
		</queue>
		<mutex final="1" expr="new Mutex()">
			<c path="sys.thread.Mutex"/>
			<meta><m n=":value"><e>new Mutex()</e></m></meta>
		</mutex>
		<threadTimeout final="1"><x path="Float"/></threadTimeout>
		<run public="1" set="method" line="71">
			<f a="task">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Submit a task to run in a thread.

		Throws an exception if the pool is shut down.</haxe_doc>
		</run>
		<shutdown public="1" set="method" line="111">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Initiates a shutdown.
		All previousely submitted tasks will be executed, but no new tasks will
		be accepted.

		Multiple calls to this method have no effect.</haxe_doc>
		</shutdown>
		<get_threadsCount set="method" line="121"><f a=""><x path="Int"/></f></get_threadsCount>
		<new public="1" set="method" line="59">
			<f a="maxThreadsCount:?threadTimeout" v=":60">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ threadTimeout : 60 }</e></m></meta>
			<haxe_doc>Create a new thread pool with `threadsCount` threads.

		If a worker thread does not receive a task for `threadTimeout` seconds it
		is terminated.</haxe_doc>
		</new>
		<haxe_doc>Thread pool with a varying amount of threads.

	A new thread is spawned every time a task is submitted while all existing
	threads are busy.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.thread._ElasticThreadPool.Worker" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/ElasticThreadPool.hx" private="1" module="sys.thread.ElasticThreadPool">
		<task public="1" set="null"><x path="Null"><f a=""><x path="Void"/></f></x></task>
		<dead public="1" set="null" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</dead>
		<deathMutex final="1" expr="new Mutex()">
			<c path="sys.thread.Mutex"/>
			<meta><m n=":value"><e>new Mutex()</e></m></meta>
		</deathMutex>
		<waiter final="1" expr="new Lock()">
			<c path="sys.thread.Lock"/>
			<meta><m n=":value"><e>new Lock()</e></m></meta>
		</waiter>
		<queue final="1"><c path="sys.thread.Deque"><f a=""><x path="Void"/></f></c></queue>
		<timeout final="1"><x path="Float"/></timeout>
		<thread><x path="sys.thread.Thread"/></thread>
		<isShutdown expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</isShutdown>
		<wakeup public="1" set="method" line="147"><f a="task">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></wakeup>
		<shutdown public="1" set="method" line="156"><f a=""><x path="Void"/></f></shutdown>
		<start set="method" line="161"><f a=""><x path="Void"/></f></start>
		<loop set="method" line="166"><f a=""><x path="Void"/></f></loop>
		<new public="1" set="method" line="141"><f a="queue:timeout">
	<c path="sys.thread.Deque"><f a=""><x path="Void"/></f></c>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="sys.thread.NextEventTime" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/thread/EventLoop.hx" module="sys.thread.EventLoop">
		<Now><haxe_doc>There's already an event waiting to be executed</haxe_doc></Now>
		<Never><haxe_doc>No new events are expected.</haxe_doc></Never>
		<AnyTime a="time">
			<x path="Null"><x path="Float"/></x>
			<haxe_doc>An event is expected to arrive at any time.
		If `time` is specified, then the event will be ready at that time for sure.</haxe_doc>
		</AnyTime>
		<At a="time">
			<x path="Float"/>
			<haxe_doc>An event is expected to be ready for execution at `time`.</haxe_doc>
		</At>
		<haxe_doc>When an event loop has an available event to execute.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</enum>
	<abstract path="sys.thread.EventHandler" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/thread/EventLoop.hx" module="sys.thread.EventLoop">
		<from><icast><c path="sys.thread._EventLoop.RegularEvent"/></icast></from>
		<this><c path="sys.thread._EventLoop.RegularEvent"/></this>
		<to><icast><c path="sys.thread._EventLoop.RegularEvent"/></icast></to>
		<impl><class path="sys.thread._EventLoop.EventHandler_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/thread/EventLoop.hx" private="1" module="sys.thread.EventLoop" extern="1" final="1"/></impl>
	</abstract>
	<class path="sys.thread._EventLoop.EventHandler_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/thread/EventLoop.hx" private="1" module="sys.thread.EventLoop" extern="1" final="1"/>
	<class path="sys.thread._EventLoop.RegularEvent" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/thread/EventLoop.hx" private="1" module="sys.thread.EventLoop">
		<timer public="1"><x path="Null"><x path="eval.luv.Timer"/></x></timer>
		<event public="1"><f a=""><x path="Void"/></f></event>
		<run public="1" set="method" line="36"><f a=""><x path="Void"/></f></run>
		<new public="1" set="method" line="32"><f a="e">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.thread.EventLoop" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/thread/EventLoop.hx">
		<CREATED static="1"><x path="Bool"/></CREATED>
		<noop final="1" set="null" expr="function() { }" line="93" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":value"><e>function() { }</e></m></meta>
		</noop>
		<handle final="1">
			<x path="eval.luv.Loop"/>
			<meta><m n=":allow"><e>eval.luv.Loop</e></m></meta>
		</handle>
		<mutex final="1" expr="new Mutex()">
			<c path="sys.thread.Mutex"/>
			<meta><m n=":value"><e>new Mutex()</e></m></meta>
		</mutex>
		<wakeup final="1"><x path="eval.luv.Async"/></wakeup>
		<promisedEventsCount expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</promisedEventsCount>
		<pending expr="[]">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pending>
		<started expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</started>
		<isMainThread><x path="Bool"/></isMainThread>
		<repeat public="1" set="method" line="69">
			<f a="event:intervalMs">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<x path="sys.thread.EventHandler"/>
			</f>
			<haxe_doc>Schedule event for execution every `intervalMs` milliseconds in current loop.</haxe_doc>
		</repeat>
		<cancel public="1" set="method" line="82">
			<f a="eventHandler">
				<x path="sys.thread.EventHandler"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prevent execution of a previously scheduled event in current loop.</haxe_doc>
		</cancel>
		<promise public="1" set="method" line="100">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Notify this loop about an upcoming event.
		This makes the thread stay alive and wait for as many events as the number of
		times `.promise()` was called. These events should be added via `.runPromised()`.</haxe_doc>
		</promise>
		<run public="1" set="method" line="111">
			<f a="event">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Execute `event` as soon as possible.</haxe_doc>
		</run>
		<runPromised public="1" set="method" line="121">
			<f a="event">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Add previously promised `event` for execution.</haxe_doc>
		</runPromised>
		<refUnref set="method" line="130"><f a=""><x path="Void"/></f></refUnref>
		<progress public="1" set="method" line="138">
			<f a=""><e path="sys.thread.NextEventTime"/></f>
			<haxe_doc>Executes all pending events.

		The returned time stamps can be used with `Sys.time()` for calculations.

		Depending on a target platform this method may be non-reentrant. It must
		not be called from event callbacks.</haxe_doc>
		</progress>
		<wait public="1" set="method" line="160">
			<f a="?timeout">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Blocks until a new event is added or `timeout` (in seconds) to expires.

		Depending on a target platform this method may also automatically execute arriving
		events while waiting. However if any event is executed it will stop waiting.

		Returns `true` if more events are expected.
		Returns `false` if no more events expected.

		Depending on a target platform this method may be non-reentrant. It must
		not be called from event callbacks.</haxe_doc>
		</wait>
		<loop public="1" set="method" line="183">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Execute all pending events.
		Wait and execute as many events as the number of times `promise()` was called.
		Runs until all repeating events are cancelled and no more events are expected.

		Depending on a target platform this method may be non-reentrant. It must
		not be called from event callbacks.</haxe_doc>
		</loop>
		<consumePending set="method" line="190"><f a="?_">
	<x path="eval.luv.Async"/>
	<x path="Void"/>
</f></consumePending>
		<new public="1" set="method" line="58"><f a=""><x path="Void"/></f></new>
		<haxe_doc>An event loop implementation used for `sys.thread.Thread`</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.thread.FixedThreadPool" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/FixedThreadPool.hx">
		<implements path="sys.thread.IThreadPool"/>
		<shutdownTask set="method" line="88" static="1"><f a=""><x path="Void"/></f></shutdownTask>
		<threadsCount public="1" get="accessor" set="null"><x path="Int"/></threadsCount>
		<get_threadsCount set="method" line="39"><f a=""><x path="Int"/></f></get_threadsCount>
		<isShutdown public="1" get="accessor" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates if `shutdown` method of this pool has been called.</haxe_doc>
		</isShutdown>
		<_isShutdown expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</_isShutdown>
		<get_isShutdown set="method" line="44"><f a=""><x path="Bool"/></f></get_isShutdown>
		<pool final="1"><c path="Array"><c path="sys.thread._FixedThreadPool.Worker"/></c></pool>
		<poolMutex final="1" expr="new Mutex()">
			<c path="sys.thread.Mutex"/>
			<meta><m n=":value"><e>new Mutex()</e></m></meta>
		</poolMutex>
		<queue final="1" expr="new Deque&lt;Void -&gt; Void&gt;()">
			<c path="sys.thread.Deque"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Deque<Void -> Void>()]]></e></m></meta>
		</queue>
		<run public="1" set="method" line="65">
			<f a="task">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Submit a task to run in a thread.

		Throws an exception if the pool is shut down.</haxe_doc>
		</run>
		<shutdown public="1" set="method" line="80">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Initiates a shutdown.
		All previousely submitted tasks will be executed, but no new tasks will
		be accepted.

		Multiple calls to this method have no effect.</haxe_doc>
		</shutdown>
		<new public="1" set="method" line="53">
			<f a="threadsCount">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new thread pool with `threadsCount` threads.</haxe_doc>
		</new>
		<haxe_doc>Thread pool with a constant amount of threads.
	Threads in the pool will exist until the pool is explicitly shut down.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.thread._FixedThreadPool.ShutdownException" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/FixedThreadPool.hx" private="1" module="sys.thread.FixedThreadPool">
		<extends path="haxe.Exception"/>
		<new public="1" set="method" line="93"><f a="message:?previous:?native">
	<c path="String"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.thread._FixedThreadPool.Worker" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/FixedThreadPool.hx" private="1" module="sys.thread.FixedThreadPool">
		<thread><x path="sys.thread.Thread"/></thread>
		<queue final="1"><c path="sys.thread.Deque"><x path="Null"><f a=""><x path="Void"/></f></x></c></queue>
		<loop set="method" line="104"><f a=""><x path="Void"/></f></loop>
		<new public="1" set="method" line="99"><f a="queue">
	<c path="sys.thread.Deque"><x path="Null"><f a=""><x path="Void"/></f></x></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.thread.Lock" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/Lock.hx" extern="1">
		<wait public="1" set="method">
			<f a="?timeout">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Waits for the lock to be released, or `timeout` (in seconds)
		to expire. Returns `true` if the lock is released and `false`
		if a time-out occurs.</haxe_doc>
		</wait>
		<release public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the lock once.

		The thread does not need to own the lock in order to release
		it. Each call to `release` allows exactly one call to `wait`
		to execute.</haxe_doc>
		</release>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Lock which is initially locked.</haxe_doc>
		</new>
		<haxe_doc>A Lock allows blocking execution until it has been unlocked. It keeps track
	of how often `release` has been called, and blocks exactly as many `wait`
	calls.

	The order of the `release` and `wait` calls is irrelevant. That is, a Lock
	can be released before anyone waits for it. In that case, the `wait` call
	will execute immediately.

	Usage example:

	```haxe
	var lock = new Lock();
	var elements = [1, 2, 3];
	for (element in elements) {
		// Create one thread per element
		new Thread(function() {
			trace(element);
			Sys.sleep(1);
			// Release once per thread = 3 times
			lock.release();
		});
	}
	for (_ in elements) {
		// Wait 3 times
		lock.wait();
	}
	trace("All threads finished");
	```</haxe_doc>
	</class>
	<class path="sys.thread.NoEventLoopException" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/NoEventLoopException.hx">
		<extends path="haxe.Exception"/>
		<new public="1" set="method" line="6">
			<f a="?msg:?previous" v="&quot;Event loop is not available. Refer to sys.thread.Thread.runWithEventLoop.&quot;:">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ msg : "Event loop is not available. Refer to sys.thread.Thread.runWithEventLoop." }</e></m></meta>
		</new>
	</class>
	<class path="sys.thread.Semaphore" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/thread/Semaphore.hx">
		<destroy set="method" line="11" static="1"><f a="sem">
	<c path="sys.thread.Semaphore"/>
	<x path="Void"/>
</f></destroy>
		<native final="1"><x path="eval.luv.Semaphore"/></native>
		<acquire public="1" set="method" line="15">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Locks the semaphore.
		If the value of the semaphore is zero, then the thread will block until it is able to lock the semaphore.
		If the value is non-zero, it is decreased by one.</haxe_doc>
		</acquire>
		<tryAcquire public="1" set="method" line="19">
			<f a="?timeout">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Try to lock the semaphore.
		If the value of the semaphore is zero, `false` is returned, else the value is increased.

		If `timeout` is specified, this function will block until the thread is able to acquire the semaphore, or the timout expires.
		`timeout` is in seconds.</haxe_doc>
		</tryAcquire>
		<release public="1" set="method" line="33">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Release the semaphore.
		The value of the semaphore is increased by one.</haxe_doc>
		</release>
		<new public="1" set="method" line="6">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new semaphore with an initial value.</haxe_doc>
		</new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="sys.thread._Thread.ThreadImpl" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread"><c path="eval.vm.NativeThread"/></typedef>
	<abstract path="sys.thread.Thread" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/thread/Thread.hx">
		<from><icast><t path="sys.thread._Thread.ThreadImpl"/></icast></from>
		<this><t path="sys.thread._Thread.ThreadImpl"/></this>
		<impl><class path="sys.thread._Thread.Thread_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread" final="1">
	<events public="1" get="accessor" set="null" static="1"><c path="sys.thread.EventLoop"/></events>
	<_new get="inline" set="null" line="36" static="1">
		<f a="h">
			<c path="eval.vm.NativeThread"/>
			<x path="sys.thread.Thread"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<sendMessage public="1" get="inline" set="null" line="40" static="1"><f a="this:msg">
	<t path="sys.thread._Thread.ThreadImpl"/>
	<d/>
	<x path="Void"/>
</f></sendMessage>
	<current public="1" get="inline" set="null" line="44" static="1"><f a=""><x path="sys.thread.Thread"/></f></current>
	<create public="1" get="inline" set="null" line="48" static="1"><f a="job">
	<f a=""><x path="Void"/></f>
	<x path="sys.thread.Thread"/>
</f></create>
	<runWithEventLoop public="1" set="method" line="52" static="1"><f a="job">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runWithEventLoop>
	<createWithEventLoop public="1" get="inline" set="null" line="69" static="1"><f a="job">
	<f a=""><x path="Void"/></f>
	<x path="sys.thread.Thread"/>
</f></createWithEventLoop>
	<readMessage public="1" get="inline" set="null" line="78" static="1"><f a="block">
	<x path="Bool"/>
	<d/>
</f></readMessage>
	<yield public="1" get="inline" set="null" line="82" static="1"><f a=""><x path="Void"/></f></yield>
	<equals public="1" get="inline" set="null" line="87" static="1">
		<f a="this:other">
			<t path="sys.thread._Thread.ThreadImpl"/>
			<x path="sys.thread.Thread"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
	</equals>
	<getHandle get="inline" set="null" line="91" static="1"><f a="this">
	<t path="sys.thread._Thread.ThreadImpl"/>
	<c path="eval.vm.NativeThread"/>
</f></getHandle>
	<get_events set="method" line="95" static="1"><f a="this">
	<t path="sys.thread._Thread.ThreadImpl"/>
	<c path="sys.thread.EventLoop"/>
</f></get_events>
	<processEvents set="method" line="102" static="1">
		<f a=""><x path="Void"/></f>
		<meta><m n=":keep"/></meta>
	</processEvents>
</class></impl>
	</abstract>
	<class path="sys.thread._Thread.Thread_Impl_" params="" file="/home/runner/work/haxe/haxe/std/eval/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread" final="1">
		<events public="1" get="accessor" set="null" static="1"><c path="sys.thread.EventLoop"/></events>
		<_new get="inline" set="null" line="36" static="1">
			<f a="h">
				<c path="eval.vm.NativeThread"/>
				<x path="sys.thread.Thread"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<sendMessage public="1" get="inline" set="null" line="40" static="1"><f a="this:msg">
	<t path="sys.thread._Thread.ThreadImpl"/>
	<d/>
	<x path="Void"/>
</f></sendMessage>
		<current public="1" get="inline" set="null" line="44" static="1"><f a=""><x path="sys.thread.Thread"/></f></current>
		<create public="1" get="inline" set="null" line="48" static="1"><f a="job">
	<f a=""><x path="Void"/></f>
	<x path="sys.thread.Thread"/>
</f></create>
		<runWithEventLoop public="1" set="method" line="52" static="1"><f a="job">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runWithEventLoop>
		<createWithEventLoop public="1" get="inline" set="null" line="69" static="1"><f a="job">
	<f a=""><x path="Void"/></f>
	<x path="sys.thread.Thread"/>
</f></createWithEventLoop>
		<readMessage public="1" get="inline" set="null" line="78" static="1"><f a="block">
	<x path="Bool"/>
	<d/>
</f></readMessage>
		<yield public="1" get="inline" set="null" line="82" static="1"><f a=""><x path="Void"/></f></yield>
		<equals public="1" get="inline" set="null" line="87" static="1">
			<f a="this:other">
				<t path="sys.thread._Thread.ThreadImpl"/>
				<x path="sys.thread.Thread"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
		</equals>
		<getHandle get="inline" set="null" line="91" static="1"><f a="this">
	<t path="sys.thread._Thread.ThreadImpl"/>
	<c path="eval.vm.NativeThread"/>
</f></getHandle>
		<get_events set="method" line="95" static="1"><f a="this">
	<t path="sys.thread._Thread.ThreadImpl"/>
	<c path="sys.thread.EventLoop"/>
</f></get_events>
		<processEvents set="method" line="102" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</processEvents>
	</class>
	<class path="sys.thread.ThreadPoolException" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/ThreadPoolException.hx">
		<extends path="haxe.Exception"/>
		<new public="1" set="method" line="5"><f a="message:?previous:?native">
	<c path="String"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.thread.Tls" params="T" file="/home/runner/work/haxe/haxe/std/sys/thread/Tls.hx" extern="1">
		<value public="1" get="null" set="null"><c path="sys.thread.Tls.T"/></value>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates thread local storage. This is placeholder that can store
		a value that will be different depending on the local thread.
		Set the tls value to `null` before exiting the thread
		or the memory will never be collected.</haxe_doc>
		</new>
		<haxe_doc>Creates thread local storage.

	(hl) Warning: At the moment `Tls` does not protect the value from being
	garbage collected. Keep the value reachable to avoid crashes.</haxe_doc>
	</class>
</haxe>