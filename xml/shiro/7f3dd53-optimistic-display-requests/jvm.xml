<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/home/runner/work/haxe/haxe/std/Any.hx">
		<from><icast><d/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="/home/runner/work/haxe/haxe/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="37" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<toString get="inline" set="null" line="40" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/home/runner/work/haxe/haxe/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="37" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<toString get="inline" set="null" line="40" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</toString>
	</class>
	<class path="Array" params="T" file="/home/runner/work/haxe/haxe/std/java/_std/Array.hx" final="1">
		<__hx_toString_depth expr="0" line="39" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":skipReflection"/>
			</meta>
		</__hx_toString_depth>
		<__hx_defaultCapacity final="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>4</e></m>
				<m n=":skipReflection"/>
			</meta>
		</__hx_defaultCapacity>
		<ofNative params="X" set="method" line="45" static="1">
			<f a="native">
				<c path="java.NativeArray"><c path="ofNative.X"/></c>
				<c path="Array"><c path="ofNative.X"/></c>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\treturn new Array<X>(_native);\n\t"]]></e></m></meta>
		</ofNative>
		<alloc params="Y" set="method" line="55" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="Array"><c path="alloc.Y"/></c>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\treturn new Array<Y>((Y[]) ((java.lang.Object)new java.lang.Object[size]));\n\t"]]></e></m></meta>
		</alloc>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<__a><c path="java.NativeArray"><c path="Array.T"/></c></__a>
		<getNative set="method" line="63"><f a=""><c path="java.NativeArray"><c path="Array.T"/></c></f></getNative>
		<concat public="1" set="method" line="75">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<concatNative set="method" line="85"><f a="a">
	<c path="java.NativeArray"><c path="Array.T"/></c>
	<x path="Void"/>
</f></concatNative>
		<join public="1" set="method" line="102">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method" line="119">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method" line="133">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method" line="147">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method" line="161">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method" line="176">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method" line="198">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<quicksort set="method" line="204"><f a="lo:hi:f">
	<x path="Int"/>
	<x path="Int"/>
	<f a=":">
		<c path="Array.T"/>
		<c path="Array.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></quicksort>
		<splice public="1" set="method" line="226">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<spliceVoid set="method" line="256"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></spliceVoid>
		<toString public="1" set="method" line="281">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<__hx_toString set="method" line="296"><f a=""><c path="String"/></f></__hx_toString>
		<unshift public="1" set="method" line="313">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method" line="330">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method" line="363">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<contains public="1" set="method" line="379">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether `this` Array contains `x`.

		If `x` is found by checking standard equality, the function returns `true`, otherwise
		the function returns `false`.</haxe_doc>
		</contains>
		<indexOf public="1" set="method" line="390">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="405">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method" line="421">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="429">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="433">
			<f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f>
			<haxe_doc>Returns an iterator of the Array indices and values.</haxe_doc>
		</keyValueIterator>
		<resize public="1" set="method" line="437">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<map public="1" params="S" get="inline" set="null" line="451">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="458">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<__get set="method" line="468"><f a="idx">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__get>
		<__set set="method" line="477"><f a="idx:v">
	<x path="Int"/>
	<c path="Array.T"/>
	<x path="Void"/>
</f></__set>
		<__unsafe_get get="inline" set="null" line="495"><f a="idx">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__unsafe_get>
		<__unsafe_set get="inline" set="null" line="499"><f a="idx:val">
	<x path="Int"/>
	<c path="Array.T"/>
	<c path="Array.T"/>
</f></__unsafe_set>
		<new public="1" set="method" line="70">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":classCode"><e>"\n\tpublic Array(T[] _native)\n\t{\n\t\tthis.__a = _native;\n\t\tthis.length = _native.length;\n\t}\n"</e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/home/runner/work/haxe/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/home/runner/work/haxe/haxe/std/java/_std/Date.hx">
		<now public="1" set="method" line="116" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" line="123" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" line="130" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.

		If `s` does not match these formats, the result is unspecified.</haxe_doc>
		</fromString>
		<date><c path="java.util.Calendar"/></date>
		<dateUTC><c path="java.util.Calendar"/></dateUTC>
		<getTime public="1" get="inline" set="null" line="40">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" get="inline" set="null" line="44">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" get="inline" set="null" line="48">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" get="inline" set="null" line="52">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" get="inline" set="null" line="56">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" get="inline" set="null" line="60">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" get="inline" set="null" line="64">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" get="inline" set="null" line="68">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" get="inline" set="null" line="73">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" get="inline" set="null" line="77">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" get="inline" set="null" line="81">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" get="inline" set="null" line="85">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" get="inline" set="null" line="89">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" get="inline" set="null" line="93">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" get="inline" set="null" line="97">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" get="inline" set="null" line="102">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" set="method" line="106">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method" line="34">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="DateTools" params="" file="/home/runner/work/haxe/haxe/std/DateTools.hx">
		<DAY_SHORT_NAMES expr="[&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;]" line="35" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]</e></m></meta>
		</DAY_SHORT_NAMES>
		<DAY_NAMES expr="[&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;]" line="36" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]</e></m></meta>
		</DAY_NAMES>
		<MONTH_SHORT_NAMES expr="[&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]" line="37" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]</e></m></meta>
		</MONTH_SHORT_NAMES>
		<MONTH_NAMES expr="[&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]" line="40" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]</e></m></meta>
		</MONTH_NAMES>
		<__format_get set="method" line="44" static="1"><f a="d:e">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format_get>
		<__format set="method" line="105" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="144" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.

		```haxe
		var t = DateTools.format(Date.now(), "%Y-%m-%d_%H:%M:%S");
		// 2016-07-08_14:44:05

		var t = DateTools.format(Date.now(), "%r");
		// 02:44:05 PM

		var t = DateTools.format(Date.now(), "%T");
		// 14:44:05

		var t = DateTools.format(Date.now(), "%F");
		// 2016-07-08
		```</haxe_doc>
		</format>
		<delta public="1" get="inline" set="null" line="160" static="1">
			<f a="d:t">
				<c path="Date"/>
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns the result of adding timestamp `t` to Date `d`.

		This is a convenience function for calling
		`Date.fromTime(d.getTime() + t)`.</haxe_doc>
		</delta>
		<DAYS_OF_MONTH expr="[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]" line="164" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</e></m></meta>
		</DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="171" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in the month of Date `d`.

		This method handles leap years.</haxe_doc>
		</getMonthDays>
		<seconds public="1" get="inline" set="null" line="185" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of seconds to a timestamp.</haxe_doc>
		</seconds>
		<minutes public="1" get="inline" set="null" line="192" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of minutes to a timestamp.</haxe_doc>
		</minutes>
		<hours public="1" get="inline" set="null" line="199" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of hours to a timestamp.</haxe_doc>
		</hours>
		<days public="1" get="inline" set="null" line="206" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of days to a timestamp.</haxe_doc>
		</days>
		<parse public="1" set="method" line="213" static="1">
			<f a="t">
				<x path="Float"/>
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
			</f>
			<haxe_doc>Separate a date-time into several components</haxe_doc>
		</parse>
		<make public="1" set="method" line="235" static="1">
			<f a="o">
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
				<x path="Float"/>
			</f>
			<haxe_doc>Build a date-time from several components</haxe_doc>
		</make>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="EReg" params="" file="/home/runner/work/haxe/haxe/std/jvm/_std/EReg.hx">
		<escape public="1" get="inline" set="null" line="153" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Escape the string `s` for use as a part of regular expression.

		If `s` is null, the result is unspecified.</haxe_doc>
		</escape>
		<compilePattern set="method" line="157" static="1"><f a="r:opt">
	<c path="String"/>
	<c path="String"/>
	<c path="jvm.CompiledPattern"/>
</f></compilePattern>
		<matcher><c path="java.util.regex.Matcher"/></matcher>
		<cur><c path="String"/></cur>
		<isGlobal><x path="Bool"/></isGlobal>
		<initialize set="method" line="43"><f a="compiledPattern">
	<c path="jvm.CompiledPattern"/>
	<x path="Void"/>
</f></initialize>
		<match public="1" set="method" line="48">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="54">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, the result is unspecified.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="61">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="65">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="69">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="74">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="80">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<start get="inline" set="null" line="115"><f a="group">
	<x path="Int"/>
	<x path="Int"/>
</f></start>
		<len get="inline" set="null" line="119"><f a="group">
	<x path="Int"/>
	<x path="Int"/>
</f></len>
		<replace public="1" set="method" line="123">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="129">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method" line="34">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
			<overloads><new set="method" line="39">
	<f a="compiledPattern">
		<c path="jvm.CompiledPattern"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Enum" params="T" file="/home/runner/work/haxe/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/home/runner/work/haxe/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/home/runner/work/haxe/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><match public="1" set="method" line="58" static="1">
	<f a="this:pattern">
		<x path="EnumValue"/>
		<d/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
</match></class></impl>
	</abstract>
	<class path="_EnumValue.EnumValue_Impl_" params="" file="/home/runner/work/haxe/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><match public="1" set="method" line="58" static="1">
	<f a="this:pattern">
		<x path="EnumValue"/>
		<d/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
</match></class>
	<class path="IntIterator" params="" file="/home/runner/work/haxe/haxe/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="53">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="62">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="45">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</class>
	<class path="Lambda" params="" file="/home/runner/work/haxe/haxe/std/Lambda.hx">
		<array public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="57" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="haxe.ds.List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" get="inline" set="null" line="69" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="item">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="Array"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `it`.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" get="inline" set="null" line="78" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a="index:item">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="Array"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<flatten public="1" params="A" get="inline" set="null" line="87" static="1">
			<f a="it">
				<t path="Iterable"><t path="Iterable"><c path="flatten.A"/></t></t>
				<c path="Array"><c path="flatten.A"/></c>
			</f>
			<haxe_doc>Concatenate a list of iterables.
		The order of elements is preserved.</haxe_doc>
		</flatten>
		<flatMap public="1" params="A:B" get="inline" set="null" line="96" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="flatMap.A"/></t>
				<f a="item">
					<c path="flatMap.A"/>
					<t path="Iterable"><c path="flatMap.B"/></t>
				</f>
				<c path="Array"><c path="flatMap.B"/></c>
			</f>
			<haxe_doc>A composition of map and flatten.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</flatMap>
		<has public="1" params="A" set="method" line="108" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="item">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.

		This function returns true as soon as an element is found for which a
		call to `f` returns true.

		If no such element is found, the result is false.

		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="144" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="item">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.

		This function returns false as soon as an element is found for which a
		call to `f` returns false.

		If no such element is found, the result is true.

		In particular, this function always returns true if `it` is empty.

		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="156" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="item">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.

		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="167" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="item">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a Array containing those elements of `it` for which `f` returned
		true.
		If `it` is empty, the result is the empty Array even if `f` is null.
		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="183" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a="item:result">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.

		If `it` has no elements, the result is `first`.

		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<foldi public="1" params="A:B" set="method" line="194" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="foldi.A"/></t>
				<f a="item:result:index">
					<c path="foldi.A"/>
					<c path="foldi.B"/>
					<x path="Int"/>
					<c path="foldi.B"/>
				</f>
				<c path="foldi.B"/>
				<c path="foldi.B"/>
			</f>
			<haxe_doc>Similar to fold, but also passes the index of each element to `f`.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</foldi>
		<count public="1" params="A" set="method" line="209" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="item">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="224" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="235" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<find public="1" params="T" set="method" line="255" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="item">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<x path="Null"><c path="find.T"/></x>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<findIndex public="1" params="T" set="method" line="273" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="findIndex.T"/></t>
				<f a="item">
					<c path="findIndex.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is -1.

		If `f` is null, the result is unspecified.</haxe_doc>
		</findIndex>
		<concat public="1" params="T" set="method" line="289" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="Array"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new Array containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
	</class>
	<typedef path="List" params="T" file="/home/runner/work/haxe/haxe/std/List.hx"><c path="haxe.ds.List"><c path="List.T"/></c></typedef>
	<typedef path="Map" params="K:V" file="/home/runner/work/haxe/haxe/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/home/runner/work/haxe/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/home/runner/work/haxe/haxe/std/java/_std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately `3.141592653589793`.</haxe_doc>
		</PI>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		`NaN` stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: `Math.sqrt(-1)`.

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of `-1.0 / 0.0`.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of `1.0 / 0.0`.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		- If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.
		- If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		- If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		`exp(1.0)` is approximately `2.718281828459`.

		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<fround public="1" get="inline" set="null" line="43" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<ffloor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to `0.0`,
		and less than `1.0`.</haxe_doc>
		</random>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is `Math.NaN`.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, `null`, `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":native"><e>"java.lang.Math"</e></m>
		</meta>
	</class>
	<class path="Reflect" params="" file="/home/runner/work/haxe/haxe/std/jvm/_std/Reflect.hx">
		<hasField public="1" set="method" line="35" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="48" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.</haxe_doc>
		</field>
		<setField public="1" set="method" line="55" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="59" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="67" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" line="76" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method `func` with the given arguments `args`.

		The object `o` is ignored in most cases. It serves as the `this`-context in the following
		situations:

		* (neko) Allows switching the context to `o` in all cases.
		* (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
		* (js, lua) Require the `o` argument if `func` does not, but should have a context.
			This can occur by accessing a function field natively, e.g. through `Reflect.field`
			or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
			ignored like on other targets.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="80" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="97" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="101" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="148" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="168" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="187" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="194" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="201" static="1">
			<f a="o">
				<x path="Null"><c path="copy.T"/></x>
				<x path="Null"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is `null`.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="210" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/home/runner/work/haxe/haxe/std/jvm/_std/Std.hx">
		<is public="1" get="inline" set="null" line="30" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.is is deprecated. Use Std.isOfType instead."</e></m></meta>
			<haxe_doc>DEPRECATED. Use `Std.isOfType(v, t)` instead.

		Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<isOfType public="1" set="method" line="34" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<string public="1" set="method" line="60" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="64" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<isSpaceChar get="inline" set="null" line="69" static="1"><f a="code">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSpaceChar>
		<isHexPrefix get="inline" set="null" line="72" static="1"><f a="cur:next">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isHexPrefix>
		<isDecimalDigit get="inline" set="null" line="75" static="1"><f a="code">
	<x path="Int"/>
	<x path="Bool"/>
</f></isDecimalDigit>
		<isHexadecimalDigit get="inline" set="null" line="78" static="1"><f a="code">
	<x path="Int"/>
	<x path="Bool"/>
</f></isHexadecimalDigit>
		<parseInt public="1" set="method" line="80" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		`x` may optionally start with a + or - to denote a postive or negative value respectively.

		If the optional sign is followed 0x or 0X, hexadecimal notation is recognized where the following
		digits may contain 0-9 and A-F. Both the prefix and digits are case insensitive.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. Octal and binary
		notations are not supported.

		Parsing continues until an invalid character is detected, in which case the result up to
		that point is returned. Scientific notation is not supported. That is `Std.parseInt('10e2')` produces `10`.

		If `x` is `null`, the result is `null`.
		If `x` cannot be parsed as integer or is empty, the result is `null`.

		If `x` starts with a hexadecimal prefix which is not followed by at least one valid hexadecimal
		digit, the result is unspecified.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="138" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of `null`. Also, hexadecimal support is **not** specified.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.

		It may also end with `e` or `E` followed by optional minus or plus sign and a sequence of
		digits (defines exponent to base 10).</haxe_doc>
		</parseFloat>
		<downcast public="1" params="T:S" get="inline" set="null" line="185" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" get="inline" set="null" line="190" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m></meta>
		</instance>
		<random public="1" set="method" line="194" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Float" params="" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Single" params="" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Single"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc>Single-precision IEEE 32bit float (4-byte).</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="java.lang.CharSequence" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/CharSequence.class" extern="1" interface="1"><meta>
	<m n=":native"><e>"java.lang.CharSequence"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="String" params="" file="/home/runner/work/haxe/haxe/std/jvm/_std/String.hx" extern="1">
		<implements path="java.lang.CharSequence"/>
		<fromCharCode public="1" get="inline" set="null" line="73" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" get="inline" set="null" line="36">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" get="inline" set="null" line="40">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" get="inline" set="null" line="44">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Returns the position of the leftmost occurrence of `str` within `this` String.

		If `str` is the empty String `""`, then:
			* If `startIndex` is not specified or < 0, 0 is returned.
			* If `startIndex >= this.length`, `this.length` is returned.
			* Otherwise, `startIndex` is returned,

		Otherwise, if `startIndex` is not specified or < 0, it is treated as 0.

		If `startIndex >= this.length`, -1 is returned.

		Otherwise the search is performed within the substring of `this` String starting
		at `startIndex`. If `str` is found, the position of its first character in `this`
		String relative to position 0 is returned.

		If `str` cannot be found, -1 is returned.]]></haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="48">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" get="inline" set="null" line="52">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" get="inline" set="null" line="56">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" get="inline" set="null" line="60">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<compareTo set="method"><f a="anotherString">
	<c path="String"/>
	<x path="Int"/>
</f></compareTo>
		<codePointAt set="method"><f a="idx">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointAt>
		<getBytes set="method">
			<f a="encoding">
				<c path="String"/>
				<t path="haxe.io.BytesData"/>
			</f>
			<overloads><getBytes set="method"><f a=""><t path="haxe.io.BytesData"/></f></getBytes></overloads>
		</getBytes>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
			<overloads>
				<new public="1" set="method"><f a="b:offset:length:charsetName">
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="b:offset:length">
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="b">
	<c path="java.NativeArray"><x path="java.Char16"/></c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="b:offset:count">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":native"><e>"java.lang.String"</e></m>
		</meta>
	</class>
	<class path="StringBuf" params="" file="/home/runner/work/haxe/haxe/std/jvm/_std/StringBuf.hx">
		<b><c path="java.lang.StringBuilder"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="32"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" set="method" line="36">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addOpt set="method" line="47">
			<f a="v">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":native"><e>"add"</e></m>
				<m n=":ifFeature"><e>"StringBuf.add"</e></m>
			</meta>
			<overloads>
				<add set="method" line="89">
					<f a="v">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":native"><e>"add"</e></m>
						<m n=":ifFeature"><e>"StringBuf.add"</e></m>
					</meta>
				</add>
				<add set="method" line="82">
					<f a="v">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":native"><e>"add"</e></m>
						<m n=":ifFeature"><e>"StringBuf.add"</e></m>
					</meta>
				</add>
				<add set="method" line="75">
					<f a="v">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":native"><e>"add"</e></m>
						<m n=":ifFeature"><e>"StringBuf.add"</e></m>
					</meta>
				</add>
				<add set="method" line="68">
					<f a="v">
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":native"><e>"add"</e></m>
						<m n=":ifFeature"><e>"StringBuf.add"</e></m>
					</meta>
				</add>
				<add set="method" line="61">
					<f a="v">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":native"><e>"add"</e></m>
						<m n=":ifFeature"><e>"StringBuf.add"</e></m>
					</meta>
				</add>
				<add set="method" line="54">
					<f a="v">
						<t path="java.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":native"><e>"add"</e></m>
						<m n=":ifFeature"><e>"StringBuf.add"</e></m>
					</meta>
				</add>
			</overloads>
		</addOpt>
		<addSub public="1" set="method" line="93">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<addChar public="1" set="method" line="98">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<toString public="1" set="method" line="102">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.SysTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/SysTools.hx">
		<winMetaCharacters final="1" public="1" set="null" expr="[&quot; &quot;.code, &quot;(&quot;.code, &quot;)&quot;.code, &quot;%&quot;.code, &quot;!&quot;.code, &quot;^&quot;.code, &quot;\&quot;&quot;.code, &quot;&lt;&quot;.code, &quot;&gt;&quot;.code, &quot;&amp;&quot;.code, &quot;|&quot;.code, &quot;\n&quot;.code, &quot;\r&quot;.code, &quot;,&quot;.code, &quot;;&quot;.code]" line="9" static="1">
			<x path="haxe.ds.ReadOnlyArray"><x path="Int"/></x>
			<meta><m n=":value"><e><![CDATA[[" ".code, "(".code, ")".code, "%".code, "!".code, "^".code, "\"".code, "<".code, ">".code, "&".code, "|".code, "\n".code, "\r".code, ",".code, ";".code]]]></e></m></meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteUnixArg public="1" set="method" line="18" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<quoteWinArg public="1" set="method" line="46" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```haxe
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
	</class>
	<class path="StringTools" params="" file="/home/runner/work/haxe/haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="42" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<postProcessUrlEncode set="method" line="72" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></postProcessUrlEncode>
		<urlDecode public="1" set="method" line="108" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="154" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="189" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: `htmlUnescape(htmlEscape(s)) == s`

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<contains public="1" get="inline" set="null" line="207" static="1">
			<f a="s:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `s` contains `value` and  `false` otherwise.

		When `value` is `null`, the result is unspecified.</haxe_doc>
		</contains>
		<startsWith public="1" get="inline" set="null" line="222" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" get="inline" set="null" line="245" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="274" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" get="inline" set="null" line="292" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" get="inline" set="null" line="313" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" get="inline" set="null" line="331" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="351" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="376" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="398" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurrences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s` except the last one. If `by` is also the empty String `""`, `s`
		remains unchanged.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="415" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="457" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof()` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</fastCodeAt>
		<unsafeCodeAt public="1" get="inline" set="null" line="494" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</unsafeCodeAt>
		<iterator public="1" get="inline" set="null" line="527" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringIterator"/>
			</f>
			<haxe_doc>Returns an iterator of the char codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringIteratorUnicode`.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="538" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIterator"/>
			</f>
			<haxe_doc>Returns an iterator of the char indexes and codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different of runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringKeyValueIteratorUnicode`.</haxe_doc>
		</keyValueIterator>
		<isEof public="1" get="inline" set="null" line="545" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Tells if `c` represents the end-of-file (EOF) character.</haxe_doc>
		</isEof>
		<quoteUnixArg public="1" set="method" line="566" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.quoteUnixArg() is deprecated. Use haxe.SysTools.quoteUnixArg() instead."</e></m>
			</meta>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<winMetaCharacters public="1" expr="cast haxe.SysTools.winMetaCharacters" line="575" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta>
				<m n=":value"><e>cast haxe.SysTools.winMetaCharacters</e></m>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.winMetaCharacters is deprecated. Use haxe.SysTools.winMetaCharacters instead."</e></m>
			</meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteWinArg public="1" set="method" line="592" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.quoteWinArg() is deprecated. Use haxe.SysTools.quoteWinArg() instead."</e></m>
			</meta>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```haxe
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<_charAt get="inline" set="null" line="598" static="1"><f a="str:idx">
	<c path="String"/>
	<x path="Int"/>
	<x path="java.Char16"/>
</f></_charAt>
		<MIN_SURROGATE_CODE_POINT get="inline" set="null" expr="65536" line="607" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65536</e></m></meta>
		</MIN_SURROGATE_CODE_POINT>
		<utf16CodePointAt get="inline" set="null" line="609" static="1"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></utf16CodePointAt>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="Sys" params="" file="/home/runner/work/haxe/haxe/std/java/_std/Sys.hx">
		<_args static="1"><c path="java.NativeArray"><c path="String"/></c></_args>
		<_env static="1"><c path="haxe.ds.StringMap"><c path="String"/></c></_env>
		<_sysName static="1"><c path="String"/></_sysName>
		<print public="1" get="inline" set="null" line="35" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output.</haxe_doc>
		</print>
		<println public="1" get="inline" set="null" line="39" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output, followed by a newline.
		On Windows, this function outputs a CRLF newline.
		LF newlines are printed on all other platforms.</haxe_doc>
		</println>
		<args public="1" set="method" line="43" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns all the arguments that were passed in the command line.
		This does not include the interpreter or the name of the program file.

		(java)(eval) On Windows, non-ASCII Unicode arguments will not work correctly.</haxe_doc>
		</args>
		<getEnv public="1" set="method" line="49" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the given environment variable, or `null` if it
		doesn't exist.</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" line="53" static="1">
			<f a="s:v">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the given environment variable.

		If `v` is `null`, the environment variable is removed.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</putEnv>
		<environment public="1" set="method" line="58" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Returns a map of the current environment variables and their values
		as of the invocation of the function.

		(python) On Windows, the variable names are always in upper case.

		(cpp)(hl)(neko) On Windows, the variable names match the last capitalization used when modifying
		the variable if the variable has been modified, otherwise they match their capitalization at
		the start of the process.

		On Windows on remaining targets, variable name capitalization matches however they were capitalized
		at the start of the process or at the moment of their creation.</haxe_doc>
		</environment>
		<sleep public="1" set="method" line="68" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspends execution for the given length of time (in seconds).</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" line="75" static="1">
			<f a="loc">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Changes the current time locale, which will affect `DateTools.format` date formating.
		Returns `true` if the locale was successfully changed.</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" set="method" line="79" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Gets the current working directory (usually the one in which the program was started).</haxe_doc>
		</getCwd>
		<setCwd public="1" set="method" line="83" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current working directory.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" line="88" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the type of the current system. Possible values are:
		 - `"Windows"`
		 - `"Linux"`
		 - `"BSD"`
		 - `"Mac"`</haxe_doc>
		</systemName>
		<command public="1" set="method" line="104" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Runs the given command. The command output will be printed to the same output as the current process.
		The current process will block until the command terminates.
		The return value is the exit code of the command (usually `0` indicates no error).

		Command arguments can be passed in two ways:

		 1. Using `args` to pass command arguments. Each argument will be automatically quoted and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a full path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		Use the `sys.io.Process` API for more complex tasks, such as background processes, or providing input to the command.</haxe_doc>
		</command>
		<exit public="1" set="method" line="128" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Exits the current process with the given exit code.

		(macro)(eval) Being invoked in a macro or eval context (e.g. with `-x` or `--run`) immediately terminates
		the compilation process, which also prevents the execution of any `--next` sections of compilation arguments.</haxe_doc>
		</exit>
		<time public="1" set="method" line="132" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds).</haxe_doc>
		</time>
		<cpuTime public="1" set="method" line="136" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds),
		but only accounts for the actual time spent running on the CPU for the current thread/process.</haxe_doc>
		</cpuTime>
		<executablePath public="1" set="method" line="140" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":deprecated"><e>"Use programPath instead"</e></m></meta>
			<haxe_doc>Returns the path to the current executable that we are running.</haxe_doc>
		</executablePath>
		<programPath public="1" set="method" line="144" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the absolute path to the current program file that we are running.
		Concretely, for an executable binary, it returns the path to the binary.
		For a script (e.g. a PHP file), it returns the path to the script.</haxe_doc>
		</programPath>
		<getChar public="1" set="method" line="149" static="1">
			<f a="echo">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a single input character from the standard input and returns it.
		Setting `echo` to `true` will also display the character on the output.</haxe_doc>
		</getChar>
		<stdin public="1" set="method" line="154" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<haxe_doc>Returns the standard input of the process, from which user input can be read.
		Usually it will block until the user sends a full input line.
		See `getChar` for an alternative.</haxe_doc>
		</stdin>
		<stdout public="1" set="method" line="159" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard output of the process, to which program output can be written.</haxe_doc>
		</stdout>
		<stderr public="1" set="method" line="163" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard error of the process, to which program errors can be written.</haxe_doc>
		</stderr>
		<haxe_doc>This class provides access to various base functions of system platforms.
	Look in the `sys` package for more system APIs.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="ValueType" params="" file="/home/runner/work/haxe/haxe/std/jvm/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="jvm.EmptyConstructor" params="" file="/home/runner/work/haxe/haxe/std/jvm/EmptyConstructor.hx"><meta>
	<m n=":keep"/>
	<m n=":native"><e>"haxe.jvm.EmptyConstructor"</e></m>
</meta></class>
	<class path="Type" params="" file="/home/runner/work/haxe/haxe/std/jvm/_std/Type.hx">
		<isEnumClass params="T" set="method" line="23" static="1"><f a="c">
	<c path="java.lang.Class"><c path="isEnumClass.T"/></c>
	<x path="Bool"/>
</f></isEnumClass>
		<isEnumValueClass params="T" set="method" line="29" static="1"><f a="c">
	<c path="java.lang.Class"><c path="isEnumValueClass.T"/></c>
	<x path="Bool"/>
</f></isEnumValueClass>
		<getClass public="1" params="T" set="method" line="35" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Null"><x path="Class"><c path="getClass.T"/></x></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="52" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="63" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="79" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="88" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="95" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="110" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<emptyArg final="1" set="null" expr="((null : jvm.EmptyConstructor))" line="126" static="1">
			<c path="jvm.EmptyConstructor"/>
			<meta><m n=":value"><e>((null : jvm.EmptyConstructor))</e></m></meta>
		</emptyArg>
		<emptyClass final="1" set="null" expr="jvm.EmptyConstructor.native()" line="128" static="1">
			<c path="java.lang.Class"><c path="jvm.EmptyConstructor"/></c>
			<meta><m n=":value"><e>jvm.EmptyConstructor.native()</e></m></meta>
		</emptyClass>
		<createInstance public="1" params="T" set="method" line="130" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="170" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="180" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="192" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getFields params="T" set="method" line="202" static="1"><f a="c:statics">
	<c path="java.lang.Class"><c path="getFields.T"/></c>
	<x path="Bool"/>
	<c path="Array"><c path="String"/></c>
</f></getFields>
		<getInstanceFields public="1" set="method" line="217" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`, including
		inherited fields.

		This only includes fields which are known at compile-time. In
		particular, using `getInstanceFields(getClass(obj))` will not include
		any fields which were added to `obj` at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="230" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="234" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="248" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="280" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="289" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="293" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" line="298" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="302" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="/home/runner/work/haxe/haxe/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/home/runner/work/haxe/haxe/std/UInt.hx" private="1" module="UInt" final="1">
	<add get="inline" set="null" line="135" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<div get="inline" set="null" line="139" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</div>
	<mul get="inline" set="null" line="143" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</mul>
	<sub get="inline" set="null" line="147" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<gt get="inline" set="null" line="152" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gte get="inline" set="null" line="159" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="165" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="169" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<and get="inline" set="null" line="173" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
	</and>
	<or get="inline" set="null" line="177" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
	</or>
	<xor get="inline" set="null" line="181" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
	</xor>
	<shl get="inline" set="null" line="185" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
	</shl>
	<shr get="inline" set="null" line="189" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</shr>
	<ushr get="inline" set="null" line="193" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
	</ushr>
	<mod get="inline" set="null" line="197" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</mod>
	<addWithFloat get="inline" set="null" line="201" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addWithFloat>
	<mulWithFloat get="inline" set="null" line="205" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulWithFloat>
	<divFloat get="inline" set="null" line="209" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divFloat>
	<floatDiv get="inline" set="null" line="213" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</floatDiv>
	<subFloat get="inline" set="null" line="217" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subFloat>
	<floatSub get="inline" set="null" line="221" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</floatSub>
	<gtFloat get="inline" set="null" line="225" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtFloat>
	<equalsInt params="T" get="inline" set="null" line="229" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsInt>
	<notEqualsInt params="T" get="inline" set="null" line="233" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsInt>
	<equalsFloat params="T" get="inline" set="null" line="237" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsFloat>
	<notEqualsFloat params="T" get="inline" set="null" line="241" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsFloat>
	<gteFloat get="inline" set="null" line="245" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteFloat>
	<floatGt get="inline" set="null" line="249" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</floatGt>
	<floatGte get="inline" set="null" line="253" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</floatGte>
	<ltFloat get="inline" set="null" line="257" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltFloat>
	<lteFloat get="inline" set="null" line="261" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteFloat>
	<floatLt get="inline" set="null" line="265" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</floatLt>
	<floatLte get="inline" set="null" line="269" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</floatLte>
	<modFloat get="inline" set="null" line="273" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modFloat>
	<floatMod get="inline" set="null" line="277" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</floatMod>
	<negBits get="inline" set="null" line="281" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
	</negBits>
	<prefixIncrement get="inline" set="null" line="285" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>++A</e></m></meta>
	</prefixIncrement>
	<postfixIncrement get="inline" set="null" line="289" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</postfixIncrement>
	<prefixDecrement get="inline" set="null" line="293" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>--A</e></m></meta>
	</prefixDecrement>
	<postfixDecrement get="inline" set="null" line="297" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A--</e></m></meta>
	</postfixDecrement>
	<toString get="inline" set="null" line="302" static="1"><f a="this:?radix">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></toString>
	<toInt get="inline" set="null" line="306" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
	<toFloat get="inline" set="null" line="310" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
</class></impl>
	</abstract>
	<class path="_UInt.UInt_Impl_" params="" file="/home/runner/work/haxe/haxe/std/UInt.hx" private="1" module="UInt" final="1">
		<add get="inline" set="null" line="135" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<div get="inline" set="null" line="139" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</div>
		<mul get="inline" set="null" line="143" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</mul>
		<sub get="inline" set="null" line="147" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<gt get="inline" set="null" line="152" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gte get="inline" set="null" line="159" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="165" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="169" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<and get="inline" set="null" line="173" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		</and>
		<or get="inline" set="null" line="177" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
		</or>
		<xor get="inline" set="null" line="181" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
		</xor>
		<shl get="inline" set="null" line="185" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		</shl>
		<shr get="inline" set="null" line="189" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</shr>
		<ushr get="inline" set="null" line="193" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		</ushr>
		<mod get="inline" set="null" line="197" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</mod>
		<addWithFloat get="inline" set="null" line="201" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addWithFloat>
		<mulWithFloat get="inline" set="null" line="205" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulWithFloat>
		<divFloat get="inline" set="null" line="209" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divFloat>
		<floatDiv get="inline" set="null" line="213" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</floatDiv>
		<subFloat get="inline" set="null" line="217" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subFloat>
		<floatSub get="inline" set="null" line="221" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</floatSub>
		<gtFloat get="inline" set="null" line="225" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtFloat>
		<equalsInt params="T" get="inline" set="null" line="229" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsInt>
		<notEqualsInt params="T" get="inline" set="null" line="233" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsInt>
		<equalsFloat params="T" get="inline" set="null" line="237" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsFloat>
		<notEqualsFloat params="T" get="inline" set="null" line="241" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsFloat>
		<gteFloat get="inline" set="null" line="245" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteFloat>
		<floatGt get="inline" set="null" line="249" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</floatGt>
		<floatGte get="inline" set="null" line="253" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</floatGte>
		<ltFloat get="inline" set="null" line="257" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltFloat>
		<lteFloat get="inline" set="null" line="261" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteFloat>
		<floatLt get="inline" set="null" line="265" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</floatLt>
		<floatLte get="inline" set="null" line="269" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</floatLte>
		<modFloat get="inline" set="null" line="273" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modFloat>
		<floatMod get="inline" set="null" line="277" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</floatMod>
		<negBits get="inline" set="null" line="281" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
		</negBits>
		<prefixIncrement get="inline" set="null" line="285" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>++A</e></m></meta>
		</prefixIncrement>
		<postfixIncrement get="inline" set="null" line="289" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</postfixIncrement>
		<prefixDecrement get="inline" set="null" line="293" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>--A</e></m></meta>
		</prefixDecrement>
		<postfixDecrement get="inline" set="null" line="297" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A--</e></m></meta>
		</postfixDecrement>
		<toString get="inline" set="null" line="302" static="1"><f a="this:?radix">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></toString>
		<toInt get="inline" set="null" line="306" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
		<toFloat get="inline" set="null" line="310" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
	</class>
	<abstract path="UnicodeString" params="" file="/home/runner/work/haxe/haxe/std/UnicodeString.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>This abstract provides consistent cross-target unicode support for characters of any width.

	Due to differing internal representations of strings across targets, only the basic
	multilingual plane (BMP) is supported consistently by `String` class.

	This abstract provides API to consistently handle all characters even beyond BMP.

	@see https://haxe.org/manual/std-String-unicode.html</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":access"><e>StringTools</e></m>
		</meta>
		<impl><class path="_UnicodeString.UnicodeString_Impl_" params="" file="/home/runner/work/haxe/haxe/std/UnicodeString.hx" private="1" module="UnicodeString" final="1">
	<validate public="1" set="method" line="44" static="1">
		<f a="b:encoding">
			<c path="haxe.io.Bytes"/>
			<e path="haxe.io.Encoding"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Tells if `b` is a correctly encoded UTF8 byte sequence.</haxe_doc>
	</validate>
	<_new public="1" get="inline" set="null" line="119" static="1">
		<f a="string">
			<c path="String"/>
			<x path="UnicodeString"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates an instance of UnicodeString.</haxe_doc>
	</_new>
	<iterator public="1" get="inline" set="null" line="126" static="1">
		<f a="this">
			<c path="String"/>
			<c path="haxe.iterators.StringIteratorUnicode"/>
		</f>
		<haxe_doc>Returns an iterator of the unicode code points.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="133" static="1">
		<f a="this">
			<c path="String"/>
			<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
		</f>
		<haxe_doc>Returns an iterator of the code point indices and unicode code points.</haxe_doc>
	</keyValueIterator>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The number of characters in `this` String.</haxe_doc>
	</length>
	<charAt public="1" set="method" line="149" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
	</charAt>
	<charCodeAt public="1" set="method" line="172" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="Null"><x path="Int"/></x>
		</f>
		<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.</haxe_doc>
	</charCodeAt>
	<indexOf public="1" set="method" line="193" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>@see String.indexOf</haxe_doc>
	</indexOf>
	<lastIndexOf public="1" set="method" line="253" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</lastIndexOf>
	<substr public="1" set="method" line="312" static="1">
		<f a="this:pos:?len">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
	</substr>
	<substring public="1" set="method" line="367" static="1">
		<f a="this:startIndex:?endIndex">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
	</substring>
	<get_length set="method" line="412" static="1"><f a="this">
	<c path="String"/>
	<x path="Int"/>
</f></get_length>
	<lt set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<lte set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<gt set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<gte set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<eq set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</eq>
	<neq set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</neq>
	<add set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</add>
	<assignAdd set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
			<x path="UnicodeString"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A += B</e></m>
		</meta>
	</assignAdd>
	<addString set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<c path="String"/>
			<x path="UnicodeString"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addString>
	<assignAddString set="method" static="1">
		<f a="a:b">
			<x path="UnicodeString"/>
			<c path="String"/>
			<x path="UnicodeString"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A += B</e></m>
			<m n=":commutative"/>
		</meta>
	</assignAddString>
	<meta><m n=":access"><e>StringTools</e></m></meta>
</class></impl>
	</abstract>
	<class path="_UnicodeString.UnicodeString_Impl_" params="" file="/home/runner/work/haxe/haxe/std/UnicodeString.hx" private="1" module="UnicodeString" final="1">
		<validate public="1" set="method" line="44" static="1">
			<f a="b:encoding">
				<c path="haxe.io.Bytes"/>
				<e path="haxe.io.Encoding"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `b` is a correctly encoded UTF8 byte sequence.</haxe_doc>
		</validate>
		<_new public="1" get="inline" set="null" line="119" static="1">
			<f a="string">
				<c path="String"/>
				<x path="UnicodeString"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates an instance of UnicodeString.</haxe_doc>
		</_new>
		<iterator public="1" get="inline" set="null" line="126" static="1">
			<f a="this">
				<c path="String"/>
				<c path="haxe.iterators.StringIteratorUnicode"/>
			</f>
			<haxe_doc>Returns an iterator of the unicode code points.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="133" static="1">
			<f a="this">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
			</f>
			<haxe_doc>Returns an iterator of the code point indices and unicode code points.</haxe_doc>
		</keyValueIterator>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<charAt public="1" set="method" line="149" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method" line="172" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method" line="193" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>@see String.indexOf</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="253" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<substr public="1" set="method" line="312" static="1">
			<f a="this:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method" line="367" static="1">
			<f a="this:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<get_length set="method" line="412" static="1"><f a="this">
	<c path="String"/>
	<x path="Int"/>
</f></get_length>
		<lt set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<lte set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<gt set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<gte set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<eq set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</eq>
		<neq set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</neq>
		<add set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</add>
		<assignAdd set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
				<x path="UnicodeString"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A += B</e></m>
			</meta>
		</assignAdd>
		<addString set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<c path="String"/>
				<x path="UnicodeString"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addString>
		<assignAddString set="method" static="1">
			<f a="a:b">
				<x path="UnicodeString"/>
				<c path="String"/>
				<x path="UnicodeString"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A += B</e></m>
				<m n=":commutative"/>
			</meta>
		</assignAddString>
		<meta><m n=":access"><e>StringTools</e></m></meta>
	</class>
	<abstract path="XmlType" params="" file="/home/runner/work/haxe/haxe/std/Xml.hx" module="Xml">
		<this><x path="Int"/></this>
		<haxe_doc>Xml node types.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="_Xml.XmlType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/Xml.hx" private="1" module="Xml" final="1">
	<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML element type.</haxe_doc>
	</Element>
	<PCData public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents XML parsed character data type.</haxe_doc>
	</PCData>
	<CData public="1" get="inline" set="null" expr="cast 2" line="42" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents XML character data type.</haxe_doc>
	</CData>
	<Comment public="1" get="inline" set="null" expr="cast 3" line="47" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML comment type.</haxe_doc>
	</Comment>
	<DocType public="1" get="inline" set="null" expr="cast 4" line="52" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML doctype element type.</haxe_doc>
	</DocType>
	<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="57" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
	</ProcessingInstruction>
	<Document public="1" get="inline" set="null" expr="cast 6" line="62" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML document type.</haxe_doc>
	</Document>
	<toString public="1" set="method" line="64" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="_Xml.XmlType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/Xml.hx" private="1" module="Xml" final="1">
		<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML element type.</haxe_doc>
		</Element>
		<PCData public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" get="inline" set="null" expr="cast 2" line="42" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" get="inline" set="null" expr="cast 3" line="47" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" get="inline" set="null" expr="cast 4" line="52" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="57" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" get="inline" set="null" expr="cast 6" line="62" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML document type.</haxe_doc>
		</Document>
		<toString public="1" set="method" line="64" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="Xml" params="" file="/home/runner/work/haxe/haxe/std/Xml.hx">
		<Element public="1" set="null" expr="XmlType.Element" line="86" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Element</e></m></meta>
			<haxe_doc>XML element type.</haxe_doc>
		</Element>
		<PCData public="1" set="null" expr="XmlType.PCData" line="91" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.PCData</e></m></meta>
			<haxe_doc>XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" set="null" expr="XmlType.CData" line="96" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.CData</e></m></meta>
			<haxe_doc>XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" set="null" expr="XmlType.Comment" line="101" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Comment</e></m></meta>
			<haxe_doc>XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" expr="XmlType.DocType" line="106" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.DocType</e></m></meta>
			<haxe_doc>XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" expr="XmlType.ProcessingInstruction" line="111" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.ProcessingInstruction</e></m></meta>
			<haxe_doc>XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" expr="XmlType.Document" line="116" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Document</e></m></meta>
			<haxe_doc>XML document type.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="121" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parses the String into an Xml document.</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="182" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="191" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="200" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="209" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="218" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="227" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="236" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<x path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<parent public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be `null`, an Element or a Document.</haxe_doc>
		</parent>
		<children><c path="Array"><c path="Xml"/></c></children>
		<attributeMap><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></attributeMap>
		<get_nodeName get="inline" set="null" line="151"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeName get="inline" set="null" line="158"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeValue get="inline" set="null" line="165"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeValue get="inline" set="null" line="172"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<get public="1" set="method" line="244">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns `null` if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method" line="255">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<remove public="1" set="method" line="266">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="277">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="287">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an `Iterator` on all the attribute names.</haxe_doc>
		</attributes>
		<iterator public="1" get="inline" set="null" line="298">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="307">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="317">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<firstChild public="1" get="inline" set="null" line="329">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="337">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="353">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		A child node can only be inside one given parent node, which is indicated by the `parent` property.
		If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="366">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="381">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.
		A child node can only be inside one given parent node, which is indicated by the [parent] property.
		If the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</insertChild>
		<toString public="1" get="inline" set="null" line="393">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<ensureElementType get="inline" set="null" line="403"><f a=""><x path="Void"/></f></ensureElementType>
		<new set="method" line="397"><f a="nodeType">
	<x path="XmlType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Cross-platform Xml API.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
	</class>
	<enum path="haxe.StackItem" params="" file="/home/runner/work/haxe/haxe/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line:?column">
			<x path="Null"><e path="haxe.StackItem"/></x>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<x path="Null"><c path="String"/></x>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<abstract path="haxe.CallStack" params="" file="/home/runner/work/haxe/haxe/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The length of this stack.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="46" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<x path="Int"/>
</f></get_length>
	<callStack public="1" set="method" line="51" static="1">
		<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
		<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
	</callStack>
	<exceptionStack public="1" set="method" line="63" static="1">
		<f a="?fullStack" v="false">
			<x path="Bool"/>
			<c path="Array"><e path="haxe.StackItem"/></c>
		</f>
		<meta><m n=":value"><e>{ fullStack : false }</e></m></meta>
		<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.
		Set `fullStack` parameter to true in order to return the full exception stack.

		May not work if catch type was a derivative from `haxe.Exception`.</haxe_doc>
	</exceptionStack>
	<toString public="1" set="method" line="71" static="1">
		<f a="stack">
			<x path="haxe.CallStack"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
	</toString>
	<subtract public="1" set="method" line="84" static="1">
		<f a="this:stack">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="haxe.CallStack"/>
			<x path="haxe.CallStack"/>
		</f>
		<haxe_doc>Returns a range of entries of current stack from the beginning to the the
		common part of this and `stack`.</haxe_doc>
	</subtract>
	<copy public="1" get="inline" set="null" line="107" static="1">
		<f a="this">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="haxe.CallStack"/>
		</f>
		<haxe_doc>Make a copy of the stack.</haxe_doc>
	</copy>
	<get public="1" get="inline" set="null" line="111" static="1">
		<f a="this:index">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="Int"/>
			<e path="haxe.StackItem"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<asArray get="inline" set="null" line="115" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></asArray>
	<equalItems set="method" line="119" static="1"><f a="item1:item2">
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Bool"/>
</f></equalItems>
	<exceptionToString set="method" line="135" static="1"><f a="e">
	<c path="haxe.Exception"/>
	<c path="String"/>
</f></exceptionToString>
	<itemToString set="method" line="155" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
	<meta>
		<m n=":using"><e>haxe.CallStack</e></m>
		<m n=":allow"><e>haxe.Exception</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._CallStack.CallStack_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The length of this stack.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="46" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<x path="Int"/>
</f></get_length>
		<callStack public="1" set="method" line="51" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="63" static="1">
			<f a="?fullStack" v="false">
				<x path="Bool"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":value"><e>{ fullStack : false }</e></m></meta>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.
		Set `fullStack` parameter to true in order to return the full exception stack.

		May not work if catch type was a derivative from `haxe.Exception`.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="71" static="1">
			<f a="stack">
				<x path="haxe.CallStack"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<subtract public="1" set="method" line="84" static="1">
			<f a="this:stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="haxe.CallStack"/>
				<x path="haxe.CallStack"/>
			</f>
			<haxe_doc>Returns a range of entries of current stack from the beginning to the the
		common part of this and `stack`.</haxe_doc>
		</subtract>
		<copy public="1" get="inline" set="null" line="107" static="1">
			<f a="this">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="haxe.CallStack"/>
			</f>
			<haxe_doc>Make a copy of the stack.</haxe_doc>
		</copy>
		<get public="1" get="inline" set="null" line="111" static="1">
			<f a="this:index">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="Int"/>
				<e path="haxe.StackItem"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<asArray get="inline" set="null" line="115" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></asArray>
		<equalItems set="method" line="119" static="1"><f a="item1:item2">
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Bool"/>
</f></equalItems>
		<exceptionToString set="method" line="135" static="1"><f a="e">
	<c path="haxe.Exception"/>
	<c path="String"/>
</f></exceptionToString>
		<itemToString set="method" line="155" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<meta>
			<m n=":using"><e>haxe.CallStack</e></m>
			<m n=":allow"><e>haxe.Exception</e></m>
		</meta>
	</class>
	<abstract path="haxe.Function" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.Function_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<abstract path="haxe.FlatEnum" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<abstract path="haxe.NotVoid" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.NotVoid_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<abstract path="haxe.Constructible" params="T" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<class path="haxe.IMap" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Null"><c path="haxe.IMap.V"/></x>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<keyValueIterator public="1" set="method"><f a=""><t path="KeyValueIterator">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</t></f></keyValueIterator>
		<copy public="1" set="method"><f a=""><c path="haxe.IMap">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</c></f></copy>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
	</class>
	<abstract path="haxe.DynamicAccess" params="T" file="/home/runner/work/haxe/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1">
	<_new public="1" get="inline" set="null" line="40" static="1">
		<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new structure.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="51" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Null"><c path="haxe.DynamicAccess.T"/></x>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, `null` is returned.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="69" static="1">
		<f a="this:key:value">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<c path="haxe.DynamicAccess.T"/>
			<c path="haxe.DynamicAccess.T"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<exists public="1" get="inline" set="null" line="84" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="94" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="100" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="Array"><c path="String"/></c>
		</f>
		<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
	</keys>
	<copy public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x>
		</f>
		<haxe_doc>Returns a shallow copy of the structure</haxe_doc>
	</copy>
	<iterator public="1" get="inline" set="null" line="113" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="haxe.iterators.DynamicAccessIterator"><c path="haxe.DynamicAccess.T"/></c>
		</f>
		<haxe_doc>Returns an Iterator over the values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="122" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="haxe.iterators.DynamicAccessKeyValueIterator"><c path="haxe.DynamicAccess.T"/></c>
		</f>
		<haxe_doc>Returns an Iterator over the keys and values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
	</keyValueIterator>
</class></impl>
	</abstract>
	<class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1">
		<_new public="1" get="inline" set="null" line="40" static="1">
			<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new structure.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="51" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Null"><c path="haxe.DynamicAccess.T"/></x>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, `null` is returned.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="69" static="1">
			<f a="this:key:value">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<c path="haxe.DynamicAccess.T"/>
				<c path="haxe.DynamicAccess.T"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="84" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="94" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="100" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
		</keys>
		<copy public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x>
			</f>
			<haxe_doc>Returns a shallow copy of the structure</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="113" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="haxe.iterators.DynamicAccessIterator"><c path="haxe.DynamicAccess.T"/></c>
			</f>
			<haxe_doc>Returns an Iterator over the values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="122" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="haxe.iterators.DynamicAccessKeyValueIterator"><c path="haxe.DynamicAccess.T"/></c>
			</f>
			<haxe_doc>Returns an Iterator over the keys and values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
		</keyValueIterator>
	</class>
	<class path="java.util.Collections" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections.class" extern="1">
		<sort public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.List"><c path="sort.T"/></c>
				<x path="Void"/>
			</f>
			<overloads><sort public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.util.List"><c path="sort.T"/></c>
	<c path="java.util.Comparator"><d/></c>
	<x path="Void"/>
</f></sort></overloads>
		</sort>
		<binarySearch public="1" params="T" set="method" static="1">
			<f a="param1:param2">
				<c path="java.util.List"><c path="java.lang.Comparable"><d/></c></c>
				<c path="binarySearch.T"/>
				<x path="Int"/>
			</f>
			<overloads><binarySearch public="1" params="T" set="method"><f a="param1:param2:param3">
	<c path="java.util.List"><c path="binarySearch.T"/></c>
	<c path="binarySearch.T"/>
	<c path="java.util.Comparator"><d/></c>
	<x path="Int"/>
</f></binarySearch></overloads>
		</binarySearch>
		<reverse public="1" set="method" static="1"><f a="param1">
	<c path="java.util.List"><d/></c>
	<x path="Void"/>
</f></reverse>
		<shuffle public="1" set="method" static="1">
			<f a="param1">
				<c path="java.util.List"><d/></c>
				<x path="Void"/>
			</f>
			<overloads><shuffle public="1" set="method"><f a="param1:param2">
	<c path="java.util.List"><d/></c>
	<c path="java.util.Random"/>
	<x path="Void"/>
</f></shuffle></overloads>
		</shuffle>
		<swap public="1" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.util.List"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<fill public="1" params="T" set="method" static="1"><f a="param1:param2">
	<c path="java.util.List"><d/></c>
	<c path="fill.T"/>
	<x path="Void"/>
</f></fill>
		<copy public="1" params="T" set="method" static="1"><f a="param1:param2">
	<c path="java.util.List"><d/></c>
	<c path="java.util.List"><c path="copy.T"/></c>
	<x path="Void"/>
</f></copy>
		<min public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.Collection"><c path="min.T"/></c>
				<c path="min.T"/>
			</f>
			<overloads><min public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.util.Collection"><c path="min.T"/></c>
	<c path="java.util.Comparator"><d/></c>
	<c path="min.T"/>
</f></min></overloads>
		</min>
		<max public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.Collection"><c path="max.T"/></c>
				<c path="max.T"/>
			</f>
			<overloads><max public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.util.Collection"><c path="max.T"/></c>
	<c path="java.util.Comparator"><d/></c>
	<c path="max.T"/>
</f></max></overloads>
		</max>
		<rotate public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.util.List"><d/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<replaceAll public="1" params="T" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.util.List"><c path="replaceAll.T"/></c>
	<c path="replaceAll.T"/>
	<c path="replaceAll.T"/>
	<x path="Bool"/>
</f></replaceAll>
		<indexOfSubList public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.util.List"><d/></c>
	<c path="java.util.List"><d/></c>
	<x path="Int"/>
</f></indexOfSubList>
		<lastIndexOfSubList public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.util.List"><d/></c>
	<c path="java.util.List"><d/></c>
	<x path="Int"/>
</f></lastIndexOfSubList>
		<unmodifiableCollection public="1" params="T" set="method" static="1"><f a="param1">
	<c path="java.util.Collection"><c path="unmodifiableCollection.T"/></c>
	<c path="java.util.Collection"><c path="unmodifiableCollection.T"/></c>
</f></unmodifiableCollection>
		<unmodifiableSet public="1" params="T" set="method" static="1"><f a="param1">
	<c path="java.util.Set"><c path="unmodifiableSet.T"/></c>
	<c path="java.util.Set"><c path="unmodifiableSet.T"/></c>
</f></unmodifiableSet>
		<unmodifiableSortedSet public="1" params="T" set="method" static="1"><f a="param1">
	<c path="java.util.SortedSet"><c path="unmodifiableSortedSet.T"/></c>
	<c path="java.util.SortedSet"><c path="unmodifiableSortedSet.T"/></c>
</f></unmodifiableSortedSet>
		<unmodifiableNavigableSet public="1" params="T" set="method" static="1"><f a="param1">
	<c path="java.util.NavigableSet"><c path="unmodifiableNavigableSet.T"/></c>
	<c path="java.util.NavigableSet"><c path="unmodifiableNavigableSet.T"/></c>
</f></unmodifiableNavigableSet>
		<unmodifiableList public="1" params="T" set="method" static="1"><f a="param1">
	<c path="java.util.List"><c path="unmodifiableList.T"/></c>
	<c path="java.util.List"><c path="unmodifiableList.T"/></c>
</f></unmodifiableList>
		<unmodifiableMap public="1" params="K:V" set="method" static="1"><f a="param1">
	<c path="java.util.Map">
		<c path="unmodifiableMap.K"/>
		<c path="unmodifiableMap.V"/>
	</c>
	<c path="java.util.Map">
		<c path="unmodifiableMap.K"/>
		<c path="unmodifiableMap.V"/>
	</c>
</f></unmodifiableMap>
		<unmodifiableSortedMap public="1" params="K:V" set="method" static="1"><f a="param1">
	<c path="java.util.SortedMap">
		<c path="unmodifiableSortedMap.K"/>
		<c path="unmodifiableSortedMap.V"/>
	</c>
	<c path="java.util.SortedMap">
		<c path="unmodifiableSortedMap.K"/>
		<c path="unmodifiableSortedMap.V"/>
	</c>
</f></unmodifiableSortedMap>
		<unmodifiableNavigableMap public="1" params="K:V" set="method" static="1"><f a="param1">
	<c path="java.util.NavigableMap">
		<c path="unmodifiableNavigableMap.K"/>
		<c path="unmodifiableNavigableMap.V"/>
	</c>
	<c path="java.util.NavigableMap">
		<c path="unmodifiableNavigableMap.K"/>
		<c path="unmodifiableNavigableMap.V"/>
	</c>
</f></unmodifiableNavigableMap>
		<synchronizedCollection public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.Collection"><c path="synchronizedCollection.T"/></c>
				<c path="java.util.Collection"><c path="synchronizedCollection.T"/></c>
			</f>
			<overloads><synchronizedCollection public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.util.Collection"><c path="synchronizedCollection.T"/></c>
	<d/>
	<c path="java.util.Collection"><c path="synchronizedCollection.T"/></c>
</f></synchronizedCollection></overloads>
		</synchronizedCollection>
		<synchronizedSet public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.Set"><c path="synchronizedSet.T"/></c>
				<c path="java.util.Set"><c path="synchronizedSet.T"/></c>
			</f>
			<overloads><synchronizedSet public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.util.Set"><c path="synchronizedSet.T"/></c>
	<d/>
	<c path="java.util.Set"><c path="synchronizedSet.T"/></c>
</f></synchronizedSet></overloads>
		</synchronizedSet>
		<synchronizedSortedSet public="1" params="T" set="method" static="1"><f a="param1">
	<c path="java.util.SortedSet"><c path="synchronizedSortedSet.T"/></c>
	<c path="java.util.SortedSet"><c path="synchronizedSortedSet.T"/></c>
</f></synchronizedSortedSet>
		<synchronizedNavigableSet public="1" params="T" set="method" static="1"><f a="param1">
	<c path="java.util.NavigableSet"><c path="synchronizedNavigableSet.T"/></c>
	<c path="java.util.NavigableSet"><c path="synchronizedNavigableSet.T"/></c>
</f></synchronizedNavigableSet>
		<synchronizedList public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.List"><c path="synchronizedList.T"/></c>
				<c path="java.util.List"><c path="synchronizedList.T"/></c>
			</f>
			<overloads><synchronizedList public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.util.List"><c path="synchronizedList.T"/></c>
	<d/>
	<c path="java.util.List"><c path="synchronizedList.T"/></c>
</f></synchronizedList></overloads>
		</synchronizedList>
		<synchronizedMap public="1" params="K:V" set="method" static="1"><f a="param1">
	<c path="java.util.Map">
		<c path="synchronizedMap.K"/>
		<c path="synchronizedMap.V"/>
	</c>
	<c path="java.util.Map">
		<c path="synchronizedMap.K"/>
		<c path="synchronizedMap.V"/>
	</c>
</f></synchronizedMap>
		<synchronizedSortedMap public="1" params="K:V" set="method" static="1"><f a="param1">
	<c path="java.util.SortedMap">
		<c path="synchronizedSortedMap.K"/>
		<c path="synchronizedSortedMap.V"/>
	</c>
	<c path="java.util.SortedMap">
		<c path="synchronizedSortedMap.K"/>
		<c path="synchronizedSortedMap.V"/>
	</c>
</f></synchronizedSortedMap>
		<synchronizedNavigableMap public="1" params="K:V" set="method" static="1"><f a="param1">
	<c path="java.util.NavigableMap">
		<c path="synchronizedNavigableMap.K"/>
		<c path="synchronizedNavigableMap.V"/>
	</c>
	<c path="java.util.NavigableMap">
		<c path="synchronizedNavigableMap.K"/>
		<c path="synchronizedNavigableMap.V"/>
	</c>
</f></synchronizedNavigableMap>
		<checkedCollection public="1" params="E" set="method" static="1"><f a="param1:param2">
	<c path="java.util.Collection"><c path="checkedCollection.E"/></c>
	<c path="java.lang.Class"><c path="checkedCollection.E"/></c>
	<c path="java.util.Collection"><c path="checkedCollection.E"/></c>
</f></checkedCollection>
		<zeroLengthArray public="1" params="T" set="method" static="1"><f a="param1">
	<c path="java.lang.Class"><c path="zeroLengthArray.T"/></c>
	<c path="java.NativeArray"><c path="zeroLengthArray.T"/></c>
</f></zeroLengthArray>
		<checkedQueue public="1" params="E" set="method" static="1"><f a="param1:param2">
	<c path="java.util.Queue"><c path="checkedQueue.E"/></c>
	<c path="java.lang.Class"><c path="checkedQueue.E"/></c>
	<c path="java.util.Queue"><c path="checkedQueue.E"/></c>
</f></checkedQueue>
		<checkedSet public="1" params="E" set="method" static="1"><f a="param1:param2">
	<c path="java.util.Set"><c path="checkedSet.E"/></c>
	<c path="java.lang.Class"><c path="checkedSet.E"/></c>
	<c path="java.util.Set"><c path="checkedSet.E"/></c>
</f></checkedSet>
		<checkedSortedSet public="1" params="E" set="method" static="1"><f a="param1:param2">
	<c path="java.util.SortedSet"><c path="checkedSortedSet.E"/></c>
	<c path="java.lang.Class"><c path="checkedSortedSet.E"/></c>
	<c path="java.util.SortedSet"><c path="checkedSortedSet.E"/></c>
</f></checkedSortedSet>
		<checkedNavigableSet public="1" params="E" set="method" static="1"><f a="param1:param2">
	<c path="java.util.NavigableSet"><c path="checkedNavigableSet.E"/></c>
	<c path="java.lang.Class"><c path="checkedNavigableSet.E"/></c>
	<c path="java.util.NavigableSet"><c path="checkedNavigableSet.E"/></c>
</f></checkedNavigableSet>
		<checkedList public="1" params="E" set="method" static="1"><f a="param1:param2">
	<c path="java.util.List"><c path="checkedList.E"/></c>
	<c path="java.lang.Class"><c path="checkedList.E"/></c>
	<c path="java.util.List"><c path="checkedList.E"/></c>
</f></checkedList>
		<checkedMap public="1" params="K:V" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.util.Map">
		<c path="checkedMap.K"/>
		<c path="checkedMap.V"/>
	</c>
	<c path="java.lang.Class"><c path="checkedMap.K"/></c>
	<c path="java.lang.Class"><c path="checkedMap.V"/></c>
	<c path="java.util.Map">
		<c path="checkedMap.K"/>
		<c path="checkedMap.V"/>
	</c>
</f></checkedMap>
		<checkedSortedMap public="1" params="K:V" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.util.SortedMap">
		<c path="checkedSortedMap.K"/>
		<c path="checkedSortedMap.V"/>
	</c>
	<c path="java.lang.Class"><c path="checkedSortedMap.K"/></c>
	<c path="java.lang.Class"><c path="checkedSortedMap.V"/></c>
	<c path="java.util.SortedMap">
		<c path="checkedSortedMap.K"/>
		<c path="checkedSortedMap.V"/>
	</c>
</f></checkedSortedMap>
		<checkedNavigableMap public="1" params="K:V" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.util.NavigableMap">
		<c path="checkedNavigableMap.K"/>
		<c path="checkedNavigableMap.V"/>
	</c>
	<c path="java.lang.Class"><c path="checkedNavigableMap.K"/></c>
	<c path="java.lang.Class"><c path="checkedNavigableMap.V"/></c>
	<c path="java.util.NavigableMap">
		<c path="checkedNavigableMap.K"/>
		<c path="checkedNavigableMap.V"/>
	</c>
</f></checkedNavigableMap>
		<emptyIterator public="1" params="T" set="method" static="1"><f a=""><c path="java.util.Iterator"><c path="emptyIterator.T"/></c></f></emptyIterator>
		<emptyListIterator public="1" params="T" set="method" static="1"><f a=""><c path="java.util.ListIterator"><c path="emptyListIterator.T"/></c></f></emptyListIterator>
		<emptyEnumeration public="1" params="T" set="method" static="1"><f a=""><c path="java.util.Enumeration"><c path="emptyEnumeration.T"/></c></f></emptyEnumeration>
		<emptySet final="1" public="1" params="T" set="method" static="1"><f a=""><c path="java.util.Set"><c path="emptySet.T"/></c></f></emptySet>
		<emptySortedSet public="1" params="E" set="method" static="1"><f a=""><c path="java.util.SortedSet"><c path="emptySortedSet.E"/></c></f></emptySortedSet>
		<emptyNavigableSet public="1" params="E" set="method" static="1"><f a=""><c path="java.util.NavigableSet"><c path="emptyNavigableSet.E"/></c></f></emptyNavigableSet>
		<emptyList final="1" public="1" params="T" set="method" static="1"><f a=""><c path="java.util.List"><c path="emptyList.T"/></c></f></emptyList>
		<emptyMap final="1" public="1" params="K:V" set="method" static="1"><f a=""><c path="java.util.Map">
	<c path="emptyMap.K"/>
	<c path="emptyMap.V"/>
</c></f></emptyMap>
		<emptySortedMap final="1" public="1" params="K:V" set="method" static="1"><f a=""><c path="java.util.SortedMap">
	<c path="emptySortedMap.K"/>
	<c path="emptySortedMap.V"/>
</c></f></emptySortedMap>
		<emptyNavigableMap final="1" public="1" params="K:V" set="method" static="1"><f a=""><c path="java.util.NavigableMap">
	<c path="emptyNavigableMap.K"/>
	<c path="emptyNavigableMap.V"/>
</c></f></emptyNavigableMap>
		<singleton public="1" params="T" set="method" static="1"><f a="param1">
	<c path="singleton.T"/>
	<c path="java.util.Set"><c path="singleton.T"/></c>
</f></singleton>
		<singletonIterator public="1" params="E" set="method" static="1"><f a="param1">
	<c path="singletonIterator.E"/>
	<c path="java.util.Iterator"><c path="singletonIterator.E"/></c>
</f></singletonIterator>
		<singletonSpliterator public="1" params="T" set="method" static="1"><f a="param1">
	<c path="singletonSpliterator.T"/>
	<c path="java.util.Spliterator"><c path="singletonSpliterator.T"/></c>
</f></singletonSpliterator>
		<singletonList public="1" params="T" set="method" static="1"><f a="param1">
	<c path="singletonList.T"/>
	<c path="java.util.List"><c path="singletonList.T"/></c>
</f></singletonList>
		<singletonMap public="1" params="K:V" set="method" static="1"><f a="param1:param2">
	<c path="singletonMap.K"/>
	<c path="singletonMap.V"/>
	<c path="java.util.Map">
		<c path="singletonMap.K"/>
		<c path="singletonMap.V"/>
	</c>
</f></singletonMap>
		<nCopies public="1" params="T" set="method" static="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="nCopies.T"/>
	<c path="java.util.List"><c path="nCopies.T"/></c>
</f></nCopies>
		<reverseOrder public="1" params="T" set="method" static="1">
			<f a=""><c path="java.util.Comparator"><c path="reverseOrder.T"/></c></f>
			<overloads><reverseOrder public="1" params="T" set="method"><f a="param1">
	<c path="java.util.Comparator"><c path="reverseOrder.T"/></c>
	<c path="java.util.Comparator"><c path="reverseOrder.T"/></c>
</f></reverseOrder></overloads>
		</reverseOrder>
		<enumeration public="1" params="T" set="method" static="1"><f a="param1">
	<c path="java.util.Collection"><c path="enumeration.T"/></c>
	<c path="java.util.Enumeration"><c path="enumeration.T"/></c>
</f></enumeration>
		<list public="1" params="T" set="method" static="1"><f a="param1">
	<c path="java.util.Enumeration"><c path="list.T"/></c>
	<c path="java.util.ArrayList"><c path="list.T"/></c>
</f></list>
		<eq public="1" set="method" static="1"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></eq>
		<frequency public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.util.Collection"><d/></c>
	<d/>
	<x path="Int"/>
</f></frequency>
		<disjoint public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.util.Collection"><d/></c>
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></disjoint>
		<addAll public="1" params="T" set="method" static="1"><f a="param1:param2">
	<c path="java.util.Collection"><d/></c>
	<x path="haxe.Rest"><c path="addAll.T"/></x>
	<x path="Bool"/>
</f></addAll>
		<newSetFromMap public="1" params="E" set="method" static="1"><f a="param1">
	<c path="java.util.Map">
		<c path="newSetFromMap.E"/>
		<x path="java.lang.Boolean"/>
	</c>
	<c path="java.util.Set"><c path="newSetFromMap.E"/></c>
</f></newSetFromMap>
		<asLifoQueue public="1" params="T" set="method" static="1"><f a="param1">
	<c path="java.util.Deque"><c path="asLifoQueue.T"/></c>
	<c path="java.util.Queue"><c path="asLifoQueue.T"/></c>
</f></asLifoQueue>
		<EMPTY_SET final="1" public="1" set="null" static="1"><c path="java.util.Set"><d/></c></EMPTY_SET>
		<EMPTY_LIST final="1" public="1" set="null" static="1"><c path="java.util.List"><d/></c></EMPTY_LIST>
		<EMPTY_MAP final="1" public="1" set="null" static="1"><c path="java.util.Map">
	<d/>
	<d/>
</c></EMPTY_MAP>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.util.Collections"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Map" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Map.class" extern="1" interface="1">
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<containsKey public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsKey>
		<containsValue public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsValue>
		<get public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.Map.V"/>
</f></get>
		<put public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map.K"/>
	<c path="java.util.Map.V"/>
	<c path="java.util.Map.V"/>
</f></put>
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.util.Map.V"/>
			</f>
			<overloads><remove public="1" set="method">
	<f a="param1:param2">
		<d/>
		<d/>
		<x path="Bool"/>
	</f>
	<meta><m n=":java.default"/></meta>
</remove></overloads>
		</remove>
		<putAll public="1" set="method"><f a="param1">
	<c path="java.util.Map">
		<c path="java.util.Map.K"/>
		<c path="java.util.Map.V"/>
	</c>
	<x path="Void"/>
</f></putAll>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<keySet public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.Map.K"/></c></f></keySet>
		<values public="1" set="method"><f a=""><c path="java.util.Collection"><c path="java.util.Map.V"/></c></f></values>
		<entrySet public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.Map.K"/>
	<c path="java.util.Map.V"/>
</c></c></f></entrySet>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<getOrDefault public="1" set="method">
			<f a="param1:param2">
				<d/>
				<c path="java.util.Map.V"/>
				<c path="java.util.Map.V"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</getOrDefault>
		<forEach public="1" set="method">
			<f a="param1">
				<c path="java.util.function.BiConsumer">
					<d/>
					<d/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</forEach>
		<replaceAll public="1" set="method">
			<f a="param1">
				<c path="java.util.function.BiFunction">
					<d/>
					<d/>
					<c path="java.util.Map.V"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</replaceAll>
		<putIfAbsent public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Map.K"/>
				<c path="java.util.Map.V"/>
				<c path="java.util.Map.V"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</putIfAbsent>
		<replace public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Map.K"/>
				<c path="java.util.Map.V"/>
				<c path="java.util.Map.V"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><replace public="1" set="method">
	<f a="param1:param2">
		<c path="java.util.Map.K"/>
		<c path="java.util.Map.V"/>
		<c path="java.util.Map.V"/>
	</f>
	<meta><m n=":java.default"/></meta>
</replace></overloads>
		</replace>
		<computeIfAbsent public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Map.K"/>
				<c path="java.util.function.Function">
					<d/>
					<c path="java.util.Map.V"/>
				</c>
				<c path="java.util.Map.V"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</computeIfAbsent>
		<computeIfPresent public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Map.K"/>
				<c path="java.util.function.BiFunction">
					<d/>
					<d/>
					<c path="java.util.Map.V"/>
				</c>
				<c path="java.util.Map.V"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</computeIfPresent>
		<compute public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Map.K"/>
				<c path="java.util.function.BiFunction">
					<d/>
					<d/>
					<c path="java.util.Map.V"/>
				</c>
				<c path="java.util.Map.V"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</compute>
		<merge public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Map.K"/>
				<c path="java.util.Map.V"/>
				<c path="java.util.function.BiFunction">
					<d/>
					<d/>
					<c path="java.util.Map.V"/>
				</c>
				<c path="java.util.Map.V"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</merge>
		<meta>
			<m n=":native"><e>"java.util.Map"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractMap.class" extern="1" abstract="1">
		<implements path="java.util.Map">
			<c path="java.util.AbstractMap.K"/>
			<c path="java.util.AbstractMap.V"/>
		</implements>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<containsValue public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsValue>
		<containsKey public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsKey>
		<get public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.AbstractMap.V"/>
</f></get>
		<put public="1" set="method"><f a="param1:param2">
	<c path="java.util.AbstractMap.K"/>
	<c path="java.util.AbstractMap.V"/>
	<c path="java.util.AbstractMap.V"/>
</f></put>
		<remove public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.AbstractMap.V"/>
</f></remove>
		<putAll public="1" set="method"><f a="param1">
	<c path="java.util.Map">
		<c path="java.util.AbstractMap.K"/>
		<c path="java.util.AbstractMap.V"/>
	</c>
	<x path="Void"/>
</f></putAll>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<keySet public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.AbstractMap.K"/></c></f></keySet>
		<values public="1" set="method"><f a=""><c path="java.util.Collection"><c path="java.util.AbstractMap.V"/></c></f></values>
		<entrySet abstract="1" public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.AbstractMap.K"/>
	<c path="java.util.AbstractMap.V"/>
</c></c></f></entrySet>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.AbstractMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.WeakHashMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/WeakHashMap.class" extern="1">
		<extends path="java.util.AbstractMap">
			<c path="java.util.WeakHashMap.K"/>
			<c path="java.util.WeakHashMap.V"/>
		</extends>
		<implements path="java.util.Map">
			<c path="java.util.WeakHashMap.K"/>
			<c path="java.util.WeakHashMap.V"/>
		</implements>
		<unmaskNull public="1" set="method" static="1"><f a="param1">
	<d/>
	<d/>
</f></unmaskNull>
		<hash final="1" public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></hash>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isEmpty>
		<get public="1" set="method" override="1"><f a="param1">
	<d/>
	<c path="java.util.WeakHashMap.V"/>
</f></get>
		<containsKey public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsKey>
		<getEntry public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.WeakHashMap_Entry">
		<c path="java.util.WeakHashMap.K"/>
		<c path="java.util.WeakHashMap.V"/>
	</c>
</f></getEntry>
		<put public="1" set="method" override="1"><f a="param1:param2">
	<c path="java.util.WeakHashMap.K"/>
	<c path="java.util.WeakHashMap.V"/>
	<c path="java.util.WeakHashMap.V"/>
</f></put>
		<resize public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<putAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Map">
		<c path="java.util.WeakHashMap.K"/>
		<c path="java.util.WeakHashMap.V"/>
	</c>
	<x path="Void"/>
</f></putAll>
		<remove public="1" set="method" override="1"><f a="param1">
	<d/>
	<c path="java.util.WeakHashMap.V"/>
</f></remove>
		<removeMapping public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></removeMapping>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<containsValue public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsValue>
		<keySet public="1" set="method" override="1"><f a=""><c path="java.util.Set"><c path="java.util.WeakHashMap.K"/></c></f></keySet>
		<values public="1" set="method" override="1"><f a=""><c path="java.util.Collection"><c path="java.util.WeakHashMap.V"/></c></f></values>
		<entrySet public="1" set="method" override="1"><f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.WeakHashMap.K"/>
	<c path="java.util.WeakHashMap.V"/>
</c></c></f></entrySet>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.BiConsumer">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></forEach>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.WeakHashMap.V"/>
	</c>
	<x path="Void"/>
</f></replaceAll>
		<table public="1"><c path="java.NativeArray"><c path="java.util.WeakHashMap_Entry">
	<c path="java.util.WeakHashMap.K"/>
	<c path="java.util.WeakHashMap.V"/>
</c></c></table>
		<modCount public="1"><x path="Int"/></modCount>
		<new public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.util.Map">
		<c path="java.util.WeakHashMap.K"/>
		<c path="java.util.WeakHashMap.V"/>
	</c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a=""><x path="Void"/></f></new>
				<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.util.WeakHashMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Runnable" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Runnable.class" extern="1" interface="1">
		<run public="1" set="method"><f a=""><x path="Void"/></f></run>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.lang.Runnable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Thread" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Thread.class" extern="1">
		<implements path="java.lang.Runnable"/>
		<currentThread public="1" set="method" static="1"><f a=""><c path="java.lang.Thread"/></f></currentThread>
		<yield public="1" set="method" static="1"><f a=""><x path="Void"/></f></yield>
		<sleep public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<overloads><sleep public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sleep></overloads>
		</sleep>
		<interrupted public="1" set="method" static="1"><f a=""><x path="Bool"/></f></interrupted>
		<activeCount public="1" set="method" static="1"><f a=""><x path="Int"/></f></activeCount>
		<enumerate public="1" set="method" static="1"><f a="param1">
	<c path="java.NativeArray"><c path="java.lang.Thread"/></c>
	<x path="Int"/>
</f></enumerate>
		<dumpStack public="1" set="method" static="1"><f a=""><x path="Void"/></f></dumpStack>
		<holdsLock public="1" set="method" static="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></holdsLock>
		<getAllStackTraces public="1" set="method" static="1"><f a=""><c path="java.util.Map">
	<c path="java.lang.Thread"/>
	<c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c>
</c></f></getAllStackTraces>
		<setDefaultUncaughtExceptionHandler public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.Thread_UncaughtExceptionHandler"/>
	<x path="Void"/>
</f></setDefaultUncaughtExceptionHandler>
		<getDefaultUncaughtExceptionHandler public="1" set="method" static="1"><f a=""><c path="java.lang.Thread_UncaughtExceptionHandler"/></f></getDefaultUncaughtExceptionHandler>
		<processQueue public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.lang.ref.ReferenceQueue"><c path="java.lang.Class"><d/></c></c>
	<c path="java.util.concurrent.ConcurrentMap">
		<c path="java.lang.ref.WeakReference"><c path="java.lang.Class"><d/></c></c>
		<d/>
	</c>
	<x path="Void"/>
</f></processQueue>
		<MIN_PRIORITY final="1" public="1" set="null" static="1"><x path="Int"/></MIN_PRIORITY>
		<NORM_PRIORITY final="1" public="1" set="null" static="1"><x path="Int"/></NORM_PRIORITY>
		<MAX_PRIORITY final="1" public="1" set="null" static="1"><x path="Int"/></MAX_PRIORITY>
		<blockedOn public="1" set="method"><f a="param1">
	<c path="java.sun.nio.ch.Interruptible"/>
	<x path="Void"/>
</f></blockedOn>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<start public="1" set="method"><f a=""><x path="Void"/></f></start>
		<run public="1" set="method"><f a=""><x path="Void"/></f></run>
		<stop final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":deprecated"/></meta>
			<overloads><stop final="1" public="1" set="method">
	<f a="param1">
		<c path="java.lang.Throwable"/>
		<x path="Void"/>
	</f>
	<meta><m n=":deprecated"/></meta>
</stop></overloads>
		</stop>
		<interrupt public="1" set="method"><f a=""><x path="Void"/></f></interrupt>
		<isInterrupted public="1" set="method"><f a=""><x path="Bool"/></f></isInterrupted>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":deprecated"/></meta>
		</destroy>
		<isAlive final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isAlive>
		<suspend final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":deprecated"/></meta>
		</suspend>
		<resume final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":deprecated"/></meta>
		</resume>
		<setPriority final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setPriority>
		<getPriority final="1" public="1" set="method"><f a=""><x path="Int"/></f></getPriority>
		<setName final="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></setName>
		<getName final="1" public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getThreadGroup final="1" public="1" set="method"><f a=""><c path="java.lang.ThreadGroup"/></f></getThreadGroup>
		<countStackFrames public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":deprecated"/></meta>
		</countStackFrames>
		<join final="1" public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<overloads>
				<join final="1" public="1" set="method"><f a=""><x path="Void"/></f></join>
				<join final="1" public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<x path="Void"/>
</f></join>
			</overloads>
		</join>
		<setDaemon final="1" public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setDaemon>
		<isDaemon final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isDaemon>
		<checkAccess final="1" public="1" set="method"><f a=""><x path="Void"/></f></checkAccess>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<getContextClassLoader public="1" set="method"><f a=""><c path="java.lang.ClassLoader"/></f></getContextClassLoader>
		<setContextClassLoader public="1" set="method"><f a="param1">
	<c path="java.lang.ClassLoader"/>
	<x path="Void"/>
</f></setContextClassLoader>
		<getStackTrace public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c></f></getStackTrace>
		<getId public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getId>
		<getState public="1" set="method"><f a=""><e path="java.lang.Thread_State"/></f></getState>
		<getUncaughtExceptionHandler public="1" set="method"><f a=""><c path="java.lang.Thread_UncaughtExceptionHandler"/></f></getUncaughtExceptionHandler>
		<setUncaughtExceptionHandler public="1" set="method"><f a="param1">
	<c path="java.lang.Thread_UncaughtExceptionHandler"/>
	<x path="Void"/>
</f></setUncaughtExceptionHandler>
		<threadLocals public="1"><c path="java.lang.ThreadLocal_ThreadLocalMap"/></threadLocals>
		<inheritableThreadLocals public="1"><c path="java.lang.ThreadLocal_ThreadLocalMap"/></inheritableThreadLocals>
		<parkBlocker public="1"><d/></parkBlocker>
		<threadLocalRandomSeed public="1"><x path="haxe.Int64"/></threadLocalRandomSeed>
		<threadLocalRandomProbe public="1"><x path="Int"/></threadLocalRandomProbe>
		<threadLocalRandomSecondarySeed public="1"><x path="Int"/></threadLocalRandomSecondarySeed>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.lang.ThreadGroup"/>
	<c path="java.lang.Runnable"/>
	<c path="String"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.ThreadGroup"/>
	<c path="java.lang.Runnable"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Runnable"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.ThreadGroup"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.ThreadGroup"/>
	<c path="java.lang.Runnable"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Runnable"/>
	<c path="java.security.AccessControlContext"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.lang.Runnable"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Thread"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="sys.thread.EventLoop" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/EventLoop.hx">
		<CREATED static="1"><x path="Bool"/></CREATED>
		<mutex final="1" expr="new Mutex()" line="25">
			<c path="sys.thread.Mutex"/>
			<meta><m n=":value"><e>new Mutex()</e></m></meta>
		</mutex>
		<oneTimeEvents final="1" expr="new Array&lt;Null&lt;Void -&gt; Void&gt;&gt;()" line="26">
			<c path="Array"><x path="Null"><f a=""><x path="Void"/></f></x></c>
			<meta><m n=":value"><e><![CDATA[new Array<Null<Void -> Void>>()]]></e></m></meta>
		</oneTimeEvents>
		<oneTimeEventsIdx expr="0" line="27">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</oneTimeEventsIdx>
		<waitLock final="1" expr="new Lock()" line="28">
			<c path="sys.thread.Lock"/>
			<meta><m n=":value"><e>new Lock()</e></m></meta>
		</waitLock>
		<promisedEventsCount expr="0" line="29">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</promisedEventsCount>
		<regularEvents><x path="Null"><c path="sys.thread._EventLoop.RegularEvent"/></x></regularEvents>
		<isMainThread><x path="Bool"/></isMainThread>
		<repeat public="1" set="method" line="42">
			<f a="event:intervalMs">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<x path="sys.thread.EventHandler"/>
			</f>
			<haxe_doc>Schedule event for execution every `intervalMs` milliseconds in current loop.</haxe_doc>
		</repeat>
		<insertEventByTime set="method" line="52"><f a="event">
	<c path="sys.thread._EventLoop.RegularEvent"/>
	<x path="Void"/>
</f></insertEventByTime>
		<cancel public="1" set="method" line="86">
			<f a="eventHandler">
				<x path="sys.thread.EventHandler"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prevent execution of a previously scheduled event in current loop.</haxe_doc>
		</cancel>
		<promise public="1" set="method" line="110">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Notify this loop about an upcoming event.
		This makes the thread stay alive and wait for as many events as the number of
		times `.promise()` was called. These events should be added via `.runPromised()`.</haxe_doc>
		</promise>
		<run public="1" set="method" line="119">
			<f a="event">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Execute `event` as soon as possible.</haxe_doc>
		</run>
		<runPromised public="1" set="method" line="129">
			<f a="event">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Add previously promised `event` for execution.</haxe_doc>
		</runPromised>
		<progress public="1" set="method" line="145">
			<f a=""><e path="sys.thread.NextEventTime"/></f>
			<haxe_doc>Executes all pending events.

		The returned time stamps can be used with `Sys.time()` for calculations.

		Depending on a target platform this method may be non-reentrant. It must
		not be called from event callbacks.</haxe_doc>
		</progress>
		<wait public="1" set="method" line="167">
			<f a="?timeout">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Blocks until a new event is added or `timeout` (in seconds) to expires.

		Depending on a target platform this method may also automatically execute arriving
		events while waiting. However if any event is executed it will stop waiting.

		Returns `true` if more events are expected.
		Returns `false` if no more events expected.

		Depending on a target platform this method may be non-reentrant. It must
		not be called from event callbacks.</haxe_doc>
		</wait>
		<loop public="1" set="method" line="179">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Execute all pending events.
		Wait and execute as many events as the number of times `promise()` was called.
		Runs until all repeating events are cancelled and no more events are expected.

		Depending on a target platform this method may be non-reentrant. It must
		not be called from event callbacks.</haxe_doc>
		</loop>
		<__progress get="inline" set="null" line="205">
			<f a="now:recycleRegular:recycleOneTimers">
				<x path="Float"/>
				<c path="Array"><c path="sys.thread._EventLoop.RegularEvent"/></c>
				<c path="Array"><f a=""><x path="Void"/></f></c>
				<a>
					<nextEventAt><x path="Float"/></nextEventAt>
					<anyTime><x path="Bool"/></anyTime>
				</a>
			</f>
			<haxe_doc>`.progress` implementation with a reusable array for internal usage.
		The `nextEventAt` field of the return value denotes when the next event
		is expected to run:
		* -1 - never
		* -2 - now
		* other values - at specified time</haxe_doc>
		</__progress>
		<new public="1" set="method" line="34"><f a=""><x path="Void"/></f></new>
		<haxe_doc>An event loop implementation used for `sys.thread.Thread`</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.thread._Thread.HaxeThread" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread">
		<nativeThreads static="1"><c path="java.util.Map">
	<c path="java.lang.Thread"/>
	<c path="sys.thread._Thread.HaxeThread"/>
</c></nativeThreads>
		<mainJavaThread static="1"><c path="java.lang.Thread"/></mainJavaThread>
		<mainHaxeThread static="1"><c path="sys.thread._Thread.HaxeThread"/></mainHaxeThread>
		<create public="1" set="method" line="100" static="1"><f a="job:withEventLoop">
	<f a=""><x path="Void"/></f>
	<x path="Bool"/>
	<c path="sys.thread._Thread.HaxeThread"/>
</f></create>
		<get public="1" set="method" line="110" static="1"><f a="javaThread">
	<c path="java.lang.Thread"/>
	<c path="sys.thread._Thread.HaxeThread"/>
</f></get>
		<runWithEventLoop public="1" set="method" line="127" static="1"><f a="job">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runWithEventLoop>
		<messages final="1" public="1" expr="new LinkedBlockingDeque&lt;Dynamic&gt;()" line="96">
			<c path="java.util.concurrent.LinkedBlockingDeque"><d/></c>
			<meta><m n=":value"><e><![CDATA[new LinkedBlockingDeque<Dynamic>()]]></e></m></meta>
		</messages>
		<events public="1" set="null"><x path="Null"><c path="sys.thread.EventLoop"/></x></events>
		<sendMessage public="1" set="method" line="146"><f a="msg">
	<d/>
	<x path="Void"/>
</f></sendMessage>
		<readMessage public="1" set="method" line="150"><f a="block">
	<x path="Bool"/>
	<d/>
</f></readMessage>
		<new set="method" line="144"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="java.lang.Object" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Object.class" extern="1">
		<getClass final="1" public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></getClass>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<notify final="1" public="1" set="method"><f a=""><x path="Void"/></f></notify>
		<notifyAll final="1" public="1" set="method"><f a=""><x path="Void"/></f></notifyAll>
		<wait final="1" public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<overloads>
				<wait final="1" public="1" set="method"><f a=""><x path="Void"/></f></wait>
				<wait final="1" public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<x path="Void"/>
</f></wait>
			</overloads>
		</wait>
		<finalize public="1" set="method"><f a=""><x path="Void"/></f></finalize>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Object"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="jvm.Jvm" params="" file="/home/runner/work/haxe/haxe/std/jvm/Jvm.hx">
		<instanceof public="1" params="S:T" set="method" static="1"><f a="obj:type">
	<c path="instanceof.S"/>
	<c path="instanceof.T"/>
	<x path="Bool"/>
</f></instanceof>
		<referenceEquals public="1" params="T" set="method" static="1"><f a="v1:v2">
	<c path="referenceEquals.T"/>
	<c path="referenceEquals.T"/>
	<x path="Bool"/>
</f></referenceEquals>
		<stringCompare public="1" set="method" line="47" static="1"><f a="v1:v2">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
</f></stringCompare>
		<compare public="1" params="T" set="method" line="57" static="1"><f a="v1:v2">
	<c path="compare.T"/>
	<c path="compare.T"/>
	<x path="Int"/>
</f></compare>
		<enumEq public="1" set="method" line="61" static="1"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></enumEq>
		<maybeEnumEq public="1" set="method" line="71" static="1"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></maybeEnumEq>
		<getArgumentTypes public="1" set="method" line="83" static="1"><f a="args">
	<c path="java.NativeArray"><d/></c>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
</f></getArgumentTypes>
		<unifyCallArguments public="1" set="method" line="93" static="1">
			<f a="args:params:?allowPadding" v="::false">
				<c path="java.NativeArray"><d/></c>
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<x path="Bool"/>
				<e path="haxe.ds.Option"><c path="java.NativeArray"><d/></c></e>
			</f>
			<meta><m n=":value"><e>{ allowPadding : false }</e></m></meta>
		</unifyCallArguments>
		<call public="1" set="method" line="155" static="1"><f a="func:args">
	<c path="jvm.Function"/>
	<c path="java.NativeArray"><d/></c>
	<x path="Any"/>
</f></call>
		<dynamicToByte public="1" params="T" set="method" line="161" static="1"><f a="d">
	<c path="dynamicToByte.T"/>
	<x path="Null"><x path="java.lang.Byte"/></x>
</f></dynamicToByte>
		<dynamicToShort public="1" params="T" set="method" line="168" static="1"><f a="d">
	<c path="dynamicToShort.T"/>
	<x path="Null"><x path="java.lang.Short"/></x>
</f></dynamicToShort>
		<dynamicToInteger public="1" params="T" set="method" line="175" static="1"><f a="d">
	<c path="dynamicToInteger.T"/>
	<x path="Null"><x path="Int"/></x>
</f></dynamicToInteger>
		<dynamicToLong public="1" params="T" set="method" line="182" static="1"><f a="d">
	<c path="dynamicToLong.T"/>
	<x path="Null"><x path="java.lang.Long"/></x>
</f></dynamicToLong>
		<dynamicToFloat public="1" params="T" set="method" line="189" static="1"><f a="d">
	<c path="dynamicToFloat.T"/>
	<x path="Null"><x path="java.lang.Float"/></x>
</f></dynamicToFloat>
		<dynamicToDouble public="1" params="T" set="method" line="196" static="1"><f a="d">
	<c path="dynamicToDouble.T"/>
	<x path="Null"><x path="Float"/></x>
</f></dynamicToDouble>
		<numberToByte public="1" set="method" line="203" static="1"><f a="n">
	<c path="java.lang.Number"/>
	<x path="Null"><x path="java.lang.Byte"/></x>
</f></numberToByte>
		<numberToShort public="1" set="method" line="207" static="1"><f a="n">
	<c path="java.lang.Number"/>
	<x path="Null"><x path="java.lang.Short"/></x>
</f></numberToShort>
		<numberToInteger public="1" set="method" line="211" static="1"><f a="n">
	<c path="java.lang.Number"/>
	<x path="Null"><x path="Int"/></x>
</f></numberToInteger>
		<numberToLong public="1" set="method" line="215" static="1"><f a="n">
	<c path="java.lang.Number"/>
	<x path="Null"><x path="java.lang.Long"/></x>
</f></numberToLong>
		<numberToFloat public="1" set="method" line="219" static="1"><f a="n">
	<c path="java.lang.Number"/>
	<x path="Null"><x path="java.lang.Float"/></x>
</f></numberToFloat>
		<numberToDouble public="1" set="method" line="223" static="1"><f a="n">
	<c path="java.lang.Number"/>
	<x path="Null"><x path="Float"/></x>
</f></numberToDouble>
		<toByte public="1" set="method" line="227" static="1"><f a="d">
	<d/>
	<t path="java.types.Int8"/>
</f></toByte>
		<toChar public="1" set="method" line="231" static="1"><f a="d">
	<d/>
	<t path="java.types.Char16"/>
</f></toChar>
		<toDouble public="1" set="method" line="235" static="1"><f a="d">
	<d/>
	<x path="Float"/>
</f></toDouble>
		<toFloat public="1" set="method" line="239" static="1"><f a="d">
	<d/>
	<x path="Single"/>
</f></toFloat>
		<toInt public="1" set="method" line="243" static="1"><f a="d">
	<d/>
	<x path="Int"/>
</f></toInt>
		<toLong public="1" set="method" line="247" static="1"><f a="d">
	<d/>
	<x path="haxe.Int64"/>
</f></toLong>
		<toShort public="1" set="method" line="251" static="1"><f a="d">
	<d/>
	<t path="java.types.Int16"/>
</f></toShort>
		<toBoolean public="1" set="method" line="255" static="1"><f a="d">
	<d/>
	<x path="Bool"/>
</f></toBoolean>
		<getWrapperClass public="1" params="S:T" set="method" line="259" static="1"><f a="c">
	<c path="java.lang.Class"><c path="getWrapperClass.S"/></c>
	<c path="java.lang.Class"><c path="getWrapperClass.S"/></c>
</f></getWrapperClass>
		<arrayRead public="1" set="method" line="277" static="1"><f a="obj:index">
	<d/>
	<x path="Int"/>
	<x path="Any"/>
</f></arrayRead>
		<arrayWrite public="1" set="method" line="284" static="1"><f a="obj:index:value">
	<d/>
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></arrayWrite>
		<readFieldClosure public="1" set="method" line="292" static="1"><f a="obj:name:parameterTypes">
	<d/>
	<c path="String"/>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<d/>
</f></readFieldClosure>
		<readStaticField params="T" set="method" line="309" static="1"><f a="cl:name">
	<c path="java.lang.Class"><c path="readStaticField.T"/></c>
	<c path="String"/>
	<d/>
</f></readStaticField>
		<readFieldNoObject public="1" set="method" line="325" static="1"><f a="obj:name">
	<d/>
	<c path="String"/>
	<d/>
</f></readFieldNoObject>
		<readField public="1" set="method" line="345" static="1"><f a="obj:name">
	<d/>
	<c path="String"/>
	<d/>
</f></readField>
		<writeFieldNoObject public="1" params="T" set="method" line="389" static="1"><f a="obj:name:value">
	<d/>
	<c path="String"/>
	<c path="writeFieldNoObject.T"/>
	<x path="Void"/>
</f></writeFieldNoObject>
		<writeField public="1" params="T" set="method" line="409" static="1"><f a="obj:name:value">
	<d/>
	<c path="String"/>
	<c path="writeField.T"/>
	<x path="Void"/>
</f></writeField>
		<toString public="1" params="T" set="method" line="421" static="1"><f a="obj">
	<c path="toString.T"/>
	<c path="String"/>
</f></toString>
		<stringConcat public="1" params="A:B" set="method" line="435" static="1"><f a="a:b">
	<c path="stringConcat.A"/>
	<c path="stringConcat.B"/>
	<c path="String"/>
</f></stringConcat>
		<opAdd public="1" params="T1:T2" set="method" line="441" static="1"><f a="a:b">
	<c path="opAdd.T1"/>
	<c path="opAdd.T2"/>
	<d/>
</f></opAdd>
		<opSub public="1" params="T1:T2" set="method" line="457" static="1"><f a="a:b">
	<c path="opSub.T1"/>
	<c path="opSub.T2"/>
	<d/>
</f></opSub>
		<opMul public="1" params="T1:T2" set="method" line="470" static="1"><f a="a:b">
	<c path="opMul.T1"/>
	<c path="opMul.T2"/>
	<d/>
</f></opMul>
		<opDiv public="1" params="T1:T2" set="method" line="483" static="1"><f a="a:b">
	<c path="opDiv.T1"/>
	<c path="opDiv.T2"/>
	<d/>
</f></opDiv>
		<opMod public="1" params="T1:T2" set="method" line="496" static="1"><f a="a:b">
	<c path="opMod.T1"/>
	<c path="opMod.T2"/>
	<d/>
</f></opMod>
		<opAnd public="1" params="T1:T2" set="method" line="509" static="1"><f a="a:b">
	<c path="opAnd.T1"/>
	<c path="opAnd.T2"/>
	<d/>
</f></opAnd>
		<opOr public="1" params="T1:T2" set="method" line="519" static="1"><f a="a:b">
	<c path="opOr.T1"/>
	<c path="opOr.T2"/>
	<d/>
</f></opOr>
		<opXor public="1" params="T1:T2" set="method" line="529" static="1"><f a="a:b">
	<c path="opXor.T1"/>
	<c path="opXor.T2"/>
	<d/>
</f></opXor>
		<opShl public="1" params="T1:T2" set="method" line="539" static="1"><f a="a:b">
	<c path="opShl.T1"/>
	<c path="opShl.T2"/>
	<d/>
</f></opShl>
		<opShr public="1" params="T1:T2" set="method" line="549" static="1"><f a="a:b">
	<c path="opShr.T1"/>
	<c path="opShr.T2"/>
	<d/>
</f></opShr>
		<opUshr public="1" params="T1:T2" set="method" line="559" static="1"><f a="a:b">
	<c path="opUshr.T1"/>
	<c path="opUshr.T2"/>
	<d/>
</f></opUshr>
		<opIncrement public="1" params="T1" set="method" line="569" static="1"><f a="a">
	<c path="opIncrement.T1"/>
	<d/>
</f></opIncrement>
		<opDecrement public="1" params="T1" set="method" line="582" static="1"><f a="a">
	<c path="opDecrement.T1"/>
	<d/>
</f></opDecrement>
		<opNeg public="1" params="T1" set="method" line="595" static="1"><f a="a">
	<c path="opNeg.T1"/>
	<d/>
</f></opNeg>
		<opNegBits public="1" params="T1" set="method" line="608" static="1"><f a="a">
	<c path="opNegBits.T1"/>
	<d/>
</f></opNegBits>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.jvm.Jvm"</e></m>
		</meta>
	</class>
	<class path="java.io.Serializable" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Serializable.class" extern="1" interface="1"><meta>
	<m n=":native"><e>"java.io.Serializable"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.lang.Number" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Number.class" extern="1" abstract="1">
		<implements path="java.io.Serializable"/>
		<intValue abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></intValue>
		<longValue abstract="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></longValue>
		<floatValue abstract="1" public="1" set="method"><f a=""><x path="Single"/></f></floatValue>
		<doubleValue abstract="1" public="1" set="method"><f a=""><x path="Float"/></f></doubleValue>
		<byteValue public="1" set="method"><f a=""><t path="java.types.Int8"/></f></byteValue>
		<shortValue public="1" set="method"><f a=""><t path="java.types.Int16"/></f></shortValue>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Number"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Comparable" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Comparable.class" extern="1" interface="1">
		<compareTo public="1" set="method"><f a="param1">
	<c path="java.lang.Comparable.T"/>
	<x path="Int"/>
</f></compareTo>
		<meta>
			<m n=":native"><e>"java.lang.Comparable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.IntegerClass" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Integer.hx" module="java.lang.Integer" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Integer"/></implements>
		<MAX_VALUE final="1" public="1" set="null" static="1"><x path="Int"/></MAX_VALUE>
		<MIN_VALUE final="1" public="1" set="null" static="1"><x path="Int"/></MIN_VALUE>
		<SIZE final="1" public="1" set="null" static="1"><x path="Int"/></SIZE>
		<TYPE final="1" public="1" set="null" static="1"><c path="java.lang.Class"><x path="java.lang.Integer"/></c></TYPE>
		<bitCount public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</bitCount>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<decode public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Integer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</decode>
		<getInteger public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Integer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<getInteger public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="java.lang.Integer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getInteger>
				<getInteger public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="java.lang.Integer"/>
						<x path="java.lang.Integer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getInteger>
			</overloads>
		</getInteger>
		<highestOneBit public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</highestOneBit>
		<lowestOneBit public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</lowestOneBit>
		<numberOfLeadingZeros public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</numberOfLeadingZeros>
		<numberOfTrailingZeros public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</numberOfTrailingZeros>
		<parseInt public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><parseInt public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</parseInt></overloads>
		</parseInt>
		<reverse public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverse>
		<reverseBytes public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverseBytes>
		<rotateLeft public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</rotateLeft>
		<rotateRight public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</rotateRight>
		<signum public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</signum>
		<toBinaryString public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toBinaryString>
		<toHexString public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toHexString>
		<toOctalString public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toOctalString>
		<_toString public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads><toString public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta>
		<m n=":native"><e>"toString"</e></m>
		<m n=":overload"/>
	</meta>
</toString></overloads>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="java.lang.Integer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<valueOf public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Integer"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="java.lang.Integer"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
			</overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Integer"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<doubleValue public="1" set="method" override="1"><f a=""><x path="Float"/></f></doubleValue>
		<floatValue public="1" set="method" override="1"><f a=""><x path="Single"/></f></floatValue>
		<intValue public="1" set="method" override="1"><f a=""><x path="Int"/></f></intValue>
		<longValue public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></longValue>
		<new public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Integer"</e></m>
		</meta>
	</class>
	<class path="java.lang.DoubleClass" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Double.hx" module="java.lang.Double" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Double"/></implements>
		<MAX_EXPONENT final="1" public="1" set="null" static="1"><x path="Int"/></MAX_EXPONENT>
		<MAX_VALUE final="1" public="1" set="null" static="1"><x path="Float"/></MAX_VALUE>
		<MIN_EXPONENT final="1" public="1" set="null" static="1"><x path="Int"/></MIN_EXPONENT>
		<MIN_NORMAL final="1" public="1" set="null" static="1"><x path="Float"/></MIN_NORMAL>
		<MIN_VALUE final="1" public="1" set="null" static="1"><x path="Float"/></MIN_VALUE>
		<NEGATIVE_INFINITY final="1" public="1" set="null" static="1"><x path="Float"/></NEGATIVE_INFINITY>
		<NaN final="1" public="1" set="null" static="1"><x path="Float"/></NaN>
		<POSITIVE_INFINITY final="1" public="1" set="null" static="1"><x path="Float"/></POSITIVE_INFINITY>
		<SIZE final="1" public="1" set="null" static="1"><x path="Int"/></SIZE>
		<TYPE final="1" public="1" set="null" static="1"><c path="java.lang.Class"><x path="java.lang.Double"/></c></TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<doubleToLongBits public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</doubleToLongBits>
		<doubleToRawLongBits public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</doubleToRawLongBits>
		<_isInfinite public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"isInfinite"</e></m>
				<m n=":overload"/>
			</meta>
		</_isInfinite>
		<_isNaN public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"isNaN"</e></m>
				<m n=":overload"/>
			</meta>
		</_isNaN>
		<longBitsToDouble public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</longBitsToDouble>
		<parseDouble public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</parseDouble>
		<toHexString public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toHexString>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="java.lang.Double"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><valueOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="java.lang.Double"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</valueOf></overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Double"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<isInfinite public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isInfinite>
		<isNaN public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isNaN>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<doubleValue public="1" set="method" override="1"><f a=""><x path="Float"/></f></doubleValue>
		<floatValue public="1" set="method" override="1"><f a=""><x path="Single"/></f></floatValue>
		<intValue public="1" set="method" override="1"><f a=""><x path="Int"/></f></intValue>
		<longValue public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></longValue>
		<new public="1" set="method">
			<f a="param1">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Double"</e></m>
		</meta>
	</class>
	<class path="java.lang.BooleanClass" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Boolean.hx" module="java.lang.Boolean" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Boolean"/></implements>
		<FALSE final="1" public="1" set="null" static="1"><x path="java.lang.Boolean"/></FALSE>
		<TRUE final="1" public="1" set="null" static="1"><x path="java.lang.Boolean"/></TRUE>
		<TYPE final="1" public="1" set="null" static="1"><c path="java.lang.Class"><x path="java.lang.Boolean"/></c></TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<getBoolean public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getBoolean>
		<parseBoolean public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</parseBoolean>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<x path="Bool"/>
				<x path="java.lang.Boolean"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><valueOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="java.lang.Boolean"/>
	</f>
	<meta><m n=":overload"/></meta>
</valueOf></overloads>
		</valueOf>
		<booleanValue public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</booleanValue>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Boolean"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<doubleValue public="1" set="method" override="1"><f a=""><x path="Float"/></f></doubleValue>
		<floatValue public="1" set="method" override="1"><f a=""><x path="Single"/></f></floatValue>
		<intValue public="1" set="method" override="1"><f a=""><x path="Int"/></f></intValue>
		<longValue public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></longValue>
		<new public="1" set="method">
			<f a="bool">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="string">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Boolean"</e></m>
		</meta>
	</class>
	<class path="sys.thread._Thread.NativeHaxeThread" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread">
		<extends path="java.lang.Thread"/>
		<haxeThread final="1" public="1"><c path="sys.thread._Thread.HaxeThread"/></haxeThread>
		<withEventLoop final="1"><x path="Bool"/></withEventLoop>
		<run public="1" set="method" line="165" override="1"><f a=""><x path="Void"/></f></run>
		<new public="1" set="method" line="159"><f a="haxeThread:job:withEventLoop">
	<c path="sys.thread._Thread.HaxeThread"/>
	<f a=""><x path="Void"/></f>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="sys.thread.Mutex" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/thread/Mutex.hx">
		<lock>
			<c path="java.util.concurrent.locks.ReentrantLock"/>
			<meta><m n=":private"/></meta>
		</lock>
		<tryAcquire public="1" set="method" line="35">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Try to acquire the mutex, returns true if acquire or false
		if it's already locked by another thread.</haxe_doc>
		</tryAcquire>
		<acquire public="1" set="method" line="39">
			<f a=""><x path="Void"/></f>
			<haxe_doc>The current thread acquire the mutex or wait if not available.
		The same thread can acquire several times the same mutex but
		must release it as many times it has been acquired.</haxe_doc>
		</acquire>
		<release public="1" set="method" line="43">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Release a mutex that has been acquired by the current thread.
		The behavior is undefined if the current thread does not own
		the mutex.</haxe_doc>
		</release>
		<new public="1" set="method" line="31">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a mutex.</haxe_doc>
		</new>
		<haxe_doc>Creates a mutex, which can be used to acquire a temporary lock
	to access some resource. The main difference with a lock is
	that a mutex must always be released by the owner thread.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":native"><e>"haxe.java.vm.Mutex"</e></m>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.Lock" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/Lock.class" extern="1" interface="1">
		<lock public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<lockInterruptibly public="1" set="method"><f a=""><x path="Void"/></f></lockInterruptibly>
		<tryLock public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<overloads><tryLock public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></tryLock></overloads>
		</tryLock>
		<unlock public="1" set="method"><f a=""><x path="Void"/></f></unlock>
		<newCondition public="1" set="method"><f a=""><c path="java.util.concurrent.locks.Condition"/></f></newCondition>
		<meta>
			<m n=":native"><e>"java.util.concurrent.locks.Lock"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.ReentrantLock" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/ReentrantLock.class" extern="1">
		<implements path="java.util.concurrent.locks.Lock"/>
		<implements path="java.io.Serializable"/>
		<lock public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<lockInterruptibly public="1" set="method"><f a=""><x path="Void"/></f></lockInterruptibly>
		<tryLock public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<overloads><tryLock public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></tryLock></overloads>
		</tryLock>
		<unlock public="1" set="method"><f a=""><x path="Void"/></f></unlock>
		<newCondition public="1" set="method"><f a=""><c path="java.util.concurrent.locks.Condition"/></f></newCondition>
		<getHoldCount public="1" set="method"><f a=""><x path="Int"/></f></getHoldCount>
		<isHeldByCurrentThread public="1" set="method"><f a=""><x path="Bool"/></f></isHeldByCurrentThread>
		<isLocked public="1" set="method"><f a=""><x path="Bool"/></f></isLocked>
		<isFair final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isFair>
		<getOwner public="1" set="method"><f a=""><c path="java.lang.Thread"/></f></getOwner>
		<hasQueuedThreads final="1" public="1" set="method"><f a=""><x path="Bool"/></f></hasQueuedThreads>
		<hasQueuedThread final="1" public="1" set="method"><f a="param1">
	<c path="java.lang.Thread"/>
	<x path="Bool"/>
</f></hasQueuedThread>
		<getQueueLength final="1" public="1" set="method"><f a=""><x path="Int"/></f></getQueueLength>
		<getQueuedThreads public="1" set="method"><f a=""><c path="java.util.Collection"><c path="java.lang.Thread"/></c></f></getQueuedThreads>
		<hasWaiters public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.locks.Condition"/>
	<x path="Bool"/>
</f></hasWaiters>
		<getWaitQueueLength public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.locks.Condition"/>
	<x path="Int"/>
</f></getWaitQueueLength>
		<getWaitingThreads public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.locks.Condition"/>
	<c path="java.util.Collection"><c path="java.lang.Thread"/></c>
</f></getWaitingThreads>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.util.concurrent.locks.ReentrantLock"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.NativeArray" params="T" file="/home/runner/work/haxe/haxe/std/java/NativeArray.hx" extern="1">
		<make public="1" params="T" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><c path="make.T"/></t>
				<c path="java.NativeArray"><c path="make.T"/></c>
			</f>
			<haxe_doc>Creates a new array with the specified elements.

		Usage:
		```haxe
		var elements = NativeArray.make(1,2,3,4,5,6);
		```</haxe_doc>
		</make>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the array</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocates a new array with size `len`</haxe_doc>
		</new>
		<haxe_doc>Represents a java fixed-size Array (`T[]`)</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="haxe.EntryPoint" params="" file="/home/runner/work/haxe/haxe/std/haxe/EntryPoint.hx">
		<mutex expr="new Mutex()" line="37" static="1">
			<c path="sys.thread.Mutex"/>
			<meta><m n=":value"><e>new Mutex()</e></m></meta>
		</mutex>
		<mainThread expr="Thread.current()" line="39" static="1">
			<x path="sys.thread.Thread"/>
			<meta><m n=":value"><e>Thread.current()</e></m></meta>
		</mainThread>
		<pending expr="new Array&lt;Void&gt;()" line="44" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Array<Void>()]]></e></m></meta>
		</pending>
		<threadCount public="1" set="null" expr="0" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</threadCount>
		<wakeup public="1" set="method" line="50" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Wakeup a sleeping `run()`</haxe_doc>
		</wakeup>
		<runInMainThread public="1" set="method" line="56" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<addThread public="1" set="method" line="71" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<processEvents set="method" line="99" static="1"><f a=""><x path="Float"/></f></processEvents>
		<run public="1" set="method" line="126" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Start the main loop. Depending on the platform, this can return immediately or will only return when the application exits.</haxe_doc>
		</run>
		<haxe_doc>If `haxe.MainLoop` is kept from DCE, then we will insert an `haxe.EntryPoint.run()` call just at then end of `main()`.
	This class can be redefined by custom frameworks so they can handle their own main loop logic.</haxe_doc>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="/home/runner/work/haxe/haxe/std/haxe/EnumFlags.hx">
		<from><icast field="from"><c path="from.T"/></icast></from>
		<this><x path="Int"/></this>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.

	Enum constructor indices are preserved from Haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as `has(EnumCtor)`. Otherwise
	`Type.enumIndex()` reflection is used.</haxe_doc>
		<impl><class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags" final="1">
	<_new public="1" get="inline" set="null" line="39" static="1">
		<f a="?i" v="0">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":value"><e>{ i : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
	</_new>
	<from params="T" set="method" line="43" static="1">
		<f a="e">
			<c path="from.T"/>
			<x path="haxe.EnumFlags"><c path="from.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</from>
	<or set="method" static="1">
		<f a="this:f">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>a | b</e></m>
		</meta>
	</or>
	<and set="method" static="1">
		<f a="this:f">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[a & b]]></e></m>
		</meta>
	</and>
	<xor set="method" static="1">
		<f a="this:f">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>a ^ b</e></m>
		</meta>
	</xor>
	<has public="1" get="inline" set="null" line="59" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</has>
	<set public="1" get="inline" set="null" line="71" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<unset public="1" get="inline" set="null" line="83" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</unset>
	<setTo public="1" get="inline" set="null" line="96" static="1">
		<f a="this:v:condition">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Depending on the value of `condition` sets (`condition=true`) or unsets (`condition=false`)
		the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</setTo>
	<ofInt public="1" params="T" get="inline" set="null" line="107" static="1">
		<f a="i">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
		</f>
		<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="115" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
	</toInt>
</class></impl>
	</abstract>
	<class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags" final="1">
		<_new public="1" get="inline" set="null" line="39" static="1">
			<f a="?i" v="0">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":value"><e>{ i : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
		</_new>
		<from params="T" set="method" line="43" static="1">
			<f a="e">
				<c path="from.T"/>
				<x path="haxe.EnumFlags"><c path="from.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</from>
		<or set="method" static="1">
			<f a="this:f">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>a | b</e></m>
			</meta>
		</or>
		<and set="method" static="1">
			<f a="this:f">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[a & b]]></e></m>
			</meta>
		</and>
		<xor set="method" static="1">
			<f a="this:f">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>a ^ b</e></m>
			</meta>
		</xor>
		<has public="1" get="inline" set="null" line="59" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</has>
		<set public="1" get="inline" set="null" line="71" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<unset public="1" get="inline" set="null" line="83" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</unset>
		<setTo public="1" get="inline" set="null" line="96" static="1">
			<f a="this:v:condition">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Depending on the value of `condition` sets (`condition=true`) or unsets (`condition=false`)
		the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</setTo>
		<ofInt public="1" params="T" get="inline" set="null" line="107" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
			</f>
			<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="115" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
		</toInt>
	</class>
	<class path="haxe.EnumTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:

			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<values public="1" params="T" set="method" static="1">
			<f a="en">
				<x path="Enum"><c path="values.T"/></x>
				<c path="java.NativeArray"><c path="java.lang.Enum"><c path="values.T"/></c></c>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</values>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="138" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="149" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="163" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="175" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe._Exception.NativeException" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/Exception.hx" private="1" module="haxe.Exception" extern="1">
		<addSuppressed set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</addSuppressed>
		<fillInStackTrace set="method">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</fillInStackTrace>
		<getCause set="method">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</getCause>
		<getLocalizedMessage set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</getLocalizedMessage>
		<getMessage set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</getMessage>
		<getStackTrace set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</getStackTrace>
		<getSuppressed set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Throwable"/></c></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</getSuppressed>
		<initCause set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<c path="java.lang.Throwable"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</initCause>
		<printStackTrace set="method">
			<f a="param1">
				<c path="java.io.PrintWriter"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
			<overloads>
				<printStackTrace set="method">
					<f a="param1">
						<c path="java.io.PrintStream"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
						<m n=":overload"/>
					</meta>
				</printStackTrace>
				<printStackTrace set="method">
					<f a=""><x path="Void"/></f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
						<m n=":overload"/>
					</meta>
				</printStackTrace>
			</overloads>
		</printStackTrace>
		<setStackTrace set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</setStackTrace>
		<toString set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</toString>
		<new set="method">
			<f a="?message:?cause">
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":native"><e>"java.lang.RuntimeException"</e></m>
		</meta>
	</class>
	<class path="haxe.Exception" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/Exception.hx">
		<extends path="haxe._Exception.NativeException"/>
		<caught set="method" line="21" static="1"><f a="value">
	<x path="Any"/>
	<c path="haxe.Exception"/>
</f></caught>
		<thrown set="method" line="31" static="1"><f a="value">
	<x path="Any"/>
	<x path="Any"/>
</f></thrown>
		<message public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Exception message.</haxe_doc>
		</message>
		<stack public="1" get="accessor" set="null">
			<x path="haxe.CallStack"/>
			<haxe_doc>The call stack at the moment of the exception creation.</haxe_doc>
		</stack>
		<previous public="1" get="accessor" set="null">
			<x path="Null"><c path="haxe.Exception"/></x>
			<haxe_doc>Contains an exception, which was passed to `previous` constructor argument.</haxe_doc>
		</previous>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__exceptionStack>
			<x path="Null"><x path="haxe.CallStack"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__exceptionStack>
		<__nativeException>
			<c path="java.lang.Throwable"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<unwrap set="method" line="60"><f a=""><x path="Any"/></f></unwrap>
		<toString public="1" set="method" line="64" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<details public="1" set="method" line="68">
			<f a=""><c path="String"/></f>
			<haxe_doc>Detailed exception description.

		Includes message, stack and the chain of previous exceptions (if set).</haxe_doc>
		</details>
		<get_message set="method" line="72"><f a=""><c path="String"/></f></get_message>
		<get_previous set="method" line="76"><f a=""><x path="Null"><c path="haxe.Exception"/></x></f></get_previous>
		<get_native final="1" set="method" line="80"><f a=""><x path="Any"/></f></get_native>
		<get_stack set="method" line="84"><f a=""><x path="haxe.CallStack"/></f></get_stack>
		<new public="1" set="method" line="49">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.Http" params="" file="/home/runner/work/haxe/haxe/std/haxe/Http.hx"><c path="sys.Http"/></typedef>
	<abstract path="haxe.Int32" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1">
	<negate get="inline" set="null" line="32" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
	</negate>
	<preIncrement get="inline" set="null" line="35" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>++A</e></m></meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="37" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="44" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>--A</e></m></meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="46" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A--</e></m></meta>
	</postDecrement>
	<add get="inline" set="null" line="53" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="56" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<addFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addFloat>
	<sub get="inline" set="null" line="61" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="64" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="67" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<subFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subFloat>
	<floatSub set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="haxe.Int32"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</floatSub>
	<mul set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mul>
	<mulInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<mulFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulFloat>
	<div set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</div>
	<divInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divInt>
	<intDiv set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</intDiv>
	<divFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divFloat>
	<floatDiv set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="haxe.Int32"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</floatDiv>
	<mod set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</mod>
	<modInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modInt>
	<intMod set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</intMod>
	<modFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modFloat>
	<floatMod set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="haxe.Int32"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</floatMod>
	<eq set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</eq>
	<eqInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<eqFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqFloat>
	<neq set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</neq>
	<neqInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<neqFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqFloat>
	<lt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<ltInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</ltInt>
	<intLt set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</intLt>
	<ltFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</ltFloat>
	<floatLt set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</floatLt>
	<lte set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<lteInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lteInt>
	<intLte set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</intLte>
	<lteFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lteFloat>
	<floatLte set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</floatLte>
	<gt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<gtInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gtInt>
	<intGt set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</intGt>
	<gtFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gtFloat>
	<floatGt set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</floatGt>
	<gte set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<gteInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gteInt>
	<intGte set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</intGte>
	<gteFloat set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gteFloat>
	<floatGte set="method" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="haxe.Int32"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</floatGte>
	<complement set="method" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</complement>
	<and set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</and>
	<andInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
			<m n=":commutative"/>
		</meta>
	</andInt>
	<or set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</or>
	<orInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
			<m n=":commutative"/>
		</meta>
	</orInt>
	<xor set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xor>
	<xorInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
			<m n=":commutative"/>
		</meta>
	</xorInt>
	<shr set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shr>
	<shrInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shrInt>
	<intShr set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</intShr>
	<ushr set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >>> B]]></e></m>
		</meta>
	</ushr>
	<ushrInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >>> B]]></e></m>
		</meta>
	</ushrInt>
	<intUshr set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >>> B]]></e></m>
		</meta>
	</intUshr>
	<shl set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shl>
	<shlInt set="method" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shlInt>
	<intShl set="method" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</intShl>
	<toFloat get="inline" set="null" line="249" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
	<ucompare public="1" set="method" line="254" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="267" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1">
		<negate get="inline" set="null" line="32" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
		</negate>
		<preIncrement get="inline" set="null" line="35" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>++A</e></m></meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="37" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="44" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>--A</e></m></meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="46" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A--</e></m></meta>
		</postDecrement>
		<add get="inline" set="null" line="53" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="56" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<addFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addFloat>
		<sub get="inline" set="null" line="61" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="64" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="67" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<subFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subFloat>
		<floatSub set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="haxe.Int32"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</floatSub>
		<mul set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mul>
		<mulInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<mulFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulFloat>
		<div set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</div>
		<divInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divInt>
		<intDiv set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</intDiv>
		<divFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divFloat>
		<floatDiv set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="haxe.Int32"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</floatDiv>
		<mod set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</mod>
		<modInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modInt>
		<intMod set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</intMod>
		<modFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modFloat>
		<floatMod set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="haxe.Int32"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</floatMod>
		<eq set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</eq>
		<eqInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<eqFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqFloat>
		<neq set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</neq>
		<neqInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<neqFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqFloat>
		<lt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<ltInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</ltInt>
		<intLt set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</intLt>
		<ltFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</ltFloat>
		<floatLt set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</floatLt>
		<lte set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<lteInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lteInt>
		<intLte set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</intLte>
		<lteFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lteFloat>
		<floatLte set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</floatLte>
		<gt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<gtInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gtInt>
		<intGt set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</intGt>
		<gtFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gtFloat>
		<floatGt set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</floatGt>
		<gte set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<gteInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gteInt>
		<intGte set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</intGte>
		<gteFloat set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gteFloat>
		<floatGte set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="haxe.Int32"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</floatGte>
		<complement set="method" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</complement>
		<and set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</and>
		<andInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
				<m n=":commutative"/>
			</meta>
		</andInt>
		<or set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</or>
		<orInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
				<m n=":commutative"/>
			</meta>
		</orInt>
		<xor set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xor>
		<xorInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
				<m n=":commutative"/>
			</meta>
		</xorInt>
		<shr set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shr>
		<shrInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shrInt>
		<intShr set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</intShr>
		<ushr set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >>> B]]></e></m>
			</meta>
		</ushr>
		<ushrInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >>> B]]></e></m>
			</meta>
		</ushrInt>
		<intUshr set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >>> B]]></e></m>
			</meta>
		</intUshr>
		<shl set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shl>
		<shlInt set="method" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shlInt>
		<intShl set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</intShl>
		<toFloat get="inline" set="null" line="249" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
		<ucompare public="1" set="method" line="254" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="267" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/Int64.hx" private="1" module="haxe.Int64"><x path="java.Int64"/></typedef>
	<abstract path="haxe.Int64" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<meta>
			<m n=":coreApi"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1">
	<make public="1" set="method" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<_new get="inline" set="null" line="41" static="1">
		<f a="x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<val get="accessor" set="accessor" static="1"><t path="haxe._Int64.__Int64"/></val>
	<get_val get="inline" set="null" line="47" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<t path="haxe._Int64.__Int64"/>
</f></get_val>
	<set_val get="inline" set="null" line="50" static="1"><f a="this:x">
	<t path="haxe._Int64.__Int64"/>
	<t path="haxe._Int64.__Int64"/>
	<t path="haxe._Int64.__Int64"/>
</f></set_val>
	<high public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></high>
	<get_high get="inline" set="null" line="55" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_high>
	<low public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></low>
	<get_low get="inline" set="null" line="60" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_low>
	<copy public="1" get="inline" set="null" line="63" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<ofInt public="1" get="inline" set="null" line="66" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<is public="1" get="inline" set="null" line="70" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<meta><m n=":deprecated"><e>"haxe.Int64.is() is deprecated. Use haxe.Int64.isInt64() instead"</e></m></meta>
	</is>
	<isInt64 public="1" get="inline" set="null" line="73" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</isInt64>
	<toInt public="1" get="inline" set="null" line="75" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<getHigh public="1" get="inline" set="null" line="82" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" get="inline" set="null" line="85" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" get="inline" set="null" line="88" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" get="inline" set="null" line="91" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" get="inline" set="null" line="93" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" get="inline" set="null" line="101" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" get="inline" set="null" line="108" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<divMod public="1" get="inline" set="null" line="111" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<toString get="inline" set="null" line="114" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<c path="String"/>
</f></toString>
	<parseString public="1" set="method" line="116" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
	<fromFloat public="1" set="method" line="121" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
	<neg public="1" set="method" line="126" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="129" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>++A</e></m></meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="132" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="135" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>--A</e></m></meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="138" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A--</e></m></meta>
	</postDecrement>
	<add public="1" get="inline" set="null" line="141" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt get="inline" set="null" line="144" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="147" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt get="inline" set="null" line="150" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="153" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul public="1" get="inline" set="null" line="156" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt get="inline" set="null" line="159" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" get="inline" set="null" line="162" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt get="inline" set="null" line="165" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divInt>
	<intDiv get="inline" set="null" line="168" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</intDiv>
	<mod public="1" get="inline" set="null" line="171" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt get="inline" set="null" line="174" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modInt>
	<intMod get="inline" set="null" line="177" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</intMod>
	<eq public="1" get="inline" set="null" line="180" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt get="inline" set="null" line="183" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" get="inline" set="null" line="186" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt get="inline" set="null" line="189" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt get="inline" set="null" line="192" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<ltInt get="inline" set="null" line="195" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltInt>
	<intLt get="inline" set="null" line="198" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</intLt>
	<lte get="inline" set="null" line="201" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<lteInt get="inline" set="null" line="204" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteInt>
	<intLte get="inline" set="null" line="207" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</intLte>
	<gt get="inline" set="null" line="210" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gtInt get="inline" set="null" line="213" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtInt>
	<intGt get="inline" set="null" line="216" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</intGt>
	<gte get="inline" set="null" line="219" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<gteInt get="inline" set="null" line="222" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteInt>
	<intGte get="inline" set="null" line="225" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</intGte>
	<complement get="inline" set="null" line="228" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
	</complement>
	<and public="1" get="inline" set="null" line="231" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" get="inline" set="null" line="234" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="237" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" get="inline" set="null" line="240" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" get="inline" set="null" line="243" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" get="inline" set="null" line="246" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1">
		<make public="1" set="method" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<_new get="inline" set="null" line="41" static="1">
			<f a="x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<val get="accessor" set="accessor" static="1"><t path="haxe._Int64.__Int64"/></val>
		<get_val get="inline" set="null" line="47" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<t path="haxe._Int64.__Int64"/>
</f></get_val>
		<set_val get="inline" set="null" line="50" static="1"><f a="this:x">
	<t path="haxe._Int64.__Int64"/>
	<t path="haxe._Int64.__Int64"/>
	<t path="haxe._Int64.__Int64"/>
</f></set_val>
		<high public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></high>
		<get_high get="inline" set="null" line="55" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_high>
		<low public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></low>
		<get_low get="inline" set="null" line="60" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_low>
		<copy public="1" get="inline" set="null" line="63" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<ofInt public="1" get="inline" set="null" line="66" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<is public="1" get="inline" set="null" line="70" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"haxe.Int64.is() is deprecated. Use haxe.Int64.isInt64() instead"</e></m></meta>
		</is>
		<isInt64 public="1" get="inline" set="null" line="73" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</isInt64>
		<toInt public="1" get="inline" set="null" line="75" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<getHigh public="1" get="inline" set="null" line="82" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" get="inline" set="null" line="85" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" get="inline" set="null" line="88" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" get="inline" set="null" line="91" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" get="inline" set="null" line="93" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" get="inline" set="null" line="101" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="108" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<divMod public="1" get="inline" set="null" line="111" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<toString get="inline" set="null" line="114" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<c path="String"/>
</f></toString>
		<parseString public="1" set="method" line="116" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
		<fromFloat public="1" set="method" line="121" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
		<neg public="1" set="method" line="126" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="129" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>++A</e></m></meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="132" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="135" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>--A</e></m></meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="138" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A--</e></m></meta>
		</postDecrement>
		<add public="1" get="inline" set="null" line="141" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt get="inline" set="null" line="144" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="147" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt get="inline" set="null" line="150" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="153" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul public="1" get="inline" set="null" line="156" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt get="inline" set="null" line="159" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" get="inline" set="null" line="162" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt get="inline" set="null" line="165" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divInt>
		<intDiv get="inline" set="null" line="168" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</intDiv>
		<mod public="1" get="inline" set="null" line="171" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt get="inline" set="null" line="174" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modInt>
		<intMod get="inline" set="null" line="177" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</intMod>
		<eq public="1" get="inline" set="null" line="180" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt get="inline" set="null" line="183" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" get="inline" set="null" line="186" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt get="inline" set="null" line="189" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt get="inline" set="null" line="192" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<ltInt get="inline" set="null" line="195" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltInt>
		<intLt get="inline" set="null" line="198" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</intLt>
		<lte get="inline" set="null" line="201" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<lteInt get="inline" set="null" line="204" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteInt>
		<intLte get="inline" set="null" line="207" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</intLte>
		<gt get="inline" set="null" line="210" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gtInt get="inline" set="null" line="213" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtInt>
		<intGt get="inline" set="null" line="216" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</intGt>
		<gte get="inline" set="null" line="219" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<gteInt get="inline" set="null" line="222" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteInt>
		<intGte get="inline" set="null" line="225" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</intGte>
		<complement get="inline" set="null" line="228" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
		</complement>
		<and public="1" get="inline" set="null" line="231" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" get="inline" set="null" line="234" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="237" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" get="inline" set="null" line="240" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="243" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" get="inline" set="null" line="246" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.Int64Helper" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int64Helper.hx">
		<parseString public="1" set="method" line="36" static="1">
			<f a="sParam">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given string.</haxe_doc>
		</parseString>
		<fromFloat public="1" set="method" line="79" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given float.</haxe_doc>
		</fromFloat>
		<haxe_doc>Helper for parsing to `Int64` instances.</haxe_doc>
	</class>
	<class path="haxe.Json" params="" file="/home/runner/work/haxe/haxe/std/haxe/Json.hx">
		<parse public="1" get="inline" set="null" line="43" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `text` is not valid JSON, an exception will be thrown.

		@see https://haxe.org/manual/std-Json-parsing.html]]></haxe_doc>
		</parse>
		<stringify public="1" get="inline" set="null" line="59" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes the given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve the
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.

		@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		</stringify>
		<haxe_doc>Cross-platform JSON API: it will automatically use the optimized native API if available.
	Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
	This will provide extra encoding (but not decoding) features such as enums (replaced by their index) and StringMaps.

	@see https://haxe.org/manual/std-Json.html</haxe_doc>
	</class>
	<class path="haxe.Log" params="" file="/home/runner/work/haxe/haxe/std/haxe/Log.hx">
		<formatOutput public="1" set="method" line="33" static="1">
			<f a="v:infos">
				<d/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<trace public="1" set="dynamic" line="62" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
	</class>
	<class path="haxe.MainEvent" params="" file="/home/runner/work/haxe/haxe/std/haxe/MainLoop.hx" module="haxe.MainLoop">
		<f><f a=""><x path="Void"/></f></f>
		<prev><c path="haxe.MainEvent"/></prev>
		<next><c path="haxe.MainEvent"/></next>
		<isBlocking public="1" expr="true" line="17">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
			<haxe_doc>Tells if the event can lock the process from exiting (default:true)</haxe_doc>
		</isBlocking>
		<nextRun public="1" set="null"><x path="Float"/></nextRun>
		<priority public="1" set="null"><x path="Int"/></priority>
		<delay public="1" set="method" line="32">
			<f a="t">
				<x path="Null"><x path="Float"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Delay the execution of the event for the given time, in seconds.
		If t is null, the event will be run at tick() time.</haxe_doc>
		</delay>
		<call public="1" get="inline" set="null" line="39">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Call the event. Will do nothing if the event has been stopped.</haxe_doc>
		</call>
		<stop public="1" set="method" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop the event from firing anymore.</haxe_doc>
		</stop>
		<new set="method" line="22"><f a="f:p">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.MainLoop" params="" file="/home/runner/work/haxe/haxe/std/haxe/MainLoop.hx">
		<pending static="1"><c path="haxe.MainEvent"/></pending>
		<threadCount public="1" get="accessor" set="null" static="1"><x path="Int"/></threadCount>
		<get_threadCount get="inline" set="null" line="69" static="1"><f a=""><x path="Int"/></f></get_threadCount>
		<hasEvents public="1" set="method" line="71" static="1"><f a=""><x path="Bool"/></f></hasEvents>
		<addThread public="1" set="method" line="81" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<runInMainThread public="1" set="method" line="85" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<add public="1" set="method" line="92" static="1">
			<f a="f:?priority" v=":0">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.MainEvent"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0 }</e></m></meta>
			<haxe_doc>Add a pending event to be run into the main loop.</haxe_doc>
		</add>
		<sortEvents set="method" line="104" static="1"><f a=""><x path="Void"/></f></sortEvents>
		<tick set="method" line="169" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Run the pending events. Return the time for next event.</haxe_doc>
		</tick>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>haxe.MainEvent</e></m>
		</meta>
	</class>
	<class path="java.lang.ThreadLocal" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ThreadLocal.class" extern="1">
		<withInitial public="1" params="S" set="method" static="1"><f a="param1">
	<c path="java.util.function.Supplier"><c path="withInitial.S"/></c>
	<c path="java.lang.ThreadLocal"><c path="withInitial.S"/></c>
</f></withInitial>
		<createInheritedMap public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.ThreadLocal_ThreadLocalMap"/>
	<c path="java.lang.ThreadLocal_ThreadLocalMap"/>
</f></createInheritedMap>
		<initialValue public="1" set="method"><f a=""><c path="java.lang.ThreadLocal.T"/></f></initialValue>
		<get public="1" set="method"><f a=""><c path="java.lang.ThreadLocal.T"/></f></get>
		<set public="1" set="method"><f a="param1">
	<c path="java.lang.ThreadLocal.T"/>
	<x path="Void"/>
</f></set>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<getMap public="1" set="method"><f a="param1">
	<c path="java.lang.Thread"/>
	<c path="java.lang.ThreadLocal_ThreadLocalMap"/>
</f></getMap>
		<createMap public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Thread"/>
	<c path="java.lang.ThreadLocal.T"/>
	<x path="Void"/>
</f></createMap>
		<childValue public="1" set="method"><f a="param1">
	<c path="java.lang.ThreadLocal.T"/>
	<c path="java.lang.ThreadLocal.T"/>
</f></childValue>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.lang.ThreadLocal"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="haxe.NativeStackTrace" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/NativeStackTrace.hx">
		<exception expr="new ThreadLocal&lt;Throwable&gt;()" line="16" static="1">
			<c path="java.lang.ThreadLocal"><c path="java.lang.Throwable"/></c>
			<meta><m n=":value"><e><![CDATA[new ThreadLocal<Throwable>()]]></e></m></meta>
		</exception>
		<saveStack public="1" get="inline" set="null" line="19" static="1">
			<f a="e">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature"><e>"haxe.NativeStackTrace.exceptionStack"</e></m></meta>
		</saveStack>
		<callStack public="1" set="method" line="23" static="1"><f a=""><c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c></f></callStack>
		<exceptionStack public="1" set="method" line="28" static="1"><f a=""><c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c></f></exceptionStack>
		<toHaxe public="1" set="method" line="35" static="1">
			<f a="native:?skip" v=":0">
				<c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c>
				<x path="Int"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":value"><e>{ skip : 0 }</e></m></meta>
		</toHaxe>
		<haxe_doc>Do not use manually.</haxe_doc>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/home/runner/work/haxe/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Resource" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/Resource.hx">
		<content static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":keep"/></meta>
		</content>
		<listNames public="1" get="inline" set="null" line="28" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Lists all available resource names. The resource name is the name part
		of the `--resource file@name` command line parameter.</haxe_doc>
		</listNames>
		<getString public="1" set="method" line="33" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":access"><e>haxe.io.Path.escape</e></m></meta>
			<haxe_doc>Retrieves the resource identified by `name` as a `String`.

		If `name` does not match any resource name, `null` is returned.</haxe_doc>
		</getString>
		<getBytes public="1" set="method" line="43" static="1">
			<f a="name">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":access"><e>haxe.io.Path.escape</e></m></meta>
			<haxe_doc>Retrieves the resource identified by `name` as an instance of
		haxe.io.Bytes.

		If `name` does not match any resource name, `null` is returned.</haxe_doc>
		</getBytes>
		<haxe_doc>Resource can be used to access resources that were added through the
	`--resource file@name` command line parameter.

	Depending on their type they can be obtained as `String` through
	`getString(name)`, or as binary data through `getBytes(name)`.

	A list of all available resource names can be obtained from `listNames()`.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe._Rest.NativeRest" params="T" file="/home/runner/work/haxe/haxe/std/jvm/_std/haxe/Rest.hx" private="1" module="haxe.Rest"><x path="haxe.ds.Vector"><c path="haxe._Rest.NativeRest.T"/></x></typedef>
	<abstract path="haxe.Rest" params="T" file="/home/runner/work/haxe/haxe/std/jvm/_std/haxe/Rest.hx">
		<from><icast field="of"><c path="Array"><c path="of.T"/></c></icast></from>
		<this><t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t></this>
		<to><icast field="toArray"><c path="Array"><c path="haxe.Rest.T"/></c></icast></to>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe._Rest.Rest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/jvm/_std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>Amount of arguments passed as rest arguments</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="14" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<x path="Int"/>
</f></get_length>
	<_new get="inline" set="null" line="16" static="1">
		<f a="a">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get get="inline" set="null" line="21" static="1">
		<f a="this:index">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<x path="Int"/>
			<c path="haxe.Rest.T"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<of public="1" params="T" get="inline" set="null" line="23" static="1">
		<f a="array">
			<c path="Array"><c path="of.T"/></c>
			<x path="haxe.Rest"><c path="of.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Create rest arguments using contents of `array`.

		WARNING:
		Depending on a target platform modifying `array` after using this method
		may affect the created `Rest` instance.
		Use `Rest.of(array.copy())` to avoid that.</haxe_doc>
	</of>
	<append public="1" get="inline" set="null" line="35" static="1">
		<f a="this:item">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<c path="haxe.Rest.T"/>
			<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
		</f>
		<haxe_doc>Create a new rest arguments collection by appending `item` to this one.</haxe_doc>
	</append>
	<prepend public="1" get="inline" set="null" line="42" static="1">
		<f a="this:item">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<c path="haxe.Rest.T"/>
			<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
		</f>
		<haxe_doc>Create a new rest arguments collection by prepending this one with `item`.</haxe_doc>
	</prepend>
	<iterator public="1" get="inline" set="null" line="50" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestIterator"><c path="haxe.Rest.T"/></c>
</f></iterator>
	<keyValueIterator public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestKeyValueIterator"><c path="haxe.Rest.T"/></c>
</f></keyValueIterator>
	<toArray public="1" get="inline" set="null" line="55" static="1">
		<f a="this">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<c path="Array"><c path="haxe.Rest.T"/></c>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc>Creates an array containing all the values of rest arguments.</haxe_doc>
	</toArray>
	<toString public="1" get="inline" set="null" line="59" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="String"/>
</f></toString>
	<meta><m n=":coreApi"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._Rest.Rest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/jvm/_std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Amount of arguments passed as rest arguments</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="14" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<x path="Int"/>
</f></get_length>
		<_new get="inline" set="null" line="16" static="1">
			<f a="a">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get get="inline" set="null" line="21" static="1">
			<f a="this:index">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<x path="Int"/>
				<c path="haxe.Rest.T"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<of public="1" params="T" get="inline" set="null" line="23" static="1">
			<f a="array">
				<c path="Array"><c path="of.T"/></c>
				<x path="haxe.Rest"><c path="of.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Create rest arguments using contents of `array`.

		WARNING:
		Depending on a target platform modifying `array` after using this method
		may affect the created `Rest` instance.
		Use `Rest.of(array.copy())` to avoid that.</haxe_doc>
		</of>
		<append public="1" get="inline" set="null" line="35" static="1">
			<f a="this:item">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<c path="haxe.Rest.T"/>
				<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
			</f>
			<haxe_doc>Create a new rest arguments collection by appending `item` to this one.</haxe_doc>
		</append>
		<prepend public="1" get="inline" set="null" line="42" static="1">
			<f a="this:item">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<c path="haxe.Rest.T"/>
				<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
			</f>
			<haxe_doc>Create a new rest arguments collection by prepending this one with `item`.</haxe_doc>
		</prepend>
		<iterator public="1" get="inline" set="null" line="50" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestIterator"><c path="haxe.Rest.T"/></c>
</f></iterator>
		<keyValueIterator public="1" get="inline" set="null" line="53" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestKeyValueIterator"><c path="haxe.Rest.T"/></c>
</f></keyValueIterator>
		<toArray public="1" get="inline" set="null" line="55" static="1">
			<f a="this">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<c path="Array"><c path="haxe.Rest.T"/></c>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc>Creates an array containing all the values of rest arguments.</haxe_doc>
		</toArray>
		<toString public="1" get="inline" set="null" line="59" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="String"/>
</f></toString>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.Serializer" params="" file="/home/runner/work/haxe/haxe/std/haxe/Serializer.hx">
		<USE_CACHE public="1" expr="false" line="57" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set `USE_CACHE` to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of `Serializer` by
		setting their `useCache` field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" expr="false" line="69" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of `Serializer` by
		setting their `useEnumIndex` field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="71" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<BASE64_CODES expr="null" line="72" static="1">
			<x path="Null"><x path="haxe.ds.Vector"><x path="Null"><x path="Int"/></x></x></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</BASE64_CODES>
		<run public="1" set="method" line="582" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

	This is a convenience function for creating a new instance of
	Serializer, serialize `v` into it and obtain the result through a call
	to `toString()`.</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<scount><x path="Int"/></scount>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See `USE_CACHE` for a complete description.</haxe_doc>
		</useCache>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See `USE_ENUM_INDEX` for a complete description.</haxe_doc>
		</useEnumIndex>
		<toString public="1" set="method" line="118">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		https://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<serializeString set="method" line="154"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="174"><f a="v">
	<d/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeFields set="method" line="211"><f a="v">
	<a/>
	<x path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="229">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes `v`.

	All haxe-defined values and objects with the exception of functions can
	be serialized. Serialization of external/native objects is not
	guaranteed to work.

	The values of `this.useCache` and `this.useEnumIndex` may affect
	serialization output.</haxe_doc>
		</serialize>
		<__getField get="inline" set="null" line="557"><f a="o:f">
	<d/>
	<c path="String"/>
	<d/>
</f></__getField>
		<serializeException public="1" set="method" line="559"><f a="e">
	<d/>
	<x path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="103">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each `Serializer` instance maintains its own cache if `this.useCache` is
		`true`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The Serializer class can be used to encode values and objects into a `String`,
	from which the `Unserializer` class can recreate the original representation.

	This class can be used in two ways:

	- create a `new Serializer()` instance, call its `serialize()` method with
		any argument and finally retrieve the String representation from
		`toString()`
	- call `Serializer.run()` to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/std-serialization-format.html>]]></haxe_doc>
	</class>
	<enum path="haxe._Template.TemplateExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/Template.hx" private="1" module="haxe.Template">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
			<e path="haxe._Template.TemplateExpr"/>
		</OpIf>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpBlock a="l"><c path="haxe.ds.List"><e path="haxe._Template.TemplateExpr"/></c></OpBlock>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
		</OpForeach>
		<OpMacro a="name:params">
			<c path="String"/>
			<c path="haxe.ds.List"><e path="haxe._Template.TemplateExpr"/></c>
		</OpMacro>
	</enum>
	<typedef path="haxe._Template.Token" params="" file="/home/runner/work/haxe/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="/home/runner/work/haxe/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="java.util.regex.Pattern" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern.class" extern="1">
		<implements path="java.io.Serializable"/>
		<compile public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.regex.Pattern"/>
			</f>
			<overloads><compile public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<c path="java.util.regex.Pattern"/>
</f></compile></overloads>
		</compile>
		<matches public="1" set="method" static="1"><f a="param1:param2">
	<c path="String"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></matches>
		<quote public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<UNIX_LINES final="1" public="1" set="null" static="1"><x path="Int"/></UNIX_LINES>
		<CASE_INSENSITIVE final="1" public="1" set="null" static="1"><x path="Int"/></CASE_INSENSITIVE>
		<COMMENTS final="1" public="1" set="null" static="1"><x path="Int"/></COMMENTS>
		<MULTILINE final="1" public="1" set="null" static="1"><x path="Int"/></MULTILINE>
		<LITERAL final="1" public="1" set="null" static="1"><x path="Int"/></LITERAL>
		<DOTALL final="1" public="1" set="null" static="1"><x path="Int"/></DOTALL>
		<UNICODE_CASE final="1" public="1" set="null" static="1"><x path="Int"/></UNICODE_CASE>
		<CANON_EQ final="1" public="1" set="null" static="1"><x path="Int"/></CANON_EQ>
		<UNICODE_CHARACTER_CLASS final="1" public="1" set="null" static="1"><x path="Int"/></UNICODE_CHARACTER_CLASS>
		<MAX_REPS final="1" public="1" set="null" static="1"><x path="Int"/></MAX_REPS>
		<GREEDY final="1" public="1" set="null" static="1"><x path="Int"/></GREEDY>
		<LAZY final="1" public="1" set="null" static="1"><x path="Int"/></LAZY>
		<POSSESSIVE final="1" public="1" set="null" static="1"><x path="Int"/></POSSESSIVE>
		<INDEPENDENT final="1" public="1" set="null" static="1"><x path="Int"/></INDEPENDENT>
		<lookbehindEnd public="1" static="1"><c path="java.util.regex.Pattern_Node"/></lookbehindEnd>
		<accept public="1" static="1"><c path="java.util.regex.Pattern_Node"/></accept>
		<lastAccept public="1" static="1"><c path="java.util.regex.Pattern_Node"/></lastAccept>
		<pattern public="1" set="method"><f a=""><c path="String"/></f></pattern>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<matcher public="1" set="method"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<c path="java.util.regex.Matcher"/>
</f></matcher>
		<flags public="1" set="method"><f a=""><x path="Int"/></f></flags>
		<split public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.CharSequence"/>
				<x path="Int"/>
				<c path="java.NativeArray"><c path="String"/></c>
			</f>
			<overloads><split public="1" set="method"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<c path="java.NativeArray"><c path="String"/></c>
</f></split></overloads>
		</split>
		<namedGroups public="1" set="method"><f a=""><c path="java.util.Map">
	<c path="String"/>
	<x path="java.lang.Integer"/>
</c></f></namedGroups>
		<asPredicate public="1" set="method"><f a=""><c path="java.util.function.Predicate"><c path="String"/></c></f></asPredicate>
		<splitAsStream public="1" set="method"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<c path="java.util.stream.Stream"><c path="String"/></c>
</f></splitAsStream>
		<root public="1"><c path="java.util.regex.Pattern_Node"/></root>
		<matchRoot public="1"><c path="java.util.regex.Pattern_Node"/></matchRoot>
		<buffer public="1"><c path="java.NativeArray"><x path="Int"/></c></buffer>
		<groupNodes public="1"><c path="java.NativeArray"><c path="java.util.regex.Pattern_GroupHead"/></c></groupNodes>
		<capturingGroupCount public="1"><x path="Int"/></capturingGroupCount>
		<localCount public="1"><x path="Int"/></localCount>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="jvm.CompiledPattern" params="" file="/home/runner/work/haxe/haxe/std/jvm/CompiledPattern.hx">
		<pattern final="1" public="1"><c path="java.util.regex.Pattern"/></pattern>
		<isGlobal final="1" public="1"><x path="Bool"/></isGlobal>
		<new public="1" set="method" line="29">
			<f a="pattern:isGlobal">
				<c path="java.util.regex.Pattern"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":inheritDoc"/>
			</meta>
			<haxe_doc></haxe_doc>
		</new>
		<meta>
			<m n=":structInit"/>
			<m n=":native"><e>"haxe.jvm.CompiledPattern"</e></m>
		</meta>
	</class>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0" line="30">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="36">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.Template" params="" file="/home/runner/work/haxe/haxe/std/haxe/Template.hx">
		<splitter expr="~/(::[A-Za-z0-9_ ()&amp;|!+=/&gt;&lt;*.&quot;-]+::|\$\$([A-Za-z0-9_-]+)\()/" line="58" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(::[A-Za-z0-9_ ()&|!+=/><*."-]+::|\$\$([A-Za-z0-9_-]+)\()/]]></e></m></meta>
		</splitter>
		<expr_splitter expr="~/(\(|\)|[ 
	]*&quot;[^&quot;]*&quot;[ 
	]*|[!+=/&gt;&lt;*.&amp;|-]+)/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(\(|\)|[ 
	]*"[^"]*"[ 
	]*|[!+=/><*.&|-]+)/]]></e></m></meta>
		</expr_splitter>
		<expr_trim expr="~/^[ ]*([^ ]+)[ ]*$/" line="60" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ ]*([^ ]+)[ ]*$/</e></m></meta>
		</expr_trim>
		<expr_int expr="~/^[0-9]+$/" line="61" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[0-9]+$/</e></m></meta>
		</expr_int>
		<expr_float expr="~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/" line="62" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/</e></m></meta>
		</expr_float>
		<globals public="1" expr="{ }" line="68" static="1">
			<d/>
			<meta><m n=":value"><e>{ }</e></m></meta>
			<haxe_doc>Global replacements which are used across all `Template` instances. This
		has lower priority than the context argument of `execute()`.</haxe_doc>
		</globals>
		<hxKeepArrayIterator expr="[].iterator()" line="71" static="1">
			<c path="haxe.iterators.ArrayIterator"><x path="Any"/></c>
			<meta>
				<m n=":value"><e>[].iterator()</e></m>
				<m n=":ifFeature"><e>"haxe.Template.run"</e></m>
			</meta>
		</hxKeepArrayIterator>
		<expr><e path="haxe._Template.TemplateExpr"/></expr>
		<context><d/></context>
		<macros><d/></macros>
		<stack><c path="haxe.ds.List"><d/></c></stack>
		<buf><c path="StringBuf"/></buf>
		<execute public="1" set="method" line="112">
			<f a="context:?macros">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Executes `this` `Template`, taking into account `context` for
		replacements and `macros` for callback functions.

		If `context` has a field `name`, its value replaces all occurrences of
		`::name::` in the `Template`. Otherwise `Template.globals` is checked instead,
		If `name` is not a field of that either, `::name::` is replaced with `null`.

		If `macros` has a field `name`, all occurrences of `$$name(args)` are
		replaced with the result of calling that field. The first argument is
		always the `resolve()` method, followed by the given arguments.
		If `macros` has no such field, the result is unspecified.

		If `context` is `null`, the result is unspecified. If `macros` is `null`,
		no macros are used.</haxe_doc>
		</execute>
		<resolve set="method" line="121"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<parseTokens set="method" line="137"><f a="data">
	<c path="String"/>
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
</f></parseTokens>
		<parseBlock set="method" line="184"><f a="tokens">
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parseBlock>
		<parse set="method" line="199"><f a="tokens">
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parse>
		<parseExpr set="method" line="265"><f a="data">
	<c path="String"/>
	<f a=""><x path="Any"/></f>
</f></parseExpr>
		<makeConst set="method" line="304"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<makePath set="method" line="329"><f a="e:l">
	<f a=""><d/></f>
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makePath>
		<makeExpr set="method" line="345"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr>
		<skipSpaces set="method" line="349"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<x path="Void"/>
</f></skipSpaces>
		<makeExpr2 set="method" line="362"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr2>
		<run set="method" line="441"><f a="e">
	<e path="haxe._Template.TemplateExpr"/>
	<x path="Void"/>
</f></run>
		<new public="1" set="method" line="89">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Template` instance from `str`.

		`str` is parsed into tokens, which are stored for internal use. This
		means that multiple `execute()` operations on a single `Template` instance
		are more efficient than one `execute()` operations on multiple `Template`
		instances.

		If `str` is `null`, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`Template` provides a basic templating mechanism to replace values in a source
	String, and to have some basic logic.

	A complete documentation of the supported syntax is available at:
	<https://haxe.org/manual/std-template.html>]]></haxe_doc>
	</class>
	<class path="haxe.Timer" params="" file="/home/runner/work/haxe/haxe/std/haxe/Timer.hx">
		<delay public="1" set="method" line="145" static="1">
			<f a="f:time_ms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>Invokes `f` after `time_ms` milliseconds.

		This is a convenience function for creating a new Timer instance with
		`time_ms` as argument, binding its `run()` method to `f` and then stopping
		`this` Timer upon the first invocation.

		If `f` is `null`, the result is unspecified.</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="165" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<t path="haxe.PosInfos"/>
				<c path="measure.T"/>
			</f>
			<haxe_doc>Measures the time it takes to execute `f`, in seconds with fractions.

		This is a convenience function for calculating the difference between
		`Timer.stamp()` before and after the invocation of `f`.

		The difference is passed as argument to `Log.trace()`, with `"s"` appended
		to denote the unit. The optional `pos` argument is passed through.

		If `f` is `null`, the result is unspecified.</haxe_doc>
		</measure>
		<stamp public="1" get="inline" set="null" line="178" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a timestamp, in seconds with fractions.

		The value itself might differ depending on platforms, only differences
		between two values make sense.</haxe_doc>
		</stamp>
		<thread><x path="sys.thread.Thread"/></thread>
		<eventHandler><x path="sys.thread.EventHandler"/></eventHandler>
		<stop public="1" set="method" line="100">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="134">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:

		```haxe
		var timer = new haxe.Timer(1000); // 1000ms delay
		timer.run = function() { ... }
		```

		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="70">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this.run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The `Timer` class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the `Timer` class with a given
	interval, set its `run()` method to a custom function to be invoked and
	eventually call `stop()` to stop the `Timer`.

	Note that a running `Timer` may or may not prevent the program to exit
	automatically when `main()` returns.

	It is also possible to extend this class and override its `run()` method in
	the child class.

	Notice for threaded targets:
	`Timer` instances require threads they were created in to run with Haxe's event loops.
	Main thread of a Haxe program always contains an event loop. For other cases use 
	`sys.thread.Thread.createWithEventLoop` and `sys.thread.Thread.runWithEventLoop` methods.</haxe_doc>
	</class>
	<abstract path="haxe.Ucs2" params="" file="/home/runner/work/haxe/haxe/std/haxe/Ucs2.hx">
		<this><c path="String"/></this>
		<haxe_doc>Cross platform UCS2 string API.</haxe_doc>
		<impl><class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2" final="1">
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<_new get="inline" set="null" line="31" static="1">
		<f a="str">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="40" static="1"><f a="this">
	<c path="String"/>
	<x path="Int"/>
</f></get_length>
	<toUpperCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
	</toUpperCase>
	<toLowerCase public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
	</toLowerCase>
	<charAt public="1" get="inline" set="null" line="68" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
	</charAt>
	<charCodeAt public="1" get="inline" set="null" line="81" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="Null"><x path="Int"/></x>
		</f>
		<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be used
		instead to extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
	</charCodeAt>
	<indexOf public="1" get="inline" set="null" line="96" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</indexOf>
	<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</lastIndexOf>
	<split public="1" get="inline" set="null" line="135" static="1">
		<f a="this:delimiter">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<c path="Array"><x path="haxe.Ucs2"/></c>
		</f>
		<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
	</split>
	<substr public="1" get="inline" set="null" line="154" static="1">
		<f a="this:pos:?len">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
	</substr>
	<substring public="1" get="inline" set="null" line="171" static="1">
		<f a="this:startIndex:?endIndex">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
	</substring>
	<toNativeString public="1" get="inline" set="null" line="178" static="1">
		<f a="this">
			<c path="String"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns the native underlying String.</haxe_doc>
	</toNativeString>
	<fromCharCode public="1" get="inline" set="null" line="188" static="1">
		<f a="code">
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
	</fromCharCode>
</class></impl>
	</abstract>
	<class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2" final="1">
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<_new get="inline" set="null" line="31" static="1">
			<f a="str">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="40" static="1"><f a="this">
	<c path="String"/>
	<x path="Int"/>
</f></get_length>
		<toUpperCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" get="inline" set="null" line="68" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" get="inline" set="null" line="81" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be used
		instead to extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" get="inline" set="null" line="96" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" get="inline" set="null" line="135" static="1">
			<f a="this:delimiter">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<c path="Array"><x path="haxe.Ucs2"/></c>
			</f>
			<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
		</split>
		<substr public="1" get="inline" set="null" line="154" static="1">
			<f a="this:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" get="inline" set="null" line="171" static="1">
			<f a="this:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
		</substring>
		<toNativeString public="1" get="inline" set="null" line="178" static="1">
			<f a="this">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the native underlying String.</haxe_doc>
		</toNativeString>
		<fromCharCode public="1" get="inline" set="null" line="188" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
	</class>
	<class path="haxe._Unserializer.DefaultResolver" params="" file="/home/runner/work/haxe/haxe/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<resolveClass public="1" get="inline" set="null" line="515"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="518"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new public="1" set="method" line="512"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.Unserializer" params="" file="/home/runner/work/haxe/haxe/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" expr="new DefaultResolver()" line="67" static="1">
			<t path="haxe.TypeResolver"/>
			<meta><m n=":value"><e>new DefaultResolver()</e></m></meta>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a `Class` or `Enum` instance from a given `String`.
		By default, the Haxe `Type` Api is used.

		A type resolver must provide two methods:

		1. `resolveClass(name:String):Class<Dynamic>` is called to determine a
				`Class` from a class name
		2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an
				`Enum` from an enum name

		This value is applied when a new `Unserializer` instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="69" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<CODES expr="null" line="72" static="1">
			<x path="Null"><c path="Array"><x path="Int"/></c></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</CODES>
		<initCodes set="method" line="74" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="470" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its `unserialize()` method
		once.</haxe_doc>
		</run>
		<fastLength get="inline" set="null" line="478" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></fastLength>
		<fastCharCodeAt get="inline" set="null" line="486" static="1"><f a="s:pos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></fastCharCodeAt>
		<fastCharAt get="inline" set="null" line="494" static="1"><f a="s:pos">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></fastCharAt>
		<fastSubstr get="inline" set="null" line="502" static="1"><f a="s:pos:length">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></fastSubstr>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="126">
			<f a="r">
				<x path="Null"><t path="haxe.TypeResolver"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is `null`, a special resolver is used which returns `null` for all
		input values.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</setResolver>
		<getResolver public="1" set="method" line="138">
			<f a=""><t path="haxe.TypeResolver"/></f>
			<haxe_doc>Gets the type resolver of `this` Unserializer instance.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</getResolver>
		<get get="inline" set="null" line="142"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<readDigits set="method" line="150"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="175"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="190"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum params="T" set="method" line="205"><f a="edecl:tag">
	<x path="Enum"><c path="unserializeEnum.T"/></x>
	<c path="String"/>
	<c path="unserializeEnum.T"/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="237">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different Haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from `Type.createEmptyInstance`, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="101">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Unserializer` class is the complement to the `Serializer` class. It parses
	a serialization `String` and creates objects from the contained data.

	This class can be used in two ways:

	- create a `new Unserializer()` instance with a given serialization
		String, then call its `unserialize()` method until all values are
		extracted
	- call `Unserializer.run()`  to unserialize a single value from a given
		String

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/serialization/format>]]></haxe_doc>
	</class>
	<class path="haxe._Unserializer.NullResolver" params="" file="/home/runner/work/haxe/haxe/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe._Unserializer.NullResolver"/></instance>
		<get_instance get="inline" set="null" line="532" static="1"><f a=""><c path="haxe._Unserializer.NullResolver"/></f></get_instance>
		<resolveClass public="1" get="inline" set="null" line="525"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="528"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new set="method" line="522"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.Utf8" params="" file="/home/runner/work/haxe/haxe/std/haxe/Utf8.hx">
		<iter public="1" set="method" line="57" static="1">
			<f a="s:chars">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call the `chars` function for each UTF8 char of the string.</haxe_doc>
		</iter>
		<encode public="1" set="method" line="65" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode the input ISO string into the corresponding UTF8 one.</haxe_doc>
		</encode>
		<decode public="1" set="method" line="73" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an UTF8 string back to an ISO string.
		Throw an exception if a given UTF8 character is not supported by the decoder.</haxe_doc>
		</decode>
		<charCodeAt public="1" get="inline" set="null" line="80" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `String.charCodeAt` but uses the UTF8 character position.</haxe_doc>
		</charCodeAt>
		<validate public="1" get="inline" set="null" line="87" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the String is correctly encoded as UTF8.</haxe_doc>
		</validate>
		<length public="1" get="inline" set="null" line="97" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of UTF8 chars of the String.</haxe_doc>
		</length>
		<compare public="1" set="method" line="104" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare two UTF8 strings, character by character.</haxe_doc>
		</compare>
		<sub public="1" get="inline" set="null" line="111" static="1">
			<f a="s:pos:len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>This is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.</haxe_doc>
		</sub>
		<__b><c path="String"/></__b>
		<addChar public="1" get="inline" set="null" line="43">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="50">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String.</haxe_doc>
		</toString>
		<new public="1" set="method" line="36">
			<f a="?size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since not all platforms guarantee that `String` always uses UTF-8 encoding, you
	can use this cross-platform API to perform operations on such strings.</haxe_doc>
		<meta><m n=":deprecated"><e>"haxe.Utf8 is deprecated. Use UnicodeString instead."</e></m></meta>
	</class>
	<class path="haxe.ValueException" params="" file="/home/runner/work/haxe/haxe/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<unwrap set="method" line="35" override="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		This method must return the same value on subsequent calls.
		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="haxe.atomic.AtomicBool" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/atomic/AtomicBool.hx">
		<this><c path="java.util.concurrent.atomic.AtomicBoolean"/></this>
		<impl><class path="haxe.atomic._AtomicBool.AtomicBool_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/atomic/AtomicBool.hx" private="1" module="haxe.atomic.AtomicBool" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="value">
			<x path="Bool"/>
			<x path="haxe.atomic.AtomicBool"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<compareExchange public="1" get="inline" set="null" line="10" static="1"><f a="this:expected:replacement">
	<c path="java.util.concurrent.atomic.AtomicBoolean"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></compareExchange>
	<exchange public="1" get="inline" set="null" line="22" static="1"><f a="this:value">
	<c path="java.util.concurrent.atomic.AtomicBoolean"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></exchange>
	<load public="1" get="inline" set="null" line="26" static="1"><f a="this">
	<c path="java.util.concurrent.atomic.AtomicBoolean"/>
	<x path="Bool"/>
</f></load>
	<store public="1" get="inline" set="null" line="30" static="1"><f a="this:value">
	<c path="java.util.concurrent.atomic.AtomicBoolean"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></store>
</class></impl>
	</abstract>
	<class path="haxe.atomic._AtomicBool.AtomicBool_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/atomic/AtomicBool.hx" private="1" module="haxe.atomic.AtomicBool" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="value">
				<x path="Bool"/>
				<x path="haxe.atomic.AtomicBool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<compareExchange public="1" get="inline" set="null" line="10" static="1"><f a="this:expected:replacement">
	<c path="java.util.concurrent.atomic.AtomicBoolean"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></compareExchange>
		<exchange public="1" get="inline" set="null" line="22" static="1"><f a="this:value">
	<c path="java.util.concurrent.atomic.AtomicBoolean"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></exchange>
		<load public="1" get="inline" set="null" line="26" static="1"><f a="this">
	<c path="java.util.concurrent.atomic.AtomicBoolean"/>
	<x path="Bool"/>
</f></load>
		<store public="1" get="inline" set="null" line="30" static="1"><f a="this:value">
	<c path="java.util.concurrent.atomic.AtomicBoolean"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></store>
	</class>
	<abstract path="haxe.atomic.AtomicInt" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/atomic/AtomicInt.hx">
		<this><c path="java.util.concurrent.atomic.AtomicInteger"/></this>
		<impl><class path="haxe.atomic._AtomicInt.AtomicInt_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/atomic/AtomicInt.hx" private="1" module="haxe.atomic.AtomicInt" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="value">
			<x path="Int"/>
			<x path="haxe.atomic.AtomicInt"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<cas_loop get="inline" set="null" line="10" static="1"><f a="this:value:op">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<f a="a:b">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
</f></cas_loop>
	<add public="1" get="inline" set="null" line="20" static="1"><f a="this:b">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
</f></add>
	<sub public="1" get="inline" set="null" line="24" static="1"><f a="this:b">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
</f></sub>
	<and public="1" get="inline" set="null" line="28" static="1"><f a="this:b">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
</f></and>
	<or public="1" get="inline" set="null" line="32" static="1"><f a="this:b">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
</f></or>
	<xor public="1" get="inline" set="null" line="36" static="1"><f a="this:b">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
</f></xor>
	<compareExchange public="1" get="inline" set="null" line="40" static="1"><f a="this:expected:replacement">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></compareExchange>
	<exchange public="1" get="inline" set="null" line="52" static="1"><f a="this:value">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
</f></exchange>
	<load public="1" get="inline" set="null" line="56" static="1"><f a="this">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
</f></load>
	<store public="1" get="inline" set="null" line="60" static="1"><f a="this:value">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
</f></store>
</class></impl>
	</abstract>
	<class path="haxe.atomic._AtomicInt.AtomicInt_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/atomic/AtomicInt.hx" private="1" module="haxe.atomic.AtomicInt" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="haxe.atomic.AtomicInt"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<cas_loop get="inline" set="null" line="10" static="1"><f a="this:value:op">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<f a="a:b">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
</f></cas_loop>
		<add public="1" get="inline" set="null" line="20" static="1"><f a="this:b">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
</f></add>
		<sub public="1" get="inline" set="null" line="24" static="1"><f a="this:b">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
</f></sub>
		<and public="1" get="inline" set="null" line="28" static="1"><f a="this:b">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
</f></and>
		<or public="1" get="inline" set="null" line="32" static="1"><f a="this:b">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
</f></or>
		<xor public="1" get="inline" set="null" line="36" static="1"><f a="this:b">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
</f></xor>
		<compareExchange public="1" get="inline" set="null" line="40" static="1"><f a="this:expected:replacement">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></compareExchange>
		<exchange public="1" get="inline" set="null" line="52" static="1"><f a="this:value">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
</f></exchange>
		<load public="1" get="inline" set="null" line="56" static="1"><f a="this">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
</f></load>
		<store public="1" get="inline" set="null" line="60" static="1"><f a="this:value">
	<c path="java.util.concurrent.atomic.AtomicInteger"/>
	<x path="Int"/>
	<x path="Int"/>
</f></store>
	</class>
	<abstract path="haxe.atomic.AtomicObject" params="T" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/atomic/AtomicObject.hx">
		<this><c path="java.util.concurrent.atomic.AtomicReference"><c path="haxe.atomic.AtomicObject.T"/></c></this>
		<impl><class path="haxe.atomic._AtomicObject.AtomicObject_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/atomic/AtomicObject.hx" private="1" module="haxe.atomic.AtomicObject" final="1">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="value">
			<c path="haxe.atomic.AtomicObject.T"/>
			<x path="haxe.atomic.AtomicObject"><c path="haxe.atomic.AtomicObject.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<compareExchange public="1" get="inline" set="null" line="10" static="1"><f a="this:expected:replacement">
	<c path="java.util.concurrent.atomic.AtomicReference"><c path="haxe.atomic.AtomicObject.T"/></c>
	<c path="haxe.atomic.AtomicObject.T"/>
	<c path="haxe.atomic.AtomicObject.T"/>
	<c path="haxe.atomic.AtomicObject.T"/>
</f></compareExchange>
	<exchange public="1" get="inline" set="null" line="22" static="1"><f a="this:value">
	<c path="java.util.concurrent.atomic.AtomicReference"><c path="haxe.atomic.AtomicObject.T"/></c>
	<c path="haxe.atomic.AtomicObject.T"/>
	<c path="haxe.atomic.AtomicObject.T"/>
</f></exchange>
	<load public="1" get="inline" set="null" line="26" static="1"><f a="this">
	<c path="java.util.concurrent.atomic.AtomicReference"><c path="haxe.atomic.AtomicObject.T"/></c>
	<c path="haxe.atomic.AtomicObject.T"/>
</f></load>
	<store public="1" get="inline" set="null" line="30" static="1"><f a="this:value">
	<c path="java.util.concurrent.atomic.AtomicReference"><c path="haxe.atomic.AtomicObject.T"/></c>
	<c path="haxe.atomic.AtomicObject.T"/>
	<c path="haxe.atomic.AtomicObject.T"/>
</f></store>
</class></impl>
	</abstract>
	<class path="haxe.atomic._AtomicObject.AtomicObject_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/atomic/AtomicObject.hx" private="1" module="haxe.atomic.AtomicObject" final="1">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="value">
				<c path="haxe.atomic.AtomicObject.T"/>
				<x path="haxe.atomic.AtomicObject"><c path="haxe.atomic.AtomicObject.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<compareExchange public="1" get="inline" set="null" line="10" static="1"><f a="this:expected:replacement">
	<c path="java.util.concurrent.atomic.AtomicReference"><c path="haxe.atomic.AtomicObject.T"/></c>
	<c path="haxe.atomic.AtomicObject.T"/>
	<c path="haxe.atomic.AtomicObject.T"/>
	<c path="haxe.atomic.AtomicObject.T"/>
</f></compareExchange>
		<exchange public="1" get="inline" set="null" line="22" static="1"><f a="this:value">
	<c path="java.util.concurrent.atomic.AtomicReference"><c path="haxe.atomic.AtomicObject.T"/></c>
	<c path="haxe.atomic.AtomicObject.T"/>
	<c path="haxe.atomic.AtomicObject.T"/>
</f></exchange>
		<load public="1" get="inline" set="null" line="26" static="1"><f a="this">
	<c path="java.util.concurrent.atomic.AtomicReference"><c path="haxe.atomic.AtomicObject.T"/></c>
	<c path="haxe.atomic.AtomicObject.T"/>
</f></load>
		<store public="1" get="inline" set="null" line="30" static="1"><f a="this:value">
	<c path="java.util.concurrent.atomic.AtomicReference"><c path="haxe.atomic.AtomicObject.T"/></c>
	<c path="haxe.atomic.AtomicObject.T"/>
	<c path="haxe.atomic.AtomicObject.T"/>
</f></store>
	</class>
	<class path="haxe.crypto.Adler32" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Adler32.hx">
		<read public="1" set="method" line="60" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.crypto.Adler32"/>
</f></read>
		<make public="1" set="method" line="71" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></make>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<get public="1" set="method" line="37"><f a=""><x path="Int"/></f></get>
		<update public="1" set="method" line="41"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="52"><f a="a">
	<c path="haxe.crypto.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Adler32 of the given Bytes.</haxe_doc>
	</class>
	<class path="haxe.io.Bytes" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="531" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance with the given `length`. The values of the
		bytes are not initialized and may not be zero.</haxe_doc>
		</alloc>
		<ofString public="1" set="method" line="560" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `String`, using the
		specified encoding (UTF-8 by default).</haxe_doc>
		</ofString>
		<ofData public="1" set="method" line="628" static="1">
			<f a="b">
				<t path="haxe.io.BytesData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `BytesData`.</haxe_doc>
		</ofData>
		<ofHex public="1" set="method" line="643" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Converts the given hexadecimal `String` to `Bytes`. `s` must be a string of
		even length consisting only of hexadecimal digits. For example:
		`"0FDA14058916052309"`.</haxe_doc>
		</ofHex>
		<fastGet public="1" get="inline" set="null" line="664" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Reads the `pos`-th byte of the given `b` bytes, in the most efficient way
		possible. Behavior when reading outside of the available data is
		unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="45">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the byte at index `pos`.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="64">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given byte `v` at the given position `pos`.</haxe_doc>
		</set>
		<blit public="1" set="method" line="88">
			<f a="pos:src:srcpos:len">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `len` bytes from `src` into this instance.
		@param pos Zero-based location in `this` instance at which to start writing
			bytes.
		@param src Source `Bytes` instance from which to copy bytes.
		@param srcpos Zero-based location at `src` from which bytes will be copied.
		@param len Number of bytes to be copied.</haxe_doc>
		</blit>
		<fill public="1" set="method" line="128">
			<f a="pos:len:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets `len` consecutive bytes starting from index `pos` of `this` instance
		to `value`.</haxe_doc>
		</fill>
		<sub public="1" set="method" line="151">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance that contains a copy of `len` bytes of
		`this` instance, starting at index `pos`.</haxe_doc>
		</sub>
		<compare public="1" set="method" line="186">
			<f a="other">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns `0` if the bytes of `this` instance and the bytes of `other` are
		identical.

		Returns a negative value if the `length` of `this` instance is less than
		the `length` of `other`, or a positive value if the `length` of `this`
		instance is greater than the `length` of `other`.

		In case of equal `length`s, returns a negative value if the first different
		value in `other` is greater than the corresponding value in `this`
		instance; otherwise returns a positive value.</haxe_doc>
		</compare>
		<getDouble public="1" set="method" line="237">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE double-precision value at the given position `pos` (in
		little-endian encoding). Result is unspecified if `pos` is outside the
		bounds.</haxe_doc>
		</getDouble>
		<getFloat public="1" set="method" line="260">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single-precision value at the given position `pos` (in
		little-endian encoding). Result is unspecified if `pos` is outside the
		bounds.</haxe_doc>
		</getFloat>
		<setDouble public="1" set="method" line="283">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given IEEE double-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="310">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given IEEE single-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" get="inline" set="null" line="331">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16-bit unsigned integer at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="343">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 16-bit unsigned integer `v` at the given position `pos`
		(in little-endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" get="inline" set="null" line="356">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32-bit integer at the given position `pos` (in little-endian
		encoding).</haxe_doc>
		</getInt32>
		<getInt64 public="1" get="inline" set="null" line="374">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64-bit integer at the given position `pos` (in little-endian
		encoding).</haxe_doc>
		</getInt64>
		<setInt32 public="1" get="inline" set="null" line="382">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 32-bit integer `v` at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</setInt32>
		<setInt64 public="1" get="inline" set="null" line="397">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 64-bit integer `v` at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="406">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the `len`-bytes long string stored at the given position `pos`,
		interpreted with the given `encoding` (UTF-8 by default).</haxe_doc>
		</getString>
		<readString public="1" get="inline" set="null" line="479">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="486">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a `String` representation of the bytes interpreted as UTF-8.</haxe_doc>
		</toString>
		<toHex public="1" set="method" line="506">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a hexadecimal `String` representation of the bytes of `this`
		instance.</haxe_doc>
		</toHex>
		<getData public="1" get="inline" set="null" line="523">
			<f a=""><t path="haxe.io.BytesData"/></f>
			<haxe_doc>Returns the bytes of `this` instance as `BytesData`.</haxe_doc>
		</getData>
		<new set="method" line="34"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.crypto.Base64" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<URL_CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_&quot;" line="32" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"</e></m></meta>
		</URL_CHARS>
		<URL_BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(URL_CHARS)" line="33" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(URL_CHARS)</e></m></meta>
		</URL_BYTES>
		<encode public="1" set="method" line="35" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</encode>
		<decode public="1" set="method" line="48" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</decode>
		<urlEncode public="1" set="method" line="55" static="1">
			<f a="bytes:?complement" v=":false">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : false }</e></m></meta>
		</urlEncode>
		<urlDecode public="1" set="method" line="68" static="1">
			<f a="str:?complement" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : false }</e></m></meta>
		</urlDecode>
		<haxe_doc>Allows one to encode/decode String and bytes using Base64 encoding.</haxe_doc>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="128" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="133" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="112"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="120"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows one to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
	</class>
	<class path="haxe.crypto.Crc32" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Crc32.hx">
		<make public="1" set="method" line="59" static="1">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Calculates the CRC32 of the given data bytes</haxe_doc>
		</make>
		<crc><x path="Int"/></crc>
		<byte public="1" get="inline" set="null" line="35"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></byte>
		<update public="1" get="inline" set="null" line="42"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<get public="1" get="inline" set="null" line="52"><f a=""><x path="Int"/></f></get>
		<new public="1" get="inline" set="null" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Crc32 of the given Bytes.</haxe_doc>
	</class>
	<enum path="haxe.crypto.HashMethod" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Hmac.hx" module="haxe.crypto.Hmac">
		<MD5/>
		<SHA1/>
		<SHA256/>
		<haxe_doc>Hash methods for Hmac calculation.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.crypto.Hmac" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Hmac.hx">
		<method><e path="haxe.crypto.HashMethod"/></method>
		<blockSize><x path="Int"/></blockSize>
		<length><x path="Int"/></length>
		<doHash get="inline" set="null" line="54"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></doHash>
		<nullPad set="method" line="62"><f a="s:chunkLen">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></nullPad>
		<make public="1" set="method" line="73"><f a="key:msg">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<new public="1" set="method" line="42"><f a="hashMethod">
	<e path="haxe.crypto.HashMethod"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Calculates a Hmac of the given Bytes using a HashMethod.</haxe_doc>
	</class>
	<class path="haxe.crypto.Md5" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/crypto/Md5.hx">
		<encode public="1" set="method" line="31" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<digest get="inline" set="null" line="39" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<t path="haxe.io.BytesData"/>
</f></digest>
		<haxe_doc>Creates a MD5 of a String.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.crypto.Sha1" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/crypto/Sha1.hx">
		<encode public="1" set="method" line="31" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<digest get="inline" set="null" line="39" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<t path="haxe.io.BytesData"/>
</f></digest>
		<haxe_doc>Creates a Sha1 of a String.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.crypto.Sha224" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Sha224.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="126" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<safeAdd get="inline" set="null" line="142" static="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<doEncode set="method" line="50"><f a="str:strlen">
	<c path="String"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<ROTR get="inline" set="null" line="149"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ROTR>
		<SHR get="inline" set="null" line="154"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></SHR>
		<Ch get="inline" set="null" line="159"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj get="inline" set="null" line="164"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0 get="inline" set="null" line="168"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0>
		<Sigma1 get="inline" set="null" line="172"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1>
		<Gamma0 get="inline" set="null" line="176"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0>
		<Gamma1 get="inline" set="null" line="180"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1>
		<hex set="method" line="184"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha224 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha256" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/crypto/Sha256.hx">
		<encode public="1" set="method" line="31" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<digest get="inline" set="null" line="39" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<t path="haxe.io.BytesData"/>
</f></digest>
		<haxe_doc>Creates a Sha256 of a String.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="haxe.display.UnresolvedIdentifierSuggestion" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Diagnostic.UnresolvedIdentifierSuggestion_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
	<UISImport public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.UnresolvedIdentifierSuggestion"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UISImport>
	<UISTypo public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.UnresolvedIdentifierSuggestion"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UISTypo>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Diagnostic.UnresolvedIdentifierSuggestion_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
		<UISImport public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.UnresolvedIdentifierSuggestion"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UISImport>
		<UISTypo public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.UnresolvedIdentifierSuggestion"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UISTypo>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.MissingFieldCauseKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Diagnostic.MissingFieldCauseKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
	<AbstractParent public="1" get="inline" set="null" expr="cast &quot;AbstractParent&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a><parent><t path="haxe.display.JsonTypePathWithParams"/></parent></a></x>
		<meta>
			<m n=":value"><e>cast "AbstractParent"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AbstractParent>
	<ImplementedInterface public="1" get="inline" set="null" expr="cast &quot;ImplementedInterface&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a><parent><t path="haxe.display.JsonTypePathWithParams"/></parent></a></x>
		<meta>
			<m n=":value"><e>cast "ImplementedInterface"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImplementedInterface>
	<PropertyAccessor public="1" get="inline" set="null" expr="cast &quot;PropertyAccessor&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a>
	<property><t path="haxe.display.JsonClassField"/></property>
	<isGetter><x path="Bool"/></isGetter>
</a></x>
		<meta>
			<m n=":value"><e>cast "PropertyAccessor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PropertyAccessor>
	<FieldAccess public="1" get="inline" set="null" expr="cast &quot;FieldAccess&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a/></x>
		<meta>
			<m n=":value"><e>cast "FieldAccess"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FieldAccess>
	<FinalFields public="1" get="inline" set="null" expr="cast &quot;FinalFields&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a><fields><c path="Array"><t path="haxe.display.JsonClassField"/></c></fields></a></x>
		<meta>
			<m n=":value"><e>cast "FinalFields"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FinalFields>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Diagnostic.MissingFieldCauseKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
		<AbstractParent public="1" get="inline" set="null" expr="cast &quot;AbstractParent&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a><parent><t path="haxe.display.JsonTypePathWithParams"/></parent></a></x>
			<meta>
				<m n=":value"><e>cast "AbstractParent"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AbstractParent>
		<ImplementedInterface public="1" get="inline" set="null" expr="cast &quot;ImplementedInterface&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a><parent><t path="haxe.display.JsonTypePathWithParams"/></parent></a></x>
			<meta>
				<m n=":value"><e>cast "ImplementedInterface"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImplementedInterface>
		<PropertyAccessor public="1" get="inline" set="null" expr="cast &quot;PropertyAccessor&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a>
	<property><t path="haxe.display.JsonClassField"/></property>
	<isGetter><x path="Bool"/></isGetter>
</a></x>
			<meta>
				<m n=":value"><e>cast "PropertyAccessor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PropertyAccessor>
		<FieldAccess public="1" get="inline" set="null" expr="cast &quot;FieldAccess&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a/></x>
			<meta>
				<m n=":value"><e>cast "FieldAccess"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FieldAccess>
		<FinalFields public="1" get="inline" set="null" expr="cast &quot;FinalFields&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a><fields><c path="Array"><t path="haxe.display.JsonClassField"/></c></fields></a></x>
			<meta>
				<m n=":value"><e>cast "FinalFields"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FinalFields>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.MissingFieldCause" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<kind><x path="haxe.display.MissingFieldCauseKind"><c path="haxe.display.MissingFieldCause.T"/></x></kind>
	<args><c path="haxe.display.MissingFieldCause.T"/></args>
</a></typedef>
	<typedef path="haxe.display.MissingField" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<unique>
		<x path="Bool"/>
		<haxe_doc>When implementing multiple interfaces, there can be field duplicates among them. This flag is only
		true for the first such occurrence of a field, so that the "Implement all" code action doesn't end
		up implementing the same field multiple times.</haxe_doc>
	</unique>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<field><t path="haxe.display.JsonClassField"/></field>
</a></typedef>
	<typedef path="haxe.display.MissingFieldDiagnostic" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<fields><c path="Array"><t path="haxe.display.MissingField"/></c></fields>
	<cause><t path="haxe.display.MissingFieldCause"><d/></t></cause>
</a></typedef>
	<typedef path="haxe.display.MissingFieldDiagnostics" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<moduleType><t path="haxe.display.JsonModuleType"><d/></t></moduleType>
	<moduleFile><c path="String"/></moduleFile>
	<entries><c path="Array"><t path="haxe.display.MissingFieldDiagnostic"/></c></entries>
</a></typedef>
	<typedef path="haxe.display.ReplaceableCodeDiagnostics" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<range><t path="haxe.display.Range"/></range>
	<newCode>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</newCode>
	<description><c path="String"/></description>
</a></typedef>
	<abstract path="haxe.display.DiagnosticKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Diagnostic.DiagnosticKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
	<DKUnusedImport public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><x path="Void"/></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DKUnusedImport>
	<DKUnresolvedIdentifier public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><c path="Array"><a>
	<name><c path="String"/></name>
	<kind><x path="haxe.display.UnresolvedIdentifierSuggestion"/></kind>
</a></c></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DKUnresolvedIdentifier>
	<DKCompilerError public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DKCompilerError>
	<ReplaceableCode public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><t path="haxe.display.ReplaceableCodeDiagnostics"/></x>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ReplaceableCode>
	<DKParserError public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DKParserError>
	<DeprecationWarning public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DeprecationWarning>
	<InactiveBlock public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><x path="Void"/></x>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</InactiveBlock>
	<MissingFields public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><t path="haxe.display.MissingFieldDiagnostics"/></x>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MissingFields>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Diagnostic.DiagnosticKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
		<DKUnusedImport public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><x path="Void"/></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DKUnusedImport>
		<DKUnresolvedIdentifier public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><c path="Array"><a>
	<name><c path="String"/></name>
	<kind><x path="haxe.display.UnresolvedIdentifierSuggestion"/></kind>
</a></c></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DKUnresolvedIdentifier>
		<DKCompilerError public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DKCompilerError>
		<ReplaceableCode public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><t path="haxe.display.ReplaceableCodeDiagnostics"/></x>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ReplaceableCode>
		<DKParserError public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DKParserError>
		<DeprecationWarning public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DeprecationWarning>
		<InactiveBlock public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><x path="Void"/></x>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</InactiveBlock>
		<MissingFields public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><t path="haxe.display.MissingFieldDiagnostics"/></x>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MissingFields>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.DiagnosticSeverity" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Diagnostic.DiagnosticSeverity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
	<Error public="1" get="inline" set="null" expr="cast 1" line="67" static="1">
		<x path="haxe.display.DiagnosticSeverity"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Error>
	<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.DiagnosticSeverity"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Warning>
	<Information public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.DiagnosticSeverity"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Information>
	<Hint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.DiagnosticSeverity"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Hint>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Diagnostic.DiagnosticSeverity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
		<Error public="1" get="inline" set="null" expr="cast 1" line="67" static="1">
			<x path="haxe.display.DiagnosticSeverity"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Error>
		<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.DiagnosticSeverity"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Warning>
		<Information public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.DiagnosticSeverity"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Information>
		<Hint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.DiagnosticSeverity"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Hint>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.Diagnostic" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx"><a>
	<severity><x path="haxe.display.DiagnosticSeverity"/></severity>
	<relatedInformation><c path="Array"><t path="haxe.display.DiagnosticRelatedInformation"/></c></relatedInformation>
	<range><t path="haxe.display.Range"/></range>
	<kind><x path="haxe.display.DiagnosticKind"><c path="haxe.display.Diagnostic.T"/></x></kind>
	<code><x path="Null"><c path="String"/></x></code>
	<args><c path="haxe.display.Diagnostic.T"/></args>
</a></typedef>
	<typedef path="haxe.display.DiagnosticRelatedInformation" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<message><c path="String"/></message>
	<location><t path="haxe.display.Location"/></location>
	<depth><x path="Int"/></depth>
</a></typedef>
	<class path="haxe.display.DisplayMethods" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<Diagnostics public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;DiagnosticsParams,DiagnosticsResult&gt;(&quot;display/diagnostics&quot;)" line="39" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.DiagnosticsParams"/>
				<t path="haxe.display.DiagnosticsResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<DiagnosticsParams,DiagnosticsResult>("display/diagnostics")]]></e></m></meta>
			<haxe_doc>The request is sent from the client to Haxe to get diagnostics for a specific file, a list of files or the whole project.</haxe_doc>
		</Diagnostics>
		<Completion public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;CompletionParams,CompletionResult&gt;(&quot;display/completion&quot;)" line="45" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.CompletionParams"/>
				<t path="haxe.display.CompletionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<CompletionParams,CompletionResult>("display/completion")]]></e></m></meta>
			<haxe_doc>The completion request is sent from the client to Haxe to request code completion.
		Haxe automatically determines the type of completion to use based on the passed position, see `CompletionResultKind`.</haxe_doc>
		</Completion>
		<CompletionItemResolve public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;CompletionItemResolveParams,CompletionItemResolveResult&gt;(&quot;display/completionItem/resolve&quot;)" line="50" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.CompletionItemResolveParams"/>
				<t path="haxe.display.CompletionItemResolveResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<CompletionItemResolveParams,CompletionItemResolveResult>("display/completionItem/resolve")]]></e></m></meta>
			<haxe_doc>The request is sent from the client to Haxe to resolve additional information for a given completion item.</haxe_doc>
		</CompletionItemResolve>
		<FindReferences public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FindReferencesParams,GotoDefinitionResult&gt;(&quot;display/references&quot;)" line="55" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FindReferencesParams"/>
				<t path="haxe.display.GotoDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FindReferencesParams,GotoDefinitionResult>("display/references")]]></e></m></meta>
			<haxe_doc>The find references request is sent from the client to Haxe to find locations that reference the symbol at a given text document position.</haxe_doc>
		</FindReferences>
		<GotoDefinition public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoDefinitionResult&gt;(&quot;display/definition&quot;)" line="60" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoDefinitionResult>("display/definition")]]></e></m></meta>
			<haxe_doc>The goto definition request is sent from the client to Haxe to resolve the definition location(s) of a symbol at a given text document position.</haxe_doc>
		</GotoDefinition>
		<GotoImplementation public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoDefinitionResult&gt;(&quot;display/implementation&quot;)" line="65" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoDefinitionResult>("display/implementation")]]></e></m></meta>
			<haxe_doc>The goto implementation request is sent from the client to Haxe to resolve the implementation location(s) of a symbol at a given text document position.</haxe_doc>
		</GotoImplementation>
		<GotoTypeDefinition public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoTypeDefinitionResult&gt;(&quot;display/typeDefinition&quot;)" line="70" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoTypeDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoTypeDefinitionResult>("display/typeDefinition")]]></e></m></meta>
			<haxe_doc>The goto type definition request is sent from the client to Haxe to resolve the type definition location(s) of a symbol at a given text document position.</haxe_doc>
		</GotoTypeDefinition>
		<Hover public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,HoverResult&gt;(&quot;display/hover&quot;)" line="75" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.HoverResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,HoverResult>("display/hover")]]></e></m></meta>
			<haxe_doc>The hover request is sent from the client to Haxe to request hover information at a given text document position.</haxe_doc>
		</Hover>
		<DeterminePackage public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,DeterminePackageResult&gt;(&quot;display/package&quot;)" line="80" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.DeterminePackageResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,DeterminePackageResult>("display/package")]]></e></m></meta>
			<haxe_doc>This request is sent from the client to Haxe to determine the package for a given file, based on class paths configuration.</haxe_doc>
		</DeterminePackage>
		<SignatureHelp public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;SignatureHelpParams,SignatureHelpResult&gt;(&quot;display/signatureHelp&quot;)" line="85" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.SignatureHelpParams"/>
				<t path="haxe.display.SignatureHelpResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<SignatureHelpParams,SignatureHelpResult>("display/signatureHelp")]]></e></m></meta>
			<haxe_doc>The signature help request is sent from the client to Haxe to request signature information at a given cursor position.</haxe_doc>
		</SignatureHelp>
		<Metadata public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;MetadataParams,MetadataResult&gt;(&quot;display/metadata&quot;)" line="90" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.MetadataParams"/>
				<t path="haxe.display.MetadataResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<MetadataParams,MetadataResult>("display/metadata")]]></e></m></meta>
			<haxe_doc>The metadata request is sent from the client to Haxe to get a list of all registered metadata and their documentation.</haxe_doc>
		</Metadata>
		<Defines public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;DefinesParams,DefinesResult&gt;(&quot;display/defines&quot;)" line="95" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.DefinesParams"/>
				<t path="haxe.display.DefinesResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<DefinesParams,DefinesResult>("display/defines")]]></e></m></meta>
			<haxe_doc>The defines request is sent from the client to Haxe to get a list of all registered defines and their documentation.</haxe_doc>
		</Defines>
		<haxe_doc>Methods of the JSON-RPC-based `--display` protocol in Haxe 4.
	A lot of the methods are *inspired* by the Language Server Protocol, but there is **no** intention to be directly compatible with it.</haxe_doc>
		<meta><m n=":publicFields"/></meta>
	</class>
	<typedef path="haxe.display.CompletionParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<wasAutoTriggered><x path="Bool"/></wasAutoTriggered>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<meta>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>list of metas to include in responses</haxe_doc>
			</meta>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>Completion</haxe_doc>
	</typedef>
	<typedef path="haxe.display.FieldResolution" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<qualifier>
		<c path="String"/>
		<haxe_doc>The qualifier that has to be inserted to use the field if `!isQualified`.
		Can either be `this` or `super` for instance fields for the type name for `static` fields.</haxe_doc>
	</qualifier>
	<isQualified>
		<x path="Bool"/>
		<haxe_doc>Whether it's valid to use the unqualified name of the field or not.
		This is `false` if the identifier is shadowed.</haxe_doc>
	</isQualified>
</a></typedef>
	<typedef path="haxe.display.DisplayLocal" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<type><t path="haxe.display.JsonType"><c path="haxe.display.DisplayLocal.T"/></t></type>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<origin><x path="haxe.display.LocalOrigin"/></origin>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<isInline><x path="Bool"/></isInline>
	<isFinal><x path="Bool"/></isFinal>
	<id><x path="Int"/></id>
	<extra>
		<x path="Null"><a>
	<params><c path="Array"><t path="haxe.display.JsonTypeParameter"/></c></params>
	<expr><t path="haxe.display.JsonExpr"/></expr>
</a></x>
		<meta><m n=":optional"/></meta>
	</extra>
	<capture><x path="Bool"/></capture>
</a></typedef>
	<abstract path="haxe.display.LocalOrigin" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.LocalOrigin_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<LocalVariable public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LocalVariable>
	<Argument public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Argument>
	<ForVariable public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ForVariable>
	<PatternVariable public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PatternVariable>
	<CatchVariable public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CatchVariable>
	<LocalFunction public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LocalFunction>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.LocalOrigin_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<LocalVariable public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LocalVariable>
		<Argument public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Argument>
		<ForVariable public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ForVariable>
		<PatternVariable public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PatternVariable>
		<CatchVariable public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CatchVariable>
		<LocalFunction public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LocalFunction>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.ClassFieldOriginKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.ClassFieldOriginKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The field is declared on the current type itself.</haxe_doc>
	</Self>
	<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The field is a static field brought into context via a static import
		(`import pack.Module.Type.field`).</haxe_doc>
	</StaticImport>
	<Parent public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The field is declared on a parent type, such as:
		- a super class field that is not overriden
		- a forwarded abstract field</haxe_doc>
	</Parent>
	<StaticExtension public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The field is a static extension method brought
		into context with the `using` keyword.</haxe_doc>
	</StaticExtension>
	<AnonymousStructure public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>This field doesn't belong to any named type, just an anonymous structure.</haxe_doc>
	</AnonymousStructure>
	<BuiltIn public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Special fields built into the compiler, such as:
		- `code` on single-character Strings
		- `bind()` on functions.</haxe_doc>
	</BuiltIn>
	<Unknown public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The origin of this class field is unknown.</haxe_doc>
	</Unknown>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.ClassFieldOriginKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The field is declared on the current type itself.</haxe_doc>
		</Self>
		<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The field is a static field brought into context via a static import
		(`import pack.Module.Type.field`).</haxe_doc>
		</StaticImport>
		<Parent public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The field is declared on a parent type, such as:
		- a super class field that is not overriden
		- a forwarded abstract field</haxe_doc>
		</Parent>
		<StaticExtension public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The field is a static extension method brought
		into context with the `using` keyword.</haxe_doc>
		</StaticExtension>
		<AnonymousStructure public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>This field doesn't belong to any named type, just an anonymous structure.</haxe_doc>
		</AnonymousStructure>
		<BuiltIn public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Special fields built into the compiler, such as:
		- `code` on single-character Strings
		- `bind()` on functions.</haxe_doc>
		</BuiltIn>
		<Unknown public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The origin of this class field is unknown.</haxe_doc>
		</Unknown>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.ClassFieldOrigin" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.ClassFieldOriginKind"><c path="haxe.display.ClassFieldOrigin.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.ClassFieldOrigin.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.ClassFieldOccurrence" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<resolution><t path="haxe.display.FieldResolution"/></resolution>
	<origin>
		<x path="Null"><t path="haxe.display.ClassFieldOrigin"><c path="haxe.display.ClassFieldOccurrence.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<field><t path="haxe.display.JsonClassField"/></field>
</a></typedef>
	<abstract path="haxe.display.EnumFieldOriginKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.EnumFieldOriginKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The enum value is declared on the current type itself.</haxe_doc>
	</Self>
	<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The enum value is brought into context via a static import
		(`import pack.Module.Enum.Value`).</haxe_doc>
	</StaticImport>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.EnumFieldOriginKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The enum value is declared on the current type itself.</haxe_doc>
		</Self>
		<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The enum value is brought into context via a static import
		(`import pack.Module.Enum.Value`).</haxe_doc>
		</StaticImport>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.EnumFieldOrigin" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.EnumFieldOriginKind"><c path="haxe.display.EnumFieldOrigin.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.EnumFieldOrigin.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.EnumFieldOccurrence" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<resolution><t path="haxe.display.FieldResolution"/></resolution>
	<origin>
		<x path="Null"><t path="haxe.display.EnumFieldOrigin"><c path="haxe.display.EnumFieldOccurrence.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<field><t path="haxe.display.JsonEnumField"/></field>
</a></typedef>
	<abstract path="haxe.display.Literal" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.Literal_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Null public="1" get="inline" set="null" expr="cast &quot;null&quot;" line="232" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "null"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Null>
	<True public="1" get="inline" set="null" expr="cast &quot;true&quot;" line="233" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "true"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</True>
	<False public="1" get="inline" set="null" expr="cast &quot;false&quot;" line="234" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "false"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</False>
	<This public="1" get="inline" set="null" expr="cast &quot;this&quot;" line="235" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "this"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</This>
	<Trace public="1" get="inline" set="null" expr="cast &quot;trace&quot;" line="236" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "trace"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Trace>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.Literal_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Null public="1" get="inline" set="null" expr="cast &quot;null&quot;" line="232" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "null"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Null>
		<True public="1" get="inline" set="null" expr="cast &quot;true&quot;" line="233" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "true"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</True>
		<False public="1" get="inline" set="null" expr="cast &quot;false&quot;" line="234" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "false"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</False>
		<This public="1" get="inline" set="null" expr="cast &quot;this&quot;" line="235" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "this"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</This>
		<Trace public="1" get="inline" set="null" expr="cast &quot;trace&quot;" line="236" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "trace"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Trace>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.DisplayModuleTypeKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.DisplayModuleTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Class public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Class>
	<Interface public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Interface>
	<Enum public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Enum>
	<Abstract public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Abstract>
	<EnumAbstract public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EnumAbstract>
	<TypeAlias public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>A `typedef` that is just an alias for another type.</haxe_doc>
	</TypeAlias>
	<Struct public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>A `typedef` that is an alias for an anonymous structure.</haxe_doc>
	</Struct>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.DisplayModuleTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Class public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Class>
		<Interface public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Interface>
		<Enum public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Enum>
		<Abstract public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Abstract>
		<EnumAbstract public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EnumAbstract>
		<TypeAlias public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>A `typedef` that is just an alias for another type.</haxe_doc>
		</TypeAlias>
		<Struct public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>A `typedef` that is an alias for an anonymous structure.</haxe_doc>
		</Struct>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.DisplayModuleType" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<path><t path="haxe.display.JsonTypePath"/></path>
	<params><c path="Array"><t path="haxe.display.DisplayModuleTypeParameter"/></c></params>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><x path="haxe.display.DisplayModuleTypeKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isFinal><x path="Bool"/></isFinal>
	<isExtern><x path="Bool"/></isExtern>
	<isAbstract><x path="Bool"/></isAbstract>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.DisplayModuleTypeParameter" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<constraints><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></constraints>
</a></typedef>
	<typedef path="haxe.display.DisplayLiteral" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><name><c path="String"/></name></a></typedef>
	<abstract path="haxe.display.MetadataTarget" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.MetadataTarget_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Class public="1" get="inline" set="null" expr="cast &quot;TClass&quot;" line="280" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TClass"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Class>
	<ClassField public="1" get="inline" set="null" expr="cast &quot;TClassField&quot;" line="281" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TClassField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ClassField>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="282" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAbstract"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Abstract>
	<AbstractField public="1" get="inline" set="null" expr="cast &quot;TAbstractField&quot;" line="283" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAbstractField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AbstractField>
	<Enum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="284" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TEnum"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Enum>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;TTypedef&quot;" line="285" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TTypedef"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Typedef>
	<AnyField public="1" get="inline" set="null" expr="cast &quot;TAnyField&quot;" line="286" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAnyField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AnyField>
	<Expr public="1" get="inline" set="null" expr="cast &quot;TExpr&quot;" line="287" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TExpr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Expr>
	<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TTypeParameter&quot;" line="288" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TTypeParameter"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeParameter>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.MetadataTarget_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Class public="1" get="inline" set="null" expr="cast &quot;TClass&quot;" line="280" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TClass"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Class>
		<ClassField public="1" get="inline" set="null" expr="cast &quot;TClassField&quot;" line="281" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TClassField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ClassField>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="282" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAbstract"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Abstract>
		<AbstractField public="1" get="inline" set="null" expr="cast &quot;TAbstractField&quot;" line="283" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAbstractField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AbstractField>
		<Enum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="284" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TEnum"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Enum>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;TTypedef&quot;" line="285" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TTypedef"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Typedef>
		<AnyField public="1" get="inline" set="null" expr="cast &quot;TAnyField&quot;" line="286" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAnyField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AnyField>
		<Expr public="1" get="inline" set="null" expr="cast &quot;TExpr&quot;" line="287" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TExpr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Expr>
		<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TTypeParameter&quot;" line="288" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TTypeParameter"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeParameter>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.Platform" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.Platform_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Cross public="1" get="inline" set="null" expr="cast &quot;cross&quot;" line="292" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "cross"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Cross>
	<Js public="1" get="inline" set="null" expr="cast &quot;js&quot;" line="293" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "js"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Js>
	<Lua public="1" get="inline" set="null" expr="cast &quot;lua&quot;" line="294" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "lua"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Lua>
	<Neko public="1" get="inline" set="null" expr="cast &quot;neko&quot;" line="295" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "neko"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Neko>
	<Flash public="1" get="inline" set="null" expr="cast &quot;flash&quot;" line="296" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "flash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Flash>
	<Php public="1" get="inline" set="null" expr="cast &quot;php&quot;" line="297" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "php"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Php>
	<Cpp public="1" get="inline" set="null" expr="cast &quot;cpp&quot;" line="298" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "cpp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Cpp>
	<Java public="1" get="inline" set="null" expr="cast &quot;java&quot;" line="299" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "java"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Java>
	<Python public="1" get="inline" set="null" expr="cast &quot;python&quot;" line="300" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "python"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Python>
	<Hl public="1" get="inline" set="null" expr="cast &quot;hl&quot;" line="301" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "hl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Hl>
	<Eval public="1" get="inline" set="null" expr="cast &quot;eval&quot;" line="302" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "eval"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Eval>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.Platform_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Cross public="1" get="inline" set="null" expr="cast &quot;cross&quot;" line="292" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "cross"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Cross>
		<Js public="1" get="inline" set="null" expr="cast &quot;js&quot;" line="293" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "js"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Js>
		<Lua public="1" get="inline" set="null" expr="cast &quot;lua&quot;" line="294" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "lua"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Lua>
		<Neko public="1" get="inline" set="null" expr="cast &quot;neko&quot;" line="295" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "neko"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Neko>
		<Flash public="1" get="inline" set="null" expr="cast &quot;flash&quot;" line="296" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "flash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Flash>
		<Php public="1" get="inline" set="null" expr="cast &quot;php&quot;" line="297" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "php"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Php>
		<Cpp public="1" get="inline" set="null" expr="cast &quot;cpp&quot;" line="298" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "cpp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Cpp>
		<Java public="1" get="inline" set="null" expr="cast &quot;java&quot;" line="299" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "java"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Java>
		<Python public="1" get="inline" set="null" expr="cast &quot;python&quot;" line="300" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "python"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Python>
		<Hl public="1" get="inline" set="null" expr="cast &quot;hl&quot;" line="301" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "hl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Hl>
		<Eval public="1" get="inline" set="null" expr="cast &quot;eval&quot;" line="302" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "eval"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Eval>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.Metadata" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<targets><c path="Array"><x path="haxe.display.MetadataTarget"/></c></targets>
	<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
	<parameters><c path="Array"><c path="String"/></c></parameters>
	<origin>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<name><c path="String"/></name>
	<links>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
	</links>
	<internal><x path="Bool"/></internal>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.Define" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<value><x path="Null"><c path="String"/></x></value>
	<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
	<parameters><c path="Array"><c path="String"/></c></parameters>
	<origin>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<name><c path="String"/></name>
	<links><c path="Array"><c path="String"/></c></links>
	<doc><t path="haxe.display.JsonDoc"/></doc>
	<deprecated>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</deprecated>
</a></typedef>
	<typedef path="haxe.display.Keyword" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><name><x path="haxe.display.KeywordKind"/></name></a></typedef>
	<abstract path="haxe.display.KeywordKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.KeywordKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Implements public="1" get="inline" set="null" expr="cast &quot;implements&quot;" line="332" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "implements"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Implements>
	<Extends public="1" get="inline" set="null" expr="cast &quot;extends&quot;" line="333" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "extends"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Extends>
	<Function public="1" get="inline" set="null" expr="cast &quot;function&quot;" line="334" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "function"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Function>
	<Var public="1" get="inline" set="null" expr="cast &quot;var&quot;" line="335" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "var"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Var>
	<If public="1" get="inline" set="null" expr="cast &quot;if&quot;" line="336" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "if"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</If>
	<Else public="1" get="inline" set="null" expr="cast &quot;else&quot;" line="337" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "else"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Else>
	<While public="1" get="inline" set="null" expr="cast &quot;while&quot;" line="338" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "while"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</While>
	<Do public="1" get="inline" set="null" expr="cast &quot;do&quot;" line="339" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "do"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Do>
	<For public="1" get="inline" set="null" expr="cast &quot;for&quot;" line="340" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "for"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</For>
	<Break public="1" get="inline" set="null" expr="cast &quot;break&quot;" line="341" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "break"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Break>
	<Return public="1" get="inline" set="null" expr="cast &quot;return&quot;" line="342" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "return"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Return>
	<Continue public="1" get="inline" set="null" expr="cast &quot;continue&quot;" line="343" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "continue"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Continue>
	<Switch public="1" get="inline" set="null" expr="cast &quot;switch&quot;" line="344" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "switch"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Switch>
	<Case public="1" get="inline" set="null" expr="cast &quot;case&quot;" line="345" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "case"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Case>
	<Default public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="346" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "default"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Default>
	<Try public="1" get="inline" set="null" expr="cast &quot;try&quot;" line="347" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "try"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Try>
	<Catch public="1" get="inline" set="null" expr="cast &quot;catch&quot;" line="348" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "catch"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Catch>
	<New public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="349" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "new"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</New>
	<Throw public="1" get="inline" set="null" expr="cast &quot;throw&quot;" line="350" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "throw"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Throw>
	<Untyped public="1" get="inline" set="null" expr="cast &quot;untyped&quot;" line="351" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "untyped"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Untyped>
	<Cast public="1" get="inline" set="null" expr="cast &quot;cast&quot;" line="352" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "cast"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Cast>
	<Macro public="1" get="inline" set="null" expr="cast &quot;macro&quot;" line="353" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "macro"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Macro>
	<Package public="1" get="inline" set="null" expr="cast &quot;package&quot;" line="354" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "package"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Package>
	<Import public="1" get="inline" set="null" expr="cast &quot;import&quot;" line="355" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "import"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Import>
	<Using public="1" get="inline" set="null" expr="cast &quot;using&quot;" line="356" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "using"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Using>
	<Public public="1" get="inline" set="null" expr="cast &quot;public&quot;" line="357" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "public"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Public>
	<Private public="1" get="inline" set="null" expr="cast &quot;private&quot;" line="358" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "private"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Private>
	<Static public="1" get="inline" set="null" expr="cast &quot;static&quot;" line="359" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "static"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Static>
	<Extern public="1" get="inline" set="null" expr="cast &quot;extern&quot;" line="360" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "extern"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Extern>
	<Dynamic public="1" get="inline" set="null" expr="cast &quot;dynamic&quot;" line="361" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "dynamic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Dynamic>
	<Override public="1" get="inline" set="null" expr="cast &quot;override&quot;" line="362" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "override"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Override>
	<Overload public="1" get="inline" set="null" expr="cast &quot;overload&quot;" line="363" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "overload"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Overload>
	<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="364" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "class"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Class>
	<Interface public="1" get="inline" set="null" expr="cast &quot;interface&quot;" line="365" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "interface"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Interface>
	<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="366" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "enum"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Enum>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="367" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "abstract"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Abstract>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="368" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "typedef"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Typedef>
	<Final public="1" get="inline" set="null" expr="cast &quot;final&quot;" line="369" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "final"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Final>
	<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="370" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "inline"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Inline>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.KeywordKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Implements public="1" get="inline" set="null" expr="cast &quot;implements&quot;" line="332" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "implements"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Implements>
		<Extends public="1" get="inline" set="null" expr="cast &quot;extends&quot;" line="333" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "extends"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Extends>
		<Function public="1" get="inline" set="null" expr="cast &quot;function&quot;" line="334" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "function"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Function>
		<Var public="1" get="inline" set="null" expr="cast &quot;var&quot;" line="335" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "var"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Var>
		<If public="1" get="inline" set="null" expr="cast &quot;if&quot;" line="336" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "if"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</If>
		<Else public="1" get="inline" set="null" expr="cast &quot;else&quot;" line="337" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "else"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Else>
		<While public="1" get="inline" set="null" expr="cast &quot;while&quot;" line="338" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "while"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</While>
		<Do public="1" get="inline" set="null" expr="cast &quot;do&quot;" line="339" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "do"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Do>
		<For public="1" get="inline" set="null" expr="cast &quot;for&quot;" line="340" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "for"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</For>
		<Break public="1" get="inline" set="null" expr="cast &quot;break&quot;" line="341" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "break"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Break>
		<Return public="1" get="inline" set="null" expr="cast &quot;return&quot;" line="342" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "return"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Return>
		<Continue public="1" get="inline" set="null" expr="cast &quot;continue&quot;" line="343" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "continue"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Continue>
		<Switch public="1" get="inline" set="null" expr="cast &quot;switch&quot;" line="344" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "switch"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Switch>
		<Case public="1" get="inline" set="null" expr="cast &quot;case&quot;" line="345" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "case"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Case>
		<Default public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="346" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "default"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Default>
		<Try public="1" get="inline" set="null" expr="cast &quot;try&quot;" line="347" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "try"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Try>
		<Catch public="1" get="inline" set="null" expr="cast &quot;catch&quot;" line="348" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "catch"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Catch>
		<New public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="349" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "new"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</New>
		<Throw public="1" get="inline" set="null" expr="cast &quot;throw&quot;" line="350" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "throw"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Throw>
		<Untyped public="1" get="inline" set="null" expr="cast &quot;untyped&quot;" line="351" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "untyped"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Untyped>
		<Cast public="1" get="inline" set="null" expr="cast &quot;cast&quot;" line="352" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "cast"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Cast>
		<Macro public="1" get="inline" set="null" expr="cast &quot;macro&quot;" line="353" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "macro"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Macro>
		<Package public="1" get="inline" set="null" expr="cast &quot;package&quot;" line="354" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "package"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Package>
		<Import public="1" get="inline" set="null" expr="cast &quot;import&quot;" line="355" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "import"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Import>
		<Using public="1" get="inline" set="null" expr="cast &quot;using&quot;" line="356" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "using"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Using>
		<Public public="1" get="inline" set="null" expr="cast &quot;public&quot;" line="357" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "public"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Public>
		<Private public="1" get="inline" set="null" expr="cast &quot;private&quot;" line="358" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "private"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Private>
		<Static public="1" get="inline" set="null" expr="cast &quot;static&quot;" line="359" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "static"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Static>
		<Extern public="1" get="inline" set="null" expr="cast &quot;extern&quot;" line="360" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "extern"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Extern>
		<Dynamic public="1" get="inline" set="null" expr="cast &quot;dynamic&quot;" line="361" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "dynamic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Dynamic>
		<Override public="1" get="inline" set="null" expr="cast &quot;override&quot;" line="362" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "override"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Override>
		<Overload public="1" get="inline" set="null" expr="cast &quot;overload&quot;" line="363" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "overload"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Overload>
		<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="364" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "class"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Class>
		<Interface public="1" get="inline" set="null" expr="cast &quot;interface&quot;" line="365" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "interface"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Interface>
		<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="366" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "enum"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Enum>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="367" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "abstract"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Abstract>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="368" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "typedef"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Typedef>
		<Final public="1" get="inline" set="null" expr="cast &quot;final&quot;" line="369" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "final"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Final>
		<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="370" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "inline"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Inline>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.Package" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><path><t path="haxe.display.JsonPackagePath"/></path></a></typedef>
	<typedef path="haxe.display.Module" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><path><t path="haxe.display.JsonModulePath"/></path></a></typedef>
	<abstract path="haxe.display.DisplayItemKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.DisplayItemKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Local public="1" get="inline" set="null" expr="cast &quot;Local&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLocal"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "Local"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Local>
	<ClassField public="1" get="inline" set="null" expr="cast &quot;ClassField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "ClassField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ClassField>
	<EnumField public="1" get="inline" set="null" expr="cast &quot;EnumField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.EnumFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "EnumField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EnumField>
	<EnumAbstractField public="1" get="inline" set="null" expr="cast &quot;EnumAbstractField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "EnumAbstractField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Only for the enum values in enum abstracts, other fields use `ClassField`.</haxe_doc>
	</EnumAbstractField>
	<Type public="1" get="inline" set="null" expr="cast &quot;Type&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleType"/></x>
		<meta>
			<m n=":value"><e>cast "Type"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Type>
	<Package public="1" get="inline" set="null" expr="cast &quot;Package&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Package"/></x>
		<meta>
			<m n=":value"><e>cast "Package"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Package>
	<Module public="1" get="inline" set="null" expr="cast &quot;Module&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Module"/></x>
		<meta>
			<m n=":value"><e>cast "Module"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Module>
	<Literal public="1" get="inline" set="null" expr="cast &quot;Literal&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLiteral"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "Literal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Literal>
	<Metadata public="1" get="inline" set="null" expr="cast &quot;Metadata&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Metadata"/></x>
		<meta>
			<m n=":value"><e>cast "Metadata"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Metadata>
	<Keyword public="1" get="inline" set="null" expr="cast &quot;Keyword&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Keyword"/></x>
		<meta>
			<m n=":value"><e>cast "Keyword"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Keyword>
	<AnonymousStructure public="1" get="inline" set="null" expr="cast &quot;AnonymousStructure&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast "AnonymousStructure"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AnonymousStructure>
	<Expression public="1" get="inline" set="null" expr="cast &quot;Expression&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonTExpr"/></x>
		<meta>
			<m n=":value"><e>cast "Expression"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Expression>
	<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TypeParameter&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleTypeParameter"/></x>
		<meta>
			<m n=":value"><e>cast "TypeParameter"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeParameter>
	<Define public="1" get="inline" set="null" expr="cast &quot;Define&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Define"/></x>
		<meta>
			<m n=":value"><e>cast "Define"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Define>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.DisplayItemKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Local public="1" get="inline" set="null" expr="cast &quot;Local&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLocal"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "Local"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Local>
		<ClassField public="1" get="inline" set="null" expr="cast &quot;ClassField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "ClassField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ClassField>
		<EnumField public="1" get="inline" set="null" expr="cast &quot;EnumField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.EnumFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "EnumField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EnumField>
		<EnumAbstractField public="1" get="inline" set="null" expr="cast &quot;EnumAbstractField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "EnumAbstractField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Only for the enum values in enum abstracts, other fields use `ClassField`.</haxe_doc>
		</EnumAbstractField>
		<Type public="1" get="inline" set="null" expr="cast &quot;Type&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleType"/></x>
			<meta>
				<m n=":value"><e>cast "Type"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Type>
		<Package public="1" get="inline" set="null" expr="cast &quot;Package&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Package"/></x>
			<meta>
				<m n=":value"><e>cast "Package"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Package>
		<Module public="1" get="inline" set="null" expr="cast &quot;Module&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Module"/></x>
			<meta>
				<m n=":value"><e>cast "Module"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Module>
		<Literal public="1" get="inline" set="null" expr="cast &quot;Literal&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLiteral"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "Literal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Literal>
		<Metadata public="1" get="inline" set="null" expr="cast &quot;Metadata&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Metadata"/></x>
			<meta>
				<m n=":value"><e>cast "Metadata"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Metadata>
		<Keyword public="1" get="inline" set="null" expr="cast &quot;Keyword&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Keyword"/></x>
			<meta>
				<m n=":value"><e>cast "Keyword"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Keyword>
		<AnonymousStructure public="1" get="inline" set="null" expr="cast &quot;AnonymousStructure&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast "AnonymousStructure"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AnonymousStructure>
		<Expression public="1" get="inline" set="null" expr="cast &quot;Expression&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonTExpr"/></x>
			<meta>
				<m n=":value"><e>cast "Expression"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Expression>
		<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TypeParameter&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleTypeParameter"/></x>
			<meta>
				<m n=":value"><e>cast "TypeParameter"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeParameter>
		<Define public="1" get="inline" set="null" expr="cast &quot;Define&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Define"/></x>
			<meta>
				<m n=":value"><e>cast "Define"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Define>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.DisplayItem" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<type>
		<x path="Null"><t path="haxe.display.JsonType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</type>
	<kind><x path="haxe.display.DisplayItemKind"><c path="haxe.display.DisplayItem.T"/></x></kind>
	<index>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</index>
	<args><c path="haxe.display.DisplayItem.T"/></args>
</a></typedef>
	<typedef path="haxe.display.DisplayItemOccurrence" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.DisplayItemOccurrence.T"/></t></item>
</a></typedef>
	<typedef path="haxe.display.FieldCompletionSubject" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<keyValueIterator>
		<x path="Null"><a>
	<value><t path="haxe.display.JsonType"><d/></t></value>
	<key><t path="haxe.display.JsonType"><d/></t></key>
</a></x>
		<meta><m n=":optional"/></meta>
	</keyValueIterator>
	<iterator>
		<x path="Null"><a><type><t path="haxe.display.JsonType"><d/></t></type></a></x>
		<meta><m n=":optional"/></meta>
	</iterator>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.FieldCompletionSubject.T"/></t></item>
</a></typedef>
	<typedef path="haxe.display.ToplevelCompletion" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<expectedTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.ToplevelCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedTypeFollowed>
	<expectedType>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.ToplevelCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedType>
	<compatibleTypes>
		<x path="Null"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></x>
		<meta><m n=":optional"/></meta>
	</compatibleTypes>
</a></typedef>
	<typedef path="haxe.display.StructExtensionCompletion" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><isIntersectionType><x path="Bool"/></isIntersectionType></a></typedef>
	<typedef path="haxe.display.PatternCompletion" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<isOutermostPattern><x path="Bool"/></isOutermostPattern>
	<expectedTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.PatternCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedTypeFollowed>
	<expectedType>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.PatternCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedType>
	<compatibleTypes>
		<x path="Null"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></x>
		<meta><m n=":optional"/></meta>
	</compatibleTypes>
</a></typedef>
	<typedef path="haxe.display.DiagnosticsParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<fileContents>
		<x path="Null"><c path="Array"><a>
	<file><x path="haxe.display.FsPath"/></file>
	<contents>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</contents>
</a></c></x>
		<meta><m n=":optional"/></meta>
	</fileContents>
	<file>
		<x path="Null"><x path="haxe.display.FsPath"/></x>
		<meta><m n=":optional"/></meta>
	</file>
	<contents>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</contents>
</a></typedef>
	<typedef path="haxe.display.DiagnosticsResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="haxe.ds.ReadOnlyArray"><a>
	<file><x path="haxe.display.FsPath"/></file>
	<diagnostics><x path="haxe.ds.ReadOnlyArray"><t path="haxe.display.Diagnostic"><x path="Any"/></t></x></diagnostics>
</a></x></t></typedef>
	<abstract path="haxe.display.CompletionModeKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.CompletionModeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Field public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.FieldCompletionSubject"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Field>
	<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</StructureField>
	<Toplevel public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.ToplevelCompletion"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Toplevel>
	<Metadata public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Metadata>
	<TypeHint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeHint>
	<Extends public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Extends>
	<Implements public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Implements>
	<StructExtension public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.StructExtensionCompletion"/></x>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</StructExtension>
	<Import public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Import>
	<Using public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Using>
	<New public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</New>
	<Pattern public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.PatternCompletion"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Pattern>
	<Override public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Override>
	<TypeRelation public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeRelation>
	<TypeDeclaration public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeDeclaration>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.CompletionModeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Field public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.FieldCompletionSubject"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Field>
		<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</StructureField>
		<Toplevel public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.ToplevelCompletion"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Toplevel>
		<Metadata public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Metadata>
		<TypeHint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeHint>
		<Extends public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Extends>
		<Implements public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Implements>
		<StructExtension public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.StructExtensionCompletion"/></x>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</StructExtension>
		<Import public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Import>
		<Using public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Using>
		<New public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</New>
		<Pattern public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.PatternCompletion"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Pattern>
		<Override public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Override>
		<TypeRelation public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeRelation>
		<TypeDeclaration public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeDeclaration>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.CompletionMode" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionMode.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.CompletionMode.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.CompletionResponse" params="T1:T2" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<replaceRange>
		<x path="Null"><t path="haxe.display.Range"/></x>
		<meta><m n=":optional"/></meta>
	</replaceRange>
	<mode><t path="haxe.display.CompletionMode"><c path="haxe.display.CompletionResponse.T2"/></t></mode>
	<items><c path="Array"><t path="haxe.display.DisplayItem"><c path="haxe.display.CompletionResponse.T1"/></t></c></items>
	<isIncomplete>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</isIncomplete>
	<filterString>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</filterString>
</a></typedef>
	<typedef path="haxe.display.CompletionResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="Null"><t path="haxe.display.CompletionResponse">
	<d/>
	<d/>
</t></x></t></typedef>
	<typedef path="haxe.display.CompletionItemResolveParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a><index><x path="Int"/></index></a>
		<haxe_doc>CompletionItem Resolve</haxe_doc>
	</typedef>
	<typedef path="haxe.display.CompletionItemResolveResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><a><item><t path="haxe.display.DisplayItem"><d/></t></item></a></t></typedef>
	<typedef path="haxe.display.FindReferencesParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<kind>
				<x path="Null"><x path="haxe.display.FindReferencesKind"/></x>
				<meta><m n=":optional"/></meta>
			</kind>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>FindReferences</haxe_doc>
	</typedef>
	<abstract path="haxe.display.FindReferencesKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.FindReferencesKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Direct public="1" get="inline" set="null" expr="cast &quot;direct&quot;" line="508" static="1">
		<x path="haxe.display.FindReferencesKind"/>
		<meta>
			<m n=":value"><e>cast "direct"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Find only direct references to the requested symbol.
		Does not look for references to parent or overriding methods.</haxe_doc>
	</Direct>
	<WithBaseAndDescendants public="1" get="inline" set="null" expr="cast &quot;withBaseAndDescendants&quot;" line="513" static="1">
		<x path="haxe.display.FindReferencesKind"/>
		<meta>
			<m n=":value"><e>cast "withBaseAndDescendants"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Find references to the base field and all the overidding fields in the inheritance chain.</haxe_doc>
	</WithBaseAndDescendants>
	<WithDescendants public="1" get="inline" set="null" expr="cast &quot;withDescendants&quot;" line="519" static="1">
		<x path="haxe.display.FindReferencesKind"/>
		<meta>
			<m n=":value"><e>cast "withDescendants"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Find references to the requested field and references to all
		descendants of the requested field.</haxe_doc>
	</WithDescendants>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.FindReferencesKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Direct public="1" get="inline" set="null" expr="cast &quot;direct&quot;" line="508" static="1">
			<x path="haxe.display.FindReferencesKind"/>
			<meta>
				<m n=":value"><e>cast "direct"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Find only direct references to the requested symbol.
		Does not look for references to parent or overriding methods.</haxe_doc>
		</Direct>
		<WithBaseAndDescendants public="1" get="inline" set="null" expr="cast &quot;withBaseAndDescendants&quot;" line="513" static="1">
			<x path="haxe.display.FindReferencesKind"/>
			<meta>
				<m n=":value"><e>cast "withBaseAndDescendants"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Find references to the base field and all the overidding fields in the inheritance chain.</haxe_doc>
		</WithBaseAndDescendants>
		<WithDescendants public="1" get="inline" set="null" expr="cast &quot;withDescendants&quot;" line="519" static="1">
			<x path="haxe.display.FindReferencesKind"/>
			<meta>
				<m n=":value"><e>cast "withDescendants"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Find references to the requested field and references to all
		descendants of the requested field.</haxe_doc>
		</WithDescendants>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.GotoDefinitionResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Location"/></c></t>
		<haxe_doc>GotoDefinition</haxe_doc>
	</typedef>
	<typedef path="haxe.display.GotoTypeDefinitionResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Location"/></c></t>
		<haxe_doc>GotoTypeDefinition</haxe_doc>
	</typedef>
	<typedef path="haxe.display.HoverResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><x path="Null"><t path="haxe.display.HoverDisplayItemOccurence"><d/></t></x></t>
		<haxe_doc>Hover</haxe_doc>
	</typedef>
	<typedef path="haxe.display.HoverDisplayItemOccurence" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.HoverDisplayItemOccurence.T"/></t></item>
	<expected>
		<x path="Null"><a>
	<type>
		<x path="Null"><t path="haxe.display.JsonType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</type>
	<name>
		<x path="Null"><a>
	<name><c path="String"/></name>
	<kind><x path="haxe.display.HoverExpectedNameKind"/></kind>
	<doc>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</doc>
</a></x>
		<meta><m n=":optional"/></meta>
	</name>
</a></x>
		<meta><m n=":optional"/></meta>
	</expected>
</a></typedef>
	<abstract path="haxe.display.HoverExpectedNameKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.HoverExpectedNameKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<FunctionArgument public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.HoverExpectedNameKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FunctionArgument>
	<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.HoverExpectedNameKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</StructureField>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.HoverExpectedNameKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<FunctionArgument public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.HoverExpectedNameKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FunctionArgument>
		<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.HoverExpectedNameKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</StructureField>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.DeterminePackageResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><c path="String"/></c></t>
		<haxe_doc>DeterminePackage</haxe_doc>
	</typedef>
	<typedef path="haxe.display.SignatureHelpParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<wasAutoTriggered><x path="Bool"/></wasAutoTriggered>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>SignatureHelp</haxe_doc>
	</typedef>
	<typedef path="haxe.display.SignatureInformation" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<ret><t path="haxe.display.JsonType"><d/></t></ret>
	<documentation>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</documentation>
	<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
</a></typedef>
	<abstract path="haxe.display.SignatureItemKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.SignatureItemKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Call public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.SignatureItemKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Call>
	<ArrayAccess public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.SignatureItemKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ArrayAccess>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.SignatureItemKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Call public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.SignatureItemKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Call>
		<ArrayAccess public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.SignatureItemKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ArrayAccess>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.SignatureItem" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<signatures><c path="Array"><t path="haxe.display.SignatureInformation"/></c></signatures>
	<kind><x path="haxe.display.SignatureItemKind"/></kind>
	<activeSignature><x path="Int"/></activeSignature>
	<activeParameter><x path="Int"/></activeParameter>
</a></typedef>
	<typedef path="haxe.display.SignatureHelpResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="Null"><t path="haxe.display.SignatureItem"/></x></t></typedef>
	<typedef path="haxe.display.MetadataParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<user><x path="Bool"/></user>
	<compiler><x path="Bool"/></compiler>
</a></typedef>
	<typedef path="haxe.display.MetadataResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Metadata"/></c></t></typedef>
	<typedef path="haxe.display.DefinesParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<user><x path="Bool"/></user>
	<compiler><x path="Bool"/></compiler>
</a></typedef>
	<typedef path="haxe.display.DefinesResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Define"/></c></t></typedef>
	<typedef path="haxe.display.PositionParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>General types</haxe_doc>
	</typedef>
	<abstract path="haxe.display.FsPath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/FsPath.hx">
		<this><c path="String"/></this>
		<impl><class path="haxe.display._FsPath.FsPath_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/FsPath.hx" private="1" module="haxe.display.FsPath" final="1">
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="path">
			<c path="String"/>
			<x path="haxe.display.FsPath"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<toString public="1" get="inline" set="null" line="30" static="1"><f a="this">
	<c path="String"/>
	<c path="String"/>
</f></toString>
</class></impl>
	</abstract>
	<class path="haxe.display._FsPath.FsPath_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/FsPath.hx" private="1" module="haxe.display.FsPath" final="1">
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="path">
				<c path="String"/>
				<x path="haxe.display.FsPath"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<toString public="1" get="inline" set="null" line="30" static="1"><f a="this">
	<c path="String"/>
	<c path="String"/>
</f></toString>
	</class>
	<typedef path="haxe.display.JsonTodo" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><d/></typedef>
	<typedef path="haxe.display.JsonPos" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.display.JsonDoc" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><x path="Null"><c path="String"/></x></typedef>
	<abstract path="haxe.display.ImportStatus" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.ImportStatus_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<Imported public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>This type is already available with it's unqualified name for one of these reasons:
		  - it's a toplevel type
		  - it's imported with an `import` in the current module
		  - it's imported in an `import.hx` file</haxe_doc>
	</Imported>
	<Unimported public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The type is currently not imported. It can be accessed either
		with its fully qualified name or by inserting an import.</haxe_doc>
	</Unimported>
	<Shadowed public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>A type with the same name is already imported in the module.
		The fully qualified name has to be used to access it.</haxe_doc>
	</Shadowed>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.ImportStatus_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<Imported public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>This type is already available with it's unqualified name for one of these reasons:
		  - it's a toplevel type
		  - it's imported with an `import` in the current module
		  - it's imported in an `import.hx` file</haxe_doc>
		</Imported>
		<Unimported public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The type is currently not imported. It can be accessed either
		with its fully qualified name or by inserting an import.</haxe_doc>
		</Unimported>
		<Shadowed public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>A type with the same name is already imported in the module.
		The fully qualified name has to be used to access it.</haxe_doc>
		</Shadowed>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonPackagePath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a><pack><c path="Array"><c path="String"/></c></pack></a></typedef>
	<typedef path="haxe.display.JsonModulePath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
</a></typedef>
	<typedef path="haxe.display.JsonTypePath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<typeName><c path="String"/></typeName>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
</a></typedef>
	<typedef path="haxe.display.JsonStaticFieldPath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<typeName><c path="String"/></typeName>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
	<fieldName><c path="String"/></fieldName>
</a></typedef>
	<typedef path="haxe.display.JsonTypePathWithParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<path><t path="haxe.display.JsonTypePath"/></path>
	<params><t path="haxe.display.JsonTypes"/></params>
</a></typedef>
	<typedef path="haxe.display.JsonFunctionArgument" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<value>
		<x path="Null"><a><string><c path="String"/></string></a></x>
		<meta><m n=":optional"/></meta>
	</value>
	<t><t path="haxe.display.JsonType"><d/></t></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.display.JsonFunctionSignature" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<ret><t path="haxe.display.JsonType"><d/></t></ret>
	<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
</a></typedef>
	<abstract path="haxe.display.JsonAnonStatusKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonAnonStatusKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<AClosed public="1" get="inline" set="null" expr="cast &quot;AClosed&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AClosed"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AClosed>
	<AOpened public="1" get="inline" set="null" expr="cast &quot;AOpened&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AOpened"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AOpened>
	<AConst public="1" get="inline" set="null" expr="cast &quot;AConst&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AConst"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AConst>
	<AExtend public="1" get="inline" set="null" expr="cast &quot;AExtend&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypes"/></x>
		<meta>
			<m n=":value"><e>cast "AExtend"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AExtend>
	<AClassStatics public="1" get="inline" set="null" expr="cast &quot;AClassStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AClassStatics"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AClassStatics>
	<AEnumStatics public="1" get="inline" set="null" expr="cast &quot;AEnumStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AEnumStatics"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AEnumStatics>
	<AAbstractStatics public="1" get="inline" set="null" expr="cast &quot;AAbstractStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AAbstractStatics"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AAbstractStatics>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonAnonStatusKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<AClosed public="1" get="inline" set="null" expr="cast &quot;AClosed&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AClosed"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AClosed>
		<AOpened public="1" get="inline" set="null" expr="cast &quot;AOpened&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AOpened"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AOpened>
		<AConst public="1" get="inline" set="null" expr="cast &quot;AConst&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AConst"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AConst>
		<AExtend public="1" get="inline" set="null" expr="cast &quot;AExtend&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypes"/></x>
			<meta>
				<m n=":value"><e>cast "AExtend"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AExtend>
		<AClassStatics public="1" get="inline" set="null" expr="cast &quot;AClassStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AClassStatics"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AClassStatics>
		<AEnumStatics public="1" get="inline" set="null" expr="cast &quot;AEnumStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AEnumStatics"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AEnumStatics>
		<AAbstractStatics public="1" get="inline" set="null" expr="cast &quot;AAbstractStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AAbstractStatics"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AAbstractStatics>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonAnonStatus" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatus.T"/></x></kind>
	<args><c path="haxe.display.JsonAnonStatus.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonAnon" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<status><t path="haxe.display.JsonAnonStatus"><d/></t></status>
	<fields><t path="haxe.display.JsonClassFields"/></fields>
</a></typedef>
	<abstract path="haxe.display.JsonTypeKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<TMono public="1" get="inline" set="null" expr="cast &quot;TMono&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonTypeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TMono"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TMono>
	<TInst public="1" get="inline" set="null" expr="cast &quot;TInst&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TInst"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TInst>
	<TEnum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TEnum"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TEnum>
	<TType public="1" get="inline" set="null" expr="cast &quot;TType&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TType"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TType>
	<TAbstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TAbstract"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TAbstract>
	<TFun public="1" get="inline" set="null" expr="cast &quot;TFun&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonFunctionSignature"/></x>
		<meta>
			<m n=":value"><e>cast "TFun"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TFun>
	<TAnonymous public="1" get="inline" set="null" expr="cast &quot;TAnonymous&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast "TAnonymous"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TAnonymous>
	<TDynamic public="1" get="inline" set="null" expr="cast &quot;TDynamic&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><x path="Null"><t path="haxe.display.JsonType"><d/></t></x></x>
		<meta>
			<m n=":value"><e>cast "TDynamic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TDynamic>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<TMono public="1" get="inline" set="null" expr="cast &quot;TMono&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonTypeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TMono"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TMono>
		<TInst public="1" get="inline" set="null" expr="cast &quot;TInst&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TInst"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TInst>
		<TEnum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TEnum"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TEnum>
		<TType public="1" get="inline" set="null" expr="cast &quot;TType&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TType"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TType>
		<TAbstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TAbstract"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TAbstract>
		<TFun public="1" get="inline" set="null" expr="cast &quot;TFun&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonFunctionSignature"/></x>
			<meta>
				<m n=":value"><e>cast "TFun"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TFun>
		<TAnonymous public="1" get="inline" set="null" expr="cast &quot;TAnonymous&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast "TAnonymous"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TAnonymous>
		<TDynamic public="1" get="inline" set="null" expr="cast &quot;TDynamic&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><x path="Null"><t path="haxe.display.JsonType"><d/></t></x></x>
			<meta>
				<m n=":value"><e>cast "TDynamic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TDynamic>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonType" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonType.T"/></x></kind>
	<args><c path="haxe.display.JsonType.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonTypes" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></typedef>
	<typedef path="haxe.display.JsonTypeParameter" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<name><c path="String"/></name>
	<constraints><t path="haxe.display.JsonTypes"/></constraints>
</a></typedef>
	<typedef path="haxe.display.JsonTypeParameters" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonTypeParameter"/></c></typedef>
	<abstract path="haxe.display.JsonBinopKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonBinopKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<OpAdd public="1" get="inline" set="null" expr="cast &quot;OpAdd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAdd"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpAdd>
	<OpMult public="1" get="inline" set="null" expr="cast &quot;OpMult&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpMult"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpMult>
	<OpDiv public="1" get="inline" set="null" expr="cast &quot;OpDiv&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpDiv"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpDiv>
	<OpSub public="1" get="inline" set="null" expr="cast &quot;OpSub&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpSub"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpSub>
	<OpAssign public="1" get="inline" set="null" expr="cast &quot;OpAssign&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAssign"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpAssign>
	<OpEq public="1" get="inline" set="null" expr="cast &quot;OpEq&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpEq"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpEq>
	<OpNotEq public="1" get="inline" set="null" expr="cast &quot;OpNotEq&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpNotEq"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNotEq>
	<OpGt public="1" get="inline" set="null" expr="cast &quot;OpGt&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpGt"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpGt>
	<OpGte public="1" get="inline" set="null" expr="cast &quot;OpGte&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpGte"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpGte>
	<OpLt public="1" get="inline" set="null" expr="cast &quot;OpLt&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpLt"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpLt>
	<OpLte public="1" get="inline" set="null" expr="cast &quot;OpLte&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpLte"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpLte>
	<OpAnd public="1" get="inline" set="null" expr="cast &quot;OpAnd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAnd"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpAnd>
	<OpOr public="1" get="inline" set="null" expr="cast &quot;OpOr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpOr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpOr>
	<OpXor public="1" get="inline" set="null" expr="cast &quot;OpXor&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpXor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpXor>
	<OpBoolAnd public="1" get="inline" set="null" expr="cast &quot;OpBoolAnd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpBoolAnd"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpBoolAnd>
	<OpBoolOr public="1" get="inline" set="null" expr="cast &quot;OpBoolOr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpBoolOr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpBoolOr>
	<OpShl public="1" get="inline" set="null" expr="cast &quot;OpShl&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpShl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpShl>
	<OpShr public="1" get="inline" set="null" expr="cast &quot;OpShr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpShr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpShr>
	<OpUShr public="1" get="inline" set="null" expr="cast &quot;OpUShr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpUShr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpUShr>
	<OpMod public="1" get="inline" set="null" expr="cast &quot;OpMod&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpMod"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpMod>
	<OpAssignOp public="1" get="inline" set="null" expr="cast &quot;OpAssignOp&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><t path="haxe.display.JsonBinop"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "OpAssignOp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpAssignOp>
	<OpInterval public="1" get="inline" set="null" expr="cast &quot;OpInterval&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpInterval"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpInterval>
	<OpArrow public="1" get="inline" set="null" expr="cast &quot;OpArrow&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpArrow"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpArrow>
	<OpIn public="1" get="inline" set="null" expr="cast &quot;OpIn&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpIn"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpIn>
	<OpNullCoal public="1" get="inline" set="null" expr="cast &quot;OpNullCoal&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpNullCoal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNullCoal>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonBinopKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<OpAdd public="1" get="inline" set="null" expr="cast &quot;OpAdd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAdd"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpAdd>
		<OpMult public="1" get="inline" set="null" expr="cast &quot;OpMult&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpMult"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpMult>
		<OpDiv public="1" get="inline" set="null" expr="cast &quot;OpDiv&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpDiv"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpDiv>
		<OpSub public="1" get="inline" set="null" expr="cast &quot;OpSub&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpSub"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpSub>
		<OpAssign public="1" get="inline" set="null" expr="cast &quot;OpAssign&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAssign"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpAssign>
		<OpEq public="1" get="inline" set="null" expr="cast &quot;OpEq&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpEq"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpEq>
		<OpNotEq public="1" get="inline" set="null" expr="cast &quot;OpNotEq&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpNotEq"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNotEq>
		<OpGt public="1" get="inline" set="null" expr="cast &quot;OpGt&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpGt"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpGt>
		<OpGte public="1" get="inline" set="null" expr="cast &quot;OpGte&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpGte"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpGte>
		<OpLt public="1" get="inline" set="null" expr="cast &quot;OpLt&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpLt"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpLt>
		<OpLte public="1" get="inline" set="null" expr="cast &quot;OpLte&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpLte"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpLte>
		<OpAnd public="1" get="inline" set="null" expr="cast &quot;OpAnd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAnd"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpAnd>
		<OpOr public="1" get="inline" set="null" expr="cast &quot;OpOr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpOr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpOr>
		<OpXor public="1" get="inline" set="null" expr="cast &quot;OpXor&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpXor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpXor>
		<OpBoolAnd public="1" get="inline" set="null" expr="cast &quot;OpBoolAnd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpBoolAnd"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpBoolAnd>
		<OpBoolOr public="1" get="inline" set="null" expr="cast &quot;OpBoolOr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpBoolOr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpBoolOr>
		<OpShl public="1" get="inline" set="null" expr="cast &quot;OpShl&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpShl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpShl>
		<OpShr public="1" get="inline" set="null" expr="cast &quot;OpShr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpShr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpShr>
		<OpUShr public="1" get="inline" set="null" expr="cast &quot;OpUShr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpUShr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpUShr>
		<OpMod public="1" get="inline" set="null" expr="cast &quot;OpMod&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpMod"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpMod>
		<OpAssignOp public="1" get="inline" set="null" expr="cast &quot;OpAssignOp&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><t path="haxe.display.JsonBinop"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "OpAssignOp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpAssignOp>
		<OpInterval public="1" get="inline" set="null" expr="cast &quot;OpInterval&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpInterval"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpInterval>
		<OpArrow public="1" get="inline" set="null" expr="cast &quot;OpArrow&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpArrow"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpArrow>
		<OpIn public="1" get="inline" set="null" expr="cast &quot;OpIn&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpIn"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpIn>
		<OpNullCoal public="1" get="inline" set="null" expr="cast &quot;OpNullCoal&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpNullCoal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNullCoal>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonBinop" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinop.T"/></x></kind>
	<args><c path="haxe.display.JsonBinop.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonUnop" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonUnop_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<OpIncrement public="1" get="inline" set="null" expr="cast &quot;OpIncrement&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpIncrement"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpIncrement>
	<OpDecrement public="1" get="inline" set="null" expr="cast &quot;OpDecrement&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpDecrement"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpDecrement>
	<OpNot public="1" get="inline" set="null" expr="cast &quot;OpNot&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNot"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNot>
	<OpNeg public="1" get="inline" set="null" expr="cast &quot;OpNeg&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNeg>
	<OpNegBits public="1" get="inline" set="null" expr="cast &quot;OpNegBits&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNegBits"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNegBits>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonUnop_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<OpIncrement public="1" get="inline" set="null" expr="cast &quot;OpIncrement&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpIncrement"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpIncrement>
		<OpDecrement public="1" get="inline" set="null" expr="cast &quot;OpDecrement&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpDecrement"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpDecrement>
		<OpNot public="1" get="inline" set="null" expr="cast &quot;OpNot&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNot"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNot>
		<OpNeg public="1" get="inline" set="null" expr="cast &quot;OpNeg&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNeg>
		<OpNegBits public="1" get="inline" set="null" expr="cast &quot;OpNegBits&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNegBits"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNegBits>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><t path="haxe.display.JsonTodo"/></typedef>
	<typedef path="haxe.display.JsonMetadataEntry" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<name><c path="String"/></name>
	<args><c path="Array"><t path="haxe.display.JsonExpr"/></c></args>
</a></typedef>
	<typedef path="haxe.display.JsonMetadata" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonMetadataEntry"/></c></typedef>
	<abstract path="haxe.display.JsonTConstantKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTConstantKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<TInt public="1" get="inline" set="null" expr="cast &quot;TInt&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TInt"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TInt>
	<TFloat public="1" get="inline" set="null" expr="cast &quot;TFloat&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TFloat"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TFloat>
	<TString public="1" get="inline" set="null" expr="cast &quot;TString&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TString"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TString>
	<TBool public="1" get="inline" set="null" expr="cast &quot;TBool&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><x path="Bool"/></x>
		<meta>
			<m n=":value"><e>cast "TBool"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TBool>
	<TNull public="1" get="inline" set="null" expr="cast &quot;TNull&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TNull"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TNull>
	<TThis public="1" get="inline" set="null" expr="cast &quot;TThis&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TThis"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TThis>
	<TSuper public="1" get="inline" set="null" expr="cast &quot;TSuper&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TSuper"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TSuper>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonTConstantKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<TInt public="1" get="inline" set="null" expr="cast &quot;TInt&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TInt"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TInt>
		<TFloat public="1" get="inline" set="null" expr="cast &quot;TFloat&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TFloat"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TFloat>
		<TString public="1" get="inline" set="null" expr="cast &quot;TString&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TString"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TString>
		<TBool public="1" get="inline" set="null" expr="cast &quot;TBool&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><x path="Bool"/></x>
			<meta>
				<m n=":value"><e>cast "TBool"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TBool>
		<TNull public="1" get="inline" set="null" expr="cast &quot;TNull&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TNull"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TNull>
		<TThis public="1" get="inline" set="null" expr="cast &quot;TThis&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TThis"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TThis>
		<TSuper public="1" get="inline" set="null" expr="cast &quot;TSuper&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TSuper"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TSuper>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonTConstant" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstant.T"/></x></kind>
	<args><c path="haxe.display.JsonTConstant.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonTExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><t path="haxe.display.JsonTodo"/></typedef>
	<abstract path="haxe.display.JsonVarAccessKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonVarAccessKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<AccNormal public="1" get="inline" set="null" expr="cast &quot;AccNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNormal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccNormal>
	<AccNo public="1" get="inline" set="null" expr="cast &quot;AccNo&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccNo>
	<AccNever public="1" get="inline" set="null" expr="cast &quot;AccNever&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNever"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccNever>
	<AccResolve public="1" get="inline" set="null" expr="cast &quot;AccResolve&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccResolve"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccResolve>
	<AccCall public="1" get="inline" set="null" expr="cast &quot;AccCall&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccCall"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccCall>
	<AccInline public="1" get="inline" set="null" expr="cast &quot;AccInline&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccInline"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccInline>
	<AccRequire public="1" get="inline" set="null" expr="cast &quot;AccRequire&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><a>
	<require><c path="String"/></require>
	<message><x path="Null"><c path="String"/></x></message>
</a></x>
		<meta>
			<m n=":value"><e>cast "AccRequire"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccRequire>
	<AccCtor public="1" get="inline" set="null" expr="cast &quot;AccCtor&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccCtor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccCtor>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonVarAccessKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<AccNormal public="1" get="inline" set="null" expr="cast &quot;AccNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNormal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccNormal>
		<AccNo public="1" get="inline" set="null" expr="cast &quot;AccNo&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccNo>
		<AccNever public="1" get="inline" set="null" expr="cast &quot;AccNever&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNever"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccNever>
		<AccResolve public="1" get="inline" set="null" expr="cast &quot;AccResolve&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccResolve"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccResolve>
		<AccCall public="1" get="inline" set="null" expr="cast &quot;AccCall&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccCall"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccCall>
		<AccInline public="1" get="inline" set="null" expr="cast &quot;AccInline&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccInline"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccInline>
		<AccRequire public="1" get="inline" set="null" expr="cast &quot;AccRequire&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><a>
	<require><c path="String"/></require>
	<message><x path="Null"><c path="String"/></x></message>
</a></x>
			<meta>
				<m n=":value"><e>cast "AccRequire"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccRequire>
		<AccCtor public="1" get="inline" set="null" expr="cast &quot;AccCtor&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccCtor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccCtor>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonVarAccess" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccess.T"/></x></kind>
	<args><c path="haxe.display.JsonVarAccess.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonMethodKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonMethodKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<MethNormal public="1" get="inline" set="null" expr="cast &quot;MethNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethNormal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethNormal>
	<MethInline public="1" get="inline" set="null" expr="cast &quot;MethInline&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethInline"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethInline>
	<MethDynamic public="1" get="inline" set="null" expr="cast &quot;MethDynamic&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethDynamic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethDynamic>
	<MethMacro public="1" get="inline" set="null" expr="cast &quot;MethMacro&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethMacro"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethMacro>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonMethodKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<MethNormal public="1" get="inline" set="null" expr="cast &quot;MethNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethNormal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethNormal>
		<MethInline public="1" get="inline" set="null" expr="cast &quot;MethInline&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethInline"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethInline>
		<MethDynamic public="1" get="inline" set="null" expr="cast &quot;MethDynamic&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethDynamic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethDynamic>
		<MethMacro public="1" get="inline" set="null" expr="cast &quot;MethMacro&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethMacro"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethMacro>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.JsonFieldKindKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonFieldKindKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<FVar public="1" get="inline" set="null" expr="cast &quot;FVar&quot;" line="1" static="1">
		<x path="haxe.display.JsonFieldKindKind"><a>
	<write><t path="haxe.display.JsonVarAccess"><d/></t></write>
	<read><t path="haxe.display.JsonVarAccess"><d/></t></read>
</a></x>
		<meta>
			<m n=":value"><e>cast "FVar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FVar>
	<FMethod public="1" get="inline" set="null" expr="cast &quot;FMethod&quot;" line="1" static="1">
		<x path="haxe.display.JsonFieldKindKind"><x path="haxe.display.JsonMethodKind"/></x>
		<meta>
			<m n=":value"><e>cast "FMethod"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FMethod>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonFieldKindKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<FVar public="1" get="inline" set="null" expr="cast &quot;FVar&quot;" line="1" static="1">
			<x path="haxe.display.JsonFieldKindKind"><a>
	<write><t path="haxe.display.JsonVarAccess"><d/></t></write>
	<read><t path="haxe.display.JsonVarAccess"><d/></t></read>
</a></x>
			<meta>
				<m n=":value"><e>cast "FVar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FVar>
		<FMethod public="1" get="inline" set="null" expr="cast &quot;FMethod&quot;" line="1" static="1">
			<x path="haxe.display.JsonFieldKindKind"><x path="haxe.display.JsonMethodKind"/></x>
			<meta>
				<m n=":value"><e>cast "FMethod"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FMethod>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonFieldKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonFieldKindKind"><c path="haxe.display.JsonFieldKind.T"/></x></kind>
	<args><c path="haxe.display.JsonFieldKind.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonClassFieldScope" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassFieldScope_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<Static public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Static>
	<Member public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Member>
	<Constructor public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Constructor>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonClassFieldScope_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<Static public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Static>
		<Member public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Member>
		<Constructor public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Constructor>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonClassField" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<scope><x path="haxe.display.JsonClassFieldScope"/></scope>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<overloads><t path="haxe.display.JsonClassFields"/></overloads>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><t path="haxe.display.JsonFieldKind"><d/></t></kind>
	<isPublic><x path="Bool"/></isPublic>
	<isFinal><x path="Bool"/></isFinal>
	<isAbstract><x path="Bool"/></isAbstract>
	<expr>
		<x path="Null"><a><string><c path="String"/></string></a></x>
		<meta><m n=":optional"/></meta>
	</expr>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.JsonClassFields" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonClassField"/></c></typedef>
	<typedef path="haxe.display.JsonClassFieldReference" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="String"/></typedef>
	<typedef path="haxe.display.JsonEnumField" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.JsonEnumFields" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonEnumField"/></c></typedef>
	<abstract path="haxe.display.JsonClassKindKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassKindKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<KNormal public="1" get="inline" set="null" expr="cast &quot;KNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KNormal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KNormal>
	<KTypeParameter public="1" get="inline" set="null" expr="cast &quot;KTypeParameter&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypes"/></x>
		<meta>
			<m n=":value"><e>cast "KTypeParameter"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KTypeParameter>
	<KExtension public="1" get="inline" set="null" expr="cast &quot;KExtension&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "KExtension"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KExtension>
	<KExpr public="1" get="inline" set="null" expr="cast &quot;KExpr&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonExpr"/></x>
		<meta>
			<m n=":value"><e>cast "KExpr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KExpr>
	<KGeneric public="1" get="inline" set="null" expr="cast &quot;KGeneric&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KGeneric"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KGeneric>
	<KGenericInstance public="1" get="inline" set="null" expr="cast &quot;KGenericInstance&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "KGenericInstance"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KGenericInstance>
	<KMacroType public="1" get="inline" set="null" expr="cast &quot;KMacroType&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KMacroType"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KMacroType>
	<KAbstractImpl public="1" get="inline" set="null" expr="cast &quot;KAbstractImpl&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "KAbstractImpl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KAbstractImpl>
	<KGenericBuild public="1" get="inline" set="null" expr="cast &quot;KGenericBuild&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KGenericBuild"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KGenericBuild>
	<KModuleFields public="1" get="inline" set="null" expr="cast &quot;KModuleFields&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonModulePath"/></x>
		<meta>
			<m n=":value"><e>cast "KModuleFields"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KModuleFields>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonClassKindKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<KNormal public="1" get="inline" set="null" expr="cast &quot;KNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KNormal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KNormal>
		<KTypeParameter public="1" get="inline" set="null" expr="cast &quot;KTypeParameter&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypes"/></x>
			<meta>
				<m n=":value"><e>cast "KTypeParameter"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KTypeParameter>
		<KExtension public="1" get="inline" set="null" expr="cast &quot;KExtension&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "KExtension"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KExtension>
		<KExpr public="1" get="inline" set="null" expr="cast &quot;KExpr&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonExpr"/></x>
			<meta>
				<m n=":value"><e>cast "KExpr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KExpr>
		<KGeneric public="1" get="inline" set="null" expr="cast &quot;KGeneric&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KGeneric"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KGeneric>
		<KGenericInstance public="1" get="inline" set="null" expr="cast &quot;KGenericInstance&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "KGenericInstance"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KGenericInstance>
		<KMacroType public="1" get="inline" set="null" expr="cast &quot;KMacroType&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KMacroType"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KMacroType>
		<KAbstractImpl public="1" get="inline" set="null" expr="cast &quot;KAbstractImpl&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "KAbstractImpl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KAbstractImpl>
		<KGenericBuild public="1" get="inline" set="null" expr="cast &quot;KGenericBuild&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KGenericBuild"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KGenericBuild>
		<KModuleFields public="1" get="inline" set="null" expr="cast &quot;KModuleFields&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonModulePath"/></x>
			<meta>
				<m n=":value"><e>cast "KModuleFields"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KModuleFields>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonClassKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKind.T"/></x></kind>
	<args><c path="haxe.display.JsonClassKind.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonClass" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<superClass><x path="Null"><t path="haxe.display.JsonTypePathWithParams"/></x></superClass>
	<statics><t path="haxe.display.JsonClassFields"/></statics>
	<overrides><c path="Array"><t path="haxe.display.JsonClassFieldReference"/></c></overrides>
	<kind><t path="haxe.display.JsonClassKind"><d/></t></kind>
	<isInterface><x path="Bool"/></isInterface>
	<isFinal><x path="Bool"/></isFinal>
	<isExtern><x path="Bool"/></isExtern>
	<isAbstract><x path="Bool"/></isAbstract>
	<interfaces><c path="Array"><t path="haxe.display.JsonTypePathWithParams"/></c></interfaces>
	<init><x path="Null"><t path="haxe.display.JsonTExpr"/></x></init>
	<fields><t path="haxe.display.JsonClassFields"/></fields>
	<constructor><x path="Null"><t path="haxe.display.JsonClassField"/></x></constructor>
</a></typedef>
	<typedef path="haxe.display.JsonEnum" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<isExtern><x path="Bool"/></isExtern>
	<constructors><t path="haxe.display.JsonEnumFields"/></constructors>
</a></typedef>
	<typedef path="haxe.display.JsonTypedef" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a><type><t path="haxe.display.JsonType"><d/></t></type></a></typedef>
	<typedef path="haxe.display.JsonAbstractBinop" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<op><t path="haxe.display.JsonBinop"><d/></t></op>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstractUnop" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<postFix><x path="Bool"/></postFix>
	<op><x path="haxe.display.JsonUnop"/></op>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstractCast" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<t><t path="haxe.display.JsonType"><d/></t></t>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstract" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<unops><c path="Array"><t path="haxe.display.JsonAbstractUnop"/></c></unops>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<to><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></to>
	<resolve><x path="Null"><t path="haxe.display.JsonClassFieldReference"/></x></resolve>
	<impl><x path="Null"><t path="haxe.display.JsonClass"/></x></impl>
	<from><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></from>
	<binops><c path="Array"><t path="haxe.display.JsonAbstractBinop"/></c></binops>
	<array><t path="haxe.display.JsonClassFields"/></array>
</a></typedef>
	<abstract path="haxe.display.JsonModuleTypeKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonModuleTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="357" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonClass"/></x>
		<meta>
			<m n=":value"><e>cast "class"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Class>
	<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="358" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonEnum"/></x>
		<meta>
			<m n=":value"><e>cast "enum"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Enum>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="359" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonTypedef"/></x>
		<meta>
			<m n=":value"><e>cast "typedef"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Typedef>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="360" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonAbstract"/></x>
		<meta>
			<m n=":value"><e>cast "abstract"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Abstract>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonModuleTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="357" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonClass"/></x>
			<meta>
				<m n=":value"><e>cast "class"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Class>
		<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="358" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonEnum"/></x>
			<meta>
				<m n=":value"><e>cast "enum"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Enum>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="359" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonTypedef"/></x>
			<meta>
				<m n=":value"><e>cast "typedef"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Typedef>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="360" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonAbstract"/></x>
			<meta>
				<m n=":value"><e>cast "abstract"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Abstract>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonModuleType" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<moduleName><c path="String"/></moduleName>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><x path="haxe.display.JsonModuleTypeKind"><c path="haxe.display.JsonModuleType.T"/></x></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<doc><t path="haxe.display.JsonDoc"/></doc>
	<args><c path="haxe.display.JsonModuleType.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonModuleTypes" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx"><c path="Array"><t path="haxe.display.JsonModuleType"><d/></t></c></typedef>
	<typedef path="haxe.display.Position" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Position.hx">
		<a>
			<line>
				<x path="Int"/>
				<haxe_doc>Line position in a document (1-based).</haxe_doc>
			</line>
			<character>
				<x path="Int"/>
				<haxe_doc>Character offset on a line in a document (1-based).</haxe_doc>
			</character>
		</a>
		<haxe_doc>Position in a text document expressed as 1-based line and character offset.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.Range" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<start>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's start position</haxe_doc>
			</start>
			<end>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's end position</haxe_doc>
			</end>
		</a>
		<haxe_doc>A range in a text document expressed as (1-based) start and end positions.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.Location" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<range><t path="haxe.display.Range"/></range>
			<file><x path="haxe.display.FsPath"/></file>
		</a>
		<haxe_doc>Represents a location inside a resource, such as a line inside a text file.</haxe_doc>
	</typedef>
	<class path="haxe.display.Methods" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<Initialize public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;InitializeParams,InitializeResult&gt;(&quot;initialize&quot;)" line="32" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.InitializeParams"/>
				<t path="haxe.display.InitializeResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<InitializeParams,InitializeResult>("initialize")]]></e></m></meta>
			<haxe_doc>The initialize request is sent from the client to Haxe to determine the capabilities.</haxe_doc>
		</Initialize>
		<ResetCache public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ResetCacheParams,ResetCacheResult&gt;(&quot;server/resetCache&quot;)" line="34" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ResetCacheParams"/>
				<t path="haxe.display.ResetCacheResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ResetCacheParams,ResetCacheResult>("server/resetCache")]]></e></m></meta>
		</ResetCache>
		<meta><m n=":publicFields"/></meta>
	</class>
	<typedef path="haxe.display.ResetCacheParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a/></typedef>
	<typedef path="haxe.display.ResetCacheResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a><success final="1" set="null"><x path="Bool"/></success></a></typedef>
	<typedef path="haxe.display.InitializeParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<supportsResolve final="1" set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</supportsResolve>
	<maxCompletionItems final="1" set="null">
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of completion items to return</haxe_doc>
	</maxCompletionItems>
	<exclude final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>dot paths to exclude from readClassPaths / toplevel completion</haxe_doc>
	</exclude>
</a></typedef>
	<typedef path="haxe.display.Version" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<a>
			<pre final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</pre>
			<patch final="1" set="null"><x path="Int"/></patch>
			<minor final="1" set="null"><x path="Int"/></minor>
			<major final="1" set="null"><x path="Int"/></major>
			<build final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</build>
		</a>
		<haxe_doc>Represents a semantic version, see https://semver.org/.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.InitializeResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><t path="haxe.display.Response"><a>
	<protocolVersion final="1" set="null"><t path="haxe.display.Version"/></protocolVersion>
	<methods final="1" set="null"><c path="Array"><c path="String"/></c></methods>
	<haxeVersion final="1" set="null"><t path="haxe.display.Version"/></haxeVersion>
</a></t></typedef>
	<typedef path="haxe.display.Timer" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<time final="1" set="null"><x path="Float"/></time>
	<percentTotal final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</percentTotal>
	<percentParent final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</percentParent>
	<path final="1" set="null">
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</path>
	<name final="1" set="null"><c path="String"/></name>
	<info final="1" set="null">
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</info>
	<children final="1" set="null">
		<x path="Null"><c path="Array"><t path="haxe.display.Timer"/></c></x>
		<meta><m n=":optional"/></meta>
	</children>
	<calls final="1" set="null">
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</calls>
</a></typedef>
	<typedef path="haxe.display.Response" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<timestamp final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>UNIX timestamp at the moment the data was sent.</haxe_doc>
	</timestamp>
	<timers final="1" set="null">
		<x path="Null"><t path="haxe.display.Timer"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Only sent if `--times` is enabled.</haxe_doc>
	</timers>
	<result final="1" set="null">
		<x path="Null"><c path="haxe.display.Response.T"/></x>
		<meta><m n=":optional"/></meta>
	</result>
</a></typedef>
	<typedef path="haxe.display.FileParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a><file><x path="haxe.display.FsPath"/></file></a></typedef>
	<abstract path="haxe.display.HaxeRequestMethod" params="TParams:TResponse" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<impl><class path="haxe.display._Protocol.HaxeRequestMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="98" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeRequestMethod">
			<c path="haxe.display.HaxeRequestMethod.TParams"/>
			<c path="haxe.display.HaxeRequestMethod.TResponse"/>
		</x>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeRequestMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="98" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeRequestMethod">
			<c path="haxe.display.HaxeRequestMethod.TParams"/>
			<c path="haxe.display.HaxeRequestMethod.TResponse"/>
		</x>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class>
	<abstract path="haxe.display.HaxeNotificationMethod" params="TParams" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<impl><class path="haxe.display._Protocol.HaxeNotificationMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="103" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeNotificationMethod"><c path="haxe.display.HaxeNotificationMethod.TParams"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeNotificationMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="103" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeNotificationMethod"><c path="haxe.display.HaxeNotificationMethod.TParams"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class>
	<typedef path="haxe.display.HaxeResponseErrorData" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><c path="Array"><a>
	<severity><x path="haxe.display.HaxeResponseErrorSeverity"/></severity>
	<message><c path="String"/></message>
	<location>
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</location>
</a></c></typedef>
	<abstract path="haxe.display.HaxeResponseErrorSeverity" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Protocol.HaxeResponseErrorSeverity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" extern="1" final="1">
	<Error public="1" get="inline" set="null" expr="cast 1" line="114" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Error>
	<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Warning>
	<Hint public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Hint>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeResponseErrorSeverity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" extern="1" final="1">
		<Error public="1" get="inline" set="null" expr="cast 1" line="114" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Error>
		<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Warning>
		<Hint public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Hint>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="haxe.display.NoData" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><meta><m n=":flatEnum"/></meta></enum>
	<class path="haxe.display.ServerMethods" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server">
		<ReadClassPaths public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;{ var ?files : Int}&gt;&gt;(&quot;server/readClassPaths&quot;)" line="34" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><a><files>
	<x path="Null"><x path="Int"/></x>
	<meta><m n=":optional"/></meta>
</files></a></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<{ var ?files : Int}>>("server/readClassPaths")]]></e></m></meta>
			<haxe_doc>This request is sent from the client to Haxe to explore the class paths. This effectively creates a cache for toplevel completion.</haxe_doc>
		</ReadClassPaths>
		<Configure public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ConfigureParams,Response&lt;NoData&gt;&gt;(&quot;server/configure&quot;)" line="36" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ConfigureParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ConfigureParams,Response<NoData>>("server/configure")]]></e></m></meta>
		</Configure>
		<Invalidate public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,Response&lt;NoData&gt;&gt;(&quot;server/invalidate&quot;)" line="37" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,Response<NoData>>("server/invalidate")]]></e></m></meta>
		</Invalidate>
		<Contexts public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;Array&lt;HaxeServerContext&gt;&gt;&gt;(&quot;server/contexts&quot;)" line="38" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.HaxeServerContext"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<Array<HaxeServerContext>>>("server/contexts")]]></e></m></meta>
		</Contexts>
		<Memory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;HaxeMemoryResult&gt;&gt;(&quot;server/memory&quot;)" line="39" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<HaxeMemoryResult>>("server/memory")]]></e></m></meta>
		</Memory>
		<ContextMemory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;HaxeContextMemoryResult&gt;&gt;(&quot;server/memory/context&quot;)" line="40" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeContextMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<HaxeContextMemoryResult>>("server/memory/context")]]></e></m></meta>
		</ContextMemory>
		<ModuleMemory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ModuleParams,Response&lt;HaxeModuleMemoryResult&gt;&gt;(&quot;server/memory/module&quot;)" line="41" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ModuleParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeModuleMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ModuleParams,Response<HaxeModuleMemoryResult>>("server/memory/module")]]></e></m></meta>
		</ModuleMemory>
		<Modules public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;Array&lt;String&gt;&gt;&gt;(&quot;server/modules&quot;)" line="42" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><c path="Array"><c path="String"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<Array<String>>>("server/modules")]]></e></m></meta>
		</Modules>
		<Module public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ModuleParams,Response&lt;JsonModule&gt;&gt;(&quot;server/module&quot;)" line="43" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ModuleParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.JsonModule"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ModuleParams,Response<JsonModule>>("server/module")]]></e></m></meta>
		</Module>
		<Type public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;TypeParams,Response&lt;JsonModuleType&lt;Any&gt;&gt;&gt;(&quot;server/type&quot;)" line="44" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.TypeParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.JsonModuleType"><x path="Any"/></t></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<TypeParams,Response<JsonModuleType<Any>>>("server/type")]]></e></m></meta>
		</Type>
		<Files public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;Array&lt;JsonServerFile&gt;&gt;&gt;(&quot;server/files&quot;)" line="45" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.JsonServerFile"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<Array<JsonServerFile>>>("server/files")]]></e></m></meta>
		</Files>
		<ModuleCreated public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,Response&lt;NoData&gt;&gt;(&quot;server/moduleCreated&quot;)" line="46" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,Response<NoData>>("server/moduleCreated")]]></e></m></meta>
		</ModuleCreated>
		<meta><m n=":publicFields"/></meta>
	</class>
	<typedef path="haxe.display.ConfigurePrintParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<unchangedContent>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</unchangedContent>
	<uncaughtError>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</uncaughtError>
	<stats>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</stats>
	<socketMessage>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</socketMessage>
	<skippingDep>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</skippingDep>
	<signature>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</signature>
	<reusing>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</reusing>
	<removedDirectory>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</removedDirectory>
	<parsed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</parsed>
	<notCached>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</notCached>
	<newContext>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</newContext>
	<modulePathChanged>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modulePathChanged>
	<message>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</message>
	<foundDirectories>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</foundDirectories>
	<displayPosition>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</displayPosition>
	<defines>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</defines>
	<completion>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</completion>
	<changedDirectories>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</changedDirectories>
	<cachedModules>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cachedModules>
	<arguments>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</arguments>
	<addedDirectory>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</addedDirectory>
</a></typedef>
	<typedef path="haxe.display.ConfigureParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<print final="1" set="null">
		<x path="Null"><t path="haxe.display.ConfigurePrintParams"/></x>
		<meta><m n=":optional"/></meta>
	</print>
	<noModuleChecks final="1" set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</noModuleChecks>
	<legacyCompletion final="1" set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</legacyCompletion>
</a></typedef>
	<typedef path="haxe.display.HaxeServerContext" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<signature final="1" set="null"><c path="String"/></signature>
	<platform final="1" set="null"><c path="String"/></platform>
	<index final="1" set="null"><x path="Int"/></index>
	<desc final="1" set="null"><c path="String"/></desc>
	<defines final="1" set="null"><c path="Array"><a>
	<value><c path="String"/></value>
	<key><c path="String"/></key>
</a></c></defines>
	<classPaths final="1" set="null"><c path="Array"><c path="String"/></c></classPaths>
</a></typedef>
	<typedef path="haxe.display.ModuleId" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<sign final="1" set="null"><c path="String"/></sign>
	<path final="1" set="null"><c path="String"/></path>
</a></typedef>
	<typedef path="haxe.display.JsonModule" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<types final="1" set="null"><c path="Array"><t path="haxe.display.JsonTypePath"/></c></types>
	<sign final="1" set="null"><c path="String"/></sign>
	<path final="1" set="null"><t path="haxe.display.JsonModulePath"/></path>
	<id final="1" set="null"><x path="Int"/></id>
	<file final="1" set="null"><c path="String"/></file>
	<dependents final="1" set="null"><c path="Array"><t path="haxe.display.ModuleId"/></c></dependents>
	<dependencies final="1" set="null"><c path="Array"><t path="haxe.display.ModuleId"/></c></dependencies>
	<cacheState final="1" set="null"><x path="Null"><c path="String"/></x></cacheState>
</a></typedef>
	<typedef path="haxe.display.JsonServerFile" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<time final="1" set="null"><x path="Float"/></time>
	<pack final="1" set="null"><c path="String"/></pack>
	<moduleName final="1" set="null"><x path="Null"><c path="String"/></x></moduleName>
	<file final="1" set="null"><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.display.AdditionalSize" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<name final="1" set="null"><c path="String"/></name>
	<child final="1" set="null"><c path="Array"><t path="haxe.display.AdditionalSize"/></c></child>
</a></typedef>
	<typedef path="haxe.display.HaxeMemoryResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<memory final="1" set="null"><a>
	<totalCache final="1" set="null"><x path="Int"/></totalCache>
	<nativeLibCache final="1" set="null"><x path="Int"/></nativeLibCache>
	<haxelibCache final="1" set="null"><x path="Int"/></haxelibCache>
	<directoryCache final="1" set="null"><x path="Int"/></directoryCache>
	<contextCache final="1" set="null"><x path="Int"/></contextCache>
	<additionalSizes final="1" set="null">
		<x path="Null"><c path="Array"><t path="haxe.display.AdditionalSize"/></c></x>
		<meta><m n=":optional"/></meta>
	</additionalSizes>
</a></memory>
	<contexts final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<context final="1" set="null"><t path="haxe.display.HaxeServerContext"/></context>
</a></c></contexts>
</a></typedef>
	<typedef path="haxe.display.HaxeContextMemoryResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<syntaxCache final="1" set="null"><a><size final="1" set="null"><x path="Int"/></size></a></syntaxCache>
	<moduleCache final="1" set="null"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<list final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<path final="1" set="null"><c path="String"/></path>
	<hasTypes final="1" set="null"><x path="Bool"/></hasTypes>
</a></c></list>
</a></moduleCache>
	<leaks final="1" set="null">
		<x path="Null"><c path="Array"><a>
	<path final="1" set="null"><c path="String"/></path>
	<leaks final="1" set="null"><c path="Array"><a><path final="1" set="null"><c path="String"/></path></a></c></leaks>
</a></c></x>
		<meta><m n=":optional"/></meta>
	</leaks>
	<binaryCache final="1" set="null"><a><size final="1" set="null"><x path="Int"/></size></a></binaryCache>
</a></typedef>
	<typedef path="haxe.display.HaxeModuleMemoryResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<types final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<pos final="1" set="null">
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</pos>
	<name final="1" set="null"><c path="String"/></name>
	<fields final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<pos final="1" set="null">
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</pos>
	<name final="1" set="null"><c path="String"/></name>
</a></c></fields>
</a></c></types>
	<moduleExtra final="1" set="null"><x path="Int"/></moduleExtra>
</a></typedef>
	<typedef path="haxe.display.ContextParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a><signature final="1" set="null"><c path="String"/></signature></a></typedef>
	<typedef path="haxe.display.ModuleParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<signature final="1" set="null"><c path="String"/></signature>
	<path final="1" set="null"><c path="String"/></path>
</a></typedef>
	<typedef path="haxe.display.TypeParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<typeName final="1" set="null"><c path="String"/></typeName>
	<signature final="1" set="null"><c path="String"/></signature>
	<modulePath final="1" set="null"><c path="String"/></modulePath>
</a></typedef>
	<class path="haxe.ds.ArraySort" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/ArraySort.hx">
		<sort public="1" params="T" set="method" line="42" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array `a` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies Array `a` in place.

		This operation is stable: The order of equal elements is preserved.

		If `a` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="46" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="68" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="94" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="rotate.T"/>
		<c path="rotate.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="115" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="124" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="139" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="153" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<compare params="T" get="inline" set="null" line="159" static="1"><f a="a:cmp:i:j">
	<c path="Array"><c path="compare.T"/></c>
	<f a=":">
		<c path="compare.T"/>
		<c path="compare.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></compare>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its `sort`
	method. It should be used instead of `Array.sort` in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/BalancedTree.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.BalancedTree.K"/>
			<c path="haxe.ds.BalancedTree.V"/>
		</implements>
		<iteratorLoop params="K:V" set="method" line="172" static="1"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="iteratorLoop.K"/>
		<c path="iteratorLoop.V"/>
	</c>
	<c path="Array"><c path="iteratorLoop.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Null"><c path="haxe.ds.BalancedTree.V"/></x>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="85">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="101">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="120">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="129">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<keys public="1" set="method" line="138">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<copy public="1" set="method" line="144"><f a=""><c path="haxe.ds.BalancedTree">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></f></copy>
		<setLoop set="method" line="150"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="163"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<keysLoop set="method" line="180"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="188"><f a="t1:t2">
	<x path="Null"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></x>
	<x path="Null"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></x>
	<x path="Null"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></x>
</f></merge>
		<minBinding set="method" line="197"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="201"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="205"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="225"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="229"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method" line="236">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all keys from `this` BalancedTree.</haxe_doc>
		</clear>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="264"><f a=""><x path="Int"/></f></get_height>
		<toString public="1" set="method" line="266"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
	</class>
	<enum path="haxe.ds.Either" params="L:R" file="/home/runner/work/haxe/haxe/std/haxe/ds/Either.hx">
		<Left a="v"><c path="haxe.ds.Either.L"/></Left>
		<Right a="v"><c path="haxe.ds.Either.R"/></Right>
		<haxe_doc>Either represents values which are either of type `L` (Left) or type `R`
	(Right).</haxe_doc>
	</enum>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="32" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="57"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="69"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<copy public="1" set="method" line="79" override="1"><f a=""><c path="haxe.ds.EnumValueMap">
	<c path="haxe.ds.EnumValueMap.K"/>
	<c path="haxe.ds.EnumValueMap.V"/>
</c></f></copy>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<new public="1" set="method" line="37"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>A cell of `haxe.ds.GenericStack`.

	@see https://haxe.org/manual/std-GenericStack.html</haxe_doc>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<add public="1" get="inline" set="null" line="112">
			<f a="item">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes element `item` onto the stack.</haxe_doc>
		</add>
		<first public="1" get="inline" set="null" line="121">
			<f a=""><x path="Null"><c path="haxe.ds.GenericStack.T"/></x></f>
			<haxe_doc>Returns the topmost stack element without removing it.

		If the stack is empty, null is returned.</haxe_doc>
		</first>
		<pop public="1" get="inline" set="null" line="130">
			<f a=""><x path="Null"><c path="haxe.ds.GenericStack.T"/></x></f>
			<haxe_doc>Returns the topmost stack element and removes it.

		If the stack is empty, null is returned.</haxe_doc>
		</pop>
		<isEmpty public="1" get="inline" set="null" line="143">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if the stack is empty.</haxe_doc>
		</isEmpty>
		<remove public="1" set="method" line="156">
			<f a="v">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first element which is equal to `v` according to the `==`
		operator.

		This method traverses the stack until it finds a matching element and
		unlinks it, returning true.

		If no matching element is found, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="185">
			<f a=""><t path="Iterator"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns an iterator over the elements of `this` GenericStack.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="203">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` GenericStack.</haxe_doc>
		</toString>
		<new public="1" set="method" line="107">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A stack of elements.

	This class is generic, which means one type is generated for each type
	parameter T on static targets. For example:

	- `new GenericStack<Int>()` generates `GenericStack_Int`
	- `new GenericStack<String>()` generates `GenericStack_String`

	The generated name is an implementation detail and should not be relied
	upon.

	@see https://haxe.org/manual/std-GenericStack.html]]></haxe_doc>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1">
	<_new public="1" get="inline" set="null" line="38" static="1">
		<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new HashMap.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="45" static="1">
		<f a="this:k:v">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>See `Map.set`</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="53" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Null"><c path="haxe.ds.HashMap.V"/></x>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>See `Map.get`</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="60" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>See `Map.exists`</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="67" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>See `Map.remove`</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="75" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<haxe_doc>See `Map.keys`</haxe_doc>
	</keys>
	<copy public="1" set="method" line="82" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<x path="haxe.ds.HashMap">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</x>
		</f>
		<haxe_doc>See `Map.copy`</haxe_doc>
	</copy>
	<iterator public="1" get="inline" set="null" line="92" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<haxe_doc>See `Map.iterator`</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="99" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.iterators.HashMapKeyValueIterator">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
		</f>
		<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
	</keyValueIterator>
	<clear public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<x path="Void"/>
		</f>
		<haxe_doc>See `Map.clear`</haxe_doc>
	</clear>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1">
		<_new public="1" get="inline" set="null" line="38" static="1">
			<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new HashMap.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="45" static="1">
			<f a="this:k:v">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="53" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Null"><c path="haxe.ds.HashMap.V"/></x>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="60" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="67" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="75" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<copy public="1" set="method" line="82" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<x path="haxe.ds.HashMap">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</x>
			</f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="92" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="99" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.iterators.HashMapKeyValueIterator">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
			</f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<clear public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
	</class>
	<class path="haxe.ds._HashMap.HashMapData" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<keys public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.K"/></c></keys>
		<values public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.V"/></c></values>
		<new public="1" get="inline" set="null" line="116"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="/home/runner/work/haxe/haxe/std/jvm/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<hashMap><c path="java.util.HashMap">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</c></hashMap>
		<set public="1" set="method" line="39">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="43">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="47">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="51">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="57">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`

		(java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<keyValueIterator public="1" get="inline" set="null" line="61">
			<f a=""><t path="KeyValueIterator">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<iterator public="1" get="inline" set="null" line="65">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<copy public="1" set="method" line="69">
			<f a=""><c path="haxe.ds.IntMap"><c path="haxe.ds.IntMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="73">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="88">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="30">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
			<overloads><new set="method" line="35">
	<f a="hashMap">
		<c path="java.util.HashMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds.List" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/List.hx">
		<h><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></h>
		<q><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="53">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="68">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="81">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="90">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="99">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="113">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="137">
			<f a="v">
				<c path="haxe.ds.List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" get="inline" set="null" line="160">
			<f a=""><c path="haxe.ds._List.ListIterator"><c path="haxe.ds.List.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="167">
			<f a=""><c path="haxe.ds._List.ListKeyValueIterator"><c path="haxe.ds.List.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the List indices and values.</haxe_doc>
		</keyValueIterator>
		<toString public="1" set="method" line="177">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="198">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="217">
			<f a="f">
				<f a="">
					<c path="haxe.ds.List.T"/>
					<x path="Bool"/>
				</f>
				<c path="haxe.ds.List"><c path="haxe.ds.List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="233">
			<f a="f">
				<f a="">
					<c path="haxe.ds.List.T"/>
					<c path="map.X"/>
				</f>
				<c path="haxe.ds.List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
	</class>
	<class path="haxe.ds._List.ListNode" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<create public="1" params="T" get="inline" set="null" line="271" static="1"><f a="item:next">
	<c path="create.T"/>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
</f></create>
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="266"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds._List.ListIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<head><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="284"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="288"><f a=""><c path="haxe.ds._List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="280"><f a="head">
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListIterator.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds._List.ListKeyValueIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<idx><x path="Int"/></idx>
		<head><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListKeyValueIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="304"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="308"><f a=""><a>
	<value><c path="haxe.ds._List.ListKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="299"><f a="head">
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.ListSort" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/ListSort.hx">
		<sort public="1" params="T" get="inline" set="null" line="42" static="1">
			<f a="list:cmp">
				<c path="sort.T"/>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<c path="sort.T"/>
			</f>
			<haxe_doc><![CDATA[Sorts List `lst` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies List `a` in place and returns its head once modified.
		The `prev` of the head is set to the tail of the sorted list.

		If `list` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<sortSingleLinked public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="list:cmp">
				<c path="sortSingleLinked.T"/>
				<f a=":">
					<c path="sortSingleLinked.T"/>
					<c path="sortSingleLinked.T"/>
					<x path="Int"/>
				</f>
				<c path="sortSingleLinked.T"/>
			</f>
			<haxe_doc>Same as `sort` but on single linked list.</haxe_doc>
		</sortSingleLinked>
		<haxe_doc>ListSort provides a stable implementation of merge sort through its `sort`
	method. It has a O(N.log(N)) complexity and does not require additional memory allocation.</haxe_doc>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="74" static="1">
		<f a="this:key:value">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<c path="haxe.ds.Map.V"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="92" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Null"><c path="haxe.ds.Map.V"/></x>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, `null` is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="100" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="109" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="116" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.Map.K"/></t>
		</f>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="125" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.Map.V"/></t>
		</f>
		<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="134" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="KeyValueIterator">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</t>
		</f>
		<haxe_doc>Returns an Iterator over the keys and values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</keyValueIterator>
	<copy public="1" get="inline" set="null" line="143" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<x path="haxe.ds.Map">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</x>
		</f>
		<haxe_doc>Returns a shallow copy of `this` map.

		The order of values is undefined.</haxe_doc>
	</copy>
	<toString public="1" get="inline" set="null" line="152" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<clear public="1" get="inline" set="null" line="159" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<x path="Void"/>
		</f>
		<haxe_doc>Removes all keys from `this` Map.</haxe_doc>
	</clear>
	<arrayWrite public="1" get="inline" set="null" line="163" static="1">
		<f a="this:k:v">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<c path="haxe.ds.Map.V"/>
			<c path="haxe.ds.Map.V"/>
		</f>
		<meta>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap params="K:V" get="inline" set="null" line="168" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toStringMap.K"/>
				<c path="toStringMap.V"/>
			</c>
			<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":to"/>
		</meta>
	</toStringMap>
	<toIntMap params="K:V" get="inline" set="null" line="172" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toIntMap.K"/>
				<c path="toIntMap.V"/>
			</c>
			<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":to"/>
		</meta>
	</toIntMap>
	<toEnumValueMapMap params="K:V" get="inline" set="null" line="176" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":to"/>
		</meta>
	</toEnumValueMapMap>
	<toObjectMap params="K:V" get="inline" set="null" line="180" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":to"/>
		</meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="184" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="188" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="192" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="haxe.ds.Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="74" static="1">
			<f a="this:key:value">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="92" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Null"><c path="haxe.ds.Map.V"/></x>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, `null` is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="100" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="109" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="116" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.Map.K"/></t>
			</f>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="125" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.Map.V"/></t>
			</f>
			<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="134" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="KeyValueIterator">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</t>
			</f>
			<haxe_doc>Returns an Iterator over the keys and values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</keyValueIterator>
		<copy public="1" get="inline" set="null" line="143" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<x path="haxe.ds.Map">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</x>
			</f>
			<haxe_doc>Returns a shallow copy of `this` map.

		The order of values is undefined.</haxe_doc>
		</copy>
		<toString public="1" get="inline" set="null" line="152" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<clear public="1" get="inline" set="null" line="159" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes all keys from `this` Map.</haxe_doc>
		</clear>
		<arrayWrite public="1" get="inline" set="null" line="163" static="1">
			<f a="this:k:v">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
				<c path="haxe.ds.Map.V"/>
			</f>
			<meta>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap params="K:V" get="inline" set="null" line="168" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toStringMap.K"/>
					<c path="toStringMap.V"/>
				</c>
				<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap params="K:V" get="inline" set="null" line="172" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toIntMap.K"/>
					<c path="toIntMap.V"/>
				</c>
				<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K:V" get="inline" set="null" line="176" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K:V" get="inline" set="null" line="180" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="184" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="haxe.ds.Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="188" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="haxe.ds.Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="192" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="haxe.ds.Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/ds/ObjectMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<HASH_UPPER get="inline" set="null" expr="0.77" line="28" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.77</e></m></meta>
		</HASH_UPPER>
		<FLAG_EMPTY get="inline" set="null" expr="0" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</FLAG_EMPTY>
		<FLAG_DEL get="inline" set="null" expr="1" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</FLAG_DEL>
		<roundUp get="inline" set="null" line="414" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></roundUp>
		<getInc get="inline" set="null" line="425" static="1"><f a="k:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getInc>
		<isEither get="inline" set="null" line="428" static="1"><f a="v">
	<t path="haxe.ds._ObjectMap.HashType"/>
	<x path="Bool"/>
</f></isEither>
		<isEmpty get="inline" set="null" line="431" static="1"><f a="v">
	<t path="haxe.ds._ObjectMap.HashType"/>
	<x path="Bool"/>
</f></isEmpty>
		<isDel get="inline" set="null" line="434" static="1"><f a="v">
	<t path="haxe.ds._ObjectMap.HashType"/>
	<x path="Bool"/>
</f></isDel>
		<hash get="inline" set="null" line="437" static="1"><f a="s">
	<d/>
	<t path="haxe.ds._ObjectMap.HashType"/>
</f></hash>
		<arrayCopy get="inline" set="null" line="464" static="1"><f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
	<d/>
	<x path="Int"/>
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></arrayCopy>
		<assert get="inline" set="null" line="466" static="1"><f a="x">
	<x path="Bool"/>
	<x path="Void"/>
</f></assert>
		<hashes>
			<c path="java.NativeArray"><t path="haxe.ds._ObjectMap.HashType"/></c>
			<haxe_doc>* This is the most important structure here and the reason why it's so fast.
	 * It's an array of all the hashes contained in the table. These hashes cannot be 0 nor 1,
	 * which stand for "empty" and "deleted" states.
	 *
	 * The lookup algorithm will keep looking until a 0 or the key wanted is found;
	 * The insertion algorithm will do the same but will also break when FLAG_DEL is found;</haxe_doc>
		</hashes>
		<_keys><c path="java.NativeArray"><c path="haxe.ds.ObjectMap.K"/></c></_keys>
		<vals><c path="java.NativeArray"><c path="haxe.ds.ObjectMap.V"/></c></vals>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedKey><c path="haxe.ds.ObjectMap.K"/></cachedKey>
		<cachedIndex><x path="Int"/></cachedIndex>
		<set public="1" set="method" line="68">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup final="1" set="method" line="138"><f a="key">
	<c path="haxe.ds.ObjectMap.K"/>
	<x path="Int"/>
</f></lookup>
		<resize final="1" set="method" line="166">
			<f a="newNBuckets">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":private"/></meta>
		</resize>
		<get public="1" set="method" line="271">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Null"><c path="haxe.ds.ObjectMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="292"><f a="key:def">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
	<c path="haxe.ds.ObjectMap.V"/>
</f></getDefault>
		<exists public="1" set="method" line="313">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="334">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="360">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`

		(java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="364">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`

		(java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="368">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="372">
			<f a=""><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="379">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="394">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="62">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._ObjectMap.ObjectMapKeyIterator" params="T:V" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap" final="1">
		<m><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.T"/>
	<c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.V"/>
</c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="486"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="496"><f a=""><c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.T"/></f></next>
		<new public="1" set="method" line="480"><f a="m">
	<c path="haxe.ds.ObjectMap">
		<c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.T"/>
		<c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta><m n=":access"><e>haxe.ds.ObjectMap</e></m></meta>
	</class>
	<class path="haxe.ds._ObjectMap.ObjectMapValueIterator" params="K:T" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap" final="1">
		<m><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds._ObjectMap.ObjectMapValueIterator.K"/>
	<c path="haxe.ds._ObjectMap.ObjectMapValueIterator.T"/>
</c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="521"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="531"><f a=""><c path="haxe.ds._ObjectMap.ObjectMapValueIterator.T"/></f></next>
		<new public="1" set="method" line="515"><f a="m">
	<c path="haxe.ds.ObjectMap">
		<c path="haxe.ds._ObjectMap.ObjectMapValueIterator.K"/>
		<c path="haxe.ds._ObjectMap.ObjectMapValueIterator.T"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta><m n=":access"><e>haxe.ds.ObjectMap</e></m></meta>
	</class>
	<typedef path="haxe.ds._ObjectMap.HashType" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap"><x path="Int"/></typedef>
	<enum path="haxe.ds.Option" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).

	@see https://haxe.org/manual/std-Option.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The length of `this` Array.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="41" static="1"><f a="this">
	<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
	<x path="Int"/>
</f></get_length>
	<get get="inline" set="null" line="44" static="1">
		<f a="this:i">
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			<x path="Int"/>
			<c path="haxe.ds.ReadOnlyArray.T"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<concat public="1" get="inline" set="null" line="59" static="1">
		<f a="this:a">
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			<x path="haxe.ds.ReadOnlyArray"><c path="haxe.ds.ReadOnlyArray.T"/></x>
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
		</f>
		<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
	</concat>
</class></impl>
	</abstract>
	<class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="41" static="1"><f a="this">
	<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
	<x path="Int"/>
</f></get_length>
		<get get="inline" set="null" line="44" static="1">
			<f a="this:i">
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
				<x path="Int"/>
				<c path="haxe.ds.ReadOnlyArray.T"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<concat public="1" get="inline" set="null" line="59" static="1">
			<f a="this:a">
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
				<x path="haxe.ds.ReadOnlyArray"><c path="haxe.ds.ReadOnlyArray.T"/></x>
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="/home/runner/work/haxe/haxe/std/jvm/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<hashMap><c path="java.util.HashMap">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</c></hashMap>
		<set public="1" set="method" line="39">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="43">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="47">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="51">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="57">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`

		(java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<keyValueIterator public="1" get="inline" set="null" line="61">
			<f a=""><t path="KeyValueIterator">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<iterator public="1" get="inline" set="null" line="65">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<copy public="1" set="method" line="69">
			<f a=""><c path="haxe.ds.StringMap"><c path="haxe.ds.StringMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="73">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="88">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="30">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
			<overloads><new set="method" line="35">
	<f a="hashMap">
		<c path="java.util.HashMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="java.NativeArray"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
	<_new public="1" get="inline" set="null" line="62" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
		<overloads><_new public="1" get="inline" set="null" line="92">
	<f a="length:defaultValue">
		<x path="Int"/>
		<c path="haxe.ds.Vector.T"/>
		<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
	<haxe_doc>Creates a new Vector of length `length` filled with `defaultValue` elements.

		Can be faster than `new Vector(length)` for iteration on some targets for non-nullable elements.

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
</_new></overloads>
	</_new>
	<get public="1" get="inline" set="null" line="126" static="1">
		<f a="this:index">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
		<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="144" static="1">
		<f a="this:index:val">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
		<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</set>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="161" static="1"><f a="this">
	<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
	<x path="Int"/>
</f></get_length>
	<fill public="1" get="inline" set="null" line="177" static="1">
		<f a="this:value">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="haxe.ds.Vector.T"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Sets all `length` elements of `this` Vector to `value`.</haxe_doc>
	</fill>
	<blit public="1" params="T" get="inline" set="null" line="186" static="1">
		<f a="src:srcPos:dest:destPos:len">
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
	</blit>
	<toArray public="1" get="inline" set="null" line="225" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="Array"><c path="haxe.ds.Vector.T"/></c>
		</f>
		<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
	</toArray>
	<toData public="1" get="inline" set="null" line="254" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
		</f>
		<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
	</toData>
	<fromData public="1" params="T" get="inline" set="null" line="264" static="1">
		<f a="data">
			<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
			<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
		</f>
		<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
	</fromData>
	<fromArrayCopy public="1" params="T" get="inline" set="null" line="277" static="1">
		<f a="array">
			<c path="Array"><c path="fromArrayCopy.T"/></c>
			<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
		</f>
		<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
	</fromArrayCopy>
	<copy public="1" params="T" get="inline" set="null" line="306" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="haxe.ds.Vector"><c path="copy.T"/></x>
		</f>
		<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
	</copy>
	<join public="1" params="T" get="inline" set="null" line="329" static="1">
		<f a="this:sep">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="String"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
	</join>
	<map public="1" params="S" get="inline" set="null" line="352" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<f a="">
				<c path="haxe.ds.Vector.T"/>
				<c path="map.S"/>
			</f>
			<x path="haxe.ds.Vector"><c path="map.S"/></x>
		</f>
		<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
	</map>
	<sort public="1" get="inline" set="null" line="379" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<f a=":">
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
	</sort>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
		<_new public="1" get="inline" set="null" line="62" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
			<overloads><_new public="1" get="inline" set="null" line="92">
	<f a="length:defaultValue">
		<x path="Int"/>
		<c path="haxe.ds.Vector.T"/>
		<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
	<haxe_doc>Creates a new Vector of length `length` filled with `defaultValue` elements.

		Can be faster than `new Vector(length)` for iteration on some targets for non-nullable elements.

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
</_new></overloads>
		</_new>
		<get public="1" get="inline" set="null" line="126" static="1">
			<f a="this:index">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
			<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="144" static="1">
			<f a="this:index:val">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
			<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</set>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="161" static="1"><f a="this">
	<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
	<x path="Int"/>
</f></get_length>
		<fill public="1" get="inline" set="null" line="177" static="1">
			<f a="this:value">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="haxe.ds.Vector.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets all `length` elements of `this` Vector to `value`.</haxe_doc>
		</fill>
		<blit public="1" params="T" get="inline" set="null" line="186" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
		</blit>
		<toArray public="1" get="inline" set="null" line="225" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="Array"><c path="haxe.ds.Vector.T"/></c>
			</f>
			<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
		</toArray>
		<toData public="1" get="inline" set="null" line="254" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
		</toData>
		<fromData public="1" params="T" get="inline" set="null" line="264" static="1">
			<f a="data">
				<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
				<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
			</f>
			<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
		</fromData>
		<fromArrayCopy public="1" params="T" get="inline" set="null" line="277" static="1">
			<f a="array">
				<c path="Array"><c path="fromArrayCopy.T"/></c>
				<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
			</f>
			<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
		</fromArrayCopy>
		<copy public="1" params="T" get="inline" set="null" line="306" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="haxe.ds.Vector"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<join public="1" params="T" get="inline" set="null" line="329" static="1">
			<f a="this:sep">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<map public="1" params="S" get="inline" set="null" line="352" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<f a="">
					<c path="haxe.ds.Vector.T"/>
					<c path="map.S"/>
				</f>
				<x path="haxe.ds.Vector"><c path="map.S"/></x>
			</f>
			<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<sort public="1" get="inline" set="null" line="379" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<f a=":">
					<c path="haxe.ds.Vector.T"/>
					<c path="haxe.ds.Vector.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/ds/WeakMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<HASH_UPPER get="inline" set="null" expr="0.77" line="30" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.77</e></m></meta>
		</HASH_UPPER>
		<FLAG_EMPTY get="inline" set="null" expr="0" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</FLAG_EMPTY>
		<FLAG_DEL get="inline" set="null" expr="1" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</FLAG_DEL>
		<roundUp get="inline" set="null" line="440" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></roundUp>
		<getInc get="inline" set="null" line="451" static="1"><f a="k:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getInc>
		<isEither get="inline" set="null" line="454" static="1"><f a="v">
	<t path="haxe.ds._WeakMap.HashType"/>
	<x path="Bool"/>
</f></isEither>
		<isEmpty get="inline" set="null" line="457" static="1"><f a="v">
	<t path="haxe.ds._WeakMap.HashType"/>
	<x path="Bool"/>
</f></isEmpty>
		<isDel get="inline" set="null" line="460" static="1"><f a="v">
	<t path="haxe.ds._WeakMap.HashType"/>
	<x path="Bool"/>
</f></isDel>
		<hash get="inline" set="null" line="463" static="1">
			<f a="s">
				<d/>
				<t path="haxe.ds._WeakMap.HashType"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</hash>
		<arrayCopy get="inline" set="null" line="490" static="1"><f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
	<d/>
	<x path="Int"/>
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></arrayCopy>
		<assert get="inline" set="null" line="492" static="1"><f a="x">
	<x path="Bool"/>
	<x path="Void"/>
</f></assert>
		<hashes>
			<c path="java.NativeArray"><t path="haxe.ds._WeakMap.HashType"/></c>
			<haxe_doc>* This is the most important structure here and the reason why it's so fast.
	 * It's an array of all the hashes contained in the table. These hashes cannot be 0 nor 1,
	 * which stand for "empty" and "deleted" states.
	 *
	 * The lookup algorithm will keep looking until a 0 or the key wanted is found;
	 * The insertion algorithm will do the same but will also break when FLAG_DEL is found;</haxe_doc>
		</hashes>
		<entries><c path="java.NativeArray"><c path="haxe.ds._WeakMap.Entry">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</c></c></entries>
		<queue><c path="java.lang.ref.ReferenceQueue"><c path="haxe.ds.WeakMap.K"/></c></queue>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedEntry><c path="haxe.ds._WeakMap.Entry">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</c></cachedEntry>
		<cachedIndex><x path="Int"/></cachedIndex>
		<cleanupRefs set="method" line="74">
			<f a=""><x path="Void"/></f>
			<meta><m n=":analyzer"><e>ignore</e></m></meta>
		</cleanupRefs>
		<set public="1" set="method" line="105">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup final="1" set="method" line="174"><f a="key">
	<c path="haxe.ds.WeakMap.K"/>
	<x path="Int"/>
</f></lookup>
		<resize final="1" set="method" line="202">
			<f a="newNBuckets">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":private"/></meta>
		</resize>
		<get public="1" set="method" line="287">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Null"><c path="haxe.ds.WeakMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="310"><f a="key:def">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
	<c path="haxe.ds.WeakMap.V"/>
</f></getDefault>
		<exists public="1" set="method" line="333">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="356">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="384">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="389">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="394">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="398">
			<f a=""><c path="haxe.ds.WeakMap">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="405">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="420">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="66">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.

	The keys are considered to be weak references on static targets.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="java.lang.ref.Reference" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/Reference.class" extern="1" abstract="1">
		<get public="1" set="method"><f a=""><c path="java.lang.ref.Reference.T"/></f></get>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<isEnqueued public="1" set="method"><f a=""><x path="Bool"/></f></isEnqueued>
		<enqueue public="1" set="method"><f a=""><x path="Bool"/></f></enqueue>
		<queue public="1"><c path="java.lang.ref.ReferenceQueue"><d/></c></queue>
		<next public="1"><c path="java.lang.ref.Reference"><d/></c></next>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.ref.Reference.T"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.ref.Reference.T"/>
	<c path="java.lang.ref.ReferenceQueue"><d/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.ref.Reference"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ref.WeakReference" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/WeakReference.class" extern="1">
		<extends path="java.lang.ref.Reference"><c path="java.lang.ref.WeakReference.T"/></extends>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.ref.WeakReference.T"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.ref.WeakReference.T"/>
	<c path="java.lang.ref.ReferenceQueue"><d/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.ref.WeakReference"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="haxe.ds._WeakMap.Entry" params="K:V" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap">
		<extends path="java.lang.ref.WeakReference"><c path="haxe.ds._WeakMap.Entry.K"/></extends>
		<value public="1"><c path="haxe.ds._WeakMap.Entry.V"/></value>
		<hash public="1" set="null"><x path="Int"/></hash>
		<keyEquals final="1" public="1" get="inline" set="null" line="510">
			<f a="k">
				<c path="haxe.ds._WeakMap.Entry.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</keyEquals>
		<new public="1" set="method" line="504"><f a="key:value:hash:queue">
	<c path="haxe.ds._WeakMap.Entry.K"/>
	<c path="haxe.ds._WeakMap.Entry.V"/>
	<x path="Int"/>
	<c path="java.lang.ref.ReferenceQueue"><c path="haxe.ds._WeakMap.Entry.K"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds._WeakMap.WeakMapKeyIterator" params="T:V" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap" final="1">
		<m><c path="haxe.ds.WeakMap">
	<c path="haxe.ds._WeakMap.WeakMapKeyIterator.T"/>
	<c path="haxe.ds._WeakMap.WeakMapKeyIterator.V"/>
</c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<lastKey><c path="haxe.ds._WeakMap.WeakMapKeyIterator.T"/></lastKey>
		<hasNext public="1" set="method" line="528"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="547"><f a=""><c path="haxe.ds._WeakMap.WeakMapKeyIterator.T"/></f></next>
		<new public="1" set="method" line="522"><f a="m">
	<c path="haxe.ds.WeakMap">
		<c path="haxe.ds._WeakMap.WeakMapKeyIterator.T"/>
		<c path="haxe.ds._WeakMap.WeakMapKeyIterator.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta><m n=":access"><e>haxe.ds.WeakMap</e></m></meta>
	</class>
	<class path="haxe.ds._WeakMap.WeakMapValueIterator" params="K:T" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap" final="1">
		<m><c path="haxe.ds.WeakMap">
	<c path="haxe.ds._WeakMap.WeakMapValueIterator.K"/>
	<c path="haxe.ds._WeakMap.WeakMapValueIterator.T"/>
</c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="565"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="575"><f a=""><c path="haxe.ds._WeakMap.WeakMapValueIterator.T"/></f></next>
		<new public="1" set="method" line="559"><f a="m">
	<c path="haxe.ds.WeakMap">
		<c path="haxe.ds._WeakMap.WeakMapValueIterator.K"/>
		<c path="haxe.ds._WeakMap.WeakMapValueIterator.T"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta><m n=":access"><e>haxe.ds.WeakMap</e></m></meta>
	</class>
	<typedef path="haxe.ds._WeakMap.HashType" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap"><x path="Int"/></typedef>
	<class path="haxe.exceptions.PosException" params="" file="/home/runner/work/haxe/haxe/std/haxe/exceptions/PosException.hx">
		<extends path="haxe.Exception"/>
		<posInfos final="1" public="1">
			<t path="haxe.PosInfos"/>
			<haxe_doc>Position where this exception was created.</haxe_doc>
		</posInfos>
		<toString public="1" set="method" line="24" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<new public="1" set="method" line="12"><f a="message:?previous:?pos">
	<c path="String"/>
	<c path="haxe.Exception"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception that carry position information of a place where it was created.</haxe_doc>
	</class>
	<class path="haxe.exceptions.ArgumentException" params="" file="/home/runner/work/haxe/haxe/std/haxe/exceptions/ArgumentException.hx">
		<extends path="haxe.exceptions.PosException"/>
		<argument final="1" public="1">
			<c path="String"/>
			<haxe_doc>An argument name.</haxe_doc>
		</argument>
		<new public="1" set="method" line="12"><f a="argument:?message:?previous:?pos">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.Exception"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception that is thrown when an invalid value provided for an argument of a function.</haxe_doc>
	</class>
	<class path="haxe.exceptions.NotImplementedException" params="" file="/home/runner/work/haxe/haxe/std/haxe/exceptions/NotImplementedException.hx">
		<extends path="haxe.exceptions.PosException"/>
		<new public="1" set="method" line="7">
			<f a="?message:?previous:?pos" v="&quot;Not implemented&quot;::">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "Not implemented" }</e></m></meta>
		</new>
		<haxe_doc>An exception that is thrown when requested function or operation does not have an implementation.</haxe_doc>
	</class>
	<abstract path="haxe.extern.AsVar" params="T" file="/home/runner/work/haxe/haxe/std/haxe/extern/AsVar.hx">
		<from><icast><c path="haxe.extern.AsVar.T"/></icast></from>
		<this><c path="haxe.extern.AsVar.T"/></this>
		<to><icast><c path="haxe.extern.AsVar.T"/></icast></to>
		<haxe_doc>If this type is used as an argument type, the compiler ensures that
	argument expressions are bound to a local variable.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
		<impl><class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1" final="1"/>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/home/runner/work/haxe/haxe/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1" final="1"/>
	<typedef path="haxe.extern.Rest" params="T" file="/home/runner/work/haxe/haxe/std/haxe/extern/Rest.hx">
		<x path="haxe.Rest"><c path="haxe.extern.Rest.T"/></x>
		<haxe_doc><![CDATA[DEPRECATED: use haxe.Rest instead.
	
	A special type that represents "rest" function argument.
	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
	</typedef>
	<class path="haxe.format.JsonParser" params="" file="/home/runner/work/haxe/haxe/std/haxe/format/JsonParser.hx">
		<parse public="1" get="inline" set="null" line="44" static="1">
			<f a="str">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `str` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `str` is not valid JSON, an exception will be thrown.

		If `str` is null, the result is unspecified.]]></haxe_doc>
		</parse>
		<str><c path="String"/></str>
		<pos><x path="Int"/></pos>
		<doParse set="method" line="56"><f a=""><d/></f></doParse>
		<parseRec set="method" line="70"><f a=""><d/></f></parseRec>
		<parseString set="method" line="152"><f a=""><c path="String"/></f></parseString>
		<parseNumber get="inline" set="null" line="256"><f a="c">
	<x path="Int"/>
	<d/>
</f></parseNumber>
		<nextChar get="inline" set="null" line="312"><f a=""><x path="Int"/></f></nextChar>
		<invalidChar set="method" line="316"><f a=""><x path="Void"/></f></invalidChar>
		<invalidNumber set="method" line="321"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<new set="method" line="51"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON parser in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-parsing.html</haxe_doc>
	</class>
	<class path="haxe.format.JsonPrinter" params="" file="/home/runner/work/haxe/haxe/std/haxe/format/JsonPrinter.hx">
		<print public="1" set="method" line="44" static="1">
			<f a="o:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `o`'s value and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.</haxe_doc>
		</print>
		<buf><c path="StringBuf"/></buf>
		<replacer><f a="key:value">
	<d/>
	<d/>
	<d/>
</f></replacer>
		<indent><c path="String"/></indent>
		<pretty><x path="Bool"/></pretty>
		<nind><x path="Int"/></nind>
		<ipad get="inline" set="null" line="71"><f a=""><x path="Void"/></f></ipad>
		<newl get="inline" set="null" line="76"><f a=""><x path="Void"/></f></newl>
		<write set="method" line="81"><f a="k:v">
	<d/>
	<d/>
	<x path="Void"/>
</f></write>
		<addChar get="inline" set="null" line="140"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addChar>
		<add get="inline" set="null" line="148"><f a="v">
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<classString set="method" line="157"><f a="v">
	<d/>
	<x path="Void"/>
</f></classString>
		<objString get="inline" set="null" line="161"><f a="v">
	<d/>
	<x path="Void"/>
</f></objString>
		<fieldsString set="method" line="165"><f a="v:fields">
	<d/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></fieldsString>
		<quote set="method" line="195"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></quote>
		<new set="method" line="56"><f a="replacer:space">
	<f a="key:value">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON printer in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
	</class>
	<typedef path="haxe.http._HttpBase.StringKeyValue" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpBase.hx" private="1" module="haxe.http.HttpBase"><a>
	<value><c path="String"/></value>
	<name><c path="String"/></name>
</a></typedef>
	<class path="haxe.http.HttpBase" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpBase.hx">
		<url public="1">
			<c path="String"/>
			<haxe_doc>The url of `this` request. It is used only by the `request()` method and
		can be changed in order to send the same request to different target
		Urls.</haxe_doc>
		</url>
		<responseData public="1" get="accessor" set="null"><x path="Null"><c path="String"/></x></responseData>
		<responseBytes public="1" set="null"><x path="Null"><c path="haxe.io.Bytes"/></x></responseBytes>
		<responseAsString><x path="Null"><c path="String"/></x></responseAsString>
		<postData><x path="Null"><c path="String"/></x></postData>
		<postBytes><x path="Null"><c path="haxe.io.Bytes"/></x></postBytes>
		<headers><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></headers>
		<params><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></params>
		<emptyOnData final="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></emptyOnData>
		<setHeader public="1" set="method" line="85">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the header identified as `name` to value `value`.

		If `name` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setHeader>
		<addHeader public="1" set="method" line="98"><f a="header:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addHeader>
		<setParameter public="1" set="method" line="112">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the parameter identified as `name` to value `value`.

		If `name` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setParameter>
		<addParameter public="1" set="method" line="125"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addParameter>
		<setPostData public="1" set="method" line="142">
			<f a="data">
				<x path="Null"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data` string.

		There can only be one post data per request. Subsequent calls to
		this method or to `setPostBytes()` overwrite the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostData>
		<setPostBytes public="1" set="method" line="160">
			<f a="data">
				<x path="Null"><c path="haxe.io.Bytes"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data` bytes.

		There can only be one post data per request. Subsequent calls to
		this method or to `setPostData()` overwrite the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostBytes>
		<request public="1" set="method" line="185">
			<f a="?post">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends `this` Http request to the Url specified by `this.url`.

		If `post` is true, the request is sent as POST request, otherwise it is
		sent as GET request.

		Depending on the outcome of the request, this method calls the
		`onStatus()`, `onError()`, `onData()` or `onBytes()` callback functions.

		If `this.url` is null, the result is unspecified.

		If `this.url` is an invalid or inaccessible Url, the `onError()` callback
		function is called.

		[js] If `this.async` is false, the callback functions are called before
		this method returns.</haxe_doc>
		</request>
		<onData public="1" set="dynamic" line="196">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onData = function(data) { // handle result }`</haxe_doc>
		</onData>
		<onBytes public="1" set="dynamic" line="205">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onBytes = function(data) { // handle result }`</haxe_doc>
		</onBytes>
		<onError public="1" set="dynamic" line="214">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a request error, with `msg` containing the
		error description.

		The intended usage is to bind it to a custom function:
		`httpInstance.onError = function(msg) { // handle error }`</haxe_doc>
		</onError>
		<onStatus public="1" set="dynamic" line="223">
			<f a="status">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a Http status change, with `status` being the
		new status.

		The intended usage is to bind it to a custom function:
		`httpInstance.onStatus = function(status) { // handle status }`</haxe_doc>
		</onStatus>
		<hasOnData set="method" line="228">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Override this if extending `haxe.Http` with overriding `onData`</haxe_doc>
		</hasOnData>
		<success set="method" line="232"><f a="data">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></success>
		<get_responseData set="method" line="241"><f a=""><x path="Null"><c path="String"/></x></f></get_responseData>
		<new public="1" set="method" line="71">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Http instance with `url` as parameter.

		This does not do a request until `request()` is called.

		If `url` is null, the field url must be set to a value before making the
		call to `request()`, or the result is unspecified.

		(Php) Https (SSL) connections are allowed only if the OpenSSL extension
		is enabled.</haxe_doc>
		</new>
		<haxe_doc>This class can be used to handle Http requests consistently across
	platforms. There are two intended usages:

	- call `haxe.Http.requestUrl(url)` and receive the result as a `String`
	(only available on `sys` targets)
	- create a `new haxe.Http(url)`, register your callbacks for `onData`,
	`onError` and `onStatus`, then call `request()`.</haxe_doc>
	</class>
	<abstract path="haxe.http.HttpMethod" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpMethod.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>HTTP defines methods (sometimes referred to as _verbs_) to indicate the desired action to be
	performed on the identified resource. What this resource represents, whether pre-existing data
	or data that is generated dynamically, depends on the implementation of the server.

	Often, the resource corresponds to a file or the output of an executable residing on the server.
	The HTTP/1.0 specification defined the `GET`, `POST` and `HEAD` methods and the HTTP/1.1
	specification added 5 new methods: `OPTIONS`, `PUT`, `DELETE`, `TRACE` and `CONNECT`.

	By being specified in these documents their semantics are well known and can be depended upon.
	Any client can use any method and the server can be configured to support any combination of methods.
	If a method is unknown to an intermediate it will be treated as an unsafe and non-idempotent method.
	There is no limit to the number of methods that can be defined and this allows for future methods to
	be specified without breaking existing infrastructure.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.http._HttpMethod.HttpMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpMethod.hx" private="1" module="haxe.http.HttpMethod" extern="1" final="1">
	<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="28" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "POST"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `POST` method requests that the server accept the entity enclosed in the request as
		a new subordinate of the web resource identified by the URI.
		
		The data `POST`ed might be, for example, an annotation for existing resources;
		a message for a bulletin board, newsgroup, mailing list, or comment thread;
		a block of data that is the result of submitting a web form to a data-handling process;
		or an item to add to a database.</haxe_doc>
	</Post>
	<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="40" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "GET"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `GET` method requests a representation of the specified resource.

		Requests using `GET` should only retrieve data and should have no other effect.
		(This is also true of some other HTTP methods.) The W3C has published guidance
		principles on this distinction, saying, _"Web application design should be informed
		by the above principles, but also by the relevant limitations."_

		See safe methods below.</haxe_doc>
	</Get>
	<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="47" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "HEAD"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `HEAD` method asks for a response identical to that of a `GET` request,
		but without the response body. This is useful for retrieving meta-information
		written in response headers, without having to transport the entire content.</haxe_doc>
	</Head>
	<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="54" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "PUT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `PUT` method requests that the enclosed entity be stored under the supplied URI.
		If the URI refers to an already existing resource, it is modified; if the URI does
		not point to an existing resource, then the server can create the resource with that URI.</haxe_doc>
	</Put>
	<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="59" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "DELETE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `DELETE` method deletes the specified resource.</haxe_doc>
	</Delete>
	<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="65" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "TRACE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `TRACE` method echoes the received request so that a client can see
		what (if any) changes or additions have been made by intermediate servers.</haxe_doc>
	</Trace>
	<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="72" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "OPTIONS"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `OPTIONS` method returns the HTTP methods that the server supports for the
		specified URL. This can be used to check the functionality of a web server by
		requesting `*` instead of a specific resource.</haxe_doc>
	</Options>
	<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="78" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "CONNECT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `CONNECT` method converts the request connection to a transparent TCP/IP tunnel,
		usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.</haxe_doc>
	</Connect>
	<Patch public="1" get="inline" set="null" expr="cast &quot;PATCH&quot;" line="83" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "PATCH"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `PATCH` method applies partial modifications to a resource.</haxe_doc>
	</Patch>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.http._HttpMethod.HttpMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpMethod.hx" private="1" module="haxe.http.HttpMethod" extern="1" final="1">
		<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="28" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "POST"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `POST` method requests that the server accept the entity enclosed in the request as
		a new subordinate of the web resource identified by the URI.
		
		The data `POST`ed might be, for example, an annotation for existing resources;
		a message for a bulletin board, newsgroup, mailing list, or comment thread;
		a block of data that is the result of submitting a web form to a data-handling process;
		or an item to add to a database.</haxe_doc>
		</Post>
		<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="40" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "GET"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `GET` method requests a representation of the specified resource.

		Requests using `GET` should only retrieve data and should have no other effect.
		(This is also true of some other HTTP methods.) The W3C has published guidance
		principles on this distinction, saying, _"Web application design should be informed
		by the above principles, but also by the relevant limitations."_

		See safe methods below.</haxe_doc>
		</Get>
		<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="47" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "HEAD"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `HEAD` method asks for a response identical to that of a `GET` request,
		but without the response body. This is useful for retrieving meta-information
		written in response headers, without having to transport the entire content.</haxe_doc>
		</Head>
		<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="54" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "PUT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `PUT` method requests that the enclosed entity be stored under the supplied URI.
		If the URI refers to an already existing resource, it is modified; if the URI does
		not point to an existing resource, then the server can create the resource with that URI.</haxe_doc>
		</Put>
		<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="59" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "DELETE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `DELETE` method deletes the specified resource.</haxe_doc>
		</Delete>
		<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="65" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "TRACE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `TRACE` method echoes the received request so that a client can see
		what (if any) changes or additions have been made by intermediate servers.</haxe_doc>
		</Trace>
		<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="72" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "OPTIONS"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `OPTIONS` method returns the HTTP methods that the server supports for the
		specified URL. This can be used to check the functionality of a web server by
		requesting `*` instead of a specific resource.</haxe_doc>
		</Options>
		<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="78" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "CONNECT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `CONNECT` method converts the request connection to a transparent TCP/IP tunnel,
		usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.</haxe_doc>
		</Connect>
		<Patch public="1" get="inline" set="null" expr="cast &quot;PATCH&quot;" line="83" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "PATCH"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `PATCH` method applies partial modifications to a resource.</haxe_doc>
		</Patch>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.http.HttpStatus" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpStatus.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>HTTP Request Status</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.http._HttpStatus.HttpStatus_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpStatus.hx" private="1" module="haxe.http.HttpStatus" extern="1" final="1">
	<Continue public="1" get="inline" set="null" expr="cast 100" line="7" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 100</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Continue>
	<SwitchingProtocols public="1" get="inline" set="null" expr="cast 101" line="8" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 101</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SwitchingProtocols>
	<Processing public="1" get="inline" set="null" expr="cast 102" line="9" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 102</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Processing>
	<OK public="1" get="inline" set="null" expr="cast 200" line="10" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 200</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OK>
	<Created public="1" get="inline" set="null" expr="cast 201" line="11" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 201</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Created>
	<Accepted public="1" get="inline" set="null" expr="cast 202" line="12" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 202</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Accepted>
	<NonAuthoritativeInformation public="1" get="inline" set="null" expr="cast 203" line="13" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 203</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NonAuthoritativeInformation>
	<NoContent public="1" get="inline" set="null" expr="cast 204" line="14" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 204</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NoContent>
	<ResetContent public="1" get="inline" set="null" expr="cast 205" line="15" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 205</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ResetContent>
	<PartialContent public="1" get="inline" set="null" expr="cast 206" line="16" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 206</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PartialContent>
	<MultiStatus public="1" get="inline" set="null" expr="cast 207" line="17" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 207</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MultiStatus>
	<AlreadyReported public="1" get="inline" set="null" expr="cast 208" line="18" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 208</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AlreadyReported>
	<IMUsed public="1" get="inline" set="null" expr="cast 226" line="19" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 226</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IMUsed>
	<MultipleChoices public="1" get="inline" set="null" expr="cast 300" line="20" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 300</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MultipleChoices>
	<MovedPermanently public="1" get="inline" set="null" expr="cast 301" line="21" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 301</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MovedPermanently>
	<Found public="1" get="inline" set="null" expr="cast 302" line="22" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 302</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Found>
	<SeeOther public="1" get="inline" set="null" expr="cast 303" line="23" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 303</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SeeOther>
	<NotModified public="1" get="inline" set="null" expr="cast 304" line="24" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 304</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotModified>
	<UseProxy public="1" get="inline" set="null" expr="cast 305" line="25" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 305</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UseProxy>
	<SwitchProxy public="1" get="inline" set="null" expr="cast 306" line="26" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 306</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SwitchProxy>
	<TemporaryRedirect public="1" get="inline" set="null" expr="cast 307" line="27" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 307</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TemporaryRedirect>
	<PermanentRedirect public="1" get="inline" set="null" expr="cast 308" line="28" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 308</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PermanentRedirect>
	<BadRequest public="1" get="inline" set="null" expr="cast 400" line="29" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 400</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BadRequest>
	<Unauthorized public="1" get="inline" set="null" expr="cast 401" line="30" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 401</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Unauthorized>
	<PaymentRequired public="1" get="inline" set="null" expr="cast 402" line="31" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 402</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PaymentRequired>
	<Forbidden public="1" get="inline" set="null" expr="cast 403" line="32" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 403</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Forbidden>
	<NotFound public="1" get="inline" set="null" expr="cast 404" line="33" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 404</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotFound>
	<MethodNotAllowed public="1" get="inline" set="null" expr="cast 405" line="34" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 405</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethodNotAllowed>
	<NotAcceptable public="1" get="inline" set="null" expr="cast 406" line="35" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 406</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotAcceptable>
	<ProxyAuthenticationRequired public="1" get="inline" set="null" expr="cast 407" line="36" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 407</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ProxyAuthenticationRequired>
	<RequestTimeout public="1" get="inline" set="null" expr="cast 408" line="37" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 408</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RequestTimeout>
	<Conflict public="1" get="inline" set="null" expr="cast 409" line="38" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 409</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Conflict>
	<Gone public="1" get="inline" set="null" expr="cast 410" line="39" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 410</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Gone>
	<LengthRequired public="1" get="inline" set="null" expr="cast 411" line="40" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 411</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LengthRequired>
	<PreconditionFailed public="1" get="inline" set="null" expr="cast 412" line="41" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 412</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PreconditionFailed>
	<PayloadTooLarge public="1" get="inline" set="null" expr="cast 413" line="42" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 413</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PayloadTooLarge>
	<URITooLong public="1" get="inline" set="null" expr="cast 414" line="43" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 414</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</URITooLong>
	<UnsupportedMediaType public="1" get="inline" set="null" expr="cast 415" line="44" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 415</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UnsupportedMediaType>
	<RangeNotSatisfiable public="1" get="inline" set="null" expr="cast 416" line="45" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 416</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RangeNotSatisfiable>
	<ExpectationFailed public="1" get="inline" set="null" expr="cast 417" line="46" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 417</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ExpectationFailed>
	<ImATeapot public="1" get="inline" set="null" expr="cast 418" line="47" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 418</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImATeapot>
	<MisdirectedRequest public="1" get="inline" set="null" expr="cast 421" line="48" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 421</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MisdirectedRequest>
	<UnprocessableEntity public="1" get="inline" set="null" expr="cast 422" line="49" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 422</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UnprocessableEntity>
	<Locked public="1" get="inline" set="null" expr="cast 423" line="50" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 423</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Locked>
	<FailedDependency public="1" get="inline" set="null" expr="cast 424" line="51" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 424</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FailedDependency>
	<UpgradeRequired public="1" get="inline" set="null" expr="cast 426" line="52" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 426</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UpgradeRequired>
	<PreconditionRequired public="1" get="inline" set="null" expr="cast 428" line="53" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 428</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PreconditionRequired>
	<TooManyRequests public="1" get="inline" set="null" expr="cast 429" line="54" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 429</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TooManyRequests>
	<RequestHeaderFieldsTooLarge public="1" get="inline" set="null" expr="cast 431" line="55" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 431</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RequestHeaderFieldsTooLarge>
	<UnavailableForLegalReasons public="1" get="inline" set="null" expr="cast 451" line="56" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 451</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UnavailableForLegalReasons>
	<InternalServerError public="1" get="inline" set="null" expr="cast 500" line="57" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 500</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</InternalServerError>
	<NotImplemented public="1" get="inline" set="null" expr="cast 501" line="58" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 501</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotImplemented>
	<BadGateway public="1" get="inline" set="null" expr="cast 502" line="59" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 502</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BadGateway>
	<ServiceUnavailable public="1" get="inline" set="null" expr="cast 503" line="60" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 503</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ServiceUnavailable>
	<GatewayTimeout public="1" get="inline" set="null" expr="cast 504" line="61" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 504</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GatewayTimeout>
	<HTTPVersionNotSupported public="1" get="inline" set="null" expr="cast 505" line="62" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 505</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HTTPVersionNotSupported>
	<VariantAlsoNegotiates public="1" get="inline" set="null" expr="cast 506" line="63" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 506</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VariantAlsoNegotiates>
	<InsufficientStorage public="1" get="inline" set="null" expr="cast 507" line="64" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 507</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</InsufficientStorage>
	<LoopDetected public="1" get="inline" set="null" expr="cast 508" line="65" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 508</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LoopDetected>
	<NotExtended public="1" get="inline" set="null" expr="cast 510" line="66" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 510</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotExtended>
	<NetworkAuthenticationRequired public="1" get="inline" set="null" expr="cast 511" line="67" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 511</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NetworkAuthenticationRequired>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.http._HttpStatus.HttpStatus_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpStatus.hx" private="1" module="haxe.http.HttpStatus" extern="1" final="1">
		<Continue public="1" get="inline" set="null" expr="cast 100" line="7" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 100</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Continue>
		<SwitchingProtocols public="1" get="inline" set="null" expr="cast 101" line="8" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 101</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SwitchingProtocols>
		<Processing public="1" get="inline" set="null" expr="cast 102" line="9" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 102</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Processing>
		<OK public="1" get="inline" set="null" expr="cast 200" line="10" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 200</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OK>
		<Created public="1" get="inline" set="null" expr="cast 201" line="11" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 201</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Created>
		<Accepted public="1" get="inline" set="null" expr="cast 202" line="12" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 202</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Accepted>
		<NonAuthoritativeInformation public="1" get="inline" set="null" expr="cast 203" line="13" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 203</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NonAuthoritativeInformation>
		<NoContent public="1" get="inline" set="null" expr="cast 204" line="14" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 204</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NoContent>
		<ResetContent public="1" get="inline" set="null" expr="cast 205" line="15" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 205</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ResetContent>
		<PartialContent public="1" get="inline" set="null" expr="cast 206" line="16" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 206</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PartialContent>
		<MultiStatus public="1" get="inline" set="null" expr="cast 207" line="17" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 207</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MultiStatus>
		<AlreadyReported public="1" get="inline" set="null" expr="cast 208" line="18" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 208</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AlreadyReported>
		<IMUsed public="1" get="inline" set="null" expr="cast 226" line="19" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 226</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IMUsed>
		<MultipleChoices public="1" get="inline" set="null" expr="cast 300" line="20" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 300</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MultipleChoices>
		<MovedPermanently public="1" get="inline" set="null" expr="cast 301" line="21" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 301</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MovedPermanently>
		<Found public="1" get="inline" set="null" expr="cast 302" line="22" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 302</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Found>
		<SeeOther public="1" get="inline" set="null" expr="cast 303" line="23" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 303</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SeeOther>
		<NotModified public="1" get="inline" set="null" expr="cast 304" line="24" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 304</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotModified>
		<UseProxy public="1" get="inline" set="null" expr="cast 305" line="25" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 305</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UseProxy>
		<SwitchProxy public="1" get="inline" set="null" expr="cast 306" line="26" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 306</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SwitchProxy>
		<TemporaryRedirect public="1" get="inline" set="null" expr="cast 307" line="27" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 307</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TemporaryRedirect>
		<PermanentRedirect public="1" get="inline" set="null" expr="cast 308" line="28" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 308</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PermanentRedirect>
		<BadRequest public="1" get="inline" set="null" expr="cast 400" line="29" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 400</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BadRequest>
		<Unauthorized public="1" get="inline" set="null" expr="cast 401" line="30" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 401</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Unauthorized>
		<PaymentRequired public="1" get="inline" set="null" expr="cast 402" line="31" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 402</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PaymentRequired>
		<Forbidden public="1" get="inline" set="null" expr="cast 403" line="32" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 403</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Forbidden>
		<NotFound public="1" get="inline" set="null" expr="cast 404" line="33" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 404</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotFound>
		<MethodNotAllowed public="1" get="inline" set="null" expr="cast 405" line="34" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 405</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethodNotAllowed>
		<NotAcceptable public="1" get="inline" set="null" expr="cast 406" line="35" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 406</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotAcceptable>
		<ProxyAuthenticationRequired public="1" get="inline" set="null" expr="cast 407" line="36" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 407</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ProxyAuthenticationRequired>
		<RequestTimeout public="1" get="inline" set="null" expr="cast 408" line="37" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 408</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RequestTimeout>
		<Conflict public="1" get="inline" set="null" expr="cast 409" line="38" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 409</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Conflict>
		<Gone public="1" get="inline" set="null" expr="cast 410" line="39" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 410</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Gone>
		<LengthRequired public="1" get="inline" set="null" expr="cast 411" line="40" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 411</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LengthRequired>
		<PreconditionFailed public="1" get="inline" set="null" expr="cast 412" line="41" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 412</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PreconditionFailed>
		<PayloadTooLarge public="1" get="inline" set="null" expr="cast 413" line="42" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 413</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PayloadTooLarge>
		<URITooLong public="1" get="inline" set="null" expr="cast 414" line="43" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 414</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</URITooLong>
		<UnsupportedMediaType public="1" get="inline" set="null" expr="cast 415" line="44" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 415</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UnsupportedMediaType>
		<RangeNotSatisfiable public="1" get="inline" set="null" expr="cast 416" line="45" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 416</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RangeNotSatisfiable>
		<ExpectationFailed public="1" get="inline" set="null" expr="cast 417" line="46" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 417</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ExpectationFailed>
		<ImATeapot public="1" get="inline" set="null" expr="cast 418" line="47" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 418</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImATeapot>
		<MisdirectedRequest public="1" get="inline" set="null" expr="cast 421" line="48" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 421</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MisdirectedRequest>
		<UnprocessableEntity public="1" get="inline" set="null" expr="cast 422" line="49" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 422</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UnprocessableEntity>
		<Locked public="1" get="inline" set="null" expr="cast 423" line="50" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 423</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Locked>
		<FailedDependency public="1" get="inline" set="null" expr="cast 424" line="51" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 424</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FailedDependency>
		<UpgradeRequired public="1" get="inline" set="null" expr="cast 426" line="52" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 426</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UpgradeRequired>
		<PreconditionRequired public="1" get="inline" set="null" expr="cast 428" line="53" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 428</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PreconditionRequired>
		<TooManyRequests public="1" get="inline" set="null" expr="cast 429" line="54" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 429</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TooManyRequests>
		<RequestHeaderFieldsTooLarge public="1" get="inline" set="null" expr="cast 431" line="55" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 431</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RequestHeaderFieldsTooLarge>
		<UnavailableForLegalReasons public="1" get="inline" set="null" expr="cast 451" line="56" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 451</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UnavailableForLegalReasons>
		<InternalServerError public="1" get="inline" set="null" expr="cast 500" line="57" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 500</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</InternalServerError>
		<NotImplemented public="1" get="inline" set="null" expr="cast 501" line="58" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 501</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotImplemented>
		<BadGateway public="1" get="inline" set="null" expr="cast 502" line="59" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 502</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BadGateway>
		<ServiceUnavailable public="1" get="inline" set="null" expr="cast 503" line="60" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 503</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ServiceUnavailable>
		<GatewayTimeout public="1" get="inline" set="null" expr="cast 504" line="61" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 504</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GatewayTimeout>
		<HTTPVersionNotSupported public="1" get="inline" set="null" expr="cast 505" line="62" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 505</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HTTPVersionNotSupported>
		<VariantAlsoNegotiates public="1" get="inline" set="null" expr="cast 506" line="63" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 506</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VariantAlsoNegotiates>
		<InsufficientStorage public="1" get="inline" set="null" expr="cast 507" line="64" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 507</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</InsufficientStorage>
		<LoopDetected public="1" get="inline" set="null" expr="cast 508" line="65" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 508</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LoopDetected>
		<NotExtended public="1" get="inline" set="null" expr="cast 510" line="66" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 510</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotExtended>
		<NetworkAuthenticationRequired public="1" get="inline" set="null" expr="cast 511" line="67" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 511</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NetworkAuthenticationRequired>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.hxb.WriterTargetConfig" params="" file="/home/runner/work/haxe/haxe/std/haxe/hxb/WriterConfig.hx" module="haxe.hxb.WriterConfig"><a>
	<include>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dot paths of modules or packages to be included in the archive. This takes priority
		over exclude. By default, all modules that aren't explicitly excluded are
		included.</haxe_doc>
	</include>
	<hxbVersion>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The hxb version to target. By default, the version of the Haxe compiler itself
		is targeted. See https://github.com/HaxeFoundation/haxe/issues/11505</haxe_doc>
	</hxbVersion>
	<generateDocumentation>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If false, no documentation</haxe_doc>
	</generateDocumentation>
	<generate>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If `false`, this target is ignored by the writer.</haxe_doc>
	</generate>
	<exclude>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Dot paths of modules or packages to be exluded from the archive.</haxe_doc>
	</exclude>
</a></typedef>
	<typedef path="haxe.hxb.WriterConfig" params="" file="/home/runner/work/haxe/haxe/std/haxe/hxb/WriterConfig.hx"><a>
	<targetConfig>
		<x path="Null"><t path="haxe.hxb.WriterTargetConfig"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The configuration for the current target context. If it is `null`, all data
		for the target context is generated.</haxe_doc>
	</targetConfig>
	<macroConfig>
		<x path="Null"><t path="haxe.hxb.WriterTargetConfig"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The configuration for the macro context. If it is `null`, all data for the
		macro context is generated.</haxe_doc>
	</macroConfig>
	<archivePath>
		<c path="String"/>
		<haxe_doc>The file path for the archive. Occurrences of `$target` are replaced
		by the name of the current target (js, hl, etc.).</haxe_doc>
	</archivePath>
</a></typedef>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="haxe.io.ArrayBufferViewImpl"/></typedef>
	<class path="haxe.io.ArrayBufferViewImpl" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView">
		<bytes public="1"><c path="haxe.io.Bytes"/></bytes>
		<byteOffset public="1"><x path="Int"/></byteOffset>
		<byteLength public="1"><x path="Int"/></byteLength>
		<sub public="1" set="method" line="38"><f a="begin:?length">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></sub>
		<subarray public="1" set="method" line="46"><f a="?begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></subarray>
		<new public="1" set="method" line="32"><f a="bytes:pos:length">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1">
	<buffer public="1" get="accessor" set="null" static="1"><c path="haxe.io.Bytes"/></buffer>
	<byteOffset public="1" get="accessor" set="null" static="1"><x path="Int"/></byteOffset>
	<byteLength public="1" get="accessor" set="null" static="1"><x path="Int"/></byteLength>
	<_new public="1" get="inline" set="null" line="60" static="1">
		<f a="size">
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_byteOffset get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
</f></get_byteOffset>
	<get_byteLength get="inline" set="null" line="68" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
</f></get_byteLength>
	<get_buffer get="inline" set="null" line="71" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<c path="haxe.io.Bytes"/>
</f></get_buffer>
	<sub public="1" get="inline" set="null" line="73" static="1"><f a="this:begin:?length">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="77" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="81" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<t path="haxe.io.ArrayBufferViewData"/>
</f></getData>
	<fromData public="1" get="inline" set="null" line="85" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
	<fromBytes public="1" set="method" line="89" static="1">
		<f a="bytes:?pos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1">
		<buffer public="1" get="accessor" set="null" static="1"><c path="haxe.io.Bytes"/></buffer>
		<byteOffset public="1" get="accessor" set="null" static="1"><x path="Int"/></byteOffset>
		<byteLength public="1" get="accessor" set="null" static="1"><x path="Int"/></byteLength>
		<_new public="1" get="inline" set="null" line="60" static="1">
			<f a="size">
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_byteOffset get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
</f></get_byteOffset>
		<get_byteLength get="inline" set="null" line="68" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
</f></get_byteLength>
		<get_buffer get="inline" set="null" line="71" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<c path="haxe.io.Bytes"/>
</f></get_buffer>
		<sub public="1" get="inline" set="null" line="73" static="1"><f a="this:begin:?length">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="77" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="81" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<t path="haxe.io.ArrayBufferViewData"/>
</f></getData>
		<fromData public="1" get="inline" set="null" line="85" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
		<fromBytes public="1" set="method" line="89" static="1">
			<f a="bytes:?pos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<class path="haxe.io.Input" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<helper><c path="java.nio.ByteBuffer"/></helper>
		<readByte public="1" set="method" line="47">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="62">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="90">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="92"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="104">
			<f a="?bufsize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="130">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="143">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="161">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="174">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="197">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="206">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="215">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="227">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="241">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="252">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="267">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="279">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="302">
			<f a="len:?encoding">
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
	</class>
	<class path="haxe.io.BufferInput" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/BufferInput.hx">
		<extends path="haxe.io.Input"/>
		<i public="1"><c path="haxe.io.Input"/></i>
		<buf public="1"><c path="haxe.io.Bytes"/></buf>
		<available public="1"><x path="Int"/></available>
		<pos public="1"><x path="Int"/></pos>
		<refill public="1" set="method" line="38"><f a=""><x path="Void"/></f></refill>
		<readByte public="1" set="method" line="46" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="55" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="31">
			<f a="i:buf:?pos:?available" v="::0:0">
				<c path="haxe.io.Input"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ available : 0, pos : 0 }</e></m></meta>
		</new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/BytesBuffer.hx">
		<b><c path="java.io.ByteArrayOutputStream"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="60"><f a=""><x path="Int"/></f></get_length>
		<addByte public="1" get="inline" set="null" line="72"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="88"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addString public="1" get="inline" set="null" line="110"><f a="v:?encoding">
	<c path="String"/>
	<e path="haxe.io.Encoding"/>
	<x path="Void"/>
</f></addString>
		<addInt32 public="1" set="method" line="125"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addInt64 public="1" set="method" line="136"><f a="v">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addInt64>
		<addFloat public="1" get="inline" set="null" line="141"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" get="inline" set="null" line="149"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" get="inline" set="null" line="157"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="192">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer should no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="43"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/BytesData.hx"><c path="java.NativeArray"><x path="java.Int8"/></c></typedef>
	<class path="haxe.io.BytesInput" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_position get="inline" set="null" line="67"><f a=""><x path="Int"/></f></get_position>
		<get_length get="inline" set="null" line="75"><f a=""><x path="Int"/></f></get_length>
		<set_position set="method" line="83"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<readByte public="1" set="method" line="96" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</readByte>
		<readBytes public="1" set="method" line="119" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="39"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Output" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<helper><c path="java.nio.ByteBuffer"/></helper>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="103">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="120">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="133">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="142">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="156">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="167">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="178">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="195">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="206">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="225">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<prepare public="1" set="method" line="246">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least `nbytes` bytes.

		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="254">
			<f a="i:?bufsize">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read all available data from `i` and write it.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read and written. Its default value is 4096.</haxe_doc>
		</writeInput>
		<writeString public="1" set="method" line="278">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="47"><f a=""><x path="Int"/></f></get_length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="137">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns the `Bytes` of this output.

		This function should not be called more than once on a given
		`BytesOutput` instance.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="haxe.io.Encoding" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.io.Eof" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.io.Eof.*"</e></m></meta>
		</toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
	</class>
	<enum path="haxe.io.Error" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="haxe.io.FPHelper" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/FPHelper.hx">
		<i32ToFloat public="1" set="method" line="133" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></i32ToFloat>
		<floatToI32 public="1" set="method" line="168" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></floatToI32>
		<i64ToDouble public="1" set="method" line="197" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></i64ToDouble>
		<doubleToI64 public="1" set="method" line="240" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns an Int64 representing the bytes representation of the double precision IEEE float value.
		WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.
		We still ensure that this is safe to use in a multithread environment</haxe_doc>
		</doubleToI64>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
	</class>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float32Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float32Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<t path="haxe.io.Float32ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float32Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float32Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<t path="haxe.io.Float32ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.Float64ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float64Array.hx" module="haxe.io.Float64Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float64Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float64Array.hx">
		<this><t path="haxe.io.Float64ArrayData"/></this>
		<impl><class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>8</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float64Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float64Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<t path="haxe.io.Float64ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float64Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float64Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<t path="haxe.io.Float64ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.Int32ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Int32Array.hx" module="haxe.io.Int32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Int32Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Int32Array.hx">
		<this><t path="haxe.io.Int32ArrayData"/></this>
		<impl><class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<t path="haxe.io.Int32ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<t path="haxe.io.Int32ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<abstract path="haxe.io.Mime" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Mime.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>HTML MimeType Enum
	@see http://www.sitepoint.com/web-foundations/mime-types-complete-list/</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.io._Mime.Mime_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Mime.hx" private="1" module="haxe.io.Mime" extern="1" final="1">
	<XWorldX3dmf public="1" get="inline" set="null" expr="cast &quot;x-world/x-3dmf&quot;" line="8" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-world/x-3dmf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XWorldX3dmf>
	<ApplicationOctetStream public="1" get="inline" set="null" expr="cast &quot;application/octet-stream&quot;" line="9" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/octet-stream"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationOctetStream>
	<ApplicationXAuthorwareBin public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-bin&quot;" line="10" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-bin"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXAuthorwareBin>
	<ApplicationXAuthorwareMap public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-map&quot;" line="11" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-map"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXAuthorwareMap>
	<ApplicationXAuthorwareSeg public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-seg&quot;" line="12" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-seg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXAuthorwareSeg>
	<TextVndAbc public="1" get="inline" set="null" expr="cast &quot;text/vnd.abc&quot;" line="13" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.abc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextVndAbc>
	<TextHtml public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="14" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/html"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextHtml>
	<VideoAnimaflex public="1" get="inline" set="null" expr="cast &quot;video/animaflex&quot;" line="15" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/animaflex"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoAnimaflex>
	<ApplicationPostscript public="1" get="inline" set="null" expr="cast &quot;application/postscript&quot;" line="16" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/postscript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPostscript>
	<AudioAiff public="1" get="inline" set="null" expr="cast &quot;audio/aiff&quot;" line="17" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/aiff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioAiff>
	<AudioXAiff public="1" get="inline" set="null" expr="cast &quot;audio/x-aiff&quot;" line="18" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-aiff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXAiff>
	<ApplicationXAim public="1" get="inline" set="null" expr="cast &quot;application/x-aim&quot;" line="19" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-aim"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXAim>
	<TextXAudiosoftIntra public="1" get="inline" set="null" expr="cast &quot;text/x-audiosoft-intra&quot;" line="20" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-audiosoft-intra"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXAudiosoftIntra>
	<ApplicationXNaviAnimation public="1" get="inline" set="null" expr="cast &quot;application/x-navi-animation&quot;" line="21" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navi-animation"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNaviAnimation>
	<ApplicationXNokia9000CommunicatorAddOnSoftware public="1" get="inline" set="null" expr="cast &quot;application/x-nokia-9000-communicator-add-on-software&quot;" line="22" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-nokia-9000-communicator-add-on-software"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNokia9000CommunicatorAddOnSoftware>
	<ApplicationMime public="1" get="inline" set="null" expr="cast &quot;application/mime&quot;" line="23" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMime>
	<ApplicationArj public="1" get="inline" set="null" expr="cast &quot;application/arj&quot;" line="24" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/arj"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationArj>
	<ImageXJg public="1" get="inline" set="null" expr="cast &quot;image/x-jg&quot;" line="25" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-jg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXJg>
	<VideoXMsAsf public="1" get="inline" set="null" expr="cast &quot;video/x-ms-asf&quot;" line="26" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-ms-asf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXMsAsf>
	<TextXAsm public="1" get="inline" set="null" expr="cast &quot;text/x-asm&quot;" line="27" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-asm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXAsm>
	<TextAsp public="1" get="inline" set="null" expr="cast &quot;text/asp&quot;" line="28" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/asp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextAsp>
	<ApplicationXMplayer2 public="1" get="inline" set="null" expr="cast &quot;application/x-mplayer2&quot;" line="29" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mplayer2"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMplayer2>
	<AudioBasic public="1" get="inline" set="null" expr="cast &quot;audio/basic&quot;" line="30" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/basic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioBasic>
	<ApplicationXTroffMsvideo public="1" get="inline" set="null" expr="cast &quot;application/x-troff-msvideo&quot;" line="31" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-msvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroffMsvideo>
	<VideoAvi public="1" get="inline" set="null" expr="cast &quot;video/avi&quot;" line="32" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/avi"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoAvi>
	<VideoMsvideo public="1" get="inline" set="null" expr="cast &quot;video/msvideo&quot;" line="33" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/msvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoMsvideo>
	<VideoXMsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-msvideo&quot;" line="34" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-msvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXMsvideo>
	<VideoAvsVideo public="1" get="inline" set="null" expr="cast &quot;video/avs-video&quot;" line="35" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/avs-video"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoAvsVideo>
	<ApplicationXBcpio public="1" get="inline" set="null" expr="cast &quot;application/x-bcpio&quot;" line="36" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bcpio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBcpio>
	<ApplicationMacBinary public="1" get="inline" set="null" expr="cast &quot;application/mac-binary&quot;" line="37" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mac-binary"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMacBinary>
	<ApplicationMacbinary public="1" get="inline" set="null" expr="cast &quot;application/macbinary&quot;" line="38" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/macbinary"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMacbinary>
	<ApplicationXBinary public="1" get="inline" set="null" expr="cast &quot;application/x-binary&quot;" line="39" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-binary"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBinary>
	<ApplicationXMacbinary public="1" get="inline" set="null" expr="cast &quot;application/x-macbinary&quot;" line="40" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-macbinary"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMacbinary>
	<ImageBmp public="1" get="inline" set="null" expr="cast &quot;image/bmp&quot;" line="41" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/bmp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageBmp>
	<ImageXWindowsBmp public="1" get="inline" set="null" expr="cast &quot;image/x-windows-bmp&quot;" line="42" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-windows-bmp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXWindowsBmp>
	<ApplicationBook public="1" get="inline" set="null" expr="cast &quot;application/book&quot;" line="43" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/book"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationBook>
	<ApplicationXBzip2 public="1" get="inline" set="null" expr="cast &quot;application/x-bzip2&quot;" line="44" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bzip2"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBzip2>
	<ApplicationXBsh public="1" get="inline" set="null" expr="cast &quot;application/x-bsh&quot;" line="45" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bsh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBsh>
	<ApplicationXBzip public="1" get="inline" set="null" expr="cast &quot;application/x-bzip&quot;" line="46" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bzip"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBzip>
	<TextPlain public="1" get="inline" set="null" expr="cast &quot;text/plain&quot;" line="47" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/plain"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextPlain>
	<TextXC public="1" get="inline" set="null" expr="cast &quot;text/x-c&quot;" line="48" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-c"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXC>
	<ApplicationVndMsPkiSeccat public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.seccat&quot;" line="49" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.seccat"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsPkiSeccat>
	<ApplicationClariscad public="1" get="inline" set="null" expr="cast &quot;application/clariscad&quot;" line="50" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/clariscad"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationClariscad>
	<ApplicationXCocoa public="1" get="inline" set="null" expr="cast &quot;application/x-cocoa&quot;" line="51" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cocoa"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCocoa>
	<ApplicationCdf public="1" get="inline" set="null" expr="cast &quot;application/cdf&quot;" line="52" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/cdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationCdf>
	<ApplicationXCdf public="1" get="inline" set="null" expr="cast &quot;application/x-cdf&quot;" line="53" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCdf>
	<ApplicationXNetcdf public="1" get="inline" set="null" expr="cast &quot;application/x-netcdf&quot;" line="54" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-netcdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNetcdf>
	<ApplicationPkixCert public="1" get="inline" set="null" expr="cast &quot;application/pkix-cert&quot;" line="55" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkix-cert"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkixCert>
	<ApplicationXX509CaCert public="1" get="inline" set="null" expr="cast &quot;application/x-x509-ca-cert&quot;" line="56" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-x509-ca-cert"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXX509CaCert>
	<ApplicationXChat public="1" get="inline" set="null" expr="cast &quot;application/x-chat&quot;" line="57" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-chat"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXChat>
	<ApplicationJava public="1" get="inline" set="null" expr="cast &quot;application/java&quot;" line="58" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/java"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationJava>
	<ApplicationJavaByteCode public="1" get="inline" set="null" expr="cast &quot;application/java-byte-code&quot;" line="59" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/java-byte-code"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationJavaByteCode>
	<ApplicationXJavaClass public="1" get="inline" set="null" expr="cast &quot;application/x-java-class&quot;" line="60" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-java-class"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXJavaClass>
	<ApplicationXCpio public="1" get="inline" set="null" expr="cast &quot;application/x-cpio&quot;" line="61" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cpio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCpio>
	<ApplicationMacCompactpro public="1" get="inline" set="null" expr="cast &quot;application/mac-compactpro&quot;" line="62" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mac-compactpro"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMacCompactpro>
	<ApplicationPkcsCrl public="1" get="inline" set="null" expr="cast &quot;application/pkcs-crl&quot;" line="63" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs-crl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcsCrl>
	<ApplicationXCsh public="1" get="inline" set="null" expr="cast &quot;application/x-csh&quot;" line="64" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-csh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCsh>
	<TextCss public="1" get="inline" set="null" expr="cast &quot;text/css&quot;" line="65" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/css"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextCss>
	<ApplicationXDirector public="1" get="inline" set="null" expr="cast &quot;application/x-director&quot;" line="66" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-director"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXDirector>
	<ApplicationXDeepv public="1" get="inline" set="null" expr="cast &quot;application/x-deepv&quot;" line="67" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-deepv"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXDeepv>
	<VideoXDv public="1" get="inline" set="null" expr="cast &quot;video/x-dv&quot;" line="68" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-dv"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXDv>
	<VideoDl public="1" get="inline" set="null" expr="cast &quot;video/dl&quot;" line="69" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/dl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoDl>
	<ApplicationMsword public="1" get="inline" set="null" expr="cast &quot;application/msword&quot;" line="70" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/msword"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMsword>
	<ApplicationCommonground public="1" get="inline" set="null" expr="cast &quot;application/commonground&quot;" line="71" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/commonground"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationCommonground>
	<ApplicationDrafting public="1" get="inline" set="null" expr="cast &quot;application/drafting&quot;" line="72" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/drafting"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationDrafting>
	<ApplicationXDvi public="1" get="inline" set="null" expr="cast &quot;application/x-dvi&quot;" line="73" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-dvi"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXDvi>
	<DrawingXDwf public="1" get="inline" set="null" expr="cast &quot;drawing/x-dwf (old)&quot;" line="74" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "drawing/x-dwf (old)"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DrawingXDwf>
	<ApplicationAcad public="1" get="inline" set="null" expr="cast &quot;application/acad&quot;" line="75" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/acad"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationAcad>
	<ApplicationDxf public="1" get="inline" set="null" expr="cast &quot;application/dxf&quot;" line="76" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/dxf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationDxf>
	<TextXScriptElisp public="1" get="inline" set="null" expr="cast &quot;text/x-script.elisp&quot;" line="77" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.elisp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptElisp>
	<ApplicationXBytecodeElisp public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.elisp (compiled elisp)&quot;" line="78" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bytecode.elisp (compiled elisp)"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBytecodeElisp>
	<ApplicationXEnvoy public="1" get="inline" set="null" expr="cast &quot;application/x-envoy&quot;" line="79" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-envoy"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXEnvoy>
	<ApplicationXEsrehber public="1" get="inline" set="null" expr="cast &quot;application/x-esrehber&quot;" line="80" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-esrehber"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXEsrehber>
	<TextXSetext public="1" get="inline" set="null" expr="cast &quot;text/x-setext&quot;" line="81" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-setext"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXSetext>
	<ApplicationEnvoy public="1" get="inline" set="null" expr="cast &quot;application/envoy&quot;" line="82" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/envoy"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationEnvoy>
	<TextXFortran public="1" get="inline" set="null" expr="cast &quot;text/x-fortran&quot;" line="83" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-fortran"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXFortran>
	<ApplicationVndFdf public="1" get="inline" set="null" expr="cast &quot;application/vnd.fdf&quot;" line="84" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.fdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndFdf>
	<ImageFif public="1" get="inline" set="null" expr="cast &quot;image/fif&quot;" line="85" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/fif"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageFif>
	<VideoFli public="1" get="inline" set="null" expr="cast &quot;video/fli&quot;" line="86" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/fli"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoFli>
	<ImageFlorian public="1" get="inline" set="null" expr="cast &quot;image/florian&quot;" line="87" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/florian"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageFlorian>
	<TextVndFmiFlexstor public="1" get="inline" set="null" expr="cast &quot;text/vnd.fmi.flexstor&quot;" line="88" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.fmi.flexstor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextVndFmiFlexstor>
	<VideoXAtomic3dFeature public="1" get="inline" set="null" expr="cast &quot;video/x-atomic3d-feature&quot;" line="89" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-atomic3d-feature"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXAtomic3dFeature>
	<ImageVndFpx public="1" get="inline" set="null" expr="cast &quot;image/vnd.fpx&quot;" line="90" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.fpx"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndFpx>
	<ApplicationFreeloader public="1" get="inline" set="null" expr="cast &quot;application/freeloader&quot;" line="91" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/freeloader"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationFreeloader>
	<AudioMake public="1" get="inline" set="null" expr="cast &quot;audio/make&quot;" line="92" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/make"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMake>
	<ImageG3fax public="1" get="inline" set="null" expr="cast &quot;image/g3fax&quot;" line="93" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/g3fax"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageG3fax>
	<ImageGif public="1" get="inline" set="null" expr="cast &quot;image/gif&quot;" line="94" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/gif"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageGif>
	<VideoGl public="1" get="inline" set="null" expr="cast &quot;video/gl&quot;" line="95" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/gl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoGl>
	<AudioXGsm public="1" get="inline" set="null" expr="cast &quot;audio/x-gsm&quot;" line="96" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-gsm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXGsm>
	<ApplicationXGsp public="1" get="inline" set="null" expr="cast &quot;application/x-gsp&quot;" line="97" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gsp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXGsp>
	<ApplicationXGss public="1" get="inline" set="null" expr="cast &quot;application/x-gss&quot;" line="98" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gss"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXGss>
	<ApplicationXGtar public="1" get="inline" set="null" expr="cast &quot;application/x-gtar&quot;" line="99" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gtar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXGtar>
	<ApplicationXCompressed public="1" get="inline" set="null" expr="cast &quot;application/x-compressed&quot;" line="100" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-compressed"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCompressed>
	<ApplicationXGzip public="1" get="inline" set="null" expr="cast &quot;application/x-gzip&quot;" line="101" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gzip"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXGzip>
	<ApplicationXHdf public="1" get="inline" set="null" expr="cast &quot;application/x-hdf&quot;" line="102" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-hdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXHdf>
	<ApplicationXHelpfile public="1" get="inline" set="null" expr="cast &quot;application/x-helpfile&quot;" line="103" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-helpfile"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXHelpfile>
	<TextXScript public="1" get="inline" set="null" expr="cast &quot;text/x-script&quot;" line="104" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScript>
	<ApplicationHlp public="1" get="inline" set="null" expr="cast &quot;application/hlp&quot;" line="105" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/hlp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationHlp>
	<ApplicationVndHpHpgl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-hpgl&quot;" line="106" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.hp-hpgl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndHpHpgl>
	<ApplicationBinhex public="1" get="inline" set="null" expr="cast &quot;application/binhex&quot;" line="107" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/binhex"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationBinhex>
	<ApplicationHta public="1" get="inline" set="null" expr="cast &quot;application/hta&quot;" line="108" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/hta"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationHta>
	<TextXComponent public="1" get="inline" set="null" expr="cast &quot;text/x-component&quot;" line="109" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-component"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXComponent>
	<TextWebviewhtml public="1" get="inline" set="null" expr="cast &quot;text/webviewhtml&quot;" line="110" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/webviewhtml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextWebviewhtml>
	<XConferenceXCooltalk public="1" get="inline" set="null" expr="cast &quot;x-conference/x-cooltalk&quot;" line="111" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-conference/x-cooltalk"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XConferenceXCooltalk>
	<ImageXIcon public="1" get="inline" set="null" expr="cast &quot;image/x-icon&quot;" line="112" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-icon"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXIcon>
	<ImageIef public="1" get="inline" set="null" expr="cast &quot;image/ief&quot;" line="113" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/ief"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageIef>
	<ApplicationIges public="1" get="inline" set="null" expr="cast &quot;application/iges&quot;" line="114" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/iges"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationIges>
	<ApplicationXIma public="1" get="inline" set="null" expr="cast &quot;application/x-ima&quot;" line="115" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ima"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXIma>
	<ApplicationXHttpdImap public="1" get="inline" set="null" expr="cast &quot;application/x-httpd-imap&quot;" line="116" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-httpd-imap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXHttpdImap>
	<ApplicationInf public="1" get="inline" set="null" expr="cast &quot;application/inf&quot;" line="117" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/inf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationInf>
	<ApplicationXInternettSignup public="1" get="inline" set="null" expr="cast &quot;application/x-internett-signup&quot;" line="118" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-internett-signup"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXInternettSignup>
	<ApplicationXIp2 public="1" get="inline" set="null" expr="cast &quot;application/x-ip2&quot;" line="119" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ip2"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXIp2>
	<VideoXIsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-isvideo&quot;" line="120" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-isvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXIsvideo>
	<AudioIt public="1" get="inline" set="null" expr="cast &quot;audio/it&quot;" line="121" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/it"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioIt>
	<ApplicationXInventor public="1" get="inline" set="null" expr="cast &quot;application/x-inventor&quot;" line="122" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-inventor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXInventor>
	<IWorldIVrml public="1" get="inline" set="null" expr="cast &quot;i-world/i-vrml&quot;" line="123" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "i-world/i-vrml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IWorldIVrml>
	<ApplicationXLivescreen public="1" get="inline" set="null" expr="cast &quot;application/x-livescreen&quot;" line="124" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-livescreen"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLivescreen>
	<AudioXJam public="1" get="inline" set="null" expr="cast &quot;audio/x-jam&quot;" line="125" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-jam"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXJam>
	<ApplicationXJavaCommerce public="1" get="inline" set="null" expr="cast &quot;application/x-java-commerce&quot;" line="126" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-java-commerce"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXJavaCommerce>
	<ImageJpeg public="1" get="inline" set="null" expr="cast &quot;image/jpeg&quot;" line="127" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/jpeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageJpeg>
	<ImageXJps public="1" get="inline" set="null" expr="cast &quot;image/x-jps&quot;" line="128" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-jps"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXJps>
	<TextJavascript public="1" get="inline" set="null" expr="cast &quot;text/javascript&quot;" line="129" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/javascript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextJavascript>
	<ApplicationJson public="1" get="inline" set="null" expr="cast &quot;application/json&quot;" line="130" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/json"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationJson>
	<ApplicationJavascript public="1" get="inline" set="null" expr="cast &quot;application/javascript&quot;" line="131" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/javascript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationJavascript>
	<ImageJutvision public="1" get="inline" set="null" expr="cast &quot;image/jutvision&quot;" line="132" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/jutvision"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageJutvision>
	<AudioMidi public="1" get="inline" set="null" expr="cast &quot;audio/midi&quot;" line="133" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/midi"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMidi>
	<ApplicationXKsh public="1" get="inline" set="null" expr="cast &quot;application/x-ksh&quot;" line="134" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ksh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXKsh>
	<AudioNspaudio public="1" get="inline" set="null" expr="cast &quot;audio/nspaudio&quot;" line="135" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/nspaudio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioNspaudio>
	<AudioXLiveaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-liveaudio&quot;" line="136" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-liveaudio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXLiveaudio>
	<ApplicationXLatex public="1" get="inline" set="null" expr="cast &quot;application/x-latex&quot;" line="137" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-latex"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLatex>
	<ApplicationXLisp public="1" get="inline" set="null" expr="cast &quot;application/x-lisp&quot;" line="138" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lisp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLisp>
	<TextXLaAsf public="1" get="inline" set="null" expr="cast &quot;text/x-la-asf&quot;" line="139" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-la-asf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXLaAsf>
	<ApplicationLzx public="1" get="inline" set="null" expr="cast &quot;application/lzx&quot;" line="140" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/lzx"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationLzx>
	<VideoMpeg public="1" get="inline" set="null" expr="cast &quot;video/mpeg&quot;" line="141" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/mpeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoMpeg>
	<AudioMpeg public="1" get="inline" set="null" expr="cast &quot;audio/mpeg&quot;" line="142" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mpeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMpeg>
	<AudioXMpequrl public="1" get="inline" set="null" expr="cast &quot;audio/x-mpequrl&quot;" line="143" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-mpequrl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXMpequrl>
	<ApplicationXTroffMan public="1" get="inline" set="null" expr="cast &quot;application/x-troff-man&quot;" line="144" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-man"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroffMan>
	<ApplicationXNavimap public="1" get="inline" set="null" expr="cast &quot;application/x-navimap&quot;" line="145" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navimap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNavimap>
	<ApplicationMbedlet public="1" get="inline" set="null" expr="cast &quot;application/mbedlet&quot;" line="146" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mbedlet"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMbedlet>
	<ApplicationXMagicCapPackage10 public="1" get="inline" set="null" expr="cast &quot;application/x-magic-cap-package-1.0&quot;" line="147" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-magic-cap-package-1.0"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMagicCapPackage10>
	<ApplicationMcad public="1" get="inline" set="null" expr="cast &quot;application/mcad&quot;" line="148" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mcad"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMcad>
	<ImageVasa public="1" get="inline" set="null" expr="cast &quot;image/vasa&quot;" line="149" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vasa"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVasa>
	<ApplicationNetmc public="1" get="inline" set="null" expr="cast &quot;application/netmc&quot;" line="150" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/netmc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationNetmc>
	<ApplicationXTroffMe public="1" get="inline" set="null" expr="cast &quot;application/x-troff-me&quot;" line="151" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-me"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroffMe>
	<MessageRfc822 public="1" get="inline" set="null" expr="cast &quot;message/rfc822&quot;" line="152" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "message/rfc822"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MessageRfc822>
	<ApplicationXMif public="1" get="inline" set="null" expr="cast &quot;application/x-mif&quot;" line="153" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mif"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMif>
	<WwwMime public="1" get="inline" set="null" expr="cast &quot;www/mime&quot;" line="154" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "www/mime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WwwMime>
	<AudioXVndAudioexplosionMjuicemediafile public="1" get="inline" set="null" expr="cast &quot;audio/x-vnd.audioexplosion.mjuicemediafile&quot;" line="155" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-vnd.audioexplosion.mjuicemediafile"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXVndAudioexplosionMjuicemediafile>
	<VideoXMotionJpeg public="1" get="inline" set="null" expr="cast &quot;video/x-motion-jpeg&quot;" line="156" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-motion-jpeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXMotionJpeg>
	<ApplicationBase64 public="1" get="inline" set="null" expr="cast &quot;application/base64&quot;" line="157" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/base64"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationBase64>
	<AudioMod public="1" get="inline" set="null" expr="cast &quot;audio/mod&quot;" line="158" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mod"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMod>
	<VideoQuicktime public="1" get="inline" set="null" expr="cast &quot;video/quicktime&quot;" line="159" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/quicktime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoQuicktime>
	<VideoXSgiMovie public="1" get="inline" set="null" expr="cast &quot;video/x-sgi-movie&quot;" line="160" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-sgi-movie"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXSgiMovie>
	<AudioMpeg3 public="1" get="inline" set="null" expr="cast &quot;audio/mpeg3&quot;" line="161" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mpeg3"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMpeg3>
	<ApplicationXProject public="1" get="inline" set="null" expr="cast &quot;application/x-project&quot;" line="162" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-project"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXProject>
	<ApplicationVndMsProject public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-project&quot;" line="163" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-project"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsProject>
	<ApplicationMarc public="1" get="inline" set="null" expr="cast &quot;application/marc&quot;" line="164" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/marc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMarc>
	<ApplicationXTroffMs public="1" get="inline" set="null" expr="cast &quot;application/x-troff-ms&quot;" line="165" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-ms"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroffMs>
	<ApplicationXVndAudioexplosionMzz public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.audioexplosion.mzz&quot;" line="166" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vnd.audioexplosion.mzz"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXVndAudioexplosionMzz>
	<ImageNaplps public="1" get="inline" set="null" expr="cast &quot;image/naplps&quot;" line="167" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/naplps"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageNaplps>
	<ApplicationVndNokiaConfigurationMessage public="1" get="inline" set="null" expr="cast &quot;application/vnd.nokia.configuration-message&quot;" line="168" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.nokia.configuration-message"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndNokiaConfigurationMessage>
	<ImageXNiff public="1" get="inline" set="null" expr="cast &quot;image/x-niff&quot;" line="169" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-niff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXNiff>
	<ApplicationXMixTransfer public="1" get="inline" set="null" expr="cast &quot;application/x-mix-transfer&quot;" line="170" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mix-transfer"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMixTransfer>
	<ApplicationXConference public="1" get="inline" set="null" expr="cast &quot;application/x-conference&quot;" line="171" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-conference"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXConference>
	<ApplicationXNavidoc public="1" get="inline" set="null" expr="cast &quot;application/x-navidoc&quot;" line="172" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navidoc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNavidoc>
	<ApplicationOda public="1" get="inline" set="null" expr="cast &quot;application/oda&quot;" line="173" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/oda"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationOda>
	<ApplicationXOmc public="1" get="inline" set="null" expr="cast &quot;application/x-omc&quot;" line="174" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXOmc>
	<ApplicationXOmcdatamaker public="1" get="inline" set="null" expr="cast &quot;application/x-omcdatamaker&quot;" line="175" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omcdatamaker"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXOmcdatamaker>
	<ApplicationXOmcregerator public="1" get="inline" set="null" expr="cast &quot;application/x-omcregerator&quot;" line="176" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omcregerator"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXOmcregerator>
	<TextXPascal public="1" get="inline" set="null" expr="cast &quot;text/x-pascal&quot;" line="177" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-pascal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXPascal>
	<ApplicationPkcs10 public="1" get="inline" set="null" expr="cast &quot;application/pkcs10&quot;" line="178" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs10"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcs10>
	<ApplicationPkcs12 public="1" get="inline" set="null" expr="cast &quot;application/pkcs-12&quot;" line="179" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs-12"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcs12>
	<ApplicationXPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-signature&quot;" line="180" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-signature"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPkcs7Signature>
	<ApplicationPkcs7Mime public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-mime&quot;" line="181" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs7-mime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcs7Mime>
	<ApplicationXPkcs7Certreqresp public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certreqresp&quot;" line="182" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-certreqresp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPkcs7Certreqresp>
	<ApplicationPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-signature&quot;" line="183" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs7-signature"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcs7Signature>
	<ApplicationPro_eng public="1" get="inline" set="null" expr="cast &quot;application/pro_eng&quot;" line="184" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pro_eng"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPro_eng>
	<TextPascal public="1" get="inline" set="null" expr="cast &quot;text/pascal&quot;" line="185" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/pascal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextPascal>
	<ImageXPortableBitmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-bitmap&quot;" line="186" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-bitmap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPortableBitmap>
	<ApplicationVndHpPcl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-pcl&quot;" line="187" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.hp-pcl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndHpPcl>
	<ImageXPict public="1" get="inline" set="null" expr="cast &quot;image/x-pict&quot;" line="188" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-pict"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPict>
	<ImageXPcx public="1" get="inline" set="null" expr="cast &quot;image/x-pcx&quot;" line="189" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-pcx"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPcx>
	<ChemicalXPdb public="1" get="inline" set="null" expr="cast &quot;chemical/x-pdb&quot;" line="190" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "chemical/x-pdb"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ChemicalXPdb>
	<ApplicationPdf public="1" get="inline" set="null" expr="cast &quot;application/pdf&quot;" line="191" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPdf>
	<ImageXPortableGraymap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-graymap&quot;" line="192" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-graymap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPortableGraymap>
	<ImagePict public="1" get="inline" set="null" expr="cast &quot;image/pict&quot;" line="193" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/pict"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImagePict>
	<ApplicationXNewtonCompatiblePkg public="1" get="inline" set="null" expr="cast &quot;application/x-newton-compatible-pkg&quot;" line="194" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-newton-compatible-pkg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNewtonCompatiblePkg>
	<ApplicationVndMsPkiPko public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.pko&quot;" line="195" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.pko"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsPkiPko>
	<ApplicationXPixclscript public="1" get="inline" set="null" expr="cast &quot;application/x-pixclscript&quot;" line="196" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pixclscript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPixclscript>
	<ImageXXpixmap public="1" get="inline" set="null" expr="cast &quot;image/x-xpixmap&quot;" line="197" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xpixmap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXXpixmap>
	<ApplicationXPagemaker public="1" get="inline" set="null" expr="cast &quot;application/x-pagemaker&quot;" line="198" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pagemaker"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPagemaker>
	<ImagePng public="1" get="inline" set="null" expr="cast &quot;image/png&quot;" line="199" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/png"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImagePng>
	<ApplicationXPortableAnymap public="1" get="inline" set="null" expr="cast &quot;application/x-portable-anymap&quot;" line="200" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-portable-anymap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPortableAnymap>
	<ApplicationMspowerpoint public="1" get="inline" set="null" expr="cast &quot;application/mspowerpoint&quot;" line="201" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mspowerpoint"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMspowerpoint>
	<ModelXPov public="1" get="inline" set="null" expr="cast &quot;model/x-pov&quot;" line="202" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "model/x-pov"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ModelXPov>
	<ApplicationVndMsPowerpoint public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-powerpoint&quot;" line="203" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-powerpoint"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsPowerpoint>
	<ImageXPortablePixmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-pixmap&quot;" line="204" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-pixmap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPortablePixmap>
	<ApplicationXFreelance public="1" get="inline" set="null" expr="cast &quot;application/x-freelance&quot;" line="205" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-freelance"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXFreelance>
	<PaleovuXPv public="1" get="inline" set="null" expr="cast &quot;paleovu/x-pv&quot;" line="206" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "paleovu/x-pv"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PaleovuXPv>
	<TextXScriptPhyton public="1" get="inline" set="null" expr="cast &quot;text/x-script.phyton&quot;" line="207" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.phyton"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptPhyton>
	<ApplicationXBytecodePython public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.python&quot;" line="208" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bytecode.python"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBytecodePython>
	<AudioVndQcelp public="1" get="inline" set="null" expr="cast &quot;audio/vnd.qcelp&quot;" line="209" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/vnd.qcelp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioVndQcelp>
	<ImageXQuicktime public="1" get="inline" set="null" expr="cast &quot;image/x-quicktime&quot;" line="210" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-quicktime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXQuicktime>
	<VideoXQtc public="1" get="inline" set="null" expr="cast &quot;video/x-qtc&quot;" line="211" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-qtc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXQtc>
	<AudioXPnRealaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio&quot;" line="212" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-pn-realaudio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXPnRealaudio>
	<ApplicationXCmuRaster public="1" get="inline" set="null" expr="cast &quot;application/x-cmu-raster&quot;" line="213" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cmu-raster"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCmuRaster>
	<ImageCmuRaster public="1" get="inline" set="null" expr="cast &quot;image/cmu-raster&quot;" line="214" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/cmu-raster"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageCmuRaster>
	<TextXScriptRexx public="1" get="inline" set="null" expr="cast &quot;text/x-script.rexx&quot;" line="215" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.rexx"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptRexx>
	<ImageVndRnRealflash public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realflash&quot;" line="216" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.rn-realflash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndRnRealflash>
	<ImageXRgb public="1" get="inline" set="null" expr="cast &quot;image/x-rgb&quot;" line="217" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-rgb"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXRgb>
	<ApplicationVndRnRealmedia public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realmedia&quot;" line="218" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.rn-realmedia"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndRnRealmedia>
	<AudioMid public="1" get="inline" set="null" expr="cast &quot;audio/mid&quot;" line="219" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mid"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMid>
	<ApplicationRingingTones public="1" get="inline" set="null" expr="cast &quot;application/ringing-tones&quot;" line="220" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/ringing-tones"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationRingingTones>
	<ApplicationVndRnRealplayer public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realplayer&quot;" line="221" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.rn-realplayer"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndRnRealplayer>
	<ApplicationXTroff public="1" get="inline" set="null" expr="cast &quot;application/x-troff&quot;" line="222" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroff>
	<ImageVndRnRealpix public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realpix&quot;" line="223" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.rn-realpix"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndRnRealpix>
	<AudioXPnRealaudioPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio-plugin&quot;" line="224" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-pn-realaudio-plugin"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXPnRealaudioPlugin>
	<TextRichtext public="1" get="inline" set="null" expr="cast &quot;text/richtext&quot;" line="225" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/richtext"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextRichtext>
	<ApplicationRtf public="1" get="inline" set="null" expr="cast &quot;application/rtf&quot;" line="226" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/rtf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationRtf>
	<VideoVndRnRealvideo public="1" get="inline" set="null" expr="cast &quot;video/vnd.rn-realvideo&quot;" line="227" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vnd.rn-realvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoVndRnRealvideo>
	<AudioS3m public="1" get="inline" set="null" expr="cast &quot;audio/s3m&quot;" line="228" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/s3m"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioS3m>
	<ApplicationXTbook public="1" get="inline" set="null" expr="cast &quot;application/x-tbook&quot;" line="229" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tbook"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTbook>
	<ApplicationXLotusscreencam public="1" get="inline" set="null" expr="cast &quot;application/x-lotusscreencam&quot;" line="230" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lotusscreencam"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLotusscreencam>
	<ApplicationSdp public="1" get="inline" set="null" expr="cast &quot;application/sdp&quot;" line="231" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sdp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSdp>
	<ApplicationSounder public="1" get="inline" set="null" expr="cast &quot;application/sounder&quot;" line="232" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sounder"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSounder>
	<ApplicationSea public="1" get="inline" set="null" expr="cast &quot;application/sea&quot;" line="233" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sea"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSea>
	<ApplicationSet public="1" get="inline" set="null" expr="cast &quot;application/set&quot;" line="234" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/set"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSet>
	<AudioXPsid public="1" get="inline" set="null" expr="cast &quot;audio/x-psid&quot;" line="235" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-psid"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXPsid>
	<ApplicationXSit public="1" get="inline" set="null" expr="cast &quot;application/x-sit&quot;" line="236" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sit"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSit>
	<ApplicationXKoan public="1" get="inline" set="null" expr="cast &quot;application/x-koan&quot;" line="237" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-koan"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXKoan>
	<ApplicationXSeelogo public="1" get="inline" set="null" expr="cast &quot;application/x-seelogo&quot;" line="238" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-seelogo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSeelogo>
	<ApplicationSmil public="1" get="inline" set="null" expr="cast &quot;application/smil&quot;" line="239" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/smil"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSmil>
	<ApplicationSolids public="1" get="inline" set="null" expr="cast &quot;application/solids&quot;" line="240" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/solids"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSolids>
	<ApplicationXPkcs7Certificates public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certificates&quot;" line="241" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-certificates"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPkcs7Certificates>
	<ApplicationFuturesplash public="1" get="inline" set="null" expr="cast &quot;application/futuresplash&quot;" line="242" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/futuresplash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationFuturesplash>
	<ApplicationXSprite public="1" get="inline" set="null" expr="cast &quot;application/x-sprite&quot;" line="243" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sprite"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSprite>
	<ApplicationXWaisSource public="1" get="inline" set="null" expr="cast &quot;application/x-wais-source&quot;" line="244" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-wais-source"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXWaisSource>
	<TextXServerParsedHtml public="1" get="inline" set="null" expr="cast &quot;text/x-server-parsed-html&quot;" line="245" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-server-parsed-html"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXServerParsedHtml>
	<ApplicationStreamingmedia public="1" get="inline" set="null" expr="cast &quot;application/streamingmedia&quot;" line="246" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/streamingmedia"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationStreamingmedia>
	<ApplicationVndMsPkiCertstore public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.certstore&quot;" line="247" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.certstore"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsPkiCertstore>
	<ApplicationStep public="1" get="inline" set="null" expr="cast &quot;application/step&quot;" line="248" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/step"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationStep>
	<ApplicationSla public="1" get="inline" set="null" expr="cast &quot;application/sla&quot;" line="249" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sla"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSla>
	<ApplicationXSv4cpio public="1" get="inline" set="null" expr="cast &quot;application/x-sv4cpio&quot;" line="250" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sv4cpio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSv4cpio>
	<ApplicationXSv4crc public="1" get="inline" set="null" expr="cast &quot;application/x-sv4crc&quot;" line="251" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sv4crc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSv4crc>
	<ImageVndDwg public="1" get="inline" set="null" expr="cast &quot;image/vnd.dwg&quot;" line="252" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.dwg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndDwg>
	<ApplicationXWorld public="1" get="inline" set="null" expr="cast &quot;application/x-world&quot;" line="253" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-world"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXWorld>
	<ApplicationXShockwaveFlash public="1" get="inline" set="null" expr="cast &quot;application/x-shockwave-flash&quot;" line="254" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-shockwave-flash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXShockwaveFlash>
	<TextXSpeech public="1" get="inline" set="null" expr="cast &quot;text/x-speech&quot;" line="255" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-speech"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXSpeech>
	<ApplicationXTar public="1" get="inline" set="null" expr="cast &quot;application/x-tar&quot;" line="256" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTar>
	<ApplicationToolbook public="1" get="inline" set="null" expr="cast &quot;application/toolbook&quot;" line="257" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/toolbook"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationToolbook>
	<ApplicationXTcl public="1" get="inline" set="null" expr="cast &quot;application/x-tcl&quot;" line="258" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tcl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTcl>
	<TextXScriptTcsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.tcsh&quot;" line="259" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.tcsh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptTcsh>
	<ApplicationXTex public="1" get="inline" set="null" expr="cast &quot;application/x-tex&quot;" line="260" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tex"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTex>
	<ApplicationXTexinfo public="1" get="inline" set="null" expr="cast &quot;application/x-texinfo&quot;" line="261" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-texinfo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTexinfo>
	<ApplicationGnutar public="1" get="inline" set="null" expr="cast &quot;application/gnutar&quot;" line="262" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/gnutar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationGnutar>
	<ImageTiff public="1" get="inline" set="null" expr="cast &quot;image/tiff&quot;" line="263" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/tiff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageTiff>
	<AudioTspAudio public="1" get="inline" set="null" expr="cast &quot;audio/tsp-audio&quot;" line="264" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/tsp-audio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioTspAudio>
	<ApplicationDsptype public="1" get="inline" set="null" expr="cast &quot;application/dsptype&quot;" line="265" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/dsptype"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationDsptype>
	<TextTabSeparatedValues public="1" get="inline" set="null" expr="cast &quot;text/tab-separated-values&quot;" line="266" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/tab-separated-values"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextTabSeparatedValues>
	<TextXUil public="1" get="inline" set="null" expr="cast &quot;text/x-uil&quot;" line="267" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-uil"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXUil>
	<TextUriList public="1" get="inline" set="null" expr="cast &quot;text/uri-list&quot;" line="268" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/uri-list"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextUriList>
	<ApplicationIDeas public="1" get="inline" set="null" expr="cast &quot;application/i-deas&quot;" line="269" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/i-deas"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationIDeas>
	<ApplicationXUstar public="1" get="inline" set="null" expr="cast &quot;application/x-ustar&quot;" line="270" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ustar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXUstar>
	<TextXUuencode public="1" get="inline" set="null" expr="cast &quot;text/x-uuencode&quot;" line="271" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-uuencode"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXUuencode>
	<ApplicationXCdlink public="1" get="inline" set="null" expr="cast &quot;application/x-cdlink&quot;" line="272" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cdlink"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCdlink>
	<TextXVcalendar public="1" get="inline" set="null" expr="cast &quot;text/x-vcalendar&quot;" line="273" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-vcalendar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXVcalendar>
	<ApplicationVda public="1" get="inline" set="null" expr="cast &quot;application/vda&quot;" line="274" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vda"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVda>
	<VideoVdo public="1" get="inline" set="null" expr="cast &quot;video/vdo&quot;" line="275" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vdo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoVdo>
	<ApplicationGroupwise public="1" get="inline" set="null" expr="cast &quot;application/groupwise&quot;" line="276" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/groupwise"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationGroupwise>
	<VideoVivo public="1" get="inline" set="null" expr="cast &quot;video/vivo&quot;" line="277" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vivo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoVivo>
	<ApplicationVocaltecMediaDesc public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-desc&quot;" line="278" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vocaltec-media-desc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVocaltecMediaDesc>
	<ApplicationVocaltecMediaFile public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-file&quot;" line="279" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vocaltec-media-file"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVocaltecMediaFile>
	<AudioVoc public="1" get="inline" set="null" expr="cast &quot;audio/voc&quot;" line="280" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/voc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioVoc>
	<VideoVosaic public="1" get="inline" set="null" expr="cast &quot;video/vosaic&quot;" line="281" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vosaic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoVosaic>
	<AudioVoxware public="1" get="inline" set="null" expr="cast &quot;audio/voxware&quot;" line="282" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/voxware"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioVoxware>
	<AudioXTwinvqPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq-plugin&quot;" line="283" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-twinvq-plugin"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXTwinvqPlugin>
	<AudioXTwinvq public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq&quot;" line="284" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-twinvq"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXTwinvq>
	<ApplicationXVrml public="1" get="inline" set="null" expr="cast &quot;application/x-vrml&quot;" line="285" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vrml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXVrml>
	<XWorldXVrt public="1" get="inline" set="null" expr="cast &quot;x-world/x-vrt&quot;" line="286" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-world/x-vrt"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XWorldXVrt>
	<ApplicationXVisio public="1" get="inline" set="null" expr="cast &quot;application/x-visio&quot;" line="287" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-visio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXVisio>
	<ApplicationWordperfect60 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.0&quot;" line="288" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect6.0"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationWordperfect60>
	<ApplicationWordperfect61 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.1&quot;" line="289" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect6.1"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationWordperfect61>
	<AudioWav public="1" get="inline" set="null" expr="cast &quot;audio/wav&quot;" line="290" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/wav"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioWav>
	<ApplicationXQpro public="1" get="inline" set="null" expr="cast &quot;application/x-qpro&quot;" line="291" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-qpro"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXQpro>
	<ImageVndWapWbmp public="1" get="inline" set="null" expr="cast &quot;image/vnd.wap.wbmp&quot;" line="292" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.wap.wbmp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndWapWbmp>
	<ApplicationVndXara public="1" get="inline" set="null" expr="cast &quot;application/vnd.xara&quot;" line="293" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.xara"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndXara>
	<ImageWebp public="1" get="inline" set="null" expr="cast &quot;image/webp&quot;" line="294" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/webp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageWebp>
	<ApplicationX123 public="1" get="inline" set="null" expr="cast &quot;application/x-123&quot;" line="295" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-123"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationX123>
	<WindowsMetafile public="1" get="inline" set="null" expr="cast &quot;windows/metafile&quot;" line="296" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "windows/metafile"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WindowsMetafile>
	<TextVndWapWml public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wml&quot;" line="297" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.wap.wml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextVndWapWml>
	<ApplicationVndWapWmlc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlc&quot;" line="298" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.wap.wmlc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndWapWmlc>
	<TextVndWapWmlscript public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wmlscript&quot;" line="299" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.wap.wmlscript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextVndWapWmlscript>
	<ApplicationVndWapWmlscriptc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlscriptc&quot;" line="300" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.wap.wmlscriptc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndWapWmlscriptc>
	<ApplicationWordperfect public="1" get="inline" set="null" expr="cast &quot;application/wordperfect&quot;" line="301" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationWordperfect>
	<ApplicationXLotus public="1" get="inline" set="null" expr="cast &quot;application/x-lotus&quot;" line="302" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lotus"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLotus>
	<ApplicationMswrite public="1" get="inline" set="null" expr="cast &quot;application/mswrite&quot;" line="303" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mswrite"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMswrite>
	<ModelVrml public="1" get="inline" set="null" expr="cast &quot;model/vrml&quot;" line="304" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "model/vrml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ModelVrml>
	<TextScriplet public="1" get="inline" set="null" expr="cast &quot;text/scriplet&quot;" line="305" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/scriplet"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextScriplet>
	<ApplicationXWintalk public="1" get="inline" set="null" expr="cast &quot;application/x-wintalk&quot;" line="306" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-wintalk"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXWintalk>
	<ImageXXbitmap public="1" get="inline" set="null" expr="cast &quot;image/x-xbitmap&quot;" line="307" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xbitmap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXXbitmap>
	<VideoXAmtDemorun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-demorun&quot;" line="308" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-amt-demorun"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXAmtDemorun>
	<XglDrawing public="1" get="inline" set="null" expr="cast &quot;xgl/drawing&quot;" line="309" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "xgl/drawing"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XglDrawing>
	<ImageVndXiff public="1" get="inline" set="null" expr="cast &quot;image/vnd.xiff&quot;" line="310" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.xiff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndXiff>
	<ApplicationExcel public="1" get="inline" set="null" expr="cast &quot;application/excel&quot;" line="311" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/excel"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationExcel>
	<AudioXm public="1" get="inline" set="null" expr="cast &quot;audio/xm&quot;" line="312" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/xm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXm>
	<ApplicationXml public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="313" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/xml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXml>
	<XglMovie public="1" get="inline" set="null" expr="cast &quot;xgl/movie&quot;" line="314" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "xgl/movie"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XglMovie>
	<ApplicationXVndLsXpix public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.ls-xpix&quot;" line="315" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vnd.ls-xpix"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXVndLsXpix>
	<VideoXAmtShowrun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-showrun&quot;" line="316" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-amt-showrun"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXAmtShowrun>
	<ImageXXwd public="1" get="inline" set="null" expr="cast &quot;image/x-xwd&quot;" line="317" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xwd"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXXwd>
	<ApplicationXCompress public="1" get="inline" set="null" expr="cast &quot;application/x-compress&quot;" line="318" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-compress"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCompress>
	<MultipartXZip public="1" get="inline" set="null" expr="cast &quot;multipart/x-zip&quot;" line="319" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "multipart/x-zip"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MultipartXZip>
	<TextXScriptZsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.zsh&quot;" line="320" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.zsh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptZsh>
	<ImageAvif public="1" get="inline" set="null" expr="cast &quot;image/avif&quot;" line="321" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/avif"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageAvif>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Mime.Mime_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Mime.hx" private="1" module="haxe.io.Mime" extern="1" final="1">
		<XWorldX3dmf public="1" get="inline" set="null" expr="cast &quot;x-world/x-3dmf&quot;" line="8" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-world/x-3dmf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XWorldX3dmf>
		<ApplicationOctetStream public="1" get="inline" set="null" expr="cast &quot;application/octet-stream&quot;" line="9" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/octet-stream"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationOctetStream>
		<ApplicationXAuthorwareBin public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-bin&quot;" line="10" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-bin"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXAuthorwareBin>
		<ApplicationXAuthorwareMap public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-map&quot;" line="11" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-map"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXAuthorwareMap>
		<ApplicationXAuthorwareSeg public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-seg&quot;" line="12" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-seg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXAuthorwareSeg>
		<TextVndAbc public="1" get="inline" set="null" expr="cast &quot;text/vnd.abc&quot;" line="13" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.abc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextVndAbc>
		<TextHtml public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="14" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/html"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextHtml>
		<VideoAnimaflex public="1" get="inline" set="null" expr="cast &quot;video/animaflex&quot;" line="15" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/animaflex"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoAnimaflex>
		<ApplicationPostscript public="1" get="inline" set="null" expr="cast &quot;application/postscript&quot;" line="16" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/postscript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPostscript>
		<AudioAiff public="1" get="inline" set="null" expr="cast &quot;audio/aiff&quot;" line="17" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/aiff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioAiff>
		<AudioXAiff public="1" get="inline" set="null" expr="cast &quot;audio/x-aiff&quot;" line="18" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-aiff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXAiff>
		<ApplicationXAim public="1" get="inline" set="null" expr="cast &quot;application/x-aim&quot;" line="19" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-aim"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXAim>
		<TextXAudiosoftIntra public="1" get="inline" set="null" expr="cast &quot;text/x-audiosoft-intra&quot;" line="20" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-audiosoft-intra"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXAudiosoftIntra>
		<ApplicationXNaviAnimation public="1" get="inline" set="null" expr="cast &quot;application/x-navi-animation&quot;" line="21" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navi-animation"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNaviAnimation>
		<ApplicationXNokia9000CommunicatorAddOnSoftware public="1" get="inline" set="null" expr="cast &quot;application/x-nokia-9000-communicator-add-on-software&quot;" line="22" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-nokia-9000-communicator-add-on-software"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNokia9000CommunicatorAddOnSoftware>
		<ApplicationMime public="1" get="inline" set="null" expr="cast &quot;application/mime&quot;" line="23" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMime>
		<ApplicationArj public="1" get="inline" set="null" expr="cast &quot;application/arj&quot;" line="24" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/arj"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationArj>
		<ImageXJg public="1" get="inline" set="null" expr="cast &quot;image/x-jg&quot;" line="25" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-jg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXJg>
		<VideoXMsAsf public="1" get="inline" set="null" expr="cast &quot;video/x-ms-asf&quot;" line="26" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-ms-asf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXMsAsf>
		<TextXAsm public="1" get="inline" set="null" expr="cast &quot;text/x-asm&quot;" line="27" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-asm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXAsm>
		<TextAsp public="1" get="inline" set="null" expr="cast &quot;text/asp&quot;" line="28" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/asp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextAsp>
		<ApplicationXMplayer2 public="1" get="inline" set="null" expr="cast &quot;application/x-mplayer2&quot;" line="29" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mplayer2"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMplayer2>
		<AudioBasic public="1" get="inline" set="null" expr="cast &quot;audio/basic&quot;" line="30" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/basic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioBasic>
		<ApplicationXTroffMsvideo public="1" get="inline" set="null" expr="cast &quot;application/x-troff-msvideo&quot;" line="31" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-msvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroffMsvideo>
		<VideoAvi public="1" get="inline" set="null" expr="cast &quot;video/avi&quot;" line="32" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/avi"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoAvi>
		<VideoMsvideo public="1" get="inline" set="null" expr="cast &quot;video/msvideo&quot;" line="33" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/msvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoMsvideo>
		<VideoXMsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-msvideo&quot;" line="34" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-msvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXMsvideo>
		<VideoAvsVideo public="1" get="inline" set="null" expr="cast &quot;video/avs-video&quot;" line="35" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/avs-video"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoAvsVideo>
		<ApplicationXBcpio public="1" get="inline" set="null" expr="cast &quot;application/x-bcpio&quot;" line="36" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bcpio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBcpio>
		<ApplicationMacBinary public="1" get="inline" set="null" expr="cast &quot;application/mac-binary&quot;" line="37" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mac-binary"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMacBinary>
		<ApplicationMacbinary public="1" get="inline" set="null" expr="cast &quot;application/macbinary&quot;" line="38" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/macbinary"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMacbinary>
		<ApplicationXBinary public="1" get="inline" set="null" expr="cast &quot;application/x-binary&quot;" line="39" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-binary"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBinary>
		<ApplicationXMacbinary public="1" get="inline" set="null" expr="cast &quot;application/x-macbinary&quot;" line="40" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-macbinary"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMacbinary>
		<ImageBmp public="1" get="inline" set="null" expr="cast &quot;image/bmp&quot;" line="41" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/bmp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageBmp>
		<ImageXWindowsBmp public="1" get="inline" set="null" expr="cast &quot;image/x-windows-bmp&quot;" line="42" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-windows-bmp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXWindowsBmp>
		<ApplicationBook public="1" get="inline" set="null" expr="cast &quot;application/book&quot;" line="43" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/book"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationBook>
		<ApplicationXBzip2 public="1" get="inline" set="null" expr="cast &quot;application/x-bzip2&quot;" line="44" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bzip2"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBzip2>
		<ApplicationXBsh public="1" get="inline" set="null" expr="cast &quot;application/x-bsh&quot;" line="45" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bsh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBsh>
		<ApplicationXBzip public="1" get="inline" set="null" expr="cast &quot;application/x-bzip&quot;" line="46" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bzip"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBzip>
		<TextPlain public="1" get="inline" set="null" expr="cast &quot;text/plain&quot;" line="47" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/plain"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextPlain>
		<TextXC public="1" get="inline" set="null" expr="cast &quot;text/x-c&quot;" line="48" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-c"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXC>
		<ApplicationVndMsPkiSeccat public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.seccat&quot;" line="49" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.seccat"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsPkiSeccat>
		<ApplicationClariscad public="1" get="inline" set="null" expr="cast &quot;application/clariscad&quot;" line="50" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/clariscad"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationClariscad>
		<ApplicationXCocoa public="1" get="inline" set="null" expr="cast &quot;application/x-cocoa&quot;" line="51" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cocoa"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCocoa>
		<ApplicationCdf public="1" get="inline" set="null" expr="cast &quot;application/cdf&quot;" line="52" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/cdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationCdf>
		<ApplicationXCdf public="1" get="inline" set="null" expr="cast &quot;application/x-cdf&quot;" line="53" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCdf>
		<ApplicationXNetcdf public="1" get="inline" set="null" expr="cast &quot;application/x-netcdf&quot;" line="54" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-netcdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNetcdf>
		<ApplicationPkixCert public="1" get="inline" set="null" expr="cast &quot;application/pkix-cert&quot;" line="55" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkix-cert"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkixCert>
		<ApplicationXX509CaCert public="1" get="inline" set="null" expr="cast &quot;application/x-x509-ca-cert&quot;" line="56" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-x509-ca-cert"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXX509CaCert>
		<ApplicationXChat public="1" get="inline" set="null" expr="cast &quot;application/x-chat&quot;" line="57" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-chat"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXChat>
		<ApplicationJava public="1" get="inline" set="null" expr="cast &quot;application/java&quot;" line="58" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/java"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationJava>
		<ApplicationJavaByteCode public="1" get="inline" set="null" expr="cast &quot;application/java-byte-code&quot;" line="59" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/java-byte-code"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationJavaByteCode>
		<ApplicationXJavaClass public="1" get="inline" set="null" expr="cast &quot;application/x-java-class&quot;" line="60" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-java-class"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXJavaClass>
		<ApplicationXCpio public="1" get="inline" set="null" expr="cast &quot;application/x-cpio&quot;" line="61" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cpio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCpio>
		<ApplicationMacCompactpro public="1" get="inline" set="null" expr="cast &quot;application/mac-compactpro&quot;" line="62" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mac-compactpro"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMacCompactpro>
		<ApplicationPkcsCrl public="1" get="inline" set="null" expr="cast &quot;application/pkcs-crl&quot;" line="63" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs-crl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcsCrl>
		<ApplicationXCsh public="1" get="inline" set="null" expr="cast &quot;application/x-csh&quot;" line="64" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-csh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCsh>
		<TextCss public="1" get="inline" set="null" expr="cast &quot;text/css&quot;" line="65" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/css"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextCss>
		<ApplicationXDirector public="1" get="inline" set="null" expr="cast &quot;application/x-director&quot;" line="66" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-director"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXDirector>
		<ApplicationXDeepv public="1" get="inline" set="null" expr="cast &quot;application/x-deepv&quot;" line="67" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-deepv"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXDeepv>
		<VideoXDv public="1" get="inline" set="null" expr="cast &quot;video/x-dv&quot;" line="68" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-dv"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXDv>
		<VideoDl public="1" get="inline" set="null" expr="cast &quot;video/dl&quot;" line="69" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/dl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoDl>
		<ApplicationMsword public="1" get="inline" set="null" expr="cast &quot;application/msword&quot;" line="70" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/msword"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMsword>
		<ApplicationCommonground public="1" get="inline" set="null" expr="cast &quot;application/commonground&quot;" line="71" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/commonground"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationCommonground>
		<ApplicationDrafting public="1" get="inline" set="null" expr="cast &quot;application/drafting&quot;" line="72" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/drafting"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationDrafting>
		<ApplicationXDvi public="1" get="inline" set="null" expr="cast &quot;application/x-dvi&quot;" line="73" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-dvi"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXDvi>
		<DrawingXDwf public="1" get="inline" set="null" expr="cast &quot;drawing/x-dwf (old)&quot;" line="74" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "drawing/x-dwf (old)"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DrawingXDwf>
		<ApplicationAcad public="1" get="inline" set="null" expr="cast &quot;application/acad&quot;" line="75" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/acad"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationAcad>
		<ApplicationDxf public="1" get="inline" set="null" expr="cast &quot;application/dxf&quot;" line="76" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/dxf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationDxf>
		<TextXScriptElisp public="1" get="inline" set="null" expr="cast &quot;text/x-script.elisp&quot;" line="77" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.elisp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptElisp>
		<ApplicationXBytecodeElisp public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.elisp (compiled elisp)&quot;" line="78" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bytecode.elisp (compiled elisp)"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBytecodeElisp>
		<ApplicationXEnvoy public="1" get="inline" set="null" expr="cast &quot;application/x-envoy&quot;" line="79" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-envoy"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXEnvoy>
		<ApplicationXEsrehber public="1" get="inline" set="null" expr="cast &quot;application/x-esrehber&quot;" line="80" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-esrehber"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXEsrehber>
		<TextXSetext public="1" get="inline" set="null" expr="cast &quot;text/x-setext&quot;" line="81" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-setext"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXSetext>
		<ApplicationEnvoy public="1" get="inline" set="null" expr="cast &quot;application/envoy&quot;" line="82" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/envoy"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationEnvoy>
		<TextXFortran public="1" get="inline" set="null" expr="cast &quot;text/x-fortran&quot;" line="83" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-fortran"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXFortran>
		<ApplicationVndFdf public="1" get="inline" set="null" expr="cast &quot;application/vnd.fdf&quot;" line="84" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.fdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndFdf>
		<ImageFif public="1" get="inline" set="null" expr="cast &quot;image/fif&quot;" line="85" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/fif"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageFif>
		<VideoFli public="1" get="inline" set="null" expr="cast &quot;video/fli&quot;" line="86" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/fli"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoFli>
		<ImageFlorian public="1" get="inline" set="null" expr="cast &quot;image/florian&quot;" line="87" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/florian"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageFlorian>
		<TextVndFmiFlexstor public="1" get="inline" set="null" expr="cast &quot;text/vnd.fmi.flexstor&quot;" line="88" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.fmi.flexstor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextVndFmiFlexstor>
		<VideoXAtomic3dFeature public="1" get="inline" set="null" expr="cast &quot;video/x-atomic3d-feature&quot;" line="89" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-atomic3d-feature"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXAtomic3dFeature>
		<ImageVndFpx public="1" get="inline" set="null" expr="cast &quot;image/vnd.fpx&quot;" line="90" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.fpx"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndFpx>
		<ApplicationFreeloader public="1" get="inline" set="null" expr="cast &quot;application/freeloader&quot;" line="91" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/freeloader"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationFreeloader>
		<AudioMake public="1" get="inline" set="null" expr="cast &quot;audio/make&quot;" line="92" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/make"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMake>
		<ImageG3fax public="1" get="inline" set="null" expr="cast &quot;image/g3fax&quot;" line="93" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/g3fax"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageG3fax>
		<ImageGif public="1" get="inline" set="null" expr="cast &quot;image/gif&quot;" line="94" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/gif"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageGif>
		<VideoGl public="1" get="inline" set="null" expr="cast &quot;video/gl&quot;" line="95" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/gl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoGl>
		<AudioXGsm public="1" get="inline" set="null" expr="cast &quot;audio/x-gsm&quot;" line="96" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-gsm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXGsm>
		<ApplicationXGsp public="1" get="inline" set="null" expr="cast &quot;application/x-gsp&quot;" line="97" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gsp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXGsp>
		<ApplicationXGss public="1" get="inline" set="null" expr="cast &quot;application/x-gss&quot;" line="98" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gss"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXGss>
		<ApplicationXGtar public="1" get="inline" set="null" expr="cast &quot;application/x-gtar&quot;" line="99" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gtar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXGtar>
		<ApplicationXCompressed public="1" get="inline" set="null" expr="cast &quot;application/x-compressed&quot;" line="100" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-compressed"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCompressed>
		<ApplicationXGzip public="1" get="inline" set="null" expr="cast &quot;application/x-gzip&quot;" line="101" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gzip"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXGzip>
		<ApplicationXHdf public="1" get="inline" set="null" expr="cast &quot;application/x-hdf&quot;" line="102" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-hdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXHdf>
		<ApplicationXHelpfile public="1" get="inline" set="null" expr="cast &quot;application/x-helpfile&quot;" line="103" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-helpfile"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXHelpfile>
		<TextXScript public="1" get="inline" set="null" expr="cast &quot;text/x-script&quot;" line="104" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScript>
		<ApplicationHlp public="1" get="inline" set="null" expr="cast &quot;application/hlp&quot;" line="105" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/hlp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationHlp>
		<ApplicationVndHpHpgl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-hpgl&quot;" line="106" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.hp-hpgl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndHpHpgl>
		<ApplicationBinhex public="1" get="inline" set="null" expr="cast &quot;application/binhex&quot;" line="107" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/binhex"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationBinhex>
		<ApplicationHta public="1" get="inline" set="null" expr="cast &quot;application/hta&quot;" line="108" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/hta"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationHta>
		<TextXComponent public="1" get="inline" set="null" expr="cast &quot;text/x-component&quot;" line="109" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-component"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXComponent>
		<TextWebviewhtml public="1" get="inline" set="null" expr="cast &quot;text/webviewhtml&quot;" line="110" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/webviewhtml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextWebviewhtml>
		<XConferenceXCooltalk public="1" get="inline" set="null" expr="cast &quot;x-conference/x-cooltalk&quot;" line="111" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-conference/x-cooltalk"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XConferenceXCooltalk>
		<ImageXIcon public="1" get="inline" set="null" expr="cast &quot;image/x-icon&quot;" line="112" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-icon"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXIcon>
		<ImageIef public="1" get="inline" set="null" expr="cast &quot;image/ief&quot;" line="113" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/ief"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageIef>
		<ApplicationIges public="1" get="inline" set="null" expr="cast &quot;application/iges&quot;" line="114" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/iges"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationIges>
		<ApplicationXIma public="1" get="inline" set="null" expr="cast &quot;application/x-ima&quot;" line="115" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ima"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXIma>
		<ApplicationXHttpdImap public="1" get="inline" set="null" expr="cast &quot;application/x-httpd-imap&quot;" line="116" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-httpd-imap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXHttpdImap>
		<ApplicationInf public="1" get="inline" set="null" expr="cast &quot;application/inf&quot;" line="117" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/inf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationInf>
		<ApplicationXInternettSignup public="1" get="inline" set="null" expr="cast &quot;application/x-internett-signup&quot;" line="118" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-internett-signup"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXInternettSignup>
		<ApplicationXIp2 public="1" get="inline" set="null" expr="cast &quot;application/x-ip2&quot;" line="119" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ip2"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXIp2>
		<VideoXIsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-isvideo&quot;" line="120" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-isvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXIsvideo>
		<AudioIt public="1" get="inline" set="null" expr="cast &quot;audio/it&quot;" line="121" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/it"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioIt>
		<ApplicationXInventor public="1" get="inline" set="null" expr="cast &quot;application/x-inventor&quot;" line="122" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-inventor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXInventor>
		<IWorldIVrml public="1" get="inline" set="null" expr="cast &quot;i-world/i-vrml&quot;" line="123" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "i-world/i-vrml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IWorldIVrml>
		<ApplicationXLivescreen public="1" get="inline" set="null" expr="cast &quot;application/x-livescreen&quot;" line="124" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-livescreen"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLivescreen>
		<AudioXJam public="1" get="inline" set="null" expr="cast &quot;audio/x-jam&quot;" line="125" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-jam"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXJam>
		<ApplicationXJavaCommerce public="1" get="inline" set="null" expr="cast &quot;application/x-java-commerce&quot;" line="126" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-java-commerce"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXJavaCommerce>
		<ImageJpeg public="1" get="inline" set="null" expr="cast &quot;image/jpeg&quot;" line="127" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/jpeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageJpeg>
		<ImageXJps public="1" get="inline" set="null" expr="cast &quot;image/x-jps&quot;" line="128" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-jps"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXJps>
		<TextJavascript public="1" get="inline" set="null" expr="cast &quot;text/javascript&quot;" line="129" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/javascript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextJavascript>
		<ApplicationJson public="1" get="inline" set="null" expr="cast &quot;application/json&quot;" line="130" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/json"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationJson>
		<ApplicationJavascript public="1" get="inline" set="null" expr="cast &quot;application/javascript&quot;" line="131" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/javascript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationJavascript>
		<ImageJutvision public="1" get="inline" set="null" expr="cast &quot;image/jutvision&quot;" line="132" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/jutvision"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageJutvision>
		<AudioMidi public="1" get="inline" set="null" expr="cast &quot;audio/midi&quot;" line="133" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/midi"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMidi>
		<ApplicationXKsh public="1" get="inline" set="null" expr="cast &quot;application/x-ksh&quot;" line="134" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ksh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXKsh>
		<AudioNspaudio public="1" get="inline" set="null" expr="cast &quot;audio/nspaudio&quot;" line="135" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/nspaudio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioNspaudio>
		<AudioXLiveaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-liveaudio&quot;" line="136" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-liveaudio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXLiveaudio>
		<ApplicationXLatex public="1" get="inline" set="null" expr="cast &quot;application/x-latex&quot;" line="137" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-latex"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLatex>
		<ApplicationXLisp public="1" get="inline" set="null" expr="cast &quot;application/x-lisp&quot;" line="138" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lisp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLisp>
		<TextXLaAsf public="1" get="inline" set="null" expr="cast &quot;text/x-la-asf&quot;" line="139" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-la-asf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXLaAsf>
		<ApplicationLzx public="1" get="inline" set="null" expr="cast &quot;application/lzx&quot;" line="140" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/lzx"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationLzx>
		<VideoMpeg public="1" get="inline" set="null" expr="cast &quot;video/mpeg&quot;" line="141" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/mpeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoMpeg>
		<AudioMpeg public="1" get="inline" set="null" expr="cast &quot;audio/mpeg&quot;" line="142" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mpeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMpeg>
		<AudioXMpequrl public="1" get="inline" set="null" expr="cast &quot;audio/x-mpequrl&quot;" line="143" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-mpequrl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXMpequrl>
		<ApplicationXTroffMan public="1" get="inline" set="null" expr="cast &quot;application/x-troff-man&quot;" line="144" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-man"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroffMan>
		<ApplicationXNavimap public="1" get="inline" set="null" expr="cast &quot;application/x-navimap&quot;" line="145" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navimap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNavimap>
		<ApplicationMbedlet public="1" get="inline" set="null" expr="cast &quot;application/mbedlet&quot;" line="146" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mbedlet"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMbedlet>
		<ApplicationXMagicCapPackage10 public="1" get="inline" set="null" expr="cast &quot;application/x-magic-cap-package-1.0&quot;" line="147" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-magic-cap-package-1.0"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMagicCapPackage10>
		<ApplicationMcad public="1" get="inline" set="null" expr="cast &quot;application/mcad&quot;" line="148" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mcad"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMcad>
		<ImageVasa public="1" get="inline" set="null" expr="cast &quot;image/vasa&quot;" line="149" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vasa"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVasa>
		<ApplicationNetmc public="1" get="inline" set="null" expr="cast &quot;application/netmc&quot;" line="150" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/netmc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationNetmc>
		<ApplicationXTroffMe public="1" get="inline" set="null" expr="cast &quot;application/x-troff-me&quot;" line="151" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-me"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroffMe>
		<MessageRfc822 public="1" get="inline" set="null" expr="cast &quot;message/rfc822&quot;" line="152" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "message/rfc822"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MessageRfc822>
		<ApplicationXMif public="1" get="inline" set="null" expr="cast &quot;application/x-mif&quot;" line="153" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mif"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMif>
		<WwwMime public="1" get="inline" set="null" expr="cast &quot;www/mime&quot;" line="154" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "www/mime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WwwMime>
		<AudioXVndAudioexplosionMjuicemediafile public="1" get="inline" set="null" expr="cast &quot;audio/x-vnd.audioexplosion.mjuicemediafile&quot;" line="155" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-vnd.audioexplosion.mjuicemediafile"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXVndAudioexplosionMjuicemediafile>
		<VideoXMotionJpeg public="1" get="inline" set="null" expr="cast &quot;video/x-motion-jpeg&quot;" line="156" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-motion-jpeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXMotionJpeg>
		<ApplicationBase64 public="1" get="inline" set="null" expr="cast &quot;application/base64&quot;" line="157" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/base64"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationBase64>
		<AudioMod public="1" get="inline" set="null" expr="cast &quot;audio/mod&quot;" line="158" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mod"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMod>
		<VideoQuicktime public="1" get="inline" set="null" expr="cast &quot;video/quicktime&quot;" line="159" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/quicktime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoQuicktime>
		<VideoXSgiMovie public="1" get="inline" set="null" expr="cast &quot;video/x-sgi-movie&quot;" line="160" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-sgi-movie"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXSgiMovie>
		<AudioMpeg3 public="1" get="inline" set="null" expr="cast &quot;audio/mpeg3&quot;" line="161" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mpeg3"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMpeg3>
		<ApplicationXProject public="1" get="inline" set="null" expr="cast &quot;application/x-project&quot;" line="162" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-project"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXProject>
		<ApplicationVndMsProject public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-project&quot;" line="163" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-project"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsProject>
		<ApplicationMarc public="1" get="inline" set="null" expr="cast &quot;application/marc&quot;" line="164" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/marc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMarc>
		<ApplicationXTroffMs public="1" get="inline" set="null" expr="cast &quot;application/x-troff-ms&quot;" line="165" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-ms"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroffMs>
		<ApplicationXVndAudioexplosionMzz public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.audioexplosion.mzz&quot;" line="166" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vnd.audioexplosion.mzz"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXVndAudioexplosionMzz>
		<ImageNaplps public="1" get="inline" set="null" expr="cast &quot;image/naplps&quot;" line="167" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/naplps"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageNaplps>
		<ApplicationVndNokiaConfigurationMessage public="1" get="inline" set="null" expr="cast &quot;application/vnd.nokia.configuration-message&quot;" line="168" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.nokia.configuration-message"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndNokiaConfigurationMessage>
		<ImageXNiff public="1" get="inline" set="null" expr="cast &quot;image/x-niff&quot;" line="169" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-niff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXNiff>
		<ApplicationXMixTransfer public="1" get="inline" set="null" expr="cast &quot;application/x-mix-transfer&quot;" line="170" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mix-transfer"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMixTransfer>
		<ApplicationXConference public="1" get="inline" set="null" expr="cast &quot;application/x-conference&quot;" line="171" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-conference"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXConference>
		<ApplicationXNavidoc public="1" get="inline" set="null" expr="cast &quot;application/x-navidoc&quot;" line="172" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navidoc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNavidoc>
		<ApplicationOda public="1" get="inline" set="null" expr="cast &quot;application/oda&quot;" line="173" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/oda"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationOda>
		<ApplicationXOmc public="1" get="inline" set="null" expr="cast &quot;application/x-omc&quot;" line="174" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXOmc>
		<ApplicationXOmcdatamaker public="1" get="inline" set="null" expr="cast &quot;application/x-omcdatamaker&quot;" line="175" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omcdatamaker"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXOmcdatamaker>
		<ApplicationXOmcregerator public="1" get="inline" set="null" expr="cast &quot;application/x-omcregerator&quot;" line="176" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omcregerator"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXOmcregerator>
		<TextXPascal public="1" get="inline" set="null" expr="cast &quot;text/x-pascal&quot;" line="177" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-pascal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXPascal>
		<ApplicationPkcs10 public="1" get="inline" set="null" expr="cast &quot;application/pkcs10&quot;" line="178" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs10"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcs10>
		<ApplicationPkcs12 public="1" get="inline" set="null" expr="cast &quot;application/pkcs-12&quot;" line="179" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs-12"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcs12>
		<ApplicationXPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-signature&quot;" line="180" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-signature"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPkcs7Signature>
		<ApplicationPkcs7Mime public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-mime&quot;" line="181" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs7-mime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcs7Mime>
		<ApplicationXPkcs7Certreqresp public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certreqresp&quot;" line="182" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-certreqresp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPkcs7Certreqresp>
		<ApplicationPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-signature&quot;" line="183" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs7-signature"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcs7Signature>
		<ApplicationPro_eng public="1" get="inline" set="null" expr="cast &quot;application/pro_eng&quot;" line="184" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pro_eng"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPro_eng>
		<TextPascal public="1" get="inline" set="null" expr="cast &quot;text/pascal&quot;" line="185" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/pascal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextPascal>
		<ImageXPortableBitmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-bitmap&quot;" line="186" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-bitmap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPortableBitmap>
		<ApplicationVndHpPcl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-pcl&quot;" line="187" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.hp-pcl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndHpPcl>
		<ImageXPict public="1" get="inline" set="null" expr="cast &quot;image/x-pict&quot;" line="188" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-pict"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPict>
		<ImageXPcx public="1" get="inline" set="null" expr="cast &quot;image/x-pcx&quot;" line="189" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-pcx"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPcx>
		<ChemicalXPdb public="1" get="inline" set="null" expr="cast &quot;chemical/x-pdb&quot;" line="190" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "chemical/x-pdb"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ChemicalXPdb>
		<ApplicationPdf public="1" get="inline" set="null" expr="cast &quot;application/pdf&quot;" line="191" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPdf>
		<ImageXPortableGraymap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-graymap&quot;" line="192" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-graymap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPortableGraymap>
		<ImagePict public="1" get="inline" set="null" expr="cast &quot;image/pict&quot;" line="193" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/pict"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImagePict>
		<ApplicationXNewtonCompatiblePkg public="1" get="inline" set="null" expr="cast &quot;application/x-newton-compatible-pkg&quot;" line="194" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-newton-compatible-pkg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNewtonCompatiblePkg>
		<ApplicationVndMsPkiPko public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.pko&quot;" line="195" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.pko"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsPkiPko>
		<ApplicationXPixclscript public="1" get="inline" set="null" expr="cast &quot;application/x-pixclscript&quot;" line="196" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pixclscript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPixclscript>
		<ImageXXpixmap public="1" get="inline" set="null" expr="cast &quot;image/x-xpixmap&quot;" line="197" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xpixmap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXXpixmap>
		<ApplicationXPagemaker public="1" get="inline" set="null" expr="cast &quot;application/x-pagemaker&quot;" line="198" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pagemaker"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPagemaker>
		<ImagePng public="1" get="inline" set="null" expr="cast &quot;image/png&quot;" line="199" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/png"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImagePng>
		<ApplicationXPortableAnymap public="1" get="inline" set="null" expr="cast &quot;application/x-portable-anymap&quot;" line="200" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-portable-anymap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPortableAnymap>
		<ApplicationMspowerpoint public="1" get="inline" set="null" expr="cast &quot;application/mspowerpoint&quot;" line="201" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mspowerpoint"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMspowerpoint>
		<ModelXPov public="1" get="inline" set="null" expr="cast &quot;model/x-pov&quot;" line="202" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "model/x-pov"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ModelXPov>
		<ApplicationVndMsPowerpoint public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-powerpoint&quot;" line="203" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-powerpoint"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsPowerpoint>
		<ImageXPortablePixmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-pixmap&quot;" line="204" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-pixmap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPortablePixmap>
		<ApplicationXFreelance public="1" get="inline" set="null" expr="cast &quot;application/x-freelance&quot;" line="205" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-freelance"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXFreelance>
		<PaleovuXPv public="1" get="inline" set="null" expr="cast &quot;paleovu/x-pv&quot;" line="206" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "paleovu/x-pv"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PaleovuXPv>
		<TextXScriptPhyton public="1" get="inline" set="null" expr="cast &quot;text/x-script.phyton&quot;" line="207" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.phyton"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptPhyton>
		<ApplicationXBytecodePython public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.python&quot;" line="208" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bytecode.python"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBytecodePython>
		<AudioVndQcelp public="1" get="inline" set="null" expr="cast &quot;audio/vnd.qcelp&quot;" line="209" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/vnd.qcelp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioVndQcelp>
		<ImageXQuicktime public="1" get="inline" set="null" expr="cast &quot;image/x-quicktime&quot;" line="210" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-quicktime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXQuicktime>
		<VideoXQtc public="1" get="inline" set="null" expr="cast &quot;video/x-qtc&quot;" line="211" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-qtc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXQtc>
		<AudioXPnRealaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio&quot;" line="212" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-pn-realaudio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXPnRealaudio>
		<ApplicationXCmuRaster public="1" get="inline" set="null" expr="cast &quot;application/x-cmu-raster&quot;" line="213" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cmu-raster"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCmuRaster>
		<ImageCmuRaster public="1" get="inline" set="null" expr="cast &quot;image/cmu-raster&quot;" line="214" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/cmu-raster"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageCmuRaster>
		<TextXScriptRexx public="1" get="inline" set="null" expr="cast &quot;text/x-script.rexx&quot;" line="215" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.rexx"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptRexx>
		<ImageVndRnRealflash public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realflash&quot;" line="216" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.rn-realflash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndRnRealflash>
		<ImageXRgb public="1" get="inline" set="null" expr="cast &quot;image/x-rgb&quot;" line="217" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-rgb"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXRgb>
		<ApplicationVndRnRealmedia public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realmedia&quot;" line="218" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.rn-realmedia"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndRnRealmedia>
		<AudioMid public="1" get="inline" set="null" expr="cast &quot;audio/mid&quot;" line="219" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mid"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMid>
		<ApplicationRingingTones public="1" get="inline" set="null" expr="cast &quot;application/ringing-tones&quot;" line="220" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/ringing-tones"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationRingingTones>
		<ApplicationVndRnRealplayer public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realplayer&quot;" line="221" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.rn-realplayer"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndRnRealplayer>
		<ApplicationXTroff public="1" get="inline" set="null" expr="cast &quot;application/x-troff&quot;" line="222" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroff>
		<ImageVndRnRealpix public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realpix&quot;" line="223" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.rn-realpix"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndRnRealpix>
		<AudioXPnRealaudioPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio-plugin&quot;" line="224" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-pn-realaudio-plugin"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXPnRealaudioPlugin>
		<TextRichtext public="1" get="inline" set="null" expr="cast &quot;text/richtext&quot;" line="225" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/richtext"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextRichtext>
		<ApplicationRtf public="1" get="inline" set="null" expr="cast &quot;application/rtf&quot;" line="226" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/rtf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationRtf>
		<VideoVndRnRealvideo public="1" get="inline" set="null" expr="cast &quot;video/vnd.rn-realvideo&quot;" line="227" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vnd.rn-realvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoVndRnRealvideo>
		<AudioS3m public="1" get="inline" set="null" expr="cast &quot;audio/s3m&quot;" line="228" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/s3m"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioS3m>
		<ApplicationXTbook public="1" get="inline" set="null" expr="cast &quot;application/x-tbook&quot;" line="229" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tbook"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTbook>
		<ApplicationXLotusscreencam public="1" get="inline" set="null" expr="cast &quot;application/x-lotusscreencam&quot;" line="230" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lotusscreencam"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLotusscreencam>
		<ApplicationSdp public="1" get="inline" set="null" expr="cast &quot;application/sdp&quot;" line="231" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sdp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSdp>
		<ApplicationSounder public="1" get="inline" set="null" expr="cast &quot;application/sounder&quot;" line="232" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sounder"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSounder>
		<ApplicationSea public="1" get="inline" set="null" expr="cast &quot;application/sea&quot;" line="233" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sea"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSea>
		<ApplicationSet public="1" get="inline" set="null" expr="cast &quot;application/set&quot;" line="234" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/set"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSet>
		<AudioXPsid public="1" get="inline" set="null" expr="cast &quot;audio/x-psid&quot;" line="235" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-psid"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXPsid>
		<ApplicationXSit public="1" get="inline" set="null" expr="cast &quot;application/x-sit&quot;" line="236" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sit"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSit>
		<ApplicationXKoan public="1" get="inline" set="null" expr="cast &quot;application/x-koan&quot;" line="237" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-koan"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXKoan>
		<ApplicationXSeelogo public="1" get="inline" set="null" expr="cast &quot;application/x-seelogo&quot;" line="238" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-seelogo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSeelogo>
		<ApplicationSmil public="1" get="inline" set="null" expr="cast &quot;application/smil&quot;" line="239" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/smil"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSmil>
		<ApplicationSolids public="1" get="inline" set="null" expr="cast &quot;application/solids&quot;" line="240" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/solids"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSolids>
		<ApplicationXPkcs7Certificates public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certificates&quot;" line="241" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-certificates"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPkcs7Certificates>
		<ApplicationFuturesplash public="1" get="inline" set="null" expr="cast &quot;application/futuresplash&quot;" line="242" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/futuresplash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationFuturesplash>
		<ApplicationXSprite public="1" get="inline" set="null" expr="cast &quot;application/x-sprite&quot;" line="243" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sprite"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSprite>
		<ApplicationXWaisSource public="1" get="inline" set="null" expr="cast &quot;application/x-wais-source&quot;" line="244" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-wais-source"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXWaisSource>
		<TextXServerParsedHtml public="1" get="inline" set="null" expr="cast &quot;text/x-server-parsed-html&quot;" line="245" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-server-parsed-html"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXServerParsedHtml>
		<ApplicationStreamingmedia public="1" get="inline" set="null" expr="cast &quot;application/streamingmedia&quot;" line="246" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/streamingmedia"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationStreamingmedia>
		<ApplicationVndMsPkiCertstore public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.certstore&quot;" line="247" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.certstore"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsPkiCertstore>
		<ApplicationStep public="1" get="inline" set="null" expr="cast &quot;application/step&quot;" line="248" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/step"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationStep>
		<ApplicationSla public="1" get="inline" set="null" expr="cast &quot;application/sla&quot;" line="249" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sla"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSla>
		<ApplicationXSv4cpio public="1" get="inline" set="null" expr="cast &quot;application/x-sv4cpio&quot;" line="250" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sv4cpio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSv4cpio>
		<ApplicationXSv4crc public="1" get="inline" set="null" expr="cast &quot;application/x-sv4crc&quot;" line="251" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sv4crc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSv4crc>
		<ImageVndDwg public="1" get="inline" set="null" expr="cast &quot;image/vnd.dwg&quot;" line="252" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.dwg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndDwg>
		<ApplicationXWorld public="1" get="inline" set="null" expr="cast &quot;application/x-world&quot;" line="253" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-world"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXWorld>
		<ApplicationXShockwaveFlash public="1" get="inline" set="null" expr="cast &quot;application/x-shockwave-flash&quot;" line="254" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-shockwave-flash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXShockwaveFlash>
		<TextXSpeech public="1" get="inline" set="null" expr="cast &quot;text/x-speech&quot;" line="255" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-speech"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXSpeech>
		<ApplicationXTar public="1" get="inline" set="null" expr="cast &quot;application/x-tar&quot;" line="256" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTar>
		<ApplicationToolbook public="1" get="inline" set="null" expr="cast &quot;application/toolbook&quot;" line="257" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/toolbook"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationToolbook>
		<ApplicationXTcl public="1" get="inline" set="null" expr="cast &quot;application/x-tcl&quot;" line="258" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tcl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTcl>
		<TextXScriptTcsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.tcsh&quot;" line="259" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.tcsh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptTcsh>
		<ApplicationXTex public="1" get="inline" set="null" expr="cast &quot;application/x-tex&quot;" line="260" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tex"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTex>
		<ApplicationXTexinfo public="1" get="inline" set="null" expr="cast &quot;application/x-texinfo&quot;" line="261" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-texinfo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTexinfo>
		<ApplicationGnutar public="1" get="inline" set="null" expr="cast &quot;application/gnutar&quot;" line="262" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/gnutar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationGnutar>
		<ImageTiff public="1" get="inline" set="null" expr="cast &quot;image/tiff&quot;" line="263" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/tiff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageTiff>
		<AudioTspAudio public="1" get="inline" set="null" expr="cast &quot;audio/tsp-audio&quot;" line="264" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/tsp-audio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioTspAudio>
		<ApplicationDsptype public="1" get="inline" set="null" expr="cast &quot;application/dsptype&quot;" line="265" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/dsptype"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationDsptype>
		<TextTabSeparatedValues public="1" get="inline" set="null" expr="cast &quot;text/tab-separated-values&quot;" line="266" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/tab-separated-values"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextTabSeparatedValues>
		<TextXUil public="1" get="inline" set="null" expr="cast &quot;text/x-uil&quot;" line="267" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-uil"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXUil>
		<TextUriList public="1" get="inline" set="null" expr="cast &quot;text/uri-list&quot;" line="268" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/uri-list"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextUriList>
		<ApplicationIDeas public="1" get="inline" set="null" expr="cast &quot;application/i-deas&quot;" line="269" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/i-deas"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationIDeas>
		<ApplicationXUstar public="1" get="inline" set="null" expr="cast &quot;application/x-ustar&quot;" line="270" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ustar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXUstar>
		<TextXUuencode public="1" get="inline" set="null" expr="cast &quot;text/x-uuencode&quot;" line="271" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-uuencode"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXUuencode>
		<ApplicationXCdlink public="1" get="inline" set="null" expr="cast &quot;application/x-cdlink&quot;" line="272" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cdlink"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCdlink>
		<TextXVcalendar public="1" get="inline" set="null" expr="cast &quot;text/x-vcalendar&quot;" line="273" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-vcalendar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXVcalendar>
		<ApplicationVda public="1" get="inline" set="null" expr="cast &quot;application/vda&quot;" line="274" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vda"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVda>
		<VideoVdo public="1" get="inline" set="null" expr="cast &quot;video/vdo&quot;" line="275" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vdo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoVdo>
		<ApplicationGroupwise public="1" get="inline" set="null" expr="cast &quot;application/groupwise&quot;" line="276" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/groupwise"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationGroupwise>
		<VideoVivo public="1" get="inline" set="null" expr="cast &quot;video/vivo&quot;" line="277" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vivo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoVivo>
		<ApplicationVocaltecMediaDesc public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-desc&quot;" line="278" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vocaltec-media-desc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVocaltecMediaDesc>
		<ApplicationVocaltecMediaFile public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-file&quot;" line="279" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vocaltec-media-file"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVocaltecMediaFile>
		<AudioVoc public="1" get="inline" set="null" expr="cast &quot;audio/voc&quot;" line="280" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/voc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioVoc>
		<VideoVosaic public="1" get="inline" set="null" expr="cast &quot;video/vosaic&quot;" line="281" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vosaic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoVosaic>
		<AudioVoxware public="1" get="inline" set="null" expr="cast &quot;audio/voxware&quot;" line="282" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/voxware"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioVoxware>
		<AudioXTwinvqPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq-plugin&quot;" line="283" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-twinvq-plugin"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXTwinvqPlugin>
		<AudioXTwinvq public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq&quot;" line="284" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-twinvq"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXTwinvq>
		<ApplicationXVrml public="1" get="inline" set="null" expr="cast &quot;application/x-vrml&quot;" line="285" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vrml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXVrml>
		<XWorldXVrt public="1" get="inline" set="null" expr="cast &quot;x-world/x-vrt&quot;" line="286" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-world/x-vrt"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XWorldXVrt>
		<ApplicationXVisio public="1" get="inline" set="null" expr="cast &quot;application/x-visio&quot;" line="287" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-visio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXVisio>
		<ApplicationWordperfect60 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.0&quot;" line="288" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect6.0"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationWordperfect60>
		<ApplicationWordperfect61 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.1&quot;" line="289" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect6.1"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationWordperfect61>
		<AudioWav public="1" get="inline" set="null" expr="cast &quot;audio/wav&quot;" line="290" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/wav"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioWav>
		<ApplicationXQpro public="1" get="inline" set="null" expr="cast &quot;application/x-qpro&quot;" line="291" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-qpro"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXQpro>
		<ImageVndWapWbmp public="1" get="inline" set="null" expr="cast &quot;image/vnd.wap.wbmp&quot;" line="292" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.wap.wbmp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndWapWbmp>
		<ApplicationVndXara public="1" get="inline" set="null" expr="cast &quot;application/vnd.xara&quot;" line="293" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.xara"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndXara>
		<ImageWebp public="1" get="inline" set="null" expr="cast &quot;image/webp&quot;" line="294" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/webp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageWebp>
		<ApplicationX123 public="1" get="inline" set="null" expr="cast &quot;application/x-123&quot;" line="295" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-123"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationX123>
		<WindowsMetafile public="1" get="inline" set="null" expr="cast &quot;windows/metafile&quot;" line="296" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "windows/metafile"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WindowsMetafile>
		<TextVndWapWml public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wml&quot;" line="297" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.wap.wml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextVndWapWml>
		<ApplicationVndWapWmlc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlc&quot;" line="298" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.wap.wmlc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndWapWmlc>
		<TextVndWapWmlscript public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wmlscript&quot;" line="299" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.wap.wmlscript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextVndWapWmlscript>
		<ApplicationVndWapWmlscriptc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlscriptc&quot;" line="300" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.wap.wmlscriptc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndWapWmlscriptc>
		<ApplicationWordperfect public="1" get="inline" set="null" expr="cast &quot;application/wordperfect&quot;" line="301" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationWordperfect>
		<ApplicationXLotus public="1" get="inline" set="null" expr="cast &quot;application/x-lotus&quot;" line="302" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lotus"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLotus>
		<ApplicationMswrite public="1" get="inline" set="null" expr="cast &quot;application/mswrite&quot;" line="303" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mswrite"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMswrite>
		<ModelVrml public="1" get="inline" set="null" expr="cast &quot;model/vrml&quot;" line="304" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "model/vrml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ModelVrml>
		<TextScriplet public="1" get="inline" set="null" expr="cast &quot;text/scriplet&quot;" line="305" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/scriplet"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextScriplet>
		<ApplicationXWintalk public="1" get="inline" set="null" expr="cast &quot;application/x-wintalk&quot;" line="306" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-wintalk"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXWintalk>
		<ImageXXbitmap public="1" get="inline" set="null" expr="cast &quot;image/x-xbitmap&quot;" line="307" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xbitmap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXXbitmap>
		<VideoXAmtDemorun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-demorun&quot;" line="308" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-amt-demorun"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXAmtDemorun>
		<XglDrawing public="1" get="inline" set="null" expr="cast &quot;xgl/drawing&quot;" line="309" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "xgl/drawing"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XglDrawing>
		<ImageVndXiff public="1" get="inline" set="null" expr="cast &quot;image/vnd.xiff&quot;" line="310" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.xiff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndXiff>
		<ApplicationExcel public="1" get="inline" set="null" expr="cast &quot;application/excel&quot;" line="311" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/excel"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationExcel>
		<AudioXm public="1" get="inline" set="null" expr="cast &quot;audio/xm&quot;" line="312" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/xm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXm>
		<ApplicationXml public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="313" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/xml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXml>
		<XglMovie public="1" get="inline" set="null" expr="cast &quot;xgl/movie&quot;" line="314" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "xgl/movie"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XglMovie>
		<ApplicationXVndLsXpix public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.ls-xpix&quot;" line="315" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vnd.ls-xpix"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXVndLsXpix>
		<VideoXAmtShowrun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-showrun&quot;" line="316" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-amt-showrun"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXAmtShowrun>
		<ImageXXwd public="1" get="inline" set="null" expr="cast &quot;image/x-xwd&quot;" line="317" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xwd"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXXwd>
		<ApplicationXCompress public="1" get="inline" set="null" expr="cast &quot;application/x-compress&quot;" line="318" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-compress"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCompress>
		<MultipartXZip public="1" get="inline" set="null" expr="cast &quot;multipart/x-zip&quot;" line="319" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "multipart/x-zip"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MultipartXZip>
		<TextXScriptZsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.zsh&quot;" line="320" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.zsh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptZsh>
		<ImageAvif public="1" get="inline" set="null" expr="cast &quot;image/avif&quot;" line="321" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/avif"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageAvif>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.io.Path" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Path.hx">
		<withoutExtension public="1" set="method" line="123" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the file extension.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutExtension>
		<withoutDirectory public="1" set="method" line="134" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the directory.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutDirectory>
		<directory public="1" set="method" line="147" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of `path`.

		If the directory is `null`, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</directory>
		<extension public="1" set="method" line="161" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If `path` has no extension, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</extension>
		<withExtension public="1" set="method" line="175" static="1">
			<f a="path:ext">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `path` where the extension is `ext`.

		If `path` has no extension, `ext` is added as extension.

		If `path` or `ext` are `null`, the result is unspecified.</haxe_doc>
		</withExtension>
		<join public="1" set="method" line="189" static="1">
			<f a="paths">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all paths in `paths` together.

		If `paths` is empty, the empty String `""` is returned. Otherwise the
		paths are joined with a slash between them.

		If `paths` is `null`, the result is unspecified.</haxe_doc>
		</join>
		<normalize public="1" set="method" line="210" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Normalize a given `path` (e.g. turn `'/usr/local/../lib'` into `'/usr/lib'`).

		Also replaces backslashes `\` with slashes `/` and afterwards turns
		multiple slashes into a single one.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</normalize>
		<addTrailingSlash public="1" set="method" line="271" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		`""`.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="299" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<isAbsolute public="1" set="method" line="314" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the path is an absolute path, and `false` otherwise.</haxe_doc>
		</isAbsolute>
		<unescape set="method" line="324" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></unescape>
		<escape set="method" line="329" static="1">
			<f a="path:?allowSlashes" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ allowSlashes : false }</e></m></meta>
		</escape>
		<dir public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is `null`.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for `".htaccess"` or `"/dir/"`, the value
		is the empty String `""`.</haxe_doc>
		</file>
		<ext public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is `null`.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>`true` if the last directory separator is a backslash, `false` otherwise.</haxe_doc>
		</backslash>
		<toString public="1" set="method" line="114">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` path.

		If `this.backslash` is `true`, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		`this.dir` and `this.file`.

		If `this.directory` or `this.extension` is `null`, their representation
		is the empty String `""`.</haxe_doc>
		</toString>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Path` instance by parsing `path`.

		Path information can be retrieved by accessing the `dir`, `file` and `ext`
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- `directory1/directory2/filename.extension`
	- `directory1\directory2\filename.extension`</haxe_doc>
	</class>
	<abstract path="haxe.io.Scheme" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Scheme.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>A scheme consists of a sequence of characters beginning with a letter and followed
	by any combination of letters, digits, plus (`+`, period (`.`), or hyphen (`-`).

	Although schemes are case-insensitive, the canonical form is lowercase
	and documents that specify schemes must do so with lowercase letters.
	It is followed by a colon (`:`).</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.io._Scheme.Scheme_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Scheme.hx" private="1" module="haxe.io.Scheme" extern="1" final="1">
	<Http public="1" get="inline" set="null" expr="cast &quot;http&quot;" line="12" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "http"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Http>
	<Https public="1" get="inline" set="null" expr="cast &quot;https&quot;" line="13" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "https"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Https>
	<Ftp public="1" get="inline" set="null" expr="cast &quot;ftp&quot;" line="14" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "ftp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Ftp>
	<MailTo public="1" get="inline" set="null" expr="cast &quot;mailto&quot;" line="15" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "mailto"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MailTo>
	<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="16" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "file"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</File>
	<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="17" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "data"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Data>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Scheme.Scheme_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Scheme.hx" private="1" module="haxe.io.Scheme" extern="1" final="1">
		<Http public="1" get="inline" set="null" expr="cast &quot;http&quot;" line="12" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "http"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Http>
		<Https public="1" get="inline" set="null" expr="cast &quot;https&quot;" line="13" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "https"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Https>
		<Ftp public="1" get="inline" set="null" expr="cast &quot;ftp&quot;" line="14" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "ftp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Ftp>
		<MailTo public="1" get="inline" set="null" expr="cast &quot;mailto&quot;" line="15" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "mailto"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MailTo>
		<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="16" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "file"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</File>
		<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="17" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "data"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Data>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.io.StringInput" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.io.UInt16ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt16Array.hx" module="haxe.io.UInt16Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt16Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt16Array.hx">
		<this><t path="haxe.io.UInt16ArrayData"/></this>
		<impl><class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt16Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt16Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<t path="haxe.io.UInt16ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt16Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt16Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<t path="haxe.io.UInt16ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.UInt32ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt32Array.hx" module="haxe.io.UInt32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt32Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt32Array.hx">
		<this><t path="haxe.io.UInt32ArrayData"/></this>
		<impl><class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt32Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt32Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<t path="haxe.io.UInt32ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="UInt"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt32Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt32Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<t path="haxe.io.UInt32ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="UInt"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<t path="haxe.io.UInt8ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<t path="haxe.io.UInt8ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<class path="haxe.iterators.ArrayKeyValueIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/ArrayKeyValueIterator.hx">
		<current expr="0" line="27">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<array><c path="Array"><c path="haxe.iterators.ArrayKeyValueIterator.T"/></c></array>
		<hasNext public="1" get="inline" set="null" line="34"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="38"><f a=""><a>
	<value><c path="haxe.iterators.ArrayKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="30"><f a="array">
	<c path="Array"><c path="haxe.iterators.ArrayKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":ifFeature">
				<e>"anon_read.keyValueIterator"</e>
				<e>"dynamic_read.keyValueIterator"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.iterators.DynamicAccessIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/DynamicAccessIterator.hx">
		<access final="1"><x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessIterator.T"/></x></access>
		<keys final="1"><c path="Array"><c path="String"/></c></keys>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="42">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="49">
			<f a=""><c path="haxe.iterators.DynamicAccessIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="33"><f a="access">
	<x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessIterator.T"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>This iterator can be used to iterate over the values of `haxe.DynamicAccess`.</haxe_doc>
	</class>
	<class path="haxe.iterators.DynamicAccessKeyValueIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/DynamicAccessKeyValueIterator.hx">
		<access final="1"><x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></x></access>
		<keys final="1"><c path="Array"><c path="String"/></c></keys>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="42">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="49">
			<f a=""><a>
	<value><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></value>
	<key><c path="String"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="33"><f a="access">
	<x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>This Key/Value iterator can be used to iterate over `haxe.DynamicAccess`.</haxe_doc>
	</class>
	<class path="haxe.iterators.HashMapKeyValueIterator" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/iterators/HashMapKeyValueIterator.hx">
		<map final="1"><x path="haxe.ds.HashMap">
	<c path="haxe.iterators.HashMapKeyValueIterator.K"/>
	<c path="haxe.iterators.HashMapKeyValueIterator.V"/>
</x></map>
		<keys final="1"><t path="Iterator"><c path="haxe.iterators.HashMapKeyValueIterator.K"/></t></keys>
		<hasNext public="1" get="inline" set="null" line="17">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="24">
			<f a=""><a>
	<value><c path="haxe.iterators.HashMapKeyValueIterator.V"/></value>
	<key><c path="haxe.iterators.HashMapKeyValueIterator.K"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="9"><f a="map">
	<x path="haxe.ds.HashMap">
		<c path="haxe.iterators.HashMapKeyValueIterator.K"/>
		<c path="haxe.iterators.HashMapKeyValueIterator.V"/>
	</x>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.iterators.MapKeyValueIterator" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/iterators/MapKeyValueIterator.hx">
		<map><c path="haxe.IMap">
	<c path="haxe.iterators.MapKeyValueIterator.K"/>
	<c path="haxe.iterators.MapKeyValueIterator.V"/>
</c></map>
		<keys><t path="Iterator"><c path="haxe.iterators.MapKeyValueIterator.K"/></t></keys>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="50">
			<f a=""><a>
	<value><c path="haxe.iterators.MapKeyValueIterator.V"/></value>
	<key><c path="haxe.iterators.MapKeyValueIterator.K"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35"><f a="map">
	<c path="haxe.IMap">
		<c path="haxe.iterators.MapKeyValueIterator.K"/>
		<c path="haxe.iterators.MapKeyValueIterator.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<haxe_doc>This Key/Value iterator can be used to iterate across maps.</haxe_doc>
		<meta><m n=":ifFeature">
	<e>"anon_read.keyValueIterator"</e>
	<e>"dynamic_read.keyValueIterator"</e>
</m></meta>
	</class>
	<class path="haxe.iterators.RestIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/RestIterator.hx">
		<args final="1"><x path="haxe.Rest"><c path="haxe.iterators.RestIterator.T"/></x></args>
		<current expr="0" line="5">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="12"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="16"><f a=""><c path="haxe.iterators.RestIterator.T"/></f></next>
		<new get="inline" set="null" line="8">
			<f a="args">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>haxe.Rest</e></m></meta>
		</new>
	</class>
	<class path="haxe.iterators.RestKeyValueIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/RestKeyValueIterator.hx">
		<args final="1"><x path="haxe.Rest"><c path="haxe.iterators.RestKeyValueIterator.T"/></x></args>
		<current expr="0" line="5">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="12"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="16"><f a=""><a>
	<value><c path="haxe.iterators.RestKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new get="inline" set="null" line="8">
			<f a="args">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>haxe.Rest</e></m></meta>
		</new>
	</class>
	<class path="haxe.iterators.StringIterator" params="" file="/home/runner/work/haxe/haxe/std/haxe/iterators/StringIterator.hx">
		<offset expr="0" line="32">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="45">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><x path="Int"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="38">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringIterator` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate over char codes in a string.

	Note that char codes may differ across platforms because of different
	internal encoding of strings in different of runtimes.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.iterators.StringIteratorUnicode" params="" file="/home/runner/work/haxe/haxe/std/haxe/iterators/StringIteratorUnicode.hx">
		<unicodeIterator public="1" get="inline" set="null" line="70" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringIteratorUnicode"/>
			</f>
			<haxe_doc>Convenience function which can be used as a static extension.</haxe_doc>
		</unicodeIterator>
		<offset expr="0" line="34">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="47">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="55">
			<f a=""><x path="Int"/></f>
			<meta><m n=":access"><e>StringTools</e></m></meta>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="40">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringIteratorUnicode` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate across strings in a cross-platform
	way. It handles surrogate pairs on platforms that require it. On each
	iteration, it returns the next character code.

	Note that this has different semantics than a standard for-loop over the
	String's length due to the fact that it deals with surrogate pairs.</haxe_doc>
	</class>
	<class path="haxe.iterators.StringKeyValueIterator" params="" file="/home/runner/work/haxe/haxe/std/haxe/iterators/StringKeyValueIterator.hx">
		<offset expr="0" line="32">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="45">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `KeyValueIterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><a>
	<value><x path="Int"/></value>
	<key><x path="Int"/></key>
</a></f>
			<haxe_doc>See `KeyValueIterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="38">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringKeyValueIterator` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate over char indexes and char codes in a string.

	Note that char codes may differ across platforms because of different
	internal encoding of strings in different runtimes.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.iterators.StringKeyValueIteratorUnicode" params="" file="/home/runner/work/haxe/haxe/std/haxe/iterators/StringKeyValueIteratorUnicode.hx">
		<unicodeKeyValueIterator public="1" get="inline" set="null" line="73" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
			</f>
			<haxe_doc>Convenience function which can be used as a static extension.</haxe_doc>
		</unicodeKeyValueIterator>
		<byteOffset expr="0" line="36">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</byteOffset>
		<charOffset expr="0" line="37">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</charOffset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="50">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="58">
			<f a=""><a>
	<value><x path="Int"/></value>
	<key><x path="Int"/></key>
</a></f>
			<meta><m n=":access"><e>StringTools</e></m></meta>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="43">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringKeyValueIteratorUnicode` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate across strings in a cross-platform
	way. It handles surrogate pairs on platforms that require it. On each
	iteration, it returns the next character offset as key and the next
	character code as value.

	Note that in the general case, because of surrogate pairs, the key values
	should not be used as offsets for various String API operations. For the
	same reason, the last key value returned might be less than `s.length - 1`.</haxe_doc>
	</class>
	<abstract path="haxe.macro.ModuleCheckPolicy" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx" module="haxe.macro.CompilationServer">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1" final="1">
	<NoFileSystemCheck public="1" get="inline" set="null" expr="cast 0" line="31" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
	</NoFileSystemCheck>
	<CheckFileModificationTime public="1" get="inline" set="null" expr="cast 1" line="36" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Default behavior: check last modification time.</haxe_doc>
	</CheckFileModificationTime>
	<CheckFileContentModification public="1" get="inline" set="null" expr="cast 2" line="42" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
	</CheckFileContentModification>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1" final="1">
		<NoFileSystemCheck public="1" get="inline" set="null" expr="cast 0" line="31" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
		</NoFileSystemCheck>
		<CheckFileModificationTime public="1" get="inline" set="null" expr="cast 1" line="36" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Default behavior: check last modification time.</haxe_doc>
		</CheckFileModificationTime>
		<CheckFileContentModification public="1" get="inline" set="null" expr="cast 2" line="42" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
		</CheckFileContentModification>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.macro.CompilationServer" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx"><haxe_doc>This class provides some methods which can be invoked from command line using
	`--macro server.field(args)`.</haxe_doc></class>
	<class path="haxe.macro.Compiler" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx">
		<getDefine public="1" set="method" static="1">
			<f a="key">
				<d/>
				<d/>
			</f>
			<haxe_doc>A conditional compilation flag can be set on the command line using
		`-D key=value`.

		Returns the value of a compiler flag.

		If the compiler flag is defined but no value is set,
		`Compiler.getDefine` returns `"1"` (e.g. `-D key`).

		If the compiler flag is not defined, `Compiler.getDefine` returns
		`null`.

		Note: This is a macro and cannot be called from within other macros. Refer
		to `haxe.macro.Context.definedValue` to obtain defined values in macro context.

		@see https://haxe.org/manual/lf-condition-compilation.html</haxe_doc>
		</getDefine>
		<getHxbWriterConfiguration public="1" set="method" line="471" static="1">
			<f a=""><x path="Null"><t path="haxe.hxb.WriterConfig"/></x></f>
			<haxe_doc>Gets the current hxb writer configuration, if any.</haxe_doc>
		</getHxbWriterConfiguration>
		<setHxbWriterConfiguration public="1" set="method" line="496" static="1">
			<f a="config">
				<x path="Null"><t path="haxe.hxb.WriterConfig"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hxb writer configuration to `config`. If no hxb writer configuration
		exists, it is created.

		The intended usage is

		```
		var config = Compiler.getHxbWriterConfiguration();
		config.archivePath = "newPath.zip";
		// Other changes
		Compiler.setHxbWriterConfiguration(config);
		```

		If `config` is `null`, hxb writing is disabled.

		@see haxe.hxb.WriterConfig</haxe_doc>
		</setHxbWriterConfiguration>
		<haxe_doc>All these methods can be called for compiler configuration macros.</haxe_doc>
	</class>
	<abstract path="haxe.macro.IncludePosition" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
	<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="507" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "top"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Prepend the file content to the output file.</haxe_doc>
	</Top>
	<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="514" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "closure"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
	</Closure>
	<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="519" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "inline"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
	</Inline>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
		<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="507" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "top"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Prepend the file content to the output file.</haxe_doc>
		</Top>
		<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="514" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "closure"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
		</Closure>
		<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="519" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "inline"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
		</Inline>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.macro.NullSafetyMode" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.NullSafetyMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
	<Off public="1" get="inline" set="null" expr="cast &quot;Off&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Off"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Disable null safety.</haxe_doc>
	</Off>
	<Loose public="1" get="inline" set="null" expr="cast &quot;Loose&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Loose"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc><![CDATA[Loose safety.
		If an expression is checked `!= null`, then it's considered safe even if it could be modified after the check.
		E.g.
		```haxe
		function example(o:{field:Null<String>}) {
			if(o.field != null) {
				mutate(o);
				var notNullable:String = o.field; //no error
			}
		}

		function mutate(o:{field:Null<String>}) {
			o.field = null;
		}
		```]]></haxe_doc>
	</Loose>
	<Strict public="1" get="inline" set="null" expr="cast &quot;Strict&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Strict"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc><![CDATA[Full scale null safety.
		If a field is checked `!= null` it stays safe until a call is made or any field of any object is reassigned,
		because that could potentially alter an object of the checked field.
		E.g.
		```haxe
		function example(o:{field:Null<String>}, b:{o:{field:Null<String>}}) {
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				someCall();
				var notNullable:String = o.field; // Error!
			}
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				b.o = {field:null};
				var notNullable:String = o.field; // Error!
			}
		}
		```]]></haxe_doc>
	</Strict>
	<StrictThreaded public="1" get="inline" set="null" expr="cast &quot;StrictThreaded&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "StrictThreaded"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Full scale null safety for a multi-threaded environment.
		With this mode checking a field `!= null` does not make it safe, because it could be changed from another thread
		at the same time or immediately after the check.
		The only nullable thing could be safe are local variables.</haxe_doc>
	</StrictThreaded>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._Compiler.NullSafetyMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
		<Off public="1" get="inline" set="null" expr="cast &quot;Off&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Off"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Disable null safety.</haxe_doc>
		</Off>
		<Loose public="1" get="inline" set="null" expr="cast &quot;Loose&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Loose"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc><![CDATA[Loose safety.
		If an expression is checked `!= null`, then it's considered safe even if it could be modified after the check.
		E.g.
		```haxe
		function example(o:{field:Null<String>}) {
			if(o.field != null) {
				mutate(o);
				var notNullable:String = o.field; //no error
			}
		}

		function mutate(o:{field:Null<String>}) {
			o.field = null;
		}
		```]]></haxe_doc>
		</Loose>
		<Strict public="1" get="inline" set="null" expr="cast &quot;Strict&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Strict"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc><![CDATA[Full scale null safety.
		If a field is checked `!= null` it stays safe until a call is made or any field of any object is reassigned,
		because that could potentially alter an object of the checked field.
		E.g.
		```haxe
		function example(o:{field:Null<String>}, b:{o:{field:Null<String>}}) {
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				someCall();
				var notNullable:String = o.field; // Error!
			}
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				b.o = {field:null};
				var notNullable:String = o.field; // Error!
			}
		}
		```]]></haxe_doc>
		</Strict>
		<StrictThreaded public="1" get="inline" set="null" expr="cast &quot;StrictThreaded&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "StrictThreaded"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Full scale null safety for a multi-threaded environment.
		With this mode checking a field `!= null` does not make it safe, because it could be changed from another thread
		at the same time or immediately after the check.
		The only nullable thing could be safe are local variables.</haxe_doc>
		</StrictThreaded>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.macro.MetadataDescription" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler"><a>
	<targets final="1" set="null">
		<x path="Null"><c path="Array"><x path="haxe.display.MetadataTarget"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Places where this metadata can be applied.</haxe_doc>
	</targets>
	<platforms final="1" set="null">
		<x path="Null"><c path="Array"><e path="haxe.macro.Platform"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Haxe target(s) for which this metadata is used.</haxe_doc>
	</platforms>
	<params final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>List (small description) of parameters that this metadata accepts.</haxe_doc>
	</params>
	<metadata final="1" set="null"><c path="String"/></metadata>
	<links final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>External resources for more information about this metadata.</haxe_doc>
	</links>
	<doc final="1" set="null"><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.macro.DefineDescription" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler"><a>
	<platforms final="1" set="null">
		<x path="Null"><c path="Array"><e path="haxe.macro.Platform"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Haxe target(s) for which this define is used.</haxe_doc>
	</platforms>
	<params final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>List (small description) of parameters that this define accepts.</haxe_doc>
	</params>
	<links final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>External resources for more information about this define.</haxe_doc>
	</links>
	<doc final="1" set="null"><c path="String"/></doc>
	<define final="1" set="null"><c path="String"/></define>
</a></typedef>
	<typedef path="haxe.macro.CompilerConfiguration" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler"><a>
	<version final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The version integer of the current Haxe compiler build.</haxe_doc>
	</version>
	<verbose final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>If `--verbose` mode is enabled, this is `true`.</haxe_doc>
	</verbose>
	<stdPath final="1" set="null">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>A list of paths being used for the standard library.</haxe_doc>
	</stdPath>
	<platformConfig final="1" set="null">
		<t path="haxe.macro.PlatformConfig"/>
		<haxe_doc>The compilation configuration for the target platform.</haxe_doc>
	</platformConfig>
	<platform final="1" set="null">
		<e path="haxe.macro.Platform"/>
		<haxe_doc>The target platform.</haxe_doc>
	</platform>
	<packageRules final="1" set="null">
		<t path="Map">
			<c path="String"/>
			<e path="haxe.macro.PackageRule"/>
		</t>
		<haxe_doc>Special access rules for packages depending on the compiler configuration.

		For example, the "java" package is "Forbidden" when the target platform is Python.</haxe_doc>
	</packageRules>
	<mainClass final="1" set="null">
		<t path="haxe.macro.TypePath"/>
		<haxe_doc>The path of the class passed using the `-main` argument.</haxe_doc>
	</mainClass>
	<foptimize final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>If `--no-opt` is enabled, this is `false`.</haxe_doc>
	</foptimize>
	<debug final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>If `--debug` mode is enabled, this is `true`.</haxe_doc>
	</debug>
	<args final="1" set="null">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>Returns an array of the arguments passed to the compiler from either the `.hxml` file or the command line.</haxe_doc>
	</args>
</a></typedef>
	<enum path="haxe.macro.Platform" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<Cross/>
		<Js/>
		<Lua/>
		<Neko/>
		<Flash/>
		<Php/>
		<Cpp/>
		<Jvm/>
		<Python/>
		<Hl/>
		<Eval/>
		<CustomTarget a="name"><c path="String"/></CustomTarget>
	</enum>
	<enum path="haxe.macro.PackageRule" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<Forbidden/>
		<Directory a="path"><c path="String"/></Directory>
		<Remap a="path"><c path="String"/></Remap>
	</enum>
	<class path="haxe.macro.ComplexTypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/ComplexTypeTools.hx">
		<toString public="1" set="method" line="40" static="1">
			<f a="c">
				<e path="haxe.macro.ComplexType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts type `c` to a human-readable `String` representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<haxe_doc>This class provides some utility methods to work with AST-level types. It is
	best used through `using haxe.macro.ComplexTypeTools` syntax and then provides
	additional methods on `haxe.macro.ComplexType` instances.</haxe_doc>
	</class>
	<enum path="haxe.macro.Message" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Context.hx" module="haxe.macro.Context">
		<Info a="msg:pos">
			<c path="String"/>
			<t path="haxe.macro.Position"/>
		</Info>
		<Warning a="msg:pos">
			<c path="String"/>
			<t path="haxe.macro.Position"/>
		</Warning>
	</enum>
	<class path="haxe.macro.Context" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Context.hx"><haxe_doc>Context provides an API for macro programming.

	It contains common functions that interact with the macro interpreter to
	query or set information. Other API functions are available in the tools
	classes:

	- `haxe.macro.ComplexTypeTools`
	- `haxe.macro.ExprTools`
	- `haxe.macro.TypeTools`</haxe_doc></class>
	<enum path="haxe.macro.DisplayMode" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/DisplayMode.hx">
		<None/>
		<Default/>
		<Definition/>
		<TypeDefinition/>
		<Implementation/>
		<Package/>
		<Hover/>
		<References a="withDefinition:findDescendants:findBase">
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</References>
		<ModuleSymbols/>
		<WorkspaceSymbols a="filter"><c path="String"/></WorkspaceSymbols>
		<Signature/>
	</enum>
	<typedef path="haxe.macro.Position" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.StringLiteralKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<DoubleQuotes/>
		<SingleQuotes/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.Constant" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v:?s">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents an integer literal.</haxe_doc>
		</CInt>
		<CFloat a="f:?s">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents a float literal.</haxe_doc>
		</CFloat>
		<CString a="s:?kind">
			<c path="String"/>
			<e path="haxe.macro.StringLiteralKind"/>
			<haxe_doc>Represents a string literal.</haxe_doc>
		</CString>
		<CIdent a="s">
			<c path="String"/>
			<haxe_doc>Represents an identifier.</haxe_doc>
		</CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents a regular expression literal.

		Example: `~/haxe/i`

		- The first argument `haxe` is a string with regular expression pattern.
		- The second argument `i` is a string with regular expression flags.

		@see https://haxe.org/manual/std-regex.html</haxe_doc>
		</CRegexp>
		<haxe_doc>Represents a constant.
	@see https://haxe.org/manual/expression-constants.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=` `-=` `/=` `*=` `<<=` `>>=` `>>>=` `|=` `&=` `^=` `%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
		<OpIn><haxe_doc>`in`</haxe_doc></OpIn>
		<OpNullCoal><haxe_doc>`??`</haxe_doc></OpNullCoal>
		<haxe_doc>A binary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<OpSpread><haxe_doc>`...`</haxe_doc></OpSpread>
		<haxe_doc>A unary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.EFieldKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<Normal/>
		<Safe/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<namePos>
				<x path="Null"><t path="haxe.macro.Position"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The position of the variable name.</haxe_doc>
			</namePos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Metadata associatied with the variable, if available.</haxe_doc>
			</meta>
			<isStatic>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable is static.</haxe_doc>
			</isStatic>
			<isFinal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable can be assigned to.</haxe_doc>
			</isFinal>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@see https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<enum path="haxe.macro.QuoteStatus" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<Unquoted><haxe_doc>No quotes</haxe_doc></Unquoted>
		<Quoted><haxe_doc>Double quotes `"`</haxe_doc></Quoted>
		<haxe_doc>Represents the way something is quoted.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.ObjectField" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<quotes>
				<x path="Null"><e path="haxe.macro.QuoteStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>How the field name is quoted.</haxe_doc>
			</quotes>
			<field>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</field>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The field expression.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents the field of an object declaration.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FunctionKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FAnonymous><haxe_doc>Anonymous function</haxe_doc></FAnonymous>
		<FNamed a="name:?inlined">
			<c path="String"/>
			<x path="Bool"/>
			<haxe_doc>Named function</haxe_doc>
		</FNamed>
		<FArrow><haxe_doc>Arrow function</haxe_doc></FArrow>
		<haxe_doc>Represents function kind in the AST</haxe_doc>
	</enum>
	<enum path="haxe.macro.ExprDef" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c">
			<e path="haxe.macro.Constant"/>
			<haxe_doc>A constant.</haxe_doc>
		</EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</EBinop>
		<EField a="e:field:?kind">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
			<e path="haxe.macro.EFieldKind"/>
			<haxe_doc>Field access on `e.field`.

		If `kind` is null, it is equal to Normal.</haxe_doc>
		</EField>
		<EParenthesis a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</EParenthesis>
		<EObjectDecl a="fields">
			<c path="Array"><t path="haxe.macro.ObjectField"/></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</EObjectDecl>
		<EArrayDecl a="values">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A call `e(params)`.</haxe_doc>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A constructor call `new t(params)`.</haxe_doc>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An unary operator `op` on `e`:

		- `e++` (`op = OpIncrement, postFix = true`)
		- `e--` (`op = OpDecrement, postFix = true`)
		- `++e` (`op = OpIncrement, postFix = false`)
		- `--e` (`op = OpDecrement, postFix = false`)
		- `-e` (`op = OpNeg, postFix = false`)
		- `!e` (`op = OpNot, postFix = false`)
		- `~e` (`op = OpNegBits, postFix = false`)</haxe_doc>
		</EUnop>
		<EVars a="vars">
			<c path="Array"><t path="haxe.macro.Var"/></c>
			<haxe_doc>Variable declarations.</haxe_doc>
		</EVars>
		<EFunction a="kind:f">
			<x path="Null"><e path="haxe.macro.FunctionKind"/></x>
			<t path="haxe.macro.Function"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</EFunction>
		<EBlock a="exprs">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A block of expressions `{exprs}`.</haxe_doc>
		</EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</EFor>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>An `if (econd) eif` or `if (econd) eif else eelse` expression.</haxe_doc>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.

		When `normalWhile` is `true` it is `while (...)`.

		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>Represents a `switch` expression with related cases and an optional.
		`default` case if `edef != null`.</haxe_doc>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</ETry>
		<EReturn a="?e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</EReturn>
		<EBreak><haxe_doc>A `break` expression.</haxe_doc></EBreak>
		<EContinue><haxe_doc>A `continue` expression.</haxe_doc></EContinue>
		<EUntyped a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An `untyped e` source code.</haxe_doc>
		</EUntyped>
		<EThrow a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</ECast>
		<EDisplay a="e:displayKind">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.DisplayKind"/>
			<haxe_doc>Used internally to provide completion.</haxe_doc>
		</EDisplay>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(econd) ? eif : eelse` expression.</haxe_doc>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>A `(e:t)` expression.</haxe_doc>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `@m e` expression.</haxe_doc>
		</EMeta>
		<EIs a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>An `expr is Type` expression.</haxe_doc>
		</EIs>
		<haxe_doc>Represents the kind of a node in the AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.DisplayKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<DKCall/>
		<DKDot/>
		<DKStructure/>
		<DKMarked/>
		<DKPattern a="outermost"><x path="Bool"/></DKPattern>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Represents the type path.</haxe_doc>
		</TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a function type.
		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFunction>
		<TAnonymous a="fields">
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc>Represents an anonymous structure type.
		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TParent a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc><![CDATA[Represents parentheses around a type, e.g. the `(Int -> Void)` part in
		`(Int -> Void) -> String`.]]></haxe_doc>
		</TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc><![CDATA[Represents typedef extensions `> Iterable<T>`.
		The array `p` holds the type paths to the given types.
		@see https://haxe.org/manual/type-system-extensions.html]]></haxe_doc>
		</TExtend>
		<TOptional a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an optional type.</haxe_doc>
		</TOptional>
		<TNamed a="n:t">
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a type with a name.</haxe_doc>
		</TNamed>
		<TIntersection a="tl">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc><![CDATA[Represents an intersection type `T1 & T2 & ... & TN`.]]></haxe_doc>
		</TIntersection>
		<haxe_doc>Represents a type syntax in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has `name = "Module"`, `sub = "Type"`, if available.</haxe_doc>
			</sub>
			<params>
				<x path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPExpr a="e"><t path="haxe.macro.Expr"/></TPExpr>
		<haxe_doc><![CDATA[Represents a concrete type parameter in the AST.

	Haxe allows expressions in concrete type parameters, e.g.
	`new YourType<["hello", "world"]>`. In that case the value is `TPExpr` while
	in the normal case it's `TPType`.]]></haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<defaultType>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional default type of the type parameter.</haxe_doc>
			</defaultType>
			<constraints>
				<x path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<x path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Access" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic><haxe_doc>Public access modifier, grants access from anywhere.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APublic>
		<APrivate><haxe_doc>Private access modifier, grants access to class and its sub-classes
		only.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APrivate>
		<AStatic><haxe_doc>Static access modifier.</haxe_doc></AStatic>
		<AOverride><haxe_doc>Override access modifier.
		@see https://haxe.org/manual/class-field-override.html</haxe_doc></AOverride>
		<ADynamic><haxe_doc>Dynamic (re-)bindable access modifier.
		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></ADynamic>
		<AInline><haxe_doc>Inline access modifier. Allows expressions to be directly inserted in
		place of calls to them.
		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></AInline>
		<AMacro><haxe_doc>Macro access modifier. Allows expression macro functions. These are
		normal functions which are executed as soon as they are typed.</haxe_doc></AMacro>
		<AFinal><haxe_doc>Final access modifier. For functions, they can not be overridden. For
		variables, it means they can be assigned to only once.</haxe_doc></AFinal>
		<AExtern><haxe_doc>Extern access modifier.</haxe_doc></AExtern>
		<AAbstract><haxe_doc>Abstract access modifier.</haxe_doc></AAbstract>
		<AOverload><haxe_doc>Overload access modifier.</haxe_doc></AOverload>
		<AEnum><haxe_doc>Enum access modifier.</haxe_doc></AEnum>
		<haxe_doc>Represents an access modifier.
	@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a variable field type.</haxe_doc>
		</FVar>
		<FFun a="f">
			<t path="haxe.macro.Function"/>
			<haxe_doc>Represents a function field type.</haxe_doc>
		</FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a property with getter and setter field type.</haxe_doc>
		</FProp>
		<haxe_doc>Represents the field type in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the type, if available. If the type has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDEnum><haxe_doc>Represents an enum kind.</haxe_doc></TDEnum>
		<TDStructure><haxe_doc>Represents a structure kind.</haxe_doc></TDStructure>
		<TDClass a="?superClass:?interfaces:?isInterface:?isFinal:?isAbstract">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<haxe_doc>Represents a class kind.</haxe_doc>
		</TDClass>
		<TDAlias a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an alias/typedef kind.</haxe_doc>
		</TDAlias>
		<TDAbstract a="tthis:?flags:?from:?to">
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<c path="Array"><e path="haxe.macro.AbstractFlag"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc>Represents an abstract kind.</haxe_doc>
		</TDAbstract>
		<TDField a="kind:?access">
			<e path="haxe.macro.FieldType"/>
			<c path="Array"><e path="haxe.macro.Access"/></c>
			<haxe_doc>Represents a module-level field.</haxe_doc>
		</TDField>
		<haxe_doc>Represents a type definition kind.</haxe_doc>
	</enum>
	<enum path="haxe.macro.AbstractFlag" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<AbEnum><haxe_doc>Indicates that this abstract is an `enum abstract`</haxe_doc></AbEnum>
		<AbFrom a="ct">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Indicates that this abstract can be assigned from `ct`.
		This flag can be added several times to add multiple "from" types.</haxe_doc>
		</AbFrom>
		<AbTo a="ct">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Indicates that this abstract can be assigned to `ct`.
		This flag can be added several times to add multiple "to" types.</haxe_doc>
		</AbTo>
		<haxe_doc>Represents an abstract flag.</haxe_doc>
	</enum>
	<class path="haxe.macro.Error" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<extends path="haxe.Exception"/>
		<pos public="1">
			<t path="haxe.macro.Position"/>
			<haxe_doc>The position of the error.</haxe_doc>
		</pos>
		<childErrors>
			<c path="Array"><c path="haxe.macro.Error"/></c>
			<haxe_doc>Child error messages, if any.</haxe_doc>
		</childErrors>
		<new public="1" set="method" line="1055">
			<f a="message:pos:?previous">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<c path="haxe.Exception"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Instantiates an error with given message and position.</haxe_doc>
		</new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<enum path="haxe.macro.ImportMode" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<INormal><haxe_doc>Represents a default import `import c`.</haxe_doc></INormal>
		<IAsName a="alias">
			<c path="String"/>
			<haxe_doc>Represents the alias import `import c as alias`.</haxe_doc>
		</IAsName>
		<IAll><haxe_doc>Represents the wildcard import `import *`.</haxe_doc></IAll>
		<haxe_doc>Represents the import mode.
	@see https://haxe.org/manual/type-system-import.html</haxe_doc>
	</enum>
	<typedef path="haxe.macro.ImportExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<class path="haxe.macro.ExprTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/ExprTools.hx">
		<toString public="1" set="method" line="45" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts expression `e` to a human-readable String representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<iter public="1" set="method" line="71" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		If `e` has no sub-expressions, this operation has no effect.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function findStrings(e:Expr) {
			switch(e.expr) {
				case EConst(CString(s)):
					// handle s
				case _:
					ExprTools.iter(e, findStrings);
			}
		}
		```</haxe_doc>
		</iter>
		<map public="1" set="method" line="140" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<t path="haxe.macro.Expr"/>
				</f>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		If `e` has no sub-expressions, this operation returns `e` unchanged.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function capitalizeStrings(e:Expr) {
			return switch(e.expr) {
				case EConst(CString(s)):
					{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };
				case _:
					ExprTools.map(e, capitalizeStrings);
			}
		}
		```</haxe_doc>
		</map>
		<getValue public="1" set="method" line="230" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Returns the value `e` represents.

		Supported expressions are:

		 - `Int`, `Float` and `String` literals
		 - identifiers `true`, `false` and `null`
		 - structure declarations if all their fields are values
		 - array declarations if all their elements are values
		 - unary operators `-`, `!` and `~` if the operand is a value
		 - binary operators except `=>`, `...` and assignments

		Parentheses, metadata and the `untyped` keyword are ignored.

		If any non-value is encountered, an exception of type `String` is
		thrown.

		If `e` is null, the result is unspecified.]]></haxe_doc>
		</getValue>
		<opt get="inline" set="null" line="291" static="1"><f a="e:f">
	<x path="Null"><t path="haxe.macro.Expr"/></x>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<t path="haxe.macro.Expr"/>
</f></opt>
		<opt2 get="inline" set="null" line="294" static="1"><f a="e:f">
	<x path="Null"><t path="haxe.macro.Expr"/></x>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></opt2>
		<haxe_doc>This class provides some utility methods to work with expressions. It is
	best used through 'using haxe.macro.ExprTools' syntax and then provides
	additional methods on haxe.macro.Expr instances.

	While mainly intended to be used in macros, it works in non-macro code as
	well.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprArrayTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/ExprTools.hx" module="haxe.macro.ExprTools">
		<map public="1" set="method" line="303" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></map>
		<iter public="1" set="method" line="310" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<haxe_doc>This class provides functions on expression arrays for convenience. For a
	detailed reference on each method, see the documentation of ExprTools.</haxe_doc>
	</class>
	<class path="haxe.macro.Format" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Format.hx"><haxe_doc>The actual macro implemented for Std.format</haxe_doc></class>
	<typedef path="haxe.macro.JSGenApi" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/JSGenApi.hx">
		<a>
			<types>
				<c path="Array"><e path="haxe.macro.Type"/></c>
				<haxe_doc>all the types that were compiled by Haxe</haxe_doc>
			</types>
			<setTypeAccessor set="method">
				<f a="callb">
					<f a="">
						<e path="haxe.macro.Type"/>
						<c path="String"/>
					</f>
					<x path="Void"/>
				</f>
				<haxe_doc>define the JS code that gets generated when a class or enum is accessed in a typed expression</haxe_doc>
			</setTypeAccessor>
			<setCurrentClass set="method">
				<f a="c">
					<t path="haxe.macro.ClassType"/>
					<x path="Void"/>
				</f>
				<haxe_doc>select the current classe</haxe_doc>
			</setCurrentClass>
			<quoteString set="method">
				<f a="s">
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc>quote and escape the given string constant</haxe_doc>
			</quoteString>
			<outputFile>
				<c path="String"/>
				<haxe_doc>the file in which the JS code can be generated</haxe_doc>
			</outputFile>
			<main>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>the main call expression, if a -main class is defined</haxe_doc>
			</main>
			<isKeyword set="method">
				<f a="ident">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>tells if the given identifier is a JS keyword</haxe_doc>
			</isKeyword>
			<hasFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>check if a feature is used</haxe_doc>
			</hasFeature>
			<generateValue set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for a given typed expression-value</haxe_doc>
			</generateValue>
			<generateStatement set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for any given typed expression</haxe_doc>
			</generateStatement>
			<buildMetaData set="method">
				<f a="t">
					<t path="haxe.macro.BaseType"/>
					<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				</f>
				<haxe_doc>create the metadata expression for the given type</haxe_doc>
			</buildMetaData>
			<addFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>add a feature</haxe_doc>
			</addFeature>
		</a>
		<haxe_doc>This is the api that is passed to the custom JS generator.</haxe_doc>
	</typedef>
	<class path="haxe.macro.MacroStringTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/MacroStringTools.hx">
		<toFieldExpr public="1" set="method" line="65" static="1">
			<f a="sl:?pos">
				<c path="Array"><c path="String"/></c>
				<t path="haxe.macro.Position"/>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Converts an array of Strings `sl` to a field expression.

		If `sl` has no elements, the result is null.

		If `sl` has one element, the result is `EConst(CIdent(sl[0])`.

		Otherwise the result is a chain of `EField` nodes.

		If `sl` is null, the result is unspecified.</haxe_doc>
		</toFieldExpr>
		<toDotPath public="1" set="method" line="88" static="1">
			<f a="pack:name">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a path given by package `pack` and name `name` to a `String`
		separated by dots.

		If `pack` has no elements, the result is `name`.

		If `pack` is null, the result is unspecified.

		Otherwise the elements of `pack` are joined with a separating dot, with
		an appended dot separating the result from `name`.</haxe_doc>
		</toDotPath>
		<toComplex public="1" set="method" line="92" static="1"><f a="path">
	<c path="String"/>
	<e path="haxe.macro.ComplexType"/>
</f></toComplex>
		<haxe_doc>This class provides some utility methods to work with strings in macro
	context.</haxe_doc>
	</class>
	<class path="haxe.macro.MacroType" params="Const" file="/home/runner/work/haxe/haxe/std/haxe/macro/MacroType.hx" extern="1"><haxe_doc><![CDATA[This type is meant to be used to generate custom types using a macro.
	For instance by doing MacroType<[my.Class.myMacro(55)]>]]></haxe_doc></class>
	<typedef path="haxe.macro.PlatformConfig" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx">
		<a>
			<usesUtf16 final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Uses utf16 encoding with ucs2 api</haxe_doc>
			</usesUtf16>
			<thisBeforeSuper final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports accessing `this` before calling `super(...)`</haxe_doc>
			</thisBeforeSuper>
			<sys final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Has access to the "sys" package</haxe_doc>
			</sys>
			<supportsUnicode final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports Unicode</haxe_doc>
			</supportsUnicode>
			<supportsThreads final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports threads</haxe_doc>
			</supportsThreads>
			<supportsRestArgs final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports rest arguments</haxe_doc>
			</supportsRestArgs>
			<supportsFunctionEquality final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Supports function == function</haxe_doc>
			</supportsFunctionEquality>
			<supportsAtomics final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports atomic operations via haxe.Atomic</haxe_doc>
			</supportsAtomics>
			<staticTypeSystem final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Has a static type system, with not-nullable basic types (Int/Float/Bool)</haxe_doc>
			</staticTypeSystem>
			<scoping final="1" set="null">
				<t path="haxe.macro.VarScopingConfig"/>
				<haxe_doc>The scoping of local variables</haxe_doc>
			</scoping>
			<reservedTypePaths final="1" set="null">
				<c path="Array"><t path="haxe.macro.TypePath"/></c>
				<haxe_doc>Type paths that are reserved on the platform</haxe_doc>
			</reservedTypePaths>
			<padNulls final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>When calling a method with optional args, do we replace the missing args with "null" constants</haxe_doc>
			</padNulls>
			<overloadFunctions final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Does the platform natively support overloaded functions</haxe_doc>
			</overloadFunctions>
			<exceptions final="1" set="null">
				<t path="haxe.macro.ExceptionsConfig"/>
				<haxe_doc>Exceptions handling config</haxe_doc>
			</exceptions>
			<capturePolicy final="1" set="null">
				<e path="haxe.macro.CapturePolicy"/>
				<haxe_doc>Captured variables handling (see before)</haxe_doc>
			</capturePolicy>
			<addFinalReturn final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Add a final return to methods not having one already - prevent some compiler warnings</haxe_doc>
			</addFinalReturn>
		</a>
		<haxe_doc>Represents the internal structure generated with options assigned based on
	the target platform.

	Warning: `PlatformConfig` and the typedefs unique to its fields correspond to
	compiler-internal data structures and might change in minor Haxe releases in
	order to adapt to internal changes.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.CapturePolicy" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig">
		<None><haxe_doc>Do nothing, let the platform handle it</haxe_doc></None>
		<WrapRef><haxe_doc>Wrap all captured variables into a single-element array to allow modifications</haxe_doc></WrapRef>
		<LoopVars><haxe_doc>Similar to wrap ref, but will only apply to the locals that are declared in loops</haxe_doc></LoopVars>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.VarScopingConfig" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig"><a>
	<scope final="1" set="null"><e path="haxe.macro.VarScope"/></scope>
	<flags final="1" set="null"><c path="Array"><e path="haxe.macro.VarScopingFlags"/></c></flags>
</a></typedef>
	<enum path="haxe.macro.VarScope" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig">
		<FunctionScope/>
		<BlockScope/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.VarScopingFlags" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig">
		<VarHoisting><haxe_doc>Variables are hoisted in their scope</haxe_doc></VarHoisting>
		<NoShadowing><haxe_doc>It's not allowed to shadow existing variables in a scope.</haxe_doc></NoShadowing>
		<NoCatchVarShadowing><haxe_doc>It's not allowed to shadow a `catch` variable.</haxe_doc></NoCatchVarShadowing>
		<ReserveCurrentTopLevelSymbol><haxe_doc>Local vars cannot have the same name as the current top-level package or
		(if in the root package) current class name</haxe_doc></ReserveCurrentTopLevelSymbol>
		<ReserveAllTopLevelSymbols><haxe_doc>Local vars cannot have a name used for any top-level symbol
		(packages and classes in the root package)</haxe_doc></ReserveAllTopLevelSymbols>
		<ReserveAllTypesFlat><haxe_doc>Reserve all type-paths converted to "flat path" with `Path.flat_path`</haxe_doc></ReserveAllTypesFlat>
		<ReserveNames a="names">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>List of names cannot be taken by local vars</haxe_doc>
		</ReserveNames>
		<SwitchCasesNoBlocks><haxe_doc>Cases in a `switch` won't have blocks, but will share the same outer scope.</haxe_doc></SwitchCasesNoBlocks>
	</enum>
	<typedef path="haxe.macro.ExceptionsConfig" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig"><a>
	<wildcardCatch final="1" set="null">
		<t path="haxe.macro.TypePath"/>
		<haxe_doc>Path of a native class or interface, which can be used for wildcard catches.</haxe_doc>
	</wildcardCatch>
	<nativeThrows final="1" set="null">
		<c path="Array"><t path="haxe.macro.TypePath"/></c>
		<haxe_doc>Base types which may be thrown from Haxe code without wrapping.</haxe_doc>
	</nativeThrows>
	<nativeCatches final="1" set="null">
		<c path="Array"><t path="haxe.macro.TypePath"/></c>
		<haxe_doc>Base types which may be caught from Haxe code without wrapping.</haxe_doc>
	</nativeCatches>
	<baseThrow final="1" set="null">
		<t path="haxe.macro.TypePath"/>
		<haxe_doc>Path of a native base class or interface, which can be thrown.
		This type is used to cast `haxe.Exception.thrown(v)` calls to.
		For example `throw 123` is compiled to `throw (cast Exception.thrown(123):ec_base_throw)`</haxe_doc>
	</baseThrow>
	<avoidWrapping final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>Hint exceptions filter to avoid wrapping for targets, which can throw/catch any type
		Ignored on targets with a specific native base type for exceptions.</haxe_doc>
	</avoidWrapping>
</a></typedef>
	<class path="haxe.macro.PositionTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PositionTools.hx">
		<here public="1" set="method" static="1">
			<f a=""><t path="haxe.macro.Position"/></f>
			<haxe_doc>Returns the `Position` where the caller of `here` is.</haxe_doc>
		</here>
		<getInfos public="1" set="method" line="44" static="1">
			<f a="p">
				<t path="haxe.macro.Position"/>
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
			</f>
			<haxe_doc>Like `Context.getPosInfos`, except this method is available on all platforms.</haxe_doc>
		</getInfos>
		<make public="1" set="method" line="55" static="1">
			<f a="inf">
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
				<t path="haxe.macro.Position"/>
			</f>
			<haxe_doc>Like `Context.makePosition`, except this method is available on all platforms.</haxe_doc>
		</make>
	</class>
	<class path="haxe.macro.Printer" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Printer.hx">
		<tabs><c path="String"/></tabs>
		<tabString><c path="String"/></tabString>
		<printUnop public="1" set="method" line="44"><f a="op">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></printUnop>
		<printBinop public="1" set="method" line="54"><f a="op">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></printBinop>
		<escapeString set="method" line="83"><f a="s:delim">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<printFormatString public="1" set="method" line="93"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printFormatString>
		<printString public="1" set="method" line="97"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printString>
		<printConstant public="1" set="method" line="102"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></printConstant>
		<printTypeParam public="1" set="method" line="113"><f a="param">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></printTypeParam>
		<printTypePath public="1" set="method" line="119"><f a="tp">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></printTypePath>
		<printComplexType public="1" set="method" line="126"><f a="ct">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></printComplexType>
		<printMetadata public="1" set="method" line="154"><f a="meta">
	<t path="haxe.macro.MetadataEntry"/>
	<c path="String"/>
</f></printMetadata>
		<printAccess public="1" set="method" line="157"><f a="access">
	<e path="haxe.macro.Access"/>
	<c path="String"/>
</f></printAccess>
		<printField public="1" set="method" line="172"><f a="field">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printField>
		<printTypeParamDecl public="1" set="method" line="200"><f a="tpd">
	<t path="haxe.macro.TypeParamDecl"/>
	<c path="String"/>
</f></printTypeParamDecl>
		<printFunctionArg public="1" set="method" line="207"><f a="arg">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></printFunctionArg>
		<printFunction public="1" set="method" line="209"><f a="func:?kind">
	<t path="haxe.macro.Function"/>
	<e path="haxe.macro.FunctionKind"/>
	<c path="String"/>
</f></printFunction>
		<printVar public="1" set="method" line="223"><f a="v">
	<t path="haxe.macro.Var"/>
	<c path="String"/>
</f></printVar>
		<printObjectFieldKey public="1" set="method" line="231"><f a="of">
	<t path="haxe.macro.ObjectField"/>
	<c path="String"/>
</f></printObjectFieldKey>
		<printObjectField public="1" set="method" line="238"><f a="of">
	<t path="haxe.macro.ObjectField"/>
	<c path="String"/>
</f></printObjectField>
		<printExpr public="1" set="method" line="243"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExpr>
		<printExprs public="1" set="method" line="302"><f a="el:sep">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<c path="String"/>
	<c path="String"/>
</f></printExprs>
		<printExtension set="method" line="306"><f a="tpl:fields">
	<c path="Array"><t path="haxe.macro.TypePath"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printExtension>
		<printStructure set="method" line="313"><f a="fields">
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printStructure>
		<printTypeDefinition public="1" set="method" line="317">
			<f a="t:?printPackage" v=":true">
				<t path="haxe.macro.TypeDefinition"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ printPackage : true }</e></m></meta>
		</printTypeDefinition>
		<printFieldWithDelimiter set="method" line="436"><f a="f">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printFieldWithDelimiter>
		<opt params="T" set="method" line="447">
			<f a="v:f:?prefix" v="::&quot;&quot;">
				<c path="opt.T"/>
				<f a="">
					<c path="opt.T"/>
					<c path="String"/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ prefix : "" }</e></m></meta>
		</opt>
		<printExprWithPositions public="1" set="method" line="449"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExprWithPositions>
		<new public="1" set="method" line="38">
			<f a="?tabString" v="&quot;\t&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tabString : "\t" }</e></m></meta>
		</new>
		<haxe_doc>This class provides some utility methods to convert elements from the
	macro context to a human-readable String representation.</haxe_doc>
	</class>
	<typedef path="haxe.macro.TExprTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ExprTools"/>
		<haxe_doc><![CDATA[This class can be added via `using haxe.macro.Tools` in order to enable
	`using` functionality on these macro tool classes:

	- `haxe.macro.ExprTools`
	- `haxe.macro.ComplexTypeTools`
	- `haxe.macro.TypeTools`
	- `haxe.macro.MacroStringTools`
	- `haxe.macro.TypedExprTools`
	- `haxe.macro.PositionTools`

	  @see <https://haxe.org/manual/lf-static-extension.html>]]></haxe_doc>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TComplexTypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ComplexTypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TMacroStringTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.MacroStringTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypedExprTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypedExprTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TPositionTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.PositionTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Type" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx">
		<TMono a="t">
			<t path="haxe.macro.Ref"><x path="Null"><e path="haxe.macro.Type"/></x></t>
			<haxe_doc>Represents a monomorph.

		@see https://haxe.org/manual/types-monomorph.html</haxe_doc>
		</TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an enum instance.

		@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a class instance.

		@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a typedef.

		@see https://haxe.org/manual/type-system-typedef.html</haxe_doc>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
			<haxe_doc>Represents a function type.

		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFun>
		<TAnonymous a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t>
			<haxe_doc>Represents an anonymous structure type.

		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TDynamic a="t">
			<x path="Null"><e path="haxe.macro.Type"/></x>
			<haxe_doc>Represents Dynamic.

		@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		</TDynamic>
		<TLazy a="f">
			<f a=""><e path="haxe.macro.Type"/></f>
			<haxe_doc>Used internally by the compiler to delay some typing.</haxe_doc>
		</TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an abstract type.

		@see https://haxe.org/manual/types-abstract.html</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.AnonStatus" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AClosed><haxe_doc>A closed structure is considered complete. That is, no further fields
		can be added to it.</haxe_doc></AClosed>
		<AOpened><haxe_doc>An open structure allows having additional fields added to it, which is
		used during type inference. It is closed upon unification.</haxe_doc></AOpened>
		<AConst><haxe_doc>A const structure is one that appears directly in syntax. It cannot be
		assigned to a smaller structure type (that is, it does not allow
		structural sub-typing).</haxe_doc></AConst>
		<AExtend a="tl">
			<t path="haxe.macro.Ref"><c path="Array"><e path="haxe.macro.Type"/></c></t>
			<haxe_doc>Represents a structure which extends one or multiple structures defined
		in `tl`.

		@see https://haxe.org/manual/type-system-extensions.html</haxe_doc>
		</AExtend>
		<AClassStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A structure that represents the static fields of a class.</haxe_doc>
		</AClassStatics>
		<AEnumStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>A structure that represents the constructors of an enum.</haxe_doc>
		</AEnumStatics>
		<AAbstractStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>A structure that represents the static fields of an abstract.</haxe_doc>
		</AAbstractStatics>
		<haxe_doc>Represents the kind of the anonymous structure type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParameter" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<defaultType>
				<x path="Null"><e path="haxe.macro.Type"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The default type for this type parameter.</haxe_doc>
			</defaultType>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is final.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is extern.</haxe_doc>
			</isExtern>
			<isAbstract>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is abstract.</haxe_doc>
			</isAbstract>
			<expr set="method">
				<f a=""><x path="Null"><t path="haxe.macro.TypedExpr"/></x></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ClassKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KNormal><haxe_doc>A normal class.</haxe_doc></KNormal>
		<KTypeParameter a="constraints">
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A type parameter class with a set of constraints.</haxe_doc>
		</KTypeParameter>
		<KModuleFields a="module">
			<c path="String"/>
			<haxe_doc>A class containing module fields.</haxe_doc>
		</KModuleFields>
		<KExpr a="expr">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A special kind of class to encode expressions into type parameters.</haxe_doc>
		</KExpr>
		<KGeneric><haxe_doc>A `@:generic` base class.</haxe_doc></KGeneric>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A concrete `@:generic` instance, referencing the original class and the
		applied type parameters.</haxe_doc>
		</KGenericInstance>
		<KMacroType><haxe_doc>A special class for `haxe.macro.MacroType`.

		@deprecated</haxe_doc></KMacroType>
		<KAbstractImpl a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An implementation class of an abstract, i.e. where all its run-time code
		is.</haxe_doc>
		</KAbstractImpl>
		<KGenericBuild><haxe_doc>A `@:genericBuild` class</haxe_doc></KGenericBuild>
		<haxe_doc>Represents the kind of a class.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.BaseType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<x path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></x>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>If true the class is final and cannot be extended.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<isAbstract>
				<x path="Bool"/>
				<haxe_doc>If true the class is abstract and cannot be instantiated directly.</haxe_doc>
			</isAbstract>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></x>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<t path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</t>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolveWrite>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolveWrite>
			<resolve>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></x>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
			<haxe_doc>A variable of property, depending on the `read` and `write` values.</haxe_doc>
		</FVar>
		<FMethod a="k">
			<e path="haxe.macro.MethodKind"/>
			<haxe_doc>A method</haxe_doc>
		</FMethod>
		<haxe_doc>Represents a field kind.</haxe_doc>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccNormal><haxe_doc>Normal access (`default`).</haxe_doc></AccNormal>
		<AccNo><haxe_doc>Private access (`null`).</haxe_doc></AccNo>
		<AccNever><haxe_doc>No access (`never`).</haxe_doc></AccNever>
		<AccResolve><haxe_doc>Unused.</haxe_doc></AccResolve>
		<AccCall><haxe_doc>Access through accessor function (`get`, `set`, `dynamic`).</haxe_doc></AccCall>
		<AccInline><haxe_doc>Inline access (`inline`).</haxe_doc></AccInline>
		<AccRequire a="r:?msg">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Failed access due to a `@:require` metadata.</haxe_doc>
		</AccRequire>
		<AccCtor><haxe_doc>Access is only allowed from the constructor.</haxe_doc></AccCtor>
		<haxe_doc>Represents the variable accessor.</haxe_doc>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal><haxe_doc>A normal method.</haxe_doc></MethNormal>
		<MethInline><haxe_doc>An inline method.

		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></MethInline>
		<MethDynamic><haxe_doc>A dynamic, rebindable method.

		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></MethDynamic>
		<MethMacro><haxe_doc>A macro method.</haxe_doc></MethMacro>
		<haxe_doc>Represents the method kind.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.TConstant" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TInt a="i">
			<x path="Int"/>
			<haxe_doc>An `Int` literal.</haxe_doc>
		</TInt>
		<TFloat a="s">
			<c path="String"/>
			<haxe_doc>A `Float` literal, represented as String to avoid precision loss.</haxe_doc>
		</TFloat>
		<TString a="s">
			<c path="String"/>
			<haxe_doc>A `String` literal.</haxe_doc>
		</TString>
		<TBool a="b">
			<x path="Bool"/>
			<haxe_doc>A `Bool` literal.</haxe_doc>
		</TBool>
		<TNull><haxe_doc>The constant `null`.</haxe_doc></TNull>
		<TThis><haxe_doc>The constant `this`.</haxe_doc></TThis>
		<TSuper><haxe_doc>The constant `super`.</haxe_doc></TSuper>
		<haxe_doc>Represents typed constant.</haxe_doc>
	</enum>
	<enum path="haxe.macro.ModuleType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TClassDecl a="c">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A class.</haxe_doc>
		</TClassDecl>
		<TEnumDecl a="e">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>An enum.</haxe_doc>
		</TEnumDecl>
		<TTypeDecl a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<haxe_doc>A typedef.</haxe_doc>
		</TTypeDecl>
		<TAbstract a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An abstract.</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a module type. These are the types that can be declared in a Haxe
	module and which are passed to the generators (except `TTypeDecl`).</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TFunc" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><x path="Null"><t path="haxe.macro.TypedExpr"/></x></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FInstance a="c:params:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on a class instance `c` with type parameters
		`params`.</haxe_doc>
		</FInstance>
		<FStatic a="c:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Static access of a field `cf` on a class `c`.</haxe_doc>
		</FStatic>
		<FAnon a="cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on an anonymous structure.</haxe_doc>
		</FAnon>
		<FDynamic a="s">
			<c path="String"/>
			<haxe_doc>Dynamic field access of a field named `s`.</haxe_doc>
		</FDynamic>
		<FClosure a="c:cf">
			<x path="Null"><a>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
	<c><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></c>
</a></x>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Closure field access of field `cf` on a class instance `c` with type
		parameters `params`.</haxe_doc>
		</FClosure>
		<FEnum a="e:ef">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<t path="haxe.macro.EnumField"/>
			<haxe_doc>Field access to an enum constructor `ef` of enum `e`.</haxe_doc>
		</FEnum>
		<haxe_doc>Represents the kind of field access in the typed AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.TypedExprDef" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TConst a="c">
			<e path="haxe.macro.TConstant"/>
			<haxe_doc>A constant.</haxe_doc>
		</TConst>
		<TLocal a="v">
			<t path="haxe.macro.TVar"/>
			<haxe_doc>Reference to a local variable `v`.</haxe_doc>
		</TLocal>
		<TArray a="e1:e2">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</TArray>
		<TBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</TBinop>
		<TField a="e:fa">
			<t path="haxe.macro.TypedExpr"/>
			<e path="haxe.macro.FieldAccess"/>
			<haxe_doc>Field access on `e` according to `fa`.</haxe_doc>
		</TField>
		<TTypeExpr a="m">
			<e path="haxe.macro.ModuleType"/>
			<haxe_doc>Reference to a module type `m`.</haxe_doc>
		</TTypeExpr>
		<TParenthesis a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</TParenthesis>
		<TObjectDecl a="fields">
			<c path="Array"><a>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</TObjectDecl>
		<TArrayDecl a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</TArrayDecl>
		<TCall a="e:el">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A call `e(el)`.</haxe_doc>
		</TCall>
		<TNew a="c:params:el">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc><![CDATA[A constructor call `new c<params>(el)`.]]></haxe_doc>
		</TNew>
		<TUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</TUnop>
		<TFunction a="tfunc">
			<t path="haxe.macro.TFunc"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</TFunction>
		<TVar a="v:expr">
			<t path="haxe.macro.TVar"/>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>A variable declaration `var v` or `var v = expr`.</haxe_doc>
		</TVar>
		<TBlock a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A block declaration `{el}`.</haxe_doc>
		</TBlock>
		<TFor a="v:e1:e2">
			<t path="haxe.macro.TVar"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</TFor>
		<TIf a="econd:eif:eelse">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</TIf>
		<TWhile a="econd:e:normalWhile">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</TWhile>
		<TSwitch a="e:cases:edef">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.TypedExpr"/></c></values>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>Represents a `switch` expression with related cases and an optional
		`default` case if edef != null.</haxe_doc>
		</TSwitch>
		<TTry a="e:catches">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<v><t path="haxe.macro.TVar"/></v>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</TTry>
		<TReturn a="e">
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</TReturn>
		<TBreak><haxe_doc>A `break` expression.</haxe_doc></TBreak>
		<TContinue><haxe_doc>A `continue` expression.</haxe_doc></TContinue>
		<TThrow a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</TThrow>
		<TCast a="e:m">
			<t path="haxe.macro.TypedExpr"/>
			<x path="Null"><e path="haxe.macro.ModuleType"/></x>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</TCast>
		<TMeta a="m:e1">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `@m e1` expression.</haxe_doc>
		</TMeta>
		<TEnumParameter a="e1:ef:index">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.EnumField"/>
			<x path="Int"/>
			<haxe_doc>Access to an enum parameter (generated by the pattern matcher).</haxe_doc>
		</TEnumParameter>
		<TEnumIndex a="e1">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Access to an enum index (generated by the pattern matcher).</haxe_doc>
		</TEnumIndex>
		<TIdent a="s">
			<c path="String"/>
			<haxe_doc>An unknown identifier.</haxe_doc>
		</TIdent>
		<haxe_doc>Represents kind of a node in the typed AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TVar" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<x path="Null"><t path="haxe.macro.MetaAccess"/></x>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<isStatic set="null">
				<x path="Bool"/>
				<haxe_doc>Whether the variable is a local static variable</haxe_doc>
			</isStatic>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<x path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><x path="Null"><t path="haxe.macro.TypedExpr"/></x></expr>
</a></x>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<class path="haxe.macro.TypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/TypeTools.hx">
		<nullable set="method" line="38" static="1"><f a="complexType">
	<e path="haxe.macro.ComplexType"/>
	<e path="haxe.macro.ComplexType"/>
</f></nullable>
		<toField set="method" line="41" static="1"><f a="cf">
	<t path="haxe.macro.ClassField"/>
	<t path="haxe.macro.Field"/>
</f></toField>
		<toComplexType public="1" set="method" line="99" static="1">
			<f a="type">
				<x path="Null"><e path="haxe.macro.Type"/></x>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			</f>
			<haxe_doc>Returns a syntax-level type corresponding to Type `t`.

		This function is mostly inverse to `ComplexTypeTools.toType`, but may
		lose some information on types that do not have a corresponding syntax
		version, such as monomorphs. In these cases, the result is null.

		If `t` is null, an internal exception is thrown.</haxe_doc>
		</toComplexType>
		<toTypeParam set="method" line="144" static="1"><f a="type">
	<e path="haxe.macro.Type"/>
	<e path="haxe.macro.TypeParam"/>
</f></toTypeParam>
		<toTypePath set="method" line="152" static="1"><f a="baseType:params">
	<t path="haxe.macro.BaseType"/>
	<c path="Array"><e path="haxe.macro.Type"/></c>
	<t path="haxe.macro.TypePath"/>
</f></toTypePath>
		<findField public="1" set="method" line="478" static="1">
			<f a="c:name:?isStatic" v="::false">
				<t path="haxe.macro.ClassType"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
			</f>
			<meta><m n=":value"><e>{ isStatic : false }</e></m></meta>
			<haxe_doc>Resolves the field named `name` on class `c`.

		If `isStatic` is true, the classes' static fields are checked. Otherwise
		the classes' member fields are checked.

		If the field is found, it is returned. Otherwise if `c` has a super
		class, `findField` recursively checks that super class. Otherwise null
		is returned.

		If any argument is null, the result is unspecified.</haxe_doc>
		</findField>
		<haxe_doc>This class provides some utility methods to work with types. It is
	best used through 'using haxe.macro.TypeTools' syntax and then provides
	additional methods on haxe.macro.Type instances.</haxe_doc>
	</class>
	<class path="haxe.macro.TypedExprTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/TypedExprTools.hx">
		<with set="method" line="33" static="1"><f a="e:?edef:?t">
	<t path="haxe.macro.TypedExpr"/>
	<e path="haxe.macro.TypedExprDef"/>
	<e path="haxe.macro.Type"/>
	<a>
		<t><x path="Null"><e path="haxe.macro.Type"/></x></t>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><x path="Null"><e path="haxe.macro.TypedExprDef"/></x></expr>
	</a>
</f></with>
		<map public="1" set="method" line="48" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</map>
		<iter public="1" set="method" line="85" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		See `haxe.macro.ExprTools.iter` for details on iterating expressions in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</iter>
		<mapWithType public="1" set="method" line="138" static="1">
			<f a="e:f:ft:fv">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<f a="">
					<e path="haxe.macro.Type"/>
					<e path="haxe.macro.Type"/>
				</f>
				<f a="">
					<t path="haxe.macro.TVar"/>
					<t path="haxe.macro.TVar"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.
		Additionally, types are mapped using `ft` and variables are mapped using
		`fv`.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</mapWithType>
		<haxe_doc>This class provides some utility methods to work with typed expressions.
	It is best used through 'using haxe.macro.TypedExprTools' syntax and then
	provides additional methods on `haxe.macro.TypedExpr` instances.</haxe_doc>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="String"/>
		<haxe_doc>The (dot-)path of the runtime type.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.FunctionArgument" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<value>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</value>
			<t><e path="haxe.rtti.CType"/></t>
			<opt><x path="Bool"/></opt>
			<name><c path="String"/></name>
		</a>
		<haxe_doc>The function argument runtime type information.</haxe_doc>
	</typedef>
	<enum path="haxe.rtti.CType" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="Array"><t path="haxe.rtti.FunctionArgument"/></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CAnonymous a="fields"><c path="Array"><t path="haxe.rtti.ClassField"/></c></CAnonymous>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CAbstract a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CAbstract>
		<haxe_doc>The runtime member types.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The path of the type.</haxe_doc>
			</path>
			<params>
				<c path="Array"><e path="haxe.rtti.CType"/></c>
				<haxe_doc>The array of parameters types.</haxe_doc>
			</params>
		</a>
		<haxe_doc>The type parameters in the runtime type information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>An array of strings representing the names of the type parameters the type
	has. As of Haxe 3.2.0, this does not include the constraints.</haxe_doc>
	</typedef>
	<enum path="haxe.rtti.Rights" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RCall a="m"><c path="String"/></RCall>
		<RMethod/>
		<RDynamic/>
		<RInline/>
		<haxe_doc>Represents the runtime rights of a type.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.MetaData" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><a>
	<params><c path="Array"><c path="String"/></c></params>
	<name><c path="String"/></name>
</a></c>
		<haxe_doc>The list of runtime metadata.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.ClassField" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the field.</haxe_doc>
			</type>
			<set>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [write access](https://haxe.org/manual/class-field-property.html#define-write-access)
		behavior of the field.</haxe_doc>
			</set>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the field is available.</haxe_doc>
			</platforms>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters
		the field has.</haxe_doc>
			</params>
			<overloads>
				<x path="Null"><c path="Array"><t path="haxe.rtti.ClassField"/></c></x>
				<haxe_doc>The list of available overloads for the fields or `null` if no overloads
		exists.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the field was annotated with.</haxe_doc>
			</meta>
			<line>
				<x path="Null"><x path="Int"/></x>
				<haxe_doc>The line number where the field is defined. This information is only
		available if the field has an expression.
		Otherwise the value is `null`.</haxe_doc>
			</line>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field is `public`.</haxe_doc>
			</isPublic>
			<isOverride>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field overrides another field.</haxe_doc>
			</isOverride>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field is `final`.</haxe_doc>
			</isFinal>
			<get>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [read access](https://haxe.org/manual/class-field-property.html#define-read-access)
		behavior of the field.</haxe_doc>
			</get>
			<expr>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The actual expression of the field or `null` if there is no expression.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the field. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or
		if the field has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc><![CDATA[The runtime class field information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#class-field-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The general runtime type information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<tdynamic>
				<x path="Null"><e path="haxe.rtti.CType"/></x>
				<haxe_doc>The type which is dynamically implemented by the class or `null` if no
		such type exists.</haxe_doc>
			</tdynamic>
			<superClass>
				<x path="Null"><t path="haxe.rtti.PathParams"/></x>
				<haxe_doc>The class' parent class defined by its type path and list of type
		parameters.</haxe_doc>
			</superClass>
			<statics>
				<c path="Array"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of static class fields.</haxe_doc>
			</statics>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is actually an [interface](https://haxe.org/manual/types-interfaces.html).</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is `final`.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><t path="haxe.rtti.PathParams"/></c>
				<haxe_doc>The list of interfaces defined by their type path and list of type
		parameters.</haxe_doc>
			</interfaces>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<fields>
				<c path="Array"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of member [class fields](https://haxe.org/manual/class-field.html).</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The runtime class definition information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the constructor is
		available.</haxe_doc>
			</platforms>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the constructor was annotated with.</haxe_doc>
			</meta>
			<doc>
				<c path="String"/>
				<haxe_doc>The documentation of the constructor. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<args>
				<x path="Null"><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></x>
				<haxe_doc>The list of arguments the constructor has or `null` if no arguments are
		available.</haxe_doc>
			</args>
		</a>
		<haxe_doc><![CDATA[The runtime enum constructor information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-constructor-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the enum is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<constructors>
				<c path="Array"><t path="haxe.rtti.EnumField"/></c>
				<haxe_doc>The list of enum constructors.</haxe_doc>
			</constructors>
		</a>
		<haxe_doc><![CDATA[The enum runtime type information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-type-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<types>
				<t path="Map">
					<c path="String"/>
					<e path="haxe.rtti.CType"/>
				</t>
				<haxe_doc>The types of the typedef, by platform.</haxe_doc>
			</types>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the typedef.</haxe_doc>
			</type>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The typedef runtime information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Abstractdef" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<to><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><x path="Null"><c path="String"/></x></field>
</a></c></to>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<impl><t path="haxe.rtti.Classdef"/></impl>
			<from><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><x path="Null"><c path="String"/></x></field>
</a></c></from>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<athis><e path="haxe.rtti.CType"/></athis>
		</a>
		<haxe_doc><![CDATA[The abstract type runtime information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#abstract-type-information>]]></haxe_doc>
	</typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TAbstractdecl a="a"><t path="haxe.rtti.Abstractdef"/></TAbstractdecl>
		<haxe_doc>The tree types of the runtime type.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		<haxe_doc>Array of `TypeTree`.</haxe_doc>
	</typedef>
	<class path="haxe.rtti.TypeApi" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="377" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="398" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the given `CType` is a variable or `false` if it is a
		function.</haxe_doc>
		</isVar>
		<leq params="T" set="method" line="405" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="leq.T"/></c>
	<c path="Array"><c path="leq.T"/></c>
	<x path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="425" static="1">
			<f a="r1:r2">
				<e path="haxe.rtti.Rights"/>
				<e path="haxe.rtti.Rights"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `r1 == r2`, this function performs a deep equality check on
		the given `Rights` instances.

		If `r1` or `r2` are `null`, the result is unspecified.</haxe_doc>
		</rightsEq>
		<typeEq public="1" set="method" line="446" static="1">
			<f a="t1:t2">
				<e path="haxe.rtti.CType"/>
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `t1 == t2`, this function performs a deep equality check on
		the given `CType` instances.

		If `t1` or `t2` are `null`, the result is unspecified.</haxe_doc>
		</typeEq>
		<fieldEq public="1" set="method" line="506" static="1">
			<f a="f1:f2">
				<t path="haxe.rtti.ClassField"/>
				<t path="haxe.rtti.ClassField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `f1 == f2`, this function performs a deep equality check on
		the given `ClassField` instances.

		If `f1` or `f2` are `null`, the result is unspecified.</haxe_doc>
		</fieldEq>
		<constructorEq public="1" set="method" line="532" static="1">
			<f a="c1:c2">
				<t path="haxe.rtti.EnumField"/>
				<t path="haxe.rtti.EnumField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `c1 == c2`, this function performs a deep equality check on
		the arguments of the enum constructors, if exists.

		If `c1` or `c2` are `null`, the result is unspecified.</haxe_doc>
		</constructorEq>
		<haxe_doc>Contains type and equality checks functionalities for RTTI.</haxe_doc>
	</class>
	<class path="haxe.rtti.CTypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<toString public="1" set="method" line="555" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the string representation of `CType`.</haxe_doc>
		</toString>
		<nameWithParams set="method" line="578" static="1"><f a="name:params">
	<c path="String"/>
	<c path="Array"><e path="haxe.rtti.CType"/></c>
	<c path="String"/>
</f></nameWithParams>
		<functionArgumentName set="method" line="585" static="1"><f a="arg">
	<t path="haxe.rtti.FunctionArgument"/>
	<c path="String"/>
</f></functionArgumentName>
		<classField set="method" line="592" static="1"><f a="cf">
	<t path="haxe.rtti.ClassField"/>
	<c path="String"/>
</f></classField>
		<haxe_doc>The `CTypeTools` class contains some extra functionalities for handling
	`CType` instances.</haxe_doc>
	</class>
	<typedef path="haxe.rtti._Meta.MetaObject" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/Meta.hx" private="1" module="haxe.rtti.Meta"><a>
	<statics>
		<x path="Null"><d><d><x path="Null"><c path="Array"><d/></c></x></d></d></x>
		<meta><m n=":optional"/></meta>
	</statics>
	<obj>
		<x path="Null"><d><x path="Null"><c path="Array"><d/></c></x></d></x>
		<meta><m n=":optional"/></meta>
	</obj>
	<fields>
		<x path="Null"><d><d><x path="Null"><c path="Array"><d/></c></x></d></d></x>
		<meta><m n=":optional"/></meta>
	</fields>
</a></typedef>
	<class path="haxe.rtti.Meta" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="40" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given type (class or enum)</haxe_doc>
		</getType>
		<isInterface set="method" line="46" static="1"><f a="t">
	<d/>
	<x path="Bool"/>
</f></isInterface>
		<getMeta set="method" line="54" static="1"><f a="t">
	<d/>
	<t path="haxe.rtti._Meta.MetaObject"/>
</f></getMeta>
		<getStatics public="1" set="method" line="79" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class static fields</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="87" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc><![CDATA[An API to access classes and enums metadata at runtime.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.rtti.Rtti" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/Rtti.hx">
		<getRtti public="1" params="T" set="method" line="41" static="1">
			<f a="c">
				<x path="Class"><c path="getRtti.T"/></x>
				<t path="haxe.rtti.Classdef"/>
			</f>
			<haxe_doc>Returns the `haxe.rtti.CType.Classdef` corresponding to class `c`.

		If `c` has no runtime type information, e.g. because no `@:rtti` was
		added, an exception of type `String` is thrown.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getRtti>
		<hasRtti public="1" params="T" set="method" line="61" static="1">
			<f a="c">
				<x path="Class"><c path="hasRtti.T"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `c` has runtime type information.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</hasRtti>
		<haxe_doc><![CDATA[Rtti is a helper class which supplements the `@:rtti` metadata.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="43"><f a="?l">
	<t path="haxe.rtti.TypeRoot"/>
	<x path="Void"/>
</f></sort>
		<sortFields set="method" line="72"><f a="a">
	<c path="Array"><t path="haxe.rtti.ClassField"/></c>
	<x path="Void"/>
</f></sortFields>
		<process public="1" set="method" line="90"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></process>
		<mergeRights set="method" line="96"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeRights>
		<mergeDoc set="method" line="105"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeDoc>
		<mergeFields set="method" line="113"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeFields>
		<newField public="1" set="dynamic" line="118"><f a="c:f">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Void"/>
</f></newField>
		<mergeClasses set="method" line="120"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<x path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="158"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<x path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="178"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<x path="Bool"/>
</f></mergeTypedefs>
		<mergeAbstracts set="method" line="186"><f a="a:a2">
	<t path="haxe.rtti.Abstractdef"/>
	<t path="haxe.rtti.Abstractdef"/>
	<x path="Bool"/>
</f></mergeAbstracts>
		<merge set="method" line="203"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<x path="Void"/>
</f></merge>
		<mkPath set="method" line="295"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="299"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="306"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="316"><f a="c">
	<x path="haxe.xml.Access"/>
	<d/>
</f></xerror>
		<xroot set="method" line="320"><f a="x">
	<x path="haxe.xml.Access"/>
	<x path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="325"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xmeta set="method" line="336"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.MetaData"/>
</f></xmeta>
		<xoverloads set="method" line="347"><f a="x">
	<x path="haxe.xml.Access"/>
	<c path="Array"><t path="haxe.rtti.ClassField"/></c>
</f></xoverloads>
		<xpath set="method" line="355"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="366"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="417">
			<f a="x:?defPublic" v=":false">
				<x path="haxe.xml.Access"/>
				<x path="Bool"/>
				<t path="haxe.rtti.ClassField"/>
			</f>
			<meta><m n=":value"><e>{ defPublic : false }</e></m></meta>
		</xclassfield>
		<xenum set="method" line="446"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="471"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xabstract set="method" line="502"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Abstractdef"/>
</f></xabstract>
		<xtypedef set="method" line="540"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="568"><f a="x">
	<x path="haxe.xml.Access"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="624"><f a="x">
	<x path="haxe.xml.Access"/>
	<c path="Array"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="631"><f a=""><c path="Array"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="39"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[XmlParser processes the runtime type information (RTTI) which
	is stored as a XML string in a static field `__rtti`.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<abstract path="haxe.xml._Access.NodeAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="27" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="haxe.xml.Access"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="27" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="haxe.xml.Access"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class>
	<abstract path="haxe.xml._Access.AttribAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
	<resolve public="1" set="method" line="39" static="1">
		<f a="this:name">
			<c path="Xml"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":op"><e>a.b</e></m></meta>
	</resolve>
	<_hx_set set="method" line="49" static="1">
		<f a="this:name:value">
			<c path="Xml"/>
			<c path="String"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":op"><e>a.b</e></m></meta>
	</_hx_set>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
		<resolve public="1" set="method" line="39" static="1">
			<f a="this:name">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":op"><e>a.b</e></m></meta>
		</resolve>
		<_hx_set set="method" line="49" static="1">
			<f a="this:name:value">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":op"><e>a.b</e></m></meta>
		</_hx_set>
	</class>
	<abstract path="haxe.xml._Access.HasAttribAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="59" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="59" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class>
	<abstract path="haxe.xml._Access.HasNodeAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.HasNodeAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="68" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.HasNodeAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="68" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class>
	<abstract path="haxe.xml._Access.NodeListAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.NodeListAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="75" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<c path="Array"><x path="haxe.xml.Access"/></c>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.NodeListAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="75" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<c path="Array"><x path="haxe.xml.Access"/></c>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class>
	<abstract path="haxe.xml.Access" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx">
		<this><c path="Xml"/></this>
		<haxe_doc>The `haxe.xml.Access` API helps providing a fast dot-syntax access to the
	most common `Xml` methods.</haxe_doc>
		<impl><class path="haxe.xml._Access.Access_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
	<x public="1" get="accessor" set="null" static="1"><c path="Xml"/></x>
	<get_x public="1" get="inline" set="null" line="91" static="1"><f a="this">
	<c path="Xml"/>
	<c path="Xml"/>
</f></get_x>
	<name public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
	</name>
	<get_name get="inline" set="null" line="98" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_name>
	<innerData public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
	</innerData>
	<innerHTML public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
	</innerHTML>
	<node public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.NodeAccess"/>
		<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var access = new haxe.xml.Access(Xml.parse("<user><name>John</name></user>"));
		var user = access.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
	</node>
	<get_node get="inline" set="null" line="134" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.NodeAccess"/>
</f></get_node>
	<nodes public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.NodeListAccess"/>
		<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Access(Xml.parse("
			<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
			</users>"
		));

		var users = fast.node.users;
		for (user in users.nodes.user) {
			trace(user.att.name);
		}
		```]]></haxe_doc>
	</nodes>
	<get_nodes get="inline" set="null" line="156" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.NodeListAccess"/>
</f></get_nodes>
	<att public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.AttribAccess"/>
		<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
	</att>
	<get_att get="inline" set="null" line="175" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.AttribAccess"/>
</f></get_att>
	<has public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.HasAttribAccess"/>
		<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
	</has>
	<get_has get="inline" set="null" line="183" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.HasAttribAccess"/>
</f></get_has>
	<hasNode public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.HasNodeAccess"/>
		<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
	</hasNode>
	<get_hasNode get="inline" set="null" line="199" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.HasNodeAccess"/>
</f></get_hasNode>
	<elements public="1" get="accessor" set="null" static="1">
		<t path="Iterator"><x path="haxe.xml.Access"/></t>
		<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
	</elements>
	<get_elements get="inline" set="null" line="207" static="1"><f a="this">
	<c path="Xml"/>
	<t path="Iterator"><x path="haxe.xml.Access"/></t>
</f></get_elements>
	<_new public="1" get="inline" set="null" line="209" static="1">
		<f a="x">
			<c path="Xml"/>
			<x path="haxe.xml.Access"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_innerData set="method" line="215" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_innerData>
	<get_innerHTML set="method" line="237" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_innerHTML>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.Access_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
		<x public="1" get="accessor" set="null" static="1"><c path="Xml"/></x>
		<get_x public="1" get="inline" set="null" line="91" static="1"><f a="this">
	<c path="Xml"/>
	<c path="Xml"/>
</f></get_x>
		<name public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
		</name>
		<get_name get="inline" set="null" line="98" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_name>
		<innerData public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
		</innerData>
		<innerHTML public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
		</innerHTML>
		<node public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.NodeAccess"/>
			<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var access = new haxe.xml.Access(Xml.parse("<user><name>John</name></user>"));
		var user = access.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
		</node>
		<get_node get="inline" set="null" line="134" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.NodeAccess"/>
</f></get_node>
		<nodes public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.NodeListAccess"/>
			<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Access(Xml.parse("
			<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
			</users>"
		));

		var users = fast.node.users;
		for (user in users.nodes.user) {
			trace(user.att.name);
		}
		```]]></haxe_doc>
		</nodes>
		<get_nodes get="inline" set="null" line="156" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.NodeListAccess"/>
</f></get_nodes>
		<att public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.AttribAccess"/>
			<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
		</att>
		<get_att get="inline" set="null" line="175" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.AttribAccess"/>
</f></get_att>
		<has public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.HasAttribAccess"/>
			<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
		</has>
		<get_has get="inline" set="null" line="183" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.HasAttribAccess"/>
</f></get_has>
		<hasNode public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.HasNodeAccess"/>
			<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
		</hasNode>
		<get_hasNode get="inline" set="null" line="199" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.HasNodeAccess"/>
</f></get_hasNode>
		<elements public="1" get="accessor" set="null" static="1">
			<t path="Iterator"><x path="haxe.xml.Access"/></t>
			<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
		</elements>
		<get_elements get="inline" set="null" line="207" static="1"><f a="this">
	<c path="Xml"/>
	<t path="Iterator"><x path="haxe.xml.Access"/></t>
</f></get_elements>
		<_new public="1" get="inline" set="null" line="209" static="1">
			<f a="x">
				<c path="Xml"/>
				<x path="haxe.xml.Access"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_innerData set="method" line="215" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_innerData>
		<get_innerHTML set="method" line="237" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_innerHTML>
	</class>
	<enum path="haxe.xml.Filter" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<FInt/>
		<FBool/>
		<FEnum a="values"><c path="Array"><c path="String"/></c></FEnum>
		<FReg a="matcher"><c path="EReg"/></FReg>
	</enum>
	<enum path="haxe.xml.Attrib" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check"><Att a="name:?filter:?defvalue">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<c path="String"/>
</Att></enum>
	<enum path="haxe.xml.Rule" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<RNode a="name:?attribs:?childs">
			<c path="String"/>
			<c path="Array"><e path="haxe.xml.Attrib"/></c>
			<e path="haxe.xml.Rule"/>
		</RNode>
		<RData a="?filter"><e path="haxe.xml.Filter"/></RData>
		<RMulti a="rule:?atLeastOne">
			<e path="haxe.xml.Rule"/>
			<x path="Bool"/>
		</RMulti>
		<RList a="rules:?ordered">
			<c path="Array"><e path="haxe.xml.Rule"/></c>
			<x path="Bool"/>
		</RList>
		<RChoice a="choices"><c path="Array"><e path="haxe.xml.Rule"/></c></RChoice>
		<ROptional a="rule"><e path="haxe.xml.Rule"/></ROptional>
	</enum>
	<enum path="haxe.xml._Check.CheckResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx" private="1" module="haxe.xml.Check">
		<CMatch/>
		<CMissing a="r"><e path="haxe.xml.Rule"/></CMissing>
		<CExtra a="x"><c path="Xml"/></CExtra>
		<CElementExpected a="name:x">
			<c path="String"/>
			<c path="Xml"/>
		</CElementExpected>
		<CDataExpected a="x"><c path="Xml"/></CDataExpected>
		<CExtraAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CExtraAttrib>
		<CMissingAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CMissingAttrib>
		<CInvalidAttrib a="att:x:f">
			<c path="String"/>
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidAttrib>
		<CInvalidData a="x:f">
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidData>
		<CInElement a="x:r">
			<c path="Xml"/>
			<e path="haxe.xml._Check.CheckResult"/>
		</CInElement>
	</enum>
	<class path="haxe.xml.Check" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx">
		<blanks expr="~/^[ 
	]*$/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ 
	]*$/</e></m></meta>
		</blanks>
		<isBlank set="method" line="61" static="1"><f a="x">
	<c path="Xml"/>
	<x path="Bool"/>
</f></isBlank>
		<filterMatch set="method" line="65" static="1"><f a="s:f">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<x path="Bool"/>
</f></filterMatch>
		<isNullable set="method" line="81" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<x path="Bool"/>
</f></isNullable>
		<check set="method" line="104" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></check>
		<checkList set="method" line="169" static="1"><f a="it:r">
	<t path="Iterator"><c path="Xml"/></t>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></checkList>
		<makeWhere set="method" line="242" static="1"><f a="path">
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeWhere>
		<makeString set="method" line="257" static="1"><f a="x">
	<c path="Xml"/>
	<c path="String"/>
</f></makeString>
		<makeRule set="method" line="266" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<c path="String"/>
</f></makeRule>
		<makeError set="method" line="283" static="1"><f a="m:?path">
	<e path="haxe.xml._Check.CheckResult"/>
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeError>
		<checkNode public="1" set="method" line="314" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkNode>
		<checkDocument public="1" set="method" line="321" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkDocument>
	</class>
	<typedef path="haxe.xml.Fast" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Fast.hx">
		<x path="haxe.xml.Access"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<abstract path="haxe.xml._Parser.S" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.xml._Parser.S_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1" final="1">
	<IGNORE_SPACES public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IGNORE_SPACES>
	<BEGIN public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BEGIN>
	<BEGIN_NODE public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BEGIN_NODE>
	<TAG_NAME public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TAG_NAME>
	<BODY public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BODY>
	<ATTRIB_NAME public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ATTRIB_NAME>
	<EQUALS public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EQUALS>
	<ATTVAL_BEGIN public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ATTVAL_BEGIN>
	<ATTRIB_VAL public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ATTRIB_VAL>
	<CHILDS public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CHILDS>
	<CLOSE public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CLOSE>
	<WAIT_END public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WAIT_END>
	<WAIT_END_RET public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WAIT_END_RET>
	<PCDATA public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PCDATA>
	<HEADER public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HEADER>
	<COMMENT public="1" get="inline" set="null" expr="cast 15" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COMMENT>
	<DOCTYPE public="1" get="inline" set="null" expr="cast 16" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DOCTYPE>
	<CDATA public="1" get="inline" set="null" expr="cast 17" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CDATA>
	<ESCAPE public="1" get="inline" set="null" expr="cast 18" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ESCAPE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Parser.S_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1" final="1">
		<IGNORE_SPACES public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IGNORE_SPACES>
		<BEGIN public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BEGIN>
		<BEGIN_NODE public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BEGIN_NODE>
		<TAG_NAME public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TAG_NAME>
		<BODY public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BODY>
		<ATTRIB_NAME public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ATTRIB_NAME>
		<EQUALS public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EQUALS>
		<ATTVAL_BEGIN public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ATTVAL_BEGIN>
		<ATTRIB_VAL public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ATTRIB_VAL>
		<CHILDS public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CHILDS>
		<CLOSE public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CLOSE>
		<WAIT_END public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WAIT_END>
		<WAIT_END_RET public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WAIT_END_RET>
		<PCDATA public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PCDATA>
		<HEADER public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HEADER>
		<COMMENT public="1" get="inline" set="null" expr="cast 15" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COMMENT>
		<DOCTYPE public="1" get="inline" set="null" expr="cast 16" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DOCTYPE>
		<CDATA public="1" get="inline" set="null" expr="cast 17" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CDATA>
		<ESCAPE public="1" get="inline" set="null" expr="cast 18" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ESCAPE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.xml.XmlParserException" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx" module="haxe.xml.Parser">
		<message public="1">
			<c path="String"/>
			<haxe_doc>the XML parsing error message</haxe_doc>
		</message>
		<lineNumber public="1">
			<x path="Int"/>
			<haxe_doc>the line number at which the XML parsing error occurred</haxe_doc>
		</lineNumber>
		<positionAtLine public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the reported line at which the parsing error occurred</haxe_doc>
		</positionAtLine>
		<position public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the XML string at which the parsing error occurred</haxe_doc>
		</position>
		<xml public="1">
			<c path="String"/>
			<haxe_doc>the invalid XML string</haxe_doc>
		</xml>
		<toString public="1" set="method" line="94"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="75"><f a="message:xml:position">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="java.lang.Cloneable" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Cloneable.class" extern="1" interface="1"><meta>
	<m n=":directlyUsed"/>
	<m n=":native"><e>"java.lang.Cloneable"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.util.HashMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/HashMap.class" extern="1">
		<extends path="java.util.AbstractMap">
			<c path="java.util.HashMap.K"/>
			<c path="java.util.HashMap.V"/>
		</extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Cloneable"/>
		<implements path="java.util.Map">
			<c path="java.util.HashMap.K"/>
			<c path="java.util.HashMap.V"/>
		</implements>
		<hash final="1" public="1" set="method" static="1"><f a="param1">
	<d/>
	<x path="Int"/>
</f></hash>
		<comparableClassFor public="1" set="method" static="1"><f a="param1">
	<d/>
	<c path="java.lang.Class"><d/></c>
</f></comparableClassFor>
		<compareComparables public="1" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.lang.Class"><d/></c>
	<d/>
	<d/>
	<x path="Int"/>
</f></compareComparables>
		<tableSizeFor final="1" public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></tableSizeFor>
		<DEFAULT_INITIAL_CAPACITY final="1" public="1" set="null" static="1"><x path="Int"/></DEFAULT_INITIAL_CAPACITY>
		<MAXIMUM_CAPACITY final="1" public="1" set="null" static="1"><x path="Int"/></MAXIMUM_CAPACITY>
		<DEFAULT_LOAD_FACTOR final="1" public="1" set="null" static="1"><x path="Single"/></DEFAULT_LOAD_FACTOR>
		<TREEIFY_THRESHOLD final="1" public="1" set="null" static="1"><x path="Int"/></TREEIFY_THRESHOLD>
		<UNTREEIFY_THRESHOLD final="1" public="1" set="null" static="1"><x path="Int"/></UNTREEIFY_THRESHOLD>
		<MIN_TREEIFY_CAPACITY final="1" public="1" set="null" static="1"><x path="Int"/></MIN_TREEIFY_CAPACITY>
		<putMapEntries final="1" public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
	<x path="Bool"/>
	<x path="Void"/>
</f></putMapEntries>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isEmpty>
		<get public="1" set="method" override="1"><f a="param1">
	<d/>
	<c path="java.util.HashMap.V"/>
</f></get>
		<getNode final="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<d/>
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
</f></getNode>
		<containsKey public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsKey>
		<put public="1" set="method" override="1"><f a="param1:param2">
	<c path="java.util.HashMap.K"/>
	<c path="java.util.HashMap.V"/>
	<c path="java.util.HashMap.V"/>
</f></put>
		<putVal final="1" public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<x path="Int"/>
	<c path="java.util.HashMap.K"/>
	<c path="java.util.HashMap.V"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="java.util.HashMap.V"/>
</f></putVal>
		<resize final="1" public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.util.HashMap_Node">
	<c path="java.util.HashMap.K"/>
	<c path="java.util.HashMap.V"/>
</c></c></f></resize>
		<treeifyBin final="1" public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.util.HashMap_Node">
	<c path="java.util.HashMap.K"/>
	<c path="java.util.HashMap.V"/>
</c></c>
	<x path="Int"/>
	<x path="Void"/>
</f></treeifyBin>
		<putAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Map">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
	<x path="Void"/>
</f></putAll>
		<remove public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<c path="java.util.HashMap.V"/>
			</f>
			<overloads><remove public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></remove></overloads>
		</remove>
		<removeNode final="1" public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<x path="Int"/>
	<d/>
	<d/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
</f></removeNode>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<containsValue public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsValue>
		<keySet public="1" set="method" override="1"><f a=""><c path="java.util.Set"><c path="java.util.HashMap.K"/></c></f></keySet>
		<values public="1" set="method" override="1"><f a=""><c path="java.util.Collection"><c path="java.util.HashMap.V"/></c></f></values>
		<entrySet public="1" set="method" override="1"><f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.HashMap.K"/>
	<c path="java.util.HashMap.V"/>
</c></c></f></entrySet>
		<getOrDefault public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.util.HashMap.V"/>
	<c path="java.util.HashMap.V"/>
</f></getOrDefault>
		<putIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.HashMap.K"/>
	<c path="java.util.HashMap.V"/>
	<c path="java.util.HashMap.V"/>
</f></putIfAbsent>
		<replace public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.HashMap.K"/>
				<c path="java.util.HashMap.V"/>
				<c path="java.util.HashMap.V"/>
				<x path="Bool"/>
			</f>
			<overloads><replace public="1" set="method"><f a="param1:param2">
	<c path="java.util.HashMap.K"/>
	<c path="java.util.HashMap.V"/>
	<c path="java.util.HashMap.V"/>
</f></replace></overloads>
		</replace>
		<computeIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.HashMap.K"/>
	<c path="java.util.function.Function">
		<d/>
		<c path="java.util.HashMap.V"/>
	</c>
	<c path="java.util.HashMap.V"/>
</f></computeIfAbsent>
		<computeIfPresent public="1" set="method"><f a="param1:param2">
	<c path="java.util.HashMap.K"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.HashMap.V"/>
	</c>
	<c path="java.util.HashMap.V"/>
</f></computeIfPresent>
		<compute public="1" set="method"><f a="param1:param2">
	<c path="java.util.HashMap.K"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.HashMap.V"/>
	</c>
	<c path="java.util.HashMap.V"/>
</f></compute>
		<merge public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.HashMap.K"/>
	<c path="java.util.HashMap.V"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.HashMap.V"/>
	</c>
	<c path="java.util.HashMap.V"/>
</f></merge>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.BiConsumer">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></forEach>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.HashMap.V"/>
	</c>
	<x path="Void"/>
</f></replaceAll>
		<clone public="1" set="method" override="1"><f a=""><d/></f></clone>
		<loadFactor final="1" public="1" set="method"><f a=""><x path="Single"/></f></loadFactor>
		<capacity final="1" public="1" set="method"><f a=""><x path="Int"/></f></capacity>
		<newNode public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<c path="java.util.HashMap.K"/>
	<c path="java.util.HashMap.V"/>
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
</f></newNode>
		<replacementNode public="1" set="method"><f a="param1:param2">
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
</f></replacementNode>
		<newTreeNode public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<c path="java.util.HashMap.K"/>
	<c path="java.util.HashMap.V"/>
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
	<c path="java.util.HashMap_TreeNode">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
</f></newTreeNode>
		<replacementTreeNode public="1" set="method"><f a="param1:param2">
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
	<c path="java.util.HashMap_TreeNode">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
</f></replacementTreeNode>
		<reinitialize public="1" set="method"><f a=""><x path="Void"/></f></reinitialize>
		<afterNodeAccess public="1" set="method"><f a="param1">
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
	<x path="Void"/>
</f></afterNodeAccess>
		<afterNodeInsertion public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></afterNodeInsertion>
		<afterNodeRemoval public="1" set="method"><f a="param1">
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
	<x path="Void"/>
</f></afterNodeRemoval>
		<internalWriteEntries public="1" set="method"><f a="param1">
	<c path="java.io.ObjectOutputStream"/>
	<x path="Void"/>
</f></internalWriteEntries>
		<table public="1"><c path="java.NativeArray"><c path="java.util.HashMap_Node">
	<c path="java.util.HashMap.K"/>
	<c path="java.util.HashMap.V"/>
</c></c></table>
		<modCount public="1"><x path="Int"/></modCount>
		<threshold public="1"><x path="Int"/></threshold>
		<new public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.util.Map">
		<c path="java.util.HashMap.K"/>
		<c path="java.util.HashMap.V"/>
	</c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a=""><x path="Void"/></f></new>
				<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.util.HashMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="haxe.xml.Parser" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx">
		<escapes expr="{
	var h = new haxe.ds.StringMap();
	h.set(&quot;lt&quot;, &quot;&lt;&quot;);
	h.set(&quot;gt&quot;, &quot;&gt;&quot;);
	h.set(&quot;amp&quot;, &quot;&amp;&quot;);
	h.set(&quot;quot&quot;, &quot;\&quot;&quot;);
	h.set(&quot;apos&quot;, &quot;&apos;&quot;);
	h;
}" line="100" static="1">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[{
	var h = new haxe.ds.StringMap();
	h.set("lt", "<");
	h.set("gt", ">");
	h.set("amp", "&");
	h.set("quot", "\"");
	h.set("apos", "'");
	h;
}]]></e></m></meta>
		</escapes>
		<parse public="1" set="method" line="115" static="1">
			<f a="str:?strict" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":value"><e>{ strict : false }</e></m></meta>
			<haxe_doc>Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.

		@throws haxe.xml.XmlParserException</haxe_doc>
		</parse>
		<doParse set="method" line="121" static="1">
			<f a="str:strict:?p:?parent" v="::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="Xml"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ p : 0 }</e></m></meta>
		</doParse>
		<isValidChar get="inline" set="null" line="415" static="1"><f a="c">
	<x path="Int"/>
	<x path="Bool"/>
</f></isValidChar>
	</class>
	<class path="haxe.xml.Printer" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Printer.hx">
		<print public="1" set="method" line="35" static="1">
			<f a="xml:?pretty" v=":false">
				<c path="Xml"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pretty : false }</e></m></meta>
			<haxe_doc>Convert `Xml` to string representation.

		Set `pretty` to `true` to prettify the result.</haxe_doc>
		</print>
		<output><c path="StringBuf"/></output>
		<pretty><x path="Bool"/></pretty>
		<writeNode set="method" line="49"><f a="value:tabs">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeNode>
		<write get="inline" set="null" line="104"><f a="input">
	<c path="String"/>
	<x path="Void"/>
</f></write>
		<newline get="inline" set="null" line="108"><f a=""><x path="Void"/></f></newline>
		<hasChildren set="method" line="114"><f a="value">
	<c path="Xml"/>
	<x path="Bool"/>
</f></hasChildren>
		<new set="method" line="44"><f a="pretty">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class provides utility methods to convert Xml instances to
	String representation.</haxe_doc>
	</class>
	<class path="haxe.zip.Compress" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/zip/Compress.hx">
		<run public="1" set="method" line="69" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<deflater><c path="java.util.zip.Deflater"/></deflater>
		<mode><x path="Int"/></mode>
		<finish expr="false" line="30">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</finish>
		<execute public="1" set="method" line="38"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="49"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="65"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="32"><f a="level">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip.ExtraField" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Entry.hx" module="haxe.zip.Entry">
		<FUnknown a="tag:bytes">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</FUnknown>
		<FInfoZipUnicodePath a="name:crc">
			<c path="String"/>
			<x path="Int"/>
		</FInfoZipUnicodePath>
		<FUtf8/>
	</enum>
	<typedef path="haxe.zip.Entry" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Entry.hx"><a>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<extraFields>
		<x path="Null"><c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c></x>
		<meta><m n=":optional"/></meta>
	</extraFields>
	<dataSize><x path="Int"/></dataSize>
	<data><x path="Null"><c path="haxe.io.Bytes"/></x></data>
	<crc32><x path="Null"><x path="Int"/></x></crc32>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<enum path="haxe.zip.FlushMode" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/FlushMode.hx">
		<NO/>
		<SYNC/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.zip.Huffman" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="haxe.zip.Huffman"/>
			<e path="haxe.zip.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="haxe.zip.Huffman"/></c>
		</NeedBits>
	</enum>
	<class path="haxe.zip.HuffTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Huffman.hx" module="haxe.zip.Huffman">
		<treeDepth set="method" line="34"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="45"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<e path="haxe.zip.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="62"><f a="table:p:cd:d:t">
	<c path="Array"><e path="haxe.zip.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="75"><f a="bits:maxbits:v:len">
	<c path="haxe.ds.IntMap"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="86"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></make>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.zip._InflateImpl.Window" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<SIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 15" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 15]]></e></m></meta>
		</SIZE>
		<BUFSIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 16" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 16]]></e></m></meta>
		</BUFSIZE>
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="haxe.crypto.Adler32"/></crc>
		<slide public="1" set="method" line="44"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="53"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="60"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="67"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="71"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="75"><f a=""><c path="haxe.crypto.Adler32"/></f></checksum>
		<new public="1" set="method" line="37"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip._InflateImpl.State" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.zip.InflateImpl" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]" line="97" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]</e></m></meta>
		</LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL expr="[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]" line="100" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]</e></m></meta>
		</LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]" line="103" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]</e></m></meta>
		</DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL expr="[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]" line="106" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]</e></m></meta>
		</DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS expr="[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]" line="109" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]</e></m></meta>
		</CODE_LENGTHS_POS>
		<FIXED_HUFFMAN expr="null" line="127" static="1">
			<x path="Null"><e path="haxe.zip.Huffman"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</FIXED_HUFFMAN>
		<run public="1" set="method" line="388" static="1">
			<f a="i:?bufsize" v=":65536">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ bufsize : 65536 }</e></m></meta>
		</run>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="haxe.zip._InflateImpl.State"/></state>
		<isFinal><x path="Bool"/></isFinal>
		<huffman><e path="haxe.zip.Huffman"/></huffman>
		<huffdist><x path="Null"><e path="haxe.zip.Huffman"/></x></huffdist>
		<htools><c path="haxe.zip.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="haxe.zip._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="149"><f a=""><x path="Null"><e path="haxe.zip.Huffman"/></x></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="159"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="168"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="179"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="190"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="199"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="204"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="211"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="218"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="224"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="228"><f a="h">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="236"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="268"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="129">
			<f a="i:?header:?crc" v=":true:true">
				<c path="haxe.io.Input"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ crc : true, header : true }</e></m></meta>
		</new>
		<haxe_doc>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</haxe_doc>
	</class>
	<class path="haxe.zip.Reader" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Reader.hx">
		<readZip public="1" set="method" line="194" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c>
</f></readZip>
		<unzip public="1" set="method" line="199" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Null"><c path="haxe.io.Bytes"/></x>
</f></unzip>
		<i><c path="haxe.io.Input"/></i>
		<readZipDate set="method" line="36"><f a=""><c path="Date"/></f></readZipDate>
		<readExtraFields set="method" line="48"><f a="length">
	<x path="Int"/>
	<c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c>
</f></readExtraFields>
		<readEntryHeader public="1" set="method" line="78"><f a=""><t path="haxe.zip.Entry"/></f></readEntryHeader>
		<read public="1" set="method" line="121"><f a=""><c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c></f></read>
		<new public="1" set="method" line="32"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Tools" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Tools.hx">
		<compress public="1" set="method" line="26" static="1"><f a="f:level">
	<t path="haxe.zip.Entry"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compress>
		<uncompress public="1" set="method" line="38" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></uncompress>
	</class>
	<class path="haxe.zip.Uncompress" params="" file="/home/runner/work/haxe/haxe/std/java/_std/haxe/zip/Uncompress.hx">
		<run public="1" set="method" line="50" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<inflater final="1"><c path="java.util.zip.Inflater"/></inflater>
		<execute public="1" set="method" line="34"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="44"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="46"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="30"><f a="?windowBits">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Writer" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Writer.hx">
		<CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE get="inline" set="null" expr="46" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
			<haxe_doc>The next constant is required for computing the Central
		Directory Record(CDR) size. CDR consists of some fields
		of constant size and a filename. Constant represents
		total length of all fields with constant size for each
		file in archive</haxe_doc>
		</CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE>
		<LOCAL_FILE_HEADER_FIELDS_SIZE get="inline" set="null" expr="30" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
			<haxe_doc>The following constant is the total size of all fields
		of Local File Header. It's required for calculating
		offset of start of central directory record</haxe_doc>
		</LOCAL_FILE_HEADER_FIELDS_SIZE>
		<o><c path="haxe.io.Output"/></o>
		<files><c path="haxe.ds.List"><a>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
	<fields><c path="haxe.io.Bytes"/></fields>
	<date><c path="Date"/></date>
	<crc><x path="Int"/></crc>
	<compressed><x path="Bool"/></compressed>
	<clen><x path="Int"/></clen>
</a></c></files>
		<writeZipDate set="method" line="60"><f a="date">
	<c path="Date"/>
	<x path="Void"/>
</f></writeZipDate>
		<writeEntryHeader public="1" set="method" line="71"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></writeEntryHeader>
		<write public="1" set="method" line="141"><f a="files">
	<c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c>
	<x path="Void"/>
</f></write>
		<writeCDR public="1" set="method" line="149"><f a=""><x path="Void"/></f></writeCDR>
		<new public="1" set="method" line="55"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="java.Boot" params="" file="/home/runner/work/haxe/haxe/std/java/Boot.hx" extern="1"><meta><m n=":dox"><e>hide</e></m></meta></class>
	<class path="java.Init" params="" file="/home/runner/work/haxe/haxe/std/java/Init.hx">
		<init public="1" set="method" line="25" static="1"><f a=""><x path="Void"/></f></init>
		<meta>
			<m n=":native"><e>"haxe.java.Init"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="java.Lib" params="" file="/home/runner/work/haxe/haxe/std/java/Lib.hx">
		<print public="1" get="inline" set="null" line="34" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print the specified value on the default output.</haxe_doc>
		</print>
		<println public="1" get="inline" set="null" line="41" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print the specified value on the default output followed by a newline character.</haxe_doc>
		</println>
		<nativeArray public="1" params="T" get="inline" set="null" line="51" static="1">
			<f a="arr:equalLengthRequired">
				<c path="Array"><c path="nativeArray.T"/></c>
				<x path="Bool"/>
				<c path="java.NativeArray"><c path="nativeArray.T"/></c>
			</f>
			<haxe_doc>Returns a native array from the supplied Array. This native array is unsafe to be written on,
		as it may or may not be linked to the actual Array implementation.

		If `equalLengthRequired` is true, the result might be a copy of an array with the correct size.</haxe_doc>
		</nativeArray>
		<nativeType public="1" params="T" get="inline" set="null" line="64" static="1">
			<f a="obj">
				<c path="nativeType.T"/>
				<c path="java.lang.Class"><c path="nativeType.T"/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":deprecated"><e>"The function `nativeType` is deprecated and will be removed in later versions. Please use `getNativeType` instead"</e></m>
			</meta>
			<haxe_doc>Gets the native `java.lang.Class` from the supplied object. Will throw an exception in case of null being passed.
		[deprecated] - use `getNativeType` instead</haxe_doc>
		</nativeType>
		<getNativeType public="1" params="T" get="inline" set="null" line="71" static="1">
			<f a="obj">
				<c path="getNativeType.T"/>
				<c path="java.lang.Class"><c path="getNativeType.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Gets the native `java.lang.Class` from the supplied object. Will throw an exception in case of null being passed.</haxe_doc>
		</getNativeType>
		<fromNativeType public="1" params="T" get="inline" set="null" line="78" static="1">
			<f a="t">
				<c path="java.lang.Class"><c path="fromNativeType.T"/></c>
				<x path="Class"><c path="fromNativeType.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a Class<> equivalent to the native java.lang.Class type.]]></haxe_doc>
		</fromNativeType>
		<toNativeType public="1" params="T" get="inline" set="null" line="85" static="1">
			<f a="cl">
				<x path="Class"><c path="toNativeType.T"/></x>
				<c path="java.lang.Class"><c path="toNativeType.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a java.lang.Class equivalent to the Haxe Class<> type.]]></haxe_doc>
		</toNativeType>
		<toNativeEnum public="1" params="T" get="inline" set="null" line="92" static="1">
			<f a="cl">
				<x path="Enum"><c path="toNativeEnum.T"/></x>
				<c path="java.lang.Class"><c path="toNativeEnum.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a java.lang.Class equivalent to the Haxe Enum<> type.]]></haxe_doc>
		</toNativeEnum>
		<array public="1" params="T" set="method" line="101" static="1">
			<f a="native">
				<c path="java.NativeArray"><c path="array.T"/></c>
				<c path="Array"><c path="array.T"/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":generic"/>
			</meta>
			<haxe_doc>Returns a Haxe Array of a native Array.
		Unless `copy` is true, it won't copy the contents of the native array,
		so unless any operation triggers an array resize, all changes made to the Haxe array will affect the native array argument.</haxe_doc>
		</array>
		<doArray params="T" get="inline" set="null" line="105" static="1">
			<f a="native">
				<c path="java.NativeArray"><c path="doArray.T"/></c>
				<c path="Array"><c path="doArray.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</doArray>
		<array_Int public="1" set="method" line="113" static="1"><f a="native">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></array_Int>
		<array_Float public="1" set="method" line="117" static="1"><f a="native">
	<c path="java.NativeArray"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></array_Float>
		<array_Bool public="1" set="method" line="121" static="1"><f a="native">
	<c path="java.NativeArray"><x path="Bool"/></c>
	<c path="Array"><x path="Bool"/></c>
</f></array_Bool>
		<array_java_Int8 public="1" set="method" line="125" static="1"><f a="native">
	<c path="java.NativeArray"><x path="java.Int8"/></c>
	<c path="Array"><x path="java.Int8"/></c>
</f></array_java_Int8>
		<array_java_Int16 public="1" set="method" line="129" static="1"><f a="native">
	<c path="java.NativeArray"><x path="java.Int16"/></c>
	<c path="Array"><x path="java.Int16"/></c>
</f></array_java_Int16>
		<array_java_Char16 public="1" set="method" line="133" static="1"><f a="native">
	<c path="java.NativeArray"><x path="java.Char16"/></c>
	<c path="Array"><x path="java.Char16"/></c>
</f></array_java_Char16>
		<array_Single public="1" set="method" line="137" static="1"><f a="native">
	<c path="java.NativeArray"><x path="Single"/></c>
	<c path="Array"><x path="Single"/></c>
</f></array_Single>
		<array_haxe_Int64 public="1" set="method" line="141" static="1"><f a="native">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<c path="Array"><x path="haxe.Int64"/></c>
</f></array_haxe_Int64>
		<arrayAlloc public="1" params="T" set="method" line="148" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="Array"><c path="arrayAlloc.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Allocates a new Haxe Array with a predetermined size</haxe_doc>
		</arrayAlloc>
		<lock public="1" params="T" get="inline" set="null" line="160" static="1">
			<f a="obj:block">
				<d/>
				<c path="lock.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Ensures that one thread does not enter a critical section of code while another thread
		is in the critical section. If another thread attempts to enter a locked code, it
		will wait, block, until the object is released.
		This is the equivalent to "synchronized" in java code.

		This method only exists at compile-time, so it can't be called via reflection.</haxe_doc>
		</lock>
		<haxe_doc>Platform-specific Java Library. Provides some platform-specific functions for the Java target,
	such as conversion from Haxe types to native types and vice-versa.</haxe_doc>
		<meta><m n=":native"><e>"haxe.java.Lib"</e></m></meta>
	</class>
	<class path="java.NativeString" params="" file="/home/runner/work/haxe/haxe/std/java/NativeString.hx" extern="1">
		<copyValueOf public="1" set="method" static="1">
			<f a="data">
				<c path="java.NativeArray"><x path="java.Char16"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><copyValueOf public="1" set="method">
	<f a="data:offset:count">
		<c path="java.NativeArray"><x path="java.Char16"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</copyValueOf></overloads>
		</copyValueOf>
		<format public="1" set="method" static="1">
			<f a="l:format:args">
				<c path="java.util.Locale"/>
				<c path="String"/>
				<t path="haxe.extern.Rest"><d/></t>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><format public="1" set="method">
	<f a="format:args">
		<c path="String"/>
		<t path="haxe.extern.Rest"><d/></t>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</format></overloads>
		</format>
		<valueOf public="1" set="method" static="1">
			<f a="b">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<valueOf public="1" set="method">
					<f a="obj">
						<c path="java.lang.Object"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="l">
						<x path="haxe.Int64"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="i">
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="f">
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="d">
						<x path="Float"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="data:offset:count">
						<c path="java.NativeArray"><x path="java.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="data">
						<c path="java.NativeArray"><x path="java.Char16"/></c>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="c">
						<x path="java.Char16"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</valueOf>
			</overloads>
		</valueOf>
		<charAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="java.Char16"/>
</f></charAt>
		<codePointAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointAt>
		<codePointBefore public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointBefore>
		<codePointCount public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></codePointCount>
		<compareTo public="1" set="method"><f a="anotherString">
	<c path="String"/>
	<x path="Int"/>
</f></compareTo>
		<compareToIgnoreCase public="1" set="method"><f a="str">
	<c path="String"/>
	<x path="Int"/>
</f></compareToIgnoreCase>
		<concat public="1" set="method"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></concat>
		<contains public="1" set="method"><f a="s">
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></contains>
		<contentEquals public="1" set="method">
			<f a="cs">
				<c path="java.lang.CharSequence"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><contentEquals public="1" set="method">
	<f a="sb">
		<c path="java.lang.StringBuffer"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</contentEquals></overloads>
		</contentEquals>
		<endsWith public="1" set="method"><f a="suffix">
	<c path="String"/>
	<x path="Bool"/>
</f></endsWith>
		<equals public="1" set="method"><f a="anObject">
	<d/>
	<x path="Bool"/>
</f></equals>
		<equalsIgnoreCase public="1" set="method"><f a="anotherString">
	<c path="String"/>
	<x path="Bool"/>
</f></equalsIgnoreCase>
		<getBytes public="1" set="method">
			<f a=""><c path="java.NativeArray"><x path="java.Int8"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<getBytes public="1" set="method">
					<f a="charsetName">
						<c path="String"/>
						<c path="java.NativeArray"><x path="java.Int8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</getBytes>
				<getBytes public="1" set="method">
					<f a="srcBegin:srcEnd:dst:dstBegin">
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.NativeArray"><x path="java.Int8"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":deprecated"/>
						<m n=":overload"/>
					</meta>
				</getBytes>
				<getBytes public="1" set="method">
					<f a="charset">
						<c path="java.nio.charset.Charset"/>
						<c path="java.NativeArray"><x path="java.Int8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</getBytes>
			</overloads>
		</getBytes>
		<getChars public="1" set="method"><f a="srcBegin:srcEnd:dst:dstBegin">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><x path="java.Char16"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></getChars>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<indexOf public="1" set="method">
			<f a="ch">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<indexOf public="1" set="method">
					<f a="str:fromIndex">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</indexOf>
				<indexOf public="1" set="method">
					<f a="str">
						<c path="String"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</indexOf>
				<indexOf public="1" set="method">
					<f a="ch:fromIndex">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</indexOf>
			</overloads>
		</indexOf>
		<intern public="1" set="method"><f a=""><c path="String"/></f></intern>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<lastIndexOf public="1" set="method">
			<f a="ch">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<lastIndexOf public="1" set="method">
					<f a="str:fromIndex">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</lastIndexOf>
				<lastIndexOf public="1" set="method">
					<f a="str">
						<c path="String"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</lastIndexOf>
				<lastIndexOf public="1" set="method">
					<f a="ch:fromIndex">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</lastIndexOf>
			</overloads>
		</lastIndexOf>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<matches public="1" set="method"><f a="regex">
	<c path="String"/>
	<x path="Bool"/>
</f></matches>
		<offsetByCodePoints public="1" set="method"><f a="index:codePointOffset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></offsetByCodePoints>
		<regionMatches public="1" set="method">
			<f a="ignoreCase:toffset:other:ooffset:len">
				<x path="Bool"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><regionMatches public="1" set="method">
	<f a="toffset:other:ooffset:len">
		<x path="Int"/>
		<c path="String"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</regionMatches></overloads>
		</regionMatches>
		<replace public="1" set="method">
			<f a="oldChar:newChar">
				<x path="java.Char16"/>
				<x path="java.Char16"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><replace public="1" set="method">
	<f a="target:replacement">
		<c path="java.lang.CharSequence"/>
		<c path="java.lang.CharSequence"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</replace></overloads>
		</replace>
		<replaceAll public="1" set="method"><f a="regex:replacement">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></replaceAll>
		<replaceFirst public="1" set="method"><f a="regex:replacement">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></replaceFirst>
		<split public="1" set="method">
			<f a="regex">
				<c path="String"/>
				<c path="java.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><split public="1" set="method">
	<f a="regex:limit">
		<c path="String"/>
		<x path="Int"/>
		<c path="java.NativeArray"><c path="String"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</split></overloads>
		</split>
		<startsWith public="1" set="method">
			<f a="prefix">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><startsWith public="1" set="method">
	<f a="prefix:toffset">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</startsWith></overloads>
		</startsWith>
		<subSequence public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
</f></subSequence>
		<substring public="1" set="method">
			<f a="beginIndex">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><substring public="1" set="method">
	<f a="beginIndex:endIndex">
		<x path="Int"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</substring></overloads>
		</substring>
		<toCharArray public="1" set="method"><f a=""><c path="java.NativeArray"><x path="java.Char16"/></c></f></toCharArray>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><toLowerCase public="1" set="method">
	<f a="locale">
		<c path="java.util.Locale"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</toLowerCase></overloads>
		</toLowerCase>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><toUpperCase public="1" set="method">
	<f a="locale">
		<c path="java.util.Locale"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</toUpperCase></overloads>
		</toUpperCase>
		<trim public="1" set="method"><f a=""><c path="String"/></f></trim>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.String"</e></m>
		</meta>
	</class>
	<abstract path="java.Int8" params="" file="/home/runner/work/haxe/haxe/std/java/StdTypes.hx" module="java.StdTypes">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="java.Int8"/></this>
		<meta>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="java.Int16" params="" file="/home/runner/work/haxe/haxe/std/java/StdTypes.hx" module="java.StdTypes">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="java.Int16"/></this>
		<meta>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="java.Char16" params="" file="/home/runner/work/haxe/haxe/std/java/StdTypes.hx" module="java.StdTypes">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="java.Char16"/></this>
		<meta>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="java.Int64" params="" file="/home/runner/work/haxe/haxe/std/java/StdTypes.hx" module="java.StdTypes">
		<from>
			<icast><x path="Int"/></icast>
			<icast><x path="Float"/></icast>
		</from>
		<this><x path="java.Int64"/></this>
		<meta>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
		<impl><class path="java._StdTypes.Int64_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/StdTypes.hx" private="1" module="java.StdTypes" extern="1" final="1">
	<addI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addI>
	<add public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</add>
	<mulI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulI>
	<mul public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mul>
	<modI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modI>
	<mod public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</mod>
	<subI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subI>
	<sub public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</sub>
	<divI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divI>
	<div public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</div>
	<orI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</orI>
	<or public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</or>
	<xorI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xorI>
	<xor public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xor>
	<andI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</andI>
	<and public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</and>
	<shlI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shlI>
	<shl public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shl>
	<shrI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shrI>
	<shr public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shr>
	<ushrI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >>> B]]></e></m>
		</meta>
	</ushrI>
	<ushr public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >>> B]]></e></m>
		</meta>
	</ushr>
	<gt public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<gte public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<lt public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<lte public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<bneg public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</bneg>
	<neg public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>-A</e></m>
		</meta>
	</neg>
	<preIncrement public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
</class></impl>
	</abstract>
	<class path="java._StdTypes.Int64_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/StdTypes.hx" private="1" module="java.StdTypes" extern="1" final="1">
		<addI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addI>
		<add public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</add>
		<mulI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulI>
		<mul public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mul>
		<modI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modI>
		<mod public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</mod>
		<subI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subI>
		<sub public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</sub>
		<divI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divI>
		<div public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</div>
		<orI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</orI>
		<or public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</or>
		<xorI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xorI>
		<xor public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xor>
		<andI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</andI>
		<and public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</and>
		<shlI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shlI>
		<shl public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shl>
		<shrI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shrI>
		<shr public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shr>
		<ushrI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >>> B]]></e></m>
			</meta>
		</ushrI>
		<ushr public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >>> B]]></e></m>
			</meta>
		</ushr>
		<gt public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<gte public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<lt public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<lte public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<bneg public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</bneg>
		<neg public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>-A</e></m>
			</meta>
		</neg>
		<preIncrement public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
	</class>
	<class path="java.lang.Readable" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Readable.class" extern="1" interface="1">
		<read public="1" set="method"><f a="param1">
	<c path="java.nio.CharBuffer"/>
	<x path="Int"/>
</f></read>
		<meta>
			<m n=":native"><e>"java.lang.Readable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.AutoCloseable" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/AutoCloseable.class" extern="1" interface="1">
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<meta>
			<m n=":native"><e>"java.lang.AutoCloseable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.Closeable" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Closeable.class" extern="1" interface="1">
		<extends path="java.lang.AutoCloseable"/>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<meta>
			<m n=":native"><e>"java.io.Closeable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.Reader" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Reader.class" extern="1" abstract="1">
		<implements path="java.lang.Readable"/>
		<implements path="java.io.Closeable"/>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.nio.CharBuffer"/>
				<x path="Int"/>
			</f>
			<overloads>
				<read abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></read>
				<read public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
</f></read>
				<read public="1" set="method"><f a=""><x path="Int"/></f></read>
			</overloads>
		</read>
		<skip public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></skip>
		<ready public="1" set="method"><f a=""><x path="Bool"/></f></ready>
		<markSupported public="1" set="method"><f a=""><x path="Bool"/></f></markSupported>
		<mark public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></mark>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<close abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></close>
		<lock public="1"><d/></lock>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.Reader"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.BufferedReader" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/BufferedReader.class" extern="1">
		<extends path="java.io.Reader"/>
		<read public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<overloads><read public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></read></overloads>
		</read>
		<readLine public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<overloads><readLine public="1" set="method"><f a=""><c path="String"/></f></readLine></overloads>
		</readLine>
		<skip public="1" set="method" override="1"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></skip>
		<ready public="1" set="method" override="1"><f a=""><x path="Bool"/></f></ready>
		<markSupported public="1" set="method" override="1"><f a=""><x path="Bool"/></f></markSupported>
		<mark public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></mark>
		<reset public="1" set="method" override="1"><f a=""><x path="Void"/></f></reset>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<lines public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="String"/></c></f></lines>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.Reader"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1">
	<c path="java.io.Reader"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.BufferedReader"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Iterator" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Iterator.class" extern="1" interface="1">
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><c path="java.util.Iterator.E"/></f></next>
		<remove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":java.default"/></meta>
		</remove>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.Consumer"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</forEachRemaining>
		<meta>
			<m n=":native"><e>"java.util.Iterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.BufferedReader_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/BufferedReader$1.class" module="java.io.BufferedReader" extern="1">
		<implements path="java.util.Iterator"><c path="String"/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><c path="String"/></f></next>
		<nextLine public="1"><c path="String"/></nextLine>
		<this_0 final="1" public="1">
			<c path="java.io.BufferedReader"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.BufferedReader"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.BufferedReader$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Appendable" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Appendable.class" extern="1" interface="1">
		<append public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.lang.Appendable"/>
			</f>
			<overloads>
				<append public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<c path="java.lang.Appendable"/>
</f></append>
				<append public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.Appendable"/>
</f></append>
			</overloads>
		</append>
		<meta>
			<m n=":native"><e>"java.lang.Appendable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.Flushable" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Flushable.class" extern="1" interface="1">
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<meta>
			<m n=":native"><e>"java.io.Flushable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.Writer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Writer.class" extern="1" abstract="1">
		<implements path="java.lang.Appendable"/>
		<implements path="java.io.Closeable"/>
		<implements path="java.io.Flushable"/>
		<write public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<write public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write>
				<write public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></write>
				<write abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write>
				<write public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Void"/>
</f></write>
			</overloads>
		</write>
		<append public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.io.Writer"/>
			</f>
			<overloads>
				<append public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<c path="java.io.Writer"/>
</f></append>
				<append public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.io.Writer"/>
</f></append>
			</overloads>
		</append>
		<flush abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<close abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></close>
		<lock public="1"><d/></lock>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.Writer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.BufferedWriter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/BufferedWriter.class" extern="1">
		<extends path="java.io.Writer"/>
		<flushBuffer public="1" set="method"><f a=""><x path="Void"/></f></flushBuffer>
		<write public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<write public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write>
				<write public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write>
			</overloads>
		</write>
		<newLine public="1" set="method"><f a=""><x path="Void"/></f></newLine>
		<flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></flush>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.io.Writer"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.io.Writer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.BufferedWriter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.OutputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/OutputStream.class" extern="1" abstract="1">
		<implements path="java.io.Closeable"/>
		<implements path="java.io.Flushable"/>
		<write abstract="1" public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<write public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write>
				<write public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></write>
			</overloads>
		</write>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.OutputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ByteArrayOutputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ByteArrayOutputStream.class" extern="1">
		<extends path="java.io.OutputStream"/>
		<write public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><write public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write></overloads>
		</write>
		<writeTo public="1" set="method"><f a="param1">
	<c path="java.io.OutputStream"/>
	<x path="Void"/>
</f></writeTo>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<toByteArray public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></toByteArray>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads>
				<toString public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":deprecated"/></meta>
				</toString>
				<toString public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></toString>
			</overloads>
		</toString>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<buf public="1"><c path="java.NativeArray"><t path="java.types.Int8"/></c></buf>
		<count public="1"><x path="Int"/></count>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.ByteArrayOutputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.Console" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Console.class" extern="1">
		<implements path="java.io.Flushable"/>
		<writer public="1" set="method"><f a=""><c path="java.io.PrintWriter"/></f></writer>
		<reader public="1" set="method"><f a=""><c path="java.io.Reader"/></f></reader>
		<format public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="haxe.Rest"><d/></x>
	<c path="java.io.Console"/>
</f></format>
		<printf public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="haxe.Rest"><d/></x>
	<c path="java.io.Console"/>
</f></printf>
		<readLine public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="haxe.Rest"><d/></x>
				<c path="String"/>
			</f>
			<overloads><readLine public="1" set="method"><f a=""><c path="String"/></f></readLine></overloads>
		</readLine>
		<readPassword public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="haxe.Rest"><d/></x>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
			</f>
			<overloads><readPassword public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Char16"/></c></f></readPassword></overloads>
		</readPassword>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.Console_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.Console"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.Console_LineReader" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Console$LineReader.class" module="java.io.Console" extern="1">
		<extends path="java.io.Reader"/>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<ready public="1" set="method" override="1"><f a=""><x path="Bool"/></f></ready>
		<read public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></read>
		<leftoverLF public="1"><x path="Bool"/></leftoverLF>
		<this_0 final="1" public="1">
			<c path="java.io.Console"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.Console"/>
	<c path="java.io.Reader"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.Console$LineReader"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.PrintWriter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/PrintWriter.class" extern="1">
		<extends path="java.io.Writer"/>
		<flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></flush>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<checkError public="1" set="method"><f a=""><x path="Bool"/></f></checkError>
		<setError public="1" set="method"><f a=""><x path="Void"/></f></setError>
		<clearError public="1" set="method"><f a=""><x path="Void"/></f></clearError>
		<write public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<write public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></write>
				<write public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write>
				<write public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Void"/>
</f></write>
				<write public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write>
			</overloads>
		</write>
		<print public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<overloads>
				<print public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></print>
				<print public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></print>
				<print public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Void"/>
</f></print>
				<print public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></print>
				<print public="1" set="method"><f a="param1">
	<x path="Single"/>
	<x path="Void"/>
</f></print>
				<print public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></print>
				<print public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></print>
				<print public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></print>
			</overloads>
		</print>
		<println public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<println public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<x path="Single"/>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></println>
			</overloads>
		</println>
		<printf public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="haxe.Rest"><d/></x>
				<c path="java.io.PrintWriter"/>
			</f>
			<overloads><printf public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Locale"/>
	<c path="String"/>
	<x path="haxe.Rest"><d/></x>
	<c path="java.io.PrintWriter"/>
</f></printf></overloads>
		</printf>
		<format public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="haxe.Rest"><d/></x>
				<c path="java.io.PrintWriter"/>
			</f>
			<overloads><format public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Locale"/>
	<c path="String"/>
	<x path="haxe.Rest"><d/></x>
	<c path="java.io.PrintWriter"/>
</f></format></overloads>
		</format>
		<append public="1" set="method" override="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.io.PrintWriter"/>
			</f>
			<overloads>
				<append public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<c path="java.io.PrintWriter"/>
</f></append>
				<append public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.io.PrintWriter"/>
</f></append>
			</overloads>
		</append>
		<out public="1"><c path="java.io.Writer"/></out>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.io.Writer"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.File"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.io.File"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.OutputStream"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.io.OutputStream"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.Writer"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.PrintWriter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.Console_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Console$3.class" module="java.io.Console" extern="1">
		<extends path="java.io.PrintWriter"/>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<this_0 final="1" public="1">
			<c path="java.io.Console"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.io.Console"/>
	<c path="java.io.Writer"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.Console$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.JavaIOAccess" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/JavaIOAccess.class" extern="1" interface="1">
		<console public="1" set="method"><f a=""><c path="java.io.Console"/></f></console>
		<charset public="1" set="method"><f a=""><c path="java.nio.charset.Charset"/></f></charset>
		<meta>
			<m n=":native"><e>"sun.misc.JavaIOAccess"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.Console_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Console$2.class" module="java.io.Console" extern="1">
		<implements path="java.sun.misc.JavaIOAccess"/>
		<console public="1" set="method"><f a=""><c path="java.io.Console"/></f></console>
		<charset public="1" set="method"><f a=""><c path="java.nio.charset.Charset"/></f></charset>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.Console$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.Console_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Console$1.class" module="java.io.Console" extern="1">
		<implements path="java.lang.Runnable"/>
		<run public="1" set="method"><f a=""><x path="Void"/></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.Console$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.DataInput" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/DataInput.class" extern="1" interface="1">
		<readFully public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<overloads><readFully public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readFully></overloads>
		</readFully>
		<skipBytes public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></skipBytes>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><t path="java.types.Int8"/></f></readByte>
		<readUnsignedByte public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedByte>
		<readShort public="1" set="method"><f a=""><t path="java.types.Int16"/></f></readShort>
		<readUnsignedShort public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedShort>
		<readChar public="1" set="method"><f a=""><t path="java.types.Char16"/></f></readChar>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readLong public="1" set="method"><f a=""><x path="haxe.Int64"/></f></readLong>
		<readFloat public="1" set="method"><f a=""><x path="Single"/></f></readFloat>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readLine public="1" set="method"><f a=""><c path="String"/></f></readLine>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<meta>
			<m n=":native"><e>"java.io.DataInput"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.DataOutput" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/DataOutput.class" extern="1" interface="1">
		<write public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<write public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write>
				<write public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></write>
			</overloads>
		</write>
		<writeBoolean public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeShort public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeChar public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeChar>
		<writeInt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeLong public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></writeLong>
		<writeFloat public="1" set="method"><f a="param1">
	<x path="Single"/>
	<x path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeBytes public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></writeBytes>
		<writeChars public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></writeChars>
		<writeUTF public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<meta>
			<m n=":native"><e>"java.io.DataOutput"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.FilterOutputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/FilterOutputStream.class" extern="1">
		<extends path="java.io.OutputStream"/>
		<write public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<write public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write>
				<write public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></write>
			</overloads>
		</write>
		<flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></flush>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<out public="1"><c path="java.io.OutputStream"/></out>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.OutputStream"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.FilterOutputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.DataOutputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/DataOutputStream.class" extern="1">
		<extends path="java.io.FilterOutputStream"/>
		<implements path="java.io.DataOutput"/>
		<writeUTF public="1" set="method" static="1"><f a="param1:param2">
	<c path="String"/>
	<c path="java.io.DataOutput"/>
	<x path="Int"/>
</f></writeUTF>
		<write public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><write public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write></overloads>
		</write>
		<flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></flush>
		<writeBoolean final="1" public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeShort final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeChar final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeChar>
		<writeInt final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeLong final="1" public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></writeLong>
		<writeFloat final="1" public="1" set="method"><f a="param1">
	<x path="Single"/>
	<x path="Void"/>
</f></writeFloat>
		<writeDouble final="1" public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeBytes final="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></writeBytes>
		<writeChars final="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></writeChars>
		<writeUTF final="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<size final="1" public="1" set="method"><f a=""><x path="Int"/></f></size>
		<written public="1"><x path="Int"/></written>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.OutputStream"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.DataOutputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Throwable" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Throwable.class" extern="1">
		<implements path="java.io.Serializable"/>
		<getMessage public="1" set="method"><f a=""><c path="String"/></f></getMessage>
		<getLocalizedMessage public="1" set="method"><f a=""><c path="String"/></f></getLocalizedMessage>
		<getCause public="1" set="method"><f a=""><c path="java.lang.Throwable"/></f></getCause>
		<initCause public="1" set="method"><f a="param1">
	<c path="java.lang.Throwable"/>
	<c path="java.lang.Throwable"/>
</f></initCause>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<printStackTrace public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<printStackTrace public="1" set="method"><f a="param1">
	<c path="java.io.PrintWriter"/>
	<x path="Void"/>
</f></printStackTrace>
				<printStackTrace public="1" set="method"><f a="param1">
	<c path="java.io.PrintStream"/>
	<x path="Void"/>
</f></printStackTrace>
			</overloads>
		</printStackTrace>
		<fillInStackTrace public="1" set="method"><f a=""><c path="java.lang.Throwable"/></f></fillInStackTrace>
		<getStackTrace public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c></f></getStackTrace>
		<setStackTrace public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c>
	<x path="Void"/>
</f></setStackTrace>
		<getStackTraceDepth public="1" set="method"><f a=""><x path="Int"/></f></getStackTraceDepth>
		<getStackTraceElement public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.StackTraceElement"/>
</f></getStackTraceElement>
		<addSuppressed final="1" public="1" set="method"><f a="param1">
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></addSuppressed>
		<getSuppressed final="1" public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.Throwable"/></c></f></getSuppressed>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="String"/>
	<c path="java.lang.Throwable"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Throwable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Exception" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Exception.class" extern="1">
		<extends path="java.lang.Throwable"/>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="String"/>
	<c path="java.lang.Throwable"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.Exception"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.IOException" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/IOException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.IOException"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.EOFException" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/EOFException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.EOFException"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.File" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/File.class" extern="1">
		<implements path="java.lang.Comparable"><c path="java.io.File"/></implements>
		<implements path="java.io.Serializable"/>
		<listRoots public="1" set="method" static="1"><f a=""><c path="java.NativeArray"><c path="java.io.File"/></c></f></listRoots>
		<createTempFile public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="java.io.File"/>
				<c path="java.io.File"/>
			</f>
			<overloads><createTempFile public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<c path="java.io.File"/>
</f></createTempFile></overloads>
		</createTempFile>
		<separatorChar final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></separatorChar>
		<separator final="1" public="1" set="null" static="1"><c path="String"/></separator>
		<pathSeparatorChar final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></pathSeparatorChar>
		<pathSeparator final="1" public="1" set="null" static="1"><c path="String"/></pathSeparator>
		<isInvalid final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isInvalid>
		<getPrefixLength public="1" set="method"><f a=""><x path="Int"/></f></getPrefixLength>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getParent public="1" set="method"><f a=""><c path="String"/></f></getParent>
		<getParentFile public="1" set="method"><f a=""><c path="java.io.File"/></f></getParentFile>
		<getPath public="1" set="method"><f a=""><c path="String"/></f></getPath>
		<isAbsolute public="1" set="method"><f a=""><x path="Bool"/></f></isAbsolute>
		<getAbsolutePath public="1" set="method"><f a=""><c path="String"/></f></getAbsolutePath>
		<getAbsoluteFile public="1" set="method"><f a=""><c path="java.io.File"/></f></getAbsoluteFile>
		<getCanonicalPath public="1" set="method"><f a=""><c path="String"/></f></getCanonicalPath>
		<getCanonicalFile public="1" set="method"><f a=""><c path="java.io.File"/></f></getCanonicalFile>
		<toURL public="1" set="method">
			<f a=""><c path="java.net.URL"/></f>
			<meta><m n=":deprecated"/></meta>
		</toURL>
		<toURI public="1" set="method"><f a=""><c path="java.net.URI"/></f></toURI>
		<canRead public="1" set="method"><f a=""><x path="Bool"/></f></canRead>
		<canWrite public="1" set="method"><f a=""><x path="Bool"/></f></canWrite>
		<exists public="1" set="method"><f a=""><x path="Bool"/></f></exists>
		<isDirectory public="1" set="method"><f a=""><x path="Bool"/></f></isDirectory>
		<isFile public="1" set="method"><f a=""><x path="Bool"/></f></isFile>
		<isHidden public="1" set="method"><f a=""><x path="Bool"/></f></isHidden>
		<lastModified public="1" set="method"><f a=""><x path="haxe.Int64"/></f></lastModified>
		<length public="1" set="method"><f a=""><x path="haxe.Int64"/></f></length>
		<createNewFile public="1" set="method"><f a=""><x path="Bool"/></f></createNewFile>
		<delete public="1" set="method"><f a=""><x path="Bool"/></f></delete>
		<deleteOnExit public="1" set="method"><f a=""><x path="Void"/></f></deleteOnExit>
		<list public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="String"/></c></f>
			<overloads><list public="1" set="method"><f a="param1">
	<c path="java.io.FilenameFilter"/>
	<c path="java.NativeArray"><c path="String"/></c>
</f></list></overloads>
		</list>
		<listFiles public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.io.File"/></c></f>
			<overloads>
				<listFiles public="1" set="method"><f a="param1">
	<c path="java.io.FileFilter"/>
	<c path="java.NativeArray"><c path="java.io.File"/></c>
</f></listFiles>
				<listFiles public="1" set="method"><f a="param1">
	<c path="java.io.FilenameFilter"/>
	<c path="java.NativeArray"><c path="java.io.File"/></c>
</f></listFiles>
			</overloads>
		</listFiles>
		<mkdir public="1" set="method"><f a=""><x path="Bool"/></f></mkdir>
		<mkdirs public="1" set="method"><f a=""><x path="Bool"/></f></mkdirs>
		<renameTo public="1" set="method"><f a="param1">
	<c path="java.io.File"/>
	<x path="Bool"/>
</f></renameTo>
		<setLastModified public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Bool"/>
</f></setLastModified>
		<setReadOnly public="1" set="method"><f a=""><x path="Bool"/></f></setReadOnly>
		<setWritable public="1" set="method">
			<f a="param1:param2">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<overloads><setWritable public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Bool"/>
</f></setWritable></overloads>
		</setWritable>
		<setReadable public="1" set="method">
			<f a="param1:param2">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<overloads><setReadable public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Bool"/>
</f></setReadable></overloads>
		</setReadable>
		<setExecutable public="1" set="method">
			<f a="param1:param2">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<overloads><setExecutable public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Bool"/>
</f></setExecutable></overloads>
		</setExecutable>
		<canExecute public="1" set="method"><f a=""><x path="Bool"/></f></canExecute>
		<getTotalSpace public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getTotalSpace>
		<getFreeSpace public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getFreeSpace>
		<getUsableSpace public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getUsableSpace>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.io.File"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toPath public="1" set="method"><f a=""><c path="java.nio.file.Path"/></f></toPath>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.net.URI"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.File"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.File"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.File_TempDirectory" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/File$TempDirectory.class" module="java.io.File" extern="1">
		<location public="1" set="method" static="1"><f a=""><c path="java.io.File"/></f></location>
		<generateFile public="1" set="method" static="1"><f a="param1:param2:param3">
	<c path="String"/>
	<c path="String"/>
	<c path="java.io.File"/>
	<c path="java.io.File"/>
</f></generateFile>
		<meta>
			<m n=":native"><e>"java.io.File$TempDirectory"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.io.File_PathStatus" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/File$PathStatus.class" module="java.io.File">
		<INVALID/>
		<CHECKED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.io.File$PathStatus"</e></m>
		</meta>
	</enum>
	<class path="java.io.FileDescriptor" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/FileDescriptor.class" extern="1">
		<_in final="1" public="1" set="null" static="1">
			<c path="java.io.FileDescriptor"/>
			<meta><m n=":native"><e>"in"</e></m></meta>
		</_in>
		<out final="1" public="1" set="null" static="1"><c path="java.io.FileDescriptor"/></out>
		<err final="1" public="1" set="null" static="1"><c path="java.io.FileDescriptor"/></err>
		<valid public="1" set="method"><f a=""><x path="Bool"/></f></valid>
		<sync public="1" set="method"><f a=""><x path="Void"/></f></sync>
		<attach public="1" set="method"><f a="param1">
	<c path="java.io.Closeable"/>
	<x path="Void"/>
</f></attach>
		<closeAll public="1" set="method"><f a="param1">
	<c path="java.io.Closeable"/>
	<x path="Void"/>
</f></closeAll>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.FileDescriptor"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.JavaIOFileDescriptorAccess" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/JavaIOFileDescriptorAccess.class" extern="1" interface="1">
		<set public="1" set="method"><f a="param1:param2">
	<c path="java.io.FileDescriptor"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<get public="1" set="method"><f a="param1">
	<c path="java.io.FileDescriptor"/>
	<x path="Int"/>
</f></get>
		<setHandle public="1" set="method"><f a="param1:param2">
	<c path="java.io.FileDescriptor"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setHandle>
		<getHandle public="1" set="method"><f a="param1">
	<c path="java.io.FileDescriptor"/>
	<x path="haxe.Int64"/>
</f></getHandle>
		<meta>
			<m n=":native"><e>"sun.misc.JavaIOFileDescriptorAccess"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.FileDescriptor_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/FileDescriptor$1.class" module="java.io.FileDescriptor" extern="1">
		<implements path="java.sun.misc.JavaIOFileDescriptorAccess"/>
		<set public="1" set="method"><f a="param1:param2">
	<c path="java.io.FileDescriptor"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<get public="1" set="method"><f a="param1">
	<c path="java.io.FileDescriptor"/>
	<x path="Int"/>
</f></get>
		<setHandle public="1" set="method"><f a="param1:param2">
	<c path="java.io.FileDescriptor"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setHandle>
		<getHandle public="1" set="method"><f a="param1">
	<c path="java.io.FileDescriptor"/>
	<x path="haxe.Int64"/>
</f></getHandle>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.FileDescriptor$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.FileFilter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/FileFilter.class" extern="1" interface="1">
		<accept public="1" set="method"><f a="param1">
	<c path="java.io.File"/>
	<x path="Bool"/>
</f></accept>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.io.FileFilter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.FilenameFilter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/FilenameFilter.class" extern="1" interface="1">
		<accept public="1" set="method"><f a="param1:param2">
	<c path="java.io.File"/>
	<c path="String"/>
	<x path="Bool"/>
</f></accept>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.io.FilenameFilter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.InputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/InputStream.class" extern="1" abstract="1">
		<implements path="java.io.Closeable"/>
		<read abstract="1" public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads>
				<read public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></read>
				<read public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
</f></read>
			</overloads>
		</read>
		<skip public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></skip>
		<available public="1" set="method"><f a=""><x path="Int"/></f></available>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<mark public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></mark>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<markSupported public="1" set="method"><f a=""><x path="Bool"/></f></markSupported>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.InputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.FilterInputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/FilterInputStream.class" extern="1">
		<extends path="java.io.InputStream"/>
		<read public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<overloads>
				<read public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></read>
				<read public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
</f></read>
			</overloads>
		</read>
		<skip public="1" set="method" override="1"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></skip>
		<available public="1" set="method" override="1"><f a=""><x path="Int"/></f></available>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<mark public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></mark>
		<reset public="1" set="method" override="1"><f a=""><x path="Void"/></f></reset>
		<markSupported public="1" set="method" override="1"><f a=""><x path="Bool"/></f></markSupported>
		<_in public="1">
			<c path="java.io.InputStream"/>
			<meta><m n=":native"><e>"in"</e></m></meta>
		</_in>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.FilterInputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamException" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamException.class" extern="1" abstract="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a=""><x path="Void"/></f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamException"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.InvalidClassException" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/InvalidClassException.class" extern="1">
		<extends path="java.io.ObjectStreamException"/>
		<getMessage public="1" set="method" override="1"><f a=""><c path="String"/></f></getMessage>
		<classname public="1"><c path="String"/></classname>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.InvalidClassException"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.NativeInput" params="" file="/home/runner/work/haxe/haxe/std/java/io/NativeInput.hx">
		<extends path="haxe.io.Input"/>
		<stream><c path="java.io.InputStream"/></stream>
		<readByte public="1" set="method" line="39" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="51" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="67" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="35"><f a="stream">
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"haxe.java.io.NativeInput"</e></m></meta>
	</class>
	<class path="java.io.NativeOutput" params="" file="/home/runner/work/haxe/haxe/std/java/io/NativeOutput.hx">
		<extends path="haxe.io.Output"/>
		<stream><c path="java.io.OutputStream"/></stream>
		<writeByte public="1" set="method" line="39" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<close public="1" set="method" line="50" override="1"><f a=""><x path="Void"/></f></close>
		<flush public="1" set="method" line="58" override="1"><f a=""><x path="Void"/></f></flush>
		<new public="1" set="method" line="35"><f a="stream">
	<c path="java.io.OutputStream"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"haxe.java.io.NativeOutput"</e></m></meta>
	</class>
	<class path="java.io.ObjectInput" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectInput.class" extern="1" interface="1">
		<extends path="java.io.DataInput"/>
		<extends path="java.lang.AutoCloseable"/>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<read public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads>
				<read public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></read>
				<read public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
</f></read>
			</overloads>
		</read>
		<skip public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></skip>
		<available public="1" set="method"><f a=""><x path="Int"/></f></available>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<meta>
			<m n=":native"><e>"java.io.ObjectInput"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamConstants" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamConstants.class" extern="1" interface="1">
		<STREAM_MAGIC final="1" public="1" set="null" static="1"><t path="java.types.Int16"/></STREAM_MAGIC>
		<STREAM_VERSION final="1" public="1" set="null" static="1"><t path="java.types.Int16"/></STREAM_VERSION>
		<TC_BASE final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_BASE>
		<TC_NULL final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_NULL>
		<TC_REFERENCE final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_REFERENCE>
		<TC_CLASSDESC final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_CLASSDESC>
		<TC_OBJECT final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_OBJECT>
		<TC_STRING final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_STRING>
		<TC_ARRAY final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_ARRAY>
		<TC_CLASS final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_CLASS>
		<TC_BLOCKDATA final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_BLOCKDATA>
		<TC_ENDBLOCKDATA final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_ENDBLOCKDATA>
		<TC_RESET final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_RESET>
		<TC_BLOCKDATALONG final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_BLOCKDATALONG>
		<TC_EXCEPTION final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_EXCEPTION>
		<TC_LONGSTRING final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_LONGSTRING>
		<TC_PROXYCLASSDESC final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_PROXYCLASSDESC>
		<TC_ENUM final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_ENUM>
		<TC_MAX final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></TC_MAX>
		<baseWireHandle final="1" public="1" set="null" static="1"><x path="Int"/></baseWireHandle>
		<SC_WRITE_METHOD final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></SC_WRITE_METHOD>
		<SC_BLOCK_DATA final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></SC_BLOCK_DATA>
		<SC_SERIALIZABLE final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></SC_SERIALIZABLE>
		<SC_EXTERNALIZABLE final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></SC_EXTERNALIZABLE>
		<SC_ENUM final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></SC_ENUM>
		<SUBSTITUTION_PERMISSION final="1" public="1" set="null" static="1"><c path="java.io.SerializablePermission"/></SUBSTITUTION_PERMISSION>
		<SUBCLASS_IMPLEMENTATION_PERMISSION final="1" public="1" set="null" static="1"><c path="java.io.SerializablePermission"/></SUBCLASS_IMPLEMENTATION_PERMISSION>
		<PROTOCOL_VERSION_1 final="1" public="1" set="null" static="1"><x path="Int"/></PROTOCOL_VERSION_1>
		<PROTOCOL_VERSION_2 final="1" public="1" set="null" static="1"><x path="Int"/></PROTOCOL_VERSION_2>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamConstants"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectInputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectInputStream.class" extern="1">
		<extends path="java.io.InputStream"/>
		<implements path="java.io.ObjectInput"/>
		<implements path="java.io.ObjectStreamConstants"/>
		<readObject final="1" public="1" set="method"><f a=""><d/></f></readObject>
		<readObjectOverride public="1" set="method"><f a=""><d/></f></readObjectOverride>
		<readUnshared public="1" set="method"><f a=""><d/></f></readUnshared>
		<defaultReadObject public="1" set="method"><f a=""><x path="Void"/></f></defaultReadObject>
		<readFields public="1" set="method"><f a=""><c path="java.io.ObjectInputStream_GetField"/></f></readFields>
		<registerValidation public="1" set="method"><f a="param1:param2">
	<c path="java.io.ObjectInputValidation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></registerValidation>
		<resolveClass public="1" set="method"><f a="param1">
	<c path="java.io.ObjectStreamClass"/>
	<c path="java.lang.Class"><d/></c>
</f></resolveClass>
		<resolveProxyClass public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="String"/></c>
	<c path="java.lang.Class"><d/></c>
</f></resolveProxyClass>
		<resolveObject public="1" set="method"><f a="param1">
	<d/>
	<d/>
</f></resolveObject>
		<enableResolveObject public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Bool"/>
</f></enableResolveObject>
		<readStreamHeader public="1" set="method"><f a=""><x path="Void"/></f></readStreamHeader>
		<readClassDescriptor public="1" set="method"><f a=""><c path="java.io.ObjectStreamClass"/></f></readClassDescriptor>
		<read public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<overloads><read public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></read></overloads>
		</read>
		<available public="1" set="method" override="1"><f a=""><x path="Int"/></f></available>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><t path="java.types.Int8"/></f></readByte>
		<readUnsignedByte public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedByte>
		<readChar public="1" set="method"><f a=""><t path="java.types.Char16"/></f></readChar>
		<readShort public="1" set="method"><f a=""><t path="java.types.Int16"/></f></readShort>
		<readUnsignedShort public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedShort>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readLong public="1" set="method"><f a=""><x path="haxe.Int64"/></f></readLong>
		<readFloat public="1" set="method"><f a=""><x path="Single"/></f></readFloat>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFully public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<overloads><readFully public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readFully></overloads>
		</readFully>
		<skipBytes public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></skipBytes>
		<readLine public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":deprecated"/></meta>
		</readLine>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readTypeString public="1" set="method"><f a=""><c path="String"/></f></readTypeString>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a=""><x path="Void"/></f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.ObjectInputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectInputStream_ValidationList" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectInputStream$ValidationList.class" module="java.io.ObjectInputStream" extern="1">
		<register public="1" set="method"><f a="param1:param2">
	<c path="java.io.ObjectInputValidation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></register>
		<doCallbacks public="1" set="method"><f a=""><x path="Void"/></f></doCallbacks>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectInputStream$ValidationList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectInputStream_ValidationList_Callback" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectInputStream$ValidationList$Callback.class" module="java.io.ObjectInputStream" extern="1">
		<obj final="1" public="1"><c path="java.io.ObjectInputValidation"/></obj>
		<priority final="1" public="1"><x path="Int"/></priority>
		<next public="1"><c path="java.io.ObjectInputStream_ValidationList_Callback"/></next>
		<acc final="1" public="1"><c path="java.security.AccessControlContext"/></acc>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.io.ObjectInputValidation"/>
	<x path="Int"/>
	<c path="java.io.ObjectInputStream_ValidationList_Callback"/>
	<c path="java.security.AccessControlContext"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectInputStream$ValidationList$Callback"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.PrivilegedExceptionAction" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/PrivilegedExceptionAction.class" extern="1" interface="1">
		<run public="1" set="method"><f a=""><c path="java.security.PrivilegedExceptionAction.T"/></f></run>
		<meta>
			<m n=":native"><e>"java.security.PrivilegedExceptionAction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectInputStream_ValidationList_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectInputStream$ValidationList$1.class" module="java.io.ObjectInputStream" extern="1">
		<implements path="java.security.PrivilegedExceptionAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<this_0 final="1" public="1">
			<c path="java.io.ObjectInputStream_ValidationList"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.ObjectInputStream_ValidationList"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectInputStream$ValidationList$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectInputStream_PeekInputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectInputStream$PeekInputStream.class" module="java.io.ObjectInputStream" extern="1">
		<extends path="java.io.InputStream"/>
		<peek public="1" set="method"><f a=""><x path="Int"/></f></peek>
		<read public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<overloads><read public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></read></overloads>
		</read>
		<readFully public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readFully>
		<skip public="1" set="method" override="1"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></skip>
		<available public="1" set="method" override="1"><f a=""><x path="Int"/></f></available>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectInputStream$PeekInputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectInputStream_HandleTable" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectInputStream$HandleTable.class" module="java.io.ObjectInputStream" extern="1">
		<assign public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></assign>
		<markDependency public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></markDependency>
		<markException public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.lang.ClassNotFoundException"/>
	<x path="Void"/>
</f></markException>
		<finish public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></finish>
		<setObject public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></setObject>
		<lookupObject public="1" set="method"><f a="param1">
	<x path="Int"/>
	<d/>
</f></lookupObject>
		<lookupException public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.ClassNotFoundException"/>
</f></lookupException>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<status public="1"><c path="java.NativeArray"><t path="java.types.Int8"/></c></status>
		<entries public="1"><c path="java.NativeArray"><d/></c></entries>
		<deps public="1"><c path="java.NativeArray"><c path="java.io.ObjectInputStream_HandleTable_HandleList"/></c></deps>
		<lowDep public="1"><x path="Int"/></lowDep>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectInputStream$HandleTable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectInputStream_HandleTable_HandleList" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectInputStream$HandleTable$HandleList.class" module="java.io.ObjectInputStream" extern="1">
		<add public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></add>
		<get public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectInputStream$HandleTable$HandleList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectInputStream_GetField" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectInputStream$GetField.class" module="java.io.ObjectInputStream" extern="1" abstract="1">
		<getObjectStreamClass abstract="1" public="1" set="method"><f a=""><c path="java.io.ObjectStreamClass"/></f></getObjectStreamClass>
		<defaulted abstract="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></defaulted>
		<get abstract="1" public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<overloads>
				<get abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<d/>
	<d/>
</f></get>
				<get abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
</f></get>
				<get abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Single"/>
	<x path="Single"/>
</f></get>
				<get abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></get>
				<get abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></get>
				<get abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<t path="java.types.Int16"/>
	<t path="java.types.Int16"/>
</f></get>
				<get abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<t path="java.types.Char16"/>
	<t path="java.types.Char16"/>
</f></get>
				<get abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<t path="java.types.Int8"/>
	<t path="java.types.Int8"/>
</f></get>
			</overloads>
		</get>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectInputStream$GetField"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectInputStream_GetFieldImpl" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectInputStream$GetFieldImpl.class" module="java.io.ObjectInputStream" extern="1">
		<extends path="java.io.ObjectInputStream_GetField"/>
		<getObjectStreamClass public="1" set="method" override="1"><f a=""><c path="java.io.ObjectStreamClass"/></f></getObjectStreamClass>
		<defaulted public="1" set="method" override="1"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></defaulted>
		<get public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<overloads>
				<get public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<d/>
	<d/>
</f></get>
				<get public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
</f></get>
				<get public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></get>
				<get public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Single"/>
	<x path="Single"/>
</f></get>
				<get public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></get>
				<get public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<t path="java.types.Int16"/>
	<t path="java.types.Int16"/>
</f></get>
				<get public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<t path="java.types.Char16"/>
	<t path="java.types.Char16"/>
</f></get>
				<get public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<t path="java.types.Int8"/>
	<t path="java.types.Int8"/>
</f></get>
			</overloads>
		</get>
		<readFields public="1" set="method"><f a=""><x path="Void"/></f></readFields>
		<this_0 final="1" public="1">
			<c path="java.io.ObjectInputStream"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.ObjectInputStream"/>
	<c path="java.io.ObjectStreamClass"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectInputStream$GetFieldImpl"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectInputStream_Caches" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectInputStream$Caches.class" module="java.io.ObjectInputStream" extern="1">
		<subclassAudits final="1" public="1" set="null" static="1"><c path="java.util.concurrent.ConcurrentMap">
	<c path="java.io.ObjectStreamClass_WeakClassKey"/>
	<x path="java.lang.Boolean"/>
</c></subclassAudits>
		<subclassAuditsQueue final="1" public="1" set="null" static="1"><c path="java.lang.ref.ReferenceQueue"><c path="java.lang.Class"><d/></c></c></subclassAuditsQueue>
		<meta>
			<m n=":native"><e>"java.io.ObjectInputStream$Caches"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectInputStream_BlockDataInputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectInputStream$BlockDataInputStream.class" module="java.io.ObjectInputStream" extern="1">
		<extends path="java.io.InputStream"/>
		<implements path="java.io.DataInput"/>
		<setBlockDataMode public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Bool"/>
</f></setBlockDataMode>
		<getBlockDataMode public="1" set="method"><f a=""><x path="Bool"/></f></getBlockDataMode>
		<skipBlockData public="1" set="method"><f a=""><x path="Void"/></f></skipBlockData>
		<currentBlockRemaining public="1" set="method"><f a=""><x path="Int"/></f></currentBlockRemaining>
		<peek public="1" set="method"><f a=""><x path="Int"/></f></peek>
		<peekByte public="1" set="method"><f a=""><t path="java.types.Int8"/></f></peekByte>
		<read public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<overloads>
				<read public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></read>
				<read public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></read>
			</overloads>
		</read>
		<skip public="1" set="method" override="1"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></skip>
		<available public="1" set="method" override="1"><f a=""><x path="Int"/></f></available>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<readFully public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<readFully public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></readFully>
				<readFully public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readFully>
			</overloads>
		</readFully>
		<skipBytes public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></skipBytes>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><t path="java.types.Int8"/></f></readByte>
		<readUnsignedByte public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedByte>
		<readChar public="1" set="method"><f a=""><t path="java.types.Char16"/></f></readChar>
		<readShort public="1" set="method"><f a=""><t path="java.types.Int16"/></f></readShort>
		<readUnsignedShort public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedShort>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readFloat public="1" set="method"><f a=""><x path="Single"/></f></readFloat>
		<readLong public="1" set="method"><f a=""><x path="haxe.Int64"/></f></readLong>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readLine public="1" set="method"><f a=""><c path="String"/></f></readLine>
		<readBooleans public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Bool"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readBooleans>
		<readChars public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readChars>
		<readShorts public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readShorts>
		<readInts public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readInts>
		<readFloats public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readFloats>
		<readLongs public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readLongs>
		<readDoubles public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readDoubles>
		<readLongUTF public="1" set="method"><f a=""><c path="String"/></f></readLongUTF>
		<this_0 final="1" public="1">
			<c path="java.io.ObjectInputStream"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.ObjectInputStream"/>
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectInputStream$BlockDataInputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.PrivilegedAction" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/PrivilegedAction.class" extern="1" interface="1">
		<run public="1" set="method"><f a=""><c path="java.security.PrivilegedAction.T"/></f></run>
		<meta>
			<m n=":native"><e>"java.security.PrivilegedAction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectInputStream_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectInputStream$1.class" module="java.io.ObjectInputStream" extern="1">
		<implements path="java.security.PrivilegedAction"><x path="java.lang.Boolean"/></implements>
		<run public="1" set="method"><f a=""><x path="java.lang.Boolean"/></f></run>
		<val_subcl final="1" public="1">
			<c path="java.lang.Class"><d/></c>
			<meta><m n=":native"><e>"val$subcl"</e></m></meta>
		</val_subcl>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectInputStream$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectInputValidation" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectInputValidation.class" extern="1" interface="1">
		<validateObject public="1" set="method"><f a=""><x path="Void"/></f></validateObject>
		<meta>
			<m n=":native"><e>"java.io.ObjectInputValidation"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectOutput" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectOutput.class" extern="1" interface="1">
		<extends path="java.io.DataOutput"/>
		<extends path="java.lang.AutoCloseable"/>
		<writeObject public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<write public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<write public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write>
				<write public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></write>
			</overloads>
		</write>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<meta>
			<m n=":native"><e>"java.io.ObjectOutput"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectOutputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectOutputStream.class" extern="1">
		<extends path="java.io.OutputStream"/>
		<implements path="java.io.ObjectOutput"/>
		<implements path="java.io.ObjectStreamConstants"/>
		<useProtocolVersion public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></useProtocolVersion>
		<writeObject final="1" public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeObjectOverride public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></writeObjectOverride>
		<writeUnshared public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></writeUnshared>
		<defaultWriteObject public="1" set="method"><f a=""><x path="Void"/></f></defaultWriteObject>
		<putFields public="1" set="method"><f a=""><c path="java.io.ObjectOutputStream_PutField"/></f></putFields>
		<writeFields public="1" set="method"><f a=""><x path="Void"/></f></writeFields>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<annotateClass public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></annotateClass>
		<annotateProxyClass public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></annotateProxyClass>
		<replaceObject public="1" set="method"><f a="param1">
	<d/>
	<d/>
</f></replaceObject>
		<enableReplaceObject public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Bool"/>
</f></enableReplaceObject>
		<writeStreamHeader public="1" set="method"><f a=""><x path="Void"/></f></writeStreamHeader>
		<writeClassDescriptor public="1" set="method"><f a="param1">
	<c path="java.io.ObjectStreamClass"/>
	<x path="Void"/>
</f></writeClassDescriptor>
		<write public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<write public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write>
				<write public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></write>
			</overloads>
		</write>
		<flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></flush>
		<drain public="1" set="method"><f a=""><x path="Void"/></f></drain>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<writeBoolean public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeShort public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeChar public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeChar>
		<writeInt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeLong public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></writeLong>
		<writeFloat public="1" set="method"><f a="param1">
	<x path="Single"/>
	<x path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeBytes public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></writeBytes>
		<writeChars public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></writeChars>
		<writeUTF public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<getProtocolVersion public="1" set="method"><f a=""><x path="Int"/></f></getProtocolVersion>
		<writeTypeString public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></writeTypeString>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.io.OutputStream"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a=""><x path="Void"/></f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.ObjectOutputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectOutputStream_ReplaceTable" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectOutputStream$ReplaceTable.class" module="java.io.ObjectOutputStream" extern="1">
		<assign public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Void"/>
</f></assign>
		<lookup public="1" set="method"><f a="param1">
	<d/>
	<d/>
</f></lookup>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Single"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectOutputStream$ReplaceTable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectOutputStream_PutField" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectOutputStream$PutField.class" module="java.io.ObjectOutputStream" extern="1" abstract="1">
		<put abstract="1" public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<overloads>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></put>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></put>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Single"/>
	<x path="Void"/>
</f></put>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></put>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></put>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<t path="java.types.Int16"/>
	<x path="Void"/>
</f></put>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></put>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<t path="java.types.Int8"/>
	<x path="Void"/>
</f></put>
			</overloads>
		</put>
		<write abstract="1" public="1" set="method">
			<f a="param1">
				<c path="java.io.ObjectOutput"/>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</write>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectOutputStream$PutField"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectOutputStream_PutFieldImpl" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectOutputStream$PutFieldImpl.class" module="java.io.ObjectOutputStream" extern="1">
		<extends path="java.io.ObjectOutputStream_PutField"/>
		<put public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<overloads>
				<put public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Single"/>
	<x path="Void"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<t path="java.types.Int16"/>
	<x path="Void"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<t path="java.types.Int8"/>
	<x path="Void"/>
</f></put>
			</overloads>
		</put>
		<write public="1" set="method" override="1"><f a="param1">
	<c path="java.io.ObjectOutput"/>
	<x path="Void"/>
</f></write>
		<writeFields public="1" set="method"><f a=""><x path="Void"/></f></writeFields>
		<this_0 final="1" public="1">
			<c path="java.io.ObjectOutputStream"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.ObjectOutputStream"/>
	<c path="java.io.ObjectStreamClass"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectOutputStream$PutFieldImpl"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectOutputStream_HandleTable" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectOutputStream$HandleTable.class" module="java.io.ObjectOutputStream" extern="1">
		<assign public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></assign>
		<lookup public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></lookup>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Single"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectOutputStream$HandleTable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectOutputStream_DebugTraceInfoStack" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectOutputStream$DebugTraceInfoStack.class" module="java.io.ObjectOutputStream" extern="1">
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<pop public="1" set="method"><f a=""><x path="Void"/></f></pop>
		<push public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></push>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectOutputStream$DebugTraceInfoStack"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectOutputStream_Caches" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectOutputStream$Caches.class" module="java.io.ObjectOutputStream" extern="1">
		<subclassAudits final="1" public="1" set="null" static="1"><c path="java.util.concurrent.ConcurrentMap">
	<c path="java.io.ObjectStreamClass_WeakClassKey"/>
	<x path="java.lang.Boolean"/>
</c></subclassAudits>
		<subclassAuditsQueue final="1" public="1" set="null" static="1"><c path="java.lang.ref.ReferenceQueue"><c path="java.lang.Class"><d/></c></c></subclassAuditsQueue>
		<meta>
			<m n=":native"><e>"java.io.ObjectOutputStream$Caches"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectOutputStream_BlockDataOutputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectOutputStream$BlockDataOutputStream.class" module="java.io.ObjectOutputStream" extern="1">
		<extends path="java.io.OutputStream"/>
		<implements path="java.io.DataOutput"/>
		<setBlockDataMode public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Bool"/>
</f></setBlockDataMode>
		<getBlockDataMode public="1" set="method"><f a=""><x path="Bool"/></f></getBlockDataMode>
		<write public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<write public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></write>
				<write public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write>
				<write public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></write>
			</overloads>
		</write>
		<flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></flush>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<drain public="1" set="method"><f a=""><x path="Void"/></f></drain>
		<writeBoolean public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeChar public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeChar>
		<writeShort public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeInt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeFloat public="1" set="method"><f a="param1">
	<x path="Single"/>
	<x path="Void"/>
</f></writeFloat>
		<writeLong public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></writeLong>
		<writeDouble public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeBytes public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></writeBytes>
		<writeChars public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><writeChars public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeChars></overloads>
		</writeChars>
		<writeUTF public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><writeUTF public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></writeUTF></overloads>
		</writeUTF>
		<writeBooleans public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Bool"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeBooleans>
		<writeShorts public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeShorts>
		<writeInts public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeInts>
		<writeFloats public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeFloats>
		<writeLongs public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeLongs>
		<writeDoubles public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeDoubles>
		<getUTFLength public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></getUTFLength>
		<writeLongUTF public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><writeLongUTF public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></writeLongUTF></overloads>
		</writeLongUTF>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.OutputStream"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectOutputStream$BlockDataOutputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectOutputStream_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectOutputStream$1.class" module="java.io.ObjectOutputStream" extern="1">
		<implements path="java.security.PrivilegedAction"><x path="java.lang.Boolean"/></implements>
		<run public="1" set="method"><f a=""><x path="java.lang.Boolean"/></f></run>
		<val_subcl final="1" public="1">
			<c path="java.lang.Class"><d/></c>
			<meta><m n=":native"><e>"val$subcl"</e></m></meta>
		</val_subcl>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectOutputStream$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass.class" extern="1">
		<implements path="java.io.Serializable"/>
		<lookup public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.Class"><d/></c>
				<c path="java.io.ObjectStreamClass"/>
			</f>
			<overloads><lookup public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Class"><d/></c>
	<x path="Bool"/>
	<c path="java.io.ObjectStreamClass"/>
</f></lookup></overloads>
		</lookup>
		<lookupAny public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.io.ObjectStreamClass"/>
</f></lookupAny>
		<processQueue public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.lang.ref.ReferenceQueue"><c path="java.lang.Class"><d/></c></c>
	<c path="java.util.concurrent.ConcurrentMap">
		<c path="java.lang.ref.WeakReference"><c path="java.lang.Class"><d/></c></c>
		<d/>
	</c>
	<x path="Void"/>
</f></processQueue>
		<NO_FIELDS final="1" public="1" set="null" static="1"><c path="java.NativeArray"><c path="java.io.ObjectStreamField"/></c></NO_FIELDS>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getSerialVersionUID public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getSerialVersionUID>
		<forClass public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></forClass>
		<getFields public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.io.ObjectStreamField"/></c></f>
			<overloads><getFields public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<c path="java.NativeArray"><c path="java.io.ObjectStreamField"/></c>
</f></getFields></overloads>
		</getFields>
		<getField public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.ObjectStreamField"/>
			</f>
			<overloads><getField public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.lang.Class"><d/></c>
	<c path="java.io.ObjectStreamField"/>
</f></getField></overloads>
		</getField>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<initProxy public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.ClassNotFoundException"/>
	<c path="java.io.ObjectStreamClass"/>
	<x path="Void"/>
</f></initProxy>
		<initNonProxy public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.io.ObjectStreamClass"/>
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.ClassNotFoundException"/>
	<c path="java.io.ObjectStreamClass"/>
	<x path="Void"/>
</f></initNonProxy>
		<readNonProxy public="1" set="method"><f a="param1">
	<c path="java.io.ObjectInputStream"/>
	<x path="Void"/>
</f></readNonProxy>
		<writeNonProxy public="1" set="method"><f a="param1">
	<c path="java.io.ObjectOutputStream"/>
	<x path="Void"/>
</f></writeNonProxy>
		<getResolveException public="1" set="method"><f a=""><c path="java.lang.ClassNotFoundException"/></f></getResolveException>
		<checkDeserialize public="1" set="method"><f a=""><x path="Void"/></f></checkDeserialize>
		<checkSerialize public="1" set="method"><f a=""><x path="Void"/></f></checkSerialize>
		<checkDefaultSerialize public="1" set="method"><f a=""><x path="Void"/></f></checkDefaultSerialize>
		<getSuperDesc public="1" set="method"><f a=""><c path="java.io.ObjectStreamClass"/></f></getSuperDesc>
		<getLocalDesc public="1" set="method"><f a=""><c path="java.io.ObjectStreamClass"/></f></getLocalDesc>
		<isProxy public="1" set="method"><f a=""><x path="Bool"/></f></isProxy>
		<isEnum public="1" set="method"><f a=""><x path="Bool"/></f></isEnum>
		<isExternalizable public="1" set="method"><f a=""><x path="Bool"/></f></isExternalizable>
		<isSerializable public="1" set="method"><f a=""><x path="Bool"/></f></isSerializable>
		<hasBlockExternalData public="1" set="method"><f a=""><x path="Bool"/></f></hasBlockExternalData>
		<hasWriteObjectData public="1" set="method"><f a=""><x path="Bool"/></f></hasWriteObjectData>
		<isInstantiable public="1" set="method"><f a=""><x path="Bool"/></f></isInstantiable>
		<hasWriteObjectMethod public="1" set="method"><f a=""><x path="Bool"/></f></hasWriteObjectMethod>
		<hasReadObjectMethod public="1" set="method"><f a=""><x path="Bool"/></f></hasReadObjectMethod>
		<hasReadObjectNoDataMethod public="1" set="method"><f a=""><x path="Bool"/></f></hasReadObjectNoDataMethod>
		<hasWriteReplaceMethod public="1" set="method"><f a=""><x path="Bool"/></f></hasWriteReplaceMethod>
		<hasReadResolveMethod public="1" set="method"><f a=""><x path="Bool"/></f></hasReadResolveMethod>
		<newInstance public="1" set="method"><f a=""><d/></f></newInstance>
		<invokeWriteObject public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.io.ObjectOutputStream"/>
	<x path="Void"/>
</f></invokeWriteObject>
		<invokeReadObject public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.io.ObjectInputStream"/>
	<x path="Void"/>
</f></invokeReadObject>
		<invokeReadObjectNoData public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></invokeReadObjectNoData>
		<invokeWriteReplace public="1" set="method"><f a="param1">
	<d/>
	<d/>
</f></invokeWriteReplace>
		<invokeReadResolve public="1" set="method"><f a="param1">
	<d/>
	<d/>
</f></invokeReadResolve>
		<getClassDataLayout public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.io.ObjectStreamClass_ClassDataSlot"/></c></f></getClassDataLayout>
		<getPrimDataSize public="1" set="method"><f a=""><x path="Int"/></f></getPrimDataSize>
		<getNumObjFields public="1" set="method"><f a=""><x path="Int"/></f></getNumObjFields>
		<getPrimFieldValues public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></getPrimFieldValues>
		<setPrimFieldValues public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></setPrimFieldValues>
		<getObjFieldValues public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.NativeArray"><d/></c>
	<x path="Void"/>
</f></getObjFieldValues>
		<setObjFieldValues public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.NativeArray"><d/></c>
	<x path="Void"/>
</f></setObjFieldValues>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass_WeakClassKey" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass$WeakClassKey.class" module="java.io.ObjectStreamClass" extern="1">
		<extends path="java.lang.ref.WeakReference"><c path="java.lang.Class"><d/></c></extends>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.ref.ReferenceQueue"><c path="java.lang.Class"><d/></c></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass$WeakClassKey"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass_MemberSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass$MemberSignature.class" module="java.io.ObjectStreamClass" extern="1">
		<member final="1" public="1"><c path="java.lang.reflect.Member"/></member>
		<name final="1" public="1"><c path="String"/></name>
		<signature final="1" public="1"><c path="String"/></signature>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.reflect.Field"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Method"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Constructor"><d/></c>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass$MemberSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass_FieldReflectorKey" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass$FieldReflectorKey.class" module="java.io.ObjectStreamClass" extern="1">
		<extends path="java.lang.ref.WeakReference"><c path="java.lang.Class"><d/></c></extends>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.Class"><d/></c>
	<c path="java.NativeArray"><c path="java.io.ObjectStreamField"/></c>
	<c path="java.lang.ref.ReferenceQueue"><c path="java.lang.Class"><d/></c></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass$FieldReflectorKey"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass_FieldReflector" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass$FieldReflector.class" module="java.io.ObjectStreamClass" extern="1">
		<getFields public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.io.ObjectStreamField"/></c></f></getFields>
		<getPrimFieldValues public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></getPrimFieldValues>
		<setPrimFieldValues public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></setPrimFieldValues>
		<getObjFieldValues public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.NativeArray"><d/></c>
	<x path="Void"/>
</f></getObjFieldValues>
		<setObjFieldValues public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.NativeArray"><d/></c>
	<x path="Void"/>
</f></setObjFieldValues>
		<new public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.io.ObjectStreamField"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass$FieldReflector"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass_ExceptionInfo" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass$ExceptionInfo.class" module="java.io.ObjectStreamClass" extern="1">
		<newInvalidClassException public="1" set="method"><f a=""><c path="java.io.InvalidClassException"/></f></newInvalidClassException>
		<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass$ExceptionInfo"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass_EntryFuture" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass$EntryFuture.class" module="java.io.ObjectStreamClass" extern="1">
		<set public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></set>
		<get public="1" set="method"><f a=""><d/></f></get>
		<getOwner public="1" set="method"><f a=""><c path="java.lang.Thread"/></f></getOwner>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.ObjectStreamClass_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass$EntryFuture"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass_EntryFuture_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass$EntryFuture$1.class" module="java.io.ObjectStreamClass" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<this_0 final="1" public="1">
			<c path="java.io.ObjectStreamClass_EntryFuture"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.ObjectStreamClass_EntryFuture"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass$EntryFuture$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass_ClassDataSlot" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass$ClassDataSlot.class" module="java.io.ObjectStreamClass" extern="1">
		<desc final="1" public="1"><c path="java.io.ObjectStreamClass"/></desc>
		<hasData final="1" public="1"><x path="Bool"/></hasData>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.ObjectStreamClass"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass$ClassDataSlot"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass_Caches" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass$Caches.class" module="java.io.ObjectStreamClass" extern="1">
		<localDescs final="1" public="1" set="null" static="1"><c path="java.util.concurrent.ConcurrentMap">
	<c path="java.io.ObjectStreamClass_WeakClassKey"/>
	<c path="java.lang.ref.Reference"><d/></c>
</c></localDescs>
		<reflectors final="1" public="1" set="null" static="1"><c path="java.util.concurrent.ConcurrentMap">
	<c path="java.io.ObjectStreamClass_FieldReflectorKey"/>
	<c path="java.lang.ref.Reference"><d/></c>
</c></reflectors>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass$Caches"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Comparator" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Comparator.class" extern="1" interface="1">
		<reverseOrder public="1" params="T" set="method" static="1">
			<f a=""><c path="java.util.Comparator"><c path="reverseOrder.T"/></c></f>
			<meta><m n=":java.default"/></meta>
		</reverseOrder>
		<naturalOrder public="1" params="T" set="method" static="1">
			<f a=""><c path="java.util.Comparator"><c path="naturalOrder.T"/></c></f>
			<meta><m n=":java.default"/></meta>
		</naturalOrder>
		<nullsFirst public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.Comparator"><d/></c>
				<c path="java.util.Comparator"><c path="nullsFirst.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</nullsFirst>
		<nullsLast public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.Comparator"><d/></c>
				<c path="java.util.Comparator"><c path="nullsLast.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</nullsLast>
		<comparing public="1" params="T:U" set="method" static="1">
			<f a="param1:param2">
				<c path="java.util.function.Function">
					<d/>
					<c path="comparing.U"/>
				</c>
				<c path="java.util.Comparator"><d/></c>
				<c path="java.util.Comparator"><c path="comparing.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><comparing public="1" params="T:U" set="method">
	<f a="param1">
		<c path="java.util.function.Function">
			<d/>
			<c path="comparing.U"/>
		</c>
		<c path="java.util.Comparator"><c path="comparing.T"/></c>
	</f>
	<meta><m n=":java.default"/></meta>
</comparing></overloads>
		</comparing>
		<comparingInt public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.function.ToIntFunction"><d/></c>
				<c path="java.util.Comparator"><c path="comparingInt.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</comparingInt>
		<comparingLong public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.function.ToLongFunction"><d/></c>
				<c path="java.util.Comparator"><c path="comparingLong.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</comparingLong>
		<comparingDouble public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.function.ToDoubleFunction"><d/></c>
				<c path="java.util.Comparator"><c path="comparingDouble.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</comparingDouble>
		<compare public="1" set="method"><f a="param1:param2">
	<c path="java.util.Comparator.T"/>
	<c path="java.util.Comparator.T"/>
	<x path="Int"/>
</f></compare>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<reversed public="1" set="method">
			<f a=""><c path="java.util.Comparator"><c path="java.util.Comparator.T"/></c></f>
			<meta><m n=":java.default"/></meta>
		</reversed>
		<thenComparing public="1" set="method">
			<f a="param1">
				<c path="java.util.Comparator"><d/></c>
				<c path="java.util.Comparator"><c path="java.util.Comparator.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads>
				<thenComparing public="1" params="U" set="method">
					<f a="param1">
						<c path="java.util.function.Function">
							<d/>
							<c path="thenComparing.U"/>
						</c>
						<c path="java.util.Comparator"><c path="java.util.Comparator.T"/></c>
					</f>
					<meta><m n=":java.default"/></meta>
				</thenComparing>
				<thenComparing public="1" params="U" set="method">
					<f a="param1:param2">
						<c path="java.util.function.Function">
							<d/>
							<c path="thenComparing.U"/>
						</c>
						<c path="java.util.Comparator"><d/></c>
						<c path="java.util.Comparator"><c path="java.util.Comparator.T"/></c>
					</f>
					<meta><m n=":java.default"/></meta>
				</thenComparing>
			</overloads>
		</thenComparing>
		<thenComparingInt public="1" set="method">
			<f a="param1">
				<c path="java.util.function.ToIntFunction"><d/></c>
				<c path="java.util.Comparator"><c path="java.util.Comparator.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</thenComparingInt>
		<thenComparingLong public="1" set="method">
			<f a="param1">
				<c path="java.util.function.ToLongFunction"><d/></c>
				<c path="java.util.Comparator"><c path="java.util.Comparator.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</thenComparingLong>
		<thenComparingDouble public="1" set="method">
			<f a="param1">
				<c path="java.util.function.ToDoubleFunction"><d/></c>
				<c path="java.util.Comparator"><c path="java.util.Comparator.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</thenComparingDouble>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.Comparator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass_5" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass$5.class" module="java.io.ObjectStreamClass" extern="1">
		<implements path="java.util.Comparator"><c path="java.io.ObjectStreamClass_MemberSignature"/></implements>
		<compare public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.ObjectStreamClass_MemberSignature"/>
				<c path="java.io.ObjectStreamClass_MemberSignature"/>
				<x path="Int"/>
			</f>
			<overloads><compare public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compare></overloads>
		</compare>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass$5"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass_4" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass$4.class" module="java.io.ObjectStreamClass" extern="1">
		<implements path="java.util.Comparator"><c path="java.io.ObjectStreamClass_MemberSignature"/></implements>
		<compare public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.ObjectStreamClass_MemberSignature"/>
				<c path="java.io.ObjectStreamClass_MemberSignature"/>
				<x path="Int"/>
			</f>
			<overloads><compare public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compare></overloads>
		</compare>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass$4"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass$3.class" module="java.io.ObjectStreamClass" extern="1">
		<implements path="java.util.Comparator"><c path="java.io.ObjectStreamClass_MemberSignature"/></implements>
		<compare public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.ObjectStreamClass_MemberSignature"/>
				<c path="java.io.ObjectStreamClass_MemberSignature"/>
				<x path="Int"/>
			</f>
			<overloads><compare public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compare></overloads>
		</compare>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass$2.class" module="java.io.ObjectStreamClass" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<val_cl final="1" public="1">
			<c path="java.lang.Class"><d/></c>
			<meta><m n=":native"><e>"val$cl"</e></m></meta>
		</val_cl>
		<this_0 final="1" public="1">
			<c path="java.io.ObjectStreamClass"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.ObjectStreamClass"/>
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamClass_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamClass$1.class" module="java.io.ObjectStreamClass" extern="1">
		<implements path="java.security.PrivilegedAction"><x path="java.lang.Long"/></implements>
		<run public="1" set="method"><f a=""><x path="java.lang.Long"/></f></run>
		<this_0 final="1" public="1">
			<c path="java.io.ObjectStreamClass"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.ObjectStreamClass"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamClass$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.ObjectStreamField" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamField.class" extern="1">
		<implements path="java.lang.Comparable"><d/></implements>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getType public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></getType>
		<getTypeCode public="1" set="method"><f a=""><t path="java.types.Char16"/></f></getTypeCode>
		<getTypeString public="1" set="method"><f a=""><c path="String"/></f></getTypeString>
		<getOffset public="1" set="method"><f a=""><x path="Int"/></f></getOffset>
		<setOffset public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setOffset>
		<isPrimitive public="1" set="method"><f a=""><x path="Bool"/></f></isPrimitive>
		<isUnshared public="1" set="method"><f a=""><x path="Bool"/></f></isUnshared>
		<compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<getField public="1" set="method"><f a=""><c path="java.lang.reflect.Field"/></f></getField>
		<getSignature public="1" set="method"><f a=""><c path="String"/></f></getSignature>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.lang.Class"><d/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.reflect.Field"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<c path="java.lang.Class"><d/></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.ObjectStreamField"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.PrintStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/PrintStream.class" extern="1">
		<extends path="java.io.FilterOutputStream"/>
		<implements path="java.lang.Appendable"/>
		<implements path="java.io.Closeable"/>
		<flush public="1" set="method" override="1"><f a=""><x path="Void"/></f></flush>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<checkError public="1" set="method"><f a=""><x path="Bool"/></f></checkError>
		<setError public="1" set="method"><f a=""><x path="Void"/></f></setError>
		<clearError public="1" set="method"><f a=""><x path="Void"/></f></clearError>
		<write public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><write public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write></overloads>
		</write>
		<print public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<overloads>
				<print public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></print>
				<print public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></print>
				<print public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Void"/>
</f></print>
				<print public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></print>
				<print public="1" set="method"><f a="param1">
	<x path="Single"/>
	<x path="Void"/>
</f></print>
				<print public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></print>
				<print public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></print>
				<print public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></print>
			</overloads>
		</print>
		<println public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<println public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<x path="Single"/>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></println>
				<println public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></println>
			</overloads>
		</println>
		<printf public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="haxe.Rest"><d/></x>
				<c path="java.io.PrintStream"/>
			</f>
			<overloads><printf public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Locale"/>
	<c path="String"/>
	<x path="haxe.Rest"><d/></x>
	<c path="java.io.PrintStream"/>
</f></printf></overloads>
		</printf>
		<format public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="haxe.Rest"><d/></x>
				<c path="java.io.PrintStream"/>
			</f>
			<overloads><format public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Locale"/>
	<c path="String"/>
	<x path="haxe.Rest"><d/></x>
	<c path="java.io.PrintStream"/>
</f></format></overloads>
		</format>
		<append public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.io.PrintStream"/>
			</f>
			<overloads>
				<append public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<c path="java.io.PrintStream"/>
</f></append>
				<append public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.io.PrintStream"/>
</f></append>
			</overloads>
		</append>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.io.OutputStream"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.File"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.io.File"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.io.OutputStream"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.OutputStream"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.PrintStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.RandomAccessFile" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/RandomAccessFile.class" extern="1">
		<implements path="java.io.DataOutput"/>
		<implements path="java.io.DataInput"/>
		<implements path="java.io.Closeable"/>
		<getFD final="1" public="1" set="method"><f a=""><c path="java.io.FileDescriptor"/></f></getFD>
		<getChannel final="1" public="1" set="method"><f a=""><c path="java.nio.channels.FileChannel"/></f></getChannel>
		<read public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads>
				<read public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
</f></read>
				<read public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></read>
			</overloads>
		</read>
		<readFully final="1" public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<overloads><readFully final="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readFully></overloads>
		</readFully>
		<skipBytes public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></skipBytes>
		<write public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<write public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></write>
				<write public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></write>
			</overloads>
		</write>
		<getFilePointer public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getFilePointer>
		<seek public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></seek>
		<length public="1" set="method"><f a=""><x path="haxe.Int64"/></f></length>
		<setLength public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setLength>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<readBoolean final="1" public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte final="1" public="1" set="method"><f a=""><t path="java.types.Int8"/></f></readByte>
		<readUnsignedByte final="1" public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedByte>
		<readShort final="1" public="1" set="method"><f a=""><t path="java.types.Int16"/></f></readShort>
		<readUnsignedShort final="1" public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedShort>
		<readChar final="1" public="1" set="method"><f a=""><t path="java.types.Char16"/></f></readChar>
		<readInt final="1" public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readLong final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></readLong>
		<readFloat final="1" public="1" set="method"><f a=""><x path="Single"/></f></readFloat>
		<readDouble final="1" public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readLine final="1" public="1" set="method"><f a=""><c path="String"/></f></readLine>
		<readUTF final="1" public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<writeBoolean final="1" public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeShort final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeChar final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeChar>
		<writeInt final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeLong final="1" public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></writeLong>
		<writeFloat final="1" public="1" set="method"><f a="param1">
	<x path="Single"/>
	<x path="Void"/>
</f></writeFloat>
		<writeDouble final="1" public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeBytes final="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></writeBytes>
		<writeChars final="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></writeChars>
		<writeUTF final="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.io.File"/>
	<c path="String"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.RandomAccessFile"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.RandomAccessFile_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/RandomAccessFile$1.class" module="java.io.RandomAccessFile" extern="1">
		<implements path="java.io.Closeable"/>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<this_0 final="1" public="1">
			<c path="java.io.RandomAccessFile"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.RandomAccessFile"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.io.RandomAccessFile$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.Guard" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Guard.class" extern="1" interface="1">
		<checkGuard public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></checkGuard>
		<meta>
			<m n=":native"><e>"java.security.Guard"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.Permission" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Permission.class" extern="1" abstract="1">
		<implements path="java.security.Guard"/>
		<implements path="java.io.Serializable"/>
		<checkGuard public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></checkGuard>
		<implies abstract="1" public="1" set="method"><f a="param1">
	<c path="java.security.Permission"/>
	<x path="Bool"/>
</f></implies>
		<equals abstract="1" public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<getName final="1" public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getActions abstract="1" public="1" set="method"><f a=""><c path="String"/></f></getActions>
		<newPermissionCollection public="1" set="method"><f a=""><c path="java.security.PermissionCollection"/></f></newPermissionCollection>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.Permission"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.BasicPermission" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/BasicPermission.class" extern="1" abstract="1">
		<extends path="java.security.Permission"/>
		<implements path="java.io.Serializable"/>
		<implies public="1" set="method" override="1"><f a="param1">
	<c path="java.security.Permission"/>
	<x path="Bool"/>
</f></implies>
		<equals public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method" override="1"><f a=""><x path="Int"/></f></hashCode>
		<getActions public="1" set="method" override="1"><f a=""><c path="String"/></f></getActions>
		<newPermissionCollection public="1" set="method" override="1"><f a=""><c path="java.security.PermissionCollection"/></f></newPermissionCollection>
		<getCanonicalName final="1" public="1" set="method"><f a=""><c path="String"/></f></getCanonicalName>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.security.BasicPermission"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.io.SerializablePermission" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/io/SerializablePermission.class" extern="1">
		<extends path="java.security.BasicPermission"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.io.SerializablePermission"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.net.ServerSocketFactory" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/net/ServerSocketFactory.class" extern="1" abstract="1">
		<getDefault public="1" set="method" static="1"><f a=""><c path="java.javax.net.ServerSocketFactory"/></f></getDefault>
		<createServerSocket public="1" set="method">
			<f a=""><c path="java.net.ServerSocket"/></f>
			<overloads>
				<createServerSocket abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.net.InetAddress"/>
	<c path="java.net.ServerSocket"/>
</f></createServerSocket>
				<createServerSocket abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.net.ServerSocket"/>
</f></createServerSocket>
				<createServerSocket abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.net.ServerSocket"/>
</f></createServerSocket>
			</overloads>
		</createServerSocket>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"javax.net.ServerSocketFactory"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.net.SocketFactory" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/net/SocketFactory.class" extern="1" abstract="1">
		<getDefault public="1" set="method" static="1"><f a=""><c path="java.javax.net.SocketFactory"/></f></getDefault>
		<createSocket public="1" set="method">
			<f a=""><c path="java.net.Socket"/></f>
			<overloads>
				<createSocket abstract="1" public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<c path="java.net.Socket"/>
</f></createSocket>
				<createSocket abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<c path="java.net.Socket"/>
</f></createSocket>
				<createSocket abstract="1" public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="String"/>
	<x path="Int"/>
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<c path="java.net.Socket"/>
</f></createSocket>
				<createSocket abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<c path="java.net.Socket"/>
</f></createSocket>
			</overloads>
		</createSocket>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"javax.net.SocketFactory"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.net.ssl.SSLServerSocketFactory" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/net/ssl/SSLServerSocketFactory.class" extern="1" abstract="1">
		<extends path="java.javax.net.ServerSocketFactory"/>
		<getDefault public="1" set="method" static="1"><f a=""><c path="java.javax.net.ServerSocketFactory"/></f></getDefault>
		<getDefaultCipherSuites abstract="1" public="1" set="method"><f a=""><c path="java.NativeArray"><c path="String"/></c></f></getDefaultCipherSuites>
		<getSupportedCipherSuites abstract="1" public="1" set="method"><f a=""><c path="java.NativeArray"><c path="String"/></c></f></getSupportedCipherSuites>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"javax.net.ssl.SSLServerSocketFactory"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.net.ssl.SSLSocketFactory" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/net/ssl/SSLSocketFactory.class" extern="1" abstract="1">
		<extends path="java.javax.net.SocketFactory"/>
		<getDefault public="1" set="method" static="1"><f a=""><c path="java.javax.net.SocketFactory"/></f></getDefault>
		<getSecurityProperty public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></getSecurityProperty>
		<DEBUG final="1" public="1" set="null" static="1"><x path="Bool"/></DEBUG>
		<getDefaultCipherSuites abstract="1" public="1" set="method"><f a=""><c path="java.NativeArray"><c path="String"/></c></f></getDefaultCipherSuites>
		<getSupportedCipherSuites abstract="1" public="1" set="method"><f a=""><c path="java.NativeArray"><c path="String"/></c></f></getSupportedCipherSuites>
		<createSocket abstract="1" public="1" set="method" override="1">
			<f a="param1:param2:param3:param4">
				<c path="java.net.Socket"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="java.net.Socket"/>
			</f>
			<overloads><createSocket public="1" set="method"><f a="param1:param2:param3">
	<c path="java.net.Socket"/>
	<c path="java.io.InputStream"/>
	<x path="Bool"/>
	<c path="java.net.Socket"/>
</f></createSocket></overloads>
		</createSocket>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"javax.net.ssl.SSLSocketFactory"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.net.ssl.SSLSocketFactory_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/net/ssl/SSLSocketFactory$1.class" module="java.javax.net.ssl.SSLSocketFactory" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="String"/></implements>
		<run public="1" set="method"><f a=""><c path="String"/></f></run>
		<val_name final="1" public="1">
			<c path="String"/>
			<meta><m n=":native"><e>"val$name"</e></m></meta>
		</val_name>
		<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"javax.net.ssl.SSLSocketFactory$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.security.auth.AuthPermission" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/security/auth/AuthPermission.class" extern="1">
		<extends path="java.security.BasicPermission"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"javax.security.auth.AuthPermission"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.security.auth.Subject" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/security/auth/Subject.class" extern="1">
		<implements path="java.io.Serializable"/>
		<getSubject public="1" set="method" static="1"><f a="param1">
	<c path="java.security.AccessControlContext"/>
	<c path="java.javax.security.auth.Subject"/>
</f></getSubject>
		<doAs public="1" params="T" set="method" static="1">
			<f a="param1:param2">
				<c path="java.javax.security.auth.Subject"/>
				<c path="java.security.PrivilegedAction"><c path="doAs.T"/></c>
				<c path="doAs.T"/>
			</f>
			<overloads><doAs public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.javax.security.auth.Subject"/>
	<c path="java.security.PrivilegedExceptionAction"><c path="doAs.T"/></c>
	<c path="doAs.T"/>
</f></doAs></overloads>
		</doAs>
		<doAsPrivileged public="1" params="T" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.javax.security.auth.Subject"/>
				<c path="java.security.PrivilegedAction"><c path="doAsPrivileged.T"/></c>
				<c path="java.security.AccessControlContext"/>
				<c path="doAsPrivileged.T"/>
			</f>
			<overloads><doAsPrivileged public="1" params="T" set="method"><f a="param1:param2:param3">
	<c path="java.javax.security.auth.Subject"/>
	<c path="java.security.PrivilegedExceptionAction"><c path="doAsPrivileged.T"/></c>
	<c path="java.security.AccessControlContext"/>
	<c path="doAsPrivileged.T"/>
</f></doAsPrivileged></overloads>
		</doAsPrivileged>
		<setReadOnly public="1" set="method"><f a=""><x path="Void"/></f></setReadOnly>
		<isReadOnly public="1" set="method"><f a=""><x path="Bool"/></f></isReadOnly>
		<getPrincipals public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.security.Principal"/></c></f>
			<overloads><getPrincipals public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getPrincipals.T"/></c>
	<c path="java.util.Set"><c path="getPrincipals.T"/></c>
</f></getPrincipals></overloads>
		</getPrincipals>
		<getPublicCredentials public="1" set="method">
			<f a=""><c path="java.util.Set"><d/></c></f>
			<overloads><getPublicCredentials public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getPublicCredentials.T"/></c>
	<c path="java.util.Set"><c path="getPublicCredentials.T"/></c>
</f></getPublicCredentials></overloads>
		</getPublicCredentials>
		<getPrivateCredentials public="1" set="method">
			<f a=""><c path="java.util.Set"><d/></c></f>
			<overloads><getPrivateCredentials public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getPrivateCredentials.T"/></c>
	<c path="java.util.Set"><c path="getPrivateCredentials.T"/></c>
</f></getPrivateCredentials></overloads>
		</getPrivateCredentials>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><toString public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<c path="String"/>
</f></toString></overloads>
		</toString>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<principals public="1"><c path="java.util.Set"><c path="java.security.Principal"/></c></principals>
		<pubCredentials public="1"><c path="java.util.Set"><d/></c></pubCredentials>
		<privCredentials public="1"><c path="java.util.Set"><d/></c></privCredentials>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Bool"/>
	<c path="java.util.Set"><c path="java.security.Principal"/></c>
	<c path="java.util.Set"><d/></c>
	<c path="java.util.Set"><d/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"javax.security.auth.Subject"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Iterable" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Iterable.class" extern="1" interface="1">
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.lang.Iterable.T"/></c></f></iterator>
		<forEach public="1" set="method">
			<f a="param1">
				<c path="java.util.function.Consumer"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</forEach>
		<spliterator public="1" set="method">
			<f a=""><c path="java.util.Spliterator"><c path="java.lang.Iterable.T"/></c></f>
			<meta><m n=":java.default"/></meta>
		</spliterator>
		<meta>
			<m n=":native"><e>"java.lang.Iterable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collection" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collection.class" extern="1" interface="1">
		<extends path="java.lang.Iterable"><c path="java.util.Collection.E"/></extends>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<contains public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.Collection.E"/></c></f></iterator>
		<toArray public="1" set="method">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<add public="1" set="method"><f a="param1">
	<c path="java.util.Collection.E"/>
	<x path="Bool"/>
</f></add>
		<remove public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<containsAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></containsAll>
		<addAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><c path="java.util.Collection.E"/></c>
	<x path="Bool"/>
</f></addAll>
		<removeAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></removeAll>
		<removeIf public="1" set="method">
			<f a="param1">
				<c path="java.util.function.Predicate"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</removeIf>
		<retainAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></retainAll>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<spliterator public="1" set="method">
			<f a=""><c path="java.util.Spliterator"><c path="java.util.Collection.E"/></c></f>
			<meta><m n=":java.default"/></meta>
		</spliterator>
		<stream public="1" set="method">
			<f a=""><c path="java.util.stream.Stream"><c path="java.util.Collection.E"/></c></f>
			<meta><m n=":java.default"/></meta>
		</stream>
		<parallelStream public="1" set="method">
			<f a=""><c path="java.util.stream.Stream"><c path="java.util.Collection.E"/></c></f>
			<meta><m n=":java.default"/></meta>
		</parallelStream>
		<meta>
			<m n=":native"><e>"java.util.Collection"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractCollection" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractCollection.class" extern="1" abstract="1">
		<implements path="java.util.Collection"><c path="java.util.AbstractCollection.E"/></implements>
		<iterator abstract="1" public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.AbstractCollection.E"/></c></f></iterator>
		<size abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<contains public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<toArray public="1" set="method">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<add public="1" set="method"><f a="param1">
	<c path="java.util.AbstractCollection.E"/>
	<x path="Bool"/>
</f></add>
		<remove public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<containsAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></containsAll>
		<addAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><c path="java.util.AbstractCollection.E"/></c>
	<x path="Bool"/>
</f></addAll>
		<removeAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></removeAll>
		<retainAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></retainAll>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.AbstractCollection"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Set" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Set.class" extern="1" interface="1">
		<extends path="java.util.Collection"><c path="java.util.Set.E"/></extends>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<contains public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.Set.E"/></c></f></iterator>
		<toArray public="1" set="method">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<add public="1" set="method"><f a="param1">
	<c path="java.util.Set.E"/>
	<x path="Bool"/>
</f></add>
		<remove public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<containsAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></containsAll>
		<addAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><c path="java.util.Set.E"/></c>
	<x path="Bool"/>
</f></addAll>
		<retainAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></retainAll>
		<removeAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></removeAll>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<spliterator public="1" set="method">
			<f a=""><c path="java.util.Spliterator"><c path="java.util.Set.E"/></c></f>
			<meta><m n=":java.default"/></meta>
		</spliterator>
		<meta>
			<m n=":native"><e>"java.util.Set"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractSet.class" extern="1" abstract="1">
		<extends path="java.util.AbstractCollection"><c path="java.util.AbstractSet.E"/></extends>
		<implements path="java.util.Set"><c path="java.util.AbstractSet.E"/></implements>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<removeAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></removeAll>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.AbstractSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.security.auth.Subject_SecureSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/security/auth/Subject$SecureSet.class" module="java.javax.security.auth.Subject" extern="1">
		<extends path="java.util.AbstractSet"><c path="java.javax.security.auth.Subject_SecureSet.E"/></extends>
		<implements path="java.io.Serializable"/>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.javax.security.auth.Subject_SecureSet.E"/></c></f></iterator>
		<add public="1" set="method" override="1"><f a="param1">
	<c path="java.javax.security.auth.Subject_SecureSet.E"/>
	<x path="Bool"/>
</f></add>
		<remove public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<removeAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></removeAll>
		<retainAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></retainAll>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<subject public="1"><c path="java.javax.security.auth.Subject"/></subject>
		<elements public="1"><c path="java.util.LinkedList"><c path="java.javax.security.auth.Subject_SecureSet.E"/></c></elements>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.javax.security.auth.Subject"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.javax.security.auth.Subject"/>
	<x path="Int"/>
	<c path="java.util.Set"><c path="java.javax.security.auth.Subject_SecureSet.E"/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"javax.security.auth.Subject$SecureSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.security.auth.Subject_SecureSet_6" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/security/auth/Subject$SecureSet$6.class" module="java.javax.security.auth.Subject" extern="1">
		<implements path="java.security.PrivilegedAction"><d/></implements>
		<run public="1" set="method"><f a=""><d/></f></run>
		<val_e final="1" public="1">
			<c path="java.util.Iterator"><d/></c>
			<meta><m n=":native"><e>"val$e"</e></m></meta>
		</val_e>
		<this_0 final="1" public="1">
			<c path="java.javax.security.auth.Subject_SecureSet"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.javax.security.auth.Subject_SecureSet"><d/></c>
	<c path="java.util.Iterator"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"javax.security.auth.Subject$SecureSet$6"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.security.auth.Subject_SecureSet_5" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/security/auth/Subject$SecureSet$5.class" module="java.javax.security.auth.Subject" extern="1">
		<implements path="java.security.PrivilegedAction"><d/></implements>
		<run public="1" set="method"><f a=""><d/></f></run>
		<val_e final="1" public="1">
			<c path="java.util.Iterator"><d/></c>
			<meta><m n=":native"><e>"val$e"</e></m></meta>
		</val_e>
		<this_0 final="1" public="1">
			<c path="java.javax.security.auth.Subject_SecureSet"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.javax.security.auth.Subject_SecureSet"><d/></c>
	<c path="java.util.Iterator"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"javax.security.auth.Subject$SecureSet$5"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.security.auth.Subject_SecureSet_4" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/security/auth/Subject$SecureSet$4.class" module="java.javax.security.auth.Subject" extern="1">
		<implements path="java.security.PrivilegedAction"><d/></implements>
		<run public="1" set="method"><f a=""><d/></f></run>
		<val_e final="1" public="1">
			<c path="java.util.Iterator"><d/></c>
			<meta><m n=":native"><e>"val$e"</e></m></meta>
		</val_e>
		<this_0 final="1" public="1">
			<c path="java.javax.security.auth.Subject_SecureSet"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.javax.security.auth.Subject_SecureSet"><d/></c>
	<c path="java.util.Iterator"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"javax.security.auth.Subject$SecureSet$4"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.security.auth.Subject_SecureSet_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/security/auth/Subject$SecureSet$3.class" module="java.javax.security.auth.Subject" extern="1">
		<implements path="java.security.PrivilegedAction"><d/></implements>
		<run public="1" set="method"><f a=""><d/></f></run>
		<val_e final="1" public="1">
			<c path="java.util.Iterator"><d/></c>
			<meta><m n=":native"><e>"val$e"</e></m></meta>
		</val_e>
		<this_0 final="1" public="1">
			<c path="java.javax.security.auth.Subject_SecureSet"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.javax.security.auth.Subject_SecureSet"><d/></c>
	<c path="java.util.Iterator"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"javax.security.auth.Subject$SecureSet$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.security.auth.Subject_SecureSet_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/security/auth/Subject$SecureSet$2.class" module="java.javax.security.auth.Subject" extern="1">
		<implements path="java.security.PrivilegedAction"><d/></implements>
		<run public="1" set="method"><f a=""><d/></f></run>
		<val_e final="1" public="1">
			<c path="java.util.Iterator"><d/></c>
			<meta><m n=":native"><e>"val$e"</e></m></meta>
		</val_e>
		<this_0 final="1" public="1">
			<c path="java.javax.security.auth.Subject_SecureSet"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.javax.security.auth.Subject_SecureSet"><d/></c>
	<c path="java.util.Iterator"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"javax.security.auth.Subject$SecureSet$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.security.auth.Subject_SecureSet_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/security/auth/Subject$SecureSet$1.class" module="java.javax.security.auth.Subject" extern="1">
		<implements path="java.util.Iterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<i public="1"><c path="java.util.ListIterator"><d/></c></i>
		<val_list final="1" public="1">
			<c path="java.util.LinkedList"><d/></c>
			<meta><m n=":native"><e>"val$list"</e></m></meta>
		</val_list>
		<this_0 final="1" public="1">
			<c path="java.javax.security.auth.Subject_SecureSet"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.javax.security.auth.Subject_SecureSet"><d/></c>
	<c path="java.util.LinkedList"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"javax.security.auth.Subject$SecureSet$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.security.auth.Subject_ClassSet" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/security/auth/Subject$ClassSet.class" module="java.javax.security.auth.Subject" extern="1">
		<extends path="java.util.AbstractSet"><c path="java.javax.security.auth.Subject_ClassSet.T"/></extends>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.javax.security.auth.Subject_ClassSet.T"/></c></f></iterator>
		<add public="1" set="method" override="1"><f a="param1">
	<c path="java.javax.security.auth.Subject_ClassSet.T"/>
	<x path="Bool"/>
</f></add>
		<this_0 final="1" public="1">
			<c path="java.javax.security.auth.Subject"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.lang.Class"><c path="java.javax.security.auth.Subject_ClassSet.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"javax.security.auth.Subject$ClassSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.security.auth.Subject_ClassSet_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/security/auth/Subject$ClassSet$1.class" module="java.javax.security.auth.Subject" extern="1">
		<implements path="java.security.PrivilegedAction"><d/></implements>
		<run public="1" set="method"><f a=""><d/></f></run>
		<val_iterator final="1" public="1">
			<c path="java.util.Iterator"><d/></c>
			<meta><m n=":native"><e>"val$iterator"</e></m></meta>
		</val_iterator>
		<this_1 final="1" public="1">
			<c path="java.javax.security.auth.Subject_ClassSet"><d/></c>
			<meta><m n=":native"><e>"this$1"</e></m></meta>
		</this_1>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.javax.security.auth.Subject_ClassSet"><d/></c>
	<c path="java.util.Iterator"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"javax.security.auth.Subject$ClassSet$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.security.auth.Subject_AuthPermissionHolder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/security/auth/Subject$AuthPermissionHolder.class" module="java.javax.security.auth.Subject" extern="1">
		<DO_AS_PERMISSION final="1" public="1" set="null" static="1"><c path="java.javax.security.auth.AuthPermission"/></DO_AS_PERMISSION>
		<DO_AS_PRIVILEGED_PERMISSION final="1" public="1" set="null" static="1"><c path="java.javax.security.auth.AuthPermission"/></DO_AS_PRIVILEGED_PERMISSION>
		<SET_READ_ONLY_PERMISSION final="1" public="1" set="null" static="1"><c path="java.javax.security.auth.AuthPermission"/></SET_READ_ONLY_PERMISSION>
		<GET_SUBJECT_PERMISSION final="1" public="1" set="null" static="1"><c path="java.javax.security.auth.AuthPermission"/></GET_SUBJECT_PERMISSION>
		<MODIFY_PRINCIPALS_PERMISSION final="1" public="1" set="null" static="1"><c path="java.javax.security.auth.AuthPermission"/></MODIFY_PRINCIPALS_PERMISSION>
		<MODIFY_PUBLIC_CREDENTIALS_PERMISSION final="1" public="1" set="null" static="1"><c path="java.javax.security.auth.AuthPermission"/></MODIFY_PUBLIC_CREDENTIALS_PERMISSION>
		<MODIFY_PRIVATE_CREDENTIALS_PERMISSION final="1" public="1" set="null" static="1"><c path="java.javax.security.auth.AuthPermission"/></MODIFY_PRIVATE_CREDENTIALS_PERMISSION>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"javax.security.auth.Subject$AuthPermissionHolder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.security.auth.Subject_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/security/auth/Subject$2.class" module="java.javax.security.auth.Subject" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.security.AccessControlContext"/></implements>
		<run public="1" set="method"><f a=""><c path="java.security.AccessControlContext"/></f></run>
		<val_subject final="1" public="1">
			<c path="java.javax.security.auth.Subject"/>
			<meta><m n=":native"><e>"val$subject"</e></m></meta>
		</val_subject>
		<val_acc final="1" public="1">
			<c path="java.security.AccessControlContext"/>
			<meta><m n=":native"><e>"val$acc"</e></m></meta>
		</val_acc>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.javax.security.auth.Subject"/>
	<c path="java.security.AccessControlContext"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"javax.security.auth.Subject$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.javax.security.auth.Subject_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@javax/security/auth/Subject$1.class" module="java.javax.security.auth.Subject" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.javax.security.auth.Subject"/></implements>
		<run public="1" set="method"><f a=""><c path="java.javax.security.auth.Subject"/></f></run>
		<val_acc final="1" public="1">
			<c path="java.security.AccessControlContext"/>
			<meta><m n=":native"><e>"val$acc"</e></m></meta>
		</val_acc>
		<new public="1" set="method"><f a="param1">
	<c path="java.security.AccessControlContext"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"javax.security.auth.Subject$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.AbstractStringBuilder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/AbstractStringBuilder.class" extern="1" abstract="1">
		<implements path="java.lang.Appendable"/>
		<implements path="java.lang.CharSequence"/>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<capacity public="1" set="method"><f a=""><x path="Int"/></f></capacity>
		<ensureCapacity public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></ensureCapacity>
		<expandCapacity public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></expandCapacity>
		<trimToSize public="1" set="method"><f a=""><x path="Void"/></f></trimToSize>
		<setLength public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setLength>
		<charAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<t path="java.types.Char16"/>
</f></charAt>
		<codePointAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointAt>
		<codePointBefore public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointBefore>
		<codePointCount public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></codePointCount>
		<offsetByCodePoints public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></offsetByCodePoints>
		<getChars public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></getChars>
		<setCharAt public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></setCharAt>
		<append public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.lang.AbstractStringBuilder"/>
			</f>
			<overloads>
				<append public="1" set="method"><f a="param1">
	<x path="Float"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<x path="Single"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<c path="java.lang.AbstractStringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<c path="java.lang.AbstractStringBuilder"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<c path="java.lang.StringBuffer"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></append>
			</overloads>
		</append>
		<delete public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></delete>
		<appendCodePoint public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></appendCodePoint>
		<deleteCharAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></deleteCharAt>
		<replace public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></replace>
		<substring public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<overloads><substring public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></substring></overloads>
		</substring>
		<subSequence public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
</f></subSequence>
		<insert public="1" set="method">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.AbstractStringBuilder"/>
			</f>
			<overloads>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Float"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Single"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<t path="java.types.Char16"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Bool"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<c path="java.lang.AbstractStringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="String"/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<d/>
	<c path="java.lang.AbstractStringBuilder"/>
</f></insert>
			</overloads>
		</insert>
		<indexOf public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<overloads><indexOf public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf></overloads>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<overloads><lastIndexOf public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf></overloads>
		</lastIndexOf>
		<reverse public="1" set="method"><f a=""><c path="java.lang.AbstractStringBuilder"/></f></reverse>
		<toString abstract="1" public="1" set="method"><f a=""><c path="String"/></f></toString>
		<getValue final="1" public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Char16"/></c></f></getValue>
		<value public="1"><c path="java.NativeArray"><t path="java.types.Char16"/></c></value>
		<count public="1"><x path="Int"/></count>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.AbstractStringBuilder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<abstract path="java.lang.Boolean" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Boolean.hx">
		<from>
			<icast><c path="java.lang.BooleanClass"/></icast>
			<icast field="fromBool"><x path="Bool"/></icast>
		</from>
		<this><c path="java.lang.BooleanClass"/></this>
		<to>
			<icast><c path="java.lang.BooleanClass"/></icast>
			<icast field="toBool"><x path="Bool"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":transitive"/>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Boolean.Boolean_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Boolean.hx" private="1" module="java.lang.Boolean" final="1">
	<toBool public="1" get="inline" set="null" line="30" static="1">
		<f a="this">
			<c path="java.lang.BooleanClass"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":to"/></meta>
	</toBool>
	<fromBool public="1" get="inline" set="null" line="33" static="1">
		<f a="b">
			<x path="Bool"/>
			<x path="java.lang.Boolean"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromBool>
	<meta><m n=":native"><e>""</e></m></meta>
</class></impl>
	</abstract>
	<class path="java.lang._Boolean.Boolean_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Boolean.hx" private="1" module="java.lang.Boolean" final="1">
		<toBool public="1" get="inline" set="null" line="30" static="1">
			<f a="this">
				<c path="java.lang.BooleanClass"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":to"/></meta>
		</toBool>
		<fromBool public="1" get="inline" set="null" line="33" static="1">
			<f a="b">
				<x path="Bool"/>
				<x path="java.lang.Boolean"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromBool>
		<meta><m n=":native"><e>""</e></m></meta>
	</class>
	<abstract path="java.lang.Byte" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Byte.hx">
		<from>
			<icast><c path="java.lang.ByteClass"/></icast>
			<icast field="fromByte"><t path="java.types.Int8"/></icast>
		</from>
		<this><c path="java.lang.ByteClass"/></this>
		<to>
			<icast><c path="java.lang.ByteClass"/></icast>
			<icast field="toByte"><x path="java.Int8"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":transitive"/>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Byte.Byte_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Byte.hx" private="1" module="java.lang.Byte" final="1">
	<toByte public="1" get="inline" set="null" line="30" static="1">
		<f a="this">
			<c path="java.lang.ByteClass"/>
			<t path="java.types.Int8"/>
		</f>
		<meta><m n=":to"/></meta>
	</toByte>
	<fromByte public="1" get="inline" set="null" line="33" static="1">
		<f a="b">
			<t path="java.types.Int8"/>
			<x path="java.lang.Byte"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromByte>
	<meta><m n=":native"><e>""</e></m></meta>
</class></impl>
	</abstract>
	<class path="java.lang._Byte.Byte_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Byte.hx" private="1" module="java.lang.Byte" final="1">
		<toByte public="1" get="inline" set="null" line="30" static="1">
			<f a="this">
				<c path="java.lang.ByteClass"/>
				<t path="java.types.Int8"/>
			</f>
			<meta><m n=":to"/></meta>
		</toByte>
		<fromByte public="1" get="inline" set="null" line="33" static="1">
			<f a="b">
				<t path="java.types.Int8"/>
				<x path="java.lang.Byte"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromByte>
		<meta><m n=":native"><e>""</e></m></meta>
	</class>
	<class path="java.lang.ByteClass" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Byte.hx" module="java.lang.Byte" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Byte"/></implements>
		<MAX_VALUE final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></MAX_VALUE>
		<MIN_VALUE final="1" public="1" set="null" static="1"><t path="java.types.Int8"/></MIN_VALUE>
		<SIZE final="1" public="1" set="null" static="1"><x path="Int"/></SIZE>
		<TYPE final="1" public="1" set="null" static="1"><c path="java.lang.Class"><x path="java.lang.Byte"/></c></TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Int8"/>
				<t path="java.types.Int8"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<decode public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Byte"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</decode>
		<parseByte public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<t path="java.types.Int8"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><parseByte public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<t path="java.types.Int8"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</parseByte></overloads>
		</parseByte>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Int8"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Int8"/>
				<x path="java.lang.Byte"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<valueOf public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="java.lang.Byte"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Byte"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
			</overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Byte"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<doubleValue public="1" set="method" override="1"><f a=""><x path="Float"/></f></doubleValue>
		<floatValue public="1" set="method" override="1"><f a=""><x path="Single"/></f></floatValue>
		<intValue public="1" set="method" override="1"><f a=""><x path="Int"/></f></intValue>
		<longValue public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></longValue>
		<new public="1" set="method">
			<f a="param1">
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Byte"</e></m>
		</meta>
	</class>
	<class path="java.lang.Byte_ByteCache" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Byte.hx" module="java.lang.Byte" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Byte$ByteCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Byte.ByteCache"</e>
	</m>
</meta></class>
	<class path="java.util.PrimitiveIterator" params="T:T_CONS" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/PrimitiveIterator.class" extern="1" interface="1">
		<extends path="java.util.Iterator"><c path="java.util.PrimitiveIterator.T"/></extends>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.PrimitiveIterator.T_CONS"/>
	<x path="Void"/>
</f></forEachRemaining>
		<meta>
			<m n=":native"><e>"java.util.PrimitiveIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.PrimitiveIterator_OfInt" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/PrimitiveIterator$OfInt.class" module="java.util.PrimitiveIterator" extern="1" interface="1">
		<extends path="java.util.PrimitiveIterator">
			<x path="java.lang.Integer"/>
			<c path="java.util.function.IntConsumer"/>
		</extends>
		<nextInt public="1" set="method"><f a=""><x path="Int"/></f></nextInt>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntConsumer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads>
				<forEachRemaining public="1" set="method">
					<f a="param1">
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</forEachRemaining>
				<forEachRemaining public="1" set="method">
					<f a="param1">
						<c path="java.util.function.Consumer"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</forEachRemaining>
			</overloads>
		</forEachRemaining>
		<next public="1" set="method">
			<f a=""><x path="java.lang.Integer"/></f>
			<meta><m n=":java.default"/></meta>
		</next>
		<meta>
			<m n=":native"><e>"java.util.PrimitiveIterator$OfInt"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.CharSequence_1CodePointIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/CharSequence$1CodePointIterator.class" module="java.lang.CharSequence" extern="1">
		<implements path="java.util.PrimitiveIterator_OfInt"/>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntConsumer"/>
				<x path="Void"/>
			</f>
			<overloads><forEachRemaining public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></forEachRemaining></overloads>
		</forEachRemaining>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<nextInt public="1" set="method"><f a=""><x path="Int"/></f></nextInt>
		<cur public="1"><x path="Int"/></cur>
		<this_0 final="1" public="1">
			<c path="java.lang.CharSequence"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.CharSequence$1CodePointIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.CharSequence_1CharIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/CharSequence$1CharIterator.class" module="java.lang.CharSequence" extern="1">
		<implements path="java.util.PrimitiveIterator_OfInt"/>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<nextInt public="1" set="method"><f a=""><x path="Int"/></f></nextInt>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntConsumer"/>
				<x path="Void"/>
			</f>
			<overloads><forEachRemaining public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></forEachRemaining></overloads>
		</forEachRemaining>
		<cur public="1"><x path="Int"/></cur>
		<this_0 final="1" public="1">
			<c path="java.lang.CharSequence"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.CharSequence$1CharIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<abstract path="java.lang.Character" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Character.hx">
		<from>
			<icast><c path="java.lang.CharacterClass"/></icast>
			<icast field="fromCharacter"><t path="java.types.Char16"/></icast>
		</from>
		<this><c path="java.lang.CharacterClass"/></this>
		<to>
			<icast><c path="java.lang.CharacterClass"/></icast>
			<icast field="toCharacter"><x path="java.Char16"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":transitive"/>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Character.Character_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Character.hx" private="1" module="java.lang.Character" final="1">
	<toCharacter public="1" get="inline" set="null" line="30" static="1">
		<f a="this">
			<c path="java.lang.CharacterClass"/>
			<t path="java.types.Char16"/>
		</f>
		<meta><m n=":to"/></meta>
	</toCharacter>
	<fromCharacter public="1" get="inline" set="null" line="33" static="1">
		<f a="b">
			<t path="java.types.Char16"/>
			<x path="java.lang.Character"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromCharacter>
	<meta><m n=":native"><e>""</e></m></meta>
</class></impl>
	</abstract>
	<class path="java.lang._Character.Character_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Character.hx" private="1" module="java.lang.Character" final="1">
		<toCharacter public="1" get="inline" set="null" line="30" static="1">
			<f a="this">
				<c path="java.lang.CharacterClass"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":to"/></meta>
		</toCharacter>
		<fromCharacter public="1" get="inline" set="null" line="33" static="1">
			<f a="b">
				<t path="java.types.Char16"/>
				<x path="java.lang.Character"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromCharacter>
		<meta><m n=":native"><e>""</e></m></meta>
	</class>
	<class path="java.lang.CharacterClass" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Character.hx" module="java.lang.Character" extern="1">
		<implements path="java.lang.Comparable"><x path="java.lang.Character"/></implements>
		<COMBINING_SPACING_MARK final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></COMBINING_SPACING_MARK>
		<CONNECTOR_PUNCTUATION final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></CONNECTOR_PUNCTUATION>
		<CONTROL final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></CONTROL>
		<CURRENCY_SYMBOL final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></CURRENCY_SYMBOL>
		<DASH_PUNCTUATION final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DASH_PUNCTUATION>
		<DECIMAL_DIGIT_NUMBER final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DECIMAL_DIGIT_NUMBER>
		<DIRECTIONALITY_ARABIC_NUMBER final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_ARABIC_NUMBER>
		<DIRECTIONALITY_BOUNDARY_NEUTRAL final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_BOUNDARY_NEUTRAL>
		<DIRECTIONALITY_COMMON_NUMBER_SEPARATOR final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_COMMON_NUMBER_SEPARATOR>
		<DIRECTIONALITY_EUROPEAN_NUMBER final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_EUROPEAN_NUMBER>
		<DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR>
		<DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR>
		<DIRECTIONALITY_LEFT_TO_RIGHT final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_LEFT_TO_RIGHT>
		<DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING>
		<DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE>
		<DIRECTIONALITY_NONSPACING_MARK final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_NONSPACING_MARK>
		<DIRECTIONALITY_OTHER_NEUTRALS final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_OTHER_NEUTRALS>
		<DIRECTIONALITY_PARAGRAPH_SEPARATOR final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_PARAGRAPH_SEPARATOR>
		<DIRECTIONALITY_POP_DIRECTIONAL_FORMAT final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_POP_DIRECTIONAL_FORMAT>
		<DIRECTIONALITY_RIGHT_TO_LEFT final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_RIGHT_TO_LEFT>
		<DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC>
		<DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING>
		<DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE>
		<DIRECTIONALITY_SEGMENT_SEPARATOR final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_SEGMENT_SEPARATOR>
		<DIRECTIONALITY_UNDEFINED final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_UNDEFINED>
		<DIRECTIONALITY_WHITESPACE final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DIRECTIONALITY_WHITESPACE>
		<ENCLOSING_MARK final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></ENCLOSING_MARK>
		<END_PUNCTUATION final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></END_PUNCTUATION>
		<FINAL_QUOTE_PUNCTUATION final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></FINAL_QUOTE_PUNCTUATION>
		<FORMAT final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></FORMAT>
		<INITIAL_QUOTE_PUNCTUATION final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></INITIAL_QUOTE_PUNCTUATION>
		<LETTER_NUMBER final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></LETTER_NUMBER>
		<LINE_SEPARATOR final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></LINE_SEPARATOR>
		<LOWERCASE_LETTER final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></LOWERCASE_LETTER>
		<MATH_SYMBOL final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></MATH_SYMBOL>
		<MAX_CODE_POINT final="1" public="1" set="null" static="1"><x path="Int"/></MAX_CODE_POINT>
		<MAX_HIGH_SURROGATE final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></MAX_HIGH_SURROGATE>
		<MAX_LOW_SURROGATE final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></MAX_LOW_SURROGATE>
		<MAX_RADIX final="1" public="1" set="null" static="1"><x path="Int"/></MAX_RADIX>
		<MAX_SURROGATE final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></MAX_SURROGATE>
		<MAX_VALUE final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></MAX_VALUE>
		<MIN_CODE_POINT final="1" public="1" set="null" static="1"><x path="Int"/></MIN_CODE_POINT>
		<MIN_HIGH_SURROGATE final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></MIN_HIGH_SURROGATE>
		<MIN_LOW_SURROGATE final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></MIN_LOW_SURROGATE>
		<MIN_RADIX final="1" public="1" set="null" static="1"><x path="Int"/></MIN_RADIX>
		<MIN_SUPPLEMENTARY_CODE_POINT final="1" public="1" set="null" static="1"><x path="Int"/></MIN_SUPPLEMENTARY_CODE_POINT>
		<MIN_SURROGATE final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></MIN_SURROGATE>
		<MIN_VALUE final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></MIN_VALUE>
		<MODIFIER_LETTER final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></MODIFIER_LETTER>
		<MODIFIER_SYMBOL final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></MODIFIER_SYMBOL>
		<NON_SPACING_MARK final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></NON_SPACING_MARK>
		<OTHER_LETTER final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></OTHER_LETTER>
		<OTHER_NUMBER final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></OTHER_NUMBER>
		<OTHER_PUNCTUATION final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></OTHER_PUNCTUATION>
		<OTHER_SYMBOL final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></OTHER_SYMBOL>
		<PARAGRAPH_SEPARATOR final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></PARAGRAPH_SEPARATOR>
		<PRIVATE_USE final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></PRIVATE_USE>
		<SIZE final="1" public="1" set="null" static="1"><x path="Int"/></SIZE>
		<SPACE_SEPARATOR final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></SPACE_SEPARATOR>
		<START_PUNCTUATION final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></START_PUNCTUATION>
		<SURROGATE final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></SURROGATE>
		<TITLECASE_LETTER final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></TITLECASE_LETTER>
		<TYPE final="1" public="1" set="null" static="1"><c path="java.lang.Class"><x path="java.lang.Character"/></c></TYPE>
		<UNASSIGNED final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></UNASSIGNED>
		<UPPERCASE_LETTER final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></UPPERCASE_LETTER>
		<charCount public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</charCount>
		<codePointAt public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.lang.CharSequence"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<codePointAt public="1" set="method">
					<f a="param1:param2">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</codePointAt>
				<codePointAt public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</codePointAt>
			</overloads>
		</codePointAt>
		<codePointBefore public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.lang.CharSequence"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<codePointBefore public="1" set="method">
					<f a="param1:param2">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</codePointBefore>
				<codePointBefore public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</codePointBefore>
			</overloads>
		</codePointBefore>
		<codePointCount public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.lang.CharSequence"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><codePointCount public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><t path="java.types.Char16"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</codePointCount></overloads>
		</codePointCount>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<digit public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Char16"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><digit public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</digit></overloads>
		</digit>
		<forDigit public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</forDigit>
		<getDirectionality public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDirectionality public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<t path="java.types.Char16"/>
	</f>
	<meta><m n=":overload"/></meta>
</getDirectionality></overloads>
		</getDirectionality>
		<getName public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getNumericValue public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getNumericValue public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</getNumericValue></overloads>
		</getNumericValue>
		<getType public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getType public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</getType></overloads>
		</getType>
		<highSurrogate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</highSurrogate>
		<isAlphabetic public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isAlphabetic>
		<isBmpCodePoint public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isBmpCodePoint>
		<isDefined public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isDefined public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isDefined></overloads>
		</isDefined>
		<isDigit public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isDigit public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isDigit></overloads>
		</isDigit>
		<isHighSurrogate public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isHighSurrogate>
		<isISOControl public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isISOControl public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isISOControl></overloads>
		</isISOControl>
		<isIdentifierIgnorable public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isIdentifierIgnorable public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isIdentifierIgnorable></overloads>
		</isIdentifierIgnorable>
		<isIdeographic public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isIdeographic>
		<isJavaIdentifierPart public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isJavaIdentifierPart public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isJavaIdentifierPart></overloads>
		</isJavaIdentifierPart>
		<isJavaIdentifierStart public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isJavaIdentifierStart public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isJavaIdentifierStart></overloads>
		</isJavaIdentifierStart>
		<isJavaLetter public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</isJavaLetter>
		<isJavaLetterOrDigit public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</isJavaLetterOrDigit>
		<isLetter public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isLetter public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isLetter></overloads>
		</isLetter>
		<isLetterOrDigit public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isLetterOrDigit public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isLetterOrDigit></overloads>
		</isLetterOrDigit>
		<isLowSurrogate public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isLowSurrogate>
		<isLowerCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isLowerCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isLowerCase></overloads>
		</isLowerCase>
		<isMirrored public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isMirrored public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isMirrored></overloads>
		</isMirrored>
		<isSpace public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</isSpace>
		<isSpaceChar public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isSpaceChar public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isSpaceChar></overloads>
		</isSpaceChar>
		<isSupplementaryCodePoint public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isSupplementaryCodePoint>
		<isSurrogate public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isSurrogate>
		<isSurrogatePair public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isSurrogatePair>
		<isTitleCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isTitleCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isTitleCase></overloads>
		</isTitleCase>
		<isUnicodeIdentifierPart public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isUnicodeIdentifierPart public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isUnicodeIdentifierPart></overloads>
		</isUnicodeIdentifierPart>
		<isUnicodeIdentifierStart public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isUnicodeIdentifierStart public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isUnicodeIdentifierStart></overloads>
		</isUnicodeIdentifierStart>
		<isUpperCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isUpperCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isUpperCase></overloads>
		</isUpperCase>
		<isValidCodePoint public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isValidCodePoint>
		<isWhitespace public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isWhitespace public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isWhitespace></overloads>
		</isWhitespace>
		<lowSurrogate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</lowSurrogate>
		<offsetByCodePoints public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.lang.CharSequence"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><offsetByCodePoints public="1" set="method">
	<f a="param1:param2:param3:param4:param5">
		<c path="java.NativeArray"><t path="java.types.Char16"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</offsetByCodePoints></overloads>
		</offsetByCodePoints>
		<reverseBytes public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverseBytes>
		<toChars public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toChars public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</toChars></overloads>
		</toChars>
		<toCodePoint public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toCodePoint>
		<toLowerCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toLowerCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</toLowerCase></overloads>
		</toLowerCase>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<toTitleCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toTitleCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</toTitleCase></overloads>
		</toTitleCase>
		<toUpperCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toUpperCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</toUpperCase></overloads>
		</toUpperCase>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="java.lang.Character"/>
			</f>
			<meta><m n=":overload"/></meta>
		</valueOf>
		<charValue public="1" set="method">
			<f a=""><t path="java.types.Char16"/></f>
			<meta><m n=":overload"/></meta>
		</charValue>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Character"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Character"</e></m>
		</meta>
	</class>
	<class path="java.lang.Character_CharacterCache" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Character.hx" module="java.lang.Character" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Character$CharacterCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Character.CharacterCache"</e>
	</m>
</meta></class>
	<class path="java.lang.Character_Subset" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Character.hx" module="java.lang.Character" extern="1">
		<equals final="1" public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode final="1" public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<meta>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Character$Subset"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Character.Subset"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Character_UnicodeBlock" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Character.hx" module="java.lang.Character" extern="1" final="1">
		<extends path="java.lang.Character_Subset"/>
		<AEGEAN_NUMBERS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></AEGEAN_NUMBERS>
		<ALCHEMICAL_SYMBOLS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ALCHEMICAL_SYMBOLS>
		<ALPHABETIC_PRESENTATION_FORMS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ALPHABETIC_PRESENTATION_FORMS>
		<ANCIENT_GREEK_MUSICAL_NOTATION final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ANCIENT_GREEK_MUSICAL_NOTATION>
		<ANCIENT_GREEK_NUMBERS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ANCIENT_GREEK_NUMBERS>
		<ANCIENT_SYMBOLS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ANCIENT_SYMBOLS>
		<ARABIC final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ARABIC>
		<ARABIC_PRESENTATION_FORMS_A final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ARABIC_PRESENTATION_FORMS_A>
		<ARABIC_PRESENTATION_FORMS_B final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ARABIC_PRESENTATION_FORMS_B>
		<ARABIC_SUPPLEMENT final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ARABIC_SUPPLEMENT>
		<ARMENIAN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ARMENIAN>
		<ARROWS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ARROWS>
		<AVESTAN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></AVESTAN>
		<BALINESE final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BALINESE>
		<BAMUM final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BAMUM>
		<BAMUM_SUPPLEMENT final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BAMUM_SUPPLEMENT>
		<BASIC_LATIN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BASIC_LATIN>
		<BATAK final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BATAK>
		<BENGALI final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BENGALI>
		<BLOCK_ELEMENTS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BLOCK_ELEMENTS>
		<BOPOMOFO final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BOPOMOFO>
		<BOPOMOFO_EXTENDED final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BOPOMOFO_EXTENDED>
		<BOX_DRAWING final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BOX_DRAWING>
		<BRAHMI final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BRAHMI>
		<BRAILLE_PATTERNS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BRAILLE_PATTERNS>
		<BUGINESE final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BUGINESE>
		<BUHID final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BUHID>
		<BYZANTINE_MUSICAL_SYMBOLS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></BYZANTINE_MUSICAL_SYMBOLS>
		<CARIAN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CARIAN>
		<CHAM final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CHAM>
		<CHEROKEE final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CHEROKEE>
		<CJK_COMPATIBILITY final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CJK_COMPATIBILITY>
		<CJK_COMPATIBILITY_FORMS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CJK_COMPATIBILITY_FORMS>
		<CJK_COMPATIBILITY_IDEOGRAPHS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CJK_COMPATIBILITY_IDEOGRAPHS>
		<CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT>
		<CJK_RADICALS_SUPPLEMENT final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CJK_RADICALS_SUPPLEMENT>
		<CJK_STROKES final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CJK_STROKES>
		<CJK_SYMBOLS_AND_PUNCTUATION final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CJK_SYMBOLS_AND_PUNCTUATION>
		<CJK_UNIFIED_IDEOGRAPHS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CJK_UNIFIED_IDEOGRAPHS>
		<CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A>
		<CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B>
		<CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C>
		<CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D>
		<COMBINING_DIACRITICAL_MARKS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></COMBINING_DIACRITICAL_MARKS>
		<COMBINING_DIACRITICAL_MARKS_SUPPLEMENT final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></COMBINING_DIACRITICAL_MARKS_SUPPLEMENT>
		<COMBINING_HALF_MARKS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></COMBINING_HALF_MARKS>
		<COMBINING_MARKS_FOR_SYMBOLS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></COMBINING_MARKS_FOR_SYMBOLS>
		<COMMON_INDIC_NUMBER_FORMS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></COMMON_INDIC_NUMBER_FORMS>
		<CONTROL_PICTURES final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CONTROL_PICTURES>
		<COPTIC final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></COPTIC>
		<COUNTING_ROD_NUMERALS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></COUNTING_ROD_NUMERALS>
		<CUNEIFORM final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CUNEIFORM>
		<CUNEIFORM_NUMBERS_AND_PUNCTUATION final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CUNEIFORM_NUMBERS_AND_PUNCTUATION>
		<CURRENCY_SYMBOLS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CURRENCY_SYMBOLS>
		<CYPRIOT_SYLLABARY final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CYPRIOT_SYLLABARY>
		<CYRILLIC final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CYRILLIC>
		<CYRILLIC_EXTENDED_A final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CYRILLIC_EXTENDED_A>
		<CYRILLIC_EXTENDED_B final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CYRILLIC_EXTENDED_B>
		<CYRILLIC_SUPPLEMENTARY final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></CYRILLIC_SUPPLEMENTARY>
		<DESERET final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></DESERET>
		<DEVANAGARI final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></DEVANAGARI>
		<DEVANAGARI_EXTENDED final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></DEVANAGARI_EXTENDED>
		<DINGBATS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></DINGBATS>
		<DOMINO_TILES final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></DOMINO_TILES>
		<EGYPTIAN_HIEROGLYPHS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></EGYPTIAN_HIEROGLYPHS>
		<EMOTICONS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></EMOTICONS>
		<ENCLOSED_ALPHANUMERICS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ENCLOSED_ALPHANUMERICS>
		<ENCLOSED_ALPHANUMERIC_SUPPLEMENT final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ENCLOSED_ALPHANUMERIC_SUPPLEMENT>
		<ENCLOSED_CJK_LETTERS_AND_MONTHS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ENCLOSED_CJK_LETTERS_AND_MONTHS>
		<ENCLOSED_IDEOGRAPHIC_SUPPLEMENT final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ENCLOSED_IDEOGRAPHIC_SUPPLEMENT>
		<ETHIOPIC final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ETHIOPIC>
		<ETHIOPIC_EXTENDED final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ETHIOPIC_EXTENDED>
		<ETHIOPIC_EXTENDED_A final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ETHIOPIC_EXTENDED_A>
		<ETHIOPIC_SUPPLEMENT final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ETHIOPIC_SUPPLEMENT>
		<GENERAL_PUNCTUATION final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></GENERAL_PUNCTUATION>
		<GEOMETRIC_SHAPES final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></GEOMETRIC_SHAPES>
		<GEORGIAN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></GEORGIAN>
		<GEORGIAN_SUPPLEMENT final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></GEORGIAN_SUPPLEMENT>
		<GLAGOLITIC final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></GLAGOLITIC>
		<GOTHIC final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></GOTHIC>
		<GREEK final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></GREEK>
		<GREEK_EXTENDED final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></GREEK_EXTENDED>
		<GUJARATI final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></GUJARATI>
		<GURMUKHI final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></GURMUKHI>
		<HALFWIDTH_AND_FULLWIDTH_FORMS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></HALFWIDTH_AND_FULLWIDTH_FORMS>
		<HANGUL_COMPATIBILITY_JAMO final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></HANGUL_COMPATIBILITY_JAMO>
		<HANGUL_JAMO final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></HANGUL_JAMO>
		<HANGUL_JAMO_EXTENDED_A final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></HANGUL_JAMO_EXTENDED_A>
		<HANGUL_JAMO_EXTENDED_B final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></HANGUL_JAMO_EXTENDED_B>
		<HANGUL_SYLLABLES final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></HANGUL_SYLLABLES>
		<HANUNOO final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></HANUNOO>
		<HEBREW final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></HEBREW>
		<HIGH_PRIVATE_USE_SURROGATES final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></HIGH_PRIVATE_USE_SURROGATES>
		<HIGH_SURROGATES final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></HIGH_SURROGATES>
		<HIRAGANA final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></HIRAGANA>
		<IDEOGRAPHIC_DESCRIPTION_CHARACTERS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></IDEOGRAPHIC_DESCRIPTION_CHARACTERS>
		<IMPERIAL_ARAMAIC final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></IMPERIAL_ARAMAIC>
		<INSCRIPTIONAL_PAHLAVI final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></INSCRIPTIONAL_PAHLAVI>
		<INSCRIPTIONAL_PARTHIAN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></INSCRIPTIONAL_PARTHIAN>
		<IPA_EXTENSIONS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></IPA_EXTENSIONS>
		<JAVANESE final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></JAVANESE>
		<KAITHI final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></KAITHI>
		<KANA_SUPPLEMENT final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></KANA_SUPPLEMENT>
		<KANBUN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></KANBUN>
		<KANGXI_RADICALS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></KANGXI_RADICALS>
		<KANNADA final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></KANNADA>
		<KATAKANA final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></KATAKANA>
		<KATAKANA_PHONETIC_EXTENSIONS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></KATAKANA_PHONETIC_EXTENSIONS>
		<KAYAH_LI final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></KAYAH_LI>
		<KHAROSHTHI final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></KHAROSHTHI>
		<KHMER final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></KHMER>
		<KHMER_SYMBOLS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></KHMER_SYMBOLS>
		<LAO final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LAO>
		<LATIN_1_SUPPLEMENT final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LATIN_1_SUPPLEMENT>
		<LATIN_EXTENDED_A final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LATIN_EXTENDED_A>
		<LATIN_EXTENDED_ADDITIONAL final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LATIN_EXTENDED_ADDITIONAL>
		<LATIN_EXTENDED_B final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LATIN_EXTENDED_B>
		<LATIN_EXTENDED_C final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LATIN_EXTENDED_C>
		<LATIN_EXTENDED_D final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LATIN_EXTENDED_D>
		<LEPCHA final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LEPCHA>
		<LETTERLIKE_SYMBOLS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LETTERLIKE_SYMBOLS>
		<LIMBU final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LIMBU>
		<LINEAR_B_IDEOGRAMS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LINEAR_B_IDEOGRAMS>
		<LINEAR_B_SYLLABARY final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LINEAR_B_SYLLABARY>
		<LISU final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LISU>
		<LOW_SURROGATES final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LOW_SURROGATES>
		<LYCIAN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LYCIAN>
		<LYDIAN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></LYDIAN>
		<MAHJONG_TILES final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MAHJONG_TILES>
		<MALAYALAM final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MALAYALAM>
		<MANDAIC final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MANDAIC>
		<MATHEMATICAL_ALPHANUMERIC_SYMBOLS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MATHEMATICAL_ALPHANUMERIC_SYMBOLS>
		<MATHEMATICAL_OPERATORS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MATHEMATICAL_OPERATORS>
		<MEETEI_MAYEK final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MEETEI_MAYEK>
		<MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A>
		<MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B>
		<MISCELLANEOUS_SYMBOLS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MISCELLANEOUS_SYMBOLS>
		<MISCELLANEOUS_SYMBOLS_AND_ARROWS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MISCELLANEOUS_SYMBOLS_AND_ARROWS>
		<MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS>
		<MISCELLANEOUS_TECHNICAL final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MISCELLANEOUS_TECHNICAL>
		<MODIFIER_TONE_LETTERS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MODIFIER_TONE_LETTERS>
		<MONGOLIAN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MONGOLIAN>
		<MUSICAL_SYMBOLS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MUSICAL_SYMBOLS>
		<MYANMAR final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MYANMAR>
		<MYANMAR_EXTENDED_A final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></MYANMAR_EXTENDED_A>
		<NEW_TAI_LUE final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></NEW_TAI_LUE>
		<NKO final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></NKO>
		<NUMBER_FORMS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></NUMBER_FORMS>
		<OGHAM final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></OGHAM>
		<OLD_ITALIC final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></OLD_ITALIC>
		<OLD_PERSIAN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></OLD_PERSIAN>
		<OLD_SOUTH_ARABIAN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></OLD_SOUTH_ARABIAN>
		<OLD_TURKIC final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></OLD_TURKIC>
		<OL_CHIKI final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></OL_CHIKI>
		<OPTICAL_CHARACTER_RECOGNITION final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></OPTICAL_CHARACTER_RECOGNITION>
		<ORIYA final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></ORIYA>
		<OSMANYA final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></OSMANYA>
		<PHAGS_PA final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></PHAGS_PA>
		<PHAISTOS_DISC final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></PHAISTOS_DISC>
		<PHOENICIAN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></PHOENICIAN>
		<PHONETIC_EXTENSIONS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></PHONETIC_EXTENSIONS>
		<PHONETIC_EXTENSIONS_SUPPLEMENT final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></PHONETIC_EXTENSIONS_SUPPLEMENT>
		<PLAYING_CARDS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></PLAYING_CARDS>
		<PRIVATE_USE_AREA final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></PRIVATE_USE_AREA>
		<REJANG final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></REJANG>
		<RUMI_NUMERAL_SYMBOLS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></RUMI_NUMERAL_SYMBOLS>
		<RUNIC final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></RUNIC>
		<SAMARITAN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SAMARITAN>
		<SAURASHTRA final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SAURASHTRA>
		<SHAVIAN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SHAVIAN>
		<SINHALA final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SINHALA>
		<SMALL_FORM_VARIANTS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SMALL_FORM_VARIANTS>
		<SPACING_MODIFIER_LETTERS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SPACING_MODIFIER_LETTERS>
		<SPECIALS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SPECIALS>
		<SUNDANESE final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SUNDANESE>
		<SUPERSCRIPTS_AND_SUBSCRIPTS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SUPERSCRIPTS_AND_SUBSCRIPTS>
		<SUPPLEMENTAL_ARROWS_A final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SUPPLEMENTAL_ARROWS_A>
		<SUPPLEMENTAL_ARROWS_B final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SUPPLEMENTAL_ARROWS_B>
		<SUPPLEMENTAL_MATHEMATICAL_OPERATORS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SUPPLEMENTAL_MATHEMATICAL_OPERATORS>
		<SUPPLEMENTAL_PUNCTUATION final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SUPPLEMENTAL_PUNCTUATION>
		<SUPPLEMENTARY_PRIVATE_USE_AREA_A final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SUPPLEMENTARY_PRIVATE_USE_AREA_A>
		<SUPPLEMENTARY_PRIVATE_USE_AREA_B final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SUPPLEMENTARY_PRIVATE_USE_AREA_B>
		<SURROGATES_AREA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":deprecated"/></meta>
		</SURROGATES_AREA>
		<SYLOTI_NAGRI final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SYLOTI_NAGRI>
		<SYRIAC final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></SYRIAC>
		<TAGALOG final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></TAGALOG>
		<TAGBANWA final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></TAGBANWA>
		<TAGS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></TAGS>
		<TAI_LE final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></TAI_LE>
		<TAI_THAM final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></TAI_THAM>
		<TAI_VIET final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></TAI_VIET>
		<TAI_XUAN_JING_SYMBOLS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></TAI_XUAN_JING_SYMBOLS>
		<TAMIL final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></TAMIL>
		<TELUGU final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></TELUGU>
		<THAANA final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></THAANA>
		<THAI final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></THAI>
		<TIBETAN final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></TIBETAN>
		<TIFINAGH final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></TIFINAGH>
		<TRANSPORT_AND_MAP_SYMBOLS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></TRANSPORT_AND_MAP_SYMBOLS>
		<UGARITIC final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></UGARITIC>
		<UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS>
		<UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED>
		<VAI final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></VAI>
		<VARIATION_SELECTORS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></VARIATION_SELECTORS>
		<VARIATION_SELECTORS_SUPPLEMENT final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></VARIATION_SELECTORS_SUPPLEMENT>
		<VEDIC_EXTENSIONS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></VEDIC_EXTENSIONS>
		<VERTICAL_FORMS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></VERTICAL_FORMS>
		<YIJING_HEXAGRAM_SYMBOLS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></YIJING_HEXAGRAM_SYMBOLS>
		<YI_RADICALS final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></YI_RADICALS>
		<YI_SYLLABLES final="1" public="1" set="null" static="1"><c path="java.lang.Character_UnicodeBlock"/></YI_SYLLABLES>
		<forName final="1" public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Character_UnicodeBlock"/>
			</f>
			<meta><m n=":overload"/></meta>
		</forName>
		<of public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<c path="java.lang.Character_UnicodeBlock"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><of public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.lang.Character_UnicodeBlock"/>
	</f>
	<meta><m n=":overload"/></meta>
</of></overloads>
		</of>
		<meta>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Character$UnicodeBlock"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Character.UnicodeBlock"</e>
			</m>
		</meta>
	</class>
	<enum path="java.lang.Character_UnicodeScript" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Character.hx" module="java.lang.Character">
		<COMMON/>
		<LATIN/>
		<GREEK/>
		<CYRILLIC/>
		<ARMENIAN/>
		<HEBREW/>
		<ARABIC/>
		<SYRIAC/>
		<THAANA/>
		<DEVANAGARI/>
		<BENGALI/>
		<GURMUKHI/>
		<GUJARATI/>
		<ORIYA/>
		<TAMIL/>
		<TELUGU/>
		<KANNADA/>
		<MALAYALAM/>
		<SINHALA/>
		<THAI/>
		<LAO/>
		<TIBETAN/>
		<MYANMAR/>
		<GEORGIAN/>
		<HANGUL/>
		<ETHIOPIC/>
		<CHEROKEE/>
		<CANADIAN_ABORIGINAL/>
		<OGHAM/>
		<RUNIC/>
		<KHMER/>
		<MONGOLIAN/>
		<HIRAGANA/>
		<KATAKANA/>
		<BOPOMOFO/>
		<HAN/>
		<YI/>
		<OLD_ITALIC/>
		<GOTHIC/>
		<DESERET/>
		<INHERITED/>
		<TAGALOG/>
		<HANUNOO/>
		<BUHID/>
		<TAGBANWA/>
		<LIMBU/>
		<TAI_LE/>
		<LINEAR_B/>
		<UGARITIC/>
		<SHAVIAN/>
		<OSMANYA/>
		<CYPRIOT/>
		<BRAILLE/>
		<BUGINESE/>
		<COPTIC/>
		<NEW_TAI_LUE/>
		<GLAGOLITIC/>
		<TIFINAGH/>
		<SYLOTI_NAGRI/>
		<OLD_PERSIAN/>
		<KHAROSHTHI/>
		<BALINESE/>
		<CUNEIFORM/>
		<PHOENICIAN/>
		<PHAGS_PA/>
		<NKO/>
		<SUNDANESE/>
		<BATAK/>
		<LEPCHA/>
		<OL_CHIKI/>
		<VAI/>
		<SAURASHTRA/>
		<KAYAH_LI/>
		<REJANG/>
		<LYCIAN/>
		<CARIAN/>
		<LYDIAN/>
		<CHAM/>
		<TAI_THAM/>
		<TAI_VIET/>
		<AVESTAN/>
		<EGYPTIAN_HIEROGLYPHS/>
		<SAMARITAN/>
		<MANDAIC/>
		<LISU/>
		<BAMUM/>
		<JAVANESE/>
		<MEETEI_MAYEK/>
		<IMPERIAL_ARAMAIC/>
		<OLD_SOUTH_ARABIAN/>
		<INSCRIPTIONAL_PARTHIAN/>
		<INSCRIPTIONAL_PAHLAVI/>
		<OLD_TURKIC/>
		<BRAHMI/>
		<KAITHI/>
		<UNKNOWN/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Character.UnicodeScript"</e>
			</m>
			<m n=":native"><e>"java.lang.Character$UnicodeScript"</e></m>
		</meta>
	</enum>
	<class path="java.lang.reflect.AnnotatedElement" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/AnnotatedElement.class" extern="1" interface="1">
		<isAnnotationPresent public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</isAnnotationPresent>
		<getAnnotation public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
	<c path="getAnnotation.T"/>
</f></getAnnotation>
		<getAnnotations public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f></getAnnotations>
		<getAnnotationsByType public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotationsByType.T"/></c>
				<c path="java.NativeArray"><c path="getAnnotationsByType.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</getAnnotationsByType>
		<getDeclaredAnnotation public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="getDeclaredAnnotation.T"/></c>
				<c path="getDeclaredAnnotation.T"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</getDeclaredAnnotation>
		<getDeclaredAnnotationsByType public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="getDeclaredAnnotationsByType.T"/></c>
				<c path="java.NativeArray"><c path="getDeclaredAnnotationsByType.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</getDeclaredAnnotationsByType>
		<getDeclaredAnnotations public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f></getDeclaredAnnotations>
		<meta>
			<m n=":native"><e>"java.lang.reflect.AnnotatedElement"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.Type" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/Type.class" extern="1" interface="1">
		<getTypeName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":java.default"/></meta>
		</getTypeName>
		<meta>
			<m n=":native"><e>"java.lang.reflect.Type"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.GenericDeclaration" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/GenericDeclaration.class" extern="1" interface="1">
		<extends path="java.lang.reflect.AnnotatedElement"/>
		<getTypeParameters public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.TypeVariable"><d/></c></c></f></getTypeParameters>
		<meta>
			<m n=":native"><e>"java.lang.reflect.GenericDeclaration"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Class" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Class.class" extern="1">
		<implements path="java.lang.reflect.AnnotatedElement"/>
		<implements path="java.lang.reflect.Type"/>
		<implements path="java.lang.reflect.GenericDeclaration"/>
		<implements path="java.io.Serializable"/>
		<forName public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<overloads><forName public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<x path="Bool"/>
	<c path="java.lang.ClassLoader"/>
	<c path="java.lang.Class"><d/></c>
</f></forName></overloads>
		</forName>
		<getPrimitiveClass public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.lang.Class"><d/></c>
</f></getPrimitiveClass>
		<getExecutableTypeAnnotationBytes public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.reflect.Executable"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></getExecutableTypeAnnotationBytes>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toGenericString public="1" set="method"><f a=""><c path="String"/></f></toGenericString>
		<newInstance public="1" set="method"><f a=""><c path="java.lang.Class.T"/></f></newInstance>
		<isInstance public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></isInstance>
		<isAssignableFrom public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<x path="Bool"/>
</f></isAssignableFrom>
		<isInterface public="1" set="method"><f a=""><x path="Bool"/></f></isInterface>
		<isArray public="1" set="method"><f a=""><x path="Bool"/></f></isArray>
		<isPrimitive public="1" set="method"><f a=""><x path="Bool"/></f></isPrimitive>
		<isAnnotation public="1" set="method"><f a=""><x path="Bool"/></f></isAnnotation>
		<isSynthetic public="1" set="method"><f a=""><x path="Bool"/></f></isSynthetic>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getClassLoader public="1" set="method"><f a=""><c path="java.lang.ClassLoader"/></f></getClassLoader>
		<getClassLoader0 public="1" set="method"><f a=""><c path="java.lang.ClassLoader"/></f></getClassLoader0>
		<getTypeParameters public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.TypeVariable"><c path="java.lang.Class"><c path="java.lang.Class.T"/></c></c></c></f></getTypeParameters>
		<getSuperclass public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></getSuperclass>
		<getGenericSuperclass public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></getGenericSuperclass>
		<getPackage public="1" set="method"><f a=""><c path="java.lang.Package"/></f></getPackage>
		<getInterfaces public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f></getInterfaces>
		<getGenericInterfaces public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f></getGenericInterfaces>
		<getComponentType public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></getComponentType>
		<getModifiers public="1" set="method"><f a=""><x path="Int"/></f></getModifiers>
		<getSigners public="1" set="method"><f a=""><c path="java.NativeArray"><d/></c></f></getSigners>
		<setSigners public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><d/></c>
	<x path="Void"/>
</f></setSigners>
		<getEnclosingMethod public="1" set="method"><f a=""><c path="java.lang.reflect.Method"/></f></getEnclosingMethod>
		<getEnclosingConstructor public="1" set="method"><f a=""><c path="java.lang.reflect.Constructor"><d/></c></f></getEnclosingConstructor>
		<getDeclaringClass public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></getDeclaringClass>
		<getEnclosingClass public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></getEnclosingClass>
		<getSimpleName public="1" set="method"><f a=""><c path="String"/></f></getSimpleName>
		<getTypeName public="1" set="method"><f a=""><c path="String"/></f></getTypeName>
		<getCanonicalName public="1" set="method"><f a=""><c path="String"/></f></getCanonicalName>
		<isAnonymousClass public="1" set="method"><f a=""><x path="Bool"/></f></isAnonymousClass>
		<isLocalClass public="1" set="method"><f a=""><x path="Bool"/></f></isLocalClass>
		<isMemberClass public="1" set="method"><f a=""><x path="Bool"/></f></isMemberClass>
		<getClasses public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f></getClasses>
		<getFields public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Field"/></c></f></getFields>
		<getMethods public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Method"/></c></f></getMethods>
		<getConstructors public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Constructor"><d/></c></c></f></getConstructors>
		<getField public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.lang.reflect.Field"/>
</f></getField>
		<getMethod public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="haxe.Rest"><c path="java.lang.Class"><d/></c></x>
	<c path="java.lang.reflect.Method"/>
</f></getMethod>
		<getConstructor public="1" set="method"><f a="param1">
	<x path="haxe.Rest"><c path="java.lang.Class"><d/></c></x>
	<c path="java.lang.reflect.Constructor"><c path="java.lang.Class.T"/></c>
</f></getConstructor>
		<getDeclaredClasses public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f></getDeclaredClasses>
		<getDeclaredFields public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Field"/></c></f></getDeclaredFields>
		<getDeclaredMethods public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Method"/></c></f></getDeclaredMethods>
		<getDeclaredConstructors public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Constructor"><d/></c></c></f></getDeclaredConstructors>
		<getDeclaredField public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.lang.reflect.Field"/>
</f></getDeclaredField>
		<getDeclaredMethod public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="haxe.Rest"><c path="java.lang.Class"><d/></c></x>
	<c path="java.lang.reflect.Method"/>
</f></getDeclaredMethod>
		<getDeclaredConstructor public="1" set="method"><f a="param1">
	<x path="haxe.Rest"><c path="java.lang.Class"><d/></c></x>
	<c path="java.lang.reflect.Constructor"><c path="java.lang.Class.T"/></c>
</f></getDeclaredConstructor>
		<getResourceAsStream public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.io.InputStream"/>
</f></getResourceAsStream>
		<getResource public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.net.URL"/>
</f></getResource>
		<getProtectionDomain public="1" set="method"><f a=""><c path="java.security.ProtectionDomain"/></f></getProtectionDomain>
		<getRawAnnotations public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getRawAnnotations>
		<getRawTypeAnnotations public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getRawTypeAnnotations>
		<getConstantPool public="1" set="method"><f a=""><c path="java.sun.reflect.ConstantPool"/></f></getConstantPool>
		<desiredAssertionStatus public="1" set="method"><f a=""><x path="Bool"/></f></desiredAssertionStatus>
		<isEnum public="1" set="method"><f a=""><x path="Bool"/></f></isEnum>
		<getEnumConstants public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.Class.T"/></c></f></getEnumConstants>
		<getEnumConstantsShared public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.Class.T"/></c></f></getEnumConstantsShared>
		<enumConstantDirectory public="1" set="method"><f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="java.lang.Class.T"/>
</c></f></enumConstantDirectory>
		<_cast public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.lang.Class.T"/>
			</f>
			<meta><m n=":native"><e>"cast"</e></m></meta>
		</_cast>
		<asSubclass public="1" params="U" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="asSubclass.U"/></c>
	<c path="java.lang.Class"><c path="asSubclass.U"/></c>
</f></asSubclass>
		<getAnnotation public="1" params="A" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotation.A"/></c>
	<c path="getAnnotation.A"/>
</f></getAnnotation>
		<isAnnotationPresent public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
	<x path="Bool"/>
</f></isAnnotationPresent>
		<getAnnotationsByType public="1" params="A" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotationsByType.A"/></c>
	<c path="java.NativeArray"><c path="getAnnotationsByType.A"/></c>
</f></getAnnotationsByType>
		<getAnnotations public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f></getAnnotations>
		<getDeclaredAnnotation public="1" params="A" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getDeclaredAnnotation.A"/></c>
	<c path="getDeclaredAnnotation.A"/>
</f></getDeclaredAnnotation>
		<getDeclaredAnnotationsByType public="1" params="A" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getDeclaredAnnotationsByType.A"/></c>
	<c path="java.NativeArray"><c path="getDeclaredAnnotationsByType.A"/></c>
</f></getDeclaredAnnotationsByType>
		<getDeclaredAnnotations public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f></getDeclaredAnnotations>
		<casAnnotationType public="1" set="method"><f a="param1:param2">
	<c path="java.sun.reflect.annotation.AnnotationType"/>
	<c path="java.sun.reflect.annotation.AnnotationType"/>
	<x path="Bool"/>
</f></casAnnotationType>
		<getAnnotationType public="1" set="method"><f a=""><c path="java.sun.reflect.annotation.AnnotationType"/></f></getAnnotationType>
		<getDeclaredAnnotationMap public="1" set="method"><f a=""><c path="java.util.Map">
	<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
	<c path="java.lang.annotation.Annotation"/>
</c></f></getDeclaredAnnotationMap>
		<getAnnotatedSuperclass public="1" set="method"><f a=""><c path="java.lang.reflect.AnnotatedType"/></f></getAnnotatedSuperclass>
		<getAnnotatedInterfaces public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.AnnotatedType"/></c></f></getAnnotatedInterfaces>
		<classValueMap public="1"><c path="java.lang.ClassValue_ClassValueMap"/></classValueMap>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Class"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Class_ReflectionData" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Class$ReflectionData.class" module="java.lang.Class" extern="1">
		<declaredFields public="1"><c path="java.NativeArray"><c path="java.lang.reflect.Field"/></c></declaredFields>
		<publicFields public="1"><c path="java.NativeArray"><c path="java.lang.reflect.Field"/></c></publicFields>
		<declaredMethods public="1"><c path="java.NativeArray"><c path="java.lang.reflect.Method"/></c></declaredMethods>
		<publicMethods public="1"><c path="java.NativeArray"><c path="java.lang.reflect.Method"/></c></publicMethods>
		<declaredConstructors public="1"><c path="java.NativeArray"><c path="java.lang.reflect.Constructor"><c path="java.lang.Class_ReflectionData.T"/></c></c></declaredConstructors>
		<publicConstructors public="1"><c path="java.NativeArray"><c path="java.lang.reflect.Constructor"><c path="java.lang.Class_ReflectionData.T"/></c></c></publicConstructors>
		<declaredPublicFields public="1"><c path="java.NativeArray"><c path="java.lang.reflect.Field"/></c></declaredPublicFields>
		<declaredPublicMethods public="1"><c path="java.NativeArray"><c path="java.lang.reflect.Method"/></c></declaredPublicMethods>
		<interfaces public="1"><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></interfaces>
		<redefinedCount final="1" public="1"><x path="Int"/></redefinedCount>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.Class$ReflectionData"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Class_MethodArray" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Class$MethodArray.class" module="java.lang.Class" extern="1">
		<hasMoreSpecificClass public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.lang.reflect.Method"/>
	<c path="java.lang.reflect.Method"/>
	<x path="Bool"/>
</f></hasMoreSpecificClass>
		<hasDefaults public="1" set="method"><f a=""><x path="Bool"/></f></hasDefaults>
		<add public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Method"/>
	<x path="Void"/>
</f></add>
		<addAll public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.reflect.Method"/></c>
				<x path="Void"/>
			</f>
			<overloads><addAll public="1" set="method"><f a="param1">
	<c path="java.lang.Class_MethodArray"/>
	<x path="Void"/>
</f></addAll></overloads>
		</addAll>
		<addIfNotPresent public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Method"/>
	<x path="Void"/>
</f></addIfNotPresent>
		<addAllIfNotPresent public="1" set="method"><f a="param1">
	<c path="java.lang.Class_MethodArray"/>
	<x path="Void"/>
</f></addAllIfNotPresent>
		<addInterfaceMethods public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.lang.reflect.Method"/></c>
	<x path="Void"/>
</f></addInterfaceMethods>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<get public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.reflect.Method"/>
</f></get>
		<getFirst public="1" set="method"><f a=""><c path="java.lang.reflect.Method"/></f></getFirst>
		<removeByNameAndDescriptor public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Method"/>
	<x path="Void"/>
</f></removeByNameAndDescriptor>
		<compactAndTrim public="1" set="method"><f a=""><x path="Void"/></f></compactAndTrim>
		<removeLessSpecifics public="1" set="method"><f a=""><x path="Void"/></f></removeLessSpecifics>
		<getArray public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Method"/></c></f></getArray>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.Class$MethodArray"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Class_EnclosingMethodInfo" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Class$EnclosingMethodInfo.class" module="java.lang.Class" extern="1">
		<isPartial public="1" set="method"><f a=""><x path="Bool"/></f></isPartial>
		<isConstructor public="1" set="method"><f a=""><x path="Bool"/></f></isConstructor>
		<isMethod public="1" set="method"><f a=""><x path="Bool"/></f></isMethod>
		<getEnclosingClass public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></getEnclosingClass>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getDescriptor public="1" set="method"><f a=""><c path="String"/></f></getDescriptor>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><d/></c>
	<c path="java.lang.Class_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.Class$EnclosingMethodInfo"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Class_Atomic" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Class$Atomic.class" module="java.lang.Class" extern="1">
		<casReflectionData public="1" params="T" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.ref.SoftReference"><c path="java.lang.Class_ReflectionData"><c path="casReflectionData.T"/></c></c>
	<c path="java.lang.ref.SoftReference"><c path="java.lang.Class_ReflectionData"><c path="casReflectionData.T"/></c></c>
	<x path="Bool"/>
</f></casReflectionData>
		<casAnnotationType public="1" params="T" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.lang.Class"><d/></c>
	<c path="java.sun.reflect.annotation.AnnotationType"/>
	<c path="java.sun.reflect.annotation.AnnotationType"/>
	<x path="Bool"/>
</f></casAnnotationType>
		<casAnnotationData public="1" params="T" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.Class_AnnotationData"/>
	<c path="java.lang.Class_AnnotationData"/>
	<x path="Bool"/>
</f></casAnnotationData>
		<meta>
			<m n=":native"><e>"java.lang.Class$Atomic"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Class_AnnotationData" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Class$AnnotationData.class" module="java.lang.Class" extern="1">
		<annotations final="1" public="1"><c path="java.util.Map">
	<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
	<c path="java.lang.annotation.Annotation"/>
</c></annotations>
		<declaredAnnotations final="1" public="1"><c path="java.util.Map">
	<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
	<c path="java.lang.annotation.Annotation"/>
</c></declaredAnnotations>
		<redefinedCount final="1" public="1"><x path="Int"/></redefinedCount>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Map">
		<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
		<c path="java.lang.annotation.Annotation"/>
	</c>
	<c path="java.util.Map">
		<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
		<c path="java.lang.annotation.Annotation"/>
	</c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.Class$AnnotationData"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Class_4" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Class$4.class" module="java.lang.Class" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<val_values final="1" public="1">
			<c path="java.lang.reflect.Method"/>
			<meta><m n=":native"><e>"val$values"</e></m></meta>
		</val_values>
		<this_0 final="1" public="1">
			<c path="java.lang.Class"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.reflect.Method"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.Class$4"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Class_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Class$3.class" module="java.lang.Class" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.lang.Class$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Class_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Class$2.class" module="java.lang.Class" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></implements>
		<run public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f></run>
		<this_0 final="1" public="1">
			<c path="java.lang.Class"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.Class$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Class_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Class$1.class" module="java.lang.Class" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<val_c final="1" public="1">
			<c path="java.lang.reflect.Constructor"><d/></c>
			<meta><m n=":native"><e>"val$c"</e></m></meta>
		</val_c>
		<this_0 final="1" public="1">
			<c path="java.lang.Class"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.reflect.Constructor"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.Class$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ClassLoader" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassLoader.class" extern="1" abstract="1">
		<registerAsParallelCapable public="1" set="method" static="1"><f a=""><x path="Bool"/></f></registerAsParallelCapable>
		<getSystemResource public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.net.URL"/>
</f></getSystemResource>
		<getSystemResources public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.util.Enumeration"><c path="java.net.URL"/></c>
</f></getSystemResources>
		<getBootstrapClassPath public="1" set="method" static="1"><f a=""><c path="java.sun.misc.URLClassPath"/></f></getBootstrapClassPath>
		<getSystemResourceAsStream public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.io.InputStream"/>
</f></getSystemResourceAsStream>
		<getSystemClassLoader public="1" set="method" static="1"><f a=""><c path="java.lang.ClassLoader"/></f></getSystemClassLoader>
		<getClassLoader public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.ClassLoader"/>
</f></getClassLoader>
		<checkClassLoaderPermission public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.lang.ClassLoader"/>
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></checkClassLoaderPermission>
		<loadLibrary public="1" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.lang.Class"><d/></c>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></loadLibrary>
		<findNative public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.lang.ClassLoader"/>
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></findNative>
		<addClass public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></addClass>
		<loadClass public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<overloads><loadClass public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Bool"/>
	<c path="java.lang.Class"><d/></c>
</f></loadClass></overloads>
		</loadClass>
		<getClassLoadingLock public="1" set="method"><f a="param1">
	<c path="String"/>
	<d/>
</f></getClassLoadingLock>
		<findClass public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.lang.Class"><d/></c>
</f></findClass>
		<defineClass final="1" public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta><m n=":deprecated"/></meta>
			<overloads>
				<defineClass final="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<c path="java.nio.ByteBuffer"/>
	<c path="java.security.ProtectionDomain"/>
	<c path="java.lang.Class"><d/></c>
</f></defineClass>
				<defineClass final="1" public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="String"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.security.ProtectionDomain"/>
	<c path="java.lang.Class"><d/></c>
</f></defineClass>
				<defineClass final="1" public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="String"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.Class"><d/></c>
</f></defineClass>
			</overloads>
		</defineClass>
		<resolveClass final="1" public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></resolveClass>
		<findSystemClass final="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.lang.Class"><d/></c>
</f></findSystemClass>
		<findLoadedClass final="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.lang.Class"><d/></c>
</f></findLoadedClass>
		<setSigners final="1" public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Class"><d/></c>
	<c path="java.NativeArray"><d/></c>
	<x path="Void"/>
</f></setSigners>
		<getResource public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.net.URL"/>
</f></getResource>
		<getResources public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.Enumeration"><c path="java.net.URL"/></c>
</f></getResources>
		<findResource public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.net.URL"/>
</f></findResource>
		<findResources public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.Enumeration"><c path="java.net.URL"/></c>
</f></findResources>
		<getResourceAsStream public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.io.InputStream"/>
</f></getResourceAsStream>
		<getParent final="1" public="1" set="method"><f a=""><c path="java.lang.ClassLoader"/></f></getParent>
		<isAncestor public="1" set="method"><f a="param1">
	<c path="java.lang.ClassLoader"/>
	<x path="Bool"/>
</f></isAncestor>
		<definePackage public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="java.net.URL"/>
	<c path="java.lang.Package"/>
</f></definePackage>
		<getPackage public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.lang.Package"/>
</f></getPackage>
		<getPackages public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.Package"/></c></f></getPackages>
		<findLibrary public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></findLibrary>
		<setDefaultAssertionStatus public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setDefaultAssertionStatus>
		<setPackageAssertionStatus public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setPackageAssertionStatus>
		<setClassAssertionStatus public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setClassAssertionStatus>
		<clearAssertionStatus public="1" set="method"><f a=""><x path="Void"/></f></clearAssertionStatus>
		<desiredAssertionStatus public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></desiredAssertionStatus>
		<assertionLock final="1" public="1"><d/></assertionLock>
		<classAssertionStatus public="1"><c path="java.util.Map">
	<c path="String"/>
	<x path="java.lang.Boolean"/>
</c></classAssertionStatus>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.ClassLoader"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a=""><x path="Void"/></f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.ClassLoader"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ClassLoader_ParallelLoaders" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassLoader$ParallelLoaders.class" module="java.lang.ClassLoader" extern="1">
		<register public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.Class"><c path="java.lang.ClassLoader"/></c>
	<x path="Bool"/>
</f></register>
		<isRegistered public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.Class"><c path="java.lang.ClassLoader"/></c>
	<x path="Bool"/>
</f></isRegistered>
		<meta>
			<m n=":native"><e>"java.lang.ClassLoader$ParallelLoaders"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ClassLoader_NativeLibrary" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassLoader$NativeLibrary.class" module="java.lang.ClassLoader" extern="1">
		<findBuiltinLib public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></findBuiltinLib>
		<getFromClass public="1" set="method" static="1"><f a=""><c path="java.lang.Class"><d/></c></f></getFromClass>
		<load public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></load>
		<find public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></find>
		<unload public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></unload>
		<finalize public="1" set="method"><f a=""><x path="Void"/></f></finalize>
		<handle public="1"><x path="haxe.Int64"/></handle>
		<name public="1"><c path="String"/></name>
		<isBuiltin public="1"><x path="Bool"/></isBuiltin>
		<loaded public="1"><x path="Bool"/></loaded>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.Class"><d/></c>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ClassLoader$NativeLibrary"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ClassLoader_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassLoader$3.class" module="java.lang.ClassLoader" extern="1">
		<implements path="java.security.PrivilegedAction"><d/></implements>
		<run public="1" set="method"><f a=""><d/></f></run>
		<val_file final="1" public="1">
			<c path="java.io.File"/>
			<meta><m n=":native"><e>"val$file"</e></m></meta>
		</val_file>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.File"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ClassLoader$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Enumeration" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Enumeration.class" extern="1" interface="1">
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<nextElement public="1" set="method"><f a=""><c path="java.util.Enumeration.E"/></f></nextElement>
		<meta>
			<m n=":native"><e>"java.util.Enumeration"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ClassLoader_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassLoader$2.class" module="java.lang.ClassLoader" extern="1">
		<implements path="java.util.Enumeration"><c path="java.net.URL"/></implements>
		<nextElement public="1" set="method"><f a=""><c path="java.net.URL"/></f></nextElement>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<val_e final="1" public="1">
			<c path="java.util.Enumeration"><d/></c>
			<meta><m n=":native"><e>"val$e"</e></m></meta>
		</val_e>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Enumeration"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ClassLoader$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ClassLoader_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassLoader$1.class" module="java.lang.ClassLoader" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<val_sm final="1" public="1">
			<c path="java.lang.SecurityManager"/>
			<meta><m n=":native"><e>"val$sm"</e></m></meta>
		</val_sm>
		<val_name final="1" public="1">
			<c path="String"/>
			<meta><m n=":native"><e>"val$name"</e></m></meta>
		</val_name>
		<val_i final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$i"</e></m></meta>
		</val_i>
		<this_0 final="1" public="1">
			<c path="java.lang.ClassLoader"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.lang.ClassLoader"/>
	<c path="java.lang.SecurityManager"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ClassLoader$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ReflectiveOperationException" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ReflectiveOperationException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.ReflectiveOperationException"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ClassNotFoundException" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassNotFoundException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<getException public="1" set="method"><f a=""><c path="java.lang.Throwable"/></f></getException>
		<getCause public="1" set="method" override="1"><f a=""><c path="java.lang.Throwable"/></f></getCause>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.ClassNotFoundException"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ClassValue" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassValue.class" extern="1" abstract="1">
		<makeEntry public="1" params="T" set="method" static="1"><f a="param1:param2">
	<c path="java.lang.ClassValue_Version"><c path="makeEntry.T"/></c>
	<c path="makeEntry.T"/>
	<c path="java.lang.ClassValue_Entry"><c path="makeEntry.T"/></c>
</f></makeEntry>
		<HASH_MASK final="1" public="1" set="null" static="1"><x path="Int"/></HASH_MASK>
		<computeValue abstract="1" public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.ClassValue.T"/>
</f></computeValue>
		<get public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.ClassValue.T"/>
</f></get>
		<remove public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></remove>
		<put public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.ClassValue.T"/>
	<x path="Void"/>
</f></put>
		<castEntry public="1" set="method"><f a="param1">
	<c path="java.lang.ClassValue_Entry"><d/></c>
	<c path="java.lang.ClassValue_Entry"><c path="java.lang.ClassValue.T"/></c>
</f></castEntry>
		<match public="1" set="method"><f a="param1">
	<c path="java.lang.ClassValue_Entry"><d/></c>
	<x path="Bool"/>
</f></match>
		<version public="1" set="method"><f a=""><c path="java.lang.ClassValue_Version"><c path="java.lang.ClassValue.T"/></c></f></version>
		<bumpVersion public="1" set="method"><f a=""><x path="Void"/></f></bumpVersion>
		<hashCodeForCache final="1" public="1"><x path="Int"/></hashCodeForCache>
		<identity final="1" public="1"><c path="java.lang.ClassValue_Identity"/></identity>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.lang.ClassValue"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ClassValue_Version" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassValue$Version.class" module="java.lang.ClassValue" extern="1">
		<classValue public="1" set="method"><f a=""><c path="java.lang.ClassValue"><c path="java.lang.ClassValue_Version.T"/></c></f></classValue>
		<promise public="1" set="method"><f a=""><c path="java.lang.ClassValue_Entry"><c path="java.lang.ClassValue_Version.T"/></c></f></promise>
		<isLive public="1" set="method"><f a=""><x path="Bool"/></f></isLive>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.ClassValue"><c path="java.lang.ClassValue_Version.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ClassValue$Version"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ClassValue_Identity" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassValue$Identity.class" module="java.lang.ClassValue" extern="1">
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.lang.ClassValue$Identity"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ClassValue_Entry" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassValue$Entry.class" module="java.lang.ClassValue" extern="1">
		<extends path="java.lang.ref.WeakReference"><c path="java.lang.ClassValue_Version"><c path="java.lang.ClassValue_Entry.T"/></c></extends>
		<DEAD_ENTRY final="1" public="1" set="null" static="1"><c path="java.lang.ClassValue_Entry"><d/></c></DEAD_ENTRY>
		<value public="1" set="method"><f a=""><c path="java.lang.ClassValue_Entry.T"/></f></value>
		<isPromise public="1" set="method"><f a=""><x path="Bool"/></f></isPromise>
		<version public="1" set="method"><f a=""><c path="java.lang.ClassValue_Version"><c path="java.lang.ClassValue_Entry.T"/></c></f></version>
		<classValueOrNull public="1" set="method"><f a=""><c path="java.lang.ClassValue"><c path="java.lang.ClassValue_Entry.T"/></c></f></classValueOrNull>
		<isLive public="1" set="method"><f a=""><x path="Bool"/></f></isLive>
		<refreshVersion public="1" set="method"><f a="param1">
	<c path="java.lang.ClassValue_Version"><c path="java.lang.ClassValue_Entry.T"/></c>
	<c path="java.lang.ClassValue_Entry"><c path="java.lang.ClassValue_Entry.T"/></c>
</f></refreshVersion>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.ClassValue_Version"><c path="java.lang.ClassValue_Entry.T"/></c>
				<c path="java.lang.ClassValue_Entry.T"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1">
	<c path="java.lang.ClassValue_Version"><c path="java.lang.ClassValue_Entry.T"/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.ClassValue$Entry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ClassValue_ClassValueMap" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassValue$ClassValueMap.class" module="java.lang.ClassValue" extern="1">
		<extends path="java.util.WeakHashMap">
			<c path="java.lang.ClassValue_Identity"/>
			<c path="java.lang.ClassValue_Entry"><d/></c>
		</extends>
		<loadFromCache public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.lang.ClassValue_Entry"><d/></c></c>
	<x path="Int"/>
	<c path="java.lang.ClassValue_Entry"><d/></c>
</f></loadFromCache>
		<probeHomeLocation public="1" params="T" set="method" static="1"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.lang.ClassValue_Entry"><d/></c></c>
	<c path="java.lang.ClassValue"><c path="probeHomeLocation.T"/></c>
	<c path="java.lang.ClassValue_Entry"><c path="probeHomeLocation.T"/></c>
</f></probeHomeLocation>
		<probeBackupLocations public="1" params="T" set="method" static="1"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.lang.ClassValue_Entry"><d/></c></c>
	<c path="java.lang.ClassValue"><c path="probeBackupLocations.T"/></c>
	<c path="java.lang.ClassValue_Entry"><c path="probeBackupLocations.T"/></c>
</f></probeBackupLocations>
		<getCache public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.ClassValue_Entry"><d/></c></c></f></getCache>
		<startEntry public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.ClassValue"><c path="startEntry.T"/></c>
	<c path="java.lang.ClassValue_Entry"><c path="startEntry.T"/></c>
</f></startEntry>
		<finishEntry public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.lang.ClassValue"><c path="finishEntry.T"/></c>
	<c path="java.lang.ClassValue_Entry"><c path="finishEntry.T"/></c>
	<c path="java.lang.ClassValue_Entry"><c path="finishEntry.T"/></c>
</f></finishEntry>
		<removeEntry public="1" set="method"><f a="param1">
	<c path="java.lang.ClassValue"><d/></c>
	<x path="Void"/>
</f></removeEntry>
		<changeEntry public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.lang.ClassValue"><c path="changeEntry.T"/></c>
	<c path="changeEntry.T"/>
	<x path="Void"/>
</f></changeEntry>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ClassValue$ClassValueMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<abstract path="java.lang.Double" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Double.hx">
		<from>
			<icast><c path="java.lang.DoubleClass"/></icast>
			<icast field="fromFloat"><x path="Float"/></icast>
		</from>
		<this><c path="java.lang.DoubleClass"/></this>
		<to>
			<icast><c path="java.lang.DoubleClass"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":transitive"/>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Double.Double_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Double.hx" private="1" module="java.lang.Double" final="1">
	<toFloat public="1" get="inline" set="null" line="30" static="1">
		<f a="this">
			<c path="java.lang.DoubleClass"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
	<fromFloat public="1" get="inline" set="null" line="33" static="1">
		<f a="b">
			<x path="Float"/>
			<x path="java.lang.Double"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<meta><m n=":native"><e>""</e></m></meta>
</class></impl>
	</abstract>
	<class path="java.lang._Double.Double_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Double.hx" private="1" module="java.lang.Double" final="1">
		<toFloat public="1" get="inline" set="null" line="30" static="1">
			<f a="this">
				<c path="java.lang.DoubleClass"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
		<fromFloat public="1" get="inline" set="null" line="33" static="1">
			<f a="b">
				<x path="Float"/>
				<x path="java.lang.Double"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<meta><m n=":native"><e>""</e></m></meta>
	</class>
	<class path="java.lang.Enum" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Enum.class" extern="1" abstract="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Comparable"><c path="java.lang.Enum.E"/></implements>
		<valueOf public="1" params="T" set="method" static="1"><f a="param1:param2">
	<c path="java.lang.Class"><c path="valueOf.T"/></c>
	<c path="String"/>
	<c path="valueOf.T"/>
</f></valueOf>
		<name final="1" public="1" set="method"><f a=""><c path="String"/></f></name>
		<ordinal final="1" public="1" set="method"><f a=""><x path="Int"/></f></ordinal>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<equals final="1" public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode final="1" public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<clone final="1" public="1" set="method"><f a=""><d/></f></clone>
		<compareTo final="1" public="1" set="method">
			<f a="param1">
				<c path="java.lang.Enum.E"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<getDeclaringClass final="1" public="1" set="method"><f a=""><c path="java.lang.Class"><c path="java.lang.Enum.E"/></c></f></getDeclaringClass>
		<finalize final="1" public="1" set="method"><f a=""><x path="Void"/></f></finalize>
		<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Enum"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<abstract path="java.lang.Float" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Float.hx">
		<from>
			<icast><c path="java.lang.FloatClass"/></icast>
			<icast field="fromFloat"><x path="Single"/></icast>
		</from>
		<this><c path="java.lang.FloatClass"/></this>
		<to>
			<icast><c path="java.lang.FloatClass"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":transitive"/>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Float.Float_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Float.hx" private="1" module="java.lang.Float" final="1">
	<toFloat public="1" get="inline" set="null" line="30" static="1">
		<f a="this">
			<c path="java.lang.FloatClass"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
	<fromFloat public="1" get="inline" set="null" line="33" static="1">
		<f a="b">
			<x path="Single"/>
			<x path="java.lang.Float"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFloat>
	<meta><m n=":native"><e>""</e></m></meta>
</class></impl>
	</abstract>
	<class path="java.lang._Float.Float_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Float.hx" private="1" module="java.lang.Float" final="1">
		<toFloat public="1" get="inline" set="null" line="30" static="1">
			<f a="this">
				<c path="java.lang.FloatClass"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
		<fromFloat public="1" get="inline" set="null" line="33" static="1">
			<f a="b">
				<x path="Single"/>
				<x path="java.lang.Float"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFloat>
		<meta><m n=":native"><e>""</e></m></meta>
	</class>
	<class path="java.lang.FloatClass" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Float.hx" module="java.lang.Float" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Float"/></implements>
		<MAX_EXPONENT final="1" public="1" set="null" static="1"><x path="Int"/></MAX_EXPONENT>
		<MAX_VALUE final="1" public="1" set="null" static="1"><x path="Single"/></MAX_VALUE>
		<MIN_EXPONENT final="1" public="1" set="null" static="1"><x path="Int"/></MIN_EXPONENT>
		<MIN_NORMAL final="1" public="1" set="null" static="1"><x path="Single"/></MIN_NORMAL>
		<MIN_VALUE final="1" public="1" set="null" static="1"><x path="Single"/></MIN_VALUE>
		<NEGATIVE_INFINITY final="1" public="1" set="null" static="1"><x path="Single"/></NEGATIVE_INFINITY>
		<NaN final="1" public="1" set="null" static="1"><x path="Single"/></NaN>
		<POSITIVE_INFINITY final="1" public="1" set="null" static="1"><x path="Single"/></POSITIVE_INFINITY>
		<SIZE final="1" public="1" set="null" static="1"><x path="Int"/></SIZE>
		<TYPE final="1" public="1" set="null" static="1"><c path="java.lang.Class"><x path="Float"/></c></TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Single"/>
				<x path="Single"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<floatToIntBits public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</floatToIntBits>
		<floatToRawIntBits public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</floatToRawIntBits>
		<intBitsToFloat public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
		</intBitsToFloat>
		<_isInfinite public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"isInfinite"</e></m>
				<m n=":overload"/>
			</meta>
		</_isInfinite>
		<_isNaN public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"isNaN"</e></m>
				<m n=":overload"/>
			</meta>
		</_isNaN>
		<parseFloat public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Single"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</parseFloat>
		<toHexString public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toHexString>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="java.lang.Float"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><valueOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="java.lang.Float"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</valueOf></overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<isInfinite public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isInfinite>
		<isNaN public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isNaN>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<doubleValue public="1" set="method" override="1"><f a=""><x path="java.lang.Float"/></f></doubleValue>
		<floatValue public="1" set="method" override="1"><f a=""><x path="Single"/></f></floatValue>
		<intValue public="1" set="method" override="1"><f a=""><x path="Int"/></f></intValue>
		<longValue public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></longValue>
		<new public="1" set="method">
			<f a="param1">
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Float"</e></m>
		</meta>
	</class>
	<class path="java.lang.RuntimeException" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/RuntimeException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="String"/>
	<c path="java.lang.Throwable"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.RuntimeException"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.IllegalArgumentException" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/IllegalArgumentException.class" extern="1">
		<extends path="java.lang.RuntimeException"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.IllegalArgumentException"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<abstract path="java.lang.Integer" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Integer.hx">
		<from>
			<icast><c path="java.lang.IntegerClass"/></icast>
			<icast field="fromInt"><x path="Int"/></icast>
		</from>
		<this><c path="java.lang.IntegerClass"/></this>
		<to>
			<icast><c path="java.lang.IntegerClass"/></icast>
			<icast field="toInt"><x path="Int"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":transitive"/>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Integer.Integer_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Integer.hx" private="1" module="java.lang.Integer" final="1">
	<toInt public="1" get="inline" set="null" line="30" static="1">
		<f a="this">
			<c path="java.lang.IntegerClass"/>
			<x path="Int"/>
		</f>
		<meta><m n=":to"/></meta>
	</toInt>
	<fromInt public="1" get="inline" set="null" line="33" static="1">
		<f a="b">
			<x path="Int"/>
			<x path="java.lang.Integer"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromInt>
	<meta><m n=":native"><e>""</e></m></meta>
</class></impl>
	</abstract>
	<class path="java.lang._Integer.Integer_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Integer.hx" private="1" module="java.lang.Integer" final="1">
		<toInt public="1" get="inline" set="null" line="30" static="1">
			<f a="this">
				<c path="java.lang.IntegerClass"/>
				<x path="Int"/>
			</f>
			<meta><m n=":to"/></meta>
		</toInt>
		<fromInt public="1" get="inline" set="null" line="33" static="1">
			<f a="b">
				<x path="Int"/>
				<x path="java.lang.Integer"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromInt>
		<meta><m n=":native"><e>""</e></m></meta>
	</class>
	<class path="java.lang.Integer_IntegerCache" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Integer.hx" module="java.lang.Integer" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Integer$IntegerCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Integer.IntegerCache"</e>
	</m>
</meta></class>
	<abstract path="java.lang.Long" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Long.hx">
		<from>
			<icast><c path="java.lang.LongClass"/></icast>
			<icast field="fromLong"><x path="haxe.Int64"/></icast>
		</from>
		<this><c path="java.lang.LongClass"/></this>
		<to>
			<icast><c path="java.lang.LongClass"/></icast>
			<icast field="toLong"><x path="haxe.Int64"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":transitive"/>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Long.Long_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Long.hx" private="1" module="java.lang.Long" final="1">
	<toLong public="1" get="inline" set="null" line="30" static="1">
		<f a="this">
			<c path="java.lang.LongClass"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":to"/></meta>
	</toLong>
	<fromLong public="1" get="inline" set="null" line="33" static="1">
		<f a="b">
			<x path="haxe.Int64"/>
			<x path="java.lang.Long"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromLong>
	<meta><m n=":native"><e>""</e></m></meta>
</class></impl>
	</abstract>
	<class path="java.lang._Long.Long_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Long.hx" private="1" module="java.lang.Long" final="1">
		<toLong public="1" get="inline" set="null" line="30" static="1">
			<f a="this">
				<c path="java.lang.LongClass"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":to"/></meta>
		</toLong>
		<fromLong public="1" get="inline" set="null" line="33" static="1">
			<f a="b">
				<x path="haxe.Int64"/>
				<x path="java.lang.Long"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromLong>
		<meta><m n=":native"><e>""</e></m></meta>
	</class>
	<class path="java.lang.LongClass" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Long.hx" module="java.lang.Long" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Long"/></implements>
		<MAX_VALUE final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></MAX_VALUE>
		<MIN_VALUE final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></MIN_VALUE>
		<SIZE final="1" public="1" set="null" static="1"><x path="Int"/></SIZE>
		<TYPE final="1" public="1" set="null" static="1"><c path="java.lang.Class"><x path="java.lang.Long"/></c></TYPE>
		<bitCount public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</bitCount>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<decode public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Long"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</decode>
		<getLong public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="java.lang.Long"/>
				<x path="java.lang.Long"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<getLong public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="haxe.Int64"/>
						<x path="java.lang.Long"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getLong>
				<getLong public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Long"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getLong>
			</overloads>
		</getLong>
		<highestOneBit public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</highestOneBit>
		<lowestOneBit public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</lowestOneBit>
		<numberOfLeadingZeros public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</numberOfLeadingZeros>
		<numberOfTrailingZeros public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</numberOfTrailingZeros>
		<parseLong public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><parseLong public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<x path="Int"/>
		<x path="haxe.Int64"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</parseLong></overloads>
		</parseLong>
		<reverse public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverse>
		<reverseBytes public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverseBytes>
		<rotateLeft public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</rotateLeft>
		<rotateRight public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</rotateRight>
		<signum public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</signum>
		<toBinaryString public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toBinaryString>
		<toHexString public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toHexString>
		<toOctalString public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toOctalString>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads><toString public="1" set="method">
	<f a="param1:param2">
		<x path="haxe.Int64"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta>
		<m n=":native"><e>"toString"</e></m>
		<m n=":overload"/>
	</meta>
</toString></overloads>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="java.lang.Long"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<valueOf public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Long"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="java.lang.Long"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
			</overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<x path="java.lang.Long"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<doubleValue public="1" set="method" override="1"><f a=""><x path="Float"/></f></doubleValue>
		<floatValue public="1" set="method" override="1"><f a=""><x path="Single"/></f></floatValue>
		<intValue public="1" set="method" override="1"><f a=""><x path="Int"/></f></intValue>
		<longValue public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></longValue>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<x path="haxe.Int64"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Long"</e></m>
		</meta>
	</class>
	<class path="java.lang.Long_LongCache" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Long.hx" module="java.lang.Long" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Long$LongCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Long.LongCache"</e>
	</m>
</meta></class>
	<class path="java.lang.Math" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Math.class" extern="1">
		<sin public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<cos public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<tan public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<asin public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<atan public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<toRadians public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></toRadians>
		<toDegrees public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></toDegrees>
		<exp public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></exp>
		<log public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></log>
		<log10 public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></log10>
		<sqrt public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></sqrt>
		<cbrt public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></cbrt>
		<IEEEremainder public="1" set="method" static="1"><f a="param1:param2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></IEEEremainder>
		<ceil public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></ceil>
		<floor public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></floor>
		<rint public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></rint>
		<atan2 public="1" set="method" static="1"><f a="param1:param2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<pow public="1" set="method" static="1"><f a="param1:param2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<round public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Int"/>
			</f>
			<overloads><round public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></round></overloads>
		</round>
		<random public="1" set="method" static="1"><f a=""><x path="Float"/></f></random>
		<addExact public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><addExact public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></addExact></overloads>
		</addExact>
		<subtractExact public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><subtractExact public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></subtractExact></overloads>
		</subtractExact>
		<multiplyExact public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><multiplyExact public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></multiplyExact></overloads>
		</multiplyExact>
		<incrementExact public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><incrementExact public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></incrementExact></overloads>
		</incrementExact>
		<decrementExact public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><decrementExact public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></decrementExact></overloads>
		</decrementExact>
		<negateExact public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><negateExact public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></negateExact></overloads>
		</negateExact>
		<toIntExact public="1" set="method" static="1"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></toIntExact>
		<floorDiv public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><floorDiv public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></floorDiv></overloads>
		</floorDiv>
		<floorMod public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><floorMod public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></floorMod></overloads>
		</floorMod>
		<abs public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads>
				<abs public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></abs>
				<abs public="1" set="method"><f a="param1">
	<x path="Single"/>
	<x path="Single"/>
</f></abs>
				<abs public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></abs>
			</overloads>
		</abs>
		<max public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads>
				<max public="1" set="method"><f a="param1:param2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></max>
				<max public="1" set="method"><f a="param1:param2">
	<x path="Single"/>
	<x path="Single"/>
	<x path="Single"/>
</f></max>
				<max public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></max>
			</overloads>
		</max>
		<min public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads>
				<min public="1" set="method"><f a="param1:param2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></min>
				<min public="1" set="method"><f a="param1:param2">
	<x path="Single"/>
	<x path="Single"/>
	<x path="Single"/>
</f></min>
				<min public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></min>
			</overloads>
		</min>
		<ulp public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<overloads><ulp public="1" set="method"><f a="param1">
	<x path="Single"/>
	<x path="Single"/>
</f></ulp></overloads>
		</ulp>
		<signum public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<overloads><signum public="1" set="method"><f a="param1">
	<x path="Single"/>
	<x path="Single"/>
</f></signum></overloads>
		</signum>
		<sinh public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></sinh>
		<cosh public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></cosh>
		<tanh public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></tanh>
		<hypot public="1" set="method" static="1"><f a="param1:param2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></hypot>
		<expm1 public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></expm1>
		<log1p public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></log1p>
		<copySign public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<overloads><copySign public="1" set="method"><f a="param1:param2">
	<x path="Single"/>
	<x path="Single"/>
	<x path="Single"/>
</f></copySign></overloads>
		</copySign>
		<getExponent public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Int"/>
			</f>
			<overloads><getExponent public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Int"/>
</f></getExponent></overloads>
		</getExponent>
		<nextAfter public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<overloads><nextAfter public="1" set="method"><f a="param1:param2">
	<x path="Single"/>
	<x path="Float"/>
	<x path="Single"/>
</f></nextAfter></overloads>
		</nextAfter>
		<nextUp public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<overloads><nextUp public="1" set="method"><f a="param1">
	<x path="Single"/>
	<x path="Single"/>
</f></nextUp></overloads>
		</nextUp>
		<nextDown public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<overloads><nextDown public="1" set="method"><f a="param1">
	<x path="Single"/>
	<x path="Single"/>
</f></nextDown></overloads>
		</nextDown>
		<scalb public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<overloads><scalb public="1" set="method"><f a="param1:param2">
	<x path="Single"/>
	<x path="Int"/>
	<x path="Single"/>
</f></scalb></overloads>
		</scalb>
		<powerOfTwoD public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Float"/>
</f></powerOfTwoD>
		<powerOfTwoF public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Single"/>
</f></powerOfTwoF>
		<E final="1" public="1" set="null" static="1"><x path="Float"/></E>
		<PI final="1" public="1" set="null" static="1"><x path="Float"/></PI>
		<twoToTheDoubleScaleUp public="1" static="1"><x path="Float"/></twoToTheDoubleScaleUp>
		<twoToTheDoubleScaleDown public="1" static="1"><x path="Float"/></twoToTheDoubleScaleDown>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Math"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Math_RandomNumberGeneratorHolder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Math$RandomNumberGeneratorHolder.class" module="java.lang.Math" extern="1">
		<randomNumberGenerator final="1" public="1" set="null" static="1"><c path="java.util.Random"/></randomNumberGenerator>
		<meta>
			<m n=":native"><e>"java.lang.Math$RandomNumberGeneratorHolder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.NoSuchFieldException" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/NoSuchFieldException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.NoSuchFieldException"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.NoSuchMethodException" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/NoSuchMethodException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.NoSuchMethodException"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.NullPointerException" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/NullPointerException.class" extern="1">
		<extends path="java.lang.RuntimeException"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.NullPointerException"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Package" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Package.class" extern="1">
		<implements path="java.lang.reflect.AnnotatedElement"/>
		<getPackage public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Package"/>
			</f>
			<overloads><getPackage public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.Package"/>
</f></getPackage></overloads>
		</getPackage>
		<getPackages public="1" set="method" static="1"><f a=""><c path="java.NativeArray"><c path="java.lang.Package"/></c></f></getPackages>
		<getSystemPackage public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.lang.Package"/>
</f></getSystemPackage>
		<getSystemPackages public="1" set="method" static="1"><f a=""><c path="java.NativeArray"><c path="java.lang.Package"/></c></f></getSystemPackages>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getSpecificationTitle public="1" set="method"><f a=""><c path="String"/></f></getSpecificationTitle>
		<getSpecificationVersion public="1" set="method"><f a=""><c path="String"/></f></getSpecificationVersion>
		<getSpecificationVendor public="1" set="method"><f a=""><c path="String"/></f></getSpecificationVendor>
		<getImplementationTitle public="1" set="method"><f a=""><c path="String"/></f></getImplementationTitle>
		<getImplementationVersion public="1" set="method"><f a=""><c path="String"/></f></getImplementationVersion>
		<getImplementationVendor public="1" set="method"><f a=""><c path="String"/></f></getImplementationVendor>
		<isSealed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<overloads><isSealed public="1" set="method"><f a="param1">
	<c path="java.net.URL"/>
	<x path="Bool"/>
</f></isSealed></overloads>
		</isSealed>
		<isCompatibleWith public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></isCompatibleWith>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<getAnnotation public="1" params="A" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotation.A"/></c>
	<c path="getAnnotation.A"/>
</f></getAnnotation>
		<isAnnotationPresent public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
	<x path="Bool"/>
</f></isAnnotationPresent>
		<getAnnotationsByType public="1" params="A" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotationsByType.A"/></c>
	<c path="java.NativeArray"><c path="getAnnotationsByType.A"/></c>
</f></getAnnotationsByType>
		<getAnnotations public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f></getAnnotations>
		<getDeclaredAnnotation public="1" params="A" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getDeclaredAnnotation.A"/></c>
	<c path="getDeclaredAnnotation.A"/>
</f></getDeclaredAnnotation>
		<getDeclaredAnnotationsByType public="1" params="A" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getDeclaredAnnotationsByType.A"/></c>
	<c path="java.NativeArray"><c path="getDeclaredAnnotationsByType.A"/></c>
</f></getDeclaredAnnotationsByType>
		<getDeclaredAnnotations public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f></getDeclaredAnnotations>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6:param7:param8:param9">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.net.URL"/>
				<c path="java.lang.ClassLoader"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="String"/>
	<c path="java.util.jar.Manifest"/>
	<c path="java.net.URL"/>
	<c path="java.lang.ClassLoader"/>
	<c path="java.lang.Package_1"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.Package"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Package_1PackageInfoProxy" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Package$1PackageInfoProxy.class" module="java.lang.Package" extern="1">
		<this_0 final="1" public="1">
			<c path="java.lang.Package"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.Package"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.Package$1PackageInfoProxy"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Package_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Package$1.class" module="java.lang.Package" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.lang.Package"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Package"/></f></run>
		<val_iname final="1" public="1">
			<c path="String"/>
			<meta><m n=":native"><e>"val$iname"</e></m></meta>
		</val_iname>
		<val_fn final="1" public="1">
			<c path="String"/>
			<meta><m n=":native"><e>"val$fn"</e></m></meta>
		</val_fn>
		<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.Package$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Process" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Process.class" extern="1" abstract="1">
		<getOutputStream abstract="1" public="1" set="method"><f a=""><c path="java.io.OutputStream"/></f></getOutputStream>
		<getInputStream abstract="1" public="1" set="method"><f a=""><c path="java.io.InputStream"/></f></getInputStream>
		<getErrorStream abstract="1" public="1" set="method"><f a=""><c path="java.io.InputStream"/></f></getErrorStream>
		<waitFor abstract="1" public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><waitFor public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></waitFor></overloads>
		</waitFor>
		<exitValue abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></exitValue>
		<destroy abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></destroy>
		<destroyForcibly public="1" set="method"><f a=""><c path="java.lang.Process"/></f></destroyForcibly>
		<isAlive public="1" set="method"><f a=""><x path="Bool"/></f></isAlive>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.lang.Process"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder.class" extern="1">
		<command public="1" set="method">
			<f a="param1">
				<c path="java.util.List"><c path="String"/></c>
				<c path="java.lang.ProcessBuilder"/>
			</f>
			<overloads>
				<command public="1" set="method"><f a=""><c path="java.util.List"><c path="String"/></c></f></command>
				<command public="1" set="method"><f a="param1">
	<x path="haxe.Rest"><c path="String"/></x>
	<c path="java.lang.ProcessBuilder"/>
</f></command>
			</overloads>
		</command>
		<environment public="1" set="method">
			<f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="String"/>
</c></f>
			<overloads><environment public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="String"/></c>
	<c path="java.lang.ProcessBuilder"/>
</f></environment></overloads>
		</environment>
		<directory public="1" set="method">
			<f a=""><c path="java.io.File"/></f>
			<overloads><directory public="1" set="method"><f a="param1">
	<c path="java.io.File"/>
	<c path="java.lang.ProcessBuilder"/>
</f></directory></overloads>
		</directory>
		<redirectInput public="1" set="method">
			<f a="param1">
				<c path="java.lang.ProcessBuilder_Redirect"/>
				<c path="java.lang.ProcessBuilder"/>
			</f>
			<overloads>
				<redirectInput public="1" set="method"><f a=""><c path="java.lang.ProcessBuilder_Redirect"/></f></redirectInput>
				<redirectInput public="1" set="method"><f a="param1">
	<c path="java.io.File"/>
	<c path="java.lang.ProcessBuilder"/>
</f></redirectInput>
			</overloads>
		</redirectInput>
		<redirectOutput public="1" set="method">
			<f a="param1">
				<c path="java.lang.ProcessBuilder_Redirect"/>
				<c path="java.lang.ProcessBuilder"/>
			</f>
			<overloads>
				<redirectOutput public="1" set="method"><f a=""><c path="java.lang.ProcessBuilder_Redirect"/></f></redirectOutput>
				<redirectOutput public="1" set="method"><f a="param1">
	<c path="java.io.File"/>
	<c path="java.lang.ProcessBuilder"/>
</f></redirectOutput>
			</overloads>
		</redirectOutput>
		<redirectError public="1" set="method">
			<f a="param1">
				<c path="java.lang.ProcessBuilder_Redirect"/>
				<c path="java.lang.ProcessBuilder"/>
			</f>
			<overloads>
				<redirectError public="1" set="method"><f a=""><c path="java.lang.ProcessBuilder_Redirect"/></f></redirectError>
				<redirectError public="1" set="method"><f a="param1">
	<c path="java.io.File"/>
	<c path="java.lang.ProcessBuilder"/>
</f></redirectError>
			</overloads>
		</redirectError>
		<inheritIO public="1" set="method"><f a=""><c path="java.lang.ProcessBuilder"/></f></inheritIO>
		<redirectErrorStream public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<overloads><redirectErrorStream public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<c path="java.lang.ProcessBuilder"/>
</f></redirectErrorStream></overloads>
		</redirectErrorStream>
		<start public="1" set="method"><f a=""><c path="java.lang.Process"/></f></start>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.List"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1">
	<x path="haxe.Rest"><c path="String"/></x>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.ProcessBuilder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder_Redirect" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$Redirect.class" module="java.lang.ProcessBuilder" extern="1" abstract="1">
		<from public="1" set="method" static="1"><f a="param1">
	<c path="java.io.File"/>
	<c path="java.lang.ProcessBuilder_Redirect"/>
</f></from>
		<to public="1" set="method" static="1"><f a="param1">
	<c path="java.io.File"/>
	<c path="java.lang.ProcessBuilder_Redirect"/>
</f></to>
		<appendTo public="1" set="method" static="1"><f a="param1">
	<c path="java.io.File"/>
	<c path="java.lang.ProcessBuilder_Redirect"/>
</f></appendTo>
		<PIPE final="1" public="1" set="null" static="1"><c path="java.lang.ProcessBuilder_Redirect"/></PIPE>
		<INHERIT final="1" public="1" set="null" static="1"><c path="java.lang.ProcessBuilder_Redirect"/></INHERIT>
		<type abstract="1" public="1" set="method"><f a=""><e path="java.lang.ProcessBuilder_Redirect_Type"/></f></type>
		<file public="1" set="method"><f a=""><c path="java.io.File"/></f></file>
		<append public="1" set="method"><f a=""><x path="Bool"/></f></append>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.ProcessBuilder_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ProcessBuilder$Redirect"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.lang.ProcessBuilder_Redirect_Type" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$Redirect$Type.class" module="java.lang.ProcessBuilder">
		<PIPE/>
		<INHERIT/>
		<READ/>
		<WRITE/>
		<APPEND/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.lang.ProcessBuilder$Redirect$Type"</e></m>
		</meta>
	</enum>
	<class path="java.lang.ProcessBuilder_Redirect_5" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$Redirect$5.class" module="java.lang.ProcessBuilder" extern="1">
		<extends path="java.lang.ProcessBuilder_Redirect"/>
		<type public="1" set="method" override="1"><f a=""><e path="java.lang.ProcessBuilder_Redirect_Type"/></f></type>
		<file public="1" set="method" override="1"><f a=""><c path="java.io.File"/></f></file>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<append public="1" set="method" override="1"><f a=""><x path="Bool"/></f></append>
		<val_file final="1" public="1">
			<c path="java.io.File"/>
			<meta><m n=":native"><e>"val$file"</e></m></meta>
		</val_file>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.File"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ProcessBuilder$Redirect$5"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder_Redirect_4" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$Redirect$4.class" module="java.lang.ProcessBuilder" extern="1">
		<extends path="java.lang.ProcessBuilder_Redirect"/>
		<type public="1" set="method" override="1"><f a=""><e path="java.lang.ProcessBuilder_Redirect_Type"/></f></type>
		<file public="1" set="method" override="1"><f a=""><c path="java.io.File"/></f></file>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<append public="1" set="method" override="1"><f a=""><x path="Bool"/></f></append>
		<val_file final="1" public="1">
			<c path="java.io.File"/>
			<meta><m n=":native"><e>"val$file"</e></m></meta>
		</val_file>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.File"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ProcessBuilder$Redirect$4"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder_Redirect_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$Redirect$3.class" module="java.lang.ProcessBuilder" extern="1">
		<extends path="java.lang.ProcessBuilder_Redirect"/>
		<type public="1" set="method" override="1"><f a=""><e path="java.lang.ProcessBuilder_Redirect_Type"/></f></type>
		<file public="1" set="method" override="1"><f a=""><c path="java.io.File"/></f></file>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<val_file final="1" public="1">
			<c path="java.io.File"/>
			<meta><m n=":native"><e>"val$file"</e></m></meta>
		</val_file>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.File"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ProcessBuilder$Redirect$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder_Redirect_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$Redirect$2.class" module="java.lang.ProcessBuilder" extern="1">
		<extends path="java.lang.ProcessBuilder_Redirect"/>
		<type public="1" set="method" override="1"><f a=""><e path="java.lang.ProcessBuilder_Redirect_Type"/></f></type>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.lang.ProcessBuilder$Redirect$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder_Redirect_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$Redirect$1.class" module="java.lang.ProcessBuilder" extern="1">
		<extends path="java.lang.ProcessBuilder_Redirect"/>
		<type public="1" set="method" override="1"><f a=""><e path="java.lang.ProcessBuilder_Redirect_Type"/></f></type>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.lang.ProcessBuilder$Redirect$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder_NullOutputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$NullOutputStream.class" module="java.lang.ProcessBuilder" extern="1">
		<extends path="java.io.OutputStream"/>
		<INSTANCE final="1" public="1" set="null" static="1"><c path="java.lang.ProcessBuilder_NullOutputStream"/></INSTANCE>
		<write public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></write>
		<meta>
			<m n=":native"><e>"java.lang.ProcessBuilder$NullOutputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder_NullInputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$NullInputStream.class" module="java.lang.ProcessBuilder" extern="1">
		<extends path="java.io.InputStream"/>
		<INSTANCE final="1" public="1" set="null" static="1"><c path="java.lang.ProcessBuilder_NullInputStream"/></INSTANCE>
		<read public="1" set="method" override="1"><f a=""><x path="Int"/></f></read>
		<available public="1" set="method" override="1"><f a=""><x path="Int"/></f></available>
		<meta>
			<m n=":native"><e>"java.lang.ProcessBuilder$NullInputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$1.class" module="java.lang.ProcessBuilder" extern="1"><meta>
	<m n=":native"><e>"java.lang.ProcessBuilder$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.lang.Runtime" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Runtime.class" extern="1">
		<getRuntime public="1" set="method" static="1"><f a=""><c path="java.lang.Runtime"/></f></getRuntime>
		<runFinalizersOnExit public="1" set="method" static="1">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</runFinalizersOnExit>
		<exit public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></exit>
		<addShutdownHook public="1" set="method"><f a="param1">
	<c path="java.lang.Thread"/>
	<x path="Void"/>
</f></addShutdownHook>
		<removeShutdownHook public="1" set="method"><f a="param1">
	<c path="java.lang.Thread"/>
	<x path="Bool"/>
</f></removeShutdownHook>
		<halt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></halt>
		<exec public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Process"/>
			</f>
			<overloads>
				<exec public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><c path="String"/></c>
	<c path="java.NativeArray"><c path="String"/></c>
	<c path="java.io.File"/>
	<c path="java.lang.Process"/>
</f></exec>
				<exec public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="String"/></c>
	<c path="java.NativeArray"><c path="String"/></c>
	<c path="java.lang.Process"/>
</f></exec>
				<exec public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="String"/></c>
	<c path="java.lang.Process"/>
</f></exec>
				<exec public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<c path="java.NativeArray"><c path="String"/></c>
	<c path="java.io.File"/>
	<c path="java.lang.Process"/>
</f></exec>
				<exec public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.NativeArray"><c path="String"/></c>
	<c path="java.lang.Process"/>
</f></exec>
			</overloads>
		</exec>
		<availableProcessors public="1" set="method"><f a=""><x path="Int"/></f></availableProcessors>
		<freeMemory public="1" set="method"><f a=""><x path="haxe.Int64"/></f></freeMemory>
		<totalMemory public="1" set="method"><f a=""><x path="haxe.Int64"/></f></totalMemory>
		<maxMemory public="1" set="method"><f a=""><x path="haxe.Int64"/></f></maxMemory>
		<gc public="1" set="method"><f a=""><x path="Void"/></f></gc>
		<runFinalization public="1" set="method"><f a=""><x path="Void"/></f></runFinalization>
		<traceInstructions public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></traceInstructions>
		<traceMethodCalls public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></traceMethodCalls>
		<load public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></load>
		<load0 public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Class"><d/></c>
	<c path="String"/>
	<x path="Void"/>
</f></load0>
		<loadLibrary public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></loadLibrary>
		<loadLibrary0 public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Class"><d/></c>
	<c path="String"/>
	<x path="Void"/>
</f></loadLibrary0>
		<getLocalizedInputStream public="1" set="method">
			<f a="param1">
				<c path="java.io.InputStream"/>
				<c path="java.io.InputStream"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</getLocalizedInputStream>
		<getLocalizedOutputStream public="1" set="method">
			<f a="param1">
				<c path="java.io.OutputStream"/>
				<c path="java.io.OutputStream"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</getLocalizedOutputStream>
		<meta>
			<m n=":native"><e>"java.lang.Runtime"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.SecurityManager" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/SecurityManager.class" extern="1">
		<getInCheck public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":deprecated"/></meta>
		</getInCheck>
		<getClassContext public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f></getClassContext>
		<currentClassLoader public="1" set="method">
			<f a=""><c path="java.lang.ClassLoader"/></f>
			<meta><m n=":deprecated"/></meta>
		</currentClassLoader>
		<currentLoadedClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":deprecated"/></meta>
		</currentLoadedClass>
		<classDepth public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</classDepth>
		<classLoaderDepth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":deprecated"/></meta>
		</classLoaderDepth>
		<inClass public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</inClass>
		<inClassLoader public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":deprecated"/></meta>
		</inClassLoader>
		<getSecurityContext public="1" set="method"><f a=""><d/></f></getSecurityContext>
		<checkPermission public="1" set="method">
			<f a="param1">
				<c path="java.security.Permission"/>
				<x path="Void"/>
			</f>
			<overloads><checkPermission public="1" set="method"><f a="param1:param2">
	<c path="java.security.Permission"/>
	<d/>
	<x path="Void"/>
</f></checkPermission></overloads>
		</checkPermission>
		<checkCreateClassLoader public="1" set="method"><f a=""><x path="Void"/></f></checkCreateClassLoader>
		<checkAccess public="1" set="method">
			<f a="param1">
				<c path="java.lang.Thread"/>
				<x path="Void"/>
			</f>
			<overloads><checkAccess public="1" set="method"><f a="param1">
	<c path="java.lang.ThreadGroup"/>
	<x path="Void"/>
</f></checkAccess></overloads>
		</checkAccess>
		<checkExit public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></checkExit>
		<checkExec public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></checkExec>
		<checkLink public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></checkLink>
		<checkRead public="1" set="method">
			<f a="param1">
				<c path="java.io.FileDescriptor"/>
				<x path="Void"/>
			</f>
			<overloads>
				<checkRead public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></checkRead>
				<checkRead public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></checkRead>
			</overloads>
		</checkRead>
		<checkWrite public="1" set="method">
			<f a="param1">
				<c path="java.io.FileDescriptor"/>
				<x path="Void"/>
			</f>
			<overloads><checkWrite public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></checkWrite></overloads>
		</checkWrite>
		<checkDelete public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></checkDelete>
		<checkConnect public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><checkConnect public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></checkConnect></overloads>
		</checkConnect>
		<checkListen public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></checkListen>
		<checkAccept public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></checkAccept>
		<checkMulticast public="1" set="method">
			<f a="param1">
				<c path="java.net.InetAddress"/>
				<x path="Void"/>
			</f>
			<overloads><checkMulticast public="1" set="method">
	<f a="param1:param2">
		<c path="java.net.InetAddress"/>
		<t path="java.types.Int8"/>
		<x path="Void"/>
	</f>
	<meta><m n=":deprecated"/></meta>
</checkMulticast></overloads>
		</checkMulticast>
		<checkPropertiesAccess public="1" set="method"><f a=""><x path="Void"/></f></checkPropertiesAccess>
		<checkPropertyAccess public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></checkPropertyAccess>
		<checkTopLevelWindow public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</checkTopLevelWindow>
		<checkPrintJobAccess public="1" set="method"><f a=""><x path="Void"/></f></checkPrintJobAccess>
		<checkSystemClipboardAccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":deprecated"/></meta>
		</checkSystemClipboardAccess>
		<checkAwtEventQueueAccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":deprecated"/></meta>
		</checkAwtEventQueueAccess>
		<checkPackageAccess public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></checkPackageAccess>
		<checkPackageDefinition public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></checkPackageDefinition>
		<checkSetFactory public="1" set="method"><f a=""><x path="Void"/></f></checkSetFactory>
		<checkMemberAccess public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.Class"><d/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</checkMemberAccess>
		<checkSecurityAccess public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></checkSecurityAccess>
		<getThreadGroup public="1" set="method"><f a=""><c path="java.lang.ThreadGroup"/></f></getThreadGroup>
		<inCheck public="1">
			<x path="Bool"/>
			<meta><m n=":deprecated"/></meta>
		</inCheck>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.lang.SecurityManager"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.SecurityManager_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/SecurityManager$2.class" module="java.lang.SecurityManager" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="String"/></implements>
		<run public="1" set="method"><f a=""><c path="String"/></f></run>
		<this_0 final="1" public="1">
			<c path="java.lang.SecurityManager"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.SecurityManager"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.SecurityManager$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.SecurityManager_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/SecurityManager$1.class" module="java.lang.SecurityManager" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="String"/></implements>
		<run public="1" set="method"><f a=""><c path="String"/></f></run>
		<this_0 final="1" public="1">
			<c path="java.lang.SecurityManager"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.SecurityManager"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.SecurityManager$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<abstract path="java.lang.Short" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Short.hx">
		<from>
			<icast><c path="java.lang.ShortClass"/></icast>
			<icast field="fromShort"><t path="java.types.Int16"/></icast>
		</from>
		<this><c path="java.lang.ShortClass"/></this>
		<to>
			<icast><c path="java.lang.ShortClass"/></icast>
			<icast field="toShort"><x path="java.Int16"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":transitive"/>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Short.Short_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Short.hx" private="1" module="java.lang.Short" final="1">
	<toShort public="1" get="inline" set="null" line="30" static="1">
		<f a="this">
			<c path="java.lang.ShortClass"/>
			<t path="java.types.Int16"/>
		</f>
		<meta><m n=":to"/></meta>
	</toShort>
	<fromShort public="1" get="inline" set="null" line="33" static="1">
		<f a="b">
			<t path="java.types.Int16"/>
			<x path="java.lang.Short"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromShort>
	<meta><m n=":native"><e>""</e></m></meta>
</class></impl>
	</abstract>
	<class path="java.lang._Short.Short_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Short.hx" private="1" module="java.lang.Short" final="1">
		<toShort public="1" get="inline" set="null" line="30" static="1">
			<f a="this">
				<c path="java.lang.ShortClass"/>
				<t path="java.types.Int16"/>
			</f>
			<meta><m n=":to"/></meta>
		</toShort>
		<fromShort public="1" get="inline" set="null" line="33" static="1">
			<f a="b">
				<t path="java.types.Int16"/>
				<x path="java.lang.Short"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromShort>
		<meta><m n=":native"><e>""</e></m></meta>
	</class>
	<class path="java.lang.ShortClass" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Short.hx" module="java.lang.Short" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Short"/></implements>
		<MAX_VALUE final="1" public="1" set="null" static="1"><t path="java.types.Int16"/></MAX_VALUE>
		<MIN_VALUE final="1" public="1" set="null" static="1"><t path="java.types.Int16"/></MIN_VALUE>
		<SIZE final="1" public="1" set="null" static="1"><x path="Int"/></SIZE>
		<TYPE final="1" public="1" set="null" static="1"><c path="java.lang.Class"><x path="java.lang.Short"/></c></TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Int16"/>
				<t path="java.types.Int16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<decode public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Short"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</decode>
		<parseShort public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<t path="java.types.Int16"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><parseShort public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<t path="java.types.Int16"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</parseShort></overloads>
		</parseShort>
		<reverseBytes public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Int16"/>
				<t path="java.types.Int16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverseBytes>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Int16"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Int16"/>
				<x path="java.lang.Short"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<valueOf public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Short"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="java.lang.Short"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
			</overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Short"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<doubleValue public="1" set="method" override="1"><f a=""><x path="Float"/></f></doubleValue>
		<floatValue public="1" set="method" override="1"><f a=""><x path="Single"/></f></floatValue>
		<intValue public="1" set="method" override="1"><f a=""><x path="Int"/></f></intValue>
		<longValue public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></longValue>
		<new public="1" set="method">
			<f a="param1">
				<t path="java.types.Int16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.Short"</e></m>
		</meta>
	</class>
	<class path="java.lang.Short_ShortCache" params="" file="/home/runner/work/haxe/haxe/std/java/lang/Short.hx" module="java.lang.Short" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Short$ShortCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Short.ShortCache"</e>
	</m>
</meta></class>
	<class path="java.lang.StackTraceElement" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/StackTraceElement.class" extern="1">
		<implements path="java.io.Serializable"/>
		<getFileName public="1" set="method"><f a=""><c path="String"/></f></getFileName>
		<getLineNumber public="1" set="method"><f a=""><x path="Int"/></f></getLineNumber>
		<getClassName public="1" set="method"><f a=""><c path="String"/></f></getClassName>
		<getMethodName public="1" set="method"><f a=""><c path="String"/></f></getMethodName>
		<isNativeMethod public="1" set="method"><f a=""><x path="Bool"/></f></isNativeMethod>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.StackTraceElement"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.StringBuffer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/StringBuffer.class" extern="1">
		<extends path="java.lang.AbstractStringBuilder"/>
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.CharSequence"/>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<length public="1" set="method" override="1"><f a=""><x path="Int"/></f></length>
		<capacity public="1" set="method" override="1"><f a=""><x path="Int"/></f></capacity>
		<ensureCapacity public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></ensureCapacity>
		<trimToSize public="1" set="method" override="1"><f a=""><x path="Void"/></f></trimToSize>
		<setLength public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setLength>
		<charAt public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<t path="java.types.Char16"/>
</f></charAt>
		<codePointAt public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointAt>
		<codePointBefore public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointBefore>
		<codePointCount public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></codePointCount>
		<offsetByCodePoints public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></offsetByCodePoints>
		<getChars public="1" set="method" override="1"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></getChars>
		<setCharAt public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></setCharAt>
		<append public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<overloads>
				<append public="1" set="method"><f a="param1">
	<x path="Float"/>
	<c path="java.lang.StringBuffer"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<x path="Single"/>
	<c path="java.lang.StringBuffer"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.lang.StringBuffer"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.StringBuffer"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<c path="java.lang.StringBuffer"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<c path="java.lang.StringBuffer"/>
</f></append>
				<append public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.StringBuffer"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<c path="java.lang.StringBuffer"/>
</f></append>
				<append public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.StringBuffer"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<c path="java.lang.StringBuffer"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<c path="java.lang.AbstractStringBuilder"/>
	<c path="java.lang.StringBuffer"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<c path="java.lang.StringBuffer"/>
	<c path="java.lang.StringBuffer"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.lang.StringBuffer"/>
</f></append>
			</overloads>
		</append>
		<appendCodePoint public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.StringBuffer"/>
</f></appendCodePoint>
		<delete public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.StringBuffer"/>
</f></delete>
		<deleteCharAt public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.StringBuffer"/>
</f></deleteCharAt>
		<replace public="1" set="method" override="1"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.lang.StringBuffer"/>
</f></replace>
		<substring public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<overloads><substring public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></substring></overloads>
		</substring>
		<subSequence public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
</f></subSequence>
		<insert public="1" set="method" override="1">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<overloads>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Float"/>
	<c path="java.lang.StringBuffer"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Single"/>
	<c path="java.lang.StringBuffer"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<c path="java.lang.StringBuffer"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.StringBuffer"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<t path="java.types.Char16"/>
	<c path="java.lang.StringBuffer"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Bool"/>
	<c path="java.lang.StringBuffer"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.StringBuffer"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<c path="java.lang.StringBuffer"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<c path="java.lang.StringBuffer"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="String"/>
	<c path="java.lang.StringBuffer"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<d/>
	<c path="java.lang.StringBuffer"/>
</f></insert>
			</overloads>
		</insert>
		<indexOf public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<overloads><indexOf public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf></overloads>
		</indexOf>
		<lastIndexOf public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<overloads><lastIndexOf public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf></overloads>
		</lastIndexOf>
		<reverse public="1" set="method" override="1"><f a=""><c path="java.lang.StringBuffer"/></f></reverse>
		<toString public="1" set="method" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.StringBuffer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.StringBuilder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/StringBuilder.class" extern="1">
		<extends path="java.lang.AbstractStringBuilder"/>
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.CharSequence"/>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<append public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<c path="java.lang.StringBuilder"/>
			</f>
			<overloads>
				<append public="1" set="method"><f a="param1">
	<x path="Float"/>
	<c path="java.lang.StringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<x path="Single"/>
	<c path="java.lang.StringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.lang.StringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.StringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<c path="java.lang.StringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<c path="java.lang.StringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.StringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<c path="java.lang.StringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.StringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<c path="java.lang.StringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<c path="java.lang.StringBuffer"/>
	<c path="java.lang.StringBuilder"/>
</f></append>
				<append public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.lang.StringBuilder"/>
</f></append>
			</overloads>
		</append>
		<appendCodePoint public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.StringBuilder"/>
</f></appendCodePoint>
		<delete public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.StringBuilder"/>
</f></delete>
		<deleteCharAt public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.StringBuilder"/>
</f></deleteCharAt>
		<replace public="1" set="method" override="1"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.lang.StringBuilder"/>
</f></replace>
		<insert public="1" set="method" override="1">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.StringBuilder"/>
			</f>
			<overloads>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Float"/>
	<c path="java.lang.StringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Single"/>
	<c path="java.lang.StringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<c path="java.lang.StringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.StringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<t path="java.types.Char16"/>
	<c path="java.lang.StringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Bool"/>
	<c path="java.lang.StringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.StringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<c path="java.lang.StringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<c path="java.lang.StringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="String"/>
	<c path="java.lang.StringBuilder"/>
</f></insert>
				<insert public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<d/>
	<c path="java.lang.StringBuilder"/>
</f></insert>
			</overloads>
		</insert>
		<indexOf public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<overloads><indexOf public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf></overloads>
		</indexOf>
		<lastIndexOf public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<overloads><lastIndexOf public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf></overloads>
		</lastIndexOf>
		<reverse public="1" set="method" override="1"><f a=""><c path="java.lang.StringBuilder"/></f></reverse>
		<toString public="1" set="method" override="1"><f a=""><c path="String"/></f></toString>
		<substring public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<overloads><substring public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="String"/>
</f></substring></overloads>
		</substring>
		<subSequence public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
</f></subSequence>
		<setCharAt public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></setCharAt>
		<getChars public="1" set="method" override="1"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></getChars>
		<offsetByCodePoints public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></offsetByCodePoints>
		<codePointCount public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></codePointCount>
		<codePointBefore public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointBefore>
		<codePointAt public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointAt>
		<charAt public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<t path="java.types.Char16"/>
</f></charAt>
		<setLength public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setLength>
		<trimToSize public="1" set="method" override="1"><f a=""><x path="Void"/></f></trimToSize>
		<ensureCapacity public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></ensureCapacity>
		<capacity public="1" set="method" override="1"><f a=""><x path="Int"/></f></capacity>
		<length public="1" set="method" override="1"><f a=""><x path="Int"/></f></length>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.StringBuilder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.System" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/System.class" extern="1">
		<setIn public="1" set="method" static="1"><f a="param1">
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></setIn>
		<setOut public="1" set="method" static="1"><f a="param1">
	<c path="java.io.PrintStream"/>
	<x path="Void"/>
</f></setOut>
		<setErr public="1" set="method" static="1"><f a="param1">
	<c path="java.io.PrintStream"/>
	<x path="Void"/>
</f></setErr>
		<console public="1" set="method" static="1"><f a=""><c path="java.io.Console"/></f></console>
		<inheritedChannel public="1" set="method" static="1"><f a=""><c path="java.nio.channels.Channel"/></f></inheritedChannel>
		<setSecurityManager public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.SecurityManager"/>
	<x path="Void"/>
</f></setSecurityManager>
		<getSecurityManager public="1" set="method" static="1"><f a=""><c path="java.lang.SecurityManager"/></f></getSecurityManager>
		<currentTimeMillis public="1" set="method" static="1"><f a=""><x path="haxe.Int64"/></f></currentTimeMillis>
		<nanoTime public="1" set="method" static="1"><f a=""><x path="haxe.Int64"/></f></nanoTime>
		<arraycopy public="1" set="method" static="1"><f a="param1:param2:param3:param4:param5">
	<d/>
	<x path="Int"/>
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></arraycopy>
		<identityHashCode public="1" set="method" static="1"><f a="param1">
	<d/>
	<x path="Int"/>
</f></identityHashCode>
		<getProperties public="1" set="method" static="1"><f a=""><c path="java.util.Properties"/></f></getProperties>
		<lineSeparator public="1" set="method" static="1"><f a=""><c path="String"/></f></lineSeparator>
		<setProperties public="1" set="method" static="1"><f a="param1">
	<c path="java.util.Properties"/>
	<x path="Void"/>
</f></setProperties>
		<getProperty public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<overloads><getProperty public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></getProperty></overloads>
		</getProperty>
		<setProperty public="1" set="method" static="1"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></setProperty>
		<clearProperty public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></clearProperty>
		<getenv public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<overloads><getenv public="1" set="method"><f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="String"/>
</c></f></getenv></overloads>
		</getenv>
		<exit public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></exit>
		<gc public="1" set="method" static="1"><f a=""><x path="Void"/></f></gc>
		<runFinalization public="1" set="method" static="1"><f a=""><x path="Void"/></f></runFinalization>
		<runFinalizersOnExit public="1" set="method" static="1">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</runFinalizersOnExit>
		<load public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></load>
		<loadLibrary public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></loadLibrary>
		<mapLibraryName public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></mapLibraryName>
		<_in final="1" public="1" set="null" static="1">
			<c path="java.io.InputStream"/>
			<meta><m n=":native"><e>"in"</e></m></meta>
		</_in>
		<out final="1" public="1" set="null" static="1"><c path="java.io.PrintStream"/></out>
		<err final="1" public="1" set="null" static="1"><c path="java.io.PrintStream"/></err>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.System"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.JavaLangAccess" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/JavaLangAccess.class" extern="1" interface="1">
		<getConstantPool public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.sun.reflect.ConstantPool"/>
</f></getConstantPool>
		<casAnnotationType public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.Class"><d/></c>
	<c path="java.sun.reflect.annotation.AnnotationType"/>
	<c path="java.sun.reflect.annotation.AnnotationType"/>
	<x path="Bool"/>
</f></casAnnotationType>
		<getAnnotationType public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.sun.reflect.annotation.AnnotationType"/>
</f></getAnnotationType>
		<getDeclaredAnnotationMap public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.util.Map">
		<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
		<c path="java.lang.annotation.Annotation"/>
	</c>
</f></getDeclaredAnnotationMap>
		<getRawClassAnnotations public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></getRawClassAnnotations>
		<getRawClassTypeAnnotations public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></getRawClassTypeAnnotations>
		<getRawExecutableTypeAnnotations public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Executable"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></getRawExecutableTypeAnnotations>
		<getEnumConstantsShared public="1" params="E" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getEnumConstantsShared.E"/></c>
	<c path="java.NativeArray"><c path="getEnumConstantsShared.E"/></c>
</f></getEnumConstantsShared>
		<blockedOn public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Thread"/>
	<c path="java.sun.nio.ch.Interruptible"/>
	<x path="Void"/>
</f></blockedOn>
		<registerShutdownHook public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Bool"/>
	<c path="java.lang.Runnable"/>
	<x path="Void"/>
</f></registerShutdownHook>
		<getStackTraceDepth public="1" set="method"><f a="param1">
	<c path="java.lang.Throwable"/>
	<x path="Int"/>
</f></getStackTraceDepth>
		<getStackTraceElement public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Throwable"/>
	<x path="Int"/>
	<c path="java.lang.StackTraceElement"/>
</f></getStackTraceElement>
		<newStringUnsafe public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<c path="String"/>
</f></newStringUnsafe>
		<newThreadWithAcc public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Runnable"/>
	<c path="java.security.AccessControlContext"/>
	<c path="java.lang.Thread"/>
</f></newThreadWithAcc>
		<invokeFinalize public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></invokeFinalize>
		<meta>
			<m n=":native"><e>"sun.misc.JavaLangAccess"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.System_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/System$2.class" module="java.lang.System" extern="1">
		<implements path="java.sun.misc.JavaLangAccess"/>
		<getConstantPool public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.sun.reflect.ConstantPool"/>
</f></getConstantPool>
		<casAnnotationType public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.Class"><d/></c>
	<c path="java.sun.reflect.annotation.AnnotationType"/>
	<c path="java.sun.reflect.annotation.AnnotationType"/>
	<x path="Bool"/>
</f></casAnnotationType>
		<getAnnotationType public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.sun.reflect.annotation.AnnotationType"/>
</f></getAnnotationType>
		<getDeclaredAnnotationMap public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.util.Map">
		<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
		<c path="java.lang.annotation.Annotation"/>
	</c>
</f></getDeclaredAnnotationMap>
		<getRawClassAnnotations public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></getRawClassAnnotations>
		<getRawClassTypeAnnotations public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></getRawClassTypeAnnotations>
		<getRawExecutableTypeAnnotations public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Executable"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></getRawExecutableTypeAnnotations>
		<getEnumConstantsShared public="1" params="E" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getEnumConstantsShared.E"/></c>
	<c path="java.NativeArray"><c path="getEnumConstantsShared.E"/></c>
</f></getEnumConstantsShared>
		<blockedOn public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Thread"/>
	<c path="java.sun.nio.ch.Interruptible"/>
	<x path="Void"/>
</f></blockedOn>
		<registerShutdownHook public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Bool"/>
	<c path="java.lang.Runnable"/>
	<x path="Void"/>
</f></registerShutdownHook>
		<getStackTraceDepth public="1" set="method"><f a="param1">
	<c path="java.lang.Throwable"/>
	<x path="Int"/>
</f></getStackTraceDepth>
		<getStackTraceElement public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Throwable"/>
	<x path="Int"/>
	<c path="java.lang.StackTraceElement"/>
</f></getStackTraceElement>
		<newStringUnsafe public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<c path="String"/>
</f></newStringUnsafe>
		<newThreadWithAcc public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Runnable"/>
	<c path="java.security.AccessControlContext"/>
	<c path="java.lang.Thread"/>
</f></newThreadWithAcc>
		<invokeFinalize public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></invokeFinalize>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.lang.System$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.System_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/System$1.class" module="java.lang.System" extern="1">
		<implements path="java.security.PrivilegedAction"><d/></implements>
		<run public="1" set="method"><f a=""><d/></f></run>
		<val_s final="1" public="1">
			<c path="java.lang.SecurityManager"/>
			<meta><m n=":native"><e>"val$s"</e></m></meta>
		</val_s>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.SecurityManager"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.System$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Thread_WeakClassKey" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Thread$WeakClassKey.class" module="java.lang.Thread" extern="1">
		<extends path="java.lang.ref.WeakReference"><c path="java.lang.Class"><d/></c></extends>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.ref.ReferenceQueue"><c path="java.lang.Class"><d/></c></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.Thread$WeakClassKey"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Thread_UncaughtExceptionHandler" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Thread$UncaughtExceptionHandler.class" module="java.lang.Thread" extern="1" interface="1">
		<uncaughtException public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Thread"/>
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></uncaughtException>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.lang.Thread$UncaughtExceptionHandler"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.lang.Thread_State" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Thread$State.class" module="java.lang.Thread">
		<NEW/>
		<RUNNABLE/>
		<BLOCKED/>
		<WAITING/>
		<TIMED_WAITING/>
		<TERMINATED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.lang.Thread$State"</e></m>
		</meta>
	</enum>
	<class path="java.lang.Thread_Caches" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Thread$Caches.class" module="java.lang.Thread" extern="1">
		<subclassAudits final="1" public="1" set="null" static="1"><c path="java.util.concurrent.ConcurrentMap">
	<c path="java.lang.Thread_WeakClassKey"/>
	<x path="java.lang.Boolean"/>
</c></subclassAudits>
		<subclassAuditsQueue final="1" public="1" set="null" static="1"><c path="java.lang.ref.ReferenceQueue"><c path="java.lang.Class"><d/></c></c></subclassAuditsQueue>
		<meta>
			<m n=":native"><e>"java.lang.Thread$Caches"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Thread_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Thread$1.class" module="java.lang.Thread" extern="1">
		<implements path="java.security.PrivilegedAction"><x path="java.lang.Boolean"/></implements>
		<run public="1" set="method"><f a=""><x path="java.lang.Boolean"/></f></run>
		<val_subcl final="1" public="1">
			<c path="java.lang.Class"><d/></c>
			<meta><m n=":native"><e>"val$subcl"</e></m></meta>
		</val_subcl>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.Thread$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ThreadGroup" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ThreadGroup.class" extern="1">
		<implements path="java.lang.Thread_UncaughtExceptionHandler"/>
		<getName final="1" public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getParent final="1" public="1" set="method"><f a=""><c path="java.lang.ThreadGroup"/></f></getParent>
		<getMaxPriority final="1" public="1" set="method"><f a=""><x path="Int"/></f></getMaxPriority>
		<isDaemon final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isDaemon>
		<isDestroyed public="1" set="method"><f a=""><x path="Bool"/></f></isDestroyed>
		<setDaemon final="1" public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setDaemon>
		<setMaxPriority final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setMaxPriority>
		<parentOf final="1" public="1" set="method"><f a="param1">
	<c path="java.lang.ThreadGroup"/>
	<x path="Bool"/>
</f></parentOf>
		<checkAccess final="1" public="1" set="method"><f a=""><x path="Void"/></f></checkAccess>
		<activeCount public="1" set="method"><f a=""><x path="Int"/></f></activeCount>
		<enumerate public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.Thread"/></c>
				<x path="Int"/>
			</f>
			<overloads>
				<enumerate public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.lang.ThreadGroup"/></c>
	<x path="Bool"/>
	<x path="Int"/>
</f></enumerate>
				<enumerate public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.lang.ThreadGroup"/></c>
	<x path="Int"/>
</f></enumerate>
				<enumerate public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.lang.Thread"/></c>
	<x path="Bool"/>
	<x path="Int"/>
</f></enumerate>
			</overloads>
		</enumerate>
		<activeGroupCount public="1" set="method"><f a=""><x path="Int"/></f></activeGroupCount>
		<stop final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":deprecated"/></meta>
		</stop>
		<interrupt final="1" public="1" set="method"><f a=""><x path="Void"/></f></interrupt>
		<suspend final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":deprecated"/></meta>
		</suspend>
		<resume final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":deprecated"/></meta>
		</resume>
		<destroy final="1" public="1" set="method"><f a=""><x path="Void"/></f></destroy>
		<addUnstarted public="1" set="method"><f a=""><x path="Void"/></f></addUnstarted>
		<add public="1" set="method"><f a="param1">
	<c path="java.lang.Thread"/>
	<x path="Void"/>
</f></add>
		<threadStartFailed public="1" set="method"><f a="param1">
	<c path="java.lang.Thread"/>
	<x path="Void"/>
</f></threadStartFailed>
		<threadTerminated public="1" set="method"><f a="param1">
	<c path="java.lang.Thread"/>
	<x path="Void"/>
</f></threadTerminated>
		<list public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><list public="1" set="method"><f a="param1:param2">
	<c path="java.io.PrintStream"/>
	<x path="Int"/>
	<x path="Void"/>
</f></list></overloads>
		</list>
		<uncaughtException public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Thread"/>
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></uncaughtException>
		<allowThreadSuspension public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</allowThreadSuspension>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<name public="1"><c path="String"/></name>
		<maxPriority public="1"><x path="Int"/></maxPriority>
		<destroyed public="1"><x path="Bool"/></destroyed>
		<daemon public="1"><x path="Bool"/></daemon>
		<vmAllowSuspension public="1"><x path="Bool"/></vmAllowSuspension>
		<nUnstartedThreads public="1"><x path="Int"/></nUnstartedThreads>
		<nthreads public="1"><x path="Int"/></nthreads>
		<threads public="1"><c path="java.NativeArray"><c path="java.lang.Thread"/></c></threads>
		<ngroups public="1"><x path="Int"/></ngroups>
		<groups public="1"><c path="java.NativeArray"><c path="java.lang.ThreadGroup"/></c></groups>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.ThreadGroup"/>
	<c path="String"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.ThreadGroup"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ThreadLocal_ThreadLocalMap" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ThreadLocal$ThreadLocalMap.class" module="java.lang.ThreadLocal" extern="1">
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.ThreadLocal"><d/></c>
				<d/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.ThreadLocal_ThreadLocalMap"/>
	<c path="java.lang.ThreadLocal_1"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.ThreadLocal$ThreadLocalMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ThreadLocal_ThreadLocalMap_Entry" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ThreadLocal$ThreadLocalMap$Entry.class" module="java.lang.ThreadLocal" extern="1">
		<extends path="java.lang.ref.WeakReference"><c path="java.lang.ThreadLocal"><d/></c></extends>
		<value public="1"><d/></value>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.ThreadLocal"><d/></c>
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ThreadLocal$ThreadLocalMap$Entry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ThreadLocal_SuppliedThreadLocal" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ThreadLocal$SuppliedThreadLocal.class" module="java.lang.ThreadLocal" extern="1">
		<extends path="java.lang.ThreadLocal"><c path="java.lang.ThreadLocal_SuppliedThreadLocal.T"/></extends>
		<initialValue public="1" set="method" override="1"><f a=""><c path="java.lang.ThreadLocal_SuppliedThreadLocal.T"/></f></initialValue>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.function.Supplier"><c path="java.lang.ThreadLocal_SuppliedThreadLocal.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ThreadLocal$SuppliedThreadLocal"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ThreadLocal_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ThreadLocal$1.class" module="java.lang.ThreadLocal" extern="1"><meta>
	<m n=":native"><e>"java.lang.ThreadLocal$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.lang.Throwable_PrintStreamOrWriter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Throwable$PrintStreamOrWriter.class" module="java.lang.Throwable" extern="1" abstract="1">
		<lock abstract="1" public="1" set="method"><f a=""><d/></f></lock>
		<println abstract="1" public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></println>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.Throwable_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.Throwable$PrintStreamOrWriter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Throwable_WrappedPrintWriter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Throwable$WrappedPrintWriter.class" module="java.lang.Throwable" extern="1">
		<extends path="java.lang.Throwable_PrintStreamOrWriter"/>
		<lock public="1" set="method" override="1"><f a=""><d/></f></lock>
		<println public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Void"/>
</f></println>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.PrintWriter"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.Throwable$WrappedPrintWriter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Throwable_WrappedPrintStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Throwable$WrappedPrintStream.class" module="java.lang.Throwable" extern="1">
		<extends path="java.lang.Throwable_PrintStreamOrWriter"/>
		<lock public="1" set="method" override="1"><f a=""><d/></f></lock>
		<println public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Void"/>
</f></println>
		<new public="1" set="method"><f a="param1">
	<c path="java.io.PrintStream"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.Throwable$WrappedPrintStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Throwable_SentinelHolder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Throwable$SentinelHolder.class" module="java.lang.Throwable" extern="1">
		<STACK_TRACE_ELEMENT_SENTINEL final="1" public="1" set="null" static="1"><c path="java.lang.StackTraceElement"/></STACK_TRACE_ELEMENT_SENTINEL>
		<STACK_TRACE_SENTINEL final="1" public="1" set="null" static="1"><c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c></STACK_TRACE_SENTINEL>
		<meta>
			<m n=":native"><e>"java.lang.Throwable$SentinelHolder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.Throwable_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Throwable$1.class" module="java.lang.Throwable" extern="1"><meta>
	<m n=":native"><e>"java.lang.Throwable$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.lang.Void" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Void.class" extern="1">
		<TYPE final="1" public="1" set="null" static="1"><c path="java.lang.Class"><c path="java.lang.Void"/></c></TYPE>
		<meta>
			<m n=":native"><e>"java.lang.Void"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.annotation.Annotation" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/annotation/Annotation.class" extern="1" interface="1">
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<annotationType public="1" set="method"><f a=""><c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c></f></annotationType>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.annotation.Annotation"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.lang.annotation.RetentionPolicy" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/annotation/RetentionPolicy.class">
		<SOURCE/>
		<CLASS/>
		<RUNTIME/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.lang.annotation.RetentionPolicy"</e></m>
		</meta>
	</enum>
	<class path="java.lang.ref.Reference_ReferenceHandler" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/Reference$ReferenceHandler.class" module="java.lang.ref.Reference" extern="1">
		<extends path="java.lang.Thread"/>
		<run public="1" set="method" override="1"><f a=""><x path="Void"/></f></run>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.ThreadGroup"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ref.Reference$ReferenceHandler"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ref.Reference_Lock" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/Reference$Lock.class" module="java.lang.ref.Reference" extern="1">
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.ref.Reference_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ref.Reference$Lock"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ref.Reference_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/Reference$1.class" module="java.lang.ref.Reference" extern="1"><meta>
	<m n=":native"><e>"java.lang.ref.Reference$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.lang.ref.ReferenceQueue" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/ReferenceQueue.class" extern="1">
		<NULL public="1" static="1"><c path="java.lang.ref.ReferenceQueue"><d/></c></NULL>
		<ENQUEUED public="1" static="1"><c path="java.lang.ref.ReferenceQueue"><d/></c></ENQUEUED>
		<enqueue public="1" set="method"><f a="param1">
	<c path="java.lang.ref.Reference"><c path="java.lang.ref.ReferenceQueue.T"/></c>
	<x path="Bool"/>
</f></enqueue>
		<poll public="1" set="method"><f a=""><c path="java.lang.ref.Reference"><c path="java.lang.ref.ReferenceQueue.T"/></c></f></poll>
		<remove public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.lang.ref.Reference"><c path="java.lang.ref.ReferenceQueue.T"/></c>
			</f>
			<overloads><remove public="1" set="method"><f a=""><c path="java.lang.ref.Reference"><c path="java.lang.ref.ReferenceQueue.T"/></c></f></remove></overloads>
		</remove>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.lang.ref.ReferenceQueue"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ref.ReferenceQueue_Null" params="S" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/ReferenceQueue$Null.class" module="java.lang.ref.ReferenceQueue" extern="1">
		<extends path="java.lang.ref.ReferenceQueue"><c path="java.lang.ref.ReferenceQueue_Null.S"/></extends>
		<enqueue public="1" set="method" override="1"><f a="param1">
	<c path="java.lang.ref.Reference"><c path="java.lang.ref.ReferenceQueue_Null.S"/></c>
	<x path="Bool"/>
</f></enqueue>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.ref.ReferenceQueue_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ref.ReferenceQueue$Null"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ref.ReferenceQueue_Lock" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/ReferenceQueue$Lock.class" module="java.lang.ref.ReferenceQueue" extern="1">
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.ref.ReferenceQueue_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.ref.ReferenceQueue$Lock"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.ref.ReferenceQueue_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/ReferenceQueue$1.class" module="java.lang.ref.ReferenceQueue" extern="1"><meta>
	<m n=":native"><e>"java.lang.ref.ReferenceQueue$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.lang.ref.SoftReference" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/SoftReference.class" extern="1">
		<extends path="java.lang.ref.Reference"><c path="java.lang.ref.SoftReference.T"/></extends>
		<get public="1" set="method" override="1"><f a=""><c path="java.lang.ref.SoftReference.T"/></f></get>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.ref.SoftReference.T"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.ref.SoftReference.T"/>
	<c path="java.lang.ref.ReferenceQueue"><d/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.lang.ref.SoftReference"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.AccessibleObject" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/AccessibleObject.class" extern="1">
		<implements path="java.lang.reflect.AnnotatedElement"/>
		<setAccessible public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.lang.reflect.AccessibleObject"/></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></setAccessible>
		<reflectionFactory final="1" public="1" set="null" static="1"><c path="java.sun.reflect.ReflectionFactory"/></reflectionFactory>
		<setAccessible public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setAccessible>
		<isAccessible public="1" set="method"><f a=""><x path="Bool"/></f></isAccessible>
		<getAnnotation public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
	<c path="getAnnotation.T"/>
</f></getAnnotation>
		<isAnnotationPresent public="1" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
	<x path="Bool"/>
</f></isAnnotationPresent>
		<getAnnotationsByType public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotationsByType.T"/></c>
	<c path="java.NativeArray"><c path="getAnnotationsByType.T"/></c>
</f></getAnnotationsByType>
		<getAnnotations public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f></getAnnotations>
		<getDeclaredAnnotation public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getDeclaredAnnotation.T"/></c>
	<c path="getDeclaredAnnotation.T"/>
</f></getDeclaredAnnotation>
		<getDeclaredAnnotationsByType public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getDeclaredAnnotationsByType.T"/></c>
	<c path="java.NativeArray"><c path="getDeclaredAnnotationsByType.T"/></c>
</f></getDeclaredAnnotationsByType>
		<getDeclaredAnnotations public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f></getDeclaredAnnotations>
		<checkAccess public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.Class"><d/></c>
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></checkAccess>
		<slowCheckMemberAccess public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.Class"><d/></c>
	<d/>
	<x path="Int"/>
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></slowCheckMemberAccess>
		<override public="1"><x path="Bool"/></override>
		<securityCheckCache public="1"><d/></securityCheckCache>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.lang.reflect.AccessibleObject"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.AnnotatedType" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/AnnotatedType.class" extern="1" interface="1">
		<extends path="java.lang.reflect.AnnotatedElement"/>
		<getType public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></getType>
		<meta>
			<m n=":native"><e>"java.lang.reflect.AnnotatedType"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.Member" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/Member.class" extern="1" interface="1">
		<PUBLIC final="1" public="1" set="null" static="1"><x path="Int"/></PUBLIC>
		<DECLARED final="1" public="1" set="null" static="1"><x path="Int"/></DECLARED>
		<getDeclaringClass public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></getDeclaringClass>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getModifiers public="1" set="method"><f a=""><x path="Int"/></f></getModifiers>
		<isSynthetic public="1" set="method"><f a=""><x path="Bool"/></f></isSynthetic>
		<meta>
			<m n=":native"><e>"java.lang.reflect.Member"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.Executable" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/Executable.class" extern="1" abstract="1">
		<extends path="java.lang.reflect.AccessibleObject"/>
		<implements path="java.lang.reflect.Member"/>
		<implements path="java.lang.reflect.GenericDeclaration"/>
		<getAnnotationBytes abstract="1" public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getAnnotationBytes>
		<getRoot abstract="1" public="1" set="method"><f a=""><c path="java.lang.reflect.Executable"/></f></getRoot>
		<hasGenericInformation abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></hasGenericInformation>
		<getGenericInfo abstract="1" public="1" set="method"><f a=""><c path="java.sun.reflect.generics.repository.ConstructorRepository"/></f></getGenericInfo>
		<equalParamTypes public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<x path="Bool"/>
</f></equalParamTypes>
		<parseParameterAnnotations public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.NativeArray"><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></c>
</f></parseParameterAnnotations>
		<separateWithCommas public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<c path="java.lang.StringBuilder"/>
	<x path="Void"/>
</f></separateWithCommas>
		<printModifiersIfNonzero public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.StringBuilder"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></printModifiersIfNonzero>
		<sharedToString public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Bool"/>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<c path="String"/>
</f></sharedToString>
		<specificToStringHeader abstract="1" public="1" set="method"><f a="param1">
	<c path="java.lang.StringBuilder"/>
	<x path="Void"/>
</f></specificToStringHeader>
		<sharedToGenericString public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Bool"/>
	<c path="String"/>
</f></sharedToGenericString>
		<specificToGenericStringHeader abstract="1" public="1" set="method"><f a="param1">
	<c path="java.lang.StringBuilder"/>
	<x path="Void"/>
</f></specificToGenericStringHeader>
		<getDeclaringClass abstract="1" public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></getDeclaringClass>
		<getName abstract="1" public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getModifiers abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></getModifiers>
		<getTypeParameters abstract="1" public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.TypeVariable"><d/></c></c></f></getTypeParameters>
		<getParameterTypes abstract="1" public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f></getParameterTypes>
		<getParameterCount public="1" set="method"><f a=""><x path="Int"/></f></getParameterCount>
		<getGenericParameterTypes public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f></getGenericParameterTypes>
		<getAllGenericParameterTypes public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f></getAllGenericParameterTypes>
		<getParameters public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Parameter"/></c></f></getParameters>
		<hasRealParameterData public="1" set="method"><f a=""><x path="Bool"/></f></hasRealParameterData>
		<getTypeAnnotationBytes0 public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getTypeAnnotationBytes0>
		<getTypeAnnotationBytes public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getTypeAnnotationBytes>
		<getExceptionTypes abstract="1" public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f></getExceptionTypes>
		<getGenericExceptionTypes public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f></getGenericExceptionTypes>
		<toGenericString abstract="1" public="1" set="method"><f a=""><c path="String"/></f></toGenericString>
		<isVarArgs public="1" set="method"><f a=""><x path="Bool"/></f></isVarArgs>
		<isSynthetic public="1" set="method"><f a=""><x path="Bool"/></f></isSynthetic>
		<getParameterAnnotations abstract="1" public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></c></f></getParameterAnnotations>
		<sharedGetParameterAnnotations public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.NativeArray"><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></c>
</f></sharedGetParameterAnnotations>
		<handleParameterNumberMismatch abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></handleParameterNumberMismatch>
		<getAnnotation public="1" params="T" set="method" override="1"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
	<c path="getAnnotation.T"/>
</f></getAnnotation>
		<getAnnotationsByType public="1" params="T" set="method" override="1"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotationsByType.T"/></c>
	<c path="java.NativeArray"><c path="getAnnotationsByType.T"/></c>
</f></getAnnotationsByType>
		<getDeclaredAnnotations public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f></getDeclaredAnnotations>
		<getAnnotatedReturnType abstract="1" public="1" set="method"><f a=""><c path="java.lang.reflect.AnnotatedType"/></f></getAnnotatedReturnType>
		<getAnnotatedReturnType0 public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Type"/>
	<c path="java.lang.reflect.AnnotatedType"/>
</f></getAnnotatedReturnType0>
		<getAnnotatedReceiverType public="1" set="method"><f a=""><c path="java.lang.reflect.AnnotatedType"/></f></getAnnotatedReceiverType>
		<getAnnotatedParameterTypes public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.AnnotatedType"/></c></f></getAnnotatedParameterTypes>
		<getAnnotatedExceptionTypes public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.AnnotatedType"/></c></f></getAnnotatedExceptionTypes>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.lang.reflect.Executable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.Constructor" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/Constructor.class" extern="1">
		<extends path="java.lang.reflect.Executable"/>
		<getGenericInfo public="1" set="method" override="1"><f a=""><c path="java.sun.reflect.generics.repository.ConstructorRepository"/></f></getGenericInfo>
		<getRoot public="1" set="method" override="1"><f a=""><c path="java.lang.reflect.Executable"/></f></getRoot>
		<copy public="1" set="method"><f a=""><c path="java.lang.reflect.Constructor"><c path="java.lang.reflect.Constructor.T"/></c></f></copy>
		<hasGenericInformation public="1" set="method" override="1"><f a=""><x path="Bool"/></f></hasGenericInformation>
		<getAnnotationBytes public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getAnnotationBytes>
		<getDeclaringClass public="1" set="method" override="1"><f a=""><c path="java.lang.Class"><c path="java.lang.reflect.Constructor.T"/></c></f></getDeclaringClass>
		<getName public="1" set="method" override="1"><f a=""><c path="String"/></f></getName>
		<getModifiers public="1" set="method" override="1"><f a=""><x path="Int"/></f></getModifiers>
		<getTypeParameters public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.TypeVariable"><c path="java.lang.reflect.Constructor"><c path="java.lang.reflect.Constructor.T"/></c></c></c></f></getTypeParameters>
		<getParameterTypes public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f></getParameterTypes>
		<getParameterCount public="1" set="method" override="1"><f a=""><x path="Int"/></f></getParameterCount>
		<getGenericParameterTypes public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f></getGenericParameterTypes>
		<getExceptionTypes public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f></getExceptionTypes>
		<getGenericExceptionTypes public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f></getGenericExceptionTypes>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<specificToStringHeader public="1" set="method" override="1"><f a="param1">
	<c path="java.lang.StringBuilder"/>
	<x path="Void"/>
</f></specificToStringHeader>
		<toGenericString public="1" set="method" override="1"><f a=""><c path="String"/></f></toGenericString>
		<specificToGenericStringHeader public="1" set="method" override="1"><f a="param1">
	<c path="java.lang.StringBuilder"/>
	<x path="Void"/>
</f></specificToGenericStringHeader>
		<newInstance public="1" set="method"><f a="param1">
	<x path="haxe.Rest"><d/></x>
	<c path="java.lang.reflect.Constructor.T"/>
</f></newInstance>
		<isVarArgs public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isVarArgs>
		<isSynthetic public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isSynthetic>
		<getConstructorAccessor public="1" set="method"><f a=""><c path="java.sun.reflect.ConstructorAccessor"/></f></getConstructorAccessor>
		<setConstructorAccessor public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.ConstructorAccessor"/>
	<x path="Void"/>
</f></setConstructorAccessor>
		<getSlot public="1" set="method"><f a=""><x path="Int"/></f></getSlot>
		<getSignature public="1" set="method"><f a=""><c path="String"/></f></getSignature>
		<getRawAnnotations public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getRawAnnotations>
		<getRawParameterAnnotations public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getRawParameterAnnotations>
		<getAnnotation public="1" params="T" set="method" override="1"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
	<c path="getAnnotation.T"/>
</f></getAnnotation>
		<getDeclaredAnnotations public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f></getDeclaredAnnotations>
		<getParameterAnnotations public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></c></f></getParameterAnnotations>
		<handleParameterNumberMismatch public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></handleParameterNumberMismatch>
		<getAnnotatedReturnType public="1" set="method" override="1"><f a=""><c path="java.lang.reflect.AnnotatedType"/></f></getAnnotatedReturnType>
		<getAnnotatedReceiverType public="1" set="method" override="1"><f a=""><c path="java.lang.reflect.AnnotatedType"/></f></getAnnotatedReceiverType>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8">
	<c path="java.lang.Class"><c path="java.lang.reflect.Constructor.T"/></c>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.reflect.Constructor"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.Field" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/Field.class" extern="1">
		<extends path="java.lang.reflect.AccessibleObject"/>
		<implements path="java.lang.reflect.Member"/>
		<copy public="1" set="method"><f a=""><c path="java.lang.reflect.Field"/></f></copy>
		<getDeclaringClass public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></getDeclaringClass>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getModifiers public="1" set="method"><f a=""><x path="Int"/></f></getModifiers>
		<isEnumConstant public="1" set="method"><f a=""><x path="Bool"/></f></isEnumConstant>
		<isSynthetic public="1" set="method"><f a=""><x path="Bool"/></f></isSynthetic>
		<getType public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></getType>
		<getGenericType public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></getGenericType>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toGenericString public="1" set="method"><f a=""><c path="String"/></f></toGenericString>
		<get public="1" set="method"><f a="param1">
	<d/>
	<d/>
</f></get>
		<getBoolean public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></getBoolean>
		<getByte public="1" set="method"><f a="param1">
	<d/>
	<t path="java.types.Int8"/>
</f></getByte>
		<getChar public="1" set="method"><f a="param1">
	<d/>
	<t path="java.types.Char16"/>
</f></getChar>
		<getShort public="1" set="method"><f a="param1">
	<d/>
	<t path="java.types.Int16"/>
</f></getShort>
		<getInt public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></getInt>
		<getLong public="1" set="method"><f a="param1">
	<d/>
	<x path="haxe.Int64"/>
</f></getLong>
		<getFloat public="1" set="method"><f a="param1">
	<d/>
	<x path="Single"/>
</f></getFloat>
		<getDouble public="1" set="method"><f a="param1">
	<d/>
	<x path="Float"/>
</f></getDouble>
		<set public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Void"/>
</f></set>
		<setBoolean public="1" set="method"><f a="param1:param2">
	<d/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setBoolean>
		<setByte public="1" set="method"><f a="param1:param2">
	<d/>
	<t path="java.types.Int8"/>
	<x path="Void"/>
</f></setByte>
		<setChar public="1" set="method"><f a="param1:param2">
	<d/>
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></setChar>
		<setShort public="1" set="method"><f a="param1:param2">
	<d/>
	<t path="java.types.Int16"/>
	<x path="Void"/>
</f></setShort>
		<setInt public="1" set="method"><f a="param1:param2">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt>
		<setLong public="1" set="method"><f a="param1:param2">
	<d/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setLong>
		<setFloat public="1" set="method"><f a="param1:param2">
	<d/>
	<x path="Single"/>
	<x path="Void"/>
</f></setFloat>
		<setDouble public="1" set="method"><f a="param1:param2">
	<d/>
	<x path="Float"/>
	<x path="Void"/>
</f></setDouble>
		<getAnnotation public="1" params="T" set="method" override="1"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
	<c path="getAnnotation.T"/>
</f></getAnnotation>
		<getAnnotationsByType public="1" params="T" set="method" override="1"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotationsByType.T"/></c>
	<c path="java.NativeArray"><c path="getAnnotationsByType.T"/></c>
</f></getAnnotationsByType>
		<getDeclaredAnnotations public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f></getDeclaredAnnotations>
		<getAnnotatedType public="1" set="method"><f a=""><c path="java.lang.reflect.AnnotatedType"/></f></getAnnotatedType>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7">
	<c path="java.lang.Class"><d/></c>
	<c path="String"/>
	<c path="java.lang.Class"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.reflect.Field"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.InvocationTargetException" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/InvocationTargetException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<getTargetException public="1" set="method"><f a=""><c path="java.lang.Throwable"/></f></getTargetException>
		<getCause public="1" set="method" override="1"><f a=""><c path="java.lang.Throwable"/></f></getCause>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Throwable"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.reflect.InvocationTargetException"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.Method" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/Method.class" extern="1">
		<extends path="java.lang.reflect.Executable"/>
		<getGenericInfo public="1" set="method" override="1"><f a=""><c path="java.sun.reflect.generics.repository.MethodRepository"/></f></getGenericInfo>
		<copy public="1" set="method"><f a=""><c path="java.lang.reflect.Method"/></f></copy>
		<getRoot public="1" set="method" override="1"><f a=""><c path="java.lang.reflect.Executable"/></f></getRoot>
		<hasGenericInformation public="1" set="method" override="1"><f a=""><x path="Bool"/></f></hasGenericInformation>
		<getAnnotationBytes public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getAnnotationBytes>
		<getDeclaringClass public="1" set="method" override="1"><f a=""><c path="java.lang.Class"><d/></c></f></getDeclaringClass>
		<getName public="1" set="method" override="1"><f a=""><c path="String"/></f></getName>
		<getModifiers public="1" set="method" override="1"><f a=""><x path="Int"/></f></getModifiers>
		<getTypeParameters public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.TypeVariable"><c path="java.lang.reflect.Method"/></c></c></f></getTypeParameters>
		<getReturnType public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></getReturnType>
		<getGenericReturnType public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></getGenericReturnType>
		<getParameterTypes public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f></getParameterTypes>
		<getParameterCount public="1" set="method" override="1"><f a=""><x path="Int"/></f></getParameterCount>
		<getGenericParameterTypes public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f></getGenericParameterTypes>
		<getExceptionTypes public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f></getExceptionTypes>
		<getGenericExceptionTypes public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f></getGenericExceptionTypes>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<specificToStringHeader public="1" set="method" override="1"><f a="param1">
	<c path="java.lang.StringBuilder"/>
	<x path="Void"/>
</f></specificToStringHeader>
		<toGenericString public="1" set="method" override="1"><f a=""><c path="String"/></f></toGenericString>
		<specificToGenericStringHeader public="1" set="method" override="1"><f a="param1">
	<c path="java.lang.StringBuilder"/>
	<x path="Void"/>
</f></specificToGenericStringHeader>
		<invoke public="1" set="method"><f a="param1:param2">
	<d/>
	<x path="haxe.Rest"><d/></x>
	<d/>
</f></invoke>
		<isBridge public="1" set="method"><f a=""><x path="Bool"/></f></isBridge>
		<isVarArgs public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isVarArgs>
		<isSynthetic public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isSynthetic>
		<isDefault public="1" set="method"><f a=""><x path="Bool"/></f></isDefault>
		<getMethodAccessor public="1" set="method"><f a=""><c path="java.sun.reflect.MethodAccessor"/></f></getMethodAccessor>
		<setMethodAccessor public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.MethodAccessor"/>
	<x path="Void"/>
</f></setMethodAccessor>
		<getDefaultValue public="1" set="method"><f a=""><d/></f></getDefaultValue>
		<getAnnotation public="1" params="T" set="method" override="1"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
	<c path="getAnnotation.T"/>
</f></getAnnotation>
		<getDeclaredAnnotations public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f></getDeclaredAnnotations>
		<getParameterAnnotations public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></c></f></getParameterAnnotations>
		<getAnnotatedReturnType public="1" set="method" override="1"><f a=""><c path="java.lang.reflect.AnnotatedType"/></f></getAnnotatedReturnType>
		<handleParameterNumberMismatch public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></handleParameterNumberMismatch>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8:param9:param10:param11">
	<c path="java.lang.Class"><d/></c>
	<c path="String"/>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<c path="java.lang.Class"><d/></c>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.reflect.Method"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.Modifier" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/Modifier.class" extern="1">
		<isPublic public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isPublic>
		<isPrivate public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isPrivate>
		<isProtected public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isProtected>
		<isStatic public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isStatic>
		<isFinal public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isFinal>
		<isSynchronized public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSynchronized>
		<isVolatile public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isVolatile>
		<isTransient public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isTransient>
		<isNative public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isNative>
		<isInterface public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isInterface>
		<isAbstract public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isAbstract>
		<isStrict public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isStrict>
		<toString public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
		<isSynthetic public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSynthetic>
		<isMandated public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isMandated>
		<classModifiers public="1" set="method" static="1"><f a=""><x path="Int"/></f></classModifiers>
		<interfaceModifiers public="1" set="method" static="1"><f a=""><x path="Int"/></f></interfaceModifiers>
		<constructorModifiers public="1" set="method" static="1"><f a=""><x path="Int"/></f></constructorModifiers>
		<methodModifiers public="1" set="method" static="1"><f a=""><x path="Int"/></f></methodModifiers>
		<fieldModifiers public="1" set="method" static="1"><f a=""><x path="Int"/></f></fieldModifiers>
		<parameterModifiers public="1" set="method" static="1"><f a=""><x path="Int"/></f></parameterModifiers>
		<PUBLIC final="1" public="1" set="null" static="1"><x path="Int"/></PUBLIC>
		<PRIVATE final="1" public="1" set="null" static="1"><x path="Int"/></PRIVATE>
		<PROTECTED final="1" public="1" set="null" static="1"><x path="Int"/></PROTECTED>
		<STATIC final="1" public="1" set="null" static="1"><x path="Int"/></STATIC>
		<FINAL final="1" public="1" set="null" static="1"><x path="Int"/></FINAL>
		<SYNCHRONIZED final="1" public="1" set="null" static="1"><x path="Int"/></SYNCHRONIZED>
		<VOLATILE final="1" public="1" set="null" static="1"><x path="Int"/></VOLATILE>
		<TRANSIENT final="1" public="1" set="null" static="1"><x path="Int"/></TRANSIENT>
		<NATIVE final="1" public="1" set="null" static="1"><x path="Int"/></NATIVE>
		<INTERFACE final="1" public="1" set="null" static="1"><x path="Int"/></INTERFACE>
		<ABSTRACT final="1" public="1" set="null" static="1"><x path="Int"/></ABSTRACT>
		<STRICT final="1" public="1" set="null" static="1"><x path="Int"/></STRICT>
		<BRIDGE final="1" public="1" set="null" static="1"><x path="Int"/></BRIDGE>
		<VARARGS final="1" public="1" set="null" static="1"><x path="Int"/></VARARGS>
		<SYNTHETIC final="1" public="1" set="null" static="1"><x path="Int"/></SYNTHETIC>
		<ANNOTATION final="1" public="1" set="null" static="1"><x path="Int"/></ANNOTATION>
		<ENUM final="1" public="1" set="null" static="1"><x path="Int"/></ENUM>
		<MANDATED final="1" public="1" set="null" static="1"><x path="Int"/></MANDATED>
		<ACCESS_MODIFIERS final="1" public="1" set="null" static="1"><x path="Int"/></ACCESS_MODIFIERS>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.lang.reflect.Modifier"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.Parameter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/Parameter.class" extern="1">
		<implements path="java.lang.reflect.AnnotatedElement"/>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<isNamePresent public="1" set="method"><f a=""><x path="Bool"/></f></isNamePresent>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<getDeclaringExecutable public="1" set="method"><f a=""><c path="java.lang.reflect.Executable"/></f></getDeclaringExecutable>
		<getModifiers public="1" set="method"><f a=""><x path="Int"/></f></getModifiers>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getRealName public="1" set="method"><f a=""><c path="String"/></f></getRealName>
		<getParameterizedType public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></getParameterizedType>
		<getType public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></getType>
		<getAnnotatedType public="1" set="method"><f a=""><c path="java.lang.reflect.AnnotatedType"/></f></getAnnotatedType>
		<isImplicit public="1" set="method"><f a=""><x path="Bool"/></f></isImplicit>
		<isSynthetic public="1" set="method"><f a=""><x path="Bool"/></f></isSynthetic>
		<isVarArgs public="1" set="method"><f a=""><x path="Bool"/></f></isVarArgs>
		<getAnnotation public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
	<c path="getAnnotation.T"/>
</f></getAnnotation>
		<getAnnotationsByType public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getAnnotationsByType.T"/></c>
	<c path="java.NativeArray"><c path="getAnnotationsByType.T"/></c>
</f></getAnnotationsByType>
		<getDeclaredAnnotations public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f></getDeclaredAnnotations>
		<getDeclaredAnnotation public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getDeclaredAnnotation.T"/></c>
	<c path="getDeclaredAnnotation.T"/>
</f></getDeclaredAnnotation>
		<getDeclaredAnnotationsByType public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getDeclaredAnnotationsByType.T"/></c>
	<c path="java.NativeArray"><c path="getDeclaredAnnotationsByType.T"/></c>
</f></getDeclaredAnnotationsByType>
		<getAnnotations public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f></getAnnotations>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="String"/>
	<x path="Int"/>
	<c path="java.lang.reflect.Executable"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.lang.reflect.Parameter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.ParameterizedType" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/ParameterizedType.class" extern="1" interface="1">
		<extends path="java.lang.reflect.Type"/>
		<getActualTypeArguments public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f></getActualTypeArguments>
		<getRawType public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></getRawType>
		<getOwnerType public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></getOwnerType>
		<meta>
			<m n=":native"><e>"java.lang.reflect.ParameterizedType"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.TypeVariable" params="D" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/TypeVariable.class" extern="1" interface="1">
		<extends path="java.lang.reflect.AnnotatedElement"/>
		<extends path="java.lang.reflect.Type"/>
		<getBounds public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f></getBounds>
		<getGenericDeclaration public="1" set="method"><f a=""><c path="java.lang.reflect.TypeVariable.D"/></f></getGenericDeclaration>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getAnnotatedBounds public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.AnnotatedType"/></c></f></getAnnotatedBounds>
		<meta>
			<m n=":native"><e>"java.lang.reflect.TypeVariable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.lang.reflect.WildcardType" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/WildcardType.class" extern="1" interface="1">
		<extends path="java.lang.reflect.Type"/>
		<getUpperBounds public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f></getUpperBounds>
		<getLowerBounds public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f></getLowerBounds>
		<meta>
			<m n=":native"><e>"java.lang.reflect.WildcardType"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.math.BigDecimal" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/math/BigDecimal.class" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><c path="java.math.BigDecimal"/></implements>
		<valueOf public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<overloads>
				<valueOf public="1" set="method"><f a="param1">
	<x path="Float"/>
	<c path="java.math.BigDecimal"/>
</f></valueOf>
				<valueOf public="1" set="method"><f a="param1:param2:param3">
	<c path="java.math.BigInteger"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.math.BigDecimal"/>
</f></valueOf>
				<valueOf public="1" set="method"><f a="param1:param2:param3">
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.math.BigDecimal"/>
</f></valueOf>
				<valueOf public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.math.BigDecimal"/>
</f></valueOf>
			</overloads>
		</valueOf>
		<zeroValueOf public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.math.BigDecimal"/>
</f></zeroValueOf>
		<longDigitLength public="1" set="method" static="1"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></longDigitLength>
		<scaledTenPow public="1" set="method" static="1"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.math.BigDecimal"/>
</f></scaledTenPow>
		<INFLATED final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></INFLATED>
		<ZERO final="1" public="1" set="null" static="1"><c path="java.math.BigDecimal"/></ZERO>
		<ONE final="1" public="1" set="null" static="1"><c path="java.math.BigDecimal"/></ONE>
		<TEN final="1" public="1" set="null" static="1"><c path="java.math.BigDecimal"/></TEN>
		<ROUND_UP final="1" public="1" set="null" static="1"><x path="Int"/></ROUND_UP>
		<ROUND_DOWN final="1" public="1" set="null" static="1"><x path="Int"/></ROUND_DOWN>
		<ROUND_CEILING final="1" public="1" set="null" static="1"><x path="Int"/></ROUND_CEILING>
		<ROUND_FLOOR final="1" public="1" set="null" static="1"><x path="Int"/></ROUND_FLOOR>
		<ROUND_HALF_UP final="1" public="1" set="null" static="1"><x path="Int"/></ROUND_HALF_UP>
		<ROUND_HALF_DOWN final="1" public="1" set="null" static="1"><x path="Int"/></ROUND_HALF_DOWN>
		<ROUND_HALF_EVEN final="1" public="1" set="null" static="1"><x path="Int"/></ROUND_HALF_EVEN>
		<ROUND_UNNECESSARY final="1" public="1" set="null" static="1"><x path="Int"/></ROUND_UNNECESSARY>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.math.BigDecimal"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<overloads><add public="1" set="method"><f a="param1:param2">
	<c path="java.math.BigDecimal"/>
	<c path="java.math.MathContext"/>
	<c path="java.math.BigDecimal"/>
</f></add></overloads>
		</add>
		<subtract public="1" set="method">
			<f a="param1">
				<c path="java.math.BigDecimal"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<overloads><subtract public="1" set="method"><f a="param1:param2">
	<c path="java.math.BigDecimal"/>
	<c path="java.math.MathContext"/>
	<c path="java.math.BigDecimal"/>
</f></subtract></overloads>
		</subtract>
		<multiply public="1" set="method">
			<f a="param1">
				<c path="java.math.BigDecimal"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<overloads><multiply public="1" set="method"><f a="param1:param2">
	<c path="java.math.BigDecimal"/>
	<c path="java.math.MathContext"/>
	<c path="java.math.BigDecimal"/>
</f></multiply></overloads>
		</multiply>
		<divide public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.math.BigDecimal"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<overloads>
				<divide public="1" set="method"><f a="param1:param2">
	<c path="java.math.BigDecimal"/>
	<c path="java.math.MathContext"/>
	<c path="java.math.BigDecimal"/>
</f></divide>
				<divide public="1" set="method"><f a="param1">
	<c path="java.math.BigDecimal"/>
	<c path="java.math.BigDecimal"/>
</f></divide>
				<divide public="1" set="method"><f a="param1:param2">
	<c path="java.math.BigDecimal"/>
	<e path="java.math.RoundingMode"/>
	<c path="java.math.BigDecimal"/>
</f></divide>
				<divide public="1" set="method"><f a="param1:param2">
	<c path="java.math.BigDecimal"/>
	<x path="Int"/>
	<c path="java.math.BigDecimal"/>
</f></divide>
				<divide public="1" set="method"><f a="param1:param2:param3">
	<c path="java.math.BigDecimal"/>
	<x path="Int"/>
	<e path="java.math.RoundingMode"/>
	<c path="java.math.BigDecimal"/>
</f></divide>
			</overloads>
		</divide>
		<divideToIntegralValue public="1" set="method">
			<f a="param1">
				<c path="java.math.BigDecimal"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<overloads><divideToIntegralValue public="1" set="method"><f a="param1:param2">
	<c path="java.math.BigDecimal"/>
	<c path="java.math.MathContext"/>
	<c path="java.math.BigDecimal"/>
</f></divideToIntegralValue></overloads>
		</divideToIntegralValue>
		<remainder public="1" set="method">
			<f a="param1">
				<c path="java.math.BigDecimal"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<overloads><remainder public="1" set="method"><f a="param1:param2">
	<c path="java.math.BigDecimal"/>
	<c path="java.math.MathContext"/>
	<c path="java.math.BigDecimal"/>
</f></remainder></overloads>
		</remainder>
		<divideAndRemainder public="1" set="method">
			<f a="param1">
				<c path="java.math.BigDecimal"/>
				<c path="java.NativeArray"><c path="java.math.BigDecimal"/></c>
			</f>
			<overloads><divideAndRemainder public="1" set="method"><f a="param1:param2">
	<c path="java.math.BigDecimal"/>
	<c path="java.math.MathContext"/>
	<c path="java.NativeArray"><c path="java.math.BigDecimal"/></c>
</f></divideAndRemainder></overloads>
		</divideAndRemainder>
		<pow public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<overloads><pow public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.math.MathContext"/>
	<c path="java.math.BigDecimal"/>
</f></pow></overloads>
		</pow>
		<abs public="1" set="method">
			<f a=""><c path="java.math.BigDecimal"/></f>
			<overloads><abs public="1" set="method"><f a="param1">
	<c path="java.math.MathContext"/>
	<c path="java.math.BigDecimal"/>
</f></abs></overloads>
		</abs>
		<negate public="1" set="method">
			<f a=""><c path="java.math.BigDecimal"/></f>
			<overloads><negate public="1" set="method"><f a="param1">
	<c path="java.math.MathContext"/>
	<c path="java.math.BigDecimal"/>
</f></negate></overloads>
		</negate>
		<plus public="1" set="method">
			<f a=""><c path="java.math.BigDecimal"/></f>
			<overloads><plus public="1" set="method"><f a="param1">
	<c path="java.math.MathContext"/>
	<c path="java.math.BigDecimal"/>
</f></plus></overloads>
		</plus>
		<signum public="1" set="method"><f a=""><x path="Int"/></f></signum>
		<scale public="1" set="method"><f a=""><x path="Int"/></f></scale>
		<precision public="1" set="method"><f a=""><x path="Int"/></f></precision>
		<unscaledValue public="1" set="method"><f a=""><c path="java.math.BigInteger"/></f></unscaledValue>
		<round public="1" set="method"><f a="param1">
	<c path="java.math.MathContext"/>
	<c path="java.math.BigDecimal"/>
</f></round>
		<setScale public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<e path="java.math.RoundingMode"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<overloads>
				<setScale public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.math.BigDecimal"/>
</f></setScale>
				<setScale public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.math.BigDecimal"/>
</f></setScale>
			</overloads>
		</setScale>
		<movePointLeft public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.math.BigDecimal"/>
</f></movePointLeft>
		<movePointRight public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.math.BigDecimal"/>
</f></movePointRight>
		<scaleByPowerOfTen public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.math.BigDecimal"/>
</f></scaleByPowerOfTen>
		<stripTrailingZeros public="1" set="method"><f a=""><c path="java.math.BigDecimal"/></f></stripTrailingZeros>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.math.BigDecimal"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<min public="1" set="method"><f a="param1">
	<c path="java.math.BigDecimal"/>
	<c path="java.math.BigDecimal"/>
</f></min>
		<max public="1" set="method"><f a="param1">
	<c path="java.math.BigDecimal"/>
	<c path="java.math.BigDecimal"/>
</f></max>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toEngineeringString public="1" set="method"><f a=""><c path="String"/></f></toEngineeringString>
		<toPlainString public="1" set="method"><f a=""><c path="String"/></f></toPlainString>
		<toBigInteger public="1" set="method"><f a=""><c path="java.math.BigInteger"/></f></toBigInteger>
		<toBigIntegerExact public="1" set="method"><f a=""><c path="java.math.BigInteger"/></f></toBigIntegerExact>
		<longValue public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></longValue>
		<longValueExact public="1" set="method"><f a=""><x path="haxe.Int64"/></f></longValueExact>
		<intValue public="1" set="method" override="1"><f a=""><x path="Int"/></f></intValue>
		<intValueExact public="1" set="method"><f a=""><x path="Int"/></f></intValueExact>
		<shortValueExact public="1" set="method"><f a=""><t path="java.types.Int16"/></f></shortValueExact>
		<byteValueExact public="1" set="method"><f a=""><t path="java.types.Int8"/></f></byteValueExact>
		<floatValue public="1" set="method" override="1"><f a=""><x path="Single"/></f></floatValue>
		<doubleValue public="1" set="method" override="1"><f a=""><x path="Float"/></f></doubleValue>
		<ulp public="1" set="method"><f a=""><c path="java.math.BigDecimal"/></f></ulp>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.math.BigInteger"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.math.MathContext"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.math.MathContext"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.math.BigInteger"/>
	<x path="Int"/>
	<c path="java.math.MathContext"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.math.BigInteger"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.math.BigInteger"/>
	<c path="java.math.MathContext"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.math.BigInteger"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<x path="Float"/>
	<c path="java.math.MathContext"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.math.MathContext"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<c path="java.math.MathContext"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.math.MathContext"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.math.BigDecimal"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.math.BigDecimal_UnsafeHolder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/math/BigDecimal$UnsafeHolder.class" module="java.math.BigDecimal" extern="1">
		<setIntCompactVolatile public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.math.BigDecimal"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setIntCompactVolatile>
		<setIntValVolatile public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.math.BigDecimal"/>
	<c path="java.math.BigInteger"/>
	<x path="Void"/>
</f></setIntValVolatile>
		<meta>
			<m n=":native"><e>"java.math.BigDecimal$UnsafeHolder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.math.BigDecimal_StringBuilderHelper" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/math/BigDecimal$StringBuilderHelper.class" module="java.math.BigDecimal" extern="1">
		<DIGIT_TENS final="1" public="1" set="null" static="1"><c path="java.NativeArray"><t path="java.types.Char16"/></c></DIGIT_TENS>
		<DIGIT_ONES final="1" public="1" set="null" static="1"><c path="java.NativeArray"><t path="java.types.Char16"/></c></DIGIT_ONES>
		<getStringBuilder public="1" set="method"><f a=""><c path="java.lang.StringBuilder"/></f></getStringBuilder>
		<getCompactCharArray public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Char16"/></c></f></getCompactCharArray>
		<putIntCompact public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></putIntCompact>
		<sb final="1" public="1"><c path="java.lang.StringBuilder"/></sb>
		<cmpCharArray final="1" public="1"><c path="java.NativeArray"><t path="java.types.Char16"/></c></cmpCharArray>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.math.BigDecimal$StringBuilderHelper"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.math.BigDecimal_LongOverflow" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/math/BigDecimal$LongOverflow.class" module="java.math.BigDecimal" extern="1">
		<check public="1" set="method" static="1"><f a="param1">
	<c path="java.math.BigDecimal"/>
	<x path="Void"/>
</f></check>
		<meta>
			<m n=":native"><e>"java.math.BigDecimal$LongOverflow"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.math.BigDecimal_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/math/BigDecimal$1.class" module="java.math.BigDecimal" extern="1">
		<extends path="java.lang.ThreadLocal"><c path="java.math.BigDecimal_StringBuilderHelper"/></extends>
		<initialValue public="1" set="method" override="1"><f a=""><c path="java.math.BigDecimal_StringBuilderHelper"/></f></initialValue>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.math.BigDecimal$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.math.BigInteger" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/math/BigInteger.class" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><c path="java.math.BigInteger"/></implements>
		<probablePrime public="1" set="method" static="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Random"/>
	<c path="java.math.BigInteger"/>
</f></probablePrime>
		<valueOf public="1" set="method" static="1"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.math.BigInteger"/>
</f></valueOf>
		<bitLengthForInt public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></bitLengthForInt>
		<primitiveRightShift public="1" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></primitiveRightShift>
		<primitiveLeftShift public="1" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></primitiveLeftShift>
		<mulAdd public="1" set="method" static="1"><f a="param1:param2:param3:param4:param5">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></mulAdd>
		<addOne public="1" set="method" static="1"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addOne>
		<LONG_MASK final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></LONG_MASK>
		<BURNIKEL_ZIEGLER_THRESHOLD final="1" public="1" set="null" static="1"><x path="Int"/></BURNIKEL_ZIEGLER_THRESHOLD>
		<BURNIKEL_ZIEGLER_OFFSET final="1" public="1" set="null" static="1"><x path="Int"/></BURNIKEL_ZIEGLER_OFFSET>
		<ZERO final="1" public="1" set="null" static="1"><c path="java.math.BigInteger"/></ZERO>
		<ONE final="1" public="1" set="null" static="1"><c path="java.math.BigInteger"/></ONE>
		<TEN final="1" public="1" set="null" static="1"><c path="java.math.BigInteger"/></TEN>
		<bnExpModThreshTable public="1" static="1"><c path="java.NativeArray"><x path="Int"/></c></bnExpModThreshTable>
		<nextProbablePrime public="1" set="method"><f a=""><c path="java.math.BigInteger"/></f></nextProbablePrime>
		<primeToCertainty public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Random"/>
	<x path="Bool"/>
</f></primeToCertainty>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<overloads><add public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.math.BigInteger"/>
</f></add></overloads>
		</add>
		<subtract public="1" set="method"><f a="param1">
	<c path="java.math.BigInteger"/>
	<c path="java.math.BigInteger"/>
</f></subtract>
		<multiply public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<overloads><multiply public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.math.BigInteger"/>
</f></multiply></overloads>
		</multiply>
		<divide public="1" set="method"><f a="param1">
	<c path="java.math.BigInteger"/>
	<c path="java.math.BigInteger"/>
</f></divide>
		<divideAndRemainder public="1" set="method"><f a="param1">
	<c path="java.math.BigInteger"/>
	<c path="java.NativeArray"><c path="java.math.BigInteger"/></c>
</f></divideAndRemainder>
		<remainder public="1" set="method"><f a="param1">
	<c path="java.math.BigInteger"/>
	<c path="java.math.BigInteger"/>
</f></remainder>
		<pow public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.math.BigInteger"/>
</f></pow>
		<gcd public="1" set="method"><f a="param1">
	<c path="java.math.BigInteger"/>
	<c path="java.math.BigInteger"/>
</f></gcd>
		<abs public="1" set="method"><f a=""><c path="java.math.BigInteger"/></f></abs>
		<negate public="1" set="method"><f a=""><c path="java.math.BigInteger"/></f></negate>
		<signum public="1" set="method"><f a=""><x path="Int"/></f></signum>
		<mod public="1" set="method"><f a="param1">
	<c path="java.math.BigInteger"/>
	<c path="java.math.BigInteger"/>
</f></mod>
		<modPow public="1" set="method"><f a="param1:param2">
	<c path="java.math.BigInteger"/>
	<c path="java.math.BigInteger"/>
	<c path="java.math.BigInteger"/>
</f></modPow>
		<modInverse public="1" set="method"><f a="param1">
	<c path="java.math.BigInteger"/>
	<c path="java.math.BigInteger"/>
</f></modInverse>
		<shiftLeft public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.math.BigInteger"/>
</f></shiftLeft>
		<shiftRight public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.math.BigInteger"/>
</f></shiftRight>
		<javaIncrement public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.NativeArray"><x path="Int"/></c>
</f></javaIncrement>
		<and public="1" set="method"><f a="param1">
	<c path="java.math.BigInteger"/>
	<c path="java.math.BigInteger"/>
</f></and>
		<or public="1" set="method"><f a="param1">
	<c path="java.math.BigInteger"/>
	<c path="java.math.BigInteger"/>
</f></or>
		<xor public="1" set="method"><f a="param1">
	<c path="java.math.BigInteger"/>
	<c path="java.math.BigInteger"/>
</f></xor>
		<not public="1" set="method"><f a=""><c path="java.math.BigInteger"/></f></not>
		<andNot public="1" set="method"><f a="param1">
	<c path="java.math.BigInteger"/>
	<c path="java.math.BigInteger"/>
</f></andNot>
		<testBit public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></testBit>
		<setBit public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.math.BigInteger"/>
</f></setBit>
		<clearBit public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.math.BigInteger"/>
</f></clearBit>
		<flipBit public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.math.BigInteger"/>
</f></flipBit>
		<getLowestSetBit public="1" set="method"><f a=""><x path="Int"/></f></getLowestSetBit>
		<bitLength public="1" set="method"><f a=""><x path="Int"/></f></bitLength>
		<bitCount public="1" set="method"><f a=""><x path="Int"/></f></bitCount>
		<isProbablePrime public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isProbablePrime>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<compareMagnitude final="1" public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<x path="Int"/>
			</f>
			<overloads><compareMagnitude final="1" public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></compareMagnitude></overloads>
		</compareMagnitude>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<min public="1" set="method"><f a="param1">
	<c path="java.math.BigInteger"/>
	<c path="java.math.BigInteger"/>
</f></min>
		<max public="1" set="method"><f a="param1">
	<c path="java.math.BigInteger"/>
	<c path="java.math.BigInteger"/>
</f></max>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<overloads><toString public="1" set="method"><f a=""><c path="String"/></f></toString></overloads>
		</toString>
		<toByteArray public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></toByteArray>
		<intValue public="1" set="method" override="1"><f a=""><x path="Int"/></f></intValue>
		<longValue public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></longValue>
		<floatValue public="1" set="method" override="1"><f a=""><x path="Single"/></f></floatValue>
		<doubleValue public="1" set="method" override="1"><f a=""><x path="Float"/></f></doubleValue>
		<longValueExact public="1" set="method"><f a=""><x path="haxe.Int64"/></f></longValueExact>
		<intValueExact public="1" set="method"><f a=""><x path="Int"/></f></intValueExact>
		<shortValueExact public="1" set="method"><f a=""><t path="java.types.Int16"/></f></shortValueExact>
		<byteValueExact public="1" set="method"><f a=""><t path="java.types.Int8"/></f></byteValueExact>
		<mag final="1" public="1"><c path="java.NativeArray"><x path="Int"/></c></mag>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Random"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Random"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.math.BigInteger"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.math.BigInteger_UnsafeHolder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/math/BigInteger$UnsafeHolder.class" module="java.math.BigInteger" extern="1">
		<putSign public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.math.BigInteger"/>
	<x path="Int"/>
	<x path="Void"/>
</f></putSign>
		<putMag public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.math.BigInteger"/>
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Void"/>
</f></putMag>
		<meta>
			<m n=":native"><e>"java.math.BigInteger$UnsafeHolder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.math.MathContext" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/math/MathContext.class" extern="1">
		<implements path="java.io.Serializable"/>
		<UNLIMITED final="1" public="1" set="null" static="1"><c path="java.math.MathContext"/></UNLIMITED>
		<DECIMAL32 final="1" public="1" set="null" static="1"><c path="java.math.MathContext"/></DECIMAL32>
		<DECIMAL64 final="1" public="1" set="null" static="1"><c path="java.math.MathContext"/></DECIMAL64>
		<DECIMAL128 final="1" public="1" set="null" static="1"><c path="java.math.MathContext"/></DECIMAL128>
		<getPrecision public="1" set="method"><f a=""><x path="Int"/></f></getPrecision>
		<getRoundingMode public="1" set="method"><f a=""><e path="java.math.RoundingMode"/></f></getRoundingMode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<precision final="1" public="1"><x path="Int"/></precision>
		<roundingMode final="1" public="1"><e path="java.math.RoundingMode"/></roundingMode>
		<new public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<e path="java.math.RoundingMode"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.math.MathContext"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.math.RoundingMode" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/math/RoundingMode.class">
		<UP/>
		<DOWN/>
		<CEILING/>
		<FLOOR/>
		<HALF_UP/>
		<HALF_DOWN/>
		<HALF_EVEN/>
		<UNNECESSARY/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.math.RoundingMode"</e></m>
		</meta>
	</enum>
	<class path="java.net.ContentHandler" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/ContentHandler.class" extern="1" abstract="1">
		<getContent abstract="1" public="1" set="method">
			<f a="param1">
				<c path="java.net.URLConnection"/>
				<d/>
			</f>
			<overloads><getContent public="1" set="method"><f a="param1:param2">
	<c path="java.net.URLConnection"/>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<d/>
</f></getContent></overloads>
		</getContent>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.net.ContentHandler"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.ContentHandlerFactory" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/ContentHandlerFactory.class" extern="1" interface="1">
		<createContentHandler public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.net.ContentHandler"/>
</f></createContentHandler>
		<meta>
			<m n=":native"><e>"java.net.ContentHandlerFactory"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.DatagramPacket" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/DatagramPacket.class" extern="1">
		<getAddress public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></getAddress>
		<getPort public="1" set="method"><f a=""><x path="Int"/></f></getPort>
		<getData public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getData>
		<getOffset public="1" set="method"><f a=""><x path="Int"/></f></getOffset>
		<getLength public="1" set="method"><f a=""><x path="Int"/></f></getLength>
		<setData public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><setData public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></setData></overloads>
		</setData>
		<setAddress public="1" set="method"><f a="param1">
	<c path="java.net.InetAddress"/>
	<x path="Void"/>
</f></setAddress>
		<setPort public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setPort>
		<setSocketAddress public="1" set="method"><f a="param1">
	<c path="java.net.SocketAddress"/>
	<x path="Void"/>
</f></setSocketAddress>
		<getSocketAddress public="1" set="method"><f a=""><c path="java.net.SocketAddress"/></f></getSocketAddress>
		<setLength public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setLength>
		<buf public="1"><c path="java.NativeArray"><t path="java.types.Int8"/></c></buf>
		<offset public="1"><x path="Int"/></offset>
		<length public="1"><x path="Int"/></length>
		<bufLength public="1"><x path="Int"/></bufLength>
		<address public="1"><c path="java.net.InetAddress"/></address>
		<port public="1"><x path="Int"/></port>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<c path="java.net.SocketAddress"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.net.SocketAddress"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.net.DatagramPacket"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.DatagramPacket_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/DatagramPacket$1.class" module="java.net.DatagramPacket" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.net.DatagramPacket$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.DatagramSocket" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/DatagramSocket.class" extern="1">
		<implements path="java.io.Closeable"/>
		<setDatagramSocketImplFactory public="1" set="method" static="1"><f a="param1">
	<c path="java.net.DatagramSocketImplFactory"/>
	<x path="Void"/>
</f></setDatagramSocketImplFactory>
		<ST_NOT_CONNECTED final="1" public="1" set="null" static="1"><x path="Int"/></ST_NOT_CONNECTED>
		<ST_CONNECTED final="1" public="1" set="null" static="1"><x path="Int"/></ST_CONNECTED>
		<ST_CONNECTED_NO_IMPL final="1" public="1" set="null" static="1"><x path="Int"/></ST_CONNECTED_NO_IMPL>
		<implClass public="1" static="1"><c path="java.lang.Class"><d/></c></implClass>
		<factory public="1" static="1"><c path="java.net.DatagramSocketImplFactory"/></factory>
		<createImpl public="1" set="method"><f a=""><x path="Void"/></f></createImpl>
		<getImpl public="1" set="method"><f a=""><c path="java.net.DatagramSocketImpl"/></f></getImpl>
		<bind public="1" set="method"><f a="param1">
	<c path="java.net.SocketAddress"/>
	<x path="Void"/>
</f></bind>
		<checkAddress public="1" set="method"><f a="param1:param2">
	<c path="java.net.InetAddress"/>
	<c path="String"/>
	<x path="Void"/>
</f></checkAddress>
		<connect public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.InetAddress"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><connect public="1" set="method"><f a="param1">
	<c path="java.net.SocketAddress"/>
	<x path="Void"/>
</f></connect></overloads>
		</connect>
		<disconnect public="1" set="method"><f a=""><x path="Void"/></f></disconnect>
		<isBound public="1" set="method"><f a=""><x path="Bool"/></f></isBound>
		<isConnected public="1" set="method"><f a=""><x path="Bool"/></f></isConnected>
		<getInetAddress public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></getInetAddress>
		<getPort public="1" set="method"><f a=""><x path="Int"/></f></getPort>
		<getRemoteSocketAddress public="1" set="method"><f a=""><c path="java.net.SocketAddress"/></f></getRemoteSocketAddress>
		<getLocalSocketAddress public="1" set="method"><f a=""><c path="java.net.SocketAddress"/></f></getLocalSocketAddress>
		<send public="1" set="method"><f a="param1">
	<c path="java.net.DatagramPacket"/>
	<x path="Void"/>
</f></send>
		<receive public="1" set="method"><f a="param1">
	<c path="java.net.DatagramPacket"/>
	<x path="Void"/>
</f></receive>
		<getLocalAddress public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></getLocalAddress>
		<getLocalPort public="1" set="method"><f a=""><x path="Int"/></f></getLocalPort>
		<setSoTimeout public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setSoTimeout>
		<getSoTimeout public="1" set="method"><f a=""><x path="Int"/></f></getSoTimeout>
		<setSendBufferSize public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setSendBufferSize>
		<getSendBufferSize public="1" set="method"><f a=""><x path="Int"/></f></getSendBufferSize>
		<setReceiveBufferSize public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setReceiveBufferSize>
		<getReceiveBufferSize public="1" set="method"><f a=""><x path="Int"/></f></getReceiveBufferSize>
		<setReuseAddress public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setReuseAddress>
		<getReuseAddress public="1" set="method"><f a=""><x path="Bool"/></f></getReuseAddress>
		<setBroadcast public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setBroadcast>
		<getBroadcast public="1" set="method"><f a=""><x path="Bool"/></f></getBroadcast>
		<setTrafficClass public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setTrafficClass>
		<getTrafficClass public="1" set="method"><f a=""><x path="Int"/></f></getTrafficClass>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<isClosed public="1" set="method"><f a=""><x path="Bool"/></f></isClosed>
		<getChannel public="1" set="method"><f a=""><c path="java.nio.channels.DatagramChannel"/></f></getChannel>
		<impl public="1"><c path="java.net.DatagramSocketImpl"/></impl>
		<oldImpl public="1"><x path="Bool"/></oldImpl>
		<connectState public="1"><x path="Int"/></connectState>
		<connectedAddress public="1"><c path="java.net.InetAddress"/></connectedAddress>
		<connectedPort public="1"><x path="Int"/></connectedPort>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.net.InetAddress"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.net.SocketAddress"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.net.DatagramSocketImpl"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.net.DatagramSocket"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.DatagramSocket_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/DatagramSocket$1.class" module="java.net.DatagramSocket" extern="1">
		<implements path="java.security.PrivilegedExceptionAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<this_0 final="1" public="1">
			<c path="java.net.DatagramSocket"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.net.DatagramSocket"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.DatagramSocket$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.SocketOptions" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/SocketOptions.class" extern="1" interface="1">
		<TCP_NODELAY final="1" public="1" set="null" static="1"><x path="Int"/></TCP_NODELAY>
		<SO_BINDADDR final="1" public="1" set="null" static="1"><x path="Int"/></SO_BINDADDR>
		<SO_REUSEADDR final="1" public="1" set="null" static="1"><x path="Int"/></SO_REUSEADDR>
		<SO_BROADCAST final="1" public="1" set="null" static="1"><x path="Int"/></SO_BROADCAST>
		<IP_MULTICAST_IF final="1" public="1" set="null" static="1"><x path="Int"/></IP_MULTICAST_IF>
		<IP_MULTICAST_IF2 final="1" public="1" set="null" static="1"><x path="Int"/></IP_MULTICAST_IF2>
		<IP_MULTICAST_LOOP final="1" public="1" set="null" static="1"><x path="Int"/></IP_MULTICAST_LOOP>
		<IP_TOS final="1" public="1" set="null" static="1"><x path="Int"/></IP_TOS>
		<SO_LINGER final="1" public="1" set="null" static="1"><x path="Int"/></SO_LINGER>
		<SO_TIMEOUT final="1" public="1" set="null" static="1"><x path="Int"/></SO_TIMEOUT>
		<SO_SNDBUF final="1" public="1" set="null" static="1"><x path="Int"/></SO_SNDBUF>
		<SO_RCVBUF final="1" public="1" set="null" static="1"><x path="Int"/></SO_RCVBUF>
		<SO_KEEPALIVE final="1" public="1" set="null" static="1"><x path="Int"/></SO_KEEPALIVE>
		<SO_OOBINLINE final="1" public="1" set="null" static="1"><x path="Int"/></SO_OOBINLINE>
		<setOption public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></setOption>
		<getOption public="1" set="method"><f a="param1">
	<x path="Int"/>
	<d/>
</f></getOption>
		<meta>
			<m n=":native"><e>"java.net.SocketOptions"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.DatagramSocketImpl" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/DatagramSocketImpl.class" extern="1" abstract="1">
		<implements path="java.net.SocketOptions"/>
		<dataAvailable public="1" set="method"><f a=""><x path="Int"/></f></dataAvailable>
		<setDatagramSocket public="1" set="method"><f a="param1">
	<c path="java.net.DatagramSocket"/>
	<x path="Void"/>
</f></setDatagramSocket>
		<getDatagramSocket public="1" set="method"><f a=""><c path="java.net.DatagramSocket"/></f></getDatagramSocket>
		<create abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></create>
		<bind abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.net.InetAddress"/>
	<x path="Void"/>
</f></bind>
		<send abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.DatagramPacket"/>
	<x path="Void"/>
</f></send>
		<connect public="1" set="method"><f a="param1:param2">
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
		<disconnect public="1" set="method"><f a=""><x path="Void"/></f></disconnect>
		<peek abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
</f></peek>
		<peekData abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.DatagramPacket"/>
	<x path="Int"/>
</f></peekData>
		<receive abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.DatagramPacket"/>
	<x path="Void"/>
</f></receive>
		<setTTL abstract="1" public="1" set="method">
			<f a="param1">
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</setTTL>
		<getTTL abstract="1" public="1" set="method">
			<f a=""><t path="java.types.Int8"/></f>
			<meta><m n=":deprecated"/></meta>
		</getTTL>
		<setTimeToLive abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setTimeToLive>
		<getTimeToLive abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></getTimeToLive>
		<join abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.InetAddress"/>
	<x path="Void"/>
</f></join>
		<leave abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.InetAddress"/>
	<x path="Void"/>
</f></leave>
		<joinGroup abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.net.SocketAddress"/>
	<c path="java.net.NetworkInterface"/>
	<x path="Void"/>
</f></joinGroup>
		<leaveGroup abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.net.SocketAddress"/>
	<c path="java.net.NetworkInterface"/>
	<x path="Void"/>
</f></leaveGroup>
		<close abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></close>
		<getLocalPort public="1" set="method"><f a=""><x path="Int"/></f></getLocalPort>
		<setOption public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.net.SocketOption"><c path="setOption.T"/></c>
	<c path="setOption.T"/>
	<x path="Void"/>
</f></setOption>
		<getOption public="1" params="T" set="method"><f a="param1">
	<c path="java.net.SocketOption"><c path="getOption.T"/></c>
	<c path="getOption.T"/>
</f></getOption>
		<getFileDescriptor public="1" set="method"><f a=""><c path="java.io.FileDescriptor"/></f></getFileDescriptor>
		<localPort public="1"><x path="Int"/></localPort>
		<fd public="1"><c path="java.io.FileDescriptor"/></fd>
		<socket public="1"><c path="java.net.DatagramSocket"/></socket>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.net.DatagramSocketImpl"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.DatagramSocketImplFactory" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/DatagramSocketImplFactory.class" extern="1" interface="1">
		<createDatagramSocketImpl public="1" set="method"><f a=""><c path="java.net.DatagramSocketImpl"/></f></createDatagramSocketImpl>
		<meta>
			<m n=":native"><e>"java.net.DatagramSocketImplFactory"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.FileNameMap" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/FileNameMap.class" extern="1" interface="1">
		<getContentTypeFor public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></getContentTypeFor>
		<meta>
			<m n=":native"><e>"java.net.FileNameMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.InetAddress" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetAddress.class" extern="1">
		<implements path="java.io.Serializable"/>
		<getByAddress public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<c path="java.net.InetAddress"/>
			</f>
			<overloads><getByAddress public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.net.InetAddress"/>
</f></getByAddress></overloads>
		</getByAddress>
		<getByName public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.net.InetAddress"/>
</f></getByName>
		<getAllByName public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.NativeArray"><c path="java.net.InetAddress"/></c>
</f></getAllByName>
		<getLoopbackAddress public="1" set="method" static="1"><f a=""><c path="java.net.InetAddress"/></f></getLoopbackAddress>
		<getAllByName0 public="1" set="method" static="1"><f a="param1:param2">
	<c path="String"/>
	<x path="Bool"/>
	<c path="java.NativeArray"><c path="java.net.InetAddress"/></c>
</f></getAllByName0>
		<getLocalHost public="1" set="method" static="1"><f a=""><c path="java.net.InetAddress"/></f></getLocalHost>
		<anyLocalAddress public="1" set="method" static="1"><f a=""><c path="java.net.InetAddress"/></f></anyLocalAddress>
		<loadImpl public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.net.InetAddressImpl"/>
</f></loadImpl>
		<IPv4 final="1" public="1" set="null" static="1"><x path="Int"/></IPv4>
		<IPv6 final="1" public="1" set="null" static="1"><x path="Int"/></IPv6>
		<preferIPv6Address public="1" static="1"><x path="Bool"/></preferIPv6Address>
		<unknown_array public="1" static="1"><c path="java.NativeArray"><c path="java.net.InetAddress"/></c></unknown_array>
		<impl public="1" static="1"><c path="java.net.InetAddressImpl"/></impl>
		<holder public="1" set="method"><f a=""><c path="java.net.InetAddress_InetAddressHolder"/></f></holder>
		<isMulticastAddress public="1" set="method"><f a=""><x path="Bool"/></f></isMulticastAddress>
		<isAnyLocalAddress public="1" set="method"><f a=""><x path="Bool"/></f></isAnyLocalAddress>
		<isLoopbackAddress public="1" set="method"><f a=""><x path="Bool"/></f></isLoopbackAddress>
		<isLinkLocalAddress public="1" set="method"><f a=""><x path="Bool"/></f></isLinkLocalAddress>
		<isSiteLocalAddress public="1" set="method"><f a=""><x path="Bool"/></f></isSiteLocalAddress>
		<isMCGlobal public="1" set="method"><f a=""><x path="Bool"/></f></isMCGlobal>
		<isMCNodeLocal public="1" set="method"><f a=""><x path="Bool"/></f></isMCNodeLocal>
		<isMCLinkLocal public="1" set="method"><f a=""><x path="Bool"/></f></isMCLinkLocal>
		<isMCSiteLocal public="1" set="method"><f a=""><x path="Bool"/></f></isMCSiteLocal>
		<isMCOrgLocal public="1" set="method"><f a=""><x path="Bool"/></f></isMCOrgLocal>
		<isReachable public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<overloads><isReachable public="1" set="method"><f a="param1:param2:param3">
	<c path="java.net.NetworkInterface"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isReachable></overloads>
		</isReachable>
		<getHostName public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><getHostName public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<c path="String"/>
</f></getHostName></overloads>
		</getHostName>
		<getCanonicalHostName public="1" set="method"><f a=""><c path="String"/></f></getCanonicalHostName>
		<getAddress public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getAddress>
		<getHostAddress public="1" set="method"><f a=""><c path="String"/></f></getHostAddress>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.net.InetAddress"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.InetAddress_InetAddressHolder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetAddress$InetAddressHolder.class" module="java.net.InetAddress" extern="1">
		<init public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></init>
		<getHostName public="1" set="method"><f a=""><c path="String"/></f></getHostName>
		<getAddress public="1" set="method"><f a=""><x path="Int"/></f></getAddress>
		<getFamily public="1" set="method"><f a=""><x path="Int"/></f></getFamily>
		<hostName public="1"><c path="String"/></hostName>
		<address public="1"><x path="Int"/></address>
		<family public="1"><x path="Int"/></family>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.net.InetAddress$InetAddressHolder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.InetAddress_CacheEntry" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetAddress$CacheEntry.class" module="java.net.InetAddress" extern="1">
		<addresses public="1"><c path="java.NativeArray"><c path="java.net.InetAddress"/></c></addresses>
		<expiration public="1"><x path="haxe.Int64"/></expiration>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.net.InetAddress"/></c>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.InetAddress$CacheEntry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.InetAddress_Cache" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetAddress$Cache.class" module="java.net.InetAddress" extern="1">
		<put public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.NativeArray"><c path="java.net.InetAddress"/></c>
	<c path="java.net.InetAddress_Cache"/>
</f></put>
		<get public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.net.InetAddress_CacheEntry"/>
</f></get>
		<new public="1" set="method"><f a="param1">
	<e path="java.net.InetAddress_Cache_Type"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.InetAddress$Cache"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.net.InetAddress_Cache_Type" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetAddress$Cache$Type.class" module="java.net.InetAddress">
		<Positive/>
		<Negative/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.net.InetAddress$Cache$Type"</e></m>
		</meta>
	</enum>
	<class path="java.net.InetAddress_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetAddress$3.class" module="java.net.InetAddress" extern="1">
		<implements path="java.security.PrivilegedExceptionAction"><c path="java.sun.net.spi.nameservice.NameService"/></implements>
		<run public="1" set="method"><f a=""><c path="java.sun.net.spi.nameservice.NameService"/></f></run>
		<val_providerName final="1" public="1">
			<c path="String"/>
			<meta><m n=":native"><e>"val$providerName"</e></m></meta>
		</val_providerName>
		<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.InetAddress$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.net.spi.nameservice.NameService" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/net/spi/nameservice/NameService.class" extern="1" interface="1">
		<lookupAllHostAddr public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.NativeArray"><c path="java.net.InetAddress"/></c>
</f></lookupAllHostAddr>
		<getHostByAddr public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="String"/>
</f></getHostByAddr>
		<meta>
			<m n=":native"><e>"sun.net.spi.nameservice.NameService"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.InetAddress_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetAddress$2.class" module="java.net.InetAddress" extern="1">
		<implements path="java.sun.net.spi.nameservice.NameService"/>
		<lookupAllHostAddr public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.NativeArray"><c path="java.net.InetAddress"/></c>
</f></lookupAllHostAddr>
		<getHostByAddr public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="String"/>
</f></getHostByAddr>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.net.InetAddress$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.InetAddress_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetAddress$1.class" module="java.net.InetAddress" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.net.InetAddress$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.InetAddressImpl" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetAddressImpl.class" extern="1" interface="1">
		<getLocalHostName public="1" set="method"><f a=""><c path="String"/></f></getLocalHostName>
		<lookupAllHostAddr public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.NativeArray"><c path="java.net.InetAddress"/></c>
</f></lookupAllHostAddr>
		<getHostByAddr public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="String"/>
</f></getHostByAddr>
		<anyLocalAddress public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></anyLocalAddress>
		<loopbackAddress public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></loopbackAddress>
		<isReachable public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<c path="java.net.NetworkInterface"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isReachable>
		<meta>
			<m n=":native"><e>"java.net.InetAddressImpl"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.SocketAddress" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/SocketAddress.class" extern="1" abstract="1">
		<implements path="java.io.Serializable"/>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.net.SocketAddress"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.InetSocketAddress" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetSocketAddress.class" extern="1">
		<extends path="java.net.SocketAddress"/>
		<createUnresolved public="1" set="method" static="1"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<c path="java.net.InetSocketAddress"/>
</f></createUnresolved>
		<getPort final="1" public="1" set="method"><f a=""><x path="Int"/></f></getPort>
		<getAddress final="1" public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></getAddress>
		<getHostName final="1" public="1" set="method"><f a=""><c path="String"/></f></getHostName>
		<getHostString final="1" public="1" set="method"><f a=""><c path="String"/></f></getHostString>
		<isUnresolved final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isUnresolved>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<equals final="1" public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode final="1" public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<new public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.net.InetSocketAddress"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.InetSocketAddress_InetSocketAddressHolder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetSocketAddress$InetSocketAddressHolder.class" module="java.net.InetSocketAddress" extern="1">
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<equals final="1" public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode final="1" public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="String"/>
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<c path="java.net.InetSocketAddress_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.InetSocketAddress$InetSocketAddressHolder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.InetSocketAddress_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetSocketAddress$1.class" module="java.net.InetSocketAddress" extern="1"><meta>
	<m n=":native"><e>"java.net.InetSocketAddress$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.net.InterfaceAddress" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InterfaceAddress.class" extern="1">
		<getAddress public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></getAddress>
		<getBroadcast public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></getBroadcast>
		<getNetworkPrefixLength public="1" set="method"><f a=""><t path="java.types.Int16"/></f></getNetworkPrefixLength>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.net.InterfaceAddress"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.NetworkInterface" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/NetworkInterface.class" extern="1">
		<getByName public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.net.NetworkInterface"/>
</f></getByName>
		<getByIndex public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.net.NetworkInterface"/>
</f></getByIndex>
		<getByInetAddress public="1" set="method" static="1"><f a="param1">
	<c path="java.net.InetAddress"/>
	<c path="java.net.NetworkInterface"/>
</f></getByInetAddress>
		<getNetworkInterfaces public="1" set="method" static="1"><f a=""><c path="java.util.Enumeration"><c path="java.net.NetworkInterface"/></c></f></getNetworkInterfaces>
		<getDefault public="1" set="method" static="1"><f a=""><c path="java.net.NetworkInterface"/></f></getDefault>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getInetAddresses public="1" set="method"><f a=""><c path="java.util.Enumeration"><c path="java.net.InetAddress"/></c></f></getInetAddresses>
		<getInterfaceAddresses public="1" set="method"><f a=""><c path="java.util.List"><c path="java.net.InterfaceAddress"/></c></f></getInterfaceAddresses>
		<getSubInterfaces public="1" set="method"><f a=""><c path="java.util.Enumeration"><c path="java.net.NetworkInterface"/></c></f></getSubInterfaces>
		<getParent public="1" set="method"><f a=""><c path="java.net.NetworkInterface"/></f></getParent>
		<getIndex public="1" set="method"><f a=""><x path="Int"/></f></getIndex>
		<getDisplayName public="1" set="method"><f a=""><c path="String"/></f></getDisplayName>
		<isUp public="1" set="method"><f a=""><x path="Bool"/></f></isUp>
		<isLoopback public="1" set="method"><f a=""><x path="Bool"/></f></isLoopback>
		<isPointToPoint public="1" set="method"><f a=""><x path="Bool"/></f></isPointToPoint>
		<supportsMulticast public="1" set="method"><f a=""><x path="Bool"/></f></supportsMulticast>
		<getHardwareAddress public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getHardwareAddress>
		<getMTU public="1" set="method"><f a=""><x path="Int"/></f></getMTU>
		<isVirtual public="1" set="method"><f a=""><x path="Bool"/></f></isVirtual>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<x path="Int"/>
	<c path="java.NativeArray"><c path="java.net.InetAddress"/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.net.NetworkInterface"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.NetworkInterface_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/NetworkInterface$2.class" module="java.net.NetworkInterface" extern="1">
		<implements path="java.util.Enumeration"><c path="java.net.NetworkInterface"/></implements>
		<nextElement public="1" set="method"><f a=""><c path="java.net.NetworkInterface"/></f></nextElement>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<val_netifs final="1" public="1">
			<c path="java.NativeArray"><c path="java.net.NetworkInterface"/></c>
			<meta><m n=":native"><e>"val$netifs"</e></m></meta>
		</val_netifs>
		<new public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.net.NetworkInterface"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.NetworkInterface$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.NetworkInterface_1subIFs" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/NetworkInterface$1subIFs.class" module="java.net.NetworkInterface" extern="1">
		<implements path="java.util.Enumeration"><c path="java.net.NetworkInterface"/></implements>
		<nextElement public="1" set="method"><f a=""><c path="java.net.NetworkInterface"/></f></nextElement>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<this_0 final="1" public="1">
			<c path="java.net.NetworkInterface"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.net.NetworkInterface"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.NetworkInterface$1subIFs"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.NetworkInterface_1checkedAddresses" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/NetworkInterface$1checkedAddresses.class" module="java.net.NetworkInterface" extern="1">
		<implements path="java.util.Enumeration"><c path="java.net.InetAddress"/></implements>
		<nextElement public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></nextElement>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<this_0 final="1" public="1">
			<c path="java.net.NetworkInterface"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.net.NetworkInterface"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.NetworkInterface$1checkedAddresses"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.NetworkInterface_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/NetworkInterface$1.class" module="java.net.NetworkInterface" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.net.NetworkInterface$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.ProtocolFamily" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/ProtocolFamily.class" extern="1" interface="1">
		<name public="1" set="method"><f a=""><c path="String"/></f></name>
		<meta>
			<m n=":native"><e>"java.net.ProtocolFamily"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.Proxy" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/Proxy.class" extern="1">
		<NO_PROXY final="1" public="1" set="null" static="1"><c path="java.net.Proxy"/></NO_PROXY>
		<type public="1" set="method"><f a=""><e path="java.net.Proxy_Type"/></f></type>
		<address public="1" set="method"><f a=""><c path="java.net.SocketAddress"/></f></address>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<equals final="1" public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode final="1" public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<new public="1" set="method"><f a="param1:param2">
	<e path="java.net.Proxy_Type"/>
	<c path="java.net.SocketAddress"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.Proxy"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.net.Proxy_Type" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/Proxy$Type.class" module="java.net.Proxy">
		<DIRECT/>
		<HTTP/>
		<SOCKS/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.net.Proxy$Type"</e></m>
		</meta>
	</enum>
	<class path="java.net.ServerSocket" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/ServerSocket.class" extern="1">
		<implements path="java.io.Closeable"/>
		<setSocketFactory public="1" set="method" static="1"><f a="param1">
	<c path="java.net.SocketImplFactory"/>
	<x path="Void"/>
</f></setSocketFactory>
		<getImpl public="1" set="method"><f a=""><c path="java.net.SocketImpl"/></f></getImpl>
		<createImpl public="1" set="method"><f a=""><x path="Void"/></f></createImpl>
		<bind public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<x path="Void"/>
			</f>
			<overloads><bind public="1" set="method"><f a="param1:param2">
	<c path="java.net.SocketAddress"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bind></overloads>
		</bind>
		<getInetAddress public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></getInetAddress>
		<getLocalPort public="1" set="method"><f a=""><x path="Int"/></f></getLocalPort>
		<getLocalSocketAddress public="1" set="method"><f a=""><c path="java.net.SocketAddress"/></f></getLocalSocketAddress>
		<accept public="1" set="method"><f a=""><c path="java.net.Socket"/></f></accept>
		<implAccept final="1" public="1" set="method"><f a="param1">
	<c path="java.net.Socket"/>
	<x path="Void"/>
</f></implAccept>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<getChannel public="1" set="method"><f a=""><c path="java.nio.channels.ServerSocketChannel"/></f></getChannel>
		<isBound public="1" set="method"><f a=""><x path="Bool"/></f></isBound>
		<isClosed public="1" set="method"><f a=""><x path="Bool"/></f></isClosed>
		<setSoTimeout public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setSoTimeout>
		<getSoTimeout public="1" set="method"><f a=""><x path="Int"/></f></getSoTimeout>
		<setReuseAddress public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setReuseAddress>
		<getReuseAddress public="1" set="method"><f a=""><x path="Bool"/></f></getReuseAddress>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<setBound public="1" set="method"><f a=""><x path="Void"/></f></setBound>
		<setCreated public="1" set="method"><f a=""><x path="Void"/></f></setCreated>
		<setReceiveBufferSize public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setReceiveBufferSize>
		<getReceiveBufferSize public="1" set="method"><f a=""><x path="Int"/></f></getReceiveBufferSize>
		<setPerformancePreferences public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setPerformancePreferences>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketImpl"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.net.InetAddress"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a=""><x path="Void"/></f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.net.ServerSocket"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.ServerSocket_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/ServerSocket$1.class" module="java.net.ServerSocket" extern="1">
		<implements path="java.security.PrivilegedExceptionAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<this_0 final="1" public="1">
			<c path="java.net.ServerSocket"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.net.ServerSocket"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.ServerSocket$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.Socket" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/Socket.class" extern="1">
		<implements path="java.io.Closeable"/>
		<setSocketImplFactory public="1" set="method" static="1"><f a="param1">
	<c path="java.net.SocketImplFactory"/>
	<x path="Void"/>
</f></setSocketImplFactory>
		<createImpl public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></createImpl>
		<setImpl public="1" set="method"><f a=""><x path="Void"/></f></setImpl>
		<getImpl public="1" set="method"><f a=""><c path="java.net.SocketImpl"/></f></getImpl>
		<connect public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<x path="Void"/>
			</f>
			<overloads><connect public="1" set="method"><f a="param1:param2">
	<c path="java.net.SocketAddress"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect></overloads>
		</connect>
		<bind public="1" set="method"><f a="param1">
	<c path="java.net.SocketAddress"/>
	<x path="Void"/>
</f></bind>
		<postAccept final="1" public="1" set="method"><f a=""><x path="Void"/></f></postAccept>
		<setCreated public="1" set="method"><f a=""><x path="Void"/></f></setCreated>
		<setBound public="1" set="method"><f a=""><x path="Void"/></f></setBound>
		<setConnected public="1" set="method"><f a=""><x path="Void"/></f></setConnected>
		<getInetAddress public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></getInetAddress>
		<getLocalAddress public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></getLocalAddress>
		<getPort public="1" set="method"><f a=""><x path="Int"/></f></getPort>
		<getLocalPort public="1" set="method"><f a=""><x path="Int"/></f></getLocalPort>
		<getRemoteSocketAddress public="1" set="method"><f a=""><c path="java.net.SocketAddress"/></f></getRemoteSocketAddress>
		<getLocalSocketAddress public="1" set="method"><f a=""><c path="java.net.SocketAddress"/></f></getLocalSocketAddress>
		<getChannel public="1" set="method"><f a=""><c path="java.nio.channels.SocketChannel"/></f></getChannel>
		<getInputStream public="1" set="method"><f a=""><c path="java.io.InputStream"/></f></getInputStream>
		<getOutputStream public="1" set="method"><f a=""><c path="java.io.OutputStream"/></f></getOutputStream>
		<setTcpNoDelay public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setTcpNoDelay>
		<getTcpNoDelay public="1" set="method"><f a=""><x path="Bool"/></f></getTcpNoDelay>
		<setSoLinger public="1" set="method"><f a="param1:param2">
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSoLinger>
		<getSoLinger public="1" set="method"><f a=""><x path="Int"/></f></getSoLinger>
		<sendUrgentData public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></sendUrgentData>
		<setOOBInline public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setOOBInline>
		<getOOBInline public="1" set="method"><f a=""><x path="Bool"/></f></getOOBInline>
		<setSoTimeout public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setSoTimeout>
		<getSoTimeout public="1" set="method"><f a=""><x path="Int"/></f></getSoTimeout>
		<setSendBufferSize public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setSendBufferSize>
		<getSendBufferSize public="1" set="method"><f a=""><x path="Int"/></f></getSendBufferSize>
		<setReceiveBufferSize public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setReceiveBufferSize>
		<getReceiveBufferSize public="1" set="method"><f a=""><x path="Int"/></f></getReceiveBufferSize>
		<setKeepAlive public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setKeepAlive>
		<getKeepAlive public="1" set="method"><f a=""><x path="Bool"/></f></getKeepAlive>
		<setTrafficClass public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setTrafficClass>
		<getTrafficClass public="1" set="method"><f a=""><x path="Int"/></f></getTrafficClass>
		<setReuseAddress public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setReuseAddress>
		<getReuseAddress public="1" set="method"><f a=""><x path="Bool"/></f></getReuseAddress>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<shutdownInput public="1" set="method"><f a=""><x path="Void"/></f></shutdownInput>
		<shutdownOutput public="1" set="method"><f a=""><x path="Void"/></f></shutdownOutput>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<isConnected public="1" set="method"><f a=""><x path="Bool"/></f></isConnected>
		<isBound public="1" set="method"><f a=""><x path="Bool"/></f></isBound>
		<isClosed public="1" set="method"><f a=""><x path="Bool"/></f></isClosed>
		<isInputShutdown public="1" set="method"><f a=""><x path="Bool"/></f></isInputShutdown>
		<isOutputShutdown public="1" set="method"><f a=""><x path="Bool"/></f></isOutputShutdown>
		<setPerformancePreferences public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setPerformancePreferences>
		<impl public="1"><c path="java.net.SocketImpl"/></impl>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.net.InetAddress"/>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":deprecated"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":deprecated"/></meta>
				</new>
				<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="String"/>
	<x path="Int"/>
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.net.SocketImpl"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.net.Proxy"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.net.Socket"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.Socket_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/Socket$3.class" module="java.net.Socket" extern="1">
		<implements path="java.security.PrivilegedExceptionAction"><c path="java.io.OutputStream"/></implements>
		<run public="1" set="method"><f a=""><c path="java.io.OutputStream"/></f></run>
		<this_0 final="1" public="1">
			<c path="java.net.Socket"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.net.Socket"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.Socket$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.Socket_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/Socket$2.class" module="java.net.Socket" extern="1">
		<implements path="java.security.PrivilegedExceptionAction"><c path="java.io.InputStream"/></implements>
		<run public="1" set="method"><f a=""><c path="java.io.InputStream"/></f></run>
		<this_0 final="1" public="1">
			<c path="java.net.Socket"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.net.Socket"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.Socket$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.Socket_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/Socket$1.class" module="java.net.Socket" extern="1">
		<implements path="java.security.PrivilegedAction"><x path="java.lang.Boolean"/></implements>
		<run public="1" set="method"><f a=""><x path="java.lang.Boolean"/></f></run>
		<this_0 final="1" public="1">
			<c path="java.net.Socket"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.net.Socket"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.Socket$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.SocketImpl" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/SocketImpl.class" extern="1" abstract="1">
		<implements path="java.net.SocketOptions"/>
		<create abstract="1" public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></create>
		<connect abstract="1" public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<connect abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.net.SocketAddress"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
				<connect abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
			</overloads>
		</connect>
		<bind abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.net.InetAddress"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bind>
		<listen abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></listen>
		<accept abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.SocketImpl"/>
	<x path="Void"/>
</f></accept>
		<getInputStream abstract="1" public="1" set="method"><f a=""><c path="java.io.InputStream"/></f></getInputStream>
		<getOutputStream abstract="1" public="1" set="method"><f a=""><c path="java.io.OutputStream"/></f></getOutputStream>
		<available abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></available>
		<close abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></close>
		<shutdownInput public="1" set="method"><f a=""><x path="Void"/></f></shutdownInput>
		<shutdownOutput public="1" set="method"><f a=""><x path="Void"/></f></shutdownOutput>
		<getFileDescriptor public="1" set="method"><f a=""><c path="java.io.FileDescriptor"/></f></getFileDescriptor>
		<getInetAddress public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></getInetAddress>
		<getPort public="1" set="method"><f a=""><x path="Int"/></f></getPort>
		<supportsUrgentData public="1" set="method"><f a=""><x path="Bool"/></f></supportsUrgentData>
		<sendUrgentData abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></sendUrgentData>
		<getLocalPort public="1" set="method"><f a=""><x path="Int"/></f></getLocalPort>
		<setSocket public="1" set="method"><f a="param1">
	<c path="java.net.Socket"/>
	<x path="Void"/>
</f></setSocket>
		<getSocket public="1" set="method"><f a=""><c path="java.net.Socket"/></f></getSocket>
		<setServerSocket public="1" set="method"><f a="param1">
	<c path="java.net.ServerSocket"/>
	<x path="Void"/>
</f></setServerSocket>
		<getServerSocket public="1" set="method"><f a=""><c path="java.net.ServerSocket"/></f></getServerSocket>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<setPerformancePreferences public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setPerformancePreferences>
		<setOption public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.net.SocketOption"><c path="setOption.T"/></c>
	<c path="setOption.T"/>
	<x path="Void"/>
</f></setOption>
		<getOption public="1" params="T" set="method"><f a="param1">
	<c path="java.net.SocketOption"><c path="getOption.T"/></c>
	<c path="getOption.T"/>
</f></getOption>
		<socket public="1"><c path="java.net.Socket"/></socket>
		<serverSocket public="1"><c path="java.net.ServerSocket"/></serverSocket>
		<fd public="1"><c path="java.io.FileDescriptor"/></fd>
		<address public="1"><c path="java.net.InetAddress"/></address>
		<port public="1"><x path="Int"/></port>
		<localport public="1"><x path="Int"/></localport>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.net.SocketImpl"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.SocketImplFactory" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/SocketImplFactory.class" extern="1" interface="1">
		<createSocketImpl public="1" set="method"><f a=""><c path="java.net.SocketImpl"/></f></createSocketImpl>
		<meta>
			<m n=":native"><e>"java.net.SocketImplFactory"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.SocketOption" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/SocketOption.class" extern="1" interface="1">
		<name public="1" set="method"><f a=""><c path="String"/></f></name>
		<type public="1" set="method"><f a=""><c path="java.lang.Class"><c path="java.net.SocketOption.T"/></c></f></type>
		<meta>
			<m n=":native"><e>"java.net.SocketOption"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="sys.net.Socket" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/net/Socket.hx">
		<select public="1" set="method" line="160" static="1">
			<f a="read:write:others:?timeout">
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<x path="Float"/>
				<a>
					<write><c path="Array"><c path="sys.net.Socket"/></c></write>
					<read><c path="Array"><c path="sys.net.Socket"/></c></read>
					<others><c path="Array"><c path="sys.net.Socket"/></c></others>
				</a>
			</f>
			<haxe_doc>Wait until one of the sockets group is ready for the given operation:

		 - `read` contains sockets on which we want to wait for available data to be read,
		 - `write` contains sockets on which we want to wait until we are allowed to write some data to their output buffers,
		 - `others` contains sockets on which we want to wait for exceptional conditions.
		 - `select` will block until one of the condition is met, in which case it will return the sockets for which the condition was true.

		In case a `timeout` (in seconds) is specified, select might wait at worst until the timeout expires.</haxe_doc>
		</select>
		<input public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>The stream on which you can read available data. By default the stream is blocking until the requested data is available,
		use `setBlocking(false)` or `setTimeout` to prevent infinite waiting.</haxe_doc>
		</input>
		<output public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>The stream on which you can send data. Please note that in case the output buffer you will block while writing the data, use `setBlocking(false)` or `setTimeout` to prevent that.</haxe_doc>
		</output>
		<custom public="1">
			<d/>
			<haxe_doc>A custom value that can be associated with the socket. Can be used to retrieve your custom infos after a `select`.
	*</haxe_doc>
		</custom>
		<sock><c path="java.net.Socket"/></sock>
		<server><c path="java.net.ServerSocket"/></server>
		<boundAddr><c path="java.net.SocketAddress"/></boundAddr>
		<create set="method" line="42"><f a=""><x path="Void"/></f></create>
		<close public="1" set="method" line="50">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the socket : make sure to properly close all your sockets or you will crash when you run out of file descriptors.</haxe_doc>
		</close>
		<read public="1" set="method" line="60">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read the whole data available on the socket.

		*Note*: this is **not** meant to be used together with `setBlocking(false)`,
		as it will always throw `haxe.io.Error.Blocked`. `input` methods should be used directly instead.</haxe_doc>
		</read>
		<write public="1" set="method" line="64">
			<f a="content">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write the whole data to the socket output.

		*Note*: this is **not** meant to be used together with `setBlocking(false)`, as
		`haxe.io.Error.Blocked` may be thrown mid-write with no indication of how many bytes have been written.
		`output.writeBytes()` should be used instead as it returns this information.</haxe_doc>
		</write>
		<connect public="1" set="method" line="68">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Connect to the given server host/port. Throw an exception in case we couldn't successfully connect.</haxe_doc>
		</connect>
		<listen public="1" set="method" line="77">
			<f a="connections">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allow the socket to listen for incoming questions. The parameter tells how many pending connections we can have until they get refused. Use `accept()` to accept incoming connections.</haxe_doc>
		</listen>
		<shutdown public="1" set="method" line="86">
			<f a="read:write">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Shutdown the socket, either for reading or writing.</haxe_doc>
		</shutdown>
		<bind public="1" set="method" line="96">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Bind the socket to the given host/port so it can afterwards listen for connections there.</haxe_doc>
		</bind>
		<accept public="1" set="method" line="104">
			<f a=""><c path="sys.net.Socket"/></f>
			<haxe_doc>Accept a new connected client. This will return a connected socket on which you can read/write some data.</haxe_doc>
		</accept>
		<peer public="1" set="method" line="115">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<haxe_doc>Return the information about the other side of a connected socket.</haxe_doc>
		</peer>
		<host public="1" set="method" line="125">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<haxe_doc>Return the information about our side of a connected socket.</haxe_doc>
		</host>
		<setTimeout public="1" set="method" line="137">
			<f a="timeout">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Gives a timeout (in seconds) after which blocking socket operations (such as reading and writing) will abort and throw an exception.</haxe_doc>
		</setTimeout>
		<waitForRead public="1" set="method" line="144">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Block until some data is available for read on the socket.</haxe_doc>
		</waitForRead>
		<setBlocking public="1" set="method" line="148">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the blocking mode of the socket. A blocking socket is the default behavior. A non-blocking socket will abort blocking operations immediately by throwing a haxe.io.Error.Blocked value.</haxe_doc>
		</setBlocking>
		<setFastSend public="1" set="method" line="152">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows the socket to immediately send the data when written to its output : this will cause less ping but might increase the number of packets / data size, especially when doing a lot of small writes.</haxe_doc>
		</setFastSend>
		<new public="1" set="method" line="38">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new unconnected socket.</haxe_doc>
		</new>
		<haxe_doc>A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="java.net.SslSocket" params="" file="/home/runner/work/haxe/haxe/std/java/net/SslSocket.hx">
		<extends path="sys.net.Socket"/>
		<create set="method" line="26" override="1"><f a=""><x path="Void"/></f></create>
		<meta><m n=":native"><e>"haxe.java.net.SslSocket"</e></m></meta>
	</class>
	<class path="java.net.URI" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URI.class" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Comparable"><c path="java.net.URI"/></implements>
		<create public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.net.URI"/>
</f></create>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<parseServerAuthority public="1" set="method"><f a=""><c path="java.net.URI"/></f></parseServerAuthority>
		<normalize public="1" set="method"><f a=""><c path="java.net.URI"/></f></normalize>
		<resolve public="1" set="method">
			<f a="param1">
				<c path="java.net.URI"/>
				<c path="java.net.URI"/>
			</f>
			<overloads><resolve public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.net.URI"/>
</f></resolve></overloads>
		</resolve>
		<relativize public="1" set="method"><f a="param1">
	<c path="java.net.URI"/>
	<c path="java.net.URI"/>
</f></relativize>
		<toURL public="1" set="method"><f a=""><c path="java.net.URL"/></f></toURL>
		<getScheme public="1" set="method"><f a=""><c path="String"/></f></getScheme>
		<isAbsolute public="1" set="method"><f a=""><x path="Bool"/></f></isAbsolute>
		<isOpaque public="1" set="method"><f a=""><x path="Bool"/></f></isOpaque>
		<getRawSchemeSpecificPart public="1" set="method"><f a=""><c path="String"/></f></getRawSchemeSpecificPart>
		<getSchemeSpecificPart public="1" set="method"><f a=""><c path="String"/></f></getSchemeSpecificPart>
		<getRawAuthority public="1" set="method"><f a=""><c path="String"/></f></getRawAuthority>
		<getAuthority public="1" set="method"><f a=""><c path="String"/></f></getAuthority>
		<getRawUserInfo public="1" set="method"><f a=""><c path="String"/></f></getRawUserInfo>
		<getUserInfo public="1" set="method"><f a=""><c path="String"/></f></getUserInfo>
		<getHost public="1" set="method"><f a=""><c path="String"/></f></getHost>
		<getPort public="1" set="method"><f a=""><x path="Int"/></f></getPort>
		<getRawPath public="1" set="method"><f a=""><c path="String"/></f></getRawPath>
		<getPath public="1" set="method"><f a=""><c path="String"/></f></getPath>
		<getRawQuery public="1" set="method"><f a=""><c path="String"/></f></getRawQuery>
		<getQuery public="1" set="method"><f a=""><c path="String"/></f></getQuery>
		<getRawFragment public="1" set="method"><f a=""><c path="String"/></f></getRawFragment>
		<getFragment public="1" set="method"><f a=""><c path="String"/></f></getFragment>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.net.URI"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toASCIIString public="1" set="method"><f a=""><c path="String"/></f></toASCIIString>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.net.URI"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.URI_Parser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URI$Parser.class" module="java.net.URI" extern="1">
		<parse public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></parse>
		<this_0 final="1" public="1">
			<c path="java.net.URI"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.net.URI"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.URI$Parser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.URL" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URL.class" extern="1">
		<implements path="java.io.Serializable"/>
		<setURLStreamHandlerFactory public="1" set="method" static="1"><f a="param1">
	<c path="java.net.URLStreamHandlerFactory"/>
	<x path="Void"/>
</f></setURLStreamHandlerFactory>
		<getURLStreamHandler public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.net.URLStreamHandler"/>
</f></getURLStreamHandler>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<factory public="1" static="1"><c path="java.net.URLStreamHandlerFactory"/></factory>
		<handlers public="1" static="1"><c path="java.util.Hashtable">
	<c path="String"/>
	<c path="java.net.URLStreamHandler"/>
</c></handlers>
		<set public="1" set="method">
			<f a="param1:param2:param3:param4:param5">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><set public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></set></overloads>
		</set>
		<getQuery public="1" set="method"><f a=""><c path="String"/></f></getQuery>
		<getPath public="1" set="method"><f a=""><c path="String"/></f></getPath>
		<getUserInfo public="1" set="method"><f a=""><c path="String"/></f></getUserInfo>
		<getAuthority public="1" set="method"><f a=""><c path="String"/></f></getAuthority>
		<getPort public="1" set="method"><f a=""><x path="Int"/></f></getPort>
		<getDefaultPort public="1" set="method"><f a=""><x path="Int"/></f></getDefaultPort>
		<getProtocol public="1" set="method"><f a=""><c path="String"/></f></getProtocol>
		<getHost public="1" set="method"><f a=""><c path="String"/></f></getHost>
		<getFile public="1" set="method"><f a=""><c path="String"/></f></getFile>
		<getRef public="1" set="method"><f a=""><c path="String"/></f></getRef>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<sameFile public="1" set="method"><f a="param1">
	<c path="java.net.URL"/>
	<x path="Bool"/>
</f></sameFile>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toExternalForm public="1" set="method"><f a=""><c path="String"/></f></toExternalForm>
		<toURI public="1" set="method"><f a=""><c path="java.net.URI"/></f></toURI>
		<openConnection public="1" set="method">
			<f a=""><c path="java.net.URLConnection"/></f>
			<overloads><openConnection public="1" set="method"><f a="param1">
	<c path="java.net.Proxy"/>
	<c path="java.net.URLConnection"/>
</f></openConnection></overloads>
		</openConnection>
		<openStream final="1" public="1" set="method"><f a=""><c path="java.io.InputStream"/></f></openStream>
		<getContent final="1" public="1" set="method">
			<f a=""><d/></f>
			<overloads><getContent final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<d/>
</f></getContent></overloads>
		</getContent>
		<hostAddress public="1"><c path="java.net.InetAddress"/></hostAddress>
		<handler public="1"><c path="java.net.URLStreamHandler"/></handler>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.net.URL"/>
	<c path="String"/>
	<c path="java.net.URLStreamHandler"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.net.URL"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.net.URLStreamHandler"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.net.URL"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.URLConnection" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URLConnection.class" extern="1" abstract="1">
		<getFileNameMap public="1" set="method" static="1"><f a=""><c path="java.net.FileNameMap"/></f></getFileNameMap>
		<setFileNameMap public="1" set="method" static="1"><f a="param1">
	<c path="java.net.FileNameMap"/>
	<x path="Void"/>
</f></setFileNameMap>
		<setDefaultAllowUserInteraction public="1" set="method" static="1"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setDefaultAllowUserInteraction>
		<getDefaultAllowUserInteraction public="1" set="method" static="1"><f a=""><x path="Bool"/></f></getDefaultAllowUserInteraction>
		<setDefaultRequestProperty public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</setDefaultRequestProperty>
		<getDefaultRequestProperty public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</getDefaultRequestProperty>
		<setContentHandlerFactory public="1" set="method" static="1"><f a="param1">
	<c path="java.net.ContentHandlerFactory"/>
	<x path="Void"/>
</f></setContentHandlerFactory>
		<guessContentTypeFromName public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></guessContentTypeFromName>
		<guessContentTypeFromStream public="1" set="method" static="1"><f a="param1">
	<c path="java.io.InputStream"/>
	<c path="String"/>
</f></guessContentTypeFromStream>
		<factory public="1" static="1"><c path="java.net.ContentHandlerFactory"/></factory>
		<connect abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></connect>
		<setConnectTimeout public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setConnectTimeout>
		<getConnectTimeout public="1" set="method"><f a=""><x path="Int"/></f></getConnectTimeout>
		<setReadTimeout public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setReadTimeout>
		<getReadTimeout public="1" set="method"><f a=""><x path="Int"/></f></getReadTimeout>
		<getURL public="1" set="method"><f a=""><c path="java.net.URL"/></f></getURL>
		<getContentLength public="1" set="method"><f a=""><x path="Int"/></f></getContentLength>
		<getContentLengthLong public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getContentLengthLong>
		<getContentType public="1" set="method"><f a=""><c path="String"/></f></getContentType>
		<getContentEncoding public="1" set="method"><f a=""><c path="String"/></f></getContentEncoding>
		<getExpiration public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getExpiration>
		<getDate public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getDate>
		<getLastModified public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getLastModified>
		<getHeaderField public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<overloads><getHeaderField public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="String"/>
</f></getHeaderField></overloads>
		</getHeaderField>
		<getHeaderFields public="1" set="method"><f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="java.util.List"><c path="String"/></c>
</c></f></getHeaderFields>
		<getHeaderFieldInt public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getHeaderFieldInt>
		<getHeaderFieldLong public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></getHeaderFieldLong>
		<getHeaderFieldDate public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></getHeaderFieldDate>
		<getHeaderFieldKey public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="String"/>
</f></getHeaderFieldKey>
		<getContent public="1" set="method">
			<f a=""><d/></f>
			<overloads><getContent public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<d/>
</f></getContent></overloads>
		</getContent>
		<getPermission public="1" set="method"><f a=""><c path="java.security.Permission"/></f></getPermission>
		<getInputStream public="1" set="method"><f a=""><c path="java.io.InputStream"/></f></getInputStream>
		<getOutputStream public="1" set="method"><f a=""><c path="java.io.OutputStream"/></f></getOutputStream>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<setDoInput public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setDoInput>
		<getDoInput public="1" set="method"><f a=""><x path="Bool"/></f></getDoInput>
		<setDoOutput public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setDoOutput>
		<getDoOutput public="1" set="method"><f a=""><x path="Bool"/></f></getDoOutput>
		<setAllowUserInteraction public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setAllowUserInteraction>
		<getAllowUserInteraction public="1" set="method"><f a=""><x path="Bool"/></f></getAllowUserInteraction>
		<setUseCaches public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setUseCaches>
		<getUseCaches public="1" set="method"><f a=""><x path="Bool"/></f></getUseCaches>
		<setIfModifiedSince public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setIfModifiedSince>
		<getIfModifiedSince public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getIfModifiedSince>
		<getDefaultUseCaches public="1" set="method"><f a=""><x path="Bool"/></f></getDefaultUseCaches>
		<setDefaultUseCaches public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setDefaultUseCaches>
		<setRequestProperty public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setRequestProperty>
		<addRequestProperty public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addRequestProperty>
		<getRequestProperty public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></getRequestProperty>
		<getRequestProperties public="1" set="method"><f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="java.util.List"><c path="String"/></c>
</c></f></getRequestProperties>
		<getContentHandler public="1" set="method"><f a=""><c path="java.net.ContentHandler"/></f></getContentHandler>
		<url public="1"><c path="java.net.URL"/></url>
		<doInput public="1"><x path="Bool"/></doInput>
		<doOutput public="1"><x path="Bool"/></doOutput>
		<allowUserInteraction public="1"><x path="Bool"/></allowUserInteraction>
		<useCaches public="1"><x path="Bool"/></useCaches>
		<ifModifiedSince public="1"><x path="haxe.Int64"/></ifModifiedSince>
		<connected public="1"><x path="Bool"/></connected>
		<new public="1" set="method"><f a="param1">
	<c path="java.net.URL"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.net.URLConnection"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.URLConnection_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URLConnection$1.class" module="java.net.URLConnection" extern="1">
		<implements path="java.net.FileNameMap"/>
		<getContentTypeFor public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></getContentTypeFor>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.net.URLConnection$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.URLDecoder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URLDecoder.class" extern="1">
		<decode public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<overloads><decode public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode></overloads>
		</decode>
		<dfltEncName public="1" static="1"><c path="String"/></dfltEncName>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.net.URLDecoder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.URLEncoder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URLEncoder.class" extern="1">
		<encode public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":deprecated"/></meta>
			<overloads><encode public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode></overloads>
		</encode>
		<dontNeedEncoding public="1" static="1"><c path="java.util.BitSet"/></dontNeedEncoding>
		<caseDiff final="1" public="1" set="null" static="1"><x path="Int"/></caseDiff>
		<dfltEncName public="1" static="1"><c path="String"/></dfltEncName>
		<meta>
			<m n=":native"><e>"java.net.URLEncoder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.URLStreamHandler" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URLStreamHandler.class" extern="1" abstract="1">
		<openConnection abstract="1" public="1" set="method">
			<f a="param1">
				<c path="java.net.URL"/>
				<c path="java.net.URLConnection"/>
			</f>
			<overloads><openConnection public="1" set="method"><f a="param1:param2">
	<c path="java.net.URL"/>
	<c path="java.net.Proxy"/>
	<c path="java.net.URLConnection"/>
</f></openConnection></overloads>
		</openConnection>
		<parseURL public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.net.URL"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></parseURL>
		<getDefaultPort public="1" set="method"><f a=""><x path="Int"/></f></getDefaultPort>
		<equals public="1" set="method"><f a="param1:param2">
	<c path="java.net.URL"/>
	<c path="java.net.URL"/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a="param1">
	<c path="java.net.URL"/>
	<x path="Int"/>
</f></hashCode>
		<sameFile public="1" set="method"><f a="param1:param2">
	<c path="java.net.URL"/>
	<c path="java.net.URL"/>
	<x path="Bool"/>
</f></sameFile>
		<getHostAddress public="1" set="method"><f a="param1">
	<c path="java.net.URL"/>
	<c path="java.net.InetAddress"/>
</f></getHostAddress>
		<hostsEqual public="1" set="method"><f a="param1:param2">
	<c path="java.net.URL"/>
	<c path="java.net.URL"/>
	<x path="Bool"/>
</f></hostsEqual>
		<toExternalForm public="1" set="method"><f a="param1">
	<c path="java.net.URL"/>
	<c path="String"/>
</f></toExternalForm>
		<setURL public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6:param7:param8:param9">
				<c path="java.net.URL"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><setURL public="1" set="method">
	<f a="param1:param2:param3:param4:param5:param6">
		<c path="java.net.URL"/>
		<c path="String"/>
		<c path="String"/>
		<x path="Int"/>
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":deprecated"/></meta>
</setURL></overloads>
		</setURL>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.net.URLStreamHandler"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.net.URLStreamHandlerFactory" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URLStreamHandlerFactory.class" extern="1" interface="1">
		<createURLStreamHandler public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.net.URLStreamHandler"/>
</f></createURLStreamHandler>
		<meta>
			<m n=":native"><e>"java.net.URLStreamHandlerFactory"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.Buffer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/Buffer.class" extern="1" abstract="1">
		<checkBounds public="1" set="method" static="1"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></checkBounds>
		<SPLITERATOR_CHARACTERISTICS final="1" public="1" set="null" static="1"><x path="Int"/></SPLITERATOR_CHARACTERISTICS>
		<capacity final="1" public="1" set="method"><f a=""><x path="Int"/></f></capacity>
		<position final="1" public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><position final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.Buffer"/>
</f></position></overloads>
		</position>
		<limit final="1" public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><limit final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.Buffer"/>
</f></limit></overloads>
		</limit>
		<mark final="1" public="1" set="method"><f a=""><c path="java.nio.Buffer"/></f></mark>
		<reset final="1" public="1" set="method"><f a=""><c path="java.nio.Buffer"/></f></reset>
		<clear final="1" public="1" set="method"><f a=""><c path="java.nio.Buffer"/></f></clear>
		<flip final="1" public="1" set="method"><f a=""><c path="java.nio.Buffer"/></f></flip>
		<rewind final="1" public="1" set="method"><f a=""><c path="java.nio.Buffer"/></f></rewind>
		<remaining final="1" public="1" set="method"><f a=""><x path="Int"/></f></remaining>
		<hasRemaining final="1" public="1" set="method"><f a=""><x path="Bool"/></f></hasRemaining>
		<isReadOnly abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isReadOnly>
		<hasArray abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></hasArray>
		<array abstract="1" public="1" set="method"><f a=""><d/></f></array>
		<arrayOffset abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></arrayOffset>
		<isDirect abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isDirect>
		<nextGetIndex final="1" public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><nextGetIndex final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></nextGetIndex></overloads>
		</nextGetIndex>
		<nextPutIndex final="1" public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><nextPutIndex final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></nextPutIndex></overloads>
		</nextPutIndex>
		<checkIndex final="1" public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><checkIndex final="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></checkIndex></overloads>
		</checkIndex>
		<markValue final="1" public="1" set="method"><f a=""><x path="Int"/></f></markValue>
		<truncate final="1" public="1" set="method"><f a=""><x path="Void"/></f></truncate>
		<discardMark final="1" public="1" set="method"><f a=""><x path="Void"/></f></discardMark>
		<address public="1"><x path="haxe.Int64"/></address>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.Buffer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.ByteBuffer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/ByteBuffer.class" extern="1" abstract="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.ByteBuffer"/></implements>
		<allocateDirect public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.ByteBuffer"/>
</f></allocateDirect>
		<allocate public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.ByteBuffer"/>
</f></allocate>
		<wrap public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<overloads><wrap public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.nio.ByteBuffer"/>
</f></wrap></overloads>
		</wrap>
		<slice abstract="1" public="1" set="method"><f a=""><c path="java.nio.ByteBuffer"/></f></slice>
		<duplicate abstract="1" public="1" set="method"><f a=""><c path="java.nio.ByteBuffer"/></f></duplicate>
		<asReadOnlyBuffer abstract="1" public="1" set="method"><f a=""><c path="java.nio.ByteBuffer"/></f></asReadOnlyBuffer>
		<get abstract="1" public="1" set="method">
			<f a=""><t path="java.types.Int8"/></f>
			<overloads>
				<get public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.nio.ByteBuffer"/>
</f></get>
				<get public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.ByteBuffer"/>
</f></get>
				<get abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<t path="java.types.Int8"/>
</f></get>
			</overloads>
		</get>
		<put abstract="1" public="1" set="method">
			<f a="param1">
				<t path="java.types.Int8"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<overloads>
				<put final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.nio.ByteBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.ByteBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1">
	<c path="java.nio.ByteBuffer"/>
	<c path="java.nio.ByteBuffer"/>
</f></put>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<t path="java.types.Int8"/>
	<c path="java.nio.ByteBuffer"/>
</f></put>
			</overloads>
		</put>
		<hasArray final="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></hasArray>
		<array final="1" public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></array>
		<arrayOffset final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></arrayOffset>
		<compact abstract="1" public="1" set="method"><f a=""><c path="java.nio.ByteBuffer"/></f></compact>
		<isDirect abstract="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isDirect>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<order final="1" public="1" set="method">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<overloads><order final="1" public="1" set="method"><f a="param1">
	<c path="java.nio.ByteOrder"/>
	<c path="java.nio.ByteBuffer"/>
</f></order></overloads>
		</order>
		<_get abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<t path="java.types.Int8"/>
</f></_get>
		<_put abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<t path="java.types.Int8"/>
	<x path="Void"/>
</f></_put>
		<getChar abstract="1" public="1" set="method">
			<f a=""><t path="java.types.Char16"/></f>
			<overloads><getChar abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<t path="java.types.Char16"/>
</f></getChar></overloads>
		</getChar>
		<putChar abstract="1" public="1" set="method">
			<f a="param1">
				<t path="java.types.Char16"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<overloads><putChar abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<t path="java.types.Char16"/>
	<c path="java.nio.ByteBuffer"/>
</f></putChar></overloads>
		</putChar>
		<asCharBuffer abstract="1" public="1" set="method"><f a=""><c path="java.nio.CharBuffer"/></f></asCharBuffer>
		<getShort abstract="1" public="1" set="method">
			<f a=""><t path="java.types.Int16"/></f>
			<overloads><getShort abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<t path="java.types.Int16"/>
</f></getShort></overloads>
		</getShort>
		<putShort abstract="1" public="1" set="method">
			<f a="param1">
				<t path="java.types.Int16"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<overloads><putShort abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<t path="java.types.Int16"/>
	<c path="java.nio.ByteBuffer"/>
</f></putShort></overloads>
		</putShort>
		<asShortBuffer abstract="1" public="1" set="method"><f a=""><c path="java.nio.ShortBuffer"/></f></asShortBuffer>
		<getInt abstract="1" public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><getInt abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt></overloads>
		</getInt>
		<putInt abstract="1" public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<overloads><putInt abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.ByteBuffer"/>
</f></putInt></overloads>
		</putInt>
		<asIntBuffer abstract="1" public="1" set="method"><f a=""><c path="java.nio.IntBuffer"/></f></asIntBuffer>
		<getLong abstract="1" public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<overloads><getLong abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></getLong></overloads>
		</getLong>
		<putLong abstract="1" public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<overloads><putLong abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<c path="java.nio.ByteBuffer"/>
</f></putLong></overloads>
		</putLong>
		<asLongBuffer abstract="1" public="1" set="method"><f a=""><c path="java.nio.LongBuffer"/></f></asLongBuffer>
		<getFloat abstract="1" public="1" set="method">
			<f a=""><x path="Single"/></f>
			<overloads><getFloat abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Single"/>
</f></getFloat></overloads>
		</getFloat>
		<putFloat abstract="1" public="1" set="method">
			<f a="param1">
				<x path="Single"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<overloads><putFloat abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Single"/>
	<c path="java.nio.ByteBuffer"/>
</f></putFloat></overloads>
		</putFloat>
		<asFloatBuffer abstract="1" public="1" set="method"><f a=""><c path="java.nio.FloatBuffer"/></f></asFloatBuffer>
		<getDouble abstract="1" public="1" set="method">
			<f a=""><x path="Float"/></f>
			<overloads><getDouble abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Float"/>
</f></getDouble></overloads>
		</getDouble>
		<putDouble abstract="1" public="1" set="method">
			<f a="param1">
				<x path="Float"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<overloads><putDouble abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Float"/>
	<c path="java.nio.ByteBuffer"/>
</f></putDouble></overloads>
		</putDouble>
		<asDoubleBuffer abstract="1" public="1" set="method"><f a=""><c path="java.nio.DoubleBuffer"/></f></asDoubleBuffer>
		<hb final="1" public="1"><c path="java.NativeArray"><t path="java.types.Int8"/></c></hb>
		<offset final="1" public="1"><x path="Int"/></offset>
		<isReadOnly public="1" override="1"><x path="Bool"/></isReadOnly>
		<bigEndian public="1"><x path="Bool"/></bigEndian>
		<nativeByteOrder public="1"><x path="Bool"/></nativeByteOrder>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.nio.ByteBuffer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.ByteOrder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/ByteOrder.class" extern="1">
		<nativeOrder public="1" set="method" static="1"><f a=""><c path="java.nio.ByteOrder"/></f></nativeOrder>
		<BIG_ENDIAN final="1" public="1" set="null" static="1"><c path="java.nio.ByteOrder"/></BIG_ENDIAN>
		<LITTLE_ENDIAN final="1" public="1" set="null" static="1"><c path="java.nio.ByteOrder"/></LITTLE_ENDIAN>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.nio.ByteOrder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.CharBuffer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/CharBuffer.class" extern="1" abstract="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Readable"/>
		<implements path="java.lang.CharSequence"/>
		<implements path="java.lang.Appendable"/>
		<implements path="java.lang.Comparable"><c path="java.nio.CharBuffer"/></implements>
		<allocate public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.CharBuffer"/>
</f></allocate>
		<wrap public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.nio.CharBuffer"/>
			</f>
			<overloads>
				<wrap public="1" set="method"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<c path="java.nio.CharBuffer"/>
</f></wrap>
				<wrap public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.CharBuffer"/>
</f></wrap>
				<wrap public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<c path="java.nio.CharBuffer"/>
</f></wrap>
			</overloads>
		</wrap>
		<read public="1" set="method"><f a="param1">
	<c path="java.nio.CharBuffer"/>
	<x path="Int"/>
</f></read>
		<slice abstract="1" public="1" set="method"><f a=""><c path="java.nio.CharBuffer"/></f></slice>
		<duplicate abstract="1" public="1" set="method"><f a=""><c path="java.nio.CharBuffer"/></f></duplicate>
		<asReadOnlyBuffer abstract="1" public="1" set="method"><f a=""><c path="java.nio.CharBuffer"/></f></asReadOnlyBuffer>
		<get abstract="1" public="1" set="method">
			<f a=""><t path="java.types.Char16"/></f>
			<overloads>
				<get public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<c path="java.nio.CharBuffer"/>
</f></get>
				<get public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.CharBuffer"/>
</f></get>
				<get abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<t path="java.types.Char16"/>
</f></get>
			</overloads>
		</get>
		<put abstract="1" public="1" set="method">
			<f a="param1">
				<t path="java.types.Char16"/>
				<c path="java.nio.CharBuffer"/>
			</f>
			<overloads>
				<put final="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.nio.CharBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.CharBuffer"/>
</f></put>
				<put final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<c path="java.nio.CharBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.CharBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1">
	<c path="java.nio.CharBuffer"/>
	<c path="java.nio.CharBuffer"/>
</f></put>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<t path="java.types.Char16"/>
	<c path="java.nio.CharBuffer"/>
</f></put>
			</overloads>
		</put>
		<getUnchecked abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<t path="java.types.Char16"/>
</f></getUnchecked>
		<hasArray final="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></hasArray>
		<array final="1" public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><t path="java.types.Char16"/></c></f></array>
		<arrayOffset final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></arrayOffset>
		<compact abstract="1" public="1" set="method"><f a=""><c path="java.nio.CharBuffer"/></f></compact>
		<isDirect abstract="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isDirect>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.nio.CharBuffer"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><toString abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></toString></overloads>
		</toString>
		<length final="1" public="1" set="method"><f a=""><x path="Int"/></f></length>
		<charAt final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<t path="java.types.Char16"/>
</f></charAt>
		<subSequence abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.CharBuffer"/>
</f></subSequence>
		<append public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.nio.CharBuffer"/>
			</f>
			<overloads>
				<append public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<c path="java.nio.CharBuffer"/>
</f></append>
				<append public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.CharBuffer"/>
</f></append>
			</overloads>
		</append>
		<order abstract="1" public="1" set="method"><f a=""><c path="java.nio.ByteOrder"/></f></order>
		<chars public="1" set="method"><f a=""><c path="java.util.stream.IntStream"/></f></chars>
		<hb final="1" public="1"><c path="java.NativeArray"><t path="java.types.Char16"/></c></hb>
		<offset final="1" public="1"><x path="Int"/></offset>
		<isReadOnly public="1" override="1"><x path="Bool"/></isReadOnly>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.nio.CharBuffer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.DoubleBuffer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/DoubleBuffer.class" extern="1" abstract="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.DoubleBuffer"/></implements>
		<allocate public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.DoubleBuffer"/>
</f></allocate>
		<wrap public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.nio.DoubleBuffer"/>
			</f>
			<overloads><wrap public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Float"/></c>
	<c path="java.nio.DoubleBuffer"/>
</f></wrap></overloads>
		</wrap>
		<slice abstract="1" public="1" set="method"><f a=""><c path="java.nio.DoubleBuffer"/></f></slice>
		<duplicate abstract="1" public="1" set="method"><f a=""><c path="java.nio.DoubleBuffer"/></f></duplicate>
		<asReadOnlyBuffer abstract="1" public="1" set="method"><f a=""><c path="java.nio.DoubleBuffer"/></f></asReadOnlyBuffer>
		<get abstract="1" public="1" set="method">
			<f a=""><x path="Float"/></f>
			<overloads>
				<get public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Float"/></c>
	<c path="java.nio.DoubleBuffer"/>
</f></get>
				<get public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.DoubleBuffer"/>
</f></get>
				<get abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Float"/>
</f></get>
			</overloads>
		</get>
		<put abstract="1" public="1" set="method">
			<f a="param1">
				<x path="Float"/>
				<c path="java.nio.DoubleBuffer"/>
			</f>
			<overloads>
				<put final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Float"/></c>
	<c path="java.nio.DoubleBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.DoubleBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1">
	<c path="java.nio.DoubleBuffer"/>
	<c path="java.nio.DoubleBuffer"/>
</f></put>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Float"/>
	<c path="java.nio.DoubleBuffer"/>
</f></put>
			</overloads>
		</put>
		<hasArray final="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></hasArray>
		<array final="1" public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><x path="Float"/></c></f></array>
		<arrayOffset final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></arrayOffset>
		<compact abstract="1" public="1" set="method"><f a=""><c path="java.nio.DoubleBuffer"/></f></compact>
		<isDirect abstract="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isDirect>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.nio.DoubleBuffer"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<order abstract="1" public="1" set="method"><f a=""><c path="java.nio.ByteOrder"/></f></order>
		<hb final="1" public="1"><c path="java.NativeArray"><x path="Float"/></c></hb>
		<offset final="1" public="1"><x path="Int"/></offset>
		<isReadOnly public="1" override="1"><x path="Bool"/></isReadOnly>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.NativeArray"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.nio.DoubleBuffer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.FloatBuffer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/FloatBuffer.class" extern="1" abstract="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.FloatBuffer"/></implements>
		<allocate public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.FloatBuffer"/>
</f></allocate>
		<wrap public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><x path="Single"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.nio.FloatBuffer"/>
			</f>
			<overloads><wrap public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Single"/></c>
	<c path="java.nio.FloatBuffer"/>
</f></wrap></overloads>
		</wrap>
		<slice abstract="1" public="1" set="method"><f a=""><c path="java.nio.FloatBuffer"/></f></slice>
		<duplicate abstract="1" public="1" set="method"><f a=""><c path="java.nio.FloatBuffer"/></f></duplicate>
		<asReadOnlyBuffer abstract="1" public="1" set="method"><f a=""><c path="java.nio.FloatBuffer"/></f></asReadOnlyBuffer>
		<get abstract="1" public="1" set="method">
			<f a=""><x path="Single"/></f>
			<overloads>
				<get public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Single"/></c>
	<c path="java.nio.FloatBuffer"/>
</f></get>
				<get public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.FloatBuffer"/>
</f></get>
				<get abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Single"/>
</f></get>
			</overloads>
		</get>
		<put abstract="1" public="1" set="method">
			<f a="param1">
				<x path="Single"/>
				<c path="java.nio.FloatBuffer"/>
			</f>
			<overloads>
				<put final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Single"/></c>
	<c path="java.nio.FloatBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.FloatBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1">
	<c path="java.nio.FloatBuffer"/>
	<c path="java.nio.FloatBuffer"/>
</f></put>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Single"/>
	<c path="java.nio.FloatBuffer"/>
</f></put>
			</overloads>
		</put>
		<hasArray final="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></hasArray>
		<array final="1" public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><x path="Single"/></c></f></array>
		<arrayOffset final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></arrayOffset>
		<compact abstract="1" public="1" set="method"><f a=""><c path="java.nio.FloatBuffer"/></f></compact>
		<isDirect abstract="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isDirect>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.nio.FloatBuffer"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<order abstract="1" public="1" set="method"><f a=""><c path="java.nio.ByteOrder"/></f></order>
		<hb final="1" public="1"><c path="java.NativeArray"><x path="Single"/></c></hb>
		<offset final="1" public="1"><x path="Int"/></offset>
		<isReadOnly public="1" override="1"><x path="Bool"/></isReadOnly>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.NativeArray"><x path="Single"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.nio.FloatBuffer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.IntBuffer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/IntBuffer.class" extern="1" abstract="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.IntBuffer"/></implements>
		<allocate public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.IntBuffer"/>
</f></allocate>
		<wrap public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.nio.IntBuffer"/>
			</f>
			<overloads><wrap public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.nio.IntBuffer"/>
</f></wrap></overloads>
		</wrap>
		<slice abstract="1" public="1" set="method"><f a=""><c path="java.nio.IntBuffer"/></f></slice>
		<duplicate abstract="1" public="1" set="method"><f a=""><c path="java.nio.IntBuffer"/></f></duplicate>
		<asReadOnlyBuffer abstract="1" public="1" set="method"><f a=""><c path="java.nio.IntBuffer"/></f></asReadOnlyBuffer>
		<get abstract="1" public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads>
				<get public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.nio.IntBuffer"/>
</f></get>
				<get public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.IntBuffer"/>
</f></get>
				<get abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
			</overloads>
		</get>
		<put abstract="1" public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.IntBuffer"/>
			</f>
			<overloads>
				<put final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.nio.IntBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.IntBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1">
	<c path="java.nio.IntBuffer"/>
	<c path="java.nio.IntBuffer"/>
</f></put>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.IntBuffer"/>
</f></put>
			</overloads>
		</put>
		<hasArray final="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></hasArray>
		<array final="1" public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><x path="Int"/></c></f></array>
		<arrayOffset final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></arrayOffset>
		<compact abstract="1" public="1" set="method"><f a=""><c path="java.nio.IntBuffer"/></f></compact>
		<isDirect abstract="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isDirect>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.nio.IntBuffer"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<order abstract="1" public="1" set="method"><f a=""><c path="java.nio.ByteOrder"/></f></order>
		<hb final="1" public="1"><c path="java.NativeArray"><x path="Int"/></c></hb>
		<offset final="1" public="1"><x path="Int"/></offset>
		<isReadOnly public="1" override="1"><x path="Bool"/></isReadOnly>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.NativeArray"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.nio.IntBuffer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.LongBuffer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/LongBuffer.class" extern="1" abstract="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.LongBuffer"/></implements>
		<allocate public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.LongBuffer"/>
</f></allocate>
		<wrap public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.nio.LongBuffer"/>
			</f>
			<overloads><wrap public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<c path="java.nio.LongBuffer"/>
</f></wrap></overloads>
		</wrap>
		<slice abstract="1" public="1" set="method"><f a=""><c path="java.nio.LongBuffer"/></f></slice>
		<duplicate abstract="1" public="1" set="method"><f a=""><c path="java.nio.LongBuffer"/></f></duplicate>
		<asReadOnlyBuffer abstract="1" public="1" set="method"><f a=""><c path="java.nio.LongBuffer"/></f></asReadOnlyBuffer>
		<get abstract="1" public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<overloads>
				<get public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<c path="java.nio.LongBuffer"/>
</f></get>
				<get public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.LongBuffer"/>
</f></get>
				<get abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></get>
			</overloads>
		</get>
		<put abstract="1" public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.nio.LongBuffer"/>
			</f>
			<overloads>
				<put final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<c path="java.nio.LongBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.LongBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1">
	<c path="java.nio.LongBuffer"/>
	<c path="java.nio.LongBuffer"/>
</f></put>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<c path="java.nio.LongBuffer"/>
</f></put>
			</overloads>
		</put>
		<hasArray final="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></hasArray>
		<array final="1" public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><x path="haxe.Int64"/></c></f></array>
		<arrayOffset final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></arrayOffset>
		<compact abstract="1" public="1" set="method"><f a=""><c path="java.nio.LongBuffer"/></f></compact>
		<isDirect abstract="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isDirect>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.nio.LongBuffer"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<order abstract="1" public="1" set="method"><f a=""><c path="java.nio.ByteOrder"/></f></order>
		<hb final="1" public="1"><c path="java.NativeArray"><x path="haxe.Int64"/></c></hb>
		<offset final="1" public="1"><x path="Int"/></offset>
		<isReadOnly public="1" override="1"><x path="Bool"/></isReadOnly>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.nio.LongBuffer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.MappedByteBuffer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/MappedByteBuffer.class" extern="1" abstract="1">
		<extends path="java.nio.ByteBuffer"/>
		<isLoaded final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isLoaded>
		<load final="1" public="1" set="method"><f a=""><c path="java.nio.MappedByteBuffer"/></f></load>
		<force final="1" public="1" set="method"><f a=""><c path="java.nio.MappedByteBuffer"/></f></force>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4:param5">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.io.FileDescriptor"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.nio.MappedByteBuffer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.ShortBuffer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/ShortBuffer.class" extern="1" abstract="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.ShortBuffer"/></implements>
		<allocate public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.ShortBuffer"/>
</f></allocate>
		<wrap public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.nio.ShortBuffer"/>
			</f>
			<overloads><wrap public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<c path="java.nio.ShortBuffer"/>
</f></wrap></overloads>
		</wrap>
		<slice abstract="1" public="1" set="method"><f a=""><c path="java.nio.ShortBuffer"/></f></slice>
		<duplicate abstract="1" public="1" set="method"><f a=""><c path="java.nio.ShortBuffer"/></f></duplicate>
		<asReadOnlyBuffer abstract="1" public="1" set="method"><f a=""><c path="java.nio.ShortBuffer"/></f></asReadOnlyBuffer>
		<get abstract="1" public="1" set="method">
			<f a=""><t path="java.types.Int16"/></f>
			<overloads>
				<get public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<c path="java.nio.ShortBuffer"/>
</f></get>
				<get public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.ShortBuffer"/>
</f></get>
				<get abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<t path="java.types.Int16"/>
</f></get>
			</overloads>
		</get>
		<put abstract="1" public="1" set="method">
			<f a="param1">
				<t path="java.types.Int16"/>
				<c path="java.nio.ShortBuffer"/>
			</f>
			<overloads>
				<put final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<c path="java.nio.ShortBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.ShortBuffer"/>
</f></put>
				<put public="1" set="method"><f a="param1">
	<c path="java.nio.ShortBuffer"/>
	<c path="java.nio.ShortBuffer"/>
</f></put>
				<put abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<t path="java.types.Int16"/>
	<c path="java.nio.ShortBuffer"/>
</f></put>
			</overloads>
		</put>
		<hasArray final="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></hasArray>
		<array final="1" public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><t path="java.types.Int16"/></c></f></array>
		<arrayOffset final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></arrayOffset>
		<compact abstract="1" public="1" set="method"><f a=""><c path="java.nio.ShortBuffer"/></f></compact>
		<isDirect abstract="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isDirect>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.nio.ShortBuffer"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<order abstract="1" public="1" set="method"><f a=""><c path="java.nio.ByteOrder"/></f></order>
		<hb final="1" public="1"><c path="java.NativeArray"><t path="java.types.Int16"/></c></hb>
		<offset final="1" public="1"><x path="Int"/></offset>
		<isReadOnly public="1" override="1"><x path="Bool"/></isReadOnly>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Int16"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.nio.ShortBuffer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.Channel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/Channel.class" extern="1" interface="1">
		<extends path="java.io.Closeable"/>
		<isOpen public="1" set="method"><f a=""><x path="Bool"/></f></isOpen>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<meta>
			<m n=":native"><e>"java.nio.channels.Channel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.AsynchronousChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/AsynchronousChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.Channel"/>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<meta>
			<m n=":native"><e>"java.nio.channels.AsynchronousChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.AsynchronousFileChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/AsynchronousFileChannel.class" extern="1" abstract="1">
		<implements path="java.nio.channels.AsynchronousChannel"/>
		<open public="1" set="method" static="1">
			<f a="param1:param2:param3:param4">
				<c path="java.nio.file.Path"/>
				<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.util.concurrent.ExecutorService"/>
				<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
				<c path="java.nio.channels.AsynchronousFileChannel"/>
			</f>
			<overloads><open public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.OpenOption"/></x>
	<c path="java.nio.channels.AsynchronousFileChannel"/>
</f></open></overloads>
		</open>
		<size abstract="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></size>
		<truncate abstract="1" public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.nio.channels.AsynchronousFileChannel"/>
</f></truncate>
		<force abstract="1" public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></force>
		<lock abstract="1" public="1" params="A" set="method">
			<f a="param1:param2:param3:param4:param5">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
				<c path="lock.A"/>
				<c path="java.nio.channels.CompletionHandler">
					<c path="java.nio.channels.FileLock"/>
					<d/>
				</c>
				<x path="Void"/>
			</f>
			<overloads>
				<lock final="1" public="1" set="method"><f a=""><c path="java.util.concurrent.Future"><c path="java.nio.channels.FileLock"/></c></f></lock>
				<lock abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="Bool"/>
	<c path="java.util.concurrent.Future"><c path="java.nio.channels.FileLock"/></c>
</f></lock>
				<lock final="1" public="1" params="A" set="method"><f a="param1:param2">
	<c path="lock.A"/>
	<c path="java.nio.channels.CompletionHandler">
		<c path="java.nio.channels.FileLock"/>
		<d/>
	</c>
	<x path="Void"/>
</f></lock>
			</overloads>
		</lock>
		<tryLock abstract="1" public="1" set="method">
			<f a="param1:param2:param3">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
				<c path="java.nio.channels.FileLock"/>
			</f>
			<overloads><tryLock final="1" public="1" set="method"><f a=""><c path="java.nio.channels.FileLock"/></f></tryLock></overloads>
		</tryLock>
		<read abstract="1" public="1" params="A" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.nio.ByteBuffer"/>
				<x path="haxe.Int64"/>
				<c path="read.A"/>
				<c path="java.nio.channels.CompletionHandler">
					<x path="java.lang.Integer"/>
					<d/>
				</c>
				<x path="Void"/>
			</f>
			<overloads><read abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.nio.ByteBuffer"/>
	<x path="haxe.Int64"/>
	<c path="java.util.concurrent.Future"><x path="java.lang.Integer"/></c>
</f></read></overloads>
		</read>
		<write abstract="1" public="1" params="A" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.nio.ByteBuffer"/>
				<x path="haxe.Int64"/>
				<c path="write.A"/>
				<c path="java.nio.channels.CompletionHandler">
					<x path="java.lang.Integer"/>
					<d/>
				</c>
				<x path="Void"/>
			</f>
			<overloads><write abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.nio.ByteBuffer"/>
	<x path="haxe.Int64"/>
	<c path="java.util.concurrent.Future"><x path="java.lang.Integer"/></c>
</f></write></overloads>
		</write>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.AsynchronousFileChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.ReadableByteChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/ReadableByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.Channel"/>
		<read public="1" set="method"><f a="param1">
	<c path="java.nio.ByteBuffer"/>
	<x path="Int"/>
</f></read>
		<meta>
			<m n=":native"><e>"java.nio.channels.ReadableByteChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.WritableByteChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/WritableByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.Channel"/>
		<write public="1" set="method"><f a="param1">
	<c path="java.nio.ByteBuffer"/>
	<x path="Int"/>
</f></write>
		<meta>
			<m n=":native"><e>"java.nio.channels.WritableByteChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.ByteChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/ByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.ReadableByteChannel"/>
		<extends path="java.nio.channels.WritableByteChannel"/>
		<meta>
			<m n=":native"><e>"java.nio.channels.ByteChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.CompletionHandler" params="V:A" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/CompletionHandler.class" extern="1" interface="1">
		<completed public="1" set="method"><f a="param1:param2">
	<c path="java.nio.channels.CompletionHandler.V"/>
	<c path="java.nio.channels.CompletionHandler.A"/>
	<x path="Void"/>
</f></completed>
		<failed public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Throwable"/>
	<c path="java.nio.channels.CompletionHandler.A"/>
	<x path="Void"/>
</f></failed>
		<meta>
			<m n=":native"><e>"java.nio.channels.CompletionHandler"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.InterruptibleChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/InterruptibleChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.Channel"/>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<meta>
			<m n=":native"><e>"java.nio.channels.InterruptibleChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.spi.AbstractInterruptibleChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/spi/AbstractInterruptibleChannel.class" extern="1" abstract="1">
		<implements path="java.nio.channels.Channel"/>
		<implements path="java.nio.channels.InterruptibleChannel"/>
		<blockedOn public="1" set="method" static="1"><f a="param1">
	<c path="java.sun.nio.ch.Interruptible"/>
	<x path="Void"/>
</f></blockedOn>
		<close final="1" public="1" set="method"><f a=""><x path="Void"/></f></close>
		<implCloseChannel abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></implCloseChannel>
		<isOpen final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isOpen>
		<begin final="1" public="1" set="method"><f a=""><x path="Void"/></f></begin>
		<end final="1" public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></end>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.spi.AbstractInterruptibleChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.SelectableChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/SelectableChannel.class" extern="1" abstract="1">
		<extends path="java.nio.channels.spi.AbstractInterruptibleChannel"/>
		<implements path="java.nio.channels.Channel"/>
		<provider abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.spi.SelectorProvider"/></f></provider>
		<validOps abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></validOps>
		<isRegistered abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isRegistered>
		<keyFor abstract="1" public="1" set="method"><f a="param1">
	<c path="java.nio.channels.Selector"/>
	<c path="java.nio.channels.SelectionKey"/>
</f></keyFor>
		<register abstract="1" public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.channels.Selector"/>
				<x path="Int"/>
				<d/>
				<c path="java.nio.channels.SelectionKey"/>
			</f>
			<overloads><register final="1" public="1" set="method"><f a="param1:param2">
	<c path="java.nio.channels.Selector"/>
	<x path="Int"/>
	<c path="java.nio.channels.SelectionKey"/>
</f></register></overloads>
		</register>
		<configureBlocking abstract="1" public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<c path="java.nio.channels.SelectableChannel"/>
</f></configureBlocking>
		<isBlocking abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isBlocking>
		<blockingLock abstract="1" public="1" set="method"><f a=""><d/></f></blockingLock>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.SelectableChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.spi.AbstractSelectableChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/spi/AbstractSelectableChannel.class" extern="1" abstract="1">
		<extends path="java.nio.channels.SelectableChannel"/>
		<provider final="1" public="1" set="method" override="1"><f a=""><c path="java.nio.channels.spi.SelectorProvider"/></f></provider>
		<removeKey public="1" set="method"><f a="param1">
	<c path="java.nio.channels.SelectionKey"/>
	<x path="Void"/>
</f></removeKey>
		<isRegistered final="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isRegistered>
		<keyFor final="1" public="1" set="method" override="1"><f a="param1">
	<c path="java.nio.channels.Selector"/>
	<c path="java.nio.channels.SelectionKey"/>
</f></keyFor>
		<register final="1" public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.nio.channels.Selector"/>
	<x path="Int"/>
	<d/>
	<c path="java.nio.channels.SelectionKey"/>
</f></register>
		<implCloseChannel final="1" public="1" set="method" override="1"><f a=""><x path="Void"/></f></implCloseChannel>
		<implCloseSelectableChannel abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></implCloseSelectableChannel>
		<isBlocking final="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isBlocking>
		<blockingLock final="1" public="1" set="method" override="1"><f a=""><d/></f></blockingLock>
		<configureBlocking final="1" public="1" set="method" override="1"><f a="param1">
	<x path="Bool"/>
	<c path="java.nio.channels.SelectableChannel"/>
</f></configureBlocking>
		<implConfigureBlocking abstract="1" public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></implConfigureBlocking>
		<blocking public="1"><x path="Bool"/></blocking>
		<new public="1" set="method"><f a="param1">
	<c path="java.nio.channels.spi.SelectorProvider"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.spi.AbstractSelectableChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.ScatteringByteChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/ScatteringByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.ReadableByteChannel"/>
		<read public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<overloads><read public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
	<x path="haxe.Int64"/>
</f></read></overloads>
		</read>
		<meta>
			<m n=":native"><e>"java.nio.channels.ScatteringByteChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.GatheringByteChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/GatheringByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.WritableByteChannel"/>
		<write public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<overloads><write public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
	<x path="haxe.Int64"/>
</f></write></overloads>
		</write>
		<meta>
			<m n=":native"><e>"java.nio.channels.GatheringByteChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.NetworkChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/NetworkChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.Channel"/>
		<bind public="1" set="method"><f a="param1">
	<c path="java.net.SocketAddress"/>
	<c path="java.nio.channels.NetworkChannel"/>
</f></bind>
		<getLocalAddress public="1" set="method"><f a=""><c path="java.net.SocketAddress"/></f></getLocalAddress>
		<setOption public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.net.SocketOption"><c path="setOption.T"/></c>
	<c path="setOption.T"/>
	<c path="java.nio.channels.NetworkChannel"/>
</f></setOption>
		<getOption public="1" params="T" set="method"><f a="param1">
	<c path="java.net.SocketOption"><c path="getOption.T"/></c>
	<c path="getOption.T"/>
</f></getOption>
		<supportedOptions public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.net.SocketOption"><d/></c></c></f></supportedOptions>
		<meta>
			<m n=":native"><e>"java.nio.channels.NetworkChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.MulticastChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/MulticastChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.NetworkChannel"/>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<join public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.InetAddress"/>
				<c path="java.net.NetworkInterface"/>
				<c path="java.nio.channels.MembershipKey"/>
			</f>
			<overloads><join public="1" set="method"><f a="param1:param2:param3">
	<c path="java.net.InetAddress"/>
	<c path="java.net.NetworkInterface"/>
	<c path="java.net.InetAddress"/>
	<c path="java.nio.channels.MembershipKey"/>
</f></join></overloads>
		</join>
		<meta>
			<m n=":native"><e>"java.nio.channels.MulticastChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.DatagramChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/DatagramChannel.class" extern="1" abstract="1">
		<extends path="java.nio.channels.spi.AbstractSelectableChannel"/>
		<implements path="java.nio.channels.ByteChannel"/>
		<implements path="java.nio.channels.ScatteringByteChannel"/>
		<implements path="java.nio.channels.GatheringByteChannel"/>
		<implements path="java.nio.channels.MulticastChannel"/>
		<open public="1" set="method" static="1">
			<f a=""><c path="java.nio.channels.DatagramChannel"/></f>
			<overloads><open public="1" set="method"><f a="param1">
	<c path="java.net.ProtocolFamily"/>
	<c path="java.nio.channels.DatagramChannel"/>
</f></open></overloads>
		</open>
		<validOps final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></validOps>
		<bind abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.SocketAddress"/>
	<c path="java.nio.channels.DatagramChannel"/>
</f></bind>
		<setOption abstract="1" public="1" params="T" set="method">
			<f a="param1:param2">
				<c path="java.net.SocketOption"><c path="setOption.T"/></c>
				<c path="setOption.T"/>
				<c path="java.nio.channels.DatagramChannel"/>
			</f>
			<overloads><setOption public="1" set="method"><f a="param1:param2">
	<c path="java.net.SocketOption"><d/></c>
	<d/>
	<c path="java.nio.channels.NetworkChannel"/>
</f></setOption></overloads>
		</setOption>
		<socket abstract="1" public="1" set="method"><f a=""><c path="java.net.DatagramSocket"/></f></socket>
		<isConnected abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isConnected>
		<connect abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.SocketAddress"/>
	<c path="java.nio.channels.DatagramChannel"/>
</f></connect>
		<disconnect abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.DatagramChannel"/></f></disconnect>
		<getRemoteAddress abstract="1" public="1" set="method"><f a=""><c path="java.net.SocketAddress"/></f></getRemoteAddress>
		<receive abstract="1" public="1" set="method"><f a="param1">
	<c path="java.nio.ByteBuffer"/>
	<c path="java.net.SocketAddress"/>
</f></receive>
		<send abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.nio.ByteBuffer"/>
	<c path="java.net.SocketAddress"/>
	<x path="Int"/>
</f></send>
		<read abstract="1" public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<overloads>
				<read final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
	<x path="haxe.Int64"/>
</f></read>
				<read abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></read>
			</overloads>
		</read>
		<write abstract="1" public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<overloads>
				<write final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
	<x path="haxe.Int64"/>
</f></write>
				<write abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></write>
			</overloads>
		</write>
		<getLocalAddress abstract="1" public="1" set="method"><f a=""><c path="java.net.SocketAddress"/></f></getLocalAddress>
		<new public="1" set="method"><f a="param1">
	<c path="java.nio.channels.spi.SelectorProvider"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.DatagramChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.SeekableByteChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/SeekableByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.ByteChannel"/>
		<read public="1" set="method"><f a="param1">
	<c path="java.nio.ByteBuffer"/>
	<x path="Int"/>
</f></read>
		<write public="1" set="method"><f a="param1">
	<c path="java.nio.ByteBuffer"/>
	<x path="Int"/>
</f></write>
		<position public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<overloads><position public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.nio.channels.SeekableByteChannel"/>
</f></position></overloads>
		</position>
		<size public="1" set="method"><f a=""><x path="haxe.Int64"/></f></size>
		<truncate public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.nio.channels.SeekableByteChannel"/>
</f></truncate>
		<meta>
			<m n=":native"><e>"java.nio.channels.SeekableByteChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.FileChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/FileChannel.class" extern="1" abstract="1">
		<extends path="java.nio.channels.spi.AbstractInterruptibleChannel"/>
		<implements path="java.nio.channels.SeekableByteChannel"/>
		<implements path="java.nio.channels.GatheringByteChannel"/>
		<implements path="java.nio.channels.ScatteringByteChannel"/>
		<open public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
				<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
				<c path="java.nio.channels.FileChannel"/>
			</f>
			<overloads><open public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.OpenOption"/></x>
	<c path="java.nio.channels.FileChannel"/>
</f></open></overloads>
		</open>
		<read abstract="1" public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<overloads>
				<read abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.nio.ByteBuffer"/>
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></read>
				<read final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
	<x path="haxe.Int64"/>
</f></read>
				<read abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></read>
			</overloads>
		</read>
		<write abstract="1" public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<overloads>
				<write abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.nio.ByteBuffer"/>
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></write>
				<write final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
	<x path="haxe.Int64"/>
</f></write>
				<write abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></write>
			</overloads>
		</write>
		<position abstract="1" public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<overloads><position abstract="1" public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.nio.channels.FileChannel"/>
</f></position></overloads>
		</position>
		<size abstract="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></size>
		<truncate abstract="1" public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.nio.channels.FileChannel"/>
</f></truncate>
		<force abstract="1" public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></force>
		<transferTo abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<c path="java.nio.channels.WritableByteChannel"/>
	<x path="haxe.Int64"/>
</f></transferTo>
		<transferFrom abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.nio.channels.ReadableByteChannel"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></transferFrom>
		<map abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.nio.channels.FileChannel_MapMode"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<c path="java.nio.MappedByteBuffer"/>
</f></map>
		<lock abstract="1" public="1" set="method">
			<f a="param1:param2:param3">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
				<c path="java.nio.channels.FileLock"/>
			</f>
			<overloads><lock final="1" public="1" set="method"><f a=""><c path="java.nio.channels.FileLock"/></f></lock></overloads>
		</lock>
		<tryLock abstract="1" public="1" set="method">
			<f a="param1:param2:param3">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
				<c path="java.nio.channels.FileLock"/>
			</f>
			<overloads><tryLock final="1" public="1" set="method"><f a=""><c path="java.nio.channels.FileLock"/></f></tryLock></overloads>
		</tryLock>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.FileChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.FileChannel_MapMode" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/FileChannel$MapMode.class" module="java.nio.channels.FileChannel" extern="1">
		<READ_ONLY final="1" public="1" set="null" static="1"><c path="java.nio.channels.FileChannel_MapMode"/></READ_ONLY>
		<READ_WRITE final="1" public="1" set="null" static="1"><c path="java.nio.channels.FileChannel_MapMode"/></READ_WRITE>
		<PRIVATE final="1" public="1" set="null" static="1"><c path="java.nio.channels.FileChannel_MapMode"/></PRIVATE>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.nio.channels.FileChannel$MapMode"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.FileLock" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/FileLock.class" extern="1" abstract="1">
		<implements path="java.lang.AutoCloseable"/>
		<channel final="1" public="1" set="method"><f a=""><c path="java.nio.channels.FileChannel"/></f></channel>
		<acquiredBy public="1" set="method"><f a=""><c path="java.nio.channels.Channel"/></f></acquiredBy>
		<position final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></position>
		<size final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></size>
		<isShared final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isShared>
		<overlaps final="1" public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="Bool"/>
</f></overlaps>
		<isValid abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isValid>
		<release abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></release>
		<close final="1" public="1" set="method"><f a=""><x path="Void"/></f></close>
		<toString final="1" public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.nio.channels.FileChannel"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.nio.channels.AsynchronousFileChannel"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.nio.channels.FileLock"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.MembershipKey" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/MembershipKey.class" extern="1" abstract="1">
		<isValid abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isValid>
		<drop abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></drop>
		<block abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.InetAddress"/>
	<c path="java.nio.channels.MembershipKey"/>
</f></block>
		<unblock abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.InetAddress"/>
	<c path="java.nio.channels.MembershipKey"/>
</f></unblock>
		<channel abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.MulticastChannel"/></f></channel>
		<group abstract="1" public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></group>
		<networkInterface abstract="1" public="1" set="method"><f a=""><c path="java.net.NetworkInterface"/></f></networkInterface>
		<sourceAddress abstract="1" public="1" set="method"><f a=""><c path="java.net.InetAddress"/></f></sourceAddress>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.MembershipKey"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.Pipe" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/Pipe.class" extern="1" abstract="1">
		<open public="1" set="method" static="1"><f a=""><c path="java.nio.channels.Pipe"/></f></open>
		<source abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.Pipe_SourceChannel"/></f></source>
		<sink abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.Pipe_SinkChannel"/></f></sink>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.Pipe"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.Pipe_SourceChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/Pipe$SourceChannel.class" module="java.nio.channels.Pipe" extern="1" abstract="1">
		<extends path="java.nio.channels.spi.AbstractSelectableChannel"/>
		<implements path="java.nio.channels.ReadableByteChannel"/>
		<implements path="java.nio.channels.ScatteringByteChannel"/>
		<validOps final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></validOps>
		<new public="1" set="method"><f a="param1">
	<c path="java.nio.channels.spi.SelectorProvider"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.Pipe$SourceChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.Pipe_SinkChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/Pipe$SinkChannel.class" module="java.nio.channels.Pipe" extern="1" abstract="1">
		<extends path="java.nio.channels.spi.AbstractSelectableChannel"/>
		<implements path="java.nio.channels.WritableByteChannel"/>
		<implements path="java.nio.channels.GatheringByteChannel"/>
		<validOps final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></validOps>
		<new public="1" set="method"><f a="param1">
	<c path="java.nio.channels.spi.SelectorProvider"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.Pipe$SinkChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.SelectionKey" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/SelectionKey.class" extern="1" abstract="1">
		<OP_READ final="1" public="1" set="null" static="1"><x path="Int"/></OP_READ>
		<OP_WRITE final="1" public="1" set="null" static="1"><x path="Int"/></OP_WRITE>
		<OP_CONNECT final="1" public="1" set="null" static="1"><x path="Int"/></OP_CONNECT>
		<OP_ACCEPT final="1" public="1" set="null" static="1"><x path="Int"/></OP_ACCEPT>
		<channel abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.SelectableChannel"/></f></channel>
		<selector abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.Selector"/></f></selector>
		<isValid abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isValid>
		<cancel abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></cancel>
		<interestOps abstract="1" public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><interestOps abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.channels.SelectionKey"/>
</f></interestOps></overloads>
		</interestOps>
		<readyOps abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></readyOps>
		<isReadable final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isReadable>
		<isWritable final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isWritable>
		<isConnectable final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isConnectable>
		<isAcceptable final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isAcceptable>
		<attach final="1" public="1" set="method"><f a="param1">
	<d/>
	<d/>
</f></attach>
		<attachment final="1" public="1" set="method"><f a=""><d/></f></attachment>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.SelectionKey"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.Selector" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/Selector.class" extern="1" abstract="1">
		<implements path="java.io.Closeable"/>
		<open public="1" set="method" static="1"><f a=""><c path="java.nio.channels.Selector"/></f></open>
		<isOpen abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isOpen>
		<provider abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.spi.SelectorProvider"/></f></provider>
		<keys abstract="1" public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.nio.channels.SelectionKey"/></c></f></keys>
		<selectedKeys abstract="1" public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.nio.channels.SelectionKey"/></c></f></selectedKeys>
		<selectNow abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></selectNow>
		<select abstract="1" public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<overloads><select abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></select></overloads>
		</select>
		<wakeup abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.Selector"/></f></wakeup>
		<close abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.Selector"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.ServerSocketChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/ServerSocketChannel.class" extern="1" abstract="1">
		<extends path="java.nio.channels.spi.AbstractSelectableChannel"/>
		<implements path="java.nio.channels.NetworkChannel"/>
		<open public="1" set="method" static="1"><f a=""><c path="java.nio.channels.ServerSocketChannel"/></f></open>
		<validOps final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></validOps>
		<bind final="1" public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<c path="java.nio.channels.ServerSocketChannel"/>
			</f>
			<overloads><bind abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.net.SocketAddress"/>
	<x path="Int"/>
	<c path="java.nio.channels.ServerSocketChannel"/>
</f></bind></overloads>
		</bind>
		<setOption abstract="1" public="1" params="T" set="method">
			<f a="param1:param2">
				<c path="java.net.SocketOption"><c path="setOption.T"/></c>
				<c path="setOption.T"/>
				<c path="java.nio.channels.ServerSocketChannel"/>
			</f>
			<overloads><setOption public="1" set="method"><f a="param1:param2">
	<c path="java.net.SocketOption"><d/></c>
	<d/>
	<c path="java.nio.channels.NetworkChannel"/>
</f></setOption></overloads>
		</setOption>
		<socket abstract="1" public="1" set="method"><f a=""><c path="java.net.ServerSocket"/></f></socket>
		<accept abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.SocketChannel"/></f></accept>
		<getLocalAddress abstract="1" public="1" set="method"><f a=""><c path="java.net.SocketAddress"/></f></getLocalAddress>
		<new public="1" set="method"><f a="param1">
	<c path="java.nio.channels.spi.SelectorProvider"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.ServerSocketChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.SocketChannel" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/SocketChannel.class" extern="1" abstract="1">
		<extends path="java.nio.channels.spi.AbstractSelectableChannel"/>
		<implements path="java.nio.channels.ByteChannel"/>
		<implements path="java.nio.channels.ScatteringByteChannel"/>
		<implements path="java.nio.channels.GatheringByteChannel"/>
		<implements path="java.nio.channels.NetworkChannel"/>
		<open public="1" set="method" static="1">
			<f a=""><c path="java.nio.channels.SocketChannel"/></f>
			<overloads><open public="1" set="method"><f a="param1">
	<c path="java.net.SocketAddress"/>
	<c path="java.nio.channels.SocketChannel"/>
</f></open></overloads>
		</open>
		<validOps final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></validOps>
		<bind abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.SocketAddress"/>
	<c path="java.nio.channels.SocketChannel"/>
</f></bind>
		<setOption abstract="1" public="1" params="T" set="method">
			<f a="param1:param2">
				<c path="java.net.SocketOption"><c path="setOption.T"/></c>
				<c path="setOption.T"/>
				<c path="java.nio.channels.SocketChannel"/>
			</f>
			<overloads><setOption public="1" set="method"><f a="param1:param2">
	<c path="java.net.SocketOption"><d/></c>
	<d/>
	<c path="java.nio.channels.NetworkChannel"/>
</f></setOption></overloads>
		</setOption>
		<shutdownInput abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.SocketChannel"/></f></shutdownInput>
		<shutdownOutput abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.SocketChannel"/></f></shutdownOutput>
		<socket abstract="1" public="1" set="method"><f a=""><c path="java.net.Socket"/></f></socket>
		<isConnected abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isConnected>
		<isConnectionPending abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isConnectionPending>
		<connect abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.SocketAddress"/>
	<x path="Bool"/>
</f></connect>
		<finishConnect abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></finishConnect>
		<getRemoteAddress abstract="1" public="1" set="method"><f a=""><c path="java.net.SocketAddress"/></f></getRemoteAddress>
		<read abstract="1" public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<overloads>
				<read final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
	<x path="haxe.Int64"/>
</f></read>
				<read abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></read>
			</overloads>
		</read>
		<write abstract="1" public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<overloads>
				<write final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
	<x path="haxe.Int64"/>
</f></write>
				<write abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></write>
			</overloads>
		</write>
		<getLocalAddress abstract="1" public="1" set="method"><f a=""><c path="java.net.SocketAddress"/></f></getLocalAddress>
		<new public="1" set="method"><f a="param1">
	<c path="java.nio.channels.spi.SelectorProvider"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.SocketChannel"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.nio.ch.Interruptible" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/nio/ch/Interruptible.class" extern="1" interface="1">
		<interrupt public="1" set="method"><f a="param1">
	<c path="java.lang.Thread"/>
	<x path="Void"/>
</f></interrupt>
		<meta>
			<m n=":native"><e>"sun.nio.ch.Interruptible"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.spi.AbstractInterruptibleChannel_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/spi/AbstractInterruptibleChannel$1.class" module="java.nio.channels.spi.AbstractInterruptibleChannel" extern="1">
		<implements path="java.sun.nio.ch.Interruptible"/>
		<interrupt public="1" set="method"><f a="param1">
	<c path="java.lang.Thread"/>
	<x path="Void"/>
</f></interrupt>
		<this_0 final="1" public="1">
			<c path="java.nio.channels.spi.AbstractInterruptibleChannel"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.nio.channels.spi.AbstractInterruptibleChannel"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.spi.AbstractInterruptibleChannel$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.spi.AbstractSelectionKey" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/spi/AbstractSelectionKey.class" extern="1" abstract="1">
		<extends path="java.nio.channels.SelectionKey"/>
		<isValid final="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isValid>
		<invalidate public="1" set="method"><f a=""><x path="Void"/></f></invalidate>
		<cancel final="1" public="1" set="method" override="1"><f a=""><x path="Void"/></f></cancel>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.spi.AbstractSelectionKey"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.spi.AbstractSelector" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/spi/AbstractSelector.class" extern="1" abstract="1">
		<extends path="java.nio.channels.Selector"/>
		<cancel public="1" set="method"><f a="param1">
	<c path="java.nio.channels.SelectionKey"/>
	<x path="Void"/>
</f></cancel>
		<close final="1" public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<implCloseSelector abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></implCloseSelector>
		<isOpen final="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isOpen>
		<provider final="1" public="1" set="method" override="1"><f a=""><c path="java.nio.channels.spi.SelectorProvider"/></f></provider>
		<cancelledKeys final="1" public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.nio.channels.SelectionKey"/></c></f></cancelledKeys>
		<register abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.nio.channels.spi.AbstractSelectableChannel"/>
	<x path="Int"/>
	<d/>
	<c path="java.nio.channels.SelectionKey"/>
</f></register>
		<deregister final="1" public="1" set="method"><f a="param1">
	<c path="java.nio.channels.spi.AbstractSelectionKey"/>
	<x path="Void"/>
</f></deregister>
		<begin final="1" public="1" set="method"><f a=""><x path="Void"/></f></begin>
		<end final="1" public="1" set="method"><f a=""><x path="Void"/></f></end>
		<new public="1" set="method"><f a="param1">
	<c path="java.nio.channels.spi.SelectorProvider"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.spi.AbstractSelector"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.spi.AbstractSelector_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/spi/AbstractSelector$1.class" module="java.nio.channels.spi.AbstractSelector" extern="1">
		<implements path="java.sun.nio.ch.Interruptible"/>
		<interrupt public="1" set="method"><f a="param1">
	<c path="java.lang.Thread"/>
	<x path="Void"/>
</f></interrupt>
		<this_0 final="1" public="1">
			<c path="java.nio.channels.spi.AbstractSelector"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.nio.channels.spi.AbstractSelector"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.spi.AbstractSelector$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.spi.SelectorProvider" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/spi/SelectorProvider.class" extern="1" abstract="1">
		<provider public="1" set="method" static="1"><f a=""><c path="java.nio.channels.spi.SelectorProvider"/></f></provider>
		<openDatagramChannel abstract="1" public="1" set="method">
			<f a=""><c path="java.nio.channels.DatagramChannel"/></f>
			<overloads><openDatagramChannel abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.ProtocolFamily"/>
	<c path="java.nio.channels.DatagramChannel"/>
</f></openDatagramChannel></overloads>
		</openDatagramChannel>
		<openPipe abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.Pipe"/></f></openPipe>
		<openSelector abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.spi.AbstractSelector"/></f></openSelector>
		<openServerSocketChannel abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.ServerSocketChannel"/></f></openServerSocketChannel>
		<openSocketChannel abstract="1" public="1" set="method"><f a=""><c path="java.nio.channels.SocketChannel"/></f></openSocketChannel>
		<inheritedChannel public="1" set="method"><f a=""><c path="java.nio.channels.Channel"/></f></inheritedChannel>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.spi.SelectorProvider"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.channels.spi.SelectorProvider_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/spi/SelectorProvider$1.class" module="java.nio.channels.spi.SelectorProvider" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.nio.channels.spi.SelectorProvider"/></implements>
		<run public="1" set="method"><f a=""><c path="java.nio.channels.spi.SelectorProvider"/></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.channels.spi.SelectorProvider$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.Charset" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/Charset.class" extern="1" abstract="1">
		<implements path="java.lang.Comparable"><c path="java.nio.charset.Charset"/></implements>
		<atBugLevel public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></atBugLevel>
		<isSupported public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></isSupported>
		<forName public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.nio.charset.Charset"/>
</f></forName>
		<availableCharsets public="1" set="method" static="1"><f a=""><c path="java.util.SortedMap">
	<c path="String"/>
	<c path="java.nio.charset.Charset"/>
</c></f></availableCharsets>
		<defaultCharset public="1" set="method" static="1"><f a=""><c path="java.nio.charset.Charset"/></f></defaultCharset>
		<name final="1" public="1" set="method"><f a=""><c path="String"/></f></name>
		<aliases final="1" public="1" set="method"><f a=""><c path="java.util.Set"><c path="String"/></c></f></aliases>
		<displayName public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><displayName public="1" set="method"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></displayName></overloads>
		</displayName>
		<isRegistered final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isRegistered>
		<contains abstract="1" public="1" set="method"><f a="param1">
	<c path="java.nio.charset.Charset"/>
	<x path="Bool"/>
</f></contains>
		<newDecoder abstract="1" public="1" set="method"><f a=""><c path="java.nio.charset.CharsetDecoder"/></f></newDecoder>
		<newEncoder abstract="1" public="1" set="method"><f a=""><c path="java.nio.charset.CharsetEncoder"/></f></newEncoder>
		<canEncode public="1" set="method"><f a=""><x path="Bool"/></f></canEncode>
		<decode final="1" public="1" set="method"><f a="param1">
	<c path="java.nio.ByteBuffer"/>
	<c path="java.nio.CharBuffer"/>
</f></decode>
		<encode final="1" public="1" set="method">
			<f a="param1">
				<c path="java.nio.CharBuffer"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<overloads><encode final="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.nio.ByteBuffer"/>
</f></encode></overloads>
		</encode>
		<compareTo final="1" public="1" set="method">
			<f a="param1">
				<c path="java.nio.charset.Charset"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<hashCode final="1" public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals final="1" public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<toString final="1" public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.NativeArray"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.charset.Charset"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.Charset_ExtendedProviderHolder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/Charset$ExtendedProviderHolder.class" module="java.nio.charset.Charset" extern="1">
		<extendedProvider final="1" public="1" set="null" static="1"><c path="java.nio.charset.spi.CharsetProvider"/></extendedProvider>
		<meta>
			<m n=":native"><e>"java.nio.charset.Charset$ExtendedProviderHolder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.Charset_ExtendedProviderHolder_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/Charset$ExtendedProviderHolder$1.class" module="java.nio.charset.Charset" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.nio.charset.spi.CharsetProvider"/></implements>
		<run public="1" set="method"><f a=""><c path="java.nio.charset.spi.CharsetProvider"/></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.charset.Charset$ExtendedProviderHolder$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.Charset_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/Charset$3.class" module="java.nio.charset.Charset" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.util.SortedMap">
	<c path="String"/>
	<c path="java.nio.charset.Charset"/>
</c></implements>
		<run public="1" set="method"><f a=""><c path="java.util.SortedMap">
	<c path="String"/>
	<c path="java.nio.charset.Charset"/>
</c></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.charset.Charset$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.Charset_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/Charset$2.class" module="java.nio.charset.Charset" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.nio.charset.Charset"/></implements>
		<run public="1" set="method"><f a=""><c path="java.nio.charset.Charset"/></f></run>
		<val_charsetName final="1" public="1">
			<c path="String"/>
			<meta><m n=":native"><e>"val$charsetName"</e></m></meta>
		</val_charsetName>
		<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.charset.Charset$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.Charset_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/Charset$1.class" module="java.nio.charset.Charset" extern="1">
		<implements path="java.util.Iterator"><c path="java.nio.charset.spi.CharsetProvider"/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><c path="java.nio.charset.spi.CharsetProvider"/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<cl public="1"><c path="java.lang.ClassLoader"/></cl>
		<sl public="1"><c path="java.util.ServiceLoader"><c path="java.nio.charset.spi.CharsetProvider"/></c></sl>
		<i public="1"><c path="java.util.Iterator"><c path="java.nio.charset.spi.CharsetProvider"/></c></i>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.charset.Charset$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.CharsetDecoder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/CharsetDecoder.class" extern="1" abstract="1">
		<charset final="1" public="1" set="method"><f a=""><c path="java.nio.charset.Charset"/></f></charset>
		<replacement final="1" public="1" set="method"><f a=""><c path="String"/></f></replacement>
		<replaceWith final="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.nio.charset.CharsetDecoder"/>
</f></replaceWith>
		<implReplaceWith public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></implReplaceWith>
		<malformedInputAction public="1" set="method"><f a=""><c path="java.nio.charset.CodingErrorAction"/></f></malformedInputAction>
		<onMalformedInput final="1" public="1" set="method"><f a="param1">
	<c path="java.nio.charset.CodingErrorAction"/>
	<c path="java.nio.charset.CharsetDecoder"/>
</f></onMalformedInput>
		<implOnMalformedInput public="1" set="method"><f a="param1">
	<c path="java.nio.charset.CodingErrorAction"/>
	<x path="Void"/>
</f></implOnMalformedInput>
		<unmappableCharacterAction public="1" set="method"><f a=""><c path="java.nio.charset.CodingErrorAction"/></f></unmappableCharacterAction>
		<onUnmappableCharacter final="1" public="1" set="method"><f a="param1">
	<c path="java.nio.charset.CodingErrorAction"/>
	<c path="java.nio.charset.CharsetDecoder"/>
</f></onUnmappableCharacter>
		<implOnUnmappableCharacter public="1" set="method"><f a="param1">
	<c path="java.nio.charset.CodingErrorAction"/>
	<x path="Void"/>
</f></implOnUnmappableCharacter>
		<averageCharsPerByte final="1" public="1" set="method"><f a=""><x path="Single"/></f></averageCharsPerByte>
		<maxCharsPerByte final="1" public="1" set="method"><f a=""><x path="Single"/></f></maxCharsPerByte>
		<decode final="1" public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.ByteBuffer"/>
				<c path="java.nio.CharBuffer"/>
				<x path="Bool"/>
				<c path="java.nio.charset.CoderResult"/>
			</f>
			<overloads><decode final="1" public="1" set="method"><f a="param1">
	<c path="java.nio.ByteBuffer"/>
	<c path="java.nio.CharBuffer"/>
</f></decode></overloads>
		</decode>
		<flush final="1" public="1" set="method"><f a="param1">
	<c path="java.nio.CharBuffer"/>
	<c path="java.nio.charset.CoderResult"/>
</f></flush>
		<implFlush public="1" set="method"><f a="param1">
	<c path="java.nio.CharBuffer"/>
	<c path="java.nio.charset.CoderResult"/>
</f></implFlush>
		<reset final="1" public="1" set="method"><f a=""><c path="java.nio.charset.CharsetDecoder"/></f></reset>
		<implReset public="1" set="method"><f a=""><x path="Void"/></f></implReset>
		<decodeLoop abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.nio.ByteBuffer"/>
	<c path="java.nio.CharBuffer"/>
	<c path="java.nio.charset.CoderResult"/>
</f></decodeLoop>
		<isAutoDetecting public="1" set="method"><f a=""><x path="Bool"/></f></isAutoDetecting>
		<isCharsetDetected public="1" set="method"><f a=""><x path="Bool"/></f></isCharsetDetected>
		<detectedCharset public="1" set="method"><f a=""><c path="java.nio.charset.Charset"/></f></detectedCharset>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.nio.charset.Charset"/>
	<x path="Single"/>
	<x path="Single"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.charset.CharsetDecoder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.CharsetEncoder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/CharsetEncoder.class" extern="1" abstract="1">
		<charset final="1" public="1" set="method"><f a=""><c path="java.nio.charset.Charset"/></f></charset>
		<replacement final="1" public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></replacement>
		<replaceWith final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.nio.charset.CharsetEncoder"/>
</f></replaceWith>
		<implReplaceWith public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></implReplaceWith>
		<isLegalReplacement public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Bool"/>
</f></isLegalReplacement>
		<malformedInputAction public="1" set="method"><f a=""><c path="java.nio.charset.CodingErrorAction"/></f></malformedInputAction>
		<onMalformedInput final="1" public="1" set="method"><f a="param1">
	<c path="java.nio.charset.CodingErrorAction"/>
	<c path="java.nio.charset.CharsetEncoder"/>
</f></onMalformedInput>
		<implOnMalformedInput public="1" set="method"><f a="param1">
	<c path="java.nio.charset.CodingErrorAction"/>
	<x path="Void"/>
</f></implOnMalformedInput>
		<unmappableCharacterAction public="1" set="method"><f a=""><c path="java.nio.charset.CodingErrorAction"/></f></unmappableCharacterAction>
		<onUnmappableCharacter final="1" public="1" set="method"><f a="param1">
	<c path="java.nio.charset.CodingErrorAction"/>
	<c path="java.nio.charset.CharsetEncoder"/>
</f></onUnmappableCharacter>
		<implOnUnmappableCharacter public="1" set="method"><f a="param1">
	<c path="java.nio.charset.CodingErrorAction"/>
	<x path="Void"/>
</f></implOnUnmappableCharacter>
		<averageBytesPerChar final="1" public="1" set="method"><f a=""><x path="Single"/></f></averageBytesPerChar>
		<maxBytesPerChar final="1" public="1" set="method"><f a=""><x path="Single"/></f></maxBytesPerChar>
		<encode final="1" public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.CharBuffer"/>
				<c path="java.nio.ByteBuffer"/>
				<x path="Bool"/>
				<c path="java.nio.charset.CoderResult"/>
			</f>
			<overloads><encode final="1" public="1" set="method"><f a="param1">
	<c path="java.nio.CharBuffer"/>
	<c path="java.nio.ByteBuffer"/>
</f></encode></overloads>
		</encode>
		<flush final="1" public="1" set="method"><f a="param1">
	<c path="java.nio.ByteBuffer"/>
	<c path="java.nio.charset.CoderResult"/>
</f></flush>
		<implFlush public="1" set="method"><f a="param1">
	<c path="java.nio.ByteBuffer"/>
	<c path="java.nio.charset.CoderResult"/>
</f></implFlush>
		<reset final="1" public="1" set="method"><f a=""><c path="java.nio.charset.CharsetEncoder"/></f></reset>
		<implReset public="1" set="method"><f a=""><x path="Void"/></f></implReset>
		<encodeLoop abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.nio.CharBuffer"/>
	<c path="java.nio.ByteBuffer"/>
	<c path="java.nio.charset.CoderResult"/>
</f></encodeLoop>
		<canEncode public="1" set="method">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<overloads><canEncode public="1" set="method"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></canEncode></overloads>
		</canEncode>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.nio.charset.Charset"/>
				<x path="Single"/>
				<x path="Single"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.nio.charset.Charset"/>
	<x path="Single"/>
	<x path="Single"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.nio.charset.CharsetEncoder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.CoderResult" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/CoderResult.class" extern="1">
		<malformedForLength public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.charset.CoderResult"/>
</f></malformedForLength>
		<unmappableForLength public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.charset.CoderResult"/>
</f></unmappableForLength>
		<UNDERFLOW final="1" public="1" set="null" static="1"><c path="java.nio.charset.CoderResult"/></UNDERFLOW>
		<OVERFLOW final="1" public="1" set="null" static="1"><c path="java.nio.charset.CoderResult"/></OVERFLOW>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<isUnderflow public="1" set="method"><f a=""><x path="Bool"/></f></isUnderflow>
		<isOverflow public="1" set="method"><f a=""><x path="Bool"/></f></isOverflow>
		<isError public="1" set="method"><f a=""><x path="Bool"/></f></isError>
		<isMalformed public="1" set="method"><f a=""><x path="Bool"/></f></isMalformed>
		<isUnmappable public="1" set="method"><f a=""><x path="Bool"/></f></isUnmappable>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<throwException public="1" set="method"><f a=""><x path="Void"/></f></throwException>
		<new public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.charset.CoderResult_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.charset.CoderResult"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.CoderResult_Cache" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/CoderResult$Cache.class" module="java.nio.charset.CoderResult" extern="1" abstract="1">
		<create abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.charset.CoderResult"/>
</f></create>
		<new public="1" set="method"><f a="param1">
	<c path="java.nio.charset.CoderResult_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.charset.CoderResult$Cache"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.CoderResult_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/CoderResult$2.class" module="java.nio.charset.CoderResult" extern="1">
		<extends path="java.nio.charset.CoderResult_Cache"/>
		<create public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.charset.CoderResult"/>
</f></create>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.charset.CoderResult$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.CoderResult_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/CoderResult$1.class" module="java.nio.charset.CoderResult" extern="1">
		<extends path="java.nio.charset.CoderResult_Cache"/>
		<create public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.charset.CoderResult"/>
</f></create>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.charset.CoderResult$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.CodingErrorAction" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/CodingErrorAction.class" extern="1">
		<IGNORE final="1" public="1" set="null" static="1"><c path="java.nio.charset.CodingErrorAction"/></IGNORE>
		<REPLACE final="1" public="1" set="null" static="1"><c path="java.nio.charset.CodingErrorAction"/></REPLACE>
		<REPORT final="1" public="1" set="null" static="1"><c path="java.nio.charset.CodingErrorAction"/></REPORT>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.nio.charset.CodingErrorAction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.StandardCharsets" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/StandardCharsets.class" extern="1">
		<US_ASCII final="1" public="1" set="null" static="1"><c path="java.nio.charset.Charset"/></US_ASCII>
		<ISO_8859_1 final="1" public="1" set="null" static="1"><c path="java.nio.charset.Charset"/></ISO_8859_1>
		<UTF_8 final="1" public="1" set="null" static="1"><c path="java.nio.charset.Charset"/></UTF_8>
		<UTF_16BE final="1" public="1" set="null" static="1"><c path="java.nio.charset.Charset"/></UTF_16BE>
		<UTF_16LE final="1" public="1" set="null" static="1"><c path="java.nio.charset.Charset"/></UTF_16LE>
		<UTF_16 final="1" public="1" set="null" static="1"><c path="java.nio.charset.Charset"/></UTF_16>
		<meta>
			<m n=":native"><e>"java.nio.charset.StandardCharsets"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.charset.spi.CharsetProvider" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/charset/spi/CharsetProvider.class" extern="1" abstract="1">
		<charsets abstract="1" public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.nio.charset.Charset"/></c></f></charsets>
		<charsetForName abstract="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.nio.charset.Charset"/>
</f></charsetForName>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.charset.spi.CharsetProvider"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.nio.file.AccessMode" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/AccessMode.class">
		<READ/>
		<WRITE/>
		<EXECUTE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.nio.file.AccessMode"</e></m>
		</meta>
	</enum>
	<class path="java.nio.file.CopyOption" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/CopyOption.class" extern="1" interface="1"><meta>
	<m n=":native"><e>"java.nio.file.CopyOption"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.nio.file.DirectoryStream" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/DirectoryStream.class" extern="1" interface="1">
		<extends path="java.lang.Iterable"><c path="java.nio.file.DirectoryStream.T"/></extends>
		<extends path="java.io.Closeable"/>
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.nio.file.DirectoryStream.T"/></c></f></iterator>
		<meta>
			<m n=":native"><e>"java.nio.file.DirectoryStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.DirectoryStream_Filter" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/DirectoryStream$Filter.class" module="java.nio.file.DirectoryStream" extern="1" interface="1">
		<accept public="1" set="method"><f a="param1">
	<c path="java.nio.file.DirectoryStream_Filter.T"/>
	<x path="Bool"/>
</f></accept>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.nio.file.DirectoryStream$Filter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.FileStore" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/FileStore.class" extern="1" abstract="1">
		<name abstract="1" public="1" set="method"><f a=""><c path="String"/></f></name>
		<type abstract="1" public="1" set="method"><f a=""><c path="String"/></f></type>
		<isReadOnly abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isReadOnly>
		<getTotalSpace abstract="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getTotalSpace>
		<getUsableSpace abstract="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getUsableSpace>
		<getUnallocatedSpace abstract="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getUnallocatedSpace>
		<supportsFileAttributeView abstract="1" public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="java.nio.file.attribute.FileAttributeView"/></c>
				<x path="Bool"/>
			</f>
			<overloads><supportsFileAttributeView abstract="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></supportsFileAttributeView></overloads>
		</supportsFileAttributeView>
		<getFileStoreAttributeView abstract="1" public="1" params="V" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="getFileStoreAttributeView.V"/></c>
	<c path="getFileStoreAttributeView.V"/>
</f></getFileStoreAttributeView>
		<getAttribute abstract="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<d/>
</f></getAttribute>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.file.FileStore"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.FileSystem" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/FileSystem.class" extern="1" abstract="1">
		<implements path="java.io.Closeable"/>
		<provider abstract="1" public="1" set="method"><f a=""><c path="java.nio.file.spi.FileSystemProvider"/></f></provider>
		<close abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></close>
		<isOpen abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isOpen>
		<isReadOnly abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isReadOnly>
		<getSeparator abstract="1" public="1" set="method"><f a=""><c path="String"/></f></getSeparator>
		<getRootDirectories abstract="1" public="1" set="method"><f a=""><c path="java.lang.Iterable"><c path="java.nio.file.Path"/></c></f></getRootDirectories>
		<getFileStores abstract="1" public="1" set="method"><f a=""><c path="java.lang.Iterable"><c path="java.nio.file.FileStore"/></c></f></getFileStores>
		<supportedFileAttributeViews abstract="1" public="1" set="method"><f a=""><c path="java.util.Set"><c path="String"/></c></f></supportedFileAttributeViews>
		<getPath abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="haxe.Rest"><c path="String"/></x>
	<c path="java.nio.file.Path"/>
</f></getPath>
		<getPathMatcher abstract="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.nio.file.PathMatcher"/>
</f></getPathMatcher>
		<getUserPrincipalLookupService abstract="1" public="1" set="method"><f a=""><c path="java.nio.file.attribute.UserPrincipalLookupService"/></f></getUserPrincipalLookupService>
		<newWatchService abstract="1" public="1" set="method"><f a=""><c path="java.nio.file.WatchService"/></f></newWatchService>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.file.FileSystem"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.nio.file.FileVisitOption" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/FileVisitOption.class">
		<FOLLOW_LINKS/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.nio.file.FileVisitOption"</e></m>
		</meta>
	</enum>
	<enum path="java.nio.file.FileVisitResult" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/FileVisitResult.class">
		<CONTINUE/>
		<TERMINATE/>
		<SKIP_SUBTREE/>
		<SKIP_SIBLINGS/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.nio.file.FileVisitResult"</e></m>
		</meta>
	</enum>
	<class path="java.nio.file.FileVisitor" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/FileVisitor.class" extern="1" interface="1">
		<preVisitDirectory public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.FileVisitor.T"/>
	<c path="java.nio.file.attribute.BasicFileAttributes"/>
	<e path="java.nio.file.FileVisitResult"/>
</f></preVisitDirectory>
		<visitFile public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.FileVisitor.T"/>
	<c path="java.nio.file.attribute.BasicFileAttributes"/>
	<e path="java.nio.file.FileVisitResult"/>
</f></visitFile>
		<visitFileFailed public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.FileVisitor.T"/>
	<c path="java.io.IOException"/>
	<e path="java.nio.file.FileVisitResult"/>
</f></visitFileFailed>
		<postVisitDirectory public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.FileVisitor.T"/>
	<c path="java.io.IOException"/>
	<e path="java.nio.file.FileVisitResult"/>
</f></postVisitDirectory>
		<meta>
			<m n=":native"><e>"java.nio.file.FileVisitor"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.Files" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/Files.class" extern="1">
		<newInputStream public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.OpenOption"/></x>
	<c path="java.io.InputStream"/>
</f></newInputStream>
		<newOutputStream public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.OpenOption"/></x>
	<c path="java.io.OutputStream"/>
</f></newOutputStream>
		<newByteChannel public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
				<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
				<c path="java.nio.channels.SeekableByteChannel"/>
			</f>
			<overloads><newByteChannel public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.OpenOption"/></x>
	<c path="java.nio.channels.SeekableByteChannel"/>
</f></newByteChannel></overloads>
		</newByteChannel>
		<newDirectoryStream public="1" set="method" static="1">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.DirectoryStream"><c path="java.nio.file.Path"/></c>
			</f>
			<overloads>
				<newDirectoryStream public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.DirectoryStream_Filter"><d/></c>
	<c path="java.nio.file.DirectoryStream"><c path="java.nio.file.Path"/></c>
</f></newDirectoryStream>
				<newDirectoryStream public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<c path="String"/>
	<c path="java.nio.file.DirectoryStream"><c path="java.nio.file.Path"/></c>
</f></newDirectoryStream>
			</overloads>
		</newDirectoryStream>
		<createFile public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
	<c path="java.nio.file.Path"/>
</f></createFile>
		<createDirectory public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
	<c path="java.nio.file.Path"/>
</f></createDirectory>
		<createDirectories public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
	<c path="java.nio.file.Path"/>
</f></createDirectories>
		<createTempFile public="1" set="method" static="1">
			<f a="param1:param2:param3:param4">
				<c path="java.nio.file.Path"/>
				<c path="String"/>
				<c path="String"/>
				<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
				<c path="java.nio.file.Path"/>
			</f>
			<overloads><createTempFile public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<c path="String"/>
	<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
	<c path="java.nio.file.Path"/>
</f></createTempFile></overloads>
		</createTempFile>
		<createTempDirectory public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="String"/>
				<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
				<c path="java.nio.file.Path"/>
			</f>
			<overloads><createTempDirectory public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
	<c path="java.nio.file.Path"/>
</f></createTempDirectory></overloads>
		</createTempDirectory>
		<createSymbolicLink public="1" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
	<c path="java.nio.file.Path"/>
</f></createSymbolicLink>
		<createLink public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.Path"/>
</f></createLink>
		<delete public="1" set="method" static="1"><f a="param1">
	<c path="java.nio.file.Path"/>
	<x path="Void"/>
</f></delete>
		<deleteIfExists public="1" set="method" static="1"><f a="param1">
	<c path="java.nio.file.Path"/>
	<x path="Bool"/>
</f></deleteIfExists>
		<copy public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
				<x path="haxe.Rest"><c path="java.nio.file.CopyOption"/></x>
				<c path="java.nio.file.Path"/>
			</f>
			<overloads>
				<copy public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<c path="java.io.OutputStream"/>
	<x path="haxe.Int64"/>
</f></copy>
				<copy public="1" set="method"><f a="param1:param2:param3">
	<c path="java.io.InputStream"/>
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.CopyOption"/></x>
	<x path="haxe.Int64"/>
</f></copy>
			</overloads>
		</copy>
		<move public="1" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.CopyOption"/></x>
	<c path="java.nio.file.Path"/>
</f></move>
		<readSymbolicLink public="1" set="method" static="1"><f a="param1">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.Path"/>
</f></readSymbolicLink>
		<getFileStore public="1" set="method" static="1"><f a="param1">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.FileStore"/>
</f></getFileStore>
		<isSameFile public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.Path"/>
	<x path="Bool"/>
</f></isSameFile>
		<isHidden public="1" set="method" static="1"><f a="param1">
	<c path="java.nio.file.Path"/>
	<x path="Bool"/>
</f></isHidden>
		<probeContentType public="1" set="method" static="1"><f a="param1">
	<c path="java.nio.file.Path"/>
	<c path="String"/>
</f></probeContentType>
		<getFileAttributeView public="1" params="V" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.nio.file.Path"/>
	<c path="java.lang.Class"><c path="getFileAttributeView.V"/></c>
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<c path="getFileAttributeView.V"/>
</f></getFileAttributeView>
		<readAttributes public="1" params="A" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.lang.Class"><c path="readAttributes.A"/></c>
				<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
				<c path="readAttributes.A"/>
			</f>
			<overloads><readAttributes public="1" set="method"><f a="param1:param2:param3">
	<c path="java.nio.file.Path"/>
	<c path="String"/>
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<c path="java.util.Map">
		<c path="String"/>
		<d/>
	</c>
</f></readAttributes></overloads>
		</readAttributes>
		<setAttribute public="1" set="method" static="1"><f a="param1:param2:param3:param4">
	<c path="java.nio.file.Path"/>
	<c path="String"/>
	<d/>
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<c path="java.nio.file.Path"/>
</f></setAttribute>
		<getAttribute public="1" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.nio.file.Path"/>
	<c path="String"/>
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<d/>
</f></getAttribute>
		<getPosixFilePermissions public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<c path="java.util.Set"><e path="java.nio.file.attribute.PosixFilePermission"/></c>
</f></getPosixFilePermissions>
		<setPosixFilePermissions public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<c path="java.util.Set"><e path="java.nio.file.attribute.PosixFilePermission"/></c>
	<c path="java.nio.file.Path"/>
</f></setPosixFilePermissions>
		<getOwner public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<c path="java.nio.file.attribute.UserPrincipal"/>
</f></getOwner>
		<setOwner public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.attribute.UserPrincipal"/>
	<c path="java.nio.file.Path"/>
</f></setOwner>
		<isSymbolicLink public="1" set="method" static="1"><f a="param1">
	<c path="java.nio.file.Path"/>
	<x path="Bool"/>
</f></isSymbolicLink>
		<isDirectory public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<x path="Bool"/>
</f></isDirectory>
		<isRegularFile public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<x path="Bool"/>
</f></isRegularFile>
		<getLastModifiedTime public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<c path="java.nio.file.attribute.FileTime"/>
</f></getLastModifiedTime>
		<setLastModifiedTime public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.attribute.FileTime"/>
	<c path="java.nio.file.Path"/>
</f></setLastModifiedTime>
		<size public="1" set="method" static="1"><f a="param1">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Int64"/>
</f></size>
		<exists public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<x path="Bool"/>
</f></exists>
		<notExists public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<x path="Bool"/>
</f></notExists>
		<isReadable public="1" set="method" static="1"><f a="param1">
	<c path="java.nio.file.Path"/>
	<x path="Bool"/>
</f></isReadable>
		<isWritable public="1" set="method" static="1"><f a="param1">
	<c path="java.nio.file.Path"/>
	<x path="Bool"/>
</f></isWritable>
		<isExecutable public="1" set="method" static="1"><f a="param1">
	<c path="java.nio.file.Path"/>
	<x path="Bool"/>
</f></isExecutable>
		<walkFileTree public="1" set="method" static="1">
			<f a="param1:param2:param3:param4">
				<c path="java.nio.file.Path"/>
				<c path="java.util.Set"><e path="java.nio.file.FileVisitOption"/></c>
				<x path="Int"/>
				<c path="java.nio.file.FileVisitor"><d/></c>
				<c path="java.nio.file.Path"/>
			</f>
			<overloads><walkFileTree public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.FileVisitor"><d/></c>
	<c path="java.nio.file.Path"/>
</f></walkFileTree></overloads>
		</walkFileTree>
		<newBufferedReader public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.charset.Charset"/>
				<c path="java.io.BufferedReader"/>
			</f>
			<overloads><newBufferedReader public="1" set="method"><f a="param1">
	<c path="java.nio.file.Path"/>
	<c path="java.io.BufferedReader"/>
</f></newBufferedReader></overloads>
		</newBufferedReader>
		<newBufferedWriter public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.charset.Charset"/>
				<x path="haxe.Rest"><c path="java.nio.file.OpenOption"/></x>
				<c path="java.io.BufferedWriter"/>
			</f>
			<overloads><newBufferedWriter public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.OpenOption"/></x>
	<c path="java.io.BufferedWriter"/>
</f></newBufferedWriter></overloads>
		</newBufferedWriter>
		<readAllBytes public="1" set="method" static="1"><f a="param1">
	<c path="java.nio.file.Path"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></readAllBytes>
		<readAllLines public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.charset.Charset"/>
				<c path="java.util.List"><c path="String"/></c>
			</f>
			<overloads><readAllLines public="1" set="method"><f a="param1">
	<c path="java.nio.file.Path"/>
	<c path="java.util.List"><c path="String"/></c>
</f></readAllLines></overloads>
		</readAllLines>
		<write public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="haxe.Rest"><c path="java.nio.file.OpenOption"/></x>
				<c path="java.nio.file.Path"/>
			</f>
			<overloads>
				<write public="1" set="method"><f a="param1:param2:param3">
	<c path="java.nio.file.Path"/>
	<c path="java.lang.Iterable"><c path="java.lang.CharSequence"/></c>
	<x path="haxe.Rest"><c path="java.nio.file.OpenOption"/></x>
	<c path="java.nio.file.Path"/>
</f></write>
				<write public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.nio.file.Path"/>
	<c path="java.lang.Iterable"><c path="java.lang.CharSequence"/></c>
	<c path="java.nio.charset.Charset"/>
	<x path="haxe.Rest"><c path="java.nio.file.OpenOption"/></x>
	<c path="java.nio.file.Path"/>
</f></write>
			</overloads>
		</write>
		<list public="1" set="method" static="1"><f a="param1">
	<c path="java.nio.file.Path"/>
	<c path="java.util.stream.Stream"><c path="java.nio.file.Path"/></c>
</f></list>
		<walk public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<x path="Int"/>
				<x path="haxe.Rest"><e path="java.nio.file.FileVisitOption"/></x>
				<c path="java.util.stream.Stream"><c path="java.nio.file.Path"/></c>
			</f>
			<overloads><walk public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><e path="java.nio.file.FileVisitOption"/></x>
	<c path="java.util.stream.Stream"><c path="java.nio.file.Path"/></c>
</f></walk></overloads>
		</walk>
		<find public="1" set="method" static="1"><f a="param1:param2:param3:param4">
	<c path="java.nio.file.Path"/>
	<x path="Int"/>
	<c path="java.util.function.BiPredicate">
		<c path="java.nio.file.Path"/>
		<c path="java.nio.file.attribute.BasicFileAttributes"/>
	</c>
	<x path="haxe.Rest"><e path="java.nio.file.FileVisitOption"/></x>
	<c path="java.util.stream.Stream"><c path="java.nio.file.Path"/></c>
</f></find>
		<lines public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.charset.Charset"/>
				<c path="java.util.stream.Stream"><c path="String"/></c>
			</f>
			<overloads><lines public="1" set="method"><f a="param1">
	<c path="java.nio.file.Path"/>
	<c path="java.util.stream.Stream"><c path="String"/></c>
</f></lines></overloads>
		</lines>
		<meta>
			<m n=":native"><e>"java.nio.file.Files"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.Files_FileTypeDetectors" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/Files$FileTypeDetectors.class" module="java.nio.file.Files" extern="1">
		<defaultFileTypeDetector final="1" public="1" set="null" static="1"><c path="java.nio.file.spi.FileTypeDetector"/></defaultFileTypeDetector>
		<installeDetectors final="1" public="1" set="null" static="1"><c path="java.util.List"><c path="java.nio.file.spi.FileTypeDetector"/></c></installeDetectors>
		<meta>
			<m n=":native"><e>"java.nio.file.Files$FileTypeDetectors"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.Files_FileTypeDetectors_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/Files$FileTypeDetectors$2.class" module="java.nio.file.Files" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.util.List"><c path="java.nio.file.spi.FileTypeDetector"/></c></implements>
		<run public="1" set="method"><f a=""><c path="java.util.List"><c path="java.nio.file.spi.FileTypeDetector"/></c></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.file.Files$FileTypeDetectors$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.Files_FileTypeDetectors_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/Files$FileTypeDetectors$1.class" module="java.nio.file.Files" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.nio.file.spi.FileTypeDetector"/></implements>
		<run public="1" set="method"><f a=""><c path="java.nio.file.spi.FileTypeDetector"/></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.file.Files$FileTypeDetectors$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.Files_AcceptAllFilter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/Files$AcceptAllFilter.class" module="java.nio.file.Files" extern="1">
		<implements path="java.nio.file.DirectoryStream_Filter"><c path="java.nio.file.Path"/></implements>
		<FILTER final="1" public="1" set="null" static="1"><c path="java.nio.file.Files_AcceptAllFilter"/></FILTER>
		<accept public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Bool"/>
			</f>
			<overloads><accept public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></accept></overloads>
		</accept>
		<meta>
			<m n=":native"><e>"java.nio.file.Files$AcceptAllFilter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.Files_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/Files$3.class" module="java.nio.file.Files" extern="1"><meta>
	<m n=":native"><e>"java.nio.file.Files$3"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.nio.file.Files_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/Files$2.class" module="java.nio.file.Files" extern="1">
		<implements path="java.util.Iterator"><c path="java.nio.file.Path"/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><c path="java.nio.file.Path"/></f></next>
		<val_delegate final="1" public="1">
			<c path="java.util.Iterator"><d/></c>
			<meta><m n=":native"><e>"val$delegate"</e></m></meta>
		</val_delegate>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Iterator"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.file.Files$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.Files_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/Files$1.class" module="java.nio.file.Files" extern="1">
		<implements path="java.nio.file.DirectoryStream_Filter"><c path="java.nio.file.Path"/></implements>
		<accept public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Bool"/>
			</f>
			<overloads><accept public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></accept></overloads>
		</accept>
		<val_matcher final="1" public="1">
			<c path="java.nio.file.PathMatcher"/>
			<meta><m n=":native"><e>"val$matcher"</e></m></meta>
		</val_matcher>
		<new public="1" set="method"><f a="param1">
	<c path="java.nio.file.PathMatcher"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.nio.file.Files$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.nio.file.LinkOption" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/LinkOption.class">
		<NOFOLLOW_LINKS/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.nio.file.LinkOption"</e></m>
		</meta>
	</enum>
	<class path="java.nio.file.OpenOption" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/OpenOption.class" extern="1" interface="1"><meta>
	<m n=":native"><e>"java.nio.file.OpenOption"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.nio.file.Watchable" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/Watchable.class" extern="1" interface="1">
		<register public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.WatchService"/>
				<c path="java.NativeArray"><c path="java.nio.file.WatchEvent_Kind"><d/></c></c>
				<x path="haxe.Rest"><c path="java.nio.file.WatchEvent_Modifier"/></x>
				<c path="java.nio.file.WatchKey"/>
			</f>
			<overloads><register public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.WatchService"/>
	<x path="haxe.Rest"><c path="java.nio.file.WatchEvent_Kind"><d/></c></x>
	<c path="java.nio.file.WatchKey"/>
</f></register></overloads>
		</register>
		<meta>
			<m n=":native"><e>"java.nio.file.Watchable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.Path" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/Path.class" extern="1" interface="1">
		<extends path="java.nio.file.Watchable"/>
		<extends path="java.lang.Iterable"><c path="java.nio.file.Path"/></extends>
		<extends path="java.lang.Comparable"><c path="java.nio.file.Path"/></extends>
		<getFileSystem public="1" set="method"><f a=""><c path="java.nio.file.FileSystem"/></f></getFileSystem>
		<isAbsolute public="1" set="method"><f a=""><x path="Bool"/></f></isAbsolute>
		<getRoot public="1" set="method"><f a=""><c path="java.nio.file.Path"/></f></getRoot>
		<getFileName public="1" set="method"><f a=""><c path="java.nio.file.Path"/></f></getFileName>
		<getParent public="1" set="method"><f a=""><c path="java.nio.file.Path"/></f></getParent>
		<getNameCount public="1" set="method"><f a=""><x path="Int"/></f></getNameCount>
		<getName public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.nio.file.Path"/>
</f></getName>
		<subpath public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.nio.file.Path"/>
</f></subpath>
		<startsWith public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Bool"/>
			</f>
			<overloads><startsWith public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></startsWith></overloads>
		</startsWith>
		<endsWith public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Bool"/>
			</f>
			<overloads><endsWith public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></endsWith></overloads>
		</endsWith>
		<normalize public="1" set="method"><f a=""><c path="java.nio.file.Path"/></f></normalize>
		<resolve public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
			</f>
			<overloads><resolve public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.nio.file.Path"/>
</f></resolve></overloads>
		</resolve>
		<resolveSibling public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
			</f>
			<overloads><resolveSibling public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.nio.file.Path"/>
</f></resolveSibling></overloads>
		</resolveSibling>
		<relativize public="1" set="method"><f a="param1">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.Path"/>
</f></relativize>
		<toUri public="1" set="method"><f a=""><c path="java.net.URI"/></f></toUri>
		<toAbsolutePath public="1" set="method"><f a=""><c path="java.nio.file.Path"/></f></toAbsolutePath>
		<toRealPath public="1" set="method"><f a="param1">
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<c path="java.nio.file.Path"/>
</f></toRealPath>
		<toFile public="1" set="method"><f a=""><c path="java.io.File"/></f></toFile>
		<register public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.WatchService"/>
				<c path="java.NativeArray"><c path="java.nio.file.WatchEvent_Kind"><d/></c></c>
				<x path="haxe.Rest"><c path="java.nio.file.WatchEvent_Modifier"/></x>
				<c path="java.nio.file.WatchKey"/>
			</f>
			<overloads><register public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.WatchService"/>
	<x path="haxe.Rest"><c path="java.nio.file.WatchEvent_Kind"><d/></c></x>
	<c path="java.nio.file.WatchKey"/>
</f></register></overloads>
		</register>
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.nio.file.Path"/></c></f></iterator>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":java.default"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.nio.file.Path"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.PathMatcher" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/PathMatcher.class" extern="1" interface="1">
		<matches public="1" set="method"><f a="param1">
	<c path="java.nio.file.Path"/>
	<x path="Bool"/>
</f></matches>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.nio.file.PathMatcher"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.Paths" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/Paths.class" extern="1">
		<get public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="haxe.Rest"><c path="String"/></x>
				<c path="java.nio.file.Path"/>
			</f>
			<overloads><get public="1" set="method"><f a="param1">
	<c path="java.net.URI"/>
	<c path="java.nio.file.Path"/>
</f></get></overloads>
		</get>
		<meta>
			<m n=":native"><e>"java.nio.file.Paths"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.WatchEvent" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/WatchEvent.class" extern="1" interface="1">
		<kind public="1" set="method"><f a=""><c path="java.nio.file.WatchEvent_Kind"><c path="java.nio.file.WatchEvent.T"/></c></f></kind>
		<count public="1" set="method"><f a=""><x path="Int"/></f></count>
		<context public="1" set="method"><f a=""><c path="java.nio.file.WatchEvent.T"/></f></context>
		<meta>
			<m n=":native"><e>"java.nio.file.WatchEvent"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.WatchEvent_Modifier" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/WatchEvent$Modifier.class" module="java.nio.file.WatchEvent" extern="1" interface="1">
		<name public="1" set="method"><f a=""><c path="String"/></f></name>
		<meta>
			<m n=":native"><e>"java.nio.file.WatchEvent$Modifier"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.WatchEvent_Kind" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/WatchEvent$Kind.class" module="java.nio.file.WatchEvent" extern="1" interface="1">
		<name public="1" set="method"><f a=""><c path="String"/></f></name>
		<type public="1" set="method"><f a=""><c path="java.lang.Class"><c path="java.nio.file.WatchEvent_Kind.T"/></c></f></type>
		<meta>
			<m n=":native"><e>"java.nio.file.WatchEvent$Kind"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.WatchKey" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/WatchKey.class" extern="1" interface="1">
		<isValid public="1" set="method"><f a=""><x path="Bool"/></f></isValid>
		<pollEvents public="1" set="method"><f a=""><c path="java.util.List"><c path="java.nio.file.WatchEvent"><d/></c></c></f></pollEvents>
		<reset public="1" set="method"><f a=""><x path="Bool"/></f></reset>
		<cancel public="1" set="method"><f a=""><x path="Void"/></f></cancel>
		<watchable public="1" set="method"><f a=""><c path="java.nio.file.Watchable"/></f></watchable>
		<meta>
			<m n=":native"><e>"java.nio.file.WatchKey"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.WatchService" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/WatchService.class" extern="1" interface="1">
		<extends path="java.io.Closeable"/>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<poll public="1" set="method">
			<f a=""><c path="java.nio.file.WatchKey"/></f>
			<overloads><poll public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<c path="java.nio.file.WatchKey"/>
</f></poll></overloads>
		</poll>
		<take public="1" set="method"><f a=""><c path="java.nio.file.WatchKey"/></f></take>
		<meta>
			<m n=":native"><e>"java.nio.file.WatchService"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.attribute.AttributeView" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/AttributeView.class" extern="1" interface="1">
		<name public="1" set="method"><f a=""><c path="String"/></f></name>
		<meta>
			<m n=":native"><e>"java.nio.file.attribute.AttributeView"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.attribute.BasicFileAttributes" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/BasicFileAttributes.class" extern="1" interface="1">
		<lastModifiedTime public="1" set="method"><f a=""><c path="java.nio.file.attribute.FileTime"/></f></lastModifiedTime>
		<lastAccessTime public="1" set="method"><f a=""><c path="java.nio.file.attribute.FileTime"/></f></lastAccessTime>
		<creationTime public="1" set="method"><f a=""><c path="java.nio.file.attribute.FileTime"/></f></creationTime>
		<isRegularFile public="1" set="method"><f a=""><x path="Bool"/></f></isRegularFile>
		<isDirectory public="1" set="method"><f a=""><x path="Bool"/></f></isDirectory>
		<isSymbolicLink public="1" set="method"><f a=""><x path="Bool"/></f></isSymbolicLink>
		<isOther public="1" set="method"><f a=""><x path="Bool"/></f></isOther>
		<size public="1" set="method"><f a=""><x path="haxe.Int64"/></f></size>
		<fileKey public="1" set="method"><f a=""><d/></f></fileKey>
		<meta>
			<m n=":native"><e>"java.nio.file.attribute.BasicFileAttributes"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileAttribute" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/FileAttribute.class" extern="1" interface="1">
		<name public="1" set="method"><f a=""><c path="String"/></f></name>
		<value public="1" set="method"><f a=""><c path="java.nio.file.attribute.FileAttribute.T"/></f></value>
		<meta>
			<m n=":native"><e>"java.nio.file.attribute.FileAttribute"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileAttributeView" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/FileAttributeView.class" extern="1" interface="1">
		<extends path="java.nio.file.attribute.AttributeView"/>
		<meta>
			<m n=":native"><e>"java.nio.file.attribute.FileAttributeView"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileStoreAttributeView" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/FileStoreAttributeView.class" extern="1" interface="1">
		<extends path="java.nio.file.attribute.AttributeView"/>
		<meta>
			<m n=":native"><e>"java.nio.file.attribute.FileStoreAttributeView"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileTime" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/FileTime.class" extern="1">
		<implements path="java.lang.Comparable"><c path="java.nio.file.attribute.FileTime"/></implements>
		<from public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<c path="java.nio.file.attribute.FileTime"/>
			</f>
			<overloads><from public="1" set="method"><f a="param1">
	<c path="java.time.Instant"/>
	<c path="java.nio.file.attribute.FileTime"/>
</f></from></overloads>
		</from>
		<fromMillis public="1" set="method" static="1"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.nio.file.attribute.FileTime"/>
</f></fromMillis>
		<to public="1" set="method"><f a="param1">
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="haxe.Int64"/>
</f></to>
		<toMillis public="1" set="method"><f a=""><x path="haxe.Int64"/></f></toMillis>
		<toInstant public="1" set="method"><f a=""><c path="java.time.Instant"/></f></toInstant>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.attribute.FileTime"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.nio.file.attribute.FileTime"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileTime_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/FileTime$1.class" module="java.nio.file.attribute.FileTime" extern="1"><meta>
	<m n=":native"><e>"java.nio.file.attribute.FileTime$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.security.Principal" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Principal.class" extern="1" interface="1">
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<implies public="1" set="method">
			<f a="param1">
				<c path="java.javax.security.auth.Subject"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</implies>
		<meta>
			<m n=":native"><e>"java.security.Principal"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.attribute.UserPrincipal" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/UserPrincipal.class" extern="1" interface="1">
		<extends path="java.security.Principal"/>
		<meta>
			<m n=":native"><e>"java.nio.file.attribute.UserPrincipal"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.attribute.GroupPrincipal" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/GroupPrincipal.class" extern="1" interface="1">
		<extends path="java.nio.file.attribute.UserPrincipal"/>
		<meta>
			<m n=":native"><e>"java.nio.file.attribute.GroupPrincipal"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.nio.file.attribute.PosixFilePermission" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/PosixFilePermission.class">
		<OWNER_READ/>
		<OWNER_WRITE/>
		<OWNER_EXECUTE/>
		<GROUP_READ/>
		<GROUP_WRITE/>
		<GROUP_EXECUTE/>
		<OTHERS_READ/>
		<OTHERS_WRITE/>
		<OTHERS_EXECUTE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.nio.file.attribute.PosixFilePermission"</e></m>
		</meta>
	</enum>
	<class path="java.nio.file.attribute.UserPrincipalLookupService" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/UserPrincipalLookupService.class" extern="1" abstract="1">
		<lookupPrincipalByName abstract="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.nio.file.attribute.UserPrincipal"/>
</f></lookupPrincipalByName>
		<lookupPrincipalByGroupName abstract="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.nio.file.attribute.GroupPrincipal"/>
</f></lookupPrincipalByGroupName>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.file.attribute.UserPrincipalLookupService"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.spi.FileSystemProvider" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/spi/FileSystemProvider.class" extern="1" abstract="1">
		<installedProviders public="1" set="method" static="1"><f a=""><c path="java.util.List"><c path="java.nio.file.spi.FileSystemProvider"/></c></f></installedProviders>
		<getScheme abstract="1" public="1" set="method"><f a=""><c path="String"/></f></getScheme>
		<newFileSystem abstract="1" public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.URI"/>
				<c path="java.util.Map">
					<c path="String"/>
					<d/>
				</c>
				<c path="java.nio.file.FileSystem"/>
			</f>
			<overloads><newFileSystem public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<c path="java.util.Map">
		<c path="String"/>
		<d/>
	</c>
	<c path="java.nio.file.FileSystem"/>
</f></newFileSystem></overloads>
		</newFileSystem>
		<getFileSystem abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.URI"/>
	<c path="java.nio.file.FileSystem"/>
</f></getFileSystem>
		<getPath abstract="1" public="1" set="method"><f a="param1">
	<c path="java.net.URI"/>
	<c path="java.nio.file.Path"/>
</f></getPath>
		<newInputStream public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.OpenOption"/></x>
	<c path="java.io.InputStream"/>
</f></newInputStream>
		<newOutputStream public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.OpenOption"/></x>
	<c path="java.io.OutputStream"/>
</f></newOutputStream>
		<newFileChannel public="1" set="method"><f a="param1:param2:param3">
	<c path="java.nio.file.Path"/>
	<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
	<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
	<c path="java.nio.channels.FileChannel"/>
</f></newFileChannel>
		<newAsynchronousFileChannel public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.nio.file.Path"/>
	<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
	<c path="java.util.concurrent.ExecutorService"/>
	<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
	<c path="java.nio.channels.AsynchronousFileChannel"/>
</f></newAsynchronousFileChannel>
		<newByteChannel abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.nio.file.Path"/>
	<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
	<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
	<c path="java.nio.channels.SeekableByteChannel"/>
</f></newByteChannel>
		<newDirectoryStream abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.DirectoryStream_Filter"><d/></c>
	<c path="java.nio.file.DirectoryStream"><c path="java.nio.file.Path"/></c>
</f></newDirectoryStream>
		<createDirectory abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
	<x path="Void"/>
</f></createDirectory>
		<createSymbolicLink public="1" set="method"><f a="param1:param2:param3">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.attribute.FileAttribute"><d/></c></x>
	<x path="Void"/>
</f></createSymbolicLink>
		<createLink public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.Path"/>
	<x path="Void"/>
</f></createLink>
		<delete abstract="1" public="1" set="method"><f a="param1">
	<c path="java.nio.file.Path"/>
	<x path="Void"/>
</f></delete>
		<deleteIfExists public="1" set="method"><f a="param1">
	<c path="java.nio.file.Path"/>
	<x path="Bool"/>
</f></deleteIfExists>
		<readSymbolicLink public="1" set="method"><f a="param1">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.Path"/>
</f></readSymbolicLink>
		<copy abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.CopyOption"/></x>
	<x path="Void"/>
</f></copy>
		<move abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><c path="java.nio.file.CopyOption"/></x>
	<x path="Void"/>
</f></move>
		<isSameFile abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.Path"/>
	<x path="Bool"/>
</f></isSameFile>
		<isHidden abstract="1" public="1" set="method"><f a="param1">
	<c path="java.nio.file.Path"/>
	<x path="Bool"/>
</f></isHidden>
		<getFileStore abstract="1" public="1" set="method"><f a="param1">
	<c path="java.nio.file.Path"/>
	<c path="java.nio.file.FileStore"/>
</f></getFileStore>
		<checkAccess abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.nio.file.Path"/>
	<x path="haxe.Rest"><e path="java.nio.file.AccessMode"/></x>
	<x path="Void"/>
</f></checkAccess>
		<getFileAttributeView abstract="1" public="1" params="V" set="method"><f a="param1:param2:param3">
	<c path="java.nio.file.Path"/>
	<c path="java.lang.Class"><c path="getFileAttributeView.V"/></c>
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<c path="getFileAttributeView.V"/>
</f></getFileAttributeView>
		<readAttributes abstract="1" public="1" params="A" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.lang.Class"><c path="readAttributes.A"/></c>
				<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
				<c path="readAttributes.A"/>
			</f>
			<overloads><readAttributes abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.nio.file.Path"/>
	<c path="String"/>
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<c path="java.util.Map">
		<c path="String"/>
		<d/>
	</c>
</f></readAttributes></overloads>
		</readAttributes>
		<setAttribute abstract="1" public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.nio.file.Path"/>
	<c path="String"/>
	<d/>
	<x path="haxe.Rest"><e path="java.nio.file.LinkOption"/></x>
	<x path="Void"/>
</f></setAttribute>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.file.spi.FileSystemProvider"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.spi.FileSystemProvider_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/spi/FileSystemProvider$1.class" module="java.nio.file.spi.FileSystemProvider" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.util.List"><c path="java.nio.file.spi.FileSystemProvider"/></c></implements>
		<run public="1" set="method"><f a=""><c path="java.util.List"><c path="java.nio.file.spi.FileSystemProvider"/></c></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.file.spi.FileSystemProvider$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.nio.file.spi.FileTypeDetector" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/spi/FileTypeDetector.class" extern="1" abstract="1">
		<probeContentType abstract="1" public="1" set="method"><f a="param1">
	<c path="java.nio.file.Path"/>
	<c path="String"/>
</f></probeContentType>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.nio.file.spi.FileTypeDetector"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.AccessControlContext" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/AccessControlContext.class" extern="1">
		<getDebug public="1" set="method" static="1"><f a=""><c path="java.sun.security.util.Debug"/></f></getDebug>
		<getContext public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.security.ProtectionDomain"/></c></f></getContext>
		<isPrivileged public="1" set="method"><f a=""><x path="Bool"/></f></isPrivileged>
		<getAssignedCombiner public="1" set="method"><f a=""><c path="java.security.DomainCombiner"/></f></getAssignedCombiner>
		<getDomainCombiner public="1" set="method"><f a=""><c path="java.security.DomainCombiner"/></f></getDomainCombiner>
		<getCombiner public="1" set="method"><f a=""><c path="java.security.DomainCombiner"/></f></getCombiner>
		<isAuthorized public="1" set="method"><f a=""><x path="Bool"/></f></isAuthorized>
		<checkPermission public="1" set="method"><f a="param1">
	<c path="java.security.Permission"/>
	<x path="Void"/>
</f></checkPermission>
		<optimize public="1" set="method"><f a=""><c path="java.security.AccessControlContext"/></f></optimize>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.security.ProtectionDomain"/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.security.ProtectionDomain"/></c>
	<c path="java.security.AccessControlContext"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.security.ProtectionDomain"/></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.security.ProtectionDomain"/>
	<c path="java.security.DomainCombiner"/>
	<c path="java.security.AccessControlContext"/>
	<c path="java.security.AccessControlContext"/>
	<c path="java.NativeArray"><c path="java.security.Permission"/></c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.security.AccessControlContext"/>
	<c path="java.security.DomainCombiner"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.security.AccessControlContext"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.AccessControlContext_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/AccessControlContext$1.class" module="java.security.AccessControlContext" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<val_db final="1" public="1">
			<c path="java.sun.security.util.Debug"/>
			<meta><m n=":native"><e>"val$db"</e></m></meta>
		</val_db>
		<val_pd final="1" public="1">
			<c path="java.security.ProtectionDomain"/>
			<meta><m n=":native"><e>"val$pd"</e></m></meta>
		</val_pd>
		<this_0 final="1" public="1">
			<c path="java.security.AccessControlContext"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.security.AccessControlContext"/>
	<c path="java.sun.security.util.Debug"/>
	<c path="java.security.ProtectionDomain"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.AccessControlContext$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.CodeSigner" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/CodeSigner.class" extern="1">
		<implements path="java.io.Serializable"/>
		<getSignerCertPath public="1" set="method"><f a=""><c path="java.security.cert.CertPath"/></f></getSignerCertPath>
		<getTimestamp public="1" set="method"><f a=""><c path="java.security.Timestamp"/></f></getTimestamp>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.security.cert.CertPath"/>
	<c path="java.security.Timestamp"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.CodeSigner"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.CodeSource" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/CodeSource.class" extern="1">
		<implements path="java.io.Serializable"/>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<getLocation final="1" public="1" set="method"><f a=""><c path="java.net.URL"/></f></getLocation>
		<getCertificates final="1" public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.security.cert.Certificate"/></c></f></getCertificates>
		<getCodeSigners final="1" public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.security.CodeSigner"/></c></f></getCodeSigners>
		<implies public="1" set="method"><f a="param1">
	<c path="java.security.CodeSource"/>
	<x path="Bool"/>
</f></implies>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.URL"/>
				<c path="java.NativeArray"><c path="java.security.cert.Certificate"/></c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.net.URL"/>
	<c path="java.NativeArray"><c path="java.security.CodeSigner"/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.security.CodeSource"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.DomainCombiner" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/DomainCombiner.class" extern="1" interface="1">
		<combine public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.security.ProtectionDomain"/></c>
	<c path="java.NativeArray"><c path="java.security.ProtectionDomain"/></c>
	<c path="java.NativeArray"><c path="java.security.ProtectionDomain"/></c>
</f></combine>
		<meta>
			<m n=":native"><e>"java.security.DomainCombiner"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.Key" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Key.class" extern="1" interface="1">
		<extends path="java.io.Serializable"/>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<getAlgorithm public="1" set="method"><f a=""><c path="String"/></f></getAlgorithm>
		<getFormat public="1" set="method"><f a=""><c path="String"/></f></getFormat>
		<getEncoded public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getEncoded>
		<meta>
			<m n=":native"><e>"java.security.Key"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.MessageDigestSpi" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/MessageDigestSpi.class" extern="1" abstract="1">
		<engineGetDigestLength public="1" set="method"><f a=""><x path="Int"/></f></engineGetDigestLength>
		<engineUpdate abstract="1" public="1" set="method">
			<f a="param1">
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<overloads>
				<engineUpdate public="1" set="method"><f a="param1">
	<c path="java.nio.ByteBuffer"/>
	<x path="Void"/>
</f></engineUpdate>
				<engineUpdate abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></engineUpdate>
			</overloads>
		</engineUpdate>
		<engineDigest abstract="1" public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<overloads><engineDigest public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></engineDigest></overloads>
		</engineDigest>
		<engineReset abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></engineReset>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.security.MessageDigestSpi"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.MessageDigest" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/MessageDigest.class" extern="1" abstract="1">
		<extends path="java.security.MessageDigestSpi"/>
		<getInstance public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.security.MessageDigest"/>
			</f>
			<overloads>
				<getInstance public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.security.Provider"/>
	<c path="java.security.MessageDigest"/>
</f></getInstance>
				<getInstance public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<c path="java.security.MessageDigest"/>
</f></getInstance>
			</overloads>
		</getInstance>
		<isEqual public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Bool"/>
</f></isEqual>
		<getProvider final="1" public="1" set="method"><f a=""><c path="java.security.Provider"/></f></getProvider>
		<update public="1" set="method">
			<f a="param1">
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<overloads>
				<update final="1" public="1" set="method"><f a="param1">
	<c path="java.nio.ByteBuffer"/>
	<x path="Void"/>
</f></update>
				<update public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></update>
				<update public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
			</overloads>
		</update>
		<digest public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<overloads>
				<digest public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></digest>
				<digest public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></digest>
			</overloads>
		</digest>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<getAlgorithm final="1" public="1" set="method"><f a=""><c path="String"/></f></getAlgorithm>
		<getDigestLength final="1" public="1" set="method"><f a=""><x path="Int"/></f></getDigestLength>
		<clone public="1" set="method" override="1"><f a=""><d/></f></clone>
		<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.MessageDigest"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.MessageDigest_Delegate" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/MessageDigest$Delegate.class" module="java.security.MessageDigest" extern="1">
		<extends path="java.security.MessageDigest"/>
		<clone public="1" set="method" override="1"><f a=""><d/></f></clone>
		<engineGetDigestLength public="1" set="method" override="1"><f a=""><x path="Int"/></f></engineGetDigestLength>
		<engineUpdate public="1" set="method" override="1">
			<f a="param1">
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<overloads>
				<engineUpdate public="1" set="method"><f a="param1">
	<c path="java.nio.ByteBuffer"/>
	<x path="Void"/>
</f></engineUpdate>
				<engineUpdate public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></engineUpdate>
			</overloads>
		</engineUpdate>
		<engineDigest public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<overloads><engineDigest public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></engineDigest></overloads>
		</engineDigest>
		<engineReset public="1" set="method" override="1"><f a=""><x path="Void"/></f></engineReset>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.security.MessageDigestSpi"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.MessageDigest$Delegate"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.PermissionCollection" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/PermissionCollection.class" extern="1" abstract="1">
		<implements path="java.io.Serializable"/>
		<add abstract="1" public="1" set="method"><f a="param1">
	<c path="java.security.Permission"/>
	<x path="Void"/>
</f></add>
		<implies abstract="1" public="1" set="method"><f a="param1">
	<c path="java.security.Permission"/>
	<x path="Bool"/>
</f></implies>
		<elements abstract="1" public="1" set="method"><f a=""><c path="java.util.Enumeration"><c path="java.security.Permission"/></c></f></elements>
		<setReadOnly public="1" set="method"><f a=""><x path="Void"/></f></setReadOnly>
		<isReadOnly public="1" set="method"><f a=""><x path="Bool"/></f></isReadOnly>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.security.PermissionCollection"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.ProtectionDomain" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/ProtectionDomain.class" extern="1">
		<getCodeSource final="1" public="1" set="method"><f a=""><c path="java.security.CodeSource"/></f></getCodeSource>
		<getClassLoader final="1" public="1" set="method"><f a=""><c path="java.lang.ClassLoader"/></f></getClassLoader>
		<getPrincipals final="1" public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.security.Principal"/></c></f></getPrincipals>
		<getPermissions final="1" public="1" set="method"><f a=""><c path="java.security.PermissionCollection"/></f></getPermissions>
		<implies public="1" set="method"><f a="param1">
	<c path="java.security.Permission"/>
	<x path="Bool"/>
</f></implies>
		<impliesCreateAccessControlContext public="1" set="method"><f a=""><x path="Bool"/></f></impliesCreateAccessControlContext>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<key final="1" public="1"><c path="java.security.ProtectionDomain_Key"/></key>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.security.CodeSource"/>
				<c path="java.security.PermissionCollection"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.security.CodeSource"/>
	<c path="java.security.PermissionCollection"/>
	<c path="java.lang.ClassLoader"/>
	<c path="java.NativeArray"><c path="java.security.Principal"/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.security.ProtectionDomain"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.ProtectionDomain_Key" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/ProtectionDomain$Key.class" module="java.security.ProtectionDomain" extern="1">
		<this_0 final="1" public="1">
			<c path="java.security.ProtectionDomain"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.security.ProtectionDomain"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.ProtectionDomain$Key"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.JavaSecurityProtectionDomainAccess" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/JavaSecurityProtectionDomainAccess.class" extern="1" interface="1">
		<getProtectionDomainCache public="1" set="method"><f a=""><c path="java.sun.misc.JavaSecurityProtectionDomainAccess_ProtectionDomainCache"/></f></getProtectionDomainCache>
		<meta>
			<m n=":native"><e>"sun.misc.JavaSecurityProtectionDomainAccess"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.ProtectionDomain_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/ProtectionDomain$3.class" module="java.security.ProtectionDomain" extern="1">
		<implements path="java.sun.misc.JavaSecurityProtectionDomainAccess"/>
		<getProtectionDomainCache public="1" set="method"><f a=""><c path="java.sun.misc.JavaSecurityProtectionDomainAccess_ProtectionDomainCache"/></f></getProtectionDomainCache>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.security.ProtectionDomain$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.JavaSecurityProtectionDomainAccess_ProtectionDomainCache" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/JavaSecurityProtectionDomainAccess$ProtectionDomainCache.class" module="java.sun.misc.JavaSecurityProtectionDomainAccess" extern="1" interface="1">
		<put public="1" set="method"><f a="param1:param2">
	<c path="java.security.ProtectionDomain"/>
	<c path="java.security.PermissionCollection"/>
	<x path="Void"/>
</f></put>
		<get public="1" set="method"><f a="param1">
	<c path="java.security.ProtectionDomain"/>
	<c path="java.security.PermissionCollection"/>
</f></get>
		<meta>
			<m n=":native"><e>"sun.misc.JavaSecurityProtectionDomainAccess$ProtectionDomainCache"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.ProtectionDomain_3_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/ProtectionDomain$3$1.class" module="java.security.ProtectionDomain" extern="1">
		<implements path="java.sun.misc.JavaSecurityProtectionDomainAccess_ProtectionDomainCache"/>
		<put public="1" set="method"><f a="param1:param2">
	<c path="java.security.ProtectionDomain"/>
	<c path="java.security.PermissionCollection"/>
	<x path="Void"/>
</f></put>
		<get public="1" set="method"><f a="param1">
	<c path="java.security.ProtectionDomain"/>
	<c path="java.security.PermissionCollection"/>
</f></get>
		<this_0 final="1" public="1">
			<c path="java.security.ProtectionDomain_3"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.security.ProtectionDomain_3"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.ProtectionDomain$3$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.ProtectionDomain_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/ProtectionDomain$2.class" module="java.security.ProtectionDomain" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.security.PermissionCollection"/></implements>
		<run public="1" set="method"><f a=""><c path="java.security.PermissionCollection"/></f></run>
		<this_0 final="1" public="1">
			<c path="java.security.ProtectionDomain"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.security.ProtectionDomain"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.ProtectionDomain$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.JavaSecurityAccess" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/JavaSecurityAccess.class" extern="1" interface="1">
		<doIntersectionPrivilege public="1" params="T" set="method">
			<f a="param1:param2:param3">
				<c path="java.security.PrivilegedAction"><c path="doIntersectionPrivilege.T"/></c>
				<c path="java.security.AccessControlContext"/>
				<c path="java.security.AccessControlContext"/>
				<c path="doIntersectionPrivilege.T"/>
			</f>
			<overloads><doIntersectionPrivilege public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.security.PrivilegedAction"><c path="doIntersectionPrivilege.T"/></c>
	<c path="java.security.AccessControlContext"/>
	<c path="doIntersectionPrivilege.T"/>
</f></doIntersectionPrivilege></overloads>
		</doIntersectionPrivilege>
		<meta>
			<m n=":native"><e>"sun.misc.JavaSecurityAccess"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.ProtectionDomain_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/ProtectionDomain$1.class" module="java.security.ProtectionDomain" extern="1">
		<implements path="java.sun.misc.JavaSecurityAccess"/>
		<doIntersectionPrivilege public="1" params="T" set="method">
			<f a="param1:param2:param3">
				<c path="java.security.PrivilegedAction"><c path="doIntersectionPrivilege.T"/></c>
				<c path="java.security.AccessControlContext"/>
				<c path="java.security.AccessControlContext"/>
				<c path="doIntersectionPrivilege.T"/>
			</f>
			<overloads><doIntersectionPrivilege public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.security.PrivilegedAction"><c path="doIntersectionPrivilege.T"/></c>
	<c path="java.security.AccessControlContext"/>
	<c path="doIntersectionPrivilege.T"/>
</f></doIntersectionPrivilege></overloads>
		</doIntersectionPrivilege>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.security.ProtectionDomain$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Dictionary" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Dictionary.class" extern="1" abstract="1">
		<size abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<keys abstract="1" public="1" set="method"><f a=""><c path="java.util.Enumeration"><c path="java.util.Dictionary.K"/></c></f></keys>
		<elements abstract="1" public="1" set="method"><f a=""><c path="java.util.Enumeration"><c path="java.util.Dictionary.V"/></c></f></elements>
		<get abstract="1" public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.Dictionary.V"/>
</f></get>
		<put abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.util.Dictionary.K"/>
	<c path="java.util.Dictionary.V"/>
	<c path="java.util.Dictionary.V"/>
</f></put>
		<remove abstract="1" public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.Dictionary.V"/>
</f></remove>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Dictionary"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Hashtable" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable.class" extern="1">
		<extends path="java.util.Dictionary">
			<c path="java.util.Hashtable.K"/>
			<c path="java.util.Hashtable.V"/>
		</extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Cloneable"/>
		<implements path="java.util.Map">
			<c path="java.util.Hashtable.K"/>
			<c path="java.util.Hashtable.V"/>
		</implements>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isEmpty>
		<keys public="1" set="method" override="1"><f a=""><c path="java.util.Enumeration"><c path="java.util.Hashtable.K"/></c></f></keys>
		<elements public="1" set="method" override="1"><f a=""><c path="java.util.Enumeration"><c path="java.util.Hashtable.V"/></c></f></elements>
		<contains public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<containsValue public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsValue>
		<containsKey public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsKey>
		<get public="1" set="method" override="1"><f a="param1">
	<d/>
	<c path="java.util.Hashtable.V"/>
</f></get>
		<rehash public="1" set="method"><f a=""><x path="Void"/></f></rehash>
		<put public="1" set="method" override="1"><f a="param1:param2">
	<c path="java.util.Hashtable.K"/>
	<c path="java.util.Hashtable.V"/>
	<c path="java.util.Hashtable.V"/>
</f></put>
		<remove public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<c path="java.util.Hashtable.V"/>
			</f>
			<overloads><remove public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></remove></overloads>
		</remove>
		<putAll public="1" set="method"><f a="param1">
	<c path="java.util.Map">
		<c path="java.util.Hashtable.K"/>
		<c path="java.util.Hashtable.V"/>
	</c>
	<x path="Void"/>
</f></putAll>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<keySet public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.Hashtable.K"/></c></f></keySet>
		<entrySet public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.Hashtable.K"/>
	<c path="java.util.Hashtable.V"/>
</c></c></f></entrySet>
		<values public="1" set="method"><f a=""><c path="java.util.Collection"><c path="java.util.Hashtable.V"/></c></f></values>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<getOrDefault public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.util.Hashtable.V"/>
	<c path="java.util.Hashtable.V"/>
</f></getOrDefault>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.BiConsumer">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></forEach>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Hashtable.V"/>
	</c>
	<x path="Void"/>
</f></replaceAll>
		<putIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Hashtable.K"/>
	<c path="java.util.Hashtable.V"/>
	<c path="java.util.Hashtable.V"/>
</f></putIfAbsent>
		<replace public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Hashtable.K"/>
				<c path="java.util.Hashtable.V"/>
				<c path="java.util.Hashtable.V"/>
				<x path="Bool"/>
			</f>
			<overloads><replace public="1" set="method"><f a="param1:param2">
	<c path="java.util.Hashtable.K"/>
	<c path="java.util.Hashtable.V"/>
	<c path="java.util.Hashtable.V"/>
</f></replace></overloads>
		</replace>
		<computeIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Hashtable.K"/>
	<c path="java.util.function.Function">
		<d/>
		<c path="java.util.Hashtable.V"/>
	</c>
	<c path="java.util.Hashtable.V"/>
</f></computeIfAbsent>
		<computeIfPresent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Hashtable.K"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Hashtable.V"/>
	</c>
	<c path="java.util.Hashtable.V"/>
</f></computeIfPresent>
		<compute public="1" set="method"><f a="param1:param2">
	<c path="java.util.Hashtable.K"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Hashtable.V"/>
	</c>
	<c path="java.util.Hashtable.V"/>
</f></compute>
		<merge public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Hashtable.K"/>
	<c path="java.util.Hashtable.V"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Hashtable.V"/>
	</c>
	<c path="java.util.Hashtable.V"/>
</f></merge>
		<new public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.util.Map">
		<c path="java.util.Hashtable.K"/>
		<c path="java.util.Hashtable.V"/>
	</c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a=""><x path="Void"/></f></new>
				<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Hashtable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Properties" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Properties.class" extern="1">
		<extends path="java.util.Hashtable">
			<d/>
			<d/>
		</extends>
		<setProperty public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<d/>
</f></setProperty>
		<load public="1" set="method">
			<f a="param1">
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<overloads><load public="1" set="method"><f a="param1">
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></load></overloads>
		</load>
		<save public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.OutputStream"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"/></meta>
		</save>
		<store public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.Writer"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><store public="1" set="method"><f a="param1:param2">
	<c path="java.io.OutputStream"/>
	<c path="String"/>
	<x path="Void"/>
</f></store></overloads>
		</store>
		<loadFromXML public="1" set="method"><f a="param1">
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></loadFromXML>
		<storeToXML public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.OutputStream"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><storeToXML public="1" set="method"><f a="param1:param2:param3">
	<c path="java.io.OutputStream"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></storeToXML></overloads>
		</storeToXML>
		<getProperty public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<overloads><getProperty public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></getProperty></overloads>
		</getProperty>
		<propertyNames public="1" set="method"><f a=""><c path="java.util.Enumeration"><d/></c></f></propertyNames>
		<stringPropertyNames public="1" set="method"><f a=""><c path="java.util.Set"><c path="String"/></c></f></stringPropertyNames>
		<list public="1" set="method">
			<f a="param1">
				<c path="java.io.PrintStream"/>
				<x path="Void"/>
			</f>
			<overloads><list public="1" set="method"><f a="param1">
	<c path="java.io.PrintWriter"/>
	<x path="Void"/>
</f></list></overloads>
		</list>
		<defaults public="1"><c path="java.util.Properties"/></defaults>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1">
	<c path="java.util.Properties"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Properties"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.Provider" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Provider.class" extern="1" abstract="1">
		<extends path="java.util.Properties"/>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getVersion public="1" set="method"><f a=""><x path="Float"/></f></getVersion>
		<getInfo public="1" set="method"><f a=""><c path="String"/></f></getInfo>
		<toString public="1" set="method" override="1"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<load public="1" set="method" override="1"><f a="param1">
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></load>
		<putAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Map">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></putAll>
		<entrySet public="1" set="method" override="1"><f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></c></f></entrySet>
		<keySet public="1" set="method" override="1"><f a=""><c path="java.util.Set"><d/></c></f></keySet>
		<values public="1" set="method" override="1"><f a=""><c path="java.util.Collection"><d/></c></f></values>
		<put public="1" set="method" override="1"><f a="param1:param2">
	<d/>
	<d/>
	<d/>
</f></put>
		<putIfAbsent public="1" set="method" override="1"><f a="param1:param2">
	<d/>
	<d/>
	<d/>
</f></putIfAbsent>
		<remove public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<d/>
			</f>
			<overloads><remove public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></remove></overloads>
		</remove>
		<replace public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<d/>
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<overloads><replace public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<d/>
</f></replace></overloads>
		</replace>
		<replaceAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></replaceAll>
		<compute public="1" set="method" override="1"><f a="param1:param2">
	<d/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<d/>
	</c>
	<d/>
</f></compute>
		<computeIfAbsent public="1" set="method" override="1"><f a="param1:param2">
	<d/>
	<c path="java.util.function.Function">
		<d/>
		<d/>
	</c>
	<d/>
</f></computeIfAbsent>
		<computeIfPresent public="1" set="method" override="1"><f a="param1:param2">
	<d/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<d/>
	</c>
	<d/>
</f></computeIfPresent>
		<merge public="1" set="method" override="1"><f a="param1:param2:param3">
	<d/>
	<d/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<d/>
	</c>
	<d/>
</f></merge>
		<get public="1" set="method" override="1"><f a="param1">
	<d/>
	<d/>
</f></get>
		<getOrDefault public="1" set="method" override="1"><f a="param1:param2">
	<d/>
	<d/>
	<d/>
</f></getOrDefault>
		<forEach public="1" set="method" override="1"><f a="param1">
	<c path="java.util.function.BiConsumer">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></forEach>
		<keys public="1" set="method" override="1"><f a=""><c path="java.util.Enumeration"><d/></c></f></keys>
		<elements public="1" set="method" override="1"><f a=""><c path="java.util.Enumeration"><d/></c></f></elements>
		<getProperty public="1" set="method" override="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></getProperty>
		<getService public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<c path="java.security.Provider_Service"/>
</f></getService>
		<getServices public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.security.Provider_Service"/></c></f></getServices>
		<putService public="1" set="method"><f a="param1">
	<c path="java.security.Provider_Service"/>
	<x path="Void"/>
</f></putService>
		<removeService public="1" set="method"><f a="param1">
	<c path="java.security.Provider_Service"/>
	<x path="Void"/>
</f></removeService>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<x path="Float"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.Provider"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.Provider_UString" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Provider$UString.class" module="java.security.Provider" extern="1">
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<string final="1" public="1"><c path="String"/></string>
		<lowerString final="1" public="1"><c path="String"/></lowerString>
		<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.Provider$UString"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.Provider_ServiceKey" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Provider$ServiceKey.class" module="java.security.Provider" extern="1">
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<matches public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></matches>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="java.security.Provider_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.Provider$ServiceKey"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.Provider_Service" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Provider$Service.class" module="java.security.Provider" extern="1">
		<addAttribute public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addAttribute>
		<getType final="1" public="1" set="method"><f a=""><c path="String"/></f></getType>
		<getAlgorithm final="1" public="1" set="method"><f a=""><c path="String"/></f></getAlgorithm>
		<getProvider final="1" public="1" set="method"><f a=""><c path="java.security.Provider"/></f></getProvider>
		<getClassName final="1" public="1" set="method"><f a=""><c path="String"/></f></getClassName>
		<getAttribute final="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
		<newInstance public="1" set="method"><f a="param1">
	<d/>
	<d/>
</f></newInstance>
		<supportsParameter public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></supportsParameter>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<c path="java.security.Provider"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.util.List"><c path="String"/></c>
				<c path="java.util.Map">
					<c path="String"/>
					<c path="String"/>
				</c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.security.Provider"/>
	<c path="java.security.Provider_1"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.security.Provider$Service"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.Provider_EngineDescription" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Provider$EngineDescription.class" module="java.security.Provider" extern="1">
		<getConstructorParameterClass public="1" set="method"><f a=""><c path="java.lang.Class"><d/></c></f></getConstructorParameterClass>
		<name final="1" public="1"><c path="String"/></name>
		<supportsParameter final="1" public="1"><x path="Bool"/></supportsParameter>
		<constructorParameterClassName final="1" public="1"><c path="String"/></constructorParameterClassName>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.Provider$EngineDescription"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.Provider_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Provider$1.class" module="java.security.Provider" extern="1"><meta>
	<m n=":native"><e>"java.security.Provider$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.security.PublicKey" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/PublicKey.class" extern="1" interface="1">
		<extends path="java.security.Key"/>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<meta>
			<m n=":native"><e>"java.security.PublicKey"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.Timestamp" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Timestamp.class" extern="1">
		<implements path="java.io.Serializable"/>
		<getTimestamp public="1" set="method"><f a=""><c path="java.util.Date"/></f></getTimestamp>
		<getSignerCertPath public="1" set="method"><f a=""><c path="java.security.cert.CertPath"/></f></getSignerCertPath>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Date"/>
	<c path="java.security.cert.CertPath"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.Timestamp"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.cert.CertPath" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/cert/CertPath.class" extern="1" abstract="1">
		<implements path="java.io.Serializable"/>
		<getType public="1" set="method"><f a=""><c path="String"/></f></getType>
		<getEncodings abstract="1" public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="String"/></c></f></getEncodings>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<getEncoded abstract="1" public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<overloads><getEncoded abstract="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></getEncoded></overloads>
		</getEncoded>
		<getCertificates abstract="1" public="1" set="method"><f a=""><c path="java.util.List"><c path="java.security.cert.Certificate"/></c></f></getCertificates>
		<writeReplace public="1" set="method"><f a=""><d/></f></writeReplace>
		<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.cert.CertPath"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.cert.CertPath_CertPathRep" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/cert/CertPath$CertPathRep.class" module="java.security.cert.CertPath" extern="1">
		<implements path="java.io.Serializable"/>
		<readResolve public="1" set="method"><f a=""><d/></f></readResolve>
		<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.cert.CertPath$CertPathRep"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.cert.Certificate" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/cert/Certificate.class" extern="1" abstract="1">
		<implements path="java.io.Serializable"/>
		<getType final="1" public="1" set="method"><f a=""><c path="String"/></f></getType>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<getEncoded abstract="1" public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getEncoded>
		<verify abstract="1" public="1" set="method">
			<f a="param1">
				<c path="java.security.PublicKey"/>
				<x path="Void"/>
			</f>
			<overloads>
				<verify public="1" set="method"><f a="param1:param2">
	<c path="java.security.PublicKey"/>
	<c path="java.security.Provider"/>
	<x path="Void"/>
</f></verify>
				<verify abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.security.PublicKey"/>
	<c path="String"/>
	<x path="Void"/>
</f></verify>
			</overloads>
		</verify>
		<toString abstract="1" public="1" set="method"><f a=""><c path="String"/></f></toString>
		<getPublicKey abstract="1" public="1" set="method"><f a=""><c path="java.security.PublicKey"/></f></getPublicKey>
		<writeReplace public="1" set="method"><f a=""><d/></f></writeReplace>
		<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.cert.Certificate"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.security.cert.Certificate_CertificateRep" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/security/cert/Certificate$CertificateRep.class" module="java.security.cert.Certificate" extern="1">
		<implements path="java.io.Serializable"/>
		<readResolve public="1" set="method"><f a=""><d/></f></readResolve>
		<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.security.cert.Certificate$CertificateRep"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.JarIndex" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/JarIndex.class" extern="1">
		<getJarIndex public="1" set="method" static="1">
			<f a="param1">
				<c path="java.util.jar.JarFile"/>
				<c path="java.sun.misc.JarIndex"/>
			</f>
			<overloads><getJarIndex public="1" set="method"><f a="param1:param2">
	<c path="java.util.jar.JarFile"/>
	<c path="java.sun.misc.MetaIndex"/>
	<c path="java.sun.misc.JarIndex"/>
</f></getJarIndex></overloads>
		</getJarIndex>
		<INDEX_NAME final="1" public="1" set="null" static="1"><c path="String"/></INDEX_NAME>
		<getJarFiles public="1" set="method"><f a=""><c path="java.NativeArray"><c path="String"/></c></f></getJarFiles>
		<get public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.LinkedList"><c path="String"/></c>
</f></get>
		<add public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<write public="1" set="method"><f a="param1">
	<c path="java.io.OutputStream"/>
	<x path="Void"/>
</f></write>
		<read public="1" set="method"><f a="param1">
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></read>
		<merge public="1" set="method"><f a="param1:param2">
	<c path="java.sun.misc.JarIndex"/>
	<c path="String"/>
	<x path="Void"/>
</f></merge>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="String"/></c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"sun.misc.JarIndex"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.JavaUtilZipFileAccess" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/JavaUtilZipFileAccess.class" extern="1" interface="1">
		<startsWithLocHeader public="1" set="method"><f a="param1">
	<c path="java.util.zip.ZipFile"/>
	<x path="Bool"/>
</f></startsWithLocHeader>
		<meta>
			<m n=":native"><e>"sun.misc.JavaUtilZipFileAccess"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.MetaIndex" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/MetaIndex.class" extern="1">
		<forJar public="1" set="method" static="1"><f a="param1">
	<c path="java.io.File"/>
	<c path="java.sun.misc.MetaIndex"/>
</f></forJar>
		<registerDirectory public="1" set="method" static="1"><f a="param1">
	<c path="java.io.File"/>
	<x path="Void"/>
</f></registerDirectory>
		<mayContain public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></mayContain>
		<meta>
			<m n=":native"><e>"sun.misc.MetaIndex"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.Resource" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/Resource.class" extern="1" abstract="1">
		<getName abstract="1" public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getURL abstract="1" public="1" set="method"><f a=""><c path="java.net.URL"/></f></getURL>
		<getCodeSourceURL abstract="1" public="1" set="method"><f a=""><c path="java.net.URL"/></f></getCodeSourceURL>
		<getInputStream abstract="1" public="1" set="method"><f a=""><c path="java.io.InputStream"/></f></getInputStream>
		<getContentLength abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></getContentLength>
		<getBytes public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getBytes>
		<getByteBuffer public="1" set="method"><f a=""><c path="java.nio.ByteBuffer"/></f></getByteBuffer>
		<getManifest public="1" set="method"><f a=""><c path="java.util.jar.Manifest"/></f></getManifest>
		<getCertificates public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.security.cert.Certificate"/></c></f></getCertificates>
		<getCodeSigners public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.security.CodeSigner"/></c></f></getCodeSigners>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"sun.misc.Resource"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.URLClassPath" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/URLClassPath.class" extern="1">
		<disableAllLookupCaches public="1" set="method" static="1"><f a=""><x path="Void"/></f></disableAllLookupCaches>
		<pathToURLs public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.NativeArray"><c path="java.net.URL"/></c>
</f></pathToURLs>
		<check public="1" set="method" static="1"><f a="param1">
	<c path="java.net.URL"/>
	<x path="Void"/>
</f></check>
		<USER_AGENT_JAVA_VERSION final="1" public="1" set="null" static="1"><c path="String"/></USER_AGENT_JAVA_VERSION>
		<JAVA_VERSION final="1" public="1" set="null" static="1"><c path="String"/></JAVA_VERSION>
		<closeLoaders public="1" set="method"><f a=""><c path="java.util.List"><c path="java.io.IOException"/></c></f></closeLoaders>
		<addURL public="1" set="method"><f a="param1">
	<c path="java.net.URL"/>
	<x path="Void"/>
</f></addURL>
		<getURLs public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.net.URL"/></c></f></getURLs>
		<findResource public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Bool"/>
	<c path="java.net.URL"/>
</f></findResource>
		<getResource public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<c path="java.sun.misc.Resource"/>
			</f>
			<overloads><getResource public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.sun.misc.Resource"/>
</f></getResource></overloads>
		</getResource>
		<findResources public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Bool"/>
	<c path="java.util.Enumeration"><c path="java.net.URL"/></c>
</f></findResources>
		<getResources public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<c path="java.util.Enumeration"><c path="java.sun.misc.Resource"/></c>
			</f>
			<overloads><getResources public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.Enumeration"><c path="java.sun.misc.Resource"/></c>
</f></getResources></overloads>
		</getResources>
		<initLookupCache public="1" set="method"><f a="param1">
	<c path="java.lang.ClassLoader"/>
	<x path="Void"/>
</f></initLookupCache>
		<knownToNotExist public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></knownToNotExist>
		<checkURL public="1" set="method"><f a="param1">
	<c path="java.net.URL"/>
	<c path="java.net.URL"/>
</f></checkURL>
		<urls public="1"><c path="java.util.Stack"><c path="java.net.URL"/></c></urls>
		<loaders public="1"><c path="java.util.ArrayList"><c path="java.sun.misc.URLClassPath_Loader"/></c></loaders>
		<lmap public="1"><c path="java.util.HashMap">
	<c path="String"/>
	<c path="java.sun.misc.URLClassPath_Loader"/>
</c></lmap>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.NativeArray"><c path="java.net.URL"/></c>
				<c path="java.net.URLStreamHandlerFactory"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.net.URL"/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"sun.misc.URLClassPath"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.URLClassPath_Loader" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/URLClassPath$Loader.class" module="java.sun.misc.URLClassPath" extern="1">
		<implements path="java.io.Closeable"/>
		<getBaseURL public="1" set="method"><f a=""><c path="java.net.URL"/></f></getBaseURL>
		<findResource public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Bool"/>
	<c path="java.net.URL"/>
</f></findResource>
		<getResource public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<c path="java.sun.misc.Resource"/>
			</f>
			<overloads><getResource public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.sun.misc.Resource"/>
</f></getResource></overloads>
		</getResource>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<getClassPath public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.net.URL"/></c></f></getClassPath>
		<new public="1" set="method"><f a="param1">
	<c path="java.net.URL"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.misc.URLClassPath$Loader"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.URLClassPath_Loader_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/URLClassPath$Loader$1.class" module="java.sun.misc.URLClassPath" extern="1">
		<extends path="java.sun.misc.Resource"/>
		<getName public="1" set="method" override="1"><f a=""><c path="String"/></f></getName>
		<getURL public="1" set="method" override="1"><f a=""><c path="java.net.URL"/></f></getURL>
		<getCodeSourceURL public="1" set="method" override="1"><f a=""><c path="java.net.URL"/></f></getCodeSourceURL>
		<getInputStream public="1" set="method" override="1"><f a=""><c path="java.io.InputStream"/></f></getInputStream>
		<getContentLength public="1" set="method" override="1"><f a=""><x path="Int"/></f></getContentLength>
		<val_name final="1" public="1">
			<c path="String"/>
			<meta><m n=":native"><e>"val$name"</e></m></meta>
		</val_name>
		<val_url final="1" public="1">
			<c path="java.net.URL"/>
			<meta><m n=":native"><e>"val$url"</e></m></meta>
		</val_url>
		<val_uc final="1" public="1">
			<c path="java.net.URLConnection"/>
			<meta><m n=":native"><e>"val$uc"</e></m></meta>
		</val_uc>
		<this_0 final="1" public="1">
			<c path="java.sun.misc.URLClassPath_Loader"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.sun.misc.URLClassPath_Loader"/>
	<c path="String"/>
	<c path="java.net.URL"/>
	<c path="java.net.URLConnection"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.misc.URLClassPath$Loader$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.URLClassPath_JarLoader" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/URLClassPath$JarLoader.class" module="java.sun.misc.URLClassPath" extern="1">
		<extends path="java.sun.misc.URLClassPath_Loader"/>
		<checkJar public="1" set="method" static="1"><f a="param1">
	<c path="java.util.jar.JarFile"/>
	<c path="java.util.jar.JarFile"/>
</f></checkJar>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<getJarFile public="1" set="method"><f a=""><c path="java.util.jar.JarFile"/></f></getJarFile>
		<getIndex public="1" set="method"><f a=""><c path="java.sun.misc.JarIndex"/></f></getIndex>
		<checkResource public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<x path="Bool"/>
	<c path="java.util.jar.JarEntry"/>
	<c path="java.sun.misc.Resource"/>
</f></checkResource>
		<validIndex public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></validIndex>
		<findResource public="1" set="method" override="1"><f a="param1:param2">
	<c path="String"/>
	<x path="Bool"/>
	<c path="java.net.URL"/>
</f></findResource>
		<getResource public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<c path="java.sun.misc.Resource"/>
			</f>
			<overloads><getResource public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<x path="Bool"/>
	<c path="java.util.Set"><c path="String"/></c>
	<c path="java.sun.misc.Resource"/>
</f></getResource></overloads>
		</getResource>
		<getClassPath public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.net.URL"/></c></f></getClassPath>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.net.URL"/>
	<c path="java.net.URLStreamHandler"/>
	<c path="java.util.HashMap">
		<c path="String"/>
		<c path="java.sun.misc.URLClassPath_Loader"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.misc.URLClassPath$JarLoader"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.URLClassPath_JarLoader_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/URLClassPath$JarLoader$3.class" module="java.sun.misc.URLClassPath" extern="1">
		<implements path="java.security.PrivilegedExceptionAction"><c path="java.sun.misc.URLClassPath_JarLoader"/></implements>
		<run public="1" set="method"><f a=""><c path="java.sun.misc.URLClassPath_JarLoader"/></f></run>
		<val_url final="1" public="1">
			<c path="java.net.URL"/>
			<meta><m n=":native"><e>"val$url"</e></m></meta>
		</val_url>
		<this_0 final="1" public="1">
			<c path="java.sun.misc.URLClassPath_JarLoader"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.sun.misc.URLClassPath_JarLoader"/>
	<c path="java.net.URL"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.misc.URLClassPath$JarLoader$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.URLClassPath_JarLoader_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/URLClassPath$JarLoader$2.class" module="java.sun.misc.URLClassPath" extern="1">
		<extends path="java.sun.misc.Resource"/>
		<getName public="1" set="method" override="1"><f a=""><c path="String"/></f></getName>
		<getURL public="1" set="method" override="1"><f a=""><c path="java.net.URL"/></f></getURL>
		<getCodeSourceURL public="1" set="method" override="1"><f a=""><c path="java.net.URL"/></f></getCodeSourceURL>
		<getInputStream public="1" set="method" override="1"><f a=""><c path="java.io.InputStream"/></f></getInputStream>
		<getContentLength public="1" set="method" override="1"><f a=""><x path="Int"/></f></getContentLength>
		<getManifest public="1" set="method" override="1"><f a=""><c path="java.util.jar.Manifest"/></f></getManifest>
		<getCertificates public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.security.cert.Certificate"/></c></f></getCertificates>
		<getCodeSigners public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.security.CodeSigner"/></c></f></getCodeSigners>
		<val_name final="1" public="1">
			<c path="String"/>
			<meta><m n=":native"><e>"val$name"</e></m></meta>
		</val_name>
		<val_url final="1" public="1">
			<c path="java.net.URL"/>
			<meta><m n=":native"><e>"val$url"</e></m></meta>
		</val_url>
		<val_entry final="1" public="1">
			<c path="java.util.jar.JarEntry"/>
			<meta><m n=":native"><e>"val$entry"</e></m></meta>
		</val_entry>
		<this_0 final="1" public="1">
			<c path="java.sun.misc.URLClassPath_JarLoader"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.sun.misc.URLClassPath_JarLoader"/>
	<c path="String"/>
	<c path="java.net.URL"/>
	<c path="java.util.jar.JarEntry"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.misc.URLClassPath$JarLoader$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.URLClassPath_JarLoader_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/URLClassPath$JarLoader$1.class" module="java.sun.misc.URLClassPath" extern="1">
		<implements path="java.security.PrivilegedExceptionAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<this_0 final="1" public="1">
			<c path="java.sun.misc.URLClassPath_JarLoader"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.sun.misc.URLClassPath_JarLoader"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.misc.URLClassPath$JarLoader$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.URLClassPath_FileLoader" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/URLClassPath$FileLoader.class" module="java.sun.misc.URLClassPath" extern="1">
		<extends path="java.sun.misc.URLClassPath_Loader"/>
		<findResource public="1" set="method" override="1"><f a="param1:param2">
	<c path="String"/>
	<x path="Bool"/>
	<c path="java.net.URL"/>
</f></findResource>
		<getResource public="1" set="method" override="1"><f a="param1:param2">
	<c path="String"/>
	<x path="Bool"/>
	<c path="java.sun.misc.Resource"/>
</f></getResource>
		<new public="1" set="method"><f a="param1">
	<c path="java.net.URL"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.misc.URLClassPath$FileLoader"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.URLClassPath_FileLoader_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/URLClassPath$FileLoader$1.class" module="java.sun.misc.URLClassPath" extern="1">
		<extends path="java.sun.misc.Resource"/>
		<getName public="1" set="method" override="1"><f a=""><c path="String"/></f></getName>
		<getURL public="1" set="method" override="1"><f a=""><c path="java.net.URL"/></f></getURL>
		<getCodeSourceURL public="1" set="method" override="1"><f a=""><c path="java.net.URL"/></f></getCodeSourceURL>
		<getInputStream public="1" set="method" override="1"><f a=""><c path="java.io.InputStream"/></f></getInputStream>
		<getContentLength public="1" set="method" override="1"><f a=""><x path="Int"/></f></getContentLength>
		<val_name final="1" public="1">
			<c path="String"/>
			<meta><m n=":native"><e>"val$name"</e></m></meta>
		</val_name>
		<val_url final="1" public="1">
			<c path="java.net.URL"/>
			<meta><m n=":native"><e>"val$url"</e></m></meta>
		</val_url>
		<val_file final="1" public="1">
			<c path="java.io.File"/>
			<meta><m n=":native"><e>"val$file"</e></m></meta>
		</val_file>
		<this_0 final="1" public="1">
			<c path="java.sun.misc.URLClassPath_FileLoader"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.sun.misc.URLClassPath_FileLoader"/>
	<c path="String"/>
	<c path="java.net.URL"/>
	<c path="java.io.File"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.misc.URLClassPath$FileLoader$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.URLClassPath_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/URLClassPath$3.class" module="java.sun.misc.URLClassPath" extern="1">
		<implements path="java.security.PrivilegedExceptionAction"><c path="java.sun.misc.URLClassPath_Loader"/></implements>
		<run public="1" set="method"><f a=""><c path="java.sun.misc.URLClassPath_Loader"/></f></run>
		<val_url final="1" public="1">
			<c path="java.net.URL"/>
			<meta><m n=":native"><e>"val$url"</e></m></meta>
		</val_url>
		<this_0 final="1" public="1">
			<c path="java.sun.misc.URLClassPath"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.sun.misc.URLClassPath"/>
	<c path="java.net.URL"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.misc.URLClassPath$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.URLClassPath_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/URLClassPath$2.class" module="java.sun.misc.URLClassPath" extern="1">
		<implements path="java.util.Enumeration"><c path="java.sun.misc.Resource"/></implements>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<nextElement public="1" set="method"><f a=""><c path="java.sun.misc.Resource"/></f></nextElement>
		<val_name final="1" public="1">
			<c path="String"/>
			<meta><m n=":native"><e>"val$name"</e></m></meta>
		</val_name>
		<val_check final="1" public="1">
			<x path="Bool"/>
			<meta><m n=":native"><e>"val$check"</e></m></meta>
		</val_check>
		<this_0 final="1" public="1">
			<c path="java.sun.misc.URLClassPath"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.sun.misc.URLClassPath"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.misc.URLClassPath$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.misc.URLClassPath_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/misc/URLClassPath$1.class" module="java.sun.misc.URLClassPath" extern="1">
		<implements path="java.util.Enumeration"><c path="java.net.URL"/></implements>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<nextElement public="1" set="method"><f a=""><c path="java.net.URL"/></f></nextElement>
		<val_name final="1" public="1">
			<c path="String"/>
			<meta><m n=":native"><e>"val$name"</e></m></meta>
		</val_name>
		<val_check final="1" public="1">
			<x path="Bool"/>
			<meta><m n=":native"><e>"val$check"</e></m></meta>
		</val_check>
		<this_0 final="1" public="1">
			<c path="java.sun.misc.URLClassPath"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.sun.misc.URLClassPath"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.misc.URLClassPath$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.ConstantPool" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/ConstantPool.class" extern="1">
		<getSize public="1" set="method"><f a=""><x path="Int"/></f></getSize>
		<getClassAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.Class"><d/></c>
</f></getClassAt>
		<getClassAtIfLoaded public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.Class"><d/></c>
</f></getClassAtIfLoaded>
		<getMethodAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.reflect.Member"/>
</f></getMethodAt>
		<getMethodAtIfLoaded public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.reflect.Member"/>
</f></getMethodAtIfLoaded>
		<getFieldAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.reflect.Field"/>
</f></getFieldAt>
		<getFieldAtIfLoaded public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.lang.reflect.Field"/>
</f></getFieldAtIfLoaded>
		<getMemberRefInfoAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.NativeArray"><c path="String"/></c>
</f></getMemberRefInfoAt>
		<getIntAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getIntAt>
		<getLongAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></getLongAt>
		<getFloatAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Single"/>
</f></getFloatAt>
		<getDoubleAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Float"/>
</f></getDoubleAt>
		<getStringAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="String"/>
</f></getStringAt>
		<getUTF8At public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="String"/>
</f></getUTF8At>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"sun.reflect.ConstantPool"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.ConstructorAccessor" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/ConstructorAccessor.class" extern="1" interface="1">
		<newInstance public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><d/></c>
	<d/>
</f></newInstance>
		<meta>
			<m n=":native"><e>"sun.reflect.ConstructorAccessor"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.FieldAccessor" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/FieldAccessor.class" extern="1" interface="1">
		<get public="1" set="method"><f a="param1">
	<d/>
	<d/>
</f></get>
		<getBoolean public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></getBoolean>
		<getByte public="1" set="method"><f a="param1">
	<d/>
	<t path="java.types.Int8"/>
</f></getByte>
		<getChar public="1" set="method"><f a="param1">
	<d/>
	<t path="java.types.Char16"/>
</f></getChar>
		<getShort public="1" set="method"><f a="param1">
	<d/>
	<t path="java.types.Int16"/>
</f></getShort>
		<getInt public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></getInt>
		<getLong public="1" set="method"><f a="param1">
	<d/>
	<x path="haxe.Int64"/>
</f></getLong>
		<getFloat public="1" set="method"><f a="param1">
	<d/>
	<x path="Single"/>
</f></getFloat>
		<getDouble public="1" set="method"><f a="param1">
	<d/>
	<x path="Float"/>
</f></getDouble>
		<set public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Void"/>
</f></set>
		<setBoolean public="1" set="method"><f a="param1:param2">
	<d/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setBoolean>
		<setByte public="1" set="method"><f a="param1:param2">
	<d/>
	<t path="java.types.Int8"/>
	<x path="Void"/>
</f></setByte>
		<setChar public="1" set="method"><f a="param1:param2">
	<d/>
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></setChar>
		<setShort public="1" set="method"><f a="param1:param2">
	<d/>
	<t path="java.types.Int16"/>
	<x path="Void"/>
</f></setShort>
		<setInt public="1" set="method"><f a="param1:param2">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt>
		<setLong public="1" set="method"><f a="param1:param2">
	<d/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setLong>
		<setFloat public="1" set="method"><f a="param1:param2">
	<d/>
	<x path="Single"/>
	<x path="Void"/>
</f></setFloat>
		<setDouble public="1" set="method"><f a="param1:param2">
	<d/>
	<x path="Float"/>
	<x path="Void"/>
</f></setDouble>
		<meta>
			<m n=":native"><e>"sun.reflect.FieldAccessor"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.LangReflectAccess" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/LangReflectAccess.class" extern="1" interface="1">
		<newField public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7">
	<c path="java.lang.Class"><d/></c>
	<c path="String"/>
	<c path="java.lang.Class"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.lang.reflect.Field"/>
</f></newField>
		<newMethod public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8:param9:param10:param11">
	<c path="java.lang.Class"><d/></c>
	<c path="String"/>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<c path="java.lang.Class"><d/></c>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.lang.reflect.Method"/>
</f></newMethod>
		<newConstructor public="1" params="T" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8">
	<c path="java.lang.Class"><c path="newConstructor.T"/></c>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.lang.reflect.Constructor"><c path="newConstructor.T"/></c>
</f></newConstructor>
		<getMethodAccessor public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Method"/>
	<c path="java.sun.reflect.MethodAccessor"/>
</f></getMethodAccessor>
		<setMethodAccessor public="1" set="method"><f a="param1:param2">
	<c path="java.lang.reflect.Method"/>
	<c path="java.sun.reflect.MethodAccessor"/>
	<x path="Void"/>
</f></setMethodAccessor>
		<getConstructorAccessor public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Constructor"><d/></c>
	<c path="java.sun.reflect.ConstructorAccessor"/>
</f></getConstructorAccessor>
		<setConstructorAccessor public="1" set="method"><f a="param1:param2">
	<c path="java.lang.reflect.Constructor"><d/></c>
	<c path="java.sun.reflect.ConstructorAccessor"/>
	<x path="Void"/>
</f></setConstructorAccessor>
		<getExecutableTypeAnnotationBytes public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Executable"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></getExecutableTypeAnnotationBytes>
		<getConstructorSlot public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Constructor"><d/></c>
	<x path="Int"/>
</f></getConstructorSlot>
		<getConstructorSignature public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Constructor"><d/></c>
	<c path="String"/>
</f></getConstructorSignature>
		<getConstructorAnnotations public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Constructor"><d/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></getConstructorAnnotations>
		<getConstructorParameterAnnotations public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Constructor"><d/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></getConstructorParameterAnnotations>
		<copyMethod public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Method"/>
	<c path="java.lang.reflect.Method"/>
</f></copyMethod>
		<copyField public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Field"/>
	<c path="java.lang.reflect.Field"/>
</f></copyField>
		<copyConstructor public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.reflect.Constructor"><c path="copyConstructor.T"/></c>
	<c path="java.lang.reflect.Constructor"><c path="copyConstructor.T"/></c>
</f></copyConstructor>
		<meta>
			<m n=":native"><e>"sun.reflect.LangReflectAccess"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.MethodAccessor" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/MethodAccessor.class" extern="1" interface="1">
		<invoke public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.NativeArray"><d/></c>
	<d/>
</f></invoke>
		<meta>
			<m n=":native"><e>"sun.reflect.MethodAccessor"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.ReflectionFactory" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/ReflectionFactory.class" extern="1">
		<getReflectionFactory public="1" set="method" static="1"><f a=""><c path="java.sun.reflect.ReflectionFactory"/></f></getReflectionFactory>
		<inflationThreshold public="1" set="method" static="1"><f a=""><x path="Int"/></f></inflationThreshold>
		<setLangReflectAccess public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.LangReflectAccess"/>
	<x path="Void"/>
</f></setLangReflectAccess>
		<newFieldAccessor public="1" set="method"><f a="param1:param2">
	<c path="java.lang.reflect.Field"/>
	<x path="Bool"/>
	<c path="java.sun.reflect.FieldAccessor"/>
</f></newFieldAccessor>
		<newMethodAccessor public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Method"/>
	<c path="java.sun.reflect.MethodAccessor"/>
</f></newMethodAccessor>
		<newConstructorAccessor public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Constructor"><d/></c>
	<c path="java.sun.reflect.ConstructorAccessor"/>
</f></newConstructorAccessor>
		<newField public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7">
	<c path="java.lang.Class"><d/></c>
	<c path="String"/>
	<c path="java.lang.Class"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.lang.reflect.Field"/>
</f></newField>
		<newMethod public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8:param9:param10:param11">
	<c path="java.lang.Class"><d/></c>
	<c path="String"/>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<c path="java.lang.Class"><d/></c>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.lang.reflect.Method"/>
</f></newMethod>
		<newConstructor public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8">
	<c path="java.lang.Class"><d/></c>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.lang.reflect.Constructor"><d/></c>
</f></newConstructor>
		<getMethodAccessor public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Method"/>
	<c path="java.sun.reflect.MethodAccessor"/>
</f></getMethodAccessor>
		<setMethodAccessor public="1" set="method"><f a="param1:param2">
	<c path="java.lang.reflect.Method"/>
	<c path="java.sun.reflect.MethodAccessor"/>
	<x path="Void"/>
</f></setMethodAccessor>
		<getConstructorAccessor public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Constructor"><d/></c>
	<c path="java.sun.reflect.ConstructorAccessor"/>
</f></getConstructorAccessor>
		<setConstructorAccessor public="1" set="method"><f a="param1:param2">
	<c path="java.lang.reflect.Constructor"><d/></c>
	<c path="java.sun.reflect.ConstructorAccessor"/>
	<x path="Void"/>
</f></setConstructorAccessor>
		<copyMethod public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Method"/>
	<c path="java.lang.reflect.Method"/>
</f></copyMethod>
		<copyField public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Field"/>
	<c path="java.lang.reflect.Field"/>
</f></copyField>
		<copyConstructor public="1" params="T" set="method"><f a="param1">
	<c path="java.lang.reflect.Constructor"><c path="copyConstructor.T"/></c>
	<c path="java.lang.reflect.Constructor"><c path="copyConstructor.T"/></c>
</f></copyConstructor>
		<getExecutableTypeAnnotationBytes public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Executable"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></getExecutableTypeAnnotationBytes>
		<newConstructorForSerialization public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.reflect.Constructor"><d/></c>
	<c path="java.lang.reflect.Constructor"><d/></c>
</f></newConstructorForSerialization>
		<meta>
			<m n=":native"><e>"sun.reflect.ReflectionFactory"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.ReflectionFactory_GetReflectionFactoryAction" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/ReflectionFactory$GetReflectionFactoryAction.class" module="java.sun.reflect.ReflectionFactory" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.sun.reflect.ReflectionFactory"/></implements>
		<run public="1" set="method"><f a=""><c path="java.sun.reflect.ReflectionFactory"/></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"sun.reflect.ReflectionFactory$GetReflectionFactoryAction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.ReflectionFactory_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/ReflectionFactory$1.class" module="java.sun.reflect.ReflectionFactory" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"sun.reflect.ReflectionFactory$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.annotation.AnnotationType" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/annotation/AnnotationType.class" extern="1">
		<getInstance public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
	<c path="java.sun.reflect.annotation.AnnotationType"/>
</f></getInstance>
		<invocationHandlerReturnType public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.Class"><d/></c>
</f></invocationHandlerReturnType>
		<memberTypes public="1" set="method"><f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="java.lang.Class"><d/></c>
</c></f></memberTypes>
		<members public="1" set="method"><f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="java.lang.reflect.Method"/>
</c></f></members>
		<memberDefaults public="1" set="method"><f a=""><c path="java.util.Map">
	<c path="String"/>
	<d/>
</c></f></memberDefaults>
		<retention public="1" set="method"><f a=""><e path="java.lang.annotation.RetentionPolicy"/></f></retention>
		<isInherited public="1" set="method"><f a=""><x path="Bool"/></f></isInherited>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"sun.reflect.annotation.AnnotationType"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.annotation.AnnotationType_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/annotation/AnnotationType$1.class" module="java.sun.reflect.annotation.AnnotationType" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.NativeArray"><c path="java.lang.reflect.Method"/></c></implements>
		<run public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Method"/></c></f></run>
		<val_annotationClass final="1" public="1">
			<c path="java.lang.Class"><d/></c>
			<meta><m n=":native"><e>"val$annotationClass"</e></m></meta>
		</val_annotationClass>
		<this_0 final="1" public="1">
			<c path="java.sun.reflect.annotation.AnnotationType"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.sun.reflect.annotation.AnnotationType"/>
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.reflect.annotation.AnnotationType$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.factory.GenericsFactory" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/factory/GenericsFactory.class" extern="1" interface="1">
		<makeTypeVariable public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FieldTypeSignature"/></c>
	<c path="java.lang.reflect.TypeVariable"><d/></c>
</f></makeTypeVariable>
		<makeParameterizedType public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.reflect.Type"/>
	<c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c>
	<c path="java.lang.reflect.Type"/>
	<c path="java.lang.reflect.ParameterizedType"/>
</f></makeParameterizedType>
		<findTypeVariable public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.lang.reflect.TypeVariable"><d/></c>
</f></findTypeVariable>
		<makeWildcard public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FieldTypeSignature"/></c>
	<c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FieldTypeSignature"/></c>
	<c path="java.lang.reflect.WildcardType"/>
</f></makeWildcard>
		<makeNamedType public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.lang.reflect.Type"/>
</f></makeNamedType>
		<makeArrayType public="1" set="method"><f a="param1">
	<c path="java.lang.reflect.Type"/>
	<c path="java.lang.reflect.Type"/>
</f></makeArrayType>
		<makeByte public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></makeByte>
		<makeBool public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></makeBool>
		<makeShort public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></makeShort>
		<makeChar public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></makeChar>
		<makeInt public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></makeInt>
		<makeLong public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></makeLong>
		<makeFloat public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></makeFloat>
		<makeDouble public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></makeDouble>
		<makeVoid public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></makeVoid>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.factory.GenericsFactory"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.repository.AbstractRepository" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/repository/AbstractRepository.class" extern="1" abstract="1">
		<getTree public="1" set="method"><f a=""><c path="java.sun.reflect.generics.repository.AbstractRepository.T"/></f></getTree>
		<getReifier public="1" set="method"><f a=""><c path="java.sun.reflect.generics.visitor.Reifier"/></f></getReifier>
		<parse abstract="1" public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.sun.reflect.generics.repository.AbstractRepository.T"/>
</f></parse>
		<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.sun.reflect.generics.factory.GenericsFactory"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.repository.AbstractRepository"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.repository.GenericDeclRepository" params="S" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/repository/GenericDeclRepository.class" extern="1" abstract="1">
		<extends path="java.sun.reflect.generics.repository.AbstractRepository"><c path="java.sun.reflect.generics.repository.GenericDeclRepository.S"/></extends>
		<getTypeParameters public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.TypeVariable"><d/></c></c></f></getTypeParameters>
		<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.sun.reflect.generics.factory.GenericsFactory"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.repository.GenericDeclRepository"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.repository.ConstructorRepository" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/repository/ConstructorRepository.class" extern="1">
		<extends path="java.sun.reflect.generics.repository.GenericDeclRepository"><c path="java.sun.reflect.generics.tree.MethodTypeSignature"/></extends>
		<make public="1" set="method" static="1"><f a="param1:param2">
	<c path="String"/>
	<c path="java.sun.reflect.generics.factory.GenericsFactory"/>
	<c path="java.sun.reflect.generics.repository.ConstructorRepository"/>
</f></make>
		<parse public="1" set="method" override="1"><f a="param1">
	<c path="String"/>
	<c path="java.sun.reflect.generics.tree.MethodTypeSignature"/>
</f></parse>
		<getParameterTypes public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f></getParameterTypes>
		<getExceptionTypes public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f></getExceptionTypes>
		<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.sun.reflect.generics.factory.GenericsFactory"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.repository.ConstructorRepository"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.repository.MethodRepository" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/repository/MethodRepository.class" extern="1">
		<extends path="java.sun.reflect.generics.repository.ConstructorRepository"/>
		<make public="1" set="method" static="1"><f a="param1:param2">
	<c path="String"/>
	<c path="java.sun.reflect.generics.factory.GenericsFactory"/>
	<c path="java.sun.reflect.generics.repository.MethodRepository"/>
</f></make>
		<getReturnType public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></getReturnType>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.repository.MethodRepository"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.Tree" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/Tree.class" extern="1" interface="1"><meta>
	<m n=":native"><e>"sun.reflect.generics.tree.Tree"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.sun.reflect.generics.tree.TypeTree" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/TypeTree.class" extern="1" interface="1">
		<extends path="java.sun.reflect.generics.tree.Tree"/>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.TypeTree"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.ReturnType" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/ReturnType.class" extern="1" interface="1">
		<extends path="java.sun.reflect.generics.tree.TypeTree"/>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.ReturnType"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.TypeSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/TypeSignature.class" extern="1" interface="1">
		<extends path="java.sun.reflect.generics.tree.ReturnType"/>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.TypeSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.BaseType" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/BaseType.class" extern="1" interface="1">
		<extends path="java.sun.reflect.generics.tree.TypeSignature"/>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.BaseType"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.TypeArgument" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/TypeArgument.class" extern="1" interface="1">
		<extends path="java.sun.reflect.generics.tree.TypeTree"/>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.TypeArgument"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.FieldTypeSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/FieldTypeSignature.class" extern="1" interface="1">
		<extends path="java.sun.reflect.generics.tree.BaseType"/>
		<extends path="java.sun.reflect.generics.tree.TypeSignature"/>
		<extends path="java.sun.reflect.generics.tree.TypeArgument"/>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.FieldTypeSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.ArrayTypeSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/ArrayTypeSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.FieldTypeSignature"/>
		<make public="1" set="method" static="1"><f a="param1">
	<c path="java.sun.reflect.generics.tree.TypeSignature"/>
	<c path="java.sun.reflect.generics.tree.ArrayTypeSignature"/>
</f></make>
		<getComponentType public="1" set="method"><f a=""><c path="java.sun.reflect.generics.tree.TypeSignature"/></f></getComponentType>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.ArrayTypeSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.BooleanSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/BooleanSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.BaseType"/>
		<make public="1" set="method" static="1"><f a=""><c path="java.sun.reflect.generics.tree.BooleanSignature"/></f></make>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.BooleanSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.BottomSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/BottomSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.FieldTypeSignature"/>
		<make public="1" set="method" static="1"><f a=""><c path="java.sun.reflect.generics.tree.BottomSignature"/></f></make>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.BottomSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.ByteSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/ByteSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.BaseType"/>
		<make public="1" set="method" static="1"><f a=""><c path="java.sun.reflect.generics.tree.ByteSignature"/></f></make>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.ByteSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.CharSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/CharSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.BaseType"/>
		<make public="1" set="method" static="1"><f a=""><c path="java.sun.reflect.generics.tree.CharSignature"/></f></make>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.CharSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.Signature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/Signature.class" extern="1" interface="1">
		<extends path="java.sun.reflect.generics.tree.Tree"/>
		<getFormalTypeParameters public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FormalTypeParameter"/></c></f></getFormalTypeParameters>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.Signature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.ClassSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/ClassSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.Signature"/>
		<make public="1" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FormalTypeParameter"/></c>
	<c path="java.sun.reflect.generics.tree.ClassTypeSignature"/>
	<c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.ClassTypeSignature"/></c>
	<c path="java.sun.reflect.generics.tree.ClassSignature"/>
</f></make>
		<getFormalTypeParameters public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FormalTypeParameter"/></c></f></getFormalTypeParameters>
		<getSuperclass public="1" set="method"><f a=""><c path="java.sun.reflect.generics.tree.ClassTypeSignature"/></f></getSuperclass>
		<getSuperInterfaces public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.ClassTypeSignature"/></c></f></getSuperInterfaces>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.Visitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.ClassSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.ClassTypeSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/ClassTypeSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.FieldTypeSignature"/>
		<make public="1" set="method" static="1"><f a="param1">
	<c path="java.util.List"><c path="java.sun.reflect.generics.tree.SimpleClassTypeSignature"/></c>
	<c path="java.sun.reflect.generics.tree.ClassTypeSignature"/>
</f></make>
		<getPath public="1" set="method"><f a=""><c path="java.util.List"><c path="java.sun.reflect.generics.tree.SimpleClassTypeSignature"/></c></f></getPath>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.ClassTypeSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.DoubleSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/DoubleSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.BaseType"/>
		<make public="1" set="method" static="1"><f a=""><c path="java.sun.reflect.generics.tree.DoubleSignature"/></f></make>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.DoubleSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.FloatSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/FloatSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.BaseType"/>
		<make public="1" set="method" static="1"><f a=""><c path="java.sun.reflect.generics.tree.FloatSignature"/></f></make>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.FloatSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.FormalTypeParameter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/FormalTypeParameter.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.TypeTree"/>
		<make public="1" set="method" static="1"><f a="param1:param2">
	<c path="String"/>
	<c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FieldTypeSignature"/></c>
	<c path="java.sun.reflect.generics.tree.FormalTypeParameter"/>
</f></make>
		<getBounds public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FieldTypeSignature"/></c></f></getBounds>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.FormalTypeParameter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.IntSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/IntSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.BaseType"/>
		<make public="1" set="method" static="1"><f a=""><c path="java.sun.reflect.generics.tree.IntSignature"/></f></make>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.IntSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.LongSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/LongSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.BaseType"/>
		<make public="1" set="method" static="1"><f a=""><c path="java.sun.reflect.generics.tree.LongSignature"/></f></make>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.LongSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.MethodTypeSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/MethodTypeSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.Signature"/>
		<make public="1" set="method" static="1"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FormalTypeParameter"/></c>
	<c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.TypeSignature"/></c>
	<c path="java.sun.reflect.generics.tree.ReturnType"/>
	<c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FieldTypeSignature"/></c>
	<c path="java.sun.reflect.generics.tree.MethodTypeSignature"/>
</f></make>
		<getFormalTypeParameters public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FormalTypeParameter"/></c></f></getFormalTypeParameters>
		<getParameterTypes public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.TypeSignature"/></c></f></getParameterTypes>
		<getReturnType public="1" set="method"><f a=""><c path="java.sun.reflect.generics.tree.ReturnType"/></f></getReturnType>
		<getExceptionTypes public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FieldTypeSignature"/></c></f></getExceptionTypes>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.Visitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.MethodTypeSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.ShortSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/ShortSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.BaseType"/>
		<make public="1" set="method" static="1"><f a=""><c path="java.sun.reflect.generics.tree.ShortSignature"/></f></make>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.ShortSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.SimpleClassTypeSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/SimpleClassTypeSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.FieldTypeSignature"/>
		<make public="1" set="method" static="1"><f a="param1:param2:param3">
	<c path="String"/>
	<x path="Bool"/>
	<c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.TypeArgument"/></c>
	<c path="java.sun.reflect.generics.tree.SimpleClassTypeSignature"/>
</f></make>
		<getDollar public="1" set="method"><f a=""><x path="Bool"/></f></getDollar>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<getTypeArguments public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.TypeArgument"/></c></f></getTypeArguments>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.SimpleClassTypeSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.TypeVariableSignature" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/TypeVariableSignature.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.FieldTypeSignature"/>
		<make public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.sun.reflect.generics.tree.TypeVariableSignature"/>
</f></make>
		<getIdentifier public="1" set="method"><f a=""><c path="String"/></f></getIdentifier>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.TypeVariableSignature"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.VoidDescriptor" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/VoidDescriptor.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.ReturnType"/>
		<make public="1" set="method" static="1"><f a=""><c path="java.sun.reflect.generics.tree.VoidDescriptor"/></f></make>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.VoidDescriptor"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.tree.Wildcard" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/tree/Wildcard.class" extern="1">
		<implements path="java.sun.reflect.generics.tree.TypeArgument"/>
		<make public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FieldTypeSignature"/></c>
	<c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FieldTypeSignature"/></c>
	<c path="java.sun.reflect.generics.tree.Wildcard"/>
</f></make>
		<getUpperBounds public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FieldTypeSignature"/></c></f></getUpperBounds>
		<getLowerBounds public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.sun.reflect.generics.tree.FieldTypeSignature"/></c></f></getLowerBounds>
		<accept public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><d/></c>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.tree.Wildcard"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.visitor.TypeTreeVisitor" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/visitor/TypeTreeVisitor.class" extern="1" interface="1">
		<getResult public="1" set="method"><f a=""><c path="java.sun.reflect.generics.visitor.TypeTreeVisitor.T"/></f></getResult>
		<visitFormalTypeParameter public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.FormalTypeParameter"/>
	<x path="Void"/>
</f></visitFormalTypeParameter>
		<visitClassTypeSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.ClassTypeSignature"/>
	<x path="Void"/>
</f></visitClassTypeSignature>
		<visitArrayTypeSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.ArrayTypeSignature"/>
	<x path="Void"/>
</f></visitArrayTypeSignature>
		<visitTypeVariableSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.TypeVariableSignature"/>
	<x path="Void"/>
</f></visitTypeVariableSignature>
		<visitWildcard public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.Wildcard"/>
	<x path="Void"/>
</f></visitWildcard>
		<visitSimpleClassTypeSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.SimpleClassTypeSignature"/>
	<x path="Void"/>
</f></visitSimpleClassTypeSignature>
		<visitBottomSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.BottomSignature"/>
	<x path="Void"/>
</f></visitBottomSignature>
		<visitByteSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.ByteSignature"/>
	<x path="Void"/>
</f></visitByteSignature>
		<visitBooleanSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.BooleanSignature"/>
	<x path="Void"/>
</f></visitBooleanSignature>
		<visitShortSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.ShortSignature"/>
	<x path="Void"/>
</f></visitShortSignature>
		<visitCharSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.CharSignature"/>
	<x path="Void"/>
</f></visitCharSignature>
		<visitIntSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.IntSignature"/>
	<x path="Void"/>
</f></visitIntSignature>
		<visitLongSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.LongSignature"/>
	<x path="Void"/>
</f></visitLongSignature>
		<visitFloatSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.FloatSignature"/>
	<x path="Void"/>
</f></visitFloatSignature>
		<visitDoubleSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.DoubleSignature"/>
	<x path="Void"/>
</f></visitDoubleSignature>
		<visitVoidDescriptor public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.VoidDescriptor"/>
	<x path="Void"/>
</f></visitVoidDescriptor>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.visitor.TypeTreeVisitor"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.visitor.Reifier" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/visitor/Reifier.class" extern="1">
		<implements path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><c path="java.lang.reflect.Type"/></implements>
		<make public="1" set="method" static="1"><f a="param1">
	<c path="java.sun.reflect.generics.factory.GenericsFactory"/>
	<c path="java.sun.reflect.generics.visitor.Reifier"/>
</f></make>
		<getResult public="1" set="method"><f a=""><c path="java.lang.reflect.Type"/></f></getResult>
		<visitFormalTypeParameter public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.FormalTypeParameter"/>
	<x path="Void"/>
</f></visitFormalTypeParameter>
		<visitClassTypeSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.ClassTypeSignature"/>
	<x path="Void"/>
</f></visitClassTypeSignature>
		<visitArrayTypeSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.ArrayTypeSignature"/>
	<x path="Void"/>
</f></visitArrayTypeSignature>
		<visitTypeVariableSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.TypeVariableSignature"/>
	<x path="Void"/>
</f></visitTypeVariableSignature>
		<visitWildcard public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.Wildcard"/>
	<x path="Void"/>
</f></visitWildcard>
		<visitSimpleClassTypeSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.SimpleClassTypeSignature"/>
	<x path="Void"/>
</f></visitSimpleClassTypeSignature>
		<visitBottomSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.BottomSignature"/>
	<x path="Void"/>
</f></visitBottomSignature>
		<visitByteSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.ByteSignature"/>
	<x path="Void"/>
</f></visitByteSignature>
		<visitBooleanSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.BooleanSignature"/>
	<x path="Void"/>
</f></visitBooleanSignature>
		<visitShortSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.ShortSignature"/>
	<x path="Void"/>
</f></visitShortSignature>
		<visitCharSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.CharSignature"/>
	<x path="Void"/>
</f></visitCharSignature>
		<visitIntSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.IntSignature"/>
	<x path="Void"/>
</f></visitIntSignature>
		<visitLongSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.LongSignature"/>
	<x path="Void"/>
</f></visitLongSignature>
		<visitFloatSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.FloatSignature"/>
	<x path="Void"/>
</f></visitFloatSignature>
		<visitDoubleSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.DoubleSignature"/>
	<x path="Void"/>
</f></visitDoubleSignature>
		<visitVoidDescriptor public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.VoidDescriptor"/>
	<x path="Void"/>
</f></visitVoidDescriptor>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.visitor.Reifier"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.reflect.generics.visitor.Visitor" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/reflect/generics/visitor/Visitor.class" extern="1" interface="1">
		<extends path="java.sun.reflect.generics.visitor.TypeTreeVisitor"><c path="java.sun.reflect.generics.visitor.Visitor.T"/></extends>
		<visitClassSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.ClassSignature"/>
	<x path="Void"/>
</f></visitClassSignature>
		<visitMethodTypeSignature public="1" set="method"><f a="param1">
	<c path="java.sun.reflect.generics.tree.MethodTypeSignature"/>
	<x path="Void"/>
</f></visitMethodTypeSignature>
		<meta>
			<m n=":native"><e>"sun.reflect.generics.visitor.Visitor"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.security.util.Debug" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/security/util/Debug.class" extern="1">
		<Help public="1" set="method" static="1"><f a=""><x path="Void"/></f></Help>
		<getInstance public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.sun.security.util.Debug"/>
			</f>
			<overloads><getInstance public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<c path="java.sun.security.util.Debug"/>
</f></getInstance></overloads>
		</getInstance>
		<isOn public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></isOn>
		<println public="1" set="method" static="1"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></println>
		<toHexString public="1" set="method" static="1"><f a="param1">
	<c path="java.math.BigInteger"/>
	<c path="String"/>
</f></toHexString>
		<toString public="1" set="method" static="1"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="String"/>
</f></toString>
		<println public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><println public="1" set="method"><f a=""><x path="Void"/></f></println></overloads>
		</println>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"sun.security.util.Debug"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.TimeZone" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/TimeZone.class" extern="1" abstract="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Cloneable"/>
		<getTimeZone public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.TimeZone"/>
			</f>
			<overloads><getTimeZone public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.util.TimeZone"/>
</f></getTimeZone></overloads>
		</getTimeZone>
		<getAvailableIDs public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.NativeArray"><c path="String"/></c>
			</f>
			<overloads><getAvailableIDs public="1" set="method"><f a=""><c path="java.NativeArray"><c path="String"/></c></f></getAvailableIDs></overloads>
		</getAvailableIDs>
		<getDefault public="1" set="method" static="1"><f a=""><c path="java.util.TimeZone"/></f></getDefault>
		<getDefaultRef public="1" set="method" static="1"><f a=""><c path="java.util.TimeZone"/></f></getDefaultRef>
		<setDefault public="1" set="method" static="1"><f a="param1">
	<c path="java.util.TimeZone"/>
	<x path="Void"/>
</f></setDefault>
		<SHORT final="1" public="1" set="null" static="1"><x path="Int"/></SHORT>
		<LONG final="1" public="1" set="null" static="1"><x path="Int"/></LONG>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<NO_TIMEZONE final="1" public="1" set="null" static="1"><c path="java.util.TimeZone"/></NO_TIMEZONE>
		<GMT_ID final="1" public="1" set="null" static="1"><c path="String"/></GMT_ID>
		<getOffset abstract="1" public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><getOffset public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></getOffset></overloads>
		</getOffset>
		<getOffsets public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
</f></getOffsets>
		<setRawOffset abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setRawOffset>
		<getRawOffset abstract="1" public="1" set="method"><f a=""><x path="Int"/></f></getRawOffset>
		<getID public="1" set="method"><f a=""><c path="String"/></f></getID>
		<setID public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></setID>
		<getDisplayName final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads>
				<getDisplayName public="1" set="method"><f a="param1:param2:param3">
	<x path="Bool"/>
	<x path="Int"/>
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getDisplayName>
				<getDisplayName final="1" public="1" set="method"><f a="param1:param2">
	<x path="Bool"/>
	<x path="Int"/>
	<c path="String"/>
</f></getDisplayName>
				<getDisplayName final="1" public="1" set="method"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getDisplayName>
			</overloads>
		</getDisplayName>
		<getDSTSavings public="1" set="method"><f a=""><x path="Int"/></f></getDSTSavings>
		<useDaylightTime abstract="1" public="1" set="method"><f a=""><x path="Bool"/></f></useDaylightTime>
		<observesDaylightTime public="1" set="method"><f a=""><x path="Bool"/></f></observesDaylightTime>
		<inDaylightTime abstract="1" public="1" set="method"><f a="param1">
	<c path="java.util.Date"/>
	<x path="Bool"/>
</f></inDaylightTime>
		<toZoneId public="1" set="method"><f a=""><c path="java.time.ZoneId"/></f></toZoneId>
		<hasSameRules public="1" set="method"><f a="param1">
	<c path="java.util.TimeZone"/>
	<x path="Bool"/>
</f></hasSameRules>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.TimeZone"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.calendar.ZoneInfo" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/calendar/ZoneInfo.class" extern="1">
		<extends path="java.util.TimeZone"/>
		<getAvailableIDs public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="String"/></c></f>
			<overloads><getAvailableIDs public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.NativeArray"><c path="String"/></c>
</f></getAvailableIDs></overloads>
		</getAvailableIDs>
		<getTimeZone public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.util.TimeZone"/>
</f></getTimeZone>
		<getAliasTable public="1" set="method" static="1"><f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="String"/>
</c></f></getAliasTable>
		<getOffset public="1" set="method" override="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<overloads><getOffset public="1" set="method"><f a="param1:param2:param3:param4:param5:param6">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getOffset></overloads>
		</getOffset>
		<getOffsets public="1" set="method" override="1"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
</f></getOffsets>
		<getOffsetsByStandard public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
</f></getOffsetsByStandard>
		<getOffsetsByWall public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
</f></getOffsetsByWall>
		<setRawOffset public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setRawOffset>
		<getRawOffset public="1" set="method" override="1"><f a=""><x path="Int"/></f></getRawOffset>
		<isDirty public="1" set="method"><f a=""><x path="Bool"/></f></isDirty>
		<useDaylightTime public="1" set="method" override="1"><f a=""><x path="Bool"/></f></useDaylightTime>
		<observesDaylightTime public="1" set="method" override="1"><f a=""><x path="Bool"/></f></observesDaylightTime>
		<inDaylightTime public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Date"/>
	<x path="Bool"/>
</f></inDaylightTime>
		<getDSTSavings public="1" set="method" override="1"><f a=""><x path="Int"/></f></getDSTSavings>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<getLastRuleInstance public="1" set="method"><f a=""><c path="java.util.SimpleTimeZone"/></f></getLastRuleInstance>
		<clone public="1" set="method" override="1"><f a=""><d/></f></clone>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hasSameRules public="1" set="method" override="1"><f a="param1">
	<c path="java.util.TimeZone"/>
	<x path="Bool"/>
</f></hasSameRules>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"sun.util.calendar.ZoneInfo"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.BaseLocale" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/BaseLocale.class" extern="1">
		<createInstance public="1" set="method" static="1"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<c path="java.sun.util.locale.BaseLocale"/>
</f></createInstance>
		<getInstance public="1" set="method" static="1"><f a="param1:param2:param3:param4">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="java.sun.util.locale.BaseLocale"/>
</f></getInstance>
		<SEP final="1" public="1" set="null" static="1"><c path="String"/></SEP>
		<getLanguage public="1" set="method"><f a=""><c path="String"/></f></getLanguage>
		<getScript public="1" set="method"><f a=""><c path="String"/></f></getScript>
		<getRegion public="1" set="method"><f a=""><c path="String"/></f></getRegion>
		<getVariant public="1" set="method"><f a=""><c path="String"/></f></getVariant>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="java.sun.util.locale.BaseLocale_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.util.locale.BaseLocale"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.BaseLocale_Key" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/BaseLocale$Key.class" module="java.sun.util.locale.BaseLocale" extern="1">
		<normalize public="1" set="method" static="1"><f a="param1">
	<c path="java.sun.util.locale.BaseLocale_Key"/>
	<c path="java.sun.util.locale.BaseLocale_Key"/>
</f></normalize>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<c path="String"/>
	<c path="java.sun.util.locale.BaseLocale_1"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"sun.util.locale.BaseLocale$Key"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.LocaleObjectCache" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/LocaleObjectCache.class" extern="1" abstract="1">
		<get public="1" set="method"><f a="param1">
	<c path="java.sun.util.locale.LocaleObjectCache.K"/>
	<c path="java.sun.util.locale.LocaleObjectCache.V"/>
</f></get>
		<put public="1" set="method"><f a="param1:param2">
	<c path="java.sun.util.locale.LocaleObjectCache.K"/>
	<c path="java.sun.util.locale.LocaleObjectCache.V"/>
	<c path="java.sun.util.locale.LocaleObjectCache.V"/>
</f></put>
		<createObject abstract="1" public="1" set="method"><f a="param1">
	<c path="java.sun.util.locale.LocaleObjectCache.K"/>
	<c path="java.sun.util.locale.LocaleObjectCache.V"/>
</f></createObject>
		<normalizeKey public="1" set="method"><f a="param1">
	<c path="java.sun.util.locale.LocaleObjectCache.K"/>
	<c path="java.sun.util.locale.LocaleObjectCache.K"/>
</f></normalizeKey>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Single"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"sun.util.locale.LocaleObjectCache"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.BaseLocale_Cache" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/BaseLocale$Cache.class" module="java.sun.util.locale.BaseLocale" extern="1">
		<extends path="java.sun.util.locale.LocaleObjectCache">
			<c path="java.sun.util.locale.BaseLocale_Key"/>
			<c path="java.sun.util.locale.BaseLocale"/>
		</extends>
		<normalizeKey public="1" set="method" override="1">
			<f a="param1">
				<c path="java.sun.util.locale.BaseLocale_Key"/>
				<c path="java.sun.util.locale.BaseLocale_Key"/>
			</f>
			<overloads><normalizeKey public="1" set="method"><f a="param1">
	<d/>
	<d/>
</f></normalizeKey></overloads>
		</normalizeKey>
		<createObject public="1" set="method" override="1">
			<f a="param1">
				<c path="java.sun.util.locale.BaseLocale_Key"/>
				<c path="java.sun.util.locale.BaseLocale"/>
			</f>
			<overloads><createObject public="1" set="method"><f a="param1">
	<d/>
	<d/>
</f></createObject></overloads>
		</createObject>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"sun.util.locale.BaseLocale$Cache"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.BaseLocale_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/BaseLocale$1.class" module="java.sun.util.locale.BaseLocale" extern="1"><meta>
	<m n=":native"><e>"sun.util.locale.BaseLocale$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.sun.util.locale.Extension" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/Extension.class" extern="1">
		<setValue public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></setValue>
		<getKey public="1" set="method"><f a=""><t path="java.types.Char16"/></f></getKey>
		<getValue public="1" set="method"><f a=""><c path="String"/></f></getValue>
		<getID public="1" set="method"><f a=""><c path="String"/></f></getID>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<t path="java.types.Char16"/>
	<c path="String"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"sun.util.locale.Extension"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.InternalLocaleBuilder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/InternalLocaleBuilder.class" extern="1">
		<removePrivateuseVariant public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></removePrivateuseVariant>
		<setLanguage public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.sun.util.locale.InternalLocaleBuilder"/>
</f></setLanguage>
		<setScript public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.sun.util.locale.InternalLocaleBuilder"/>
</f></setScript>
		<setRegion public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.sun.util.locale.InternalLocaleBuilder"/>
</f></setRegion>
		<setVariant public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.sun.util.locale.InternalLocaleBuilder"/>
</f></setVariant>
		<addUnicodeLocaleAttribute public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.sun.util.locale.InternalLocaleBuilder"/>
</f></addUnicodeLocaleAttribute>
		<removeUnicodeLocaleAttribute public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.sun.util.locale.InternalLocaleBuilder"/>
</f></removeUnicodeLocaleAttribute>
		<setUnicodeLocaleKeyword public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<c path="java.sun.util.locale.InternalLocaleBuilder"/>
</f></setUnicodeLocaleKeyword>
		<setExtension public="1" set="method"><f a="param1:param2">
	<t path="java.types.Char16"/>
	<c path="String"/>
	<c path="java.sun.util.locale.InternalLocaleBuilder"/>
</f></setExtension>
		<setExtensions public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.sun.util.locale.InternalLocaleBuilder"/>
</f></setExtensions>
		<setLanguageTag public="1" set="method"><f a="param1">
	<c path="java.sun.util.locale.LanguageTag"/>
	<c path="java.sun.util.locale.InternalLocaleBuilder"/>
</f></setLanguageTag>
		<setLocale public="1" set="method"><f a="param1:param2">
	<c path="java.sun.util.locale.BaseLocale"/>
	<c path="java.sun.util.locale.LocaleExtensions"/>
	<c path="java.sun.util.locale.InternalLocaleBuilder"/>
</f></setLocale>
		<clear public="1" set="method"><f a=""><c path="java.sun.util.locale.InternalLocaleBuilder"/></f></clear>
		<clearExtensions public="1" set="method"><f a=""><c path="java.sun.util.locale.InternalLocaleBuilder"/></f></clearExtensions>
		<getBaseLocale public="1" set="method"><f a=""><c path="java.sun.util.locale.BaseLocale"/></f></getBaseLocale>
		<getLocaleExtensions public="1" set="method"><f a=""><c path="java.sun.util.locale.LocaleExtensions"/></f></getLocaleExtensions>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"sun.util.locale.InternalLocaleBuilder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.InternalLocaleBuilder_CaseInsensitiveString" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/InternalLocaleBuilder$CaseInsensitiveString.class" module="java.sun.util.locale.InternalLocaleBuilder" extern="1">
		<value public="1" set="method"><f a=""><c path="String"/></f></value>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.InternalLocaleBuilder_CaseInsensitiveChar" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/InternalLocaleBuilder$CaseInsensitiveChar.class" module="java.sun.util.locale.InternalLocaleBuilder" extern="1">
		<value public="1" set="method"><f a=""><t path="java.types.Char16"/></f></value>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.sun.util.locale.InternalLocaleBuilder_1"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.InternalLocaleBuilder_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/InternalLocaleBuilder$1.class" module="java.sun.util.locale.InternalLocaleBuilder" extern="1"><meta>
	<m n=":native"><e>"sun.util.locale.InternalLocaleBuilder$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.sun.util.locale.LanguageTag" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/LanguageTag.class" extern="1">
		<parse public="1" set="method" static="1"><f a="param1:param2">
	<c path="String"/>
	<c path="java.sun.util.locale.ParseStatus"/>
	<c path="java.sun.util.locale.LanguageTag"/>
</f></parse>
		<parseLocale public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.sun.util.locale.BaseLocale"/>
	<c path="java.sun.util.locale.LocaleExtensions"/>
	<c path="java.sun.util.locale.LanguageTag"/>
</f></parseLocale>
		<isLanguage public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></isLanguage>
		<isExtlang public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></isExtlang>
		<isScript public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></isScript>
		<isRegion public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></isRegion>
		<isVariant public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></isVariant>
		<isExtensionSingleton public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></isExtensionSingleton>
		<isExtensionSingletonChar public="1" set="method" static="1"><f a="param1">
	<t path="java.types.Char16"/>
	<x path="Bool"/>
</f></isExtensionSingletonChar>
		<isExtensionSubtag public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></isExtensionSubtag>
		<isPrivateusePrefix public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></isPrivateusePrefix>
		<isPrivateusePrefixChar public="1" set="method" static="1"><f a="param1">
	<t path="java.types.Char16"/>
	<x path="Bool"/>
</f></isPrivateusePrefixChar>
		<isPrivateuseSubtag public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></isPrivateuseSubtag>
		<canonicalizeLanguage public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></canonicalizeLanguage>
		<canonicalizeExtlang public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></canonicalizeExtlang>
		<canonicalizeScript public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></canonicalizeScript>
		<canonicalizeRegion public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></canonicalizeRegion>
		<canonicalizeVariant public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></canonicalizeVariant>
		<canonicalizeExtension public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></canonicalizeExtension>
		<canonicalizeExtensionSingleton public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></canonicalizeExtensionSingleton>
		<canonicalizeExtensionSubtag public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></canonicalizeExtensionSubtag>
		<canonicalizePrivateuse public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></canonicalizePrivateuse>
		<canonicalizePrivateuseSubtag public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></canonicalizePrivateuseSubtag>
		<SEP final="1" public="1" set="null" static="1"><c path="String"/></SEP>
		<PRIVATEUSE final="1" public="1" set="null" static="1"><c path="String"/></PRIVATEUSE>
		<UNDETERMINED final="1" public="1" set="null" static="1"><c path="String"/></UNDETERMINED>
		<PRIVUSE_VARIANT_PREFIX final="1" public="1" set="null" static="1"><c path="String"/></PRIVUSE_VARIANT_PREFIX>
		<getLanguage public="1" set="method"><f a=""><c path="String"/></f></getLanguage>
		<getExtlangs public="1" set="method"><f a=""><c path="java.util.List"><c path="String"/></c></f></getExtlangs>
		<getScript public="1" set="method"><f a=""><c path="String"/></f></getScript>
		<getRegion public="1" set="method"><f a=""><c path="String"/></f></getRegion>
		<getVariants public="1" set="method"><f a=""><c path="java.util.List"><c path="String"/></c></f></getVariants>
		<getExtensions public="1" set="method"><f a=""><c path="java.util.List"><c path="String"/></c></f></getExtensions>
		<getPrivateuse public="1" set="method"><f a=""><c path="String"/></f></getPrivateuse>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"sun.util.locale.LanguageTag"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.LocaleExtensions" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/LocaleExtensions.class" extern="1">
		<isValidKey public="1" set="method" static="1"><f a="param1">
	<t path="java.types.Char16"/>
	<x path="Bool"/>
</f></isValidKey>
		<isValidUnicodeLocaleKey public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="Bool"/>
</f></isValidUnicodeLocaleKey>
		<CALENDAR_JAPANESE final="1" public="1" set="null" static="1"><c path="java.sun.util.locale.LocaleExtensions"/></CALENDAR_JAPANESE>
		<NUMBER_THAI final="1" public="1" set="null" static="1"><c path="java.sun.util.locale.LocaleExtensions"/></NUMBER_THAI>
		<getKeys public="1" set="method"><f a=""><c path="java.util.Set"><x path="java.lang.Character"/></c></f></getKeys>
		<getExtension public="1" set="method"><f a="param1">
	<x path="java.lang.Character"/>
	<c path="java.sun.util.locale.Extension"/>
</f></getExtension>
		<getExtensionValue public="1" set="method"><f a="param1">
	<x path="java.lang.Character"/>
	<c path="String"/>
</f></getExtensionValue>
		<getUnicodeLocaleAttributes public="1" set="method"><f a=""><c path="java.util.Set"><c path="String"/></c></f></getUnicodeLocaleAttributes>
		<getUnicodeLocaleKeys public="1" set="method"><f a=""><c path="java.util.Set"><c path="String"/></c></f></getUnicodeLocaleKeys>
		<getUnicodeLocaleType public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></getUnicodeLocaleType>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<getID public="1" set="method"><f a=""><c path="String"/></f></getID>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Map">
		<c path="java.sun.util.locale.InternalLocaleBuilder_CaseInsensitiveChar"/>
		<c path="String"/>
	</c>
	<c path="java.util.Set"><c path="java.sun.util.locale.InternalLocaleBuilder_CaseInsensitiveString"/></c>
	<c path="java.util.Map">
		<c path="java.sun.util.locale.InternalLocaleBuilder_CaseInsensitiveString"/>
		<c path="String"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.util.locale.LocaleExtensions"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.LocaleObjectCache_CacheEntry" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/LocaleObjectCache$CacheEntry.class" module="java.sun.util.locale.LocaleObjectCache" extern="1">
		<extends path="java.lang.ref.SoftReference"><c path="java.sun.util.locale.LocaleObjectCache_CacheEntry.V"/></extends>
		<getKey public="1" set="method"><f a=""><c path="java.sun.util.locale.LocaleObjectCache_CacheEntry.K"/></f></getKey>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.sun.util.locale.LocaleObjectCache_CacheEntry.K"/>
	<c path="java.sun.util.locale.LocaleObjectCache_CacheEntry.V"/>
	<c path="java.lang.ref.ReferenceQueue"><c path="java.sun.util.locale.LocaleObjectCache_CacheEntry.V"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"sun.util.locale.LocaleObjectCache$CacheEntry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.ParseStatus" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/ParseStatus.class" extern="1">
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<isError public="1" set="method"><f a=""><x path="Bool"/></f></isError>
		<getErrorIndex public="1" set="method"><f a=""><x path="Int"/></f></getErrorIndex>
		<getParseLength public="1" set="method"><f a=""><x path="Int"/></f></getParseLength>
		<getErrorMessage public="1" set="method"><f a=""><c path="String"/></f></getErrorMessage>
		<parseLength public="1"><x path="Int"/></parseLength>
		<errorIndex public="1"><x path="Int"/></errorIndex>
		<errorMsg public="1"><c path="String"/></errorMsg>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"sun.util.locale.ParseStatus"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.provider.LocaleServiceProviderPool" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/provider/LocaleServiceProviderPool.class" extern="1">
		<getPool public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.Class"><c path="java.util.spi.LocaleServiceProvider"/></c>
	<c path="java.sun.util.locale.provider.LocaleServiceProviderPool"/>
</f></getPool>
		<config public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.lang.Class"><d/></c>
	<c path="String"/>
	<x path="Void"/>
</f></config>
		<getAllAvailableLocales public="1" set="method" static="1"><f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f></getAllAvailableLocales>
		<getLookupLocales public="1" set="method" static="1"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="java.util.List"><c path="java.util.Locale"/></c>
</f></getLookupLocales>
		<getLookupLocale public="1" set="method" static="1"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="java.util.Locale"/>
</f></getLookupLocale>
		<spiClasses final="1" public="1" set="null" static="1"><c path="java.NativeArray"><c path="java.lang.Class"><c path="java.util.spi.LocaleServiceProvider"/></c></c></spiClasses>
		<getAvailableLocales public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f></getAvailableLocales>
		<hasProviders public="1" set="method"><f a=""><x path="Bool"/></f></hasProviders>
		<getLocalizedObject public="1" params="P:S" set="method">
			<f a="param1:param2:param3">
				<c path="java.sun.util.locale.provider.LocaleServiceProviderPool_LocalizedObjectGetter">
					<c path="getLocalizedObject.P"/>
					<c path="getLocalizedObject.S"/>
				</c>
				<c path="java.util.Locale"/>
				<x path="haxe.Rest"><d/></x>
				<c path="getLocalizedObject.S"/>
			</f>
			<overloads><getLocalizedObject public="1" params="P:S" set="method"><f a="param1:param2:param3:param4">
	<c path="java.sun.util.locale.provider.LocaleServiceProviderPool_LocalizedObjectGetter">
		<c path="getLocalizedObject.P"/>
		<c path="getLocalizedObject.S"/>
	</c>
	<c path="java.util.Locale"/>
	<c path="String"/>
	<x path="haxe.Rest"><d/></x>
	<c path="getLocalizedObject.S"/>
</f></getLocalizedObject></overloads>
		</getLocalizedObject>
		<meta>
			<m n=":native"><e>"sun.util.locale.provider.LocaleServiceProviderPool"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.provider.LocaleServiceProviderPool_LocalizedObjectGetter" params="P:S" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/provider/LocaleServiceProviderPool$LocalizedObjectGetter.class" module="java.sun.util.locale.provider.LocaleServiceProviderPool" extern="1" interface="1">
		<getObject public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.sun.util.locale.provider.LocaleServiceProviderPool_LocalizedObjectGetter.P"/>
	<c path="java.util.Locale"/>
	<c path="String"/>
	<x path="haxe.Rest"><d/></x>
	<c path="java.sun.util.locale.provider.LocaleServiceProviderPool_LocalizedObjectGetter.S"/>
</f></getObject>
		<meta>
			<m n=":native"><e>"sun.util.locale.provider.LocaleServiceProviderPool$LocalizedObjectGetter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.locale.provider.LocaleServiceProviderPool_AllAvailableLocales" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/provider/LocaleServiceProviderPool$AllAvailableLocales.class" module="java.sun.util.locale.provider.LocaleServiceProviderPool" extern="1">
		<allAvailableLocales final="1" public="1" set="null" static="1"><c path="java.NativeArray"><c path="java.util.Locale"/></c></allAvailableLocales>
		<meta>
			<m n=":native"><e>"sun.util.locale.provider.LocaleServiceProviderPool$AllAvailableLocales"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.sun.util.spi.XmlPropertiesProvider" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/spi/XmlPropertiesProvider.class" extern="1" abstract="1">
		<load abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="java.util.Properties"/>
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></load>
		<store abstract="1" public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.Properties"/>
	<c path="java.io.OutputStream"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></store>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"sun.util.spi.XmlPropertiesProvider"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.text.CharacterIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/text/CharacterIterator.class" extern="1" interface="1">
		<extends path="java.lang.Cloneable"/>
		<DONE final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></DONE>
		<first public="1" set="method"><f a=""><t path="java.types.Char16"/></f></first>
		<last public="1" set="method"><f a=""><t path="java.types.Char16"/></f></last>
		<current public="1" set="method"><f a=""><t path="java.types.Char16"/></f></current>
		<next public="1" set="method"><f a=""><t path="java.types.Char16"/></f></next>
		<previous public="1" set="method"><f a=""><t path="java.types.Char16"/></f></previous>
		<setIndex public="1" set="method"><f a="param1">
	<x path="Int"/>
	<t path="java.types.Char16"/>
</f></setIndex>
		<getBeginIndex public="1" set="method"><f a=""><x path="Int"/></f></getBeginIndex>
		<getEndIndex public="1" set="method"><f a=""><x path="Int"/></f></getEndIndex>
		<getIndex public="1" set="method"><f a=""><x path="Int"/></f></getIndex>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<meta>
			<m n=":native"><e>"java.text.CharacterIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.text.AttributedCharacterIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/text/AttributedCharacterIterator.class" extern="1" interface="1">
		<extends path="java.text.CharacterIterator"/>
		<getRunStart public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads>
				<getRunStart public="1" set="method"><f a="param1">
	<c path="java.util.Set"><c path="java.text.AttributedCharacterIterator_Attribute"/></c>
	<x path="Int"/>
</f></getRunStart>
				<getRunStart public="1" set="method"><f a="param1">
	<c path="java.text.AttributedCharacterIterator_Attribute"/>
	<x path="Int"/>
</f></getRunStart>
			</overloads>
		</getRunStart>
		<getRunLimit public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads>
				<getRunLimit public="1" set="method"><f a="param1">
	<c path="java.util.Set"><c path="java.text.AttributedCharacterIterator_Attribute"/></c>
	<x path="Int"/>
</f></getRunLimit>
				<getRunLimit public="1" set="method"><f a="param1">
	<c path="java.text.AttributedCharacterIterator_Attribute"/>
	<x path="Int"/>
</f></getRunLimit>
			</overloads>
		</getRunLimit>
		<getAttributes public="1" set="method"><f a=""><c path="java.util.Map">
	<c path="java.text.AttributedCharacterIterator_Attribute"/>
	<d/>
</c></f></getAttributes>
		<getAttribute public="1" set="method"><f a="param1">
	<c path="java.text.AttributedCharacterIterator_Attribute"/>
	<d/>
</f></getAttribute>
		<getAllAttributeKeys public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.text.AttributedCharacterIterator_Attribute"/></c></f></getAllAttributeKeys>
		<meta>
			<m n=":native"><e>"java.text.AttributedCharacterIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.text.AttributedCharacterIterator_Attribute" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/text/AttributedCharacterIterator$Attribute.class" module="java.text.AttributedCharacterIterator" extern="1">
		<implements path="java.io.Serializable"/>
		<LANGUAGE final="1" public="1" set="null" static="1"><c path="java.text.AttributedCharacterIterator_Attribute"/></LANGUAGE>
		<READING final="1" public="1" set="null" static="1"><c path="java.text.AttributedCharacterIterator_Attribute"/></READING>
		<INPUT_METHOD_SEGMENT final="1" public="1" set="null" static="1"><c path="java.text.AttributedCharacterIterator_Attribute"/></INPUT_METHOD_SEGMENT>
		<equals final="1" public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode final="1" public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<readResolve public="1" set="method"><f a=""><d/></f></readResolve>
		<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.text.AttributedCharacterIterator$Attribute"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.text.FieldPosition" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/text/FieldPosition.class" extern="1">
		<getFieldAttribute public="1" set="method"><f a=""><c path="java.text.Format_Field"/></f></getFieldAttribute>
		<getField public="1" set="method"><f a=""><x path="Int"/></f></getField>
		<getBeginIndex public="1" set="method"><f a=""><x path="Int"/></f></getBeginIndex>
		<getEndIndex public="1" set="method"><f a=""><x path="Int"/></f></getEndIndex>
		<setBeginIndex public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setBeginIndex>
		<setEndIndex public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setEndIndex>
		<getFieldDelegate public="1" set="method"><f a=""><c path="java.text.Format_FieldDelegate"/></f></getFieldDelegate>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<field public="1"><x path="Int"/></field>
		<endIndex public="1"><x path="Int"/></endIndex>
		<beginIndex public="1"><x path="Int"/></beginIndex>
		<new public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.text.Format_Field"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.text.Format_Field"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.text.FieldPosition"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.text.Format_FieldDelegate" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/text/Format$FieldDelegate.class" module="java.text.Format" extern="1" interface="1">
		<formatted public="1" set="method">
			<f a="param1:param2:param3:param4:param5">
				<c path="java.text.Format_Field"/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.StringBuffer"/>
				<x path="Void"/>
			</f>
			<overloads><formatted public="1" set="method"><f a="param1:param2:param3:param4:param5:param6">
	<x path="Int"/>
	<c path="java.text.Format_Field"/>
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.StringBuffer"/>
	<x path="Void"/>
</f></formatted></overloads>
		</formatted>
		<meta>
			<m n=":native"><e>"java.text.Format$FieldDelegate"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.text.FieldPosition_Delegate" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/text/FieldPosition$Delegate.class" module="java.text.FieldPosition" extern="1">
		<implements path="java.text.Format_FieldDelegate"/>
		<formatted public="1" set="method">
			<f a="param1:param2:param3:param4:param5">
				<c path="java.text.Format_Field"/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.StringBuffer"/>
				<x path="Void"/>
			</f>
			<overloads><formatted public="1" set="method"><f a="param1:param2:param3:param4:param5:param6">
	<x path="Int"/>
	<c path="java.text.Format_Field"/>
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.StringBuffer"/>
	<x path="Void"/>
</f></formatted></overloads>
		</formatted>
		<this_0 final="1" public="1">
			<c path="java.text.FieldPosition"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.text.FieldPosition"/>
	<c path="java.text.FieldPosition_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.text.FieldPosition$Delegate"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.text.FieldPosition_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/text/FieldPosition$1.class" module="java.text.FieldPosition" extern="1"><meta>
	<m n=":native"><e>"java.text.FieldPosition$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.text.Format" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/text/Format.class" extern="1" abstract="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Cloneable"/>
		<format final="1" public="1" set="method">
			<f a="param1">
				<d/>
				<c path="String"/>
			</f>
			<overloads><format abstract="1" public="1" set="method"><f a="param1:param2:param3">
	<d/>
	<c path="java.lang.StringBuffer"/>
	<c path="java.text.FieldPosition"/>
	<c path="java.lang.StringBuffer"/>
</f></format></overloads>
		</format>
		<formatToCharacterIterator public="1" set="method"><f a="param1">
	<d/>
	<c path="java.text.AttributedCharacterIterator"/>
</f></formatToCharacterIterator>
		<parseObject abstract="1" public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.text.ParsePosition"/>
				<d/>
			</f>
			<overloads><parseObject public="1" set="method"><f a="param1">
	<c path="String"/>
	<d/>
</f></parseObject></overloads>
		</parseObject>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<createAttributedCharacterIterator public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.text.AttributedCharacterIterator"/>
			</f>
			<overloads>
				<createAttributedCharacterIterator public="1" set="method"><f a="param1:param2:param3">
	<c path="java.text.AttributedCharacterIterator"/>
	<c path="java.text.AttributedCharacterIterator_Attribute"/>
	<d/>
	<c path="java.text.AttributedCharacterIterator"/>
</f></createAttributedCharacterIterator>
				<createAttributedCharacterIterator public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<c path="java.text.AttributedCharacterIterator_Attribute"/>
	<d/>
	<c path="java.text.AttributedCharacterIterator"/>
</f></createAttributedCharacterIterator>
				<createAttributedCharacterIterator public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.text.AttributedCharacterIterator"/></c>
	<c path="java.text.AttributedCharacterIterator"/>
</f></createAttributedCharacterIterator>
			</overloads>
		</createAttributedCharacterIterator>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.text.Format"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.text.Format_Field" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/text/Format$Field.class" module="java.text.Format" extern="1">
		<extends path="java.text.AttributedCharacterIterator_Attribute"/>
		<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.text.Format$Field"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.text.ParsePosition" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/text/ParsePosition.class" extern="1">
		<getIndex public="1" set="method"><f a=""><x path="Int"/></f></getIndex>
		<setIndex public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setIndex>
		<setErrorIndex public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setErrorIndex>
		<getErrorIndex public="1" set="method"><f a=""><x path="Int"/></f></getErrorIndex>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<index public="1"><x path="Int"/></index>
		<errorIndex public="1"><x path="Int"/></errorIndex>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.text.ParsePosition"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.Clock" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/Clock.class" extern="1" abstract="1">
		<systemUTC public="1" set="method" static="1"><f a=""><c path="java.time.Clock"/></f></systemUTC>
		<systemDefaultZone public="1" set="method" static="1"><f a=""><c path="java.time.Clock"/></f></systemDefaultZone>
		<system public="1" set="method" static="1"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.Clock"/>
</f></system>
		<tickSeconds public="1" set="method" static="1"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.Clock"/>
</f></tickSeconds>
		<tickMinutes public="1" set="method" static="1"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.Clock"/>
</f></tickMinutes>
		<tick public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.time.Clock"/>
	<c path="java.time.Duration"/>
	<c path="java.time.Clock"/>
</f></tick>
		<fixed public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.time.Instant"/>
	<c path="java.time.ZoneId"/>
	<c path="java.time.Clock"/>
</f></fixed>
		<offset public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.time.Clock"/>
	<c path="java.time.Duration"/>
	<c path="java.time.Clock"/>
</f></offset>
		<getZone abstract="1" public="1" set="method"><f a=""><c path="java.time.ZoneId"/></f></getZone>
		<withZone abstract="1" public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.Clock"/>
</f></withZone>
		<millis public="1" set="method"><f a=""><x path="haxe.Int64"/></f></millis>
		<instant abstract="1" public="1" set="method"><f a=""><c path="java.time.Instant"/></f></instant>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.time.Clock"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.Clock_TickClock" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/Clock$TickClock.class" module="java.time.Clock" extern="1">
		<extends path="java.time.Clock"/>
		<implements path="java.io.Serializable"/>
		<getZone public="1" set="method" override="1"><f a=""><c path="java.time.ZoneId"/></f></getZone>
		<withZone public="1" set="method" override="1"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.Clock"/>
</f></withZone>
		<millis public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></millis>
		<instant public="1" set="method" override="1"><f a=""><c path="java.time.Instant"/></f></instant>
		<equals public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method" override="1"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.time.Clock"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.Clock$TickClock"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.Clock_SystemClock" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/Clock$SystemClock.class" module="java.time.Clock" extern="1">
		<extends path="java.time.Clock"/>
		<implements path="java.io.Serializable"/>
		<getZone public="1" set="method" override="1"><f a=""><c path="java.time.ZoneId"/></f></getZone>
		<withZone public="1" set="method" override="1"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.Clock"/>
</f></withZone>
		<millis public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></millis>
		<instant public="1" set="method" override="1"><f a=""><c path="java.time.Instant"/></f></instant>
		<equals public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method" override="1"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.Clock$SystemClock"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.Clock_OffsetClock" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/Clock$OffsetClock.class" module="java.time.Clock" extern="1">
		<extends path="java.time.Clock"/>
		<implements path="java.io.Serializable"/>
		<getZone public="1" set="method" override="1"><f a=""><c path="java.time.ZoneId"/></f></getZone>
		<withZone public="1" set="method" override="1"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.Clock"/>
</f></withZone>
		<millis public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></millis>
		<instant public="1" set="method" override="1"><f a=""><c path="java.time.Instant"/></f></instant>
		<equals public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method" override="1"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.time.Clock"/>
	<c path="java.time.Duration"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.Clock$OffsetClock"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.Clock_FixedClock" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/Clock$FixedClock.class" module="java.time.Clock" extern="1">
		<extends path="java.time.Clock"/>
		<implements path="java.io.Serializable"/>
		<getZone public="1" set="method" override="1"><f a=""><c path="java.time.ZoneId"/></f></getZone>
		<withZone public="1" set="method" override="1"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.Clock"/>
</f></withZone>
		<millis public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></millis>
		<instant public="1" set="method" override="1"><f a=""><c path="java.time.Instant"/></f></instant>
		<equals public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method" override="1"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.time.Instant"/>
	<c path="java.time.ZoneId"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.Clock$FixedClock"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.time.DayOfWeek" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/DayOfWeek.class">
		<MONDAY/>
		<TUESDAY/>
		<WEDNESDAY/>
		<THURSDAY/>
		<FRIDAY/>
		<SATURDAY/>
		<SUNDAY/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.time.DayOfWeek"</e></m>
		</meta>
	</enum>
	<class path="java.time.temporal.TemporalAmount" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/temporal/TemporalAmount.class" extern="1" interface="1">
		<get public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="haxe.Int64"/>
</f></get>
		<getUnits public="1" set="method"><f a=""><c path="java.util.List"><c path="java.time.temporal.TemporalUnit"/></c></f></getUnits>
		<addTo public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></addTo>
		<subtractFrom public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></subtractFrom>
		<meta>
			<m n=":native"><e>"java.time.temporal.TemporalAmount"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.Duration" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/Duration.class" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Comparable"><c path="java.time.Duration"/></implements>
		<implements path="java.time.temporal.TemporalAmount"/>
		<ofDays public="1" set="method" static="1"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></ofDays>
		<ofHours public="1" set="method" static="1"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></ofHours>
		<ofMinutes public="1" set="method" static="1"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></ofMinutes>
		<ofSeconds public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.time.Duration"/>
			</f>
			<overloads><ofSeconds public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></ofSeconds></overloads>
		</ofSeconds>
		<ofMillis public="1" set="method" static="1"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></ofMillis>
		<ofNanos public="1" set="method" static="1"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></ofNanos>
		<of public="1" set="method" static="1"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.Duration"/>
</f></of>
		<from public="1" set="method" static="1"><f a="param1">
	<c path="java.time.temporal.TemporalAmount"/>
	<c path="java.time.Duration"/>
</f></from>
		<parse public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<c path="java.time.Duration"/>
</f></parse>
		<between public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.Duration"/>
</f></between>
		<readExternal public="1" set="method" static="1"><f a="param1">
	<c path="java.io.DataInput"/>
	<c path="java.time.Duration"/>
</f></readExternal>
		<ZERO final="1" public="1" set="null" static="1"><c path="java.time.Duration"/></ZERO>
		<get public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="haxe.Int64"/>
</f></get>
		<getUnits public="1" set="method"><f a=""><c path="java.util.List"><c path="java.time.temporal.TemporalUnit"/></c></f></getUnits>
		<isZero public="1" set="method"><f a=""><x path="Bool"/></f></isZero>
		<isNegative public="1" set="method"><f a=""><x path="Bool"/></f></isNegative>
		<getSeconds public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getSeconds>
		<getNano public="1" set="method"><f a=""><x path="Int"/></f></getNano>
		<withSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></withSeconds>
		<withNanos public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.Duration"/>
</f></withNanos>
		<plus public="1" set="method">
			<f a="param1">
				<c path="java.time.Duration"/>
				<c path="java.time.Duration"/>
			</f>
			<overloads><plus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.Duration"/>
</f></plus></overloads>
		</plus>
		<plusDays public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></plusDays>
		<plusHours public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></plusHours>
		<plusMinutes public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></plusMinutes>
		<plusSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></plusSeconds>
		<plusMillis public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></plusMillis>
		<plusNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></plusNanos>
		<minus public="1" set="method">
			<f a="param1">
				<c path="java.time.Duration"/>
				<c path="java.time.Duration"/>
			</f>
			<overloads><minus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.Duration"/>
</f></minus></overloads>
		</minus>
		<minusDays public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></minusDays>
		<minusHours public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></minusHours>
		<minusMinutes public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></minusMinutes>
		<minusSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></minusSeconds>
		<minusMillis public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></minusMillis>
		<minusNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></minusNanos>
		<multipliedBy public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></multipliedBy>
		<dividedBy public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Duration"/>
</f></dividedBy>
		<negated public="1" set="method"><f a=""><c path="java.time.Duration"/></f></negated>
		<abs public="1" set="method"><f a=""><c path="java.time.Duration"/></f></abs>
		<addTo public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></addTo>
		<subtractFrom public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></subtractFrom>
		<toDays public="1" set="method"><f a=""><x path="haxe.Int64"/></f></toDays>
		<toHours public="1" set="method"><f a=""><x path="haxe.Int64"/></f></toHours>
		<toMinutes public="1" set="method"><f a=""><x path="haxe.Int64"/></f></toMinutes>
		<toMillis public="1" set="method"><f a=""><x path="haxe.Int64"/></f></toMillis>
		<toNanos public="1" set="method"><f a=""><x path="haxe.Int64"/></f></toNanos>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.time.Duration"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<writeExternal public="1" set="method"><f a="param1">
	<c path="java.io.DataOutput"/>
	<x path="Void"/>
</f></writeExternal>
		<meta>
			<m n=":native"><e>"java.time.Duration"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.Duration_DurationUnits" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/Duration$DurationUnits.class" module="java.time.Duration" extern="1">
		<UNITS final="1" public="1" set="null" static="1"><c path="java.util.List"><c path="java.time.temporal.TemporalUnit"/></c></UNITS>
		<meta>
			<m n=":native"><e>"java.time.Duration$DurationUnits"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.Duration_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/Duration$1.class" module="java.time.Duration" extern="1"><meta>
	<m n=":native"><e>"java.time.Duration$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.time.temporal.TemporalAdjuster" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/temporal/TemporalAdjuster.class" extern="1" interface="1">
		<adjustInto public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></adjustInto>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.time.temporal.TemporalAdjuster"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.temporal.TemporalAccessor" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/temporal/TemporalAccessor.class" extern="1" interface="1">
		<isSupported public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Bool"/>
</f></isSupported>
		<range public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<c path="java.time.temporal.ValueRange"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</range>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Int"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</get>
		<getLong public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
</f></getLong>
		<query public="1" params="R" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
				<c path="query.R"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</query>
		<meta>
			<m n=":native"><e>"java.time.temporal.TemporalAccessor"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.temporal.Temporal" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/temporal/Temporal.class" extern="1" interface="1">
		<extends path="java.time.temporal.TemporalAccessor"/>
		<isSupported public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="Bool"/>
</f></isSupported>
		<with public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAdjuster"/>
				<c path="java.time.temporal.Temporal"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><with public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.Temporal"/>
</f></with></overloads>
		</with>
		<plus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.temporal.Temporal"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><plus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.temporal.Temporal"/>
</f></plus></overloads>
		</plus>
		<minus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.temporal.Temporal"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><minus public="1" set="method">
	<f a="param1:param2">
		<x path="haxe.Int64"/>
		<c path="java.time.temporal.TemporalUnit"/>
		<c path="java.time.temporal.Temporal"/>
	</f>
	<meta><m n=":java.default"/></meta>
</minus></overloads>
		</minus>
		<until public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="haxe.Int64"/>
</f></until>
		<meta>
			<m n=":native"><e>"java.time.temporal.Temporal"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.Instant" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/Instant.class" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Comparable"><c path="java.time.Instant"/></implements>
		<implements path="java.time.temporal.TemporalAdjuster"/>
		<implements path="java.time.temporal.Temporal"/>
		<now public="1" set="method" static="1">
			<f a=""><c path="java.time.Instant"/></f>
			<overloads><now public="1" set="method"><f a="param1">
	<c path="java.time.Clock"/>
	<c path="java.time.Instant"/>
</f></now></overloads>
		</now>
		<ofEpochSecond public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.time.Instant"/>
			</f>
			<overloads><ofEpochSecond public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<c path="java.time.Instant"/>
</f></ofEpochSecond></overloads>
		</ofEpochSecond>
		<ofEpochMilli public="1" set="method" static="1"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Instant"/>
</f></ofEpochMilli>
		<from public="1" set="method" static="1"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.Instant"/>
</f></from>
		<parse public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<c path="java.time.Instant"/>
</f></parse>
		<readExternal public="1" set="method" static="1"><f a="param1">
	<c path="java.io.DataInput"/>
	<c path="java.time.Instant"/>
</f></readExternal>
		<EPOCH final="1" public="1" set="null" static="1"><c path="java.time.Instant"/></EPOCH>
		<MIN final="1" public="1" set="null" static="1"><c path="java.time.Instant"/></MIN>
		<MAX final="1" public="1" set="null" static="1"><c path="java.time.Instant"/></MAX>
		<isSupported public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Bool"/>
			</f>
			<overloads><isSupported public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="Bool"/>
</f></isSupported></overloads>
		</isSupported>
		<range public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<c path="java.time.temporal.ValueRange"/>
</f></range>
		<get public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
</f></get>
		<getLong public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
</f></getLong>
		<getEpochSecond public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getEpochSecond>
		<getNano public="1" set="method"><f a=""><x path="Int"/></f></getNano>
		<with public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAdjuster"/>
				<c path="java.time.Instant"/>
			</f>
			<overloads><with public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<c path="java.time.Instant"/>
</f></with></overloads>
		</with>
		<truncatedTo public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.Instant"/>
</f></truncatedTo>
		<plus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.Instant"/>
			</f>
			<overloads><plus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.Instant"/>
</f></plus></overloads>
		</plus>
		<plusSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Instant"/>
</f></plusSeconds>
		<plusMillis public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Instant"/>
</f></plusMillis>
		<plusNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Instant"/>
</f></plusNanos>
		<minus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.Instant"/>
			</f>
			<overloads><minus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.Instant"/>
</f></minus></overloads>
		</minus>
		<minusSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Instant"/>
</f></minusSeconds>
		<minusMillis public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Instant"/>
</f></minusMillis>
		<minusNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Instant"/>
</f></minusNanos>
		<query public="1" params="R" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
	<c path="query.R"/>
</f></query>
		<adjustInto public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></adjustInto>
		<until public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="haxe.Int64"/>
</f></until>
		<atOffset public="1" set="method"><f a="param1">
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.OffsetDateTime"/>
</f></atOffset>
		<atZone public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.ZonedDateTime"/>
</f></atZone>
		<toEpochMilli public="1" set="method"><f a=""><x path="haxe.Int64"/></f></toEpochMilli>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.time.Instant"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<isAfter public="1" set="method"><f a="param1">
	<c path="java.time.Instant"/>
	<x path="Bool"/>
</f></isAfter>
		<isBefore public="1" set="method"><f a="param1">
	<c path="java.time.Instant"/>
	<x path="Bool"/>
</f></isBefore>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<writeExternal public="1" set="method"><f a="param1">
	<c path="java.io.DataOutput"/>
	<x path="Void"/>
</f></writeExternal>
		<meta>
			<m n=":native"><e>"java.time.Instant"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.Instant_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/Instant$1.class" module="java.time.Instant" extern="1"><meta>
	<m n=":native"><e>"java.time.Instant$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.time.chrono.ChronoLocalDate" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/chrono/ChronoLocalDate.class" extern="1" interface="1">
		<extends path="java.lang.Comparable"><c path="java.time.chrono.ChronoLocalDate"/></extends>
		<extends path="java.time.temporal.TemporalAdjuster"/>
		<extends path="java.time.temporal.Temporal"/>
		<timeLineOrder public="1" set="method" static="1">
			<f a=""><c path="java.util.Comparator"><c path="java.time.chrono.ChronoLocalDate"/></c></f>
			<meta><m n=":java.default"/></meta>
		</timeLineOrder>
		<from public="1" set="method" static="1">
			<f a="param1">
				<c path="java.time.temporal.TemporalAccessor"/>
				<c path="java.time.chrono.ChronoLocalDate"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</from>
		<getChronology public="1" set="method"><f a=""><c path="java.time.chrono.Chronology"/></f></getChronology>
		<getEra public="1" set="method">
			<f a=""><c path="java.time.chrono.Era"/></f>
			<meta><m n=":java.default"/></meta>
		</getEra>
		<isLeapYear public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":java.default"/></meta>
		</isLeapYear>
		<lengthOfMonth public="1" set="method"><f a=""><x path="Int"/></f></lengthOfMonth>
		<lengthOfYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":java.default"/></meta>
		</lengthOfYear>
		<isSupported public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><isSupported public="1" set="method">
	<f a="param1">
		<c path="java.time.temporal.TemporalUnit"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":java.default"/></meta>
</isSupported></overloads>
		</isSupported>
		<with public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAdjuster"/>
				<c path="java.time.chrono.ChronoLocalDate"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><with public="1" set="method">
	<f a="param1:param2">
		<c path="java.time.temporal.TemporalField"/>
		<x path="haxe.Int64"/>
		<c path="java.time.chrono.ChronoLocalDate"/>
	</f>
	<meta><m n=":java.default"/></meta>
</with></overloads>
		</with>
		<plus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.chrono.ChronoLocalDate"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><plus public="1" set="method">
	<f a="param1:param2">
		<x path="haxe.Int64"/>
		<c path="java.time.temporal.TemporalUnit"/>
		<c path="java.time.chrono.ChronoLocalDate"/>
	</f>
	<meta><m n=":java.default"/></meta>
</plus></overloads>
		</plus>
		<minus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.chrono.ChronoLocalDate"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><minus public="1" set="method">
	<f a="param1:param2">
		<x path="haxe.Int64"/>
		<c path="java.time.temporal.TemporalUnit"/>
		<c path="java.time.chrono.ChronoLocalDate"/>
	</f>
	<meta><m n=":java.default"/></meta>
</minus></overloads>
		</minus>
		<query public="1" params="R" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
				<c path="query.R"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</query>
		<adjustInto public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.Temporal"/>
				<c path="java.time.temporal.Temporal"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</adjustInto>
		<until public="1" set="method">
			<f a="param1:param2">
				<c path="java.time.temporal.Temporal"/>
				<c path="java.time.temporal.TemporalUnit"/>
				<x path="haxe.Int64"/>
			</f>
			<overloads><until public="1" set="method"><f a="param1">
	<c path="java.time.chrono.ChronoLocalDate"/>
	<c path="java.time.chrono.ChronoPeriod"/>
</f></until></overloads>
		</until>
		<format public="1" set="method">
			<f a="param1">
				<c path="java.time.format.DateTimeFormatter"/>
				<c path="String"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</format>
		<atTime public="1" set="method">
			<f a="param1">
				<c path="java.time.LocalTime"/>
				<c path="java.time.chrono.ChronoLocalDateTime"><d/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</atTime>
		<toEpochDay public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":java.default"/></meta>
		</toEpochDay>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.ChronoLocalDate"/>
				<x path="Int"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":java.default"/></meta>
</compareTo></overloads>
		</compareTo>
		<isAfter public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.ChronoLocalDate"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</isAfter>
		<isBefore public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.ChronoLocalDate"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</isBefore>
		<isEqual public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.ChronoLocalDate"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</isEqual>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.time.chrono.ChronoLocalDate"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.LocalDate" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/LocalDate.class" extern="1">
		<implements path="java.time.temporal.Temporal"/>
		<implements path="java.time.temporal.TemporalAdjuster"/>
		<implements path="java.time.chrono.ChronoLocalDate"/>
		<implements path="java.io.Serializable"/>
		<now public="1" set="method" static="1">
			<f a=""><c path="java.time.LocalDate"/></f>
			<overloads>
				<now public="1" set="method"><f a="param1">
	<c path="java.time.Clock"/>
	<c path="java.time.LocalDate"/>
</f></now>
				<now public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.LocalDate"/>
</f></now>
			</overloads>
		</now>
		<of public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<e path="java.time.Month"/>
				<x path="Int"/>
				<c path="java.time.LocalDate"/>
			</f>
			<overloads><of public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.LocalDate"/>
</f></of></overloads>
		</of>
		<ofYearDay public="1" set="method" static="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.LocalDate"/>
</f></ofYearDay>
		<ofEpochDay public="1" set="method" static="1"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDate"/>
</f></ofEpochDay>
		<from public="1" set="method" static="1"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.LocalDate"/>
</f></from>
		<parse public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.time.LocalDate"/>
			</f>
			<overloads><parse public="1" set="method"><f a="param1:param2">
	<c path="java.lang.CharSequence"/>
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="java.time.LocalDate"/>
</f></parse></overloads>
		</parse>
		<readExternal public="1" set="method" static="1"><f a="param1">
	<c path="java.io.DataInput"/>
	<c path="java.time.LocalDate"/>
</f></readExternal>
		<MIN final="1" public="1" set="null" static="1"><c path="java.time.LocalDate"/></MIN>
		<MAX final="1" public="1" set="null" static="1"><c path="java.time.LocalDate"/></MAX>
		<DAYS_0000_TO_1970 final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></DAYS_0000_TO_1970>
		<isSupported public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Bool"/>
			</f>
			<overloads><isSupported public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="Bool"/>
</f></isSupported></overloads>
		</isSupported>
		<range public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<c path="java.time.temporal.ValueRange"/>
</f></range>
		<get public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
</f></get>
		<getLong public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
</f></getLong>
		<getChronology public="1" set="method"><f a=""><c path="java.time.chrono.IsoChronology"/></f></getChronology>
		<getEra public="1" set="method"><f a=""><c path="java.time.chrono.Era"/></f></getEra>
		<getYear public="1" set="method"><f a=""><x path="Int"/></f></getYear>
		<getMonthValue public="1" set="method"><f a=""><x path="Int"/></f></getMonthValue>
		<getMonth public="1" set="method"><f a=""><e path="java.time.Month"/></f></getMonth>
		<getDayOfMonth public="1" set="method"><f a=""><x path="Int"/></f></getDayOfMonth>
		<getDayOfYear public="1" set="method"><f a=""><x path="Int"/></f></getDayOfYear>
		<getDayOfWeek public="1" set="method"><f a=""><e path="java.time.DayOfWeek"/></f></getDayOfWeek>
		<isLeapYear public="1" set="method"><f a=""><x path="Bool"/></f></isLeapYear>
		<lengthOfMonth public="1" set="method"><f a=""><x path="Int"/></f></lengthOfMonth>
		<lengthOfYear public="1" set="method"><f a=""><x path="Int"/></f></lengthOfYear>
		<with public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAdjuster"/>
				<c path="java.time.LocalDate"/>
			</f>
			<overloads><with public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDate"/>
</f></with></overloads>
		</with>
		<withYear public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalDate"/>
</f></withYear>
		<withMonth public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalDate"/>
</f></withMonth>
		<withDayOfMonth public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalDate"/>
</f></withDayOfMonth>
		<withDayOfYear public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalDate"/>
</f></withDayOfYear>
		<plus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.LocalDate"/>
			</f>
			<overloads><plus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.LocalDate"/>
</f></plus></overloads>
		</plus>
		<plusYears public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDate"/>
</f></plusYears>
		<plusMonths public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDate"/>
</f></plusMonths>
		<plusWeeks public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDate"/>
</f></plusWeeks>
		<plusDays public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDate"/>
</f></plusDays>
		<minus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.LocalDate"/>
			</f>
			<overloads><minus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.LocalDate"/>
</f></minus></overloads>
		</minus>
		<minusYears public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDate"/>
</f></minusYears>
		<minusMonths public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDate"/>
</f></minusMonths>
		<minusWeeks public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDate"/>
</f></minusWeeks>
		<minusDays public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDate"/>
</f></minusDays>
		<query public="1" params="R" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
	<c path="query.R"/>
</f></query>
		<adjustInto public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></adjustInto>
		<until public="1" set="method">
			<f a="param1:param2">
				<c path="java.time.temporal.Temporal"/>
				<c path="java.time.temporal.TemporalUnit"/>
				<x path="haxe.Int64"/>
			</f>
			<overloads><until public="1" set="method"><f a="param1">
	<c path="java.time.chrono.ChronoLocalDate"/>
	<c path="java.time.Period"/>
</f></until></overloads>
		</until>
		<daysUntil public="1" set="method"><f a="param1">
	<c path="java.time.LocalDate"/>
	<x path="haxe.Int64"/>
</f></daysUntil>
		<format public="1" set="method"><f a="param1">
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="String"/>
</f></format>
		<atTime public="1" set="method">
			<f a="param1">
				<c path="java.time.LocalTime"/>
				<c path="java.time.LocalDateTime"/>
			</f>
			<overloads>
				<atTime public="1" set="method"><f a="param1">
	<c path="java.time.OffsetTime"/>
	<c path="java.time.OffsetDateTime"/>
</f></atTime>
				<atTime public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></atTime>
				<atTime public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></atTime>
				<atTime public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></atTime>
			</overloads>
		</atTime>
		<atStartOfDay public="1" set="method">
			<f a=""><c path="java.time.LocalDateTime"/></f>
			<overloads><atStartOfDay public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.ZonedDateTime"/>
</f></atStartOfDay></overloads>
		</atStartOfDay>
		<toEpochDay public="1" set="method"><f a=""><x path="haxe.Int64"/></f></toEpochDay>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.ChronoLocalDate"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<compareTo0 public="1" set="method"><f a="param1">
	<c path="java.time.LocalDate"/>
	<x path="Int"/>
</f></compareTo0>
		<isAfter public="1" set="method"><f a="param1">
	<c path="java.time.chrono.ChronoLocalDate"/>
	<x path="Bool"/>
</f></isAfter>
		<isBefore public="1" set="method"><f a="param1">
	<c path="java.time.chrono.ChronoLocalDate"/>
	<x path="Bool"/>
</f></isBefore>
		<isEqual public="1" set="method"><f a="param1">
	<c path="java.time.chrono.ChronoLocalDate"/>
	<x path="Bool"/>
</f></isEqual>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<writeExternal public="1" set="method"><f a="param1">
	<c path="java.io.DataOutput"/>
	<x path="Void"/>
</f></writeExternal>
		<meta>
			<m n=":native"><e>"java.time.LocalDate"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.LocalDate_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/LocalDate$1.class" module="java.time.LocalDate" extern="1"><meta>
	<m n=":native"><e>"java.time.LocalDate$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.time.chrono.ChronoLocalDateTime" params="D" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/chrono/ChronoLocalDateTime.class" extern="1" interface="1">
		<extends path="java.lang.Comparable"><c path="java.time.chrono.ChronoLocalDateTime"><d/></c></extends>
		<extends path="java.time.temporal.TemporalAdjuster"/>
		<extends path="java.time.temporal.Temporal"/>
		<timeLineOrder public="1" set="method" static="1">
			<f a=""><c path="java.util.Comparator"><c path="java.time.chrono.ChronoLocalDateTime"><d/></c></c></f>
			<meta><m n=":java.default"/></meta>
		</timeLineOrder>
		<from public="1" set="method" static="1">
			<f a="param1">
				<c path="java.time.temporal.TemporalAccessor"/>
				<c path="java.time.chrono.ChronoLocalDateTime"><d/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</from>
		<getChronology public="1" set="method">
			<f a=""><c path="java.time.chrono.Chronology"/></f>
			<meta><m n=":java.default"/></meta>
		</getChronology>
		<toLocalDate public="1" set="method"><f a=""><c path="java.time.chrono.ChronoLocalDateTime.D"/></f></toLocalDate>
		<toLocalTime public="1" set="method"><f a=""><c path="java.time.LocalTime"/></f></toLocalTime>
		<isSupported public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Bool"/>
			</f>
			<overloads><isSupported public="1" set="method">
	<f a="param1">
		<c path="java.time.temporal.TemporalUnit"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":java.default"/></meta>
</isSupported></overloads>
		</isSupported>
		<with public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAdjuster"/>
				<c path="java.time.chrono.ChronoLocalDateTime"><c path="java.time.chrono.ChronoLocalDateTime.D"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><with public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<c path="java.time.chrono.ChronoLocalDateTime"><c path="java.time.chrono.ChronoLocalDateTime.D"/></c>
</f></with></overloads>
		</with>
		<plus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.chrono.ChronoLocalDateTime"><c path="java.time.chrono.ChronoLocalDateTime.D"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><plus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.chrono.ChronoLocalDateTime"><c path="java.time.chrono.ChronoLocalDateTime.D"/></c>
</f></plus></overloads>
		</plus>
		<minus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.chrono.ChronoLocalDateTime"><c path="java.time.chrono.ChronoLocalDateTime.D"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><minus public="1" set="method">
	<f a="param1:param2">
		<x path="haxe.Int64"/>
		<c path="java.time.temporal.TemporalUnit"/>
		<c path="java.time.chrono.ChronoLocalDateTime"><c path="java.time.chrono.ChronoLocalDateTime.D"/></c>
	</f>
	<meta><m n=":java.default"/></meta>
</minus></overloads>
		</minus>
		<query public="1" params="R" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
				<c path="query.R"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</query>
		<adjustInto public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.Temporal"/>
				<c path="java.time.temporal.Temporal"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</adjustInto>
		<format public="1" set="method">
			<f a="param1">
				<c path="java.time.format.DateTimeFormatter"/>
				<c path="String"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</format>
		<atZone public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.chrono.ChronoZonedDateTime"><c path="java.time.chrono.ChronoLocalDateTime.D"/></c>
</f></atZone>
		<toInstant public="1" set="method">
			<f a="param1">
				<c path="java.time.ZoneOffset"/>
				<c path="java.time.Instant"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</toInstant>
		<toEpochSecond public="1" set="method">
			<f a="param1">
				<c path="java.time.ZoneOffset"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</toEpochSecond>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.ChronoLocalDateTime"><d/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":java.default"/></meta>
</compareTo></overloads>
		</compareTo>
		<isAfter public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.ChronoLocalDateTime"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</isAfter>
		<isBefore public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.ChronoLocalDateTime"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</isBefore>
		<isEqual public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.ChronoLocalDateTime"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</isEqual>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.time.chrono.ChronoLocalDateTime"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.LocalDateTime" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/LocalDateTime.class" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.time.chrono.ChronoLocalDateTime"><c path="java.time.LocalDate"/></implements>
		<implements path="java.time.temporal.TemporalAdjuster"/>
		<implements path="java.time.temporal.Temporal"/>
		<now public="1" set="method" static="1">
			<f a=""><c path="java.time.LocalDateTime"/></f>
			<overloads>
				<now public="1" set="method"><f a="param1">
	<c path="java.time.Clock"/>
	<c path="java.time.LocalDateTime"/>
</f></now>
				<now public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.LocalDateTime"/>
</f></now>
			</overloads>
		</now>
		<of public="1" set="method" static="1">
			<f a="param1:param2:param3:param4:param5">
				<x path="Int"/>
				<e path="java.time.Month"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.time.LocalDateTime"/>
			</f>
			<overloads>
				<of public="1" set="method"><f a="param1:param2">
	<c path="java.time.LocalDate"/>
	<c path="java.time.LocalTime"/>
	<c path="java.time.LocalDateTime"/>
</f></of>
				<of public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></of>
				<of public="1" set="method"><f a="param1:param2:param3:param4:param5:param6">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></of>
				<of public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></of>
				<of public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7">
	<x path="Int"/>
	<e path="java.time.Month"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></of>
				<of public="1" set="method"><f a="param1:param2:param3:param4:param5:param6">
	<x path="Int"/>
	<e path="java.time.Month"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></of>
			</overloads>
		</of>
		<ofInstant public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.time.Instant"/>
	<c path="java.time.ZoneId"/>
	<c path="java.time.LocalDateTime"/>
</f></ofInstant>
		<ofEpochSecond public="1" set="method" static="1"><f a="param1:param2:param3">
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.LocalDateTime"/>
</f></ofEpochSecond>
		<from public="1" set="method" static="1"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.LocalDateTime"/>
</f></from>
		<parse public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.time.LocalDateTime"/>
			</f>
			<overloads><parse public="1" set="method"><f a="param1:param2">
	<c path="java.lang.CharSequence"/>
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="java.time.LocalDateTime"/>
</f></parse></overloads>
		</parse>
		<readExternal public="1" set="method" static="1"><f a="param1">
	<c path="java.io.DataInput"/>
	<c path="java.time.LocalDateTime"/>
</f></readExternal>
		<MIN final="1" public="1" set="null" static="1"><c path="java.time.LocalDateTime"/></MIN>
		<MAX final="1" public="1" set="null" static="1"><c path="java.time.LocalDateTime"/></MAX>
		<isSupported public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Bool"/>
			</f>
			<overloads><isSupported public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="Bool"/>
</f></isSupported></overloads>
		</isSupported>
		<range public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<c path="java.time.temporal.ValueRange"/>
</f></range>
		<get public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
</f></get>
		<getLong public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
</f></getLong>
		<toLocalDate public="1" set="method"><f a=""><c path="java.time.LocalDate"/></f></toLocalDate>
		<getYear public="1" set="method"><f a=""><x path="Int"/></f></getYear>
		<getMonthValue public="1" set="method"><f a=""><x path="Int"/></f></getMonthValue>
		<getMonth public="1" set="method"><f a=""><e path="java.time.Month"/></f></getMonth>
		<getDayOfMonth public="1" set="method"><f a=""><x path="Int"/></f></getDayOfMonth>
		<getDayOfYear public="1" set="method"><f a=""><x path="Int"/></f></getDayOfYear>
		<getDayOfWeek public="1" set="method"><f a=""><e path="java.time.DayOfWeek"/></f></getDayOfWeek>
		<toLocalTime public="1" set="method"><f a=""><c path="java.time.LocalTime"/></f></toLocalTime>
		<getHour public="1" set="method"><f a=""><x path="Int"/></f></getHour>
		<getMinute public="1" set="method"><f a=""><x path="Int"/></f></getMinute>
		<getSecond public="1" set="method"><f a=""><x path="Int"/></f></getSecond>
		<getNano public="1" set="method"><f a=""><x path="Int"/></f></getNano>
		<with public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAdjuster"/>
				<c path="java.time.LocalDateTime"/>
			</f>
			<overloads><with public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></with></overloads>
		</with>
		<withYear public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></withYear>
		<withMonth public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></withMonth>
		<withDayOfMonth public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></withDayOfMonth>
		<withDayOfYear public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></withDayOfYear>
		<withHour public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></withHour>
		<withMinute public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></withMinute>
		<withSecond public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></withSecond>
		<withNano public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalDateTime"/>
</f></withNano>
		<truncatedTo public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.LocalDateTime"/>
</f></truncatedTo>
		<plus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.LocalDateTime"/>
			</f>
			<overloads><plus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.LocalDateTime"/>
</f></plus></overloads>
		</plus>
		<plusYears public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></plusYears>
		<plusMonths public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></plusMonths>
		<plusWeeks public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></plusWeeks>
		<plusDays public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></plusDays>
		<plusHours public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></plusHours>
		<plusMinutes public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></plusMinutes>
		<plusSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></plusSeconds>
		<plusNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></plusNanos>
		<minus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.LocalDateTime"/>
			</f>
			<overloads><minus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.LocalDateTime"/>
</f></minus></overloads>
		</minus>
		<minusYears public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></minusYears>
		<minusMonths public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></minusMonths>
		<minusWeeks public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></minusWeeks>
		<minusDays public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></minusDays>
		<minusHours public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></minusHours>
		<minusMinutes public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></minusMinutes>
		<minusSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></minusSeconds>
		<minusNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDateTime"/>
</f></minusNanos>
		<query public="1" params="R" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
	<c path="query.R"/>
</f></query>
		<adjustInto public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></adjustInto>
		<until public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="haxe.Int64"/>
</f></until>
		<format public="1" set="method"><f a="param1">
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="String"/>
</f></format>
		<atOffset public="1" set="method"><f a="param1">
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.OffsetDateTime"/>
</f></atOffset>
		<atZone public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.ZonedDateTime"/>
</f></atZone>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.ChronoLocalDateTime"><d/></c>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<isAfter public="1" set="method"><f a="param1">
	<c path="java.time.chrono.ChronoLocalDateTime"><d/></c>
	<x path="Bool"/>
</f></isAfter>
		<isBefore public="1" set="method"><f a="param1">
	<c path="java.time.chrono.ChronoLocalDateTime"><d/></c>
	<x path="Bool"/>
</f></isBefore>
		<isEqual public="1" set="method"><f a="param1">
	<c path="java.time.chrono.ChronoLocalDateTime"><d/></c>
	<x path="Bool"/>
</f></isEqual>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<writeExternal public="1" set="method"><f a="param1">
	<c path="java.io.DataOutput"/>
	<x path="Void"/>
</f></writeExternal>
		<meta>
			<m n=":native"><e>"java.time.LocalDateTime"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.LocalDateTime_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/LocalDateTime$1.class" module="java.time.LocalDateTime" extern="1"><meta>
	<m n=":native"><e>"java.time.LocalDateTime$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.time.LocalTime" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/LocalTime.class" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Comparable"><c path="java.time.LocalTime"/></implements>
		<implements path="java.time.temporal.TemporalAdjuster"/>
		<implements path="java.time.temporal.Temporal"/>
		<now public="1" set="method" static="1">
			<f a=""><c path="java.time.LocalTime"/></f>
			<overloads>
				<now public="1" set="method"><f a="param1">
	<c path="java.time.Clock"/>
	<c path="java.time.LocalTime"/>
</f></now>
				<now public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.LocalTime"/>
</f></now>
			</overloads>
		</now>
		<of public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.time.LocalTime"/>
			</f>
			<overloads>
				<of public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.LocalTime"/>
</f></of>
				<of public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.LocalTime"/>
</f></of>
			</overloads>
		</of>
		<ofSecondOfDay public="1" set="method" static="1"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalTime"/>
</f></ofSecondOfDay>
		<ofNanoOfDay public="1" set="method" static="1"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalTime"/>
</f></ofNanoOfDay>
		<from public="1" set="method" static="1"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.LocalTime"/>
</f></from>
		<parse public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.time.LocalTime"/>
			</f>
			<overloads><parse public="1" set="method"><f a="param1:param2">
	<c path="java.lang.CharSequence"/>
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="java.time.LocalTime"/>
</f></parse></overloads>
		</parse>
		<readExternal public="1" set="method" static="1"><f a="param1">
	<c path="java.io.DataInput"/>
	<c path="java.time.LocalTime"/>
</f></readExternal>
		<MIN final="1" public="1" set="null" static="1"><c path="java.time.LocalTime"/></MIN>
		<MAX final="1" public="1" set="null" static="1"><c path="java.time.LocalTime"/></MAX>
		<MIDNIGHT final="1" public="1" set="null" static="1"><c path="java.time.LocalTime"/></MIDNIGHT>
		<NOON final="1" public="1" set="null" static="1"><c path="java.time.LocalTime"/></NOON>
		<HOURS_PER_DAY final="1" public="1" set="null" static="1"><x path="Int"/></HOURS_PER_DAY>
		<MINUTES_PER_HOUR final="1" public="1" set="null" static="1"><x path="Int"/></MINUTES_PER_HOUR>
		<MINUTES_PER_DAY final="1" public="1" set="null" static="1"><x path="Int"/></MINUTES_PER_DAY>
		<SECONDS_PER_MINUTE final="1" public="1" set="null" static="1"><x path="Int"/></SECONDS_PER_MINUTE>
		<SECONDS_PER_HOUR final="1" public="1" set="null" static="1"><x path="Int"/></SECONDS_PER_HOUR>
		<SECONDS_PER_DAY final="1" public="1" set="null" static="1"><x path="Int"/></SECONDS_PER_DAY>
		<MILLIS_PER_DAY final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></MILLIS_PER_DAY>
		<MICROS_PER_DAY final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></MICROS_PER_DAY>
		<NANOS_PER_SECOND final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></NANOS_PER_SECOND>
		<NANOS_PER_MINUTE final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></NANOS_PER_MINUTE>
		<NANOS_PER_HOUR final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></NANOS_PER_HOUR>
		<NANOS_PER_DAY final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></NANOS_PER_DAY>
		<isSupported public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Bool"/>
			</f>
			<overloads><isSupported public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="Bool"/>
</f></isSupported></overloads>
		</isSupported>
		<range public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<c path="java.time.temporal.ValueRange"/>
</f></range>
		<get public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
</f></get>
		<getLong public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
</f></getLong>
		<getHour public="1" set="method"><f a=""><x path="Int"/></f></getHour>
		<getMinute public="1" set="method"><f a=""><x path="Int"/></f></getMinute>
		<getSecond public="1" set="method"><f a=""><x path="Int"/></f></getSecond>
		<getNano public="1" set="method"><f a=""><x path="Int"/></f></getNano>
		<with public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAdjuster"/>
				<c path="java.time.LocalTime"/>
			</f>
			<overloads><with public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<c path="java.time.LocalTime"/>
</f></with></overloads>
		</with>
		<withHour public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalTime"/>
</f></withHour>
		<withMinute public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalTime"/>
</f></withMinute>
		<withSecond public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalTime"/>
</f></withSecond>
		<withNano public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.LocalTime"/>
</f></withNano>
		<truncatedTo public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.LocalTime"/>
</f></truncatedTo>
		<plus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.LocalTime"/>
			</f>
			<overloads><plus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.LocalTime"/>
</f></plus></overloads>
		</plus>
		<plusHours public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalTime"/>
</f></plusHours>
		<plusMinutes public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalTime"/>
</f></plusMinutes>
		<plusSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalTime"/>
</f></plusSeconds>
		<plusNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalTime"/>
</f></plusNanos>
		<minus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.LocalTime"/>
			</f>
			<overloads><minus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.LocalTime"/>
</f></minus></overloads>
		</minus>
		<minusHours public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalTime"/>
</f></minusHours>
		<minusMinutes public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalTime"/>
</f></minusMinutes>
		<minusSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalTime"/>
</f></minusSeconds>
		<minusNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalTime"/>
</f></minusNanos>
		<query public="1" params="R" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
	<c path="query.R"/>
</f></query>
		<adjustInto public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></adjustInto>
		<until public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="haxe.Int64"/>
</f></until>
		<format public="1" set="method"><f a="param1">
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="String"/>
</f></format>
		<atDate public="1" set="method"><f a="param1">
	<c path="java.time.LocalDate"/>
	<c path="java.time.LocalDateTime"/>
</f></atDate>
		<atOffset public="1" set="method"><f a="param1">
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.OffsetTime"/>
</f></atOffset>
		<toSecondOfDay public="1" set="method"><f a=""><x path="Int"/></f></toSecondOfDay>
		<toNanoOfDay public="1" set="method"><f a=""><x path="haxe.Int64"/></f></toNanoOfDay>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.time.LocalTime"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<isAfter public="1" set="method"><f a="param1">
	<c path="java.time.LocalTime"/>
	<x path="Bool"/>
</f></isAfter>
		<isBefore public="1" set="method"><f a="param1">
	<c path="java.time.LocalTime"/>
	<x path="Bool"/>
</f></isBefore>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<writeExternal public="1" set="method"><f a="param1">
	<c path="java.io.DataOutput"/>
	<x path="Void"/>
</f></writeExternal>
		<meta>
			<m n=":native"><e>"java.time.LocalTime"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.LocalTime_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/LocalTime$1.class" module="java.time.LocalTime" extern="1"><meta>
	<m n=":native"><e>"java.time.LocalTime$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<enum path="java.time.Month" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/Month.class">
		<JANUARY/>
		<FEBRUARY/>
		<MARCH/>
		<APRIL/>
		<MAY/>
		<JUNE/>
		<JULY/>
		<AUGUST/>
		<SEPTEMBER/>
		<OCTOBER/>
		<NOVEMBER/>
		<DECEMBER/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.time.Month"</e></m>
		</meta>
	</enum>
	<class path="java.time.Month_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/Month$1.class" module="java.time.Month" extern="1"><meta>
	<m n=":native"><e>"java.time.Month$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.time.OffsetDateTime" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/OffsetDateTime.class" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Comparable"><c path="java.time.OffsetDateTime"/></implements>
		<implements path="java.time.temporal.TemporalAdjuster"/>
		<implements path="java.time.temporal.Temporal"/>
		<timeLineOrder public="1" set="method" static="1"><f a=""><c path="java.util.Comparator"><c path="java.time.OffsetDateTime"/></c></f></timeLineOrder>
		<now public="1" set="method" static="1">
			<f a=""><c path="java.time.OffsetDateTime"/></f>
			<overloads>
				<now public="1" set="method"><f a="param1">
	<c path="java.time.Clock"/>
	<c path="java.time.OffsetDateTime"/>
</f></now>
				<now public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.OffsetDateTime"/>
</f></now>
			</overloads>
		</now>
		<of public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.time.LocalDate"/>
				<c path="java.time.LocalTime"/>
				<c path="java.time.ZoneOffset"/>
				<c path="java.time.OffsetDateTime"/>
			</f>
			<overloads>
				<of public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.OffsetDateTime"/>
</f></of>
				<of public="1" set="method"><f a="param1:param2">
	<c path="java.time.LocalDateTime"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.OffsetDateTime"/>
</f></of>
			</overloads>
		</of>
		<ofInstant public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.time.Instant"/>
	<c path="java.time.ZoneId"/>
	<c path="java.time.OffsetDateTime"/>
</f></ofInstant>
		<from public="1" set="method" static="1"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.OffsetDateTime"/>
</f></from>
		<parse public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.time.OffsetDateTime"/>
			</f>
			<overloads><parse public="1" set="method"><f a="param1:param2">
	<c path="java.lang.CharSequence"/>
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="java.time.OffsetDateTime"/>
</f></parse></overloads>
		</parse>
		<readExternal public="1" set="method" static="1"><f a="param1">
	<c path="java.io.ObjectInput"/>
	<c path="java.time.OffsetDateTime"/>
</f></readExternal>
		<MIN final="1" public="1" set="null" static="1"><c path="java.time.OffsetDateTime"/></MIN>
		<MAX final="1" public="1" set="null" static="1"><c path="java.time.OffsetDateTime"/></MAX>
		<isSupported public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Bool"/>
			</f>
			<overloads><isSupported public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="Bool"/>
</f></isSupported></overloads>
		</isSupported>
		<range public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<c path="java.time.temporal.ValueRange"/>
</f></range>
		<get public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
</f></get>
		<getLong public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
</f></getLong>
		<getOffset public="1" set="method"><f a=""><c path="java.time.ZoneOffset"/></f></getOffset>
		<withOffsetSameLocal public="1" set="method"><f a="param1">
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.OffsetDateTime"/>
</f></withOffsetSameLocal>
		<withOffsetSameInstant public="1" set="method"><f a="param1">
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.OffsetDateTime"/>
</f></withOffsetSameInstant>
		<toLocalDateTime public="1" set="method"><f a=""><c path="java.time.LocalDateTime"/></f></toLocalDateTime>
		<toLocalDate public="1" set="method"><f a=""><c path="java.time.LocalDate"/></f></toLocalDate>
		<getYear public="1" set="method"><f a=""><x path="Int"/></f></getYear>
		<getMonthValue public="1" set="method"><f a=""><x path="Int"/></f></getMonthValue>
		<getMonth public="1" set="method"><f a=""><e path="java.time.Month"/></f></getMonth>
		<getDayOfMonth public="1" set="method"><f a=""><x path="Int"/></f></getDayOfMonth>
		<getDayOfYear public="1" set="method"><f a=""><x path="Int"/></f></getDayOfYear>
		<getDayOfWeek public="1" set="method"><f a=""><e path="java.time.DayOfWeek"/></f></getDayOfWeek>
		<toLocalTime public="1" set="method"><f a=""><c path="java.time.LocalTime"/></f></toLocalTime>
		<getHour public="1" set="method"><f a=""><x path="Int"/></f></getHour>
		<getMinute public="1" set="method"><f a=""><x path="Int"/></f></getMinute>
		<getSecond public="1" set="method"><f a=""><x path="Int"/></f></getSecond>
		<getNano public="1" set="method"><f a=""><x path="Int"/></f></getNano>
		<with public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAdjuster"/>
				<c path="java.time.OffsetDateTime"/>
			</f>
			<overloads><with public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></with></overloads>
		</with>
		<withYear public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.OffsetDateTime"/>
</f></withYear>
		<withMonth public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.OffsetDateTime"/>
</f></withMonth>
		<withDayOfMonth public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.OffsetDateTime"/>
</f></withDayOfMonth>
		<withDayOfYear public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.OffsetDateTime"/>
</f></withDayOfYear>
		<withHour public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.OffsetDateTime"/>
</f></withHour>
		<withMinute public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.OffsetDateTime"/>
</f></withMinute>
		<withSecond public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.OffsetDateTime"/>
</f></withSecond>
		<withNano public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.OffsetDateTime"/>
</f></withNano>
		<truncatedTo public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.OffsetDateTime"/>
</f></truncatedTo>
		<plus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.OffsetDateTime"/>
			</f>
			<overloads><plus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.OffsetDateTime"/>
</f></plus></overloads>
		</plus>
		<plusYears public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></plusYears>
		<plusMonths public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></plusMonths>
		<plusWeeks public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></plusWeeks>
		<plusDays public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></plusDays>
		<plusHours public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></plusHours>
		<plusMinutes public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></plusMinutes>
		<plusSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></plusSeconds>
		<plusNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></plusNanos>
		<minus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.OffsetDateTime"/>
			</f>
			<overloads><minus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.OffsetDateTime"/>
</f></minus></overloads>
		</minus>
		<minusYears public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></minusYears>
		<minusMonths public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></minusMonths>
		<minusWeeks public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></minusWeeks>
		<minusDays public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></minusDays>
		<minusHours public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></minusHours>
		<minusMinutes public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></minusMinutes>
		<minusSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></minusSeconds>
		<minusNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetDateTime"/>
</f></minusNanos>
		<query public="1" params="R" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
	<c path="query.R"/>
</f></query>
		<adjustInto public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></adjustInto>
		<until public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="haxe.Int64"/>
</f></until>
		<format public="1" set="method"><f a="param1">
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="String"/>
</f></format>
		<atZoneSameInstant public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.ZonedDateTime"/>
</f></atZoneSameInstant>
		<atZoneSimilarLocal public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.ZonedDateTime"/>
</f></atZoneSimilarLocal>
		<toOffsetTime public="1" set="method"><f a=""><c path="java.time.OffsetTime"/></f></toOffsetTime>
		<toZonedDateTime public="1" set="method"><f a=""><c path="java.time.ZonedDateTime"/></f></toZonedDateTime>
		<toInstant public="1" set="method"><f a=""><c path="java.time.Instant"/></f></toInstant>
		<toEpochSecond public="1" set="method"><f a=""><x path="haxe.Int64"/></f></toEpochSecond>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.time.OffsetDateTime"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<isAfter public="1" set="method"><f a="param1">
	<c path="java.time.OffsetDateTime"/>
	<x path="Bool"/>
</f></isAfter>
		<isBefore public="1" set="method"><f a="param1">
	<c path="java.time.OffsetDateTime"/>
	<x path="Bool"/>
</f></isBefore>
		<isEqual public="1" set="method"><f a="param1">
	<c path="java.time.OffsetDateTime"/>
	<x path="Bool"/>
</f></isEqual>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<writeExternal public="1" set="method"><f a="param1">
	<c path="java.io.ObjectOutput"/>
	<x path="Void"/>
</f></writeExternal>
		<meta>
			<m n=":native"><e>"java.time.OffsetDateTime"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.OffsetDateTime_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/OffsetDateTime$1.class" module="java.time.OffsetDateTime" extern="1"><meta>
	<m n=":native"><e>"java.time.OffsetDateTime$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.time.OffsetTime" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/OffsetTime.class" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Comparable"><c path="java.time.OffsetTime"/></implements>
		<implements path="java.time.temporal.TemporalAdjuster"/>
		<implements path="java.time.temporal.Temporal"/>
		<now public="1" set="method" static="1">
			<f a=""><c path="java.time.OffsetTime"/></f>
			<overloads>
				<now public="1" set="method"><f a="param1">
	<c path="java.time.Clock"/>
	<c path="java.time.OffsetTime"/>
</f></now>
				<now public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.OffsetTime"/>
</f></now>
			</overloads>
		</now>
		<of public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.time.LocalTime"/>
				<c path="java.time.ZoneOffset"/>
				<c path="java.time.OffsetTime"/>
			</f>
			<overloads><of public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.OffsetTime"/>
</f></of></overloads>
		</of>
		<ofInstant public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.time.Instant"/>
	<c path="java.time.ZoneId"/>
	<c path="java.time.OffsetTime"/>
</f></ofInstant>
		<from public="1" set="method" static="1"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.OffsetTime"/>
</f></from>
		<parse public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.time.OffsetTime"/>
			</f>
			<overloads><parse public="1" set="method"><f a="param1:param2">
	<c path="java.lang.CharSequence"/>
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="java.time.OffsetTime"/>
</f></parse></overloads>
		</parse>
		<readExternal public="1" set="method" static="1"><f a="param1">
	<c path="java.io.ObjectInput"/>
	<c path="java.time.OffsetTime"/>
</f></readExternal>
		<MIN final="1" public="1" set="null" static="1"><c path="java.time.OffsetTime"/></MIN>
		<MAX final="1" public="1" set="null" static="1"><c path="java.time.OffsetTime"/></MAX>
		<isSupported public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Bool"/>
			</f>
			<overloads><isSupported public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="Bool"/>
</f></isSupported></overloads>
		</isSupported>
		<range public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<c path="java.time.temporal.ValueRange"/>
</f></range>
		<get public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
</f></get>
		<getLong public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
</f></getLong>
		<getOffset public="1" set="method"><f a=""><c path="java.time.ZoneOffset"/></f></getOffset>
		<withOffsetSameLocal public="1" set="method"><f a="param1">
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.OffsetTime"/>
</f></withOffsetSameLocal>
		<withOffsetSameInstant public="1" set="method"><f a="param1">
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.OffsetTime"/>
</f></withOffsetSameInstant>
		<toLocalTime public="1" set="method"><f a=""><c path="java.time.LocalTime"/></f></toLocalTime>
		<getHour public="1" set="method"><f a=""><x path="Int"/></f></getHour>
		<getMinute public="1" set="method"><f a=""><x path="Int"/></f></getMinute>
		<getSecond public="1" set="method"><f a=""><x path="Int"/></f></getSecond>
		<getNano public="1" set="method"><f a=""><x path="Int"/></f></getNano>
		<with public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAdjuster"/>
				<c path="java.time.OffsetTime"/>
			</f>
			<overloads><with public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetTime"/>
</f></with></overloads>
		</with>
		<withHour public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.OffsetTime"/>
</f></withHour>
		<withMinute public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.OffsetTime"/>
</f></withMinute>
		<withSecond public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.OffsetTime"/>
</f></withSecond>
		<withNano public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.OffsetTime"/>
</f></withNano>
		<truncatedTo public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.OffsetTime"/>
</f></truncatedTo>
		<plus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.OffsetTime"/>
			</f>
			<overloads><plus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.OffsetTime"/>
</f></plus></overloads>
		</plus>
		<plusHours public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetTime"/>
</f></plusHours>
		<plusMinutes public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetTime"/>
</f></plusMinutes>
		<plusSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetTime"/>
</f></plusSeconds>
		<plusNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetTime"/>
</f></plusNanos>
		<minus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.OffsetTime"/>
			</f>
			<overloads><minus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.OffsetTime"/>
</f></minus></overloads>
		</minus>
		<minusHours public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetTime"/>
</f></minusHours>
		<minusMinutes public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetTime"/>
</f></minusMinutes>
		<minusSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetTime"/>
</f></minusSeconds>
		<minusNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.OffsetTime"/>
</f></minusNanos>
		<query public="1" params="R" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
	<c path="query.R"/>
</f></query>
		<adjustInto public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></adjustInto>
		<until public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="haxe.Int64"/>
</f></until>
		<format public="1" set="method"><f a="param1">
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="String"/>
</f></format>
		<atDate public="1" set="method"><f a="param1">
	<c path="java.time.LocalDate"/>
	<c path="java.time.OffsetDateTime"/>
</f></atDate>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.time.OffsetTime"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<isAfter public="1" set="method"><f a="param1">
	<c path="java.time.OffsetTime"/>
	<x path="Bool"/>
</f></isAfter>
		<isBefore public="1" set="method"><f a="param1">
	<c path="java.time.OffsetTime"/>
	<x path="Bool"/>
</f></isBefore>
		<isEqual public="1" set="method"><f a="param1">
	<c path="java.time.OffsetTime"/>
	<x path="Bool"/>
</f></isEqual>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<writeExternal public="1" set="method"><f a="param1">
	<c path="java.io.ObjectOutput"/>
	<x path="Void"/>
</f></writeExternal>
		<meta>
			<m n=":native"><e>"java.time.OffsetTime"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.OffsetTime_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/OffsetTime$1.class" module="java.time.OffsetTime" extern="1"><meta>
	<m n=":native"><e>"java.time.OffsetTime$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.time.chrono.ChronoPeriod" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/chrono/ChronoPeriod.class" extern="1" interface="1">
		<extends path="java.time.temporal.TemporalAmount"/>
		<between public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.time.chrono.ChronoLocalDate"/>
				<c path="java.time.chrono.ChronoLocalDate"/>
				<c path="java.time.chrono.ChronoPeriod"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</between>
		<get public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="haxe.Int64"/>
</f></get>
		<getUnits public="1" set="method"><f a=""><c path="java.util.List"><c path="java.time.temporal.TemporalUnit"/></c></f></getUnits>
		<getChronology public="1" set="method"><f a=""><c path="java.time.chrono.Chronology"/></f></getChronology>
		<isZero public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":java.default"/></meta>
		</isZero>
		<isNegative public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":java.default"/></meta>
		</isNegative>
		<plus public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalAmount"/>
	<c path="java.time.chrono.ChronoPeriod"/>
</f></plus>
		<minus public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalAmount"/>
	<c path="java.time.chrono.ChronoPeriod"/>
</f></minus>
		<multipliedBy public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.chrono.ChronoPeriod"/>
</f></multipliedBy>
		<negated public="1" set="method">
			<f a=""><c path="java.time.chrono.ChronoPeriod"/></f>
			<meta><m n=":java.default"/></meta>
		</negated>
		<normalized public="1" set="method"><f a=""><c path="java.time.chrono.ChronoPeriod"/></f></normalized>
		<addTo public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></addTo>
		<subtractFrom public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></subtractFrom>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.time.chrono.ChronoPeriod"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.Period" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/Period.class" extern="1">
		<implements path="java.time.chrono.ChronoPeriod"/>
		<implements path="java.io.Serializable"/>
		<ofYears public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.time.Period"/>
</f></ofYears>
		<ofMonths public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.time.Period"/>
</f></ofMonths>
		<ofWeeks public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.time.Period"/>
</f></ofWeeks>
		<ofDays public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.time.Period"/>
</f></ofDays>
		<of public="1" set="method" static="1"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.Period"/>
</f></of>
		<from public="1" set="method" static="1"><f a="param1">
	<c path="java.time.temporal.TemporalAmount"/>
	<c path="java.time.Period"/>
</f></from>
		<parse public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<c path="java.time.Period"/>
</f></parse>
		<between public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.time.LocalDate"/>
	<c path="java.time.LocalDate"/>
	<c path="java.time.Period"/>
</f></between>
		<readExternal public="1" set="method" static="1"><f a="param1">
	<c path="java.io.DataInput"/>
	<c path="java.time.Period"/>
</f></readExternal>
		<ZERO final="1" public="1" set="null" static="1"><c path="java.time.Period"/></ZERO>
		<get public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="haxe.Int64"/>
</f></get>
		<getUnits public="1" set="method"><f a=""><c path="java.util.List"><c path="java.time.temporal.TemporalUnit"/></c></f></getUnits>
		<getChronology public="1" set="method"><f a=""><c path="java.time.chrono.IsoChronology"/></f></getChronology>
		<isZero public="1" set="method"><f a=""><x path="Bool"/></f></isZero>
		<isNegative public="1" set="method"><f a=""><x path="Bool"/></f></isNegative>
		<getYears public="1" set="method"><f a=""><x path="Int"/></f></getYears>
		<getMonths public="1" set="method"><f a=""><x path="Int"/></f></getMonths>
		<getDays public="1" set="method"><f a=""><x path="Int"/></f></getDays>
		<withYears public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.Period"/>
</f></withYears>
		<withMonths public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.Period"/>
</f></withMonths>
		<withDays public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.Period"/>
</f></withDays>
		<plus public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalAmount"/>
	<c path="java.time.Period"/>
</f></plus>
		<plusYears public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Period"/>
</f></plusYears>
		<plusMonths public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Period"/>
</f></plusMonths>
		<plusDays public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Period"/>
</f></plusDays>
		<minus public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalAmount"/>
	<c path="java.time.Period"/>
</f></minus>
		<minusYears public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Period"/>
</f></minusYears>
		<minusMonths public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Period"/>
</f></minusMonths>
		<minusDays public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.Period"/>
</f></minusDays>
		<multipliedBy public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.Period"/>
</f></multipliedBy>
		<negated public="1" set="method"><f a=""><c path="java.time.Period"/></f></negated>
		<normalized public="1" set="method"><f a=""><c path="java.time.Period"/></f></normalized>
		<toTotalMonths public="1" set="method"><f a=""><x path="haxe.Int64"/></f></toTotalMonths>
		<addTo public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></addTo>
		<subtractFrom public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></subtractFrom>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<writeExternal public="1" set="method"><f a="param1">
	<c path="java.io.DataOutput"/>
	<x path="Void"/>
</f></writeExternal>
		<meta>
			<m n=":native"><e>"java.time.Period"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.ZoneId" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/ZoneId.class" extern="1" abstract="1">
		<implements path="java.io.Serializable"/>
		<systemDefault public="1" set="method" static="1"><f a=""><c path="java.time.ZoneId"/></f></systemDefault>
		<getAvailableZoneIds public="1" set="method" static="1"><f a=""><c path="java.util.Set"><c path="String"/></c></f></getAvailableZoneIds>
		<of public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Map">
					<c path="String"/>
					<c path="String"/>
				</c>
				<c path="java.time.ZoneId"/>
			</f>
			<overloads>
				<of public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Bool"/>
	<c path="java.time.ZoneId"/>
</f></of>
				<of public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.time.ZoneId"/>
</f></of>
			</overloads>
		</of>
		<ofOffset public="1" set="method" static="1"><f a="param1:param2">
	<c path="String"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.ZoneId"/>
</f></ofOffset>
		<from public="1" set="method" static="1"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.ZoneId"/>
</f></from>
		<SHORT_IDS final="1" public="1" set="null" static="1"><c path="java.util.Map">
	<c path="String"/>
	<c path="String"/>
</c></SHORT_IDS>
		<getId abstract="1" public="1" set="method"><f a=""><c path="String"/></f></getId>
		<getDisplayName public="1" set="method"><f a="param1:param2">
	<e path="java.time.format.TextStyle"/>
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getDisplayName>
		<getRules abstract="1" public="1" set="method"><f a=""><c path="java.time.zone.ZoneRules"/></f></getRules>
		<normalized public="1" set="method"><f a=""><c path="java.time.ZoneId"/></f></normalized>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<write abstract="1" public="1" set="method"><f a="param1">
	<c path="java.io.DataOutput"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.time.ZoneId"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.ZoneId_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/ZoneId$1.class" module="java.time.ZoneId" extern="1">
		<implements path="java.time.temporal.TemporalAccessor"/>
		<isSupported public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Bool"/>
</f></isSupported>
		<getLong public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
</f></getLong>
		<query public="1" params="R" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
	<c path="query.R"/>
</f></query>
		<this_0 final="1" public="1">
			<c path="java.time.ZoneId"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.ZoneId$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.ZoneOffset" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/ZoneOffset.class" extern="1">
		<extends path="java.time.ZoneId"/>
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Comparable"><c path="java.time.ZoneOffset"/></implements>
		<implements path="java.time.temporal.TemporalAdjuster"/>
		<implements path="java.time.temporal.TemporalAccessor"/>
		<of public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.time.ZoneOffset"/>
</f></of>
		<ofHours public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.time.ZoneOffset"/>
</f></ofHours>
		<ofHoursMinutes public="1" set="method" static="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.ZoneOffset"/>
</f></ofHoursMinutes>
		<ofHoursMinutesSeconds public="1" set="method" static="1"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.ZoneOffset"/>
</f></ofHoursMinutesSeconds>
		<from public="1" set="method" static="1"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.ZoneOffset"/>
</f></from>
		<ofTotalSeconds public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.time.ZoneOffset"/>
</f></ofTotalSeconds>
		<readExternal public="1" set="method" static="1"><f a="param1">
	<c path="java.io.DataInput"/>
	<c path="java.time.ZoneOffset"/>
</f></readExternal>
		<UTC final="1" public="1" set="null" static="1"><c path="java.time.ZoneOffset"/></UTC>
		<MIN final="1" public="1" set="null" static="1"><c path="java.time.ZoneOffset"/></MIN>
		<MAX final="1" public="1" set="null" static="1"><c path="java.time.ZoneOffset"/></MAX>
		<getTotalSeconds public="1" set="method"><f a=""><x path="Int"/></f></getTotalSeconds>
		<getId public="1" set="method" override="1"><f a=""><c path="String"/></f></getId>
		<getRules public="1" set="method" override="1"><f a=""><c path="java.time.zone.ZoneRules"/></f></getRules>
		<isSupported public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Bool"/>
</f></isSupported>
		<range public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<c path="java.time.temporal.ValueRange"/>
</f></range>
		<get public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
</f></get>
		<getLong public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
</f></getLong>
		<query public="1" params="R" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
	<c path="query.R"/>
</f></query>
		<adjustInto public="1" set="method"><f a="param1">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
</f></adjustInto>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.time.ZoneOffset"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<equals public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method" override="1"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method" override="1"><f a=""><c path="String"/></f></toString>
		<write public="1" set="method" override="1"><f a="param1">
	<c path="java.io.DataOutput"/>
	<x path="Void"/>
</f></write>
		<writeExternal public="1" set="method"><f a="param1">
	<c path="java.io.DataOutput"/>
	<x path="Void"/>
</f></writeExternal>
		<meta>
			<m n=":native"><e>"java.time.ZoneOffset"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.chrono.ChronoZonedDateTime" params="D" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/chrono/ChronoZonedDateTime.class" extern="1" interface="1">
		<extends path="java.lang.Comparable"><c path="java.time.chrono.ChronoZonedDateTime"><d/></c></extends>
		<extends path="java.time.temporal.Temporal"/>
		<timeLineOrder public="1" set="method" static="1">
			<f a=""><c path="java.util.Comparator"><c path="java.time.chrono.ChronoZonedDateTime"><d/></c></c></f>
			<meta><m n=":java.default"/></meta>
		</timeLineOrder>
		<from public="1" set="method" static="1">
			<f a="param1">
				<c path="java.time.temporal.TemporalAccessor"/>
				<c path="java.time.chrono.ChronoZonedDateTime"><d/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</from>
		<range public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<c path="java.time.temporal.ValueRange"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</range>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Int"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</get>
		<getLong public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</getLong>
		<toLocalDate public="1" set="method">
			<f a=""><c path="java.time.chrono.ChronoZonedDateTime.D"/></f>
			<meta><m n=":java.default"/></meta>
		</toLocalDate>
		<toLocalTime public="1" set="method">
			<f a=""><c path="java.time.LocalTime"/></f>
			<meta><m n=":java.default"/></meta>
		</toLocalTime>
		<toLocalDateTime public="1" set="method"><f a=""><c path="java.time.chrono.ChronoLocalDateTime"><c path="java.time.chrono.ChronoZonedDateTime.D"/></c></f></toLocalDateTime>
		<getChronology public="1" set="method">
			<f a=""><c path="java.time.chrono.Chronology"/></f>
			<meta><m n=":java.default"/></meta>
		</getChronology>
		<getOffset public="1" set="method"><f a=""><c path="java.time.ZoneOffset"/></f></getOffset>
		<getZone public="1" set="method"><f a=""><c path="java.time.ZoneId"/></f></getZone>
		<withEarlierOffsetAtOverlap public="1" set="method"><f a=""><c path="java.time.chrono.ChronoZonedDateTime"><c path="java.time.chrono.ChronoZonedDateTime.D"/></c></f></withEarlierOffsetAtOverlap>
		<withLaterOffsetAtOverlap public="1" set="method"><f a=""><c path="java.time.chrono.ChronoZonedDateTime"><c path="java.time.chrono.ChronoZonedDateTime.D"/></c></f></withLaterOffsetAtOverlap>
		<withZoneSameLocal public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.chrono.ChronoZonedDateTime"><c path="java.time.chrono.ChronoZonedDateTime.D"/></c>
</f></withZoneSameLocal>
		<withZoneSameInstant public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.chrono.ChronoZonedDateTime"><c path="java.time.chrono.ChronoZonedDateTime.D"/></c>
</f></withZoneSameInstant>
		<isSupported public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Bool"/>
			</f>
			<overloads><isSupported public="1" set="method">
	<f a="param1">
		<c path="java.time.temporal.TemporalUnit"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":java.default"/></meta>
</isSupported></overloads>
		</isSupported>
		<with public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAdjuster"/>
				<c path="java.time.chrono.ChronoZonedDateTime"><c path="java.time.chrono.ChronoZonedDateTime.D"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><with public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<c path="java.time.chrono.ChronoZonedDateTime"><c path="java.time.chrono.ChronoZonedDateTime.D"/></c>
</f></with></overloads>
		</with>
		<plus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.chrono.ChronoZonedDateTime"><c path="java.time.chrono.ChronoZonedDateTime.D"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><plus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.chrono.ChronoZonedDateTime"><c path="java.time.chrono.ChronoZonedDateTime.D"/></c>
</f></plus></overloads>
		</plus>
		<minus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.chrono.ChronoZonedDateTime"><c path="java.time.chrono.ChronoZonedDateTime.D"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><minus public="1" set="method">
	<f a="param1:param2">
		<x path="haxe.Int64"/>
		<c path="java.time.temporal.TemporalUnit"/>
		<c path="java.time.chrono.ChronoZonedDateTime"><c path="java.time.chrono.ChronoZonedDateTime.D"/></c>
	</f>
	<meta><m n=":java.default"/></meta>
</minus></overloads>
		</minus>
		<query public="1" params="R" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
				<c path="query.R"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</query>
		<format public="1" set="method">
			<f a="param1">
				<c path="java.time.format.DateTimeFormatter"/>
				<c path="String"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</format>
		<toInstant public="1" set="method">
			<f a=""><c path="java.time.Instant"/></f>
			<meta><m n=":java.default"/></meta>
		</toInstant>
		<toEpochSecond public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":java.default"/></meta>
		</toEpochSecond>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.ChronoZonedDateTime"><d/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":java.default"/></meta>
</compareTo></overloads>
		</compareTo>
		<isBefore public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.ChronoZonedDateTime"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</isBefore>
		<isAfter public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.ChronoZonedDateTime"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</isAfter>
		<isEqual public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.ChronoZonedDateTime"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</isEqual>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.time.chrono.ChronoZonedDateTime"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.ZonedDateTime" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/ZonedDateTime.class" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.time.chrono.ChronoZonedDateTime"><c path="java.time.LocalDate"/></implements>
		<implements path="java.time.temporal.Temporal"/>
		<now public="1" set="method" static="1">
			<f a=""><c path="java.time.ZonedDateTime"/></f>
			<overloads>
				<now public="1" set="method"><f a="param1">
	<c path="java.time.Clock"/>
	<c path="java.time.ZonedDateTime"/>
</f></now>
				<now public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.ZonedDateTime"/>
</f></now>
			</overloads>
		</now>
		<of public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.time.LocalDate"/>
				<c path="java.time.LocalTime"/>
				<c path="java.time.ZoneId"/>
				<c path="java.time.ZonedDateTime"/>
			</f>
			<overloads>
				<of public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.ZoneId"/>
	<c path="java.time.ZonedDateTime"/>
</f></of>
				<of public="1" set="method"><f a="param1:param2">
	<c path="java.time.LocalDateTime"/>
	<c path="java.time.ZoneId"/>
	<c path="java.time.ZonedDateTime"/>
</f></of>
			</overloads>
		</of>
		<ofLocal public="1" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.time.LocalDateTime"/>
	<c path="java.time.ZoneId"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.ZonedDateTime"/>
</f></ofLocal>
		<ofInstant public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.time.Instant"/>
				<c path="java.time.ZoneId"/>
				<c path="java.time.ZonedDateTime"/>
			</f>
			<overloads><ofInstant public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.LocalDateTime"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.ZoneId"/>
	<c path="java.time.ZonedDateTime"/>
</f></ofInstant></overloads>
		</ofInstant>
		<ofStrict public="1" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.time.LocalDateTime"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.ZoneId"/>
	<c path="java.time.ZonedDateTime"/>
</f></ofStrict>
		<from public="1" set="method" static="1"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.ZonedDateTime"/>
</f></from>
		<parse public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.time.ZonedDateTime"/>
			</f>
			<overloads><parse public="1" set="method"><f a="param1:param2">
	<c path="java.lang.CharSequence"/>
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="java.time.ZonedDateTime"/>
</f></parse></overloads>
		</parse>
		<readExternal public="1" set="method" static="1"><f a="param1">
	<c path="java.io.ObjectInput"/>
	<c path="java.time.ZonedDateTime"/>
</f></readExternal>
		<isSupported public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Bool"/>
			</f>
			<overloads><isSupported public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="Bool"/>
</f></isSupported></overloads>
		</isSupported>
		<range public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<c path="java.time.temporal.ValueRange"/>
</f></range>
		<get public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
</f></get>
		<getLong public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
</f></getLong>
		<getOffset public="1" set="method"><f a=""><c path="java.time.ZoneOffset"/></f></getOffset>
		<withEarlierOffsetAtOverlap public="1" set="method"><f a=""><c path="java.time.ZonedDateTime"/></f></withEarlierOffsetAtOverlap>
		<withLaterOffsetAtOverlap public="1" set="method"><f a=""><c path="java.time.ZonedDateTime"/></f></withLaterOffsetAtOverlap>
		<getZone public="1" set="method"><f a=""><c path="java.time.ZoneId"/></f></getZone>
		<withZoneSameLocal public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.ZonedDateTime"/>
</f></withZoneSameLocal>
		<withZoneSameInstant public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.ZonedDateTime"/>
</f></withZoneSameInstant>
		<withFixedOffsetZone public="1" set="method"><f a=""><c path="java.time.ZonedDateTime"/></f></withFixedOffsetZone>
		<toLocalDateTime public="1" set="method"><f a=""><c path="java.time.LocalDateTime"/></f></toLocalDateTime>
		<toLocalDate public="1" set="method"><f a=""><c path="java.time.LocalDate"/></f></toLocalDate>
		<getYear public="1" set="method"><f a=""><x path="Int"/></f></getYear>
		<getMonthValue public="1" set="method"><f a=""><x path="Int"/></f></getMonthValue>
		<getMonth public="1" set="method"><f a=""><e path="java.time.Month"/></f></getMonth>
		<getDayOfMonth public="1" set="method"><f a=""><x path="Int"/></f></getDayOfMonth>
		<getDayOfYear public="1" set="method"><f a=""><x path="Int"/></f></getDayOfYear>
		<getDayOfWeek public="1" set="method"><f a=""><e path="java.time.DayOfWeek"/></f></getDayOfWeek>
		<toLocalTime public="1" set="method"><f a=""><c path="java.time.LocalTime"/></f></toLocalTime>
		<getHour public="1" set="method"><f a=""><x path="Int"/></f></getHour>
		<getMinute public="1" set="method"><f a=""><x path="Int"/></f></getMinute>
		<getSecond public="1" set="method"><f a=""><x path="Int"/></f></getSecond>
		<getNano public="1" set="method"><f a=""><x path="Int"/></f></getNano>
		<with public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAdjuster"/>
				<c path="java.time.ZonedDateTime"/>
			</f>
			<overloads><with public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></with></overloads>
		</with>
		<withYear public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.ZonedDateTime"/>
</f></withYear>
		<withMonth public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.ZonedDateTime"/>
</f></withMonth>
		<withDayOfMonth public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.ZonedDateTime"/>
</f></withDayOfMonth>
		<withDayOfYear public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.ZonedDateTime"/>
</f></withDayOfYear>
		<withHour public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.ZonedDateTime"/>
</f></withHour>
		<withMinute public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.ZonedDateTime"/>
</f></withMinute>
		<withSecond public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.ZonedDateTime"/>
</f></withSecond>
		<withNano public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.ZonedDateTime"/>
</f></withNano>
		<truncatedTo public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.ZonedDateTime"/>
</f></truncatedTo>
		<plus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.ZonedDateTime"/>
			</f>
			<overloads><plus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.ZonedDateTime"/>
</f></plus></overloads>
		</plus>
		<plusYears public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></plusYears>
		<plusMonths public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></plusMonths>
		<plusWeeks public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></plusWeeks>
		<plusDays public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></plusDays>
		<plusHours public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></plusHours>
		<plusMinutes public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></plusMinutes>
		<plusSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></plusSeconds>
		<plusNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></plusNanos>
		<minus public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAmount"/>
				<c path="java.time.ZonedDateTime"/>
			</f>
			<overloads><minus public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<c path="java.time.ZonedDateTime"/>
</f></minus></overloads>
		</minus>
		<minusYears public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></minusYears>
		<minusMonths public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></minusMonths>
		<minusWeeks public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></minusWeeks>
		<minusDays public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></minusDays>
		<minusHours public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></minusHours>
		<minusMinutes public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></minusMinutes>
		<minusSeconds public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></minusSeconds>
		<minusNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.ZonedDateTime"/>
</f></minusNanos>
		<query public="1" params="R" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
	<c path="query.R"/>
</f></query>
		<until public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.TemporalUnit"/>
	<x path="haxe.Int64"/>
</f></until>
		<format public="1" set="method"><f a="param1">
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="String"/>
</f></format>
		<toOffsetDateTime public="1" set="method"><f a=""><c path="java.time.OffsetDateTime"/></f></toOffsetDateTime>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<writeExternal public="1" set="method"><f a="param1">
	<c path="java.io.DataOutput"/>
	<x path="Void"/>
</f></writeExternal>
		<meta>
			<m n=":native"><e>"java.time.ZonedDateTime"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.ZonedDateTime_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/ZonedDateTime$1.class" module="java.time.ZonedDateTime" extern="1"><meta>
	<m n=":native"><e>"java.time.ZonedDateTime$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.time.chrono.Chronology" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/chrono/Chronology.class" extern="1" interface="1">
		<extends path="java.lang.Comparable"><c path="java.time.chrono.Chronology"/></extends>
		<from public="1" set="method" static="1">
			<f a="param1">
				<c path="java.time.temporal.TemporalAccessor"/>
				<c path="java.time.chrono.Chronology"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</from>
		<ofLocale public="1" set="method" static="1">
			<f a="param1">
				<c path="java.util.Locale"/>
				<c path="java.time.chrono.Chronology"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</ofLocale>
		<of public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.time.chrono.Chronology"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</of>
		<getAvailableChronologies public="1" set="method" static="1">
			<f a=""><c path="java.util.Set"><c path="java.time.chrono.Chronology"/></c></f>
			<meta><m n=":java.default"/></meta>
		</getAvailableChronologies>
		<getId public="1" set="method"><f a=""><c path="String"/></f></getId>
		<getCalendarType public="1" set="method"><f a=""><c path="String"/></f></getCalendarType>
		<date public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.time.chrono.Era"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.time.chrono.ChronoLocalDate"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads>
				<date public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></date>
				<date public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></date>
			</overloads>
		</date>
		<dateYearDay public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.time.chrono.Era"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.time.chrono.ChronoLocalDate"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><dateYearDay public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></dateYearDay></overloads>
		</dateYearDay>
		<dateEpochDay public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></dateEpochDay>
		<dateNow public="1" set="method">
			<f a=""><c path="java.time.chrono.ChronoLocalDate"/></f>
			<meta><m n=":java.default"/></meta>
			<overloads>
				<dateNow public="1" set="method">
					<f a="param1">
						<c path="java.time.Clock"/>
						<c path="java.time.chrono.ChronoLocalDate"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</dateNow>
				<dateNow public="1" set="method">
					<f a="param1">
						<c path="java.time.ZoneId"/>
						<c path="java.time.chrono.ChronoLocalDate"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</dateNow>
			</overloads>
		</dateNow>
		<localDateTime public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAccessor"/>
				<c path="java.time.chrono.ChronoLocalDateTime"><c path="java.time.chrono.ChronoLocalDate"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</localDateTime>
		<zonedDateTime public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAccessor"/>
				<c path="java.time.chrono.ChronoZonedDateTime"><c path="java.time.chrono.ChronoLocalDate"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><zonedDateTime public="1" set="method">
	<f a="param1:param2">
		<c path="java.time.Instant"/>
		<c path="java.time.ZoneId"/>
		<c path="java.time.chrono.ChronoZonedDateTime"><c path="java.time.chrono.ChronoLocalDate"/></c>
	</f>
	<meta><m n=":java.default"/></meta>
</zonedDateTime></overloads>
		</zonedDateTime>
		<isLeapYear public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Bool"/>
</f></isLeapYear>
		<prolepticYear public="1" set="method"><f a="param1:param2">
	<c path="java.time.chrono.Era"/>
	<x path="Int"/>
	<x path="Int"/>
</f></prolepticYear>
		<eraOf public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.chrono.Era"/>
</f></eraOf>
		<eras public="1" set="method"><f a=""><c path="java.util.List"><c path="java.time.chrono.Era"/></c></f></eras>
		<range public="1" set="method"><f a="param1">
	<e path="java.time.temporal.ChronoField"/>
	<c path="java.time.temporal.ValueRange"/>
</f></range>
		<getDisplayName public="1" set="method">
			<f a="param1:param2">
				<e path="java.time.format.TextStyle"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</getDisplayName>
		<resolveDate public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<c path="java.time.temporal.TemporalField"/>
		<x path="java.lang.Long"/>
	</c>
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></resolveDate>
		<period public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.time.chrono.ChronoPeriod"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</period>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.Chronology"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":java.default"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.time.chrono.Chronology"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.chrono.AbstractChronology" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/chrono/AbstractChronology.class" extern="1" abstract="1">
		<implements path="java.time.chrono.Chronology"/>
		<registerChrono public="1" set="method" static="1">
			<f a="param1">
				<c path="java.time.chrono.Chronology"/>
				<c path="java.time.chrono.Chronology"/>
			</f>
			<overloads><registerChrono public="1" set="method"><f a="param1:param2">
	<c path="java.time.chrono.Chronology"/>
	<c path="String"/>
	<c path="java.time.chrono.Chronology"/>
</f></registerChrono></overloads>
		</registerChrono>
		<ofLocale public="1" set="method" static="1"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="java.time.chrono.Chronology"/>
</f></ofLocale>
		<of public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.time.chrono.Chronology"/>
</f></of>
		<getAvailableChronologies public="1" set="method" static="1"><f a=""><c path="java.util.Set"><c path="java.time.chrono.Chronology"/></c></f></getAvailableChronologies>
		<readExternal public="1" set="method" static="1"><f a="param1">
	<c path="java.io.DataInput"/>
	<c path="java.time.chrono.Chronology"/>
</f></readExternal>
		<DATE_ORDER final="1" public="1" set="null" static="1"><c path="java.util.Comparator"><c path="java.time.chrono.ChronoLocalDate"/></c></DATE_ORDER>
		<DATE_TIME_ORDER final="1" public="1" set="null" static="1"><c path="java.util.Comparator"><c path="java.time.chrono.ChronoLocalDateTime"><c path="java.time.chrono.ChronoLocalDate"/></c></c></DATE_TIME_ORDER>
		<INSTANT_ORDER final="1" public="1" set="null" static="1"><c path="java.util.Comparator"><c path="java.time.chrono.ChronoZonedDateTime"><d/></c></c></INSTANT_ORDER>
		<resolveDate public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<c path="java.time.temporal.TemporalField"/>
		<x path="java.lang.Long"/>
	</c>
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></resolveDate>
		<resolveProlepticMonth public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<c path="java.time.temporal.TemporalField"/>
		<x path="java.lang.Long"/>
	</c>
	<e path="java.time.format.ResolverStyle"/>
	<x path="Void"/>
</f></resolveProlepticMonth>
		<resolveYearOfEra public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<c path="java.time.temporal.TemporalField"/>
		<x path="java.lang.Long"/>
	</c>
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></resolveYearOfEra>
		<resolveYMD public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<c path="java.time.temporal.TemporalField"/>
		<x path="java.lang.Long"/>
	</c>
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></resolveYMD>
		<resolveYD public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<c path="java.time.temporal.TemporalField"/>
		<x path="java.lang.Long"/>
	</c>
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></resolveYD>
		<resolveYMAA public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<c path="java.time.temporal.TemporalField"/>
		<x path="java.lang.Long"/>
	</c>
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></resolveYMAA>
		<resolveYMAD public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<c path="java.time.temporal.TemporalField"/>
		<x path="java.lang.Long"/>
	</c>
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></resolveYMAD>
		<resolveYAA public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<c path="java.time.temporal.TemporalField"/>
		<x path="java.lang.Long"/>
	</c>
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></resolveYAA>
		<resolveYAD public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<c path="java.time.temporal.TemporalField"/>
		<x path="java.lang.Long"/>
	</c>
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></resolveYAD>
		<resolveAligned public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.time.chrono.ChronoLocalDate"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></resolveAligned>
		<addFieldValue public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Map">
		<c path="java.time.temporal.TemporalField"/>
		<x path="java.lang.Long"/>
	</c>
	<e path="java.time.temporal.ChronoField"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addFieldValue>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.Chronology"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<writeReplace public="1" set="method"><f a=""><d/></f></writeReplace>
		<writeExternal public="1" set="method"><f a="param1">
	<c path="java.io.DataOutput"/>
	<x path="Void"/>
</f></writeExternal>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.time.chrono.AbstractChronology"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.chrono.ChronoZonedDateTime_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/chrono/ChronoZonedDateTime$1.class" module="java.time.chrono.ChronoZonedDateTime" extern="1"><meta>
	<m n=":native"><e>"java.time.chrono.ChronoZonedDateTime$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.time.chrono.Chronology_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/chrono/Chronology$1.class" module="java.time.chrono.Chronology" extern="1">
		<implements path="java.time.temporal.TemporalAccessor"/>
		<isSupported public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Bool"/>
</f></isSupported>
		<getLong public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
</f></getLong>
		<query public="1" params="R" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
	<c path="query.R"/>
</f></query>
		<this_0 final="1" public="1">
			<c path="java.time.chrono.Chronology"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.time.chrono.Chronology"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.chrono.Chronology$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.chrono.Era" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/chrono/Era.class" extern="1" interface="1">
		<extends path="java.time.temporal.TemporalAccessor"/>
		<extends path="java.time.temporal.TemporalAdjuster"/>
		<getValue public="1" set="method"><f a=""><x path="Int"/></f></getValue>
		<isSupported public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</isSupported>
		<range public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<c path="java.time.temporal.ValueRange"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</range>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Int"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</get>
		<getLong public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</getLong>
		<query public="1" params="R" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
				<c path="query.R"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</query>
		<adjustInto public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.Temporal"/>
				<c path="java.time.temporal.Temporal"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</adjustInto>
		<getDisplayName public="1" set="method">
			<f a="param1:param2">
				<e path="java.time.format.TextStyle"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</getDisplayName>
		<meta>
			<m n=":native"><e>"java.time.chrono.Era"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.chrono.IsoChronology" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/chrono/IsoChronology.class" extern="1">
		<extends path="java.time.chrono.AbstractChronology"/>
		<implements path="java.io.Serializable"/>
		<INSTANCE final="1" public="1" set="null" static="1"><c path="java.time.chrono.IsoChronology"/></INSTANCE>
		<getId public="1" set="method"><f a=""><c path="String"/></f></getId>
		<getCalendarType public="1" set="method"><f a=""><c path="String"/></f></getCalendarType>
		<date public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.time.chrono.Era"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.time.LocalDate"/>
			</f>
			<overloads>
				<date public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.LocalDate"/>
</f></date>
				<date public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.LocalDate"/>
</f></date>
			</overloads>
		</date>
		<dateYearDay public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.time.chrono.Era"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.time.LocalDate"/>
			</f>
			<overloads><dateYearDay public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.LocalDate"/>
</f></dateYearDay></overloads>
		</dateYearDay>
		<dateEpochDay public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.time.LocalDate"/>
</f></dateEpochDay>
		<localDateTime public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.LocalDateTime"/>
</f></localDateTime>
		<zonedDateTime public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalAccessor"/>
				<c path="java.time.ZonedDateTime"/>
			</f>
			<overloads><zonedDateTime public="1" set="method"><f a="param1:param2">
	<c path="java.time.Instant"/>
	<c path="java.time.ZoneId"/>
	<c path="java.time.ZonedDateTime"/>
</f></zonedDateTime></overloads>
		</zonedDateTime>
		<dateNow public="1" set="method">
			<f a=""><c path="java.time.LocalDate"/></f>
			<overloads>
				<dateNow public="1" set="method"><f a="param1">
	<c path="java.time.Clock"/>
	<c path="java.time.LocalDate"/>
</f></dateNow>
				<dateNow public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.LocalDate"/>
</f></dateNow>
			</overloads>
		</dateNow>
		<isLeapYear public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Bool"/>
</f></isLeapYear>
		<prolepticYear public="1" set="method"><f a="param1:param2">
	<c path="java.time.chrono.Era"/>
	<x path="Int"/>
	<x path="Int"/>
</f></prolepticYear>
		<eraOf public="1" set="method"><f a="param1">
	<x path="Int"/>
	<e path="java.time.chrono.IsoEra"/>
</f></eraOf>
		<eras public="1" set="method"><f a=""><c path="java.util.List"><c path="java.time.chrono.Era"/></c></f></eras>
		<resolveDate public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="java.util.Map">
					<c path="java.time.temporal.TemporalField"/>
					<x path="java.lang.Long"/>
				</c>
				<e path="java.time.format.ResolverStyle"/>
				<c path="java.time.LocalDate"/>
			</f>
			<overloads><resolveDate public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<d/>
		<d/>
	</c>
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></resolveDate></overloads>
		</resolveDate>
		<resolveProlepticMonth public="1" set="method" override="1"><f a="param1:param2">
	<c path="java.util.Map">
		<c path="java.time.temporal.TemporalField"/>
		<x path="java.lang.Long"/>
	</c>
	<e path="java.time.format.ResolverStyle"/>
	<x path="Void"/>
</f></resolveProlepticMonth>
		<resolveYearOfEra public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="java.util.Map">
					<c path="java.time.temporal.TemporalField"/>
					<x path="java.lang.Long"/>
				</c>
				<e path="java.time.format.ResolverStyle"/>
				<c path="java.time.LocalDate"/>
			</f>
			<overloads><resolveYearOfEra public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<d/>
		<d/>
	</c>
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></resolveYearOfEra></overloads>
		</resolveYearOfEra>
		<resolveYMD public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="java.util.Map">
					<c path="java.time.temporal.TemporalField"/>
					<x path="java.lang.Long"/>
				</c>
				<e path="java.time.format.ResolverStyle"/>
				<c path="java.time.LocalDate"/>
			</f>
			<overloads><resolveYMD public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<d/>
		<d/>
	</c>
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
</f></resolveYMD></overloads>
		</resolveYMD>
		<range public="1" set="method"><f a="param1">
	<e path="java.time.temporal.ChronoField"/>
	<c path="java.time.temporal.ValueRange"/>
</f></range>
		<period public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.Period"/>
</f></period>
		<writeReplace public="1" set="method" override="1"><f a=""><d/></f></writeReplace>
		<meta>
			<m n=":native"><e>"java.time.chrono.IsoChronology"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.time.chrono.IsoEra" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/chrono/IsoEra.class">
		<BCE/>
		<CE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.time.chrono.IsoEra"</e></m>
		</meta>
	</enum>
	<class path="java.time.format.DateTimeFormatter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatter.class" extern="1">
		<ofPattern public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.time.format.DateTimeFormatter"/>
			</f>
			<overloads><ofPattern public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.util.Locale"/>
	<c path="java.time.format.DateTimeFormatter"/>
</f></ofPattern></overloads>
		</ofPattern>
		<ofLocalizedDate public="1" set="method" static="1"><f a="param1">
	<e path="java.time.format.FormatStyle"/>
	<c path="java.time.format.DateTimeFormatter"/>
</f></ofLocalizedDate>
		<ofLocalizedTime public="1" set="method" static="1"><f a="param1">
	<e path="java.time.format.FormatStyle"/>
	<c path="java.time.format.DateTimeFormatter"/>
</f></ofLocalizedTime>
		<ofLocalizedDateTime public="1" set="method" static="1">
			<f a="param1">
				<e path="java.time.format.FormatStyle"/>
				<c path="java.time.format.DateTimeFormatter"/>
			</f>
			<overloads><ofLocalizedDateTime public="1" set="method"><f a="param1:param2">
	<e path="java.time.format.FormatStyle"/>
	<e path="java.time.format.FormatStyle"/>
	<c path="java.time.format.DateTimeFormatter"/>
</f></ofLocalizedDateTime></overloads>
		</ofLocalizedDateTime>
		<parsedExcessDays final="1" public="1" set="method" static="1"><f a=""><c path="java.time.temporal.TemporalQuery"><c path="java.time.Period"/></c></f></parsedExcessDays>
		<parsedLeapSecond final="1" public="1" set="method" static="1"><f a=""><c path="java.time.temporal.TemporalQuery"><x path="java.lang.Boolean"/></c></f></parsedLeapSecond>
		<ISO_LOCAL_DATE final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></ISO_LOCAL_DATE>
		<ISO_OFFSET_DATE final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></ISO_OFFSET_DATE>
		<ISO_DATE final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></ISO_DATE>
		<ISO_LOCAL_TIME final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></ISO_LOCAL_TIME>
		<ISO_OFFSET_TIME final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></ISO_OFFSET_TIME>
		<ISO_TIME final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></ISO_TIME>
		<ISO_LOCAL_DATE_TIME final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></ISO_LOCAL_DATE_TIME>
		<ISO_OFFSET_DATE_TIME final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></ISO_OFFSET_DATE_TIME>
		<ISO_ZONED_DATE_TIME final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></ISO_ZONED_DATE_TIME>
		<ISO_DATE_TIME final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></ISO_DATE_TIME>
		<ISO_ORDINAL_DATE final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></ISO_ORDINAL_DATE>
		<ISO_WEEK_DATE final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></ISO_WEEK_DATE>
		<ISO_INSTANT final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></ISO_INSTANT>
		<BASIC_ISO_DATE final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></BASIC_ISO_DATE>
		<RFC_1123_DATE_TIME final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatter"/></RFC_1123_DATE_TIME>
		<getLocale public="1" set="method"><f a=""><c path="java.util.Locale"/></f></getLocale>
		<withLocale public="1" set="method"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="java.time.format.DateTimeFormatter"/>
</f></withLocale>
		<getDecimalStyle public="1" set="method"><f a=""><c path="java.time.format.DecimalStyle"/></f></getDecimalStyle>
		<withDecimalStyle public="1" set="method"><f a="param1">
	<c path="java.time.format.DecimalStyle"/>
	<c path="java.time.format.DateTimeFormatter"/>
</f></withDecimalStyle>
		<getChronology public="1" set="method"><f a=""><c path="java.time.chrono.Chronology"/></f></getChronology>
		<withChronology public="1" set="method"><f a="param1">
	<c path="java.time.chrono.Chronology"/>
	<c path="java.time.format.DateTimeFormatter"/>
</f></withChronology>
		<getZone public="1" set="method"><f a=""><c path="java.time.ZoneId"/></f></getZone>
		<withZone public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<c path="java.time.format.DateTimeFormatter"/>
</f></withZone>
		<getResolverStyle public="1" set="method"><f a=""><e path="java.time.format.ResolverStyle"/></f></getResolverStyle>
		<withResolverStyle public="1" set="method"><f a="param1">
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.time.format.DateTimeFormatter"/>
</f></withResolverStyle>
		<getResolverFields public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.time.temporal.TemporalField"/></c></f></getResolverFields>
		<withResolverFields public="1" set="method">
			<f a="param1">
				<x path="haxe.Rest"><c path="java.time.temporal.TemporalField"/></x>
				<c path="java.time.format.DateTimeFormatter"/>
			</f>
			<overloads><withResolverFields public="1" set="method"><f a="param1">
	<c path="java.util.Set"><c path="java.time.temporal.TemporalField"/></c>
	<c path="java.time.format.DateTimeFormatter"/>
</f></withResolverFields></overloads>
		</withResolverFields>
		<format public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="String"/>
</f></format>
		<formatTo public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.lang.Appendable"/>
	<x path="Void"/>
</f></formatTo>
		<parse public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.time.temporal.TemporalAccessor"/>
			</f>
			<overloads>
				<parse public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.lang.CharSequence"/>
	<c path="java.time.temporal.TemporalQuery"><c path="parse.T"/></c>
	<c path="parse.T"/>
</f></parse>
				<parse public="1" set="method"><f a="param1:param2">
	<c path="java.lang.CharSequence"/>
	<c path="java.text.ParsePosition"/>
	<c path="java.time.temporal.TemporalAccessor"/>
</f></parse>
			</overloads>
		</parse>
		<parseBest public="1" set="method"><f a="param1:param2">
	<c path="java.lang.CharSequence"/>
	<x path="haxe.Rest"><c path="java.time.temporal.TemporalQuery"><d/></c></x>
	<c path="java.time.temporal.TemporalAccessor"/>
</f></parseBest>
		<parseUnresolved public="1" set="method"><f a="param1:param2">
	<c path="java.lang.CharSequence"/>
	<c path="java.text.ParsePosition"/>
	<c path="java.time.temporal.TemporalAccessor"/>
</f></parseUnresolved>
		<toPrinterParser public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<c path="java.time.format.DateTimeFormatterBuilder_CompositePrinterParser"/>
</f></toPrinterParser>
		<toFormat public="1" set="method">
			<f a=""><c path="java.text.Format"/></f>
			<overloads><toFormat public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalQuery"><d/></c>
	<c path="java.text.Format"/>
</f></toFormat></overloads>
		</toFormat>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7">
	<c path="java.time.format.DateTimeFormatterBuilder_CompositePrinterParser"/>
	<c path="java.util.Locale"/>
	<c path="java.time.format.DecimalStyle"/>
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.util.Set"><c path="java.time.temporal.TemporalField"/></c>
	<c path="java.time.chrono.Chronology"/>
	<c path="java.time.ZoneId"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatter_ClassicFormat" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatter$ClassicFormat.class" module="java.time.format.DateTimeFormatter" extern="1">
		<extends path="java.text.Format"/>
		<format public="1" set="method" override="1"><f a="param1:param2:param3">
	<d/>
	<c path="java.lang.StringBuffer"/>
	<c path="java.text.FieldPosition"/>
	<c path="java.lang.StringBuffer"/>
</f></format>
		<parseObject public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<d/>
			</f>
			<overloads><parseObject public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.text.ParsePosition"/>
	<d/>
</f></parseObject></overloads>
		</parseObject>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="java.time.temporal.TemporalQuery"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatter$ClassicFormat"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder.class" extern="1">
		<getLocalizedDateTimePattern public="1" set="method" static="1"><f a="param1:param2:param3:param4">
	<e path="java.time.format.FormatStyle"/>
	<e path="java.time.format.FormatStyle"/>
	<c path="java.time.chrono.Chronology"/>
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getLocalizedDateTimePattern>
		<LENGTH_SORT final="1" public="1" set="null" static="1"><c path="java.util.Comparator"><c path="String"/></c></LENGTH_SORT>
		<parseCaseSensitive public="1" set="method"><f a=""><c path="java.time.format.DateTimeFormatterBuilder"/></f></parseCaseSensitive>
		<parseCaseInsensitive public="1" set="method"><f a=""><c path="java.time.format.DateTimeFormatterBuilder"/></f></parseCaseInsensitive>
		<parseStrict public="1" set="method"><f a=""><c path="java.time.format.DateTimeFormatterBuilder"/></f></parseStrict>
		<parseLenient public="1" set="method"><f a=""><c path="java.time.format.DateTimeFormatterBuilder"/></f></parseLenient>
		<parseDefaulting public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></parseDefaulting>
		<appendValue public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<c path="java.time.format.DateTimeFormatterBuilder"/>
			</f>
			<overloads>
				<appendValue public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="java.time.format.SignStyle"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendValue>
				<appendValue public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendValue>
			</overloads>
		</appendValue>
		<appendValueReduced public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.time.format.DateTimeFormatterBuilder"/>
			</f>
			<overloads><appendValueReduced public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendValueReduced></overloads>
		</appendValueReduced>
		<appendFraction public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendFraction>
		<appendText public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalField"/>
				<c path="java.time.format.DateTimeFormatterBuilder"/>
			</f>
			<overloads>
				<appendText public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<c path="java.util.Map">
		<x path="java.lang.Long"/>
		<c path="String"/>
	</c>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendText>
				<appendText public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<e path="java.time.format.TextStyle"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendText>
			</overloads>
		</appendText>
		<appendInstant public="1" set="method">
			<f a=""><c path="java.time.format.DateTimeFormatterBuilder"/></f>
			<overloads><appendInstant public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendInstant></overloads>
		</appendInstant>
		<appendOffsetId public="1" set="method"><f a=""><c path="java.time.format.DateTimeFormatterBuilder"/></f></appendOffsetId>
		<appendOffset public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendOffset>
		<appendLocalizedOffset public="1" set="method"><f a="param1">
	<e path="java.time.format.TextStyle"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendLocalizedOffset>
		<appendZoneId public="1" set="method"><f a=""><c path="java.time.format.DateTimeFormatterBuilder"/></f></appendZoneId>
		<appendZoneRegionId public="1" set="method"><f a=""><c path="java.time.format.DateTimeFormatterBuilder"/></f></appendZoneRegionId>
		<appendZoneOrOffsetId public="1" set="method"><f a=""><c path="java.time.format.DateTimeFormatterBuilder"/></f></appendZoneOrOffsetId>
		<appendZoneText public="1" set="method">
			<f a="param1">
				<e path="java.time.format.TextStyle"/>
				<c path="java.time.format.DateTimeFormatterBuilder"/>
			</f>
			<overloads><appendZoneText public="1" set="method"><f a="param1:param2">
	<e path="java.time.format.TextStyle"/>
	<c path="java.util.Set"><c path="java.time.ZoneId"/></c>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendZoneText></overloads>
		</appendZoneText>
		<appendChronologyId public="1" set="method"><f a=""><c path="java.time.format.DateTimeFormatterBuilder"/></f></appendChronologyId>
		<appendChronologyText public="1" set="method"><f a="param1">
	<e path="java.time.format.TextStyle"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendChronologyText>
		<appendLocalized public="1" set="method"><f a="param1:param2">
	<e path="java.time.format.FormatStyle"/>
	<e path="java.time.format.FormatStyle"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendLocalized>
		<appendLiteral public="1" set="method">
			<f a="param1">
				<t path="java.types.Char16"/>
				<c path="java.time.format.DateTimeFormatterBuilder"/>
			</f>
			<overloads><appendLiteral public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendLiteral></overloads>
		</appendLiteral>
		<append public="1" set="method"><f a="param1">
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></append>
		<appendOptional public="1" set="method"><f a="param1">
	<c path="java.time.format.DateTimeFormatter"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendOptional>
		<appendPattern public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></appendPattern>
		<padNext public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.time.format.DateTimeFormatterBuilder"/>
			</f>
			<overloads><padNext public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<t path="java.types.Char16"/>
	<c path="java.time.format.DateTimeFormatterBuilder"/>
</f></padNext></overloads>
		</padNext>
		<optionalStart public="1" set="method"><f a=""><c path="java.time.format.DateTimeFormatterBuilder"/></f></optionalStart>
		<optionalEnd public="1" set="method"><f a=""><c path="java.time.format.DateTimeFormatterBuilder"/></f></optionalEnd>
		<toFormatter public="1" set="method">
			<f a=""><c path="java.time.format.DateTimeFormatter"/></f>
			<overloads>
				<toFormatter public="1" set="method"><f a="param1:param2">
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.time.chrono.Chronology"/>
	<c path="java.time.format.DateTimeFormatter"/>
</f></toFormatter>
				<toFormatter public="1" set="method"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="java.time.format.DateTimeFormatter"/>
</f></toFormatter>
			</overloads>
		</toFormatter>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$DateTimePrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1" interface="1">
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$DateTimePrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_ZoneIdPrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$ZoneIdPrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<getTree public="1" set="method"><f a="param1">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.time.format.DateTimeFormatterBuilder_PrefixTree"/>
</f></getTree>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalQuery"><c path="java.time.ZoneId"/></c>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_ZoneTextPrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$ZoneTextPrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<extends path="java.time.format.DateTimeFormatterBuilder_ZoneIdPrinterParser"/>
		<format public="1" set="method" override="1"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<getTree public="1" set="method" override="1"><f a="param1">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.time.format.DateTimeFormatterBuilder_PrefixTree"/>
</f></getTree>
		<new public="1" set="method"><f a="param1:param2">
	<e path="java.time.format.TextStyle"/>
	<c path="java.util.Set"><c path="java.time.ZoneId"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$ZoneTextPrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_WeekBasedFieldPrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$WeekBasedFieldPrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2">
	<t path="java.types.Char16"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_TextPrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$TextPrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.temporal.TemporalField"/>
	<e path="java.time.format.TextStyle"/>
	<c path="java.time.format.DateTimeTextProvider"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$TextPrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_StringLiteralPrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$StringLiteralPrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.time.format.DateTimeFormatterBuilder_SettingsParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$SettingsParser.class" module="java.time.format.DateTimeFormatterBuilder">
		<SENSITIVE/>
		<INSENSITIVE/>
		<STRICT/>
		<LENIENT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$SettingsParser"</e></m>
		</meta>
	</enum>
	<class path="java.time.format.DateTimeFormatterBuilder_NumberPrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$NumberPrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<EXCEED_POINTS final="1" public="1" set="null" static="1"><c path="java.NativeArray"><x path="haxe.Int64"/></c></EXCEED_POINTS>
		<withFixedWidth public="1" set="method"><f a=""><c path="java.time.format.DateTimeFormatterBuilder_NumberPrinterParser"/></f></withFixedWidth>
		<withSubsequentWidth public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.format.DateTimeFormatterBuilder_NumberPrinterParser"/>
</f></withSubsequentWidth>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<getValue public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></getValue>
		<isFixedWidth public="1" set="method"><f a="param1">
	<c path="java.time.format.DateTimeParseContext"/>
	<x path="Bool"/>
</f></isFixedWidth>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<setValue public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.time.format.DateTimeParseContext"/>
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></setValue>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<field final="1" public="1"><c path="java.time.temporal.TemporalField"/></field>
		<minWidth final="1" public="1"><x path="Int"/></minWidth>
		<maxWidth final="1" public="1"><x path="Int"/></maxWidth>
		<subsequentWidth final="1" public="1"><x path="Int"/></subsequentWidth>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Int"/>
				<x path="Int"/>
				<e path="java.time.format.SignStyle"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="java.time.format.SignStyle"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$NumberPrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_ReducedPrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$ReducedPrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<extends path="java.time.format.DateTimeFormatterBuilder_NumberPrinterParser"/>
		<BASE_DATE final="1" public="1" set="null" static="1"><c path="java.time.LocalDate"/></BASE_DATE>
		<getValue public="1" set="method" override="1"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></getValue>
		<setValue public="1" set="method" override="1"><f a="param1:param2:param3:param4">
	<c path="java.time.format.DateTimeParseContext"/>
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></setValue>
		<withFixedWidth public="1" set="method" override="1"><f a=""><c path="java.time.format.DateTimeFormatterBuilder_ReducedPrinterParser"/></f></withFixedWidth>
		<withSubsequentWidth public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.time.format.DateTimeFormatterBuilder_ReducedPrinterParser"/>
</f></withSubsequentWidth>
		<isFixedWidth public="1" set="method" override="1"><f a="param1">
	<c path="java.time.format.DateTimeParseContext"/>
	<x path="Bool"/>
</f></isFixedWidth>
		<toString public="1" set="method" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4:param5">
				<c path="java.time.temporal.TemporalField"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.time.chrono.ChronoLocalDate"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.time.chrono.ChronoLocalDate"/>
	<x path="Int"/>
	<c path="java.time.format.DateTimeFormatterBuilder_1"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_PrefixTree" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$PrefixTree.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<newTree public="1" set="method" static="1">
			<f a="param1">
				<c path="java.time.format.DateTimeParseContext"/>
				<c path="java.time.format.DateTimeFormatterBuilder_PrefixTree"/>
			</f>
			<overloads><newTree public="1" set="method"><f a="param1:param2">
	<c path="java.util.Set"><c path="String"/></c>
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.time.format.DateTimeFormatterBuilder_PrefixTree"/>
</f></newTree></overloads>
		</newTree>
		<copyTree public="1" set="method"><f a=""><c path="java.time.format.DateTimeFormatterBuilder_PrefixTree"/></f></copyTree>
		<add public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></add>
		<match public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.lang.CharSequence"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<overloads><match public="1" set="method"><f a="param1:param2">
	<c path="java.lang.CharSequence"/>
	<c path="java.text.ParsePosition"/>
	<c path="String"/>
</f></match></overloads>
		</match>
		<toKey public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></toKey>
		<newNode public="1" set="method"><f a="param1:param2:param3">
	<c path="String"/>
	<c path="String"/>
	<c path="java.time.format.DateTimeFormatterBuilder_PrefixTree"/>
	<c path="java.time.format.DateTimeFormatterBuilder_PrefixTree"/>
</f></newNode>
		<isEqual public="1" set="method"><f a="param1:param2">
	<t path="java.types.Char16"/>
	<t path="java.types.Char16"/>
	<x path="Bool"/>
</f></isEqual>
		<prefixOf public="1" set="method"><f a="param1:param2:param3">
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></prefixOf>
		<key public="1"><c path="String"/></key>
		<value public="1"><c path="String"/></value>
		<c0 public="1"><t path="java.types.Char16"/></c0>
		<child public="1"><c path="java.time.format.DateTimeFormatterBuilder_PrefixTree"/></child>
		<sibling public="1"><c path="java.time.format.DateTimeFormatterBuilder_PrefixTree"/></sibling>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="String"/>
	<c path="String"/>
	<c path="java.time.format.DateTimeFormatterBuilder_PrefixTree"/>
	<c path="java.time.format.DateTimeFormatterBuilder_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$PrefixTree"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_PrefixTree_CI" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$PrefixTree$CI.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<extends path="java.time.format.DateTimeFormatterBuilder_PrefixTree"/>
		<newNode public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="String"/>
	<c path="String"/>
	<c path="java.time.format.DateTimeFormatterBuilder_PrefixTree"/>
	<c path="java.time.format.DateTimeFormatterBuilder_PrefixTree_CI"/>
</f></newNode>
		<isEqual public="1" set="method" override="1"><f a="param1:param2">
	<t path="java.types.Char16"/>
	<t path="java.types.Char16"/>
	<x path="Bool"/>
</f></isEqual>
		<prefixOf public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></prefixOf>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="String"/>
	<c path="String"/>
	<c path="java.time.format.DateTimeFormatterBuilder_PrefixTree"/>
	<c path="java.time.format.DateTimeFormatterBuilder_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$PrefixTree$CI"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_PrefixTree_LENIENT" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$PrefixTree$LENIENT.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<extends path="java.time.format.DateTimeFormatterBuilder_PrefixTree_CI"/>
		<newNode public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="String"/>
	<c path="String"/>
	<c path="java.time.format.DateTimeFormatterBuilder_PrefixTree"/>
	<c path="java.time.format.DateTimeFormatterBuilder_PrefixTree_CI"/>
</f></newNode>
		<toKey public="1" set="method" override="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></toKey>
		<match public="1" set="method" override="1"><f a="param1:param2">
	<c path="java.lang.CharSequence"/>
	<c path="java.text.ParsePosition"/>
	<c path="String"/>
</f></match>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$PrefixTree$LENIENT"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_PadPrinterParserDecorator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$PadPrinterParserDecorator.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
	<x path="Int"/>
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_OffsetIdPrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$OffsetIdPrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<PATTERNS final="1" public="1" set="null" static="1"><c path="java.NativeArray"><c path="String"/></c></PATTERNS>
		<INSTANCE_ID_Z final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatterBuilder_OffsetIdPrinterParser"/></INSTANCE_ID_Z>
		<INSTANCE_ID_ZERO final="1" public="1" set="null" static="1"><c path="java.time.format.DateTimeFormatterBuilder_OffsetIdPrinterParser"/></INSTANCE_ID_ZERO>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_LocalizedPrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$LocalizedPrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2">
	<e path="java.time.format.FormatStyle"/>
	<e path="java.time.format.FormatStyle"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_LocalizedOffsetIdPrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<getDigit public="1" set="method"><f a="param1:param2">
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getDigit>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1">
	<e path="java.time.format.TextStyle"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_InstantPrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$InstantPrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$InstantPrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_FractionPrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$FractionPrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$FractionPrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_DefaultValueParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$DefaultValueParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$DefaultValueParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_CompositePrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$CompositePrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<withOptional public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<c path="java.time.format.DateTimeFormatterBuilder_CompositePrinterParser"/>
</f></withOptional>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.List"><c path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$CompositePrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_ChronoPrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$ChronoPrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<new public="1" set="method"><f a="param1">
	<e path="java.time.format.TextStyle"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$ChronoPrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_CharLiteralPrinterParser" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$CharLiteralPrinterParser.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.time.format.DateTimeFormatterBuilder_DateTimePrinterParser"/>
		<format public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimePrintContext"/>
	<c path="java.lang.StringBuilder"/>
	<x path="Bool"/>
</f></format>
		<parse public="1" set="method"><f a="param1:param2:param3">
	<c path="java.time.format.DateTimeParseContext"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
</f></parse>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$3.class" module="java.time.format.DateTimeFormatterBuilder" extern="1"><meta>
	<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$3"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.time.format.DateTimeFormatterBuilder_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$2.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<implements path="java.util.Comparator"><c path="String"/></implements>
		<compare public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<overloads><compare public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compare></overloads>
		</compare>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeTextProvider" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeTextProvider.class" extern="1">
		<getInstance public="1" set="method" static="1"><f a=""><c path="java.time.format.DateTimeTextProvider"/></f></getInstance>
		<getLocalizedResource public="1" params="T" set="method" static="1"><f a="param1:param2">
	<c path="String"/>
	<c path="java.util.Locale"/>
	<c path="getLocalizedResource.T"/>
</f></getLocalizedResource>
		<getText public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.time.temporal.TemporalField"/>
				<x path="haxe.Int64"/>
				<e path="java.time.format.TextStyle"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<overloads><getText public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.time.chrono.Chronology"/>
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<e path="java.time.format.TextStyle"/>
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getText></overloads>
		</getText>
		<getTextIterator public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.time.temporal.TemporalField"/>
				<e path="java.time.format.TextStyle"/>
				<c path="java.util.Locale"/>
				<c path="java.util.Iterator"><c path="java.util.Map_Entry">
	<c path="String"/>
	<x path="java.lang.Long"/>
</c></c>
			</f>
			<overloads><getTextIterator public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.time.chrono.Chronology"/>
	<c path="java.time.temporal.TemporalField"/>
	<e path="java.time.format.TextStyle"/>
	<c path="java.util.Locale"/>
	<c path="java.util.Iterator"><c path="java.util.Map_Entry">
	<c path="String"/>
	<x path="java.lang.Long"/>
</c></c>
</f></getTextIterator></overloads>
		</getTextIterator>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeTextProvider"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeFormatterBuilder_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeFormatterBuilder$1.class" module="java.time.format.DateTimeFormatterBuilder" extern="1">
		<extends path="java.time.format.DateTimeTextProvider"/>
		<getText public="1" set="method" override="1"><f a="param1:param2:param3:param4">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<e path="java.time.format.TextStyle"/>
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getText>
		<getTextIterator public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.time.temporal.TemporalField"/>
	<e path="java.time.format.TextStyle"/>
	<c path="java.util.Locale"/>
	<c path="java.util.Iterator"><c path="java.util.Map_Entry">
	<c path="String"/>
	<x path="java.lang.Long"/>
</c></c>
</f></getTextIterator>
		<val_store final="1" public="1">
			<c path="java.time.format.DateTimeTextProvider_LocaleStore"/>
			<meta><m n=":native"><e>"val$store"</e></m></meta>
		</val_store>
		<this_0 final="1" public="1">
			<c path="java.time.format.DateTimeFormatterBuilder"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.time.format.DateTimeFormatterBuilder"/>
	<c path="java.time.format.DateTimeTextProvider_LocaleStore"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeFormatterBuilder$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeParseContext" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeParseContext.class" extern="1">
		<charEqualsIgnoreCase public="1" set="method" static="1"><f a="param1:param2">
	<t path="java.types.Char16"/>
	<t path="java.types.Char16"/>
	<x path="Bool"/>
</f></charEqualsIgnoreCase>
		<copy public="1" set="method"><f a=""><c path="java.time.format.DateTimeParseContext"/></f></copy>
		<getLocale public="1" set="method"><f a=""><c path="java.util.Locale"/></f></getLocale>
		<getDecimalStyle public="1" set="method"><f a=""><c path="java.time.format.DecimalStyle"/></f></getDecimalStyle>
		<getEffectiveChronology public="1" set="method"><f a=""><c path="java.time.chrono.Chronology"/></f></getEffectiveChronology>
		<isCaseSensitive public="1" set="method"><f a=""><x path="Bool"/></f></isCaseSensitive>
		<setCaseSensitive public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setCaseSensitive>
		<subSequenceEquals public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></subSequenceEquals>
		<charEquals public="1" set="method"><f a="param1:param2">
	<t path="java.types.Char16"/>
	<t path="java.types.Char16"/>
	<x path="Bool"/>
</f></charEquals>
		<isStrict public="1" set="method"><f a=""><x path="Bool"/></f></isStrict>
		<setStrict public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setStrict>
		<startOptional public="1" set="method"><f a=""><x path="Void"/></f></startOptional>
		<endOptional public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></endOptional>
		<toUnresolved public="1" set="method"><f a=""><c path="java.time.format.Parsed"/></f></toUnresolved>
		<toResolved public="1" set="method"><f a="param1:param2">
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.util.Set"><c path="java.time.temporal.TemporalField"/></c>
	<c path="java.time.temporal.TemporalAccessor"/>
</f></toResolved>
		<getParsed public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="java.lang.Long"/>
</f></getParsed>
		<setParsedField public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></setParsedField>
		<setParsed public="1" set="method">
			<f a="param1">
				<c path="java.time.chrono.Chronology"/>
				<x path="Void"/>
			</f>
			<overloads><setParsed public="1" set="method"><f a="param1">
	<c path="java.time.ZoneId"/>
	<x path="Void"/>
</f></setParsed></overloads>
		</setParsed>
		<addChronoChangedListener public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><c path="java.time.chrono.Chronology"/></c>
	<x path="Void"/>
</f></addChronoChangedListener>
		<setParsedLeapSecond public="1" set="method"><f a=""><x path="Void"/></f></setParsedLeapSecond>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1">
	<c path="java.time.format.DateTimeFormatter"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeParseContext"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimePrintContext" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimePrintContext.class" extern="1">
		<getTemporal public="1" set="method"><f a=""><c path="java.time.temporal.TemporalAccessor"/></f></getTemporal>
		<getLocale public="1" set="method"><f a=""><c path="java.util.Locale"/></f></getLocale>
		<getDecimalStyle public="1" set="method"><f a=""><c path="java.time.format.DecimalStyle"/></f></getDecimalStyle>
		<startOptional public="1" set="method"><f a=""><x path="Void"/></f></startOptional>
		<endOptional public="1" set="method"><f a=""><x path="Void"/></f></endOptional>
		<getValue public="1" params="R" set="method">
			<f a="param1">
				<c path="java.time.temporal.TemporalQuery"><c path="getValue.R"/></c>
				<c path="getValue.R"/>
			</f>
			<overloads><getValue public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="java.lang.Long"/>
</f></getValue></overloads>
		</getValue>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.format.DateTimeFormatter"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimePrintContext"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimePrintContext_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimePrintContext$1.class" module="java.time.format.DateTimePrintContext" extern="1">
		<implements path="java.time.temporal.TemporalAccessor"/>
		<isSupported public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Bool"/>
</f></isSupported>
		<range public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<c path="java.time.temporal.ValueRange"/>
</f></range>
		<getLong public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
</f></getLong>
		<query public="1" params="R" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
	<c path="query.R"/>
</f></query>
		<val_effectiveDate final="1" public="1">
			<c path="java.time.chrono.ChronoLocalDate"/>
			<meta><m n=":native"><e>"val$effectiveDate"</e></m></meta>
		</val_effectiveDate>
		<val_temporal final="1" public="1">
			<c path="java.time.temporal.TemporalAccessor"/>
			<meta><m n=":native"><e>"val$temporal"</e></m></meta>
		</val_temporal>
		<val_effectiveChrono final="1" public="1">
			<c path="java.time.chrono.Chronology"/>
			<meta><m n=":native"><e>"val$effectiveChrono"</e></m></meta>
		</val_effectiveChrono>
		<val_effectiveZone final="1" public="1">
			<c path="java.time.ZoneId"/>
			<meta><m n=":native"><e>"val$effectiveZone"</e></m></meta>
		</val_effectiveZone>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.time.chrono.ChronoLocalDate"/>
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.chrono.Chronology"/>
	<c path="java.time.ZoneId"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimePrintContext$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeTextProvider_LocaleStore" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeTextProvider$LocaleStore.class" module="java.time.format.DateTimeTextProvider" extern="1">
		<getText public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.time.format.TextStyle"/>
	<c path="String"/>
</f></getText>
		<getTextIterator public="1" set="method"><f a="param1">
	<e path="java.time.format.TextStyle"/>
	<c path="java.util.Iterator"><c path="java.util.Map_Entry">
	<c path="String"/>
	<x path="java.lang.Long"/>
</c></c>
</f></getTextIterator>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Map">
		<e path="java.time.format.TextStyle"/>
		<c path="java.util.Map">
			<x path="java.lang.Long"/>
			<c path="String"/>
		</c>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeTextProvider$LocaleStore"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DateTimeTextProvider_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeTextProvider$2.class" module="java.time.format.DateTimeTextProvider" extern="1"><meta>
	<m n=":native"><e>"java.time.format.DateTimeTextProvider$2"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.time.format.DateTimeTextProvider_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DateTimeTextProvider$1.class" module="java.time.format.DateTimeTextProvider" extern="1">
		<implements path="java.util.Comparator"><c path="java.util.Map_Entry">
	<c path="String"/>
	<x path="java.lang.Long"/>
</c></implements>
		<compare public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Map_Entry">
					<c path="String"/>
					<x path="java.lang.Long"/>
				</c>
				<c path="java.util.Map_Entry">
					<c path="String"/>
					<x path="java.lang.Long"/>
				</c>
				<x path="Int"/>
			</f>
			<overloads><compare public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compare></overloads>
		</compare>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.time.format.DateTimeTextProvider$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.format.DecimalStyle" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/DecimalStyle.class" extern="1">
		<getAvailableLocales public="1" set="method" static="1"><f a=""><c path="java.util.Set"><c path="java.util.Locale"/></c></f></getAvailableLocales>
		<ofDefaultLocale public="1" set="method" static="1"><f a=""><c path="java.time.format.DecimalStyle"/></f></ofDefaultLocale>
		<of public="1" set="method" static="1"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="java.time.format.DecimalStyle"/>
</f></of>
		<STANDARD final="1" public="1" set="null" static="1"><c path="java.time.format.DecimalStyle"/></STANDARD>
		<getZeroDigit public="1" set="method"><f a=""><t path="java.types.Char16"/></f></getZeroDigit>
		<withZeroDigit public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<c path="java.time.format.DecimalStyle"/>
</f></withZeroDigit>
		<getPositiveSign public="1" set="method"><f a=""><t path="java.types.Char16"/></f></getPositiveSign>
		<withPositiveSign public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<c path="java.time.format.DecimalStyle"/>
</f></withPositiveSign>
		<getNegativeSign public="1" set="method"><f a=""><t path="java.types.Char16"/></f></getNegativeSign>
		<withNegativeSign public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<c path="java.time.format.DecimalStyle"/>
</f></withNegativeSign>
		<getDecimalSeparator public="1" set="method"><f a=""><t path="java.types.Char16"/></f></getDecimalSeparator>
		<withDecimalSeparator public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<c path="java.time.format.DecimalStyle"/>
</f></withDecimalSeparator>
		<convertToDigit public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<x path="Int"/>
</f></convertToDigit>
		<convertNumberToI18N public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></convertNumberToI18N>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.time.format.DecimalStyle"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.time.format.FormatStyle" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/FormatStyle.class">
		<FULL/>
		<LONG/>
		<MEDIUM/>
		<SHORT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.time.format.FormatStyle"</e></m>
		</meta>
	</enum>
	<class path="java.time.format.Parsed" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/Parsed.class" extern="1">
		<implements path="java.time.temporal.TemporalAccessor"/>
		<copy public="1" set="method"><f a=""><c path="java.time.format.Parsed"/></f></copy>
		<isSupported public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="Bool"/>
</f></isSupported>
		<getLong public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
</f></getLong>
		<query public="1" params="R" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalQuery"><c path="query.R"/></c>
	<c path="query.R"/>
</f></query>
		<resolve public="1" set="method"><f a="param1:param2">
	<e path="java.time.format.ResolverStyle"/>
	<c path="java.util.Set"><c path="java.time.temporal.TemporalField"/></c>
	<c path="java.time.temporal.TemporalAccessor"/>
</f></resolve>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<fieldValues final="1" public="1"><c path="java.util.Map">
	<c path="java.time.temporal.TemporalField"/>
	<x path="java.lang.Long"/>
</c></fieldValues>
		<zone public="1"><c path="java.time.ZoneId"/></zone>
		<chrono public="1"><c path="java.time.chrono.Chronology"/></chrono>
		<leapSecond public="1"><x path="Bool"/></leapSecond>
		<excessDays public="1"><c path="java.time.Period"/></excessDays>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.time.format.Parsed"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.time.format.ResolverStyle" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/ResolverStyle.class">
		<STRICT/>
		<SMART/>
		<LENIENT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.time.format.ResolverStyle"</e></m>
		</meta>
	</enum>
	<enum path="java.time.format.SignStyle" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/SignStyle.class">
		<NORMAL/>
		<ALWAYS/>
		<NEVER/>
		<NOT_NEGATIVE/>
		<EXCEEDS_PAD/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.time.format.SignStyle"</e></m>
		</meta>
	</enum>
	<enum path="java.time.format.TextStyle" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/format/TextStyle.class">
		<FULL/>
		<FULL_STANDALONE/>
		<SHORT/>
		<SHORT_STANDALONE/>
		<NARROW/>
		<NARROW_STANDALONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.time.format.TextStyle"</e></m>
		</meta>
	</enum>
	<enum path="java.time.temporal.ChronoField" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/temporal/ChronoField.class">
		<NANO_OF_SECOND/>
		<NANO_OF_DAY/>
		<MICRO_OF_SECOND/>
		<MICRO_OF_DAY/>
		<MILLI_OF_SECOND/>
		<MILLI_OF_DAY/>
		<SECOND_OF_MINUTE/>
		<SECOND_OF_DAY/>
		<MINUTE_OF_HOUR/>
		<MINUTE_OF_DAY/>
		<HOUR_OF_AMPM/>
		<CLOCK_HOUR_OF_AMPM/>
		<HOUR_OF_DAY/>
		<CLOCK_HOUR_OF_DAY/>
		<AMPM_OF_DAY/>
		<DAY_OF_WEEK/>
		<ALIGNED_DAY_OF_WEEK_IN_MONTH/>
		<ALIGNED_DAY_OF_WEEK_IN_YEAR/>
		<DAY_OF_MONTH/>
		<DAY_OF_YEAR/>
		<EPOCH_DAY/>
		<ALIGNED_WEEK_OF_MONTH/>
		<ALIGNED_WEEK_OF_YEAR/>
		<MONTH_OF_YEAR/>
		<PROLEPTIC_MONTH/>
		<YEAR_OF_ERA/>
		<YEAR/>
		<ERA/>
		<INSTANT_SECONDS/>
		<OFFSET_SECONDS/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.time.temporal.ChronoField"</e></m>
		</meta>
	</enum>
	<class path="java.time.temporal.TemporalField" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/temporal/TemporalField.class" extern="1" interface="1">
		<getDisplayName public="1" set="method">
			<f a="param1">
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</getDisplayName>
		<getBaseUnit public="1" set="method"><f a=""><c path="java.time.temporal.TemporalUnit"/></f></getBaseUnit>
		<getRangeUnit public="1" set="method"><f a=""><c path="java.time.temporal.TemporalUnit"/></f></getRangeUnit>
		<range public="1" set="method"><f a=""><c path="java.time.temporal.ValueRange"/></f></range>
		<isDateBased public="1" set="method"><f a=""><x path="Bool"/></f></isDateBased>
		<isTimeBased public="1" set="method"><f a=""><x path="Bool"/></f></isTimeBased>
		<isSupportedBy public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<x path="Bool"/>
</f></isSupportedBy>
		<rangeRefinedBy public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.temporal.ValueRange"/>
</f></rangeRefinedBy>
		<getFrom public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<x path="haxe.Int64"/>
</f></getFrom>
		<adjustInto public="1" params="R" set="method"><f a="param1:param2">
	<c path="adjustInto.R"/>
	<x path="haxe.Int64"/>
	<c path="adjustInto.R"/>
</f></adjustInto>
		<resolve public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Map">
					<c path="java.time.temporal.TemporalField"/>
					<x path="java.lang.Long"/>
				</c>
				<c path="java.time.temporal.TemporalAccessor"/>
				<e path="java.time.format.ResolverStyle"/>
				<c path="java.time.temporal.TemporalAccessor"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</resolve>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.time.temporal.TemporalField"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.temporal.TemporalQuery" params="R" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/temporal/TemporalQuery.class" extern="1" interface="1">
		<queryFrom public="1" set="method"><f a="param1">
	<c path="java.time.temporal.TemporalAccessor"/>
	<c path="java.time.temporal.TemporalQuery.R"/>
</f></queryFrom>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.time.temporal.TemporalQuery"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.temporal.TemporalUnit" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/temporal/TemporalUnit.class" extern="1" interface="1">
		<getDuration public="1" set="method"><f a=""><c path="java.time.Duration"/></f></getDuration>
		<isDurationEstimated public="1" set="method"><f a=""><x path="Bool"/></f></isDurationEstimated>
		<isDateBased public="1" set="method"><f a=""><x path="Bool"/></f></isDateBased>
		<isTimeBased public="1" set="method"><f a=""><x path="Bool"/></f></isTimeBased>
		<isSupportedBy public="1" set="method">
			<f a="param1">
				<c path="java.time.temporal.Temporal"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</isSupportedBy>
		<addTo public="1" params="R" set="method"><f a="param1:param2">
	<c path="addTo.R"/>
	<x path="haxe.Int64"/>
	<c path="addTo.R"/>
</f></addTo>
		<between public="1" set="method"><f a="param1:param2">
	<c path="java.time.temporal.Temporal"/>
	<c path="java.time.temporal.Temporal"/>
	<x path="haxe.Int64"/>
</f></between>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.time.temporal.TemporalUnit"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.temporal.ValueRange" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/temporal/ValueRange.class" extern="1">
		<implements path="java.io.Serializable"/>
		<of public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<c path="java.time.temporal.ValueRange"/>
			</f>
			<overloads>
				<of public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.ValueRange"/>
</f></of>
				<of public="1" set="method"><f a="param1:param2:param3">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.ValueRange"/>
</f></of>
			</overloads>
		</of>
		<isFixed public="1" set="method"><f a=""><x path="Bool"/></f></isFixed>
		<getMinimum public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getMinimum>
		<getLargestMinimum public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getLargestMinimum>
		<getSmallestMaximum public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getSmallestMaximum>
		<getMaximum public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getMaximum>
		<isIntValue public="1" set="method"><f a=""><x path="Bool"/></f></isIntValue>
		<isValidValue public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Bool"/>
</f></isValidValue>
		<isValidIntValue public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Bool"/>
</f></isValidIntValue>
		<checkValidValue public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalField"/>
	<x path="haxe.Int64"/>
</f></checkValidValue>
		<checkValidIntValue public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.time.temporal.TemporalField"/>
	<x path="Int"/>
</f></checkValidIntValue>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.time.temporal.ValueRange"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.zone.ZoneOffsetTransition" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/zone/ZoneOffsetTransition.class" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Comparable"><c path="java.time.zone.ZoneOffsetTransition"/></implements>
		<of public="1" set="method" static="1"><f a="param1:param2:param3">
	<c path="java.time.LocalDateTime"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.zone.ZoneOffsetTransition"/>
</f></of>
		<readExternal public="1" set="method" static="1"><f a="param1">
	<c path="java.io.DataInput"/>
	<c path="java.time.zone.ZoneOffsetTransition"/>
</f></readExternal>
		<writeExternal public="1" set="method"><f a="param1">
	<c path="java.io.DataOutput"/>
	<x path="Void"/>
</f></writeExternal>
		<getInstant public="1" set="method"><f a=""><c path="java.time.Instant"/></f></getInstant>
		<toEpochSecond public="1" set="method"><f a=""><x path="haxe.Int64"/></f></toEpochSecond>
		<getDateTimeBefore public="1" set="method"><f a=""><c path="java.time.LocalDateTime"/></f></getDateTimeBefore>
		<getDateTimeAfter public="1" set="method"><f a=""><c path="java.time.LocalDateTime"/></f></getDateTimeAfter>
		<getOffsetBefore public="1" set="method"><f a=""><c path="java.time.ZoneOffset"/></f></getOffsetBefore>
		<getOffsetAfter public="1" set="method"><f a=""><c path="java.time.ZoneOffset"/></f></getOffsetAfter>
		<getDuration public="1" set="method"><f a=""><c path="java.time.Duration"/></f></getDuration>
		<isGap public="1" set="method"><f a=""><x path="Bool"/></f></isGap>
		<isOverlap public="1" set="method"><f a=""><x path="Bool"/></f></isOverlap>
		<isValidOffset public="1" set="method"><f a="param1">
	<c path="java.time.ZoneOffset"/>
	<x path="Bool"/>
</f></isValidOffset>
		<getValidOffsets public="1" set="method"><f a=""><c path="java.util.List"><c path="java.time.ZoneOffset"/></c></f></getValidOffsets>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.time.zone.ZoneOffsetTransition"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.time.LocalDateTime"/>
				<c path="java.time.ZoneOffset"/>
				<c path="java.time.ZoneOffset"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3">
	<x path="haxe.Int64"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.ZoneOffset"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.time.zone.ZoneOffsetTransition"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.time.zone.ZoneOffsetTransitionRule" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/zone/ZoneOffsetTransitionRule.class" extern="1">
		<implements path="java.io.Serializable"/>
		<of public="1" set="method" static="1"><f a="param1:param2:param3:param4:param5:param6:param7:param8:param9">
	<e path="java.time.Month"/>
	<x path="Int"/>
	<e path="java.time.DayOfWeek"/>
	<c path="java.time.LocalTime"/>
	<x path="Bool"/>
	<e path="java.time.zone.ZoneOffsetTransitionRule_TimeDefinition"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.zone.ZoneOffsetTransitionRule"/>
</f></of>
		<readExternal public="1" set="method" static="1"><f a="param1">
	<c path="java.io.DataInput"/>
	<c path="java.time.zone.ZoneOffsetTransitionRule"/>
</f></readExternal>
		<writeExternal public="1" set="method"><f a="param1">
	<c path="java.io.DataOutput"/>
	<x path="Void"/>
</f></writeExternal>
		<getMonth public="1" set="method"><f a=""><e path="java.time.Month"/></f></getMonth>
		<getDayOfMonthIndicator public="1" set="method"><f a=""><x path="Int"/></f></getDayOfMonthIndicator>
		<getDayOfWeek public="1" set="method"><f a=""><e path="java.time.DayOfWeek"/></f></getDayOfWeek>
		<getLocalTime public="1" set="method"><f a=""><c path="java.time.LocalTime"/></f></getLocalTime>
		<isMidnightEndOfDay public="1" set="method"><f a=""><x path="Bool"/></f></isMidnightEndOfDay>
		<getTimeDefinition public="1" set="method"><f a=""><e path="java.time.zone.ZoneOffsetTransitionRule_TimeDefinition"/></f></getTimeDefinition>
		<getStandardOffset public="1" set="method"><f a=""><c path="java.time.ZoneOffset"/></f></getStandardOffset>
		<getOffsetBefore public="1" set="method"><f a=""><c path="java.time.ZoneOffset"/></f></getOffsetBefore>
		<getOffsetAfter public="1" set="method"><f a=""><c path="java.time.ZoneOffset"/></f></getOffsetAfter>
		<createTransition public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.time.zone.ZoneOffsetTransition"/>
</f></createTransition>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8:param9">
	<e path="java.time.Month"/>
	<x path="Int"/>
	<e path="java.time.DayOfWeek"/>
	<c path="java.time.LocalTime"/>
	<x path="Bool"/>
	<e path="java.time.zone.ZoneOffsetTransitionRule_TimeDefinition"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.ZoneOffset"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.zone.ZoneOffsetTransitionRule"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.time.zone.ZoneOffsetTransitionRule_TimeDefinition" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/zone/ZoneOffsetTransitionRule$TimeDefinition.class" module="java.time.zone.ZoneOffsetTransitionRule">
		<UTC/>
		<WALL/>
		<STANDARD/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.time.zone.ZoneOffsetTransitionRule$TimeDefinition"</e></m>
		</meta>
	</enum>
	<class path="java.time.zone.ZoneOffsetTransitionRule_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/zone/ZoneOffsetTransitionRule$1.class" module="java.time.zone.ZoneOffsetTransitionRule" extern="1"><meta>
	<m n=":native"><e>"java.time.zone.ZoneOffsetTransitionRule$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.time.zone.ZoneRules" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/time/zone/ZoneRules.class" extern="1">
		<implements path="java.io.Serializable"/>
		<of public="1" set="method" static="1">
			<f a="param1:param2:param3:param4:param5">
				<c path="java.time.ZoneOffset"/>
				<c path="java.time.ZoneOffset"/>
				<c path="java.util.List"><c path="java.time.zone.ZoneOffsetTransition"/></c>
				<c path="java.util.List"><c path="java.time.zone.ZoneOffsetTransition"/></c>
				<c path="java.util.List"><c path="java.time.zone.ZoneOffsetTransitionRule"/></c>
				<c path="java.time.zone.ZoneRules"/>
			</f>
			<overloads><of public="1" set="method"><f a="param1">
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.zone.ZoneRules"/>
</f></of></overloads>
		</of>
		<readExternal public="1" set="method" static="1"><f a="param1">
	<c path="java.io.DataInput"/>
	<c path="java.time.zone.ZoneRules"/>
</f></readExternal>
		<writeExternal public="1" set="method"><f a="param1">
	<c path="java.io.DataOutput"/>
	<x path="Void"/>
</f></writeExternal>
		<isFixedOffset public="1" set="method"><f a=""><x path="Bool"/></f></isFixedOffset>
		<getOffset public="1" set="method">
			<f a="param1">
				<c path="java.time.Instant"/>
				<c path="java.time.ZoneOffset"/>
			</f>
			<overloads><getOffset public="1" set="method"><f a="param1">
	<c path="java.time.LocalDateTime"/>
	<c path="java.time.ZoneOffset"/>
</f></getOffset></overloads>
		</getOffset>
		<getValidOffsets public="1" set="method"><f a="param1">
	<c path="java.time.LocalDateTime"/>
	<c path="java.util.List"><c path="java.time.ZoneOffset"/></c>
</f></getValidOffsets>
		<getTransition public="1" set="method"><f a="param1">
	<c path="java.time.LocalDateTime"/>
	<c path="java.time.zone.ZoneOffsetTransition"/>
</f></getTransition>
		<getStandardOffset public="1" set="method"><f a="param1">
	<c path="java.time.Instant"/>
	<c path="java.time.ZoneOffset"/>
</f></getStandardOffset>
		<getDaylightSavings public="1" set="method"><f a="param1">
	<c path="java.time.Instant"/>
	<c path="java.time.Duration"/>
</f></getDaylightSavings>
		<isDaylightSavings public="1" set="method"><f a="param1">
	<c path="java.time.Instant"/>
	<x path="Bool"/>
</f></isDaylightSavings>
		<isValidOffset public="1" set="method"><f a="param1:param2">
	<c path="java.time.LocalDateTime"/>
	<c path="java.time.ZoneOffset"/>
	<x path="Bool"/>
</f></isValidOffset>
		<nextTransition public="1" set="method"><f a="param1">
	<c path="java.time.Instant"/>
	<c path="java.time.zone.ZoneOffsetTransition"/>
</f></nextTransition>
		<previousTransition public="1" set="method"><f a="param1">
	<c path="java.time.Instant"/>
	<c path="java.time.zone.ZoneOffsetTransition"/>
</f></previousTransition>
		<getTransitions public="1" set="method"><f a=""><c path="java.util.List"><c path="java.time.zone.ZoneOffsetTransition"/></c></f></getTransitions>
		<getTransitionRules public="1" set="method"><f a=""><c path="java.util.List"><c path="java.time.zone.ZoneOffsetTransitionRule"/></c></f></getTransitionRules>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.time.ZoneOffset"/>
	<c path="java.time.ZoneOffset"/>
	<c path="java.util.List"><c path="java.time.zone.ZoneOffsetTransition"/></c>
	<c path="java.util.List"><c path="java.time.zone.ZoneOffsetTransition"/></c>
	<c path="java.util.List"><c path="java.time.zone.ZoneOffsetTransitionRule"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.time.zone.ZoneRules"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<typedef path="java.types.Char16" params="" file="/home/runner/work/haxe/haxe/std/java/types/Char16.hx"><x path="java.Char16"/></typedef>
	<typedef path="java.types.Int16" params="" file="/home/runner/work/haxe/haxe/std/java/types/Int16.hx"><x path="java.Int16"/></typedef>
	<typedef path="java.types.Int8" params="" file="/home/runner/work/haxe/haxe/std/java/types/Int8.hx"><x path="java.Int8"/></typedef>
	<class path="java.util.List" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/List.class" extern="1" interface="1">
		<extends path="java.util.Collection"><c path="java.util.List.E"/></extends>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<contains public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.List.E"/></c></f></iterator>
		<toArray public="1" set="method">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.util.List.E"/>
				<x path="Bool"/>
			</f>
			<overloads><add public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.List.E"/>
	<x path="Void"/>
</f></add></overloads>
		</add>
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<overloads><remove public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.List.E"/>
</f></remove></overloads>
		</remove>
		<containsAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></containsAll>
		<addAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><c path="java.util.List.E"/></c>
				<x path="Bool"/>
			</f>
			<overloads><addAll public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collection"><c path="java.util.List.E"/></c>
	<x path="Bool"/>
</f></addAll></overloads>
		</addAll>
		<removeAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></removeAll>
		<retainAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></retainAll>
		<replaceAll public="1" set="method">
			<f a="param1">
				<c path="java.util.function.UnaryOperator"><c path="java.util.List.E"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</replaceAll>
		<sort public="1" set="method">
			<f a="param1">
				<c path="java.util.Comparator"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</sort>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<get public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.List.E"/>
</f></get>
		<set public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.List.E"/>
	<c path="java.util.List.E"/>
</f></set>
		<indexOf public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></lastIndexOf>
		<listIterator public="1" set="method">
			<f a=""><c path="java.util.ListIterator"><c path="java.util.List.E"/></c></f>
			<overloads><listIterator public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.ListIterator"><c path="java.util.List.E"/></c>
</f></listIterator></overloads>
		</listIterator>
		<subList public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.List"><c path="java.util.List.E"/></c>
</f></subList>
		<spliterator public="1" set="method">
			<f a=""><c path="java.util.Spliterator"><c path="java.util.List.E"/></c></f>
			<meta><m n=":java.default"/></meta>
		</spliterator>
		<meta>
			<m n=":native"><e>"java.util.List"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractList" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractList.class" extern="1" abstract="1">
		<extends path="java.util.AbstractCollection"><c path="java.util.AbstractList.E"/></extends>
		<implements path="java.util.List"><c path="java.util.AbstractList.E"/></implements>
		<add public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.AbstractList.E"/>
				<x path="Bool"/>
			</f>
			<overloads><add public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.AbstractList.E"/>
	<x path="Void"/>
</f></add></overloads>
		</add>
		<get abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.AbstractList.E"/>
</f></get>
		<set public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.AbstractList.E"/>
	<c path="java.util.AbstractList.E"/>
</f></set>
		<remove public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.AbstractList.E"/>
</f></remove>
		<indexOf public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></lastIndexOf>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<addAll public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collection"><c path="java.util.AbstractList.E"/></c>
	<x path="Bool"/>
</f></addAll>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.AbstractList.E"/></c></f></iterator>
		<listIterator public="1" set="method">
			<f a=""><c path="java.util.ListIterator"><c path="java.util.AbstractList.E"/></c></f>
			<overloads><listIterator public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.ListIterator"><c path="java.util.AbstractList.E"/></c>
</f></listIterator></overloads>
		</listIterator>
		<subList public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.List"><c path="java.util.AbstractList.E"/></c>
</f></subList>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<removeRange public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeRange>
		<modCount public="1"><x path="Int"/></modCount>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.AbstractList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractList_Itr" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractList$Itr.class" module="java.util.AbstractList" extern="1">
		<implements path="java.util.Iterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<checkForComodification final="1" public="1" set="method"><f a=""><x path="Void"/></f></checkForComodification>
		<cursor public="1"><x path="Int"/></cursor>
		<lastRet public="1"><x path="Int"/></lastRet>
		<expectedModCount public="1"><x path="Int"/></expectedModCount>
		<this_0 final="1" public="1">
			<c path="java.util.AbstractList"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.AbstractList"><d/></c>
	<c path="java.util.AbstractList_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.AbstractList$Itr"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.ListIterator" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ListIterator.class" extern="1" interface="1">
		<extends path="java.util.Iterator"><c path="java.util.ListIterator.E"/></extends>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><c path="java.util.ListIterator.E"/></f></next>
		<hasPrevious public="1" set="method"><f a=""><x path="Bool"/></f></hasPrevious>
		<previous public="1" set="method"><f a=""><c path="java.util.ListIterator.E"/></f></previous>
		<nextIndex public="1" set="method"><f a=""><x path="Int"/></f></nextIndex>
		<previousIndex public="1" set="method"><f a=""><x path="Int"/></f></previousIndex>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<set public="1" set="method"><f a="param1">
	<c path="java.util.ListIterator.E"/>
	<x path="Void"/>
</f></set>
		<add public="1" set="method"><f a="param1">
	<c path="java.util.ListIterator.E"/>
	<x path="Void"/>
</f></add>
		<meta>
			<m n=":native"><e>"java.util.ListIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractList_ListItr" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractList$ListItr.class" module="java.util.AbstractList" extern="1">
		<extends path="java.util.AbstractList_Itr"/>
		<implements path="java.util.ListIterator"><d/></implements>
		<hasPrevious public="1" set="method"><f a=""><x path="Bool"/></f></hasPrevious>
		<previous public="1" set="method"><f a=""><d/></f></previous>
		<nextIndex public="1" set="method"><f a=""><x path="Int"/></f></nextIndex>
		<previousIndex public="1" set="method"><f a=""><x path="Int"/></f></previousIndex>
		<set public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></set>
		<add public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></add>
		<this_0 final="1" public="1" override="1">
			<c path="java.util.AbstractList"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.AbstractList"><d/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.AbstractList$ListItr"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractList_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractList$1.class" module="java.util.AbstractList" extern="1"><meta>
	<m n=":native"><e>"java.util.AbstractList$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.util.Map_Entry" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Map$Entry.class" module="java.util.Map" extern="1" interface="1">
		<comparingByKey public="1" params="K:V" set="method" static="1">
			<f a=""><c path="java.util.Comparator"><c path="java.util.Map_Entry">
	<c path="comparingByKey.K"/>
	<c path="comparingByKey.V"/>
</c></c></f>
			<meta><m n=":java.default"/></meta>
			<overloads><comparingByKey public="1" params="K:V" set="method">
	<f a="param1">
		<c path="java.util.Comparator"><d/></c>
		<c path="java.util.Comparator"><c path="java.util.Map_Entry">
	<c path="comparingByKey.K"/>
	<c path="comparingByKey.V"/>
</c></c>
	</f>
	<meta><m n=":java.default"/></meta>
</comparingByKey></overloads>
		</comparingByKey>
		<comparingByValue public="1" params="K:V" set="method" static="1">
			<f a=""><c path="java.util.Comparator"><c path="java.util.Map_Entry">
	<c path="comparingByValue.K"/>
	<c path="comparingByValue.V"/>
</c></c></f>
			<meta><m n=":java.default"/></meta>
			<overloads><comparingByValue public="1" params="K:V" set="method">
	<f a="param1">
		<c path="java.util.Comparator"><d/></c>
		<c path="java.util.Comparator"><c path="java.util.Map_Entry">
	<c path="comparingByValue.K"/>
	<c path="comparingByValue.V"/>
</c></c>
	</f>
	<meta><m n=":java.default"/></meta>
</comparingByValue></overloads>
		</comparingByValue>
		<getKey public="1" set="method"><f a=""><c path="java.util.Map_Entry.K"/></f></getKey>
		<getValue public="1" set="method"><f a=""><c path="java.util.Map_Entry.V"/></f></getValue>
		<setValue public="1" set="method"><f a="param1">
	<c path="java.util.Map_Entry.V"/>
	<c path="java.util.Map_Entry.V"/>
</f></setValue>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<meta>
			<m n=":native"><e>"java.util.Map$Entry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractMap_SimpleImmutableEntry" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractMap$SimpleImmutableEntry.class" module="java.util.AbstractMap" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Map_Entry">
			<c path="java.util.AbstractMap_SimpleImmutableEntry.K"/>
			<c path="java.util.AbstractMap_SimpleImmutableEntry.V"/>
		</implements>
		<getKey public="1" set="method"><f a=""><c path="java.util.AbstractMap_SimpleImmutableEntry.K"/></f></getKey>
		<getValue public="1" set="method"><f a=""><c path="java.util.AbstractMap_SimpleImmutableEntry.V"/></f></getValue>
		<setValue public="1" set="method"><f a="param1">
	<c path="java.util.AbstractMap_SimpleImmutableEntry.V"/>
	<c path="java.util.AbstractMap_SimpleImmutableEntry.V"/>
</f></setValue>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.AbstractMap_SimpleImmutableEntry.K"/>
				<c path="java.util.AbstractMap_SimpleImmutableEntry.V"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1">
	<c path="java.util.Map_Entry">
		<c path="java.util.AbstractMap_SimpleImmutableEntry.K"/>
		<c path="java.util.AbstractMap_SimpleImmutableEntry.V"/>
	</c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.AbstractMap$SimpleImmutableEntry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractMap_SimpleEntry" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractMap$SimpleEntry.class" module="java.util.AbstractMap" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Map_Entry">
			<c path="java.util.AbstractMap_SimpleEntry.K"/>
			<c path="java.util.AbstractMap_SimpleEntry.V"/>
		</implements>
		<getKey public="1" set="method"><f a=""><c path="java.util.AbstractMap_SimpleEntry.K"/></f></getKey>
		<getValue public="1" set="method"><f a=""><c path="java.util.AbstractMap_SimpleEntry.V"/></f></getValue>
		<setValue public="1" set="method"><f a="param1">
	<c path="java.util.AbstractMap_SimpleEntry.V"/>
	<c path="java.util.AbstractMap_SimpleEntry.V"/>
</f></setValue>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.AbstractMap_SimpleEntry.K"/>
				<c path="java.util.AbstractMap_SimpleEntry.V"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1">
	<c path="java.util.Map_Entry">
		<c path="java.util.AbstractMap_SimpleEntry.K"/>
		<c path="java.util.AbstractMap_SimpleEntry.V"/>
	</c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.AbstractMap$SimpleEntry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractMap_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractMap$2.class" module="java.util.AbstractMap" extern="1">
		<extends path="java.util.AbstractCollection"><d/></extends>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><d/></c></f></iterator>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isEmpty>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<this_0 final="1" public="1">
			<c path="java.util.AbstractMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.AbstractMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.AbstractMap$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractMap_2_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractMap$2$1.class" module="java.util.AbstractMap" extern="1">
		<implements path="java.util.Iterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<this_1 final="1" public="1">
			<c path="java.util.AbstractMap_2"/>
			<meta><m n=":native"><e>"this$1"</e></m></meta>
		</this_1>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.AbstractMap_2"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.AbstractMap$2$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractMap_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractMap$1.class" module="java.util.AbstractMap" extern="1">
		<extends path="java.util.AbstractSet"><d/></extends>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><d/></c></f></iterator>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isEmpty>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<this_0 final="1" public="1">
			<c path="java.util.AbstractMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.AbstractMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.AbstractMap$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractMap_1_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractMap$1$1.class" module="java.util.AbstractMap" extern="1">
		<implements path="java.util.Iterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<this_1 final="1" public="1">
			<c path="java.util.AbstractMap_1"/>
			<meta><m n=":native"><e>"this$1"</e></m></meta>
		</this_1>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.AbstractMap_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.AbstractMap$1$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Queue" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Queue.class" extern="1" interface="1">
		<extends path="java.util.Collection"><c path="java.util.Queue.E"/></extends>
		<add public="1" set="method"><f a="param1">
	<c path="java.util.Queue.E"/>
	<x path="Bool"/>
</f></add>
		<offer public="1" set="method"><f a="param1">
	<c path="java.util.Queue.E"/>
	<x path="Bool"/>
</f></offer>
		<remove public="1" set="method"><f a=""><c path="java.util.Queue.E"/></f></remove>
		<poll public="1" set="method"><f a=""><c path="java.util.Queue.E"/></f></poll>
		<element public="1" set="method"><f a=""><c path="java.util.Queue.E"/></f></element>
		<peek public="1" set="method"><f a=""><c path="java.util.Queue.E"/></f></peek>
		<meta>
			<m n=":native"><e>"java.util.Queue"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractQueue" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractQueue.class" extern="1" abstract="1">
		<extends path="java.util.AbstractCollection"><c path="java.util.AbstractQueue.E"/></extends>
		<implements path="java.util.Queue"><c path="java.util.AbstractQueue.E"/></implements>
		<add public="1" set="method" override="1"><f a="param1">
	<c path="java.util.AbstractQueue.E"/>
	<x path="Bool"/>
</f></add>
		<remove public="1" set="method" override="1"><f a=""><c path="java.util.AbstractQueue.E"/></f></remove>
		<element public="1" set="method"><f a=""><c path="java.util.AbstractQueue.E"/></f></element>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<addAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><c path="java.util.AbstractQueue.E"/></c>
	<x path="Bool"/>
</f></addAll>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.AbstractQueue"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.AbstractSequentialList" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractSequentialList.class" extern="1" abstract="1">
		<extends path="java.util.AbstractList"><c path="java.util.AbstractSequentialList.E"/></extends>
		<get public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.AbstractSequentialList.E"/>
</f></get>
		<set public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.AbstractSequentialList.E"/>
	<c path="java.util.AbstractSequentialList.E"/>
</f></set>
		<add public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.AbstractSequentialList.E"/>
	<x path="Void"/>
</f></add>
		<remove public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.AbstractSequentialList.E"/>
</f></remove>
		<addAll public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collection"><c path="java.util.AbstractSequentialList.E"/></c>
	<x path="Bool"/>
</f></addAll>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.AbstractSequentialList.E"/></c></f></iterator>
		<listIterator abstract="1" public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.ListIterator"><c path="java.util.AbstractSequentialList.E"/></c>
</f></listIterator>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.AbstractSequentialList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.RandomAccess" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/RandomAccess.class" extern="1" interface="1"><meta>
	<m n=":native"><e>"java.util.RandomAccess"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.util.ArrayList" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ArrayList.class" extern="1">
		<extends path="java.util.AbstractList"><c path="java.util.ArrayList.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Cloneable"/>
		<implements path="java.util.RandomAccess"/>
		<implements path="java.util.List"><c path="java.util.ArrayList.E"/></implements>
		<subListRangeCheck public="1" set="method" static="1"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></subListRangeCheck>
		<trimToSize public="1" set="method"><f a=""><x path="Void"/></f></trimToSize>
		<ensureCapacity public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></ensureCapacity>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isEmpty>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<indexOf public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Int"/>
</f></lastIndexOf>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<toArray public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<elementData public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.ArrayList.E"/>
</f></elementData>
		<get public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.ArrayList.E"/>
</f></get>
		<set public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.ArrayList.E"/>
	<c path="java.util.ArrayList.E"/>
</f></set>
		<add public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.ArrayList.E"/>
				<x path="Bool"/>
			</f>
			<overloads><add public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.ArrayList.E"/>
	<x path="Void"/>
</f></add></overloads>
		</add>
		<remove public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.util.ArrayList.E"/>
			</f>
			<overloads><remove public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove></overloads>
		</remove>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<addAll public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Collection"><c path="java.util.ArrayList.E"/></c>
				<x path="Bool"/>
			</f>
			<overloads><addAll public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collection"><c path="java.util.ArrayList.E"/></c>
	<x path="Bool"/>
</f></addAll></overloads>
		</addAll>
		<removeRange public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeRange>
		<removeAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></removeAll>
		<retainAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></retainAll>
		<listIterator public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.util.ListIterator"><c path="java.util.ArrayList.E"/></c>
			</f>
			<overloads><listIterator public="1" set="method"><f a=""><c path="java.util.ListIterator"><c path="java.util.ArrayList.E"/></c></f></listIterator></overloads>
		</listIterator>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.ArrayList.E"/></c></f></iterator>
		<subList public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.List"><c path="java.util.ArrayList.E"/></c>
</f></subList>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.ArrayList.E"/></c></f></spliterator>
		<removeIf public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<x path="Bool"/>
</f></removeIf>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.UnaryOperator"><c path="java.util.ArrayList.E"/></c>
	<x path="Void"/>
</f></replaceAll>
		<sort public="1" set="method"><f a="param1">
	<c path="java.util.Comparator"><d/></c>
	<x path="Void"/>
</f></sort>
		<new public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><c path="java.util.ArrayList.E"/></c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a=""><x path="Void"/></f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.ArrayList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.ArrayList_SubList" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ArrayList$SubList.class" module="java.util.ArrayList" extern="1">
		<extends path="java.util.AbstractList"><d/></extends>
		<implements path="java.util.RandomAccess"/>
		<set public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<d/>
	<d/>
</f></set>
		<get public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<d/>
</f></get>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<add public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></add>
		<remove public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<d/>
</f></remove>
		<removeRange public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeRange>
		<addAll public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<overloads><addAll public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></addAll></overloads>
		</addAll>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><d/></c></f></iterator>
		<listIterator public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.ListIterator"><d/></c>
</f></listIterator>
		<subList public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.List"><d/></c>
</f></subList>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><d/></c></f></spliterator>
		<this_0 final="1" public="1">
			<c path="java.util.ArrayList"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.AbstractList"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.ArrayList$SubList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.ArrayList_SubList_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ArrayList$SubList$1.class" module="java.util.ArrayList" extern="1">
		<implements path="java.util.ListIterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<hasPrevious public="1" set="method"><f a=""><x path="Bool"/></f></hasPrevious>
		<previous public="1" set="method"><f a=""><d/></f></previous>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<nextIndex public="1" set="method"><f a=""><x path="Int"/></f></nextIndex>
		<previousIndex public="1" set="method"><f a=""><x path="Int"/></f></previousIndex>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<set public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></set>
		<add public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></add>
		<checkForComodification final="1" public="1" set="method"><f a=""><x path="Void"/></f></checkForComodification>
		<cursor public="1"><x path="Int"/></cursor>
		<lastRet public="1"><x path="Int"/></lastRet>
		<expectedModCount public="1"><x path="Int"/></expectedModCount>
		<val_index final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$index"</e></m></meta>
		</val_index>
		<val_offset final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$offset"</e></m></meta>
		</val_offset>
		<this_1 final="1" public="1">
			<c path="java.util.ArrayList_SubList"/>
			<meta><m n=":native"><e>"this$1"</e></m></meta>
		</this_1>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.ArrayList_SubList"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.ArrayList$SubList$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.ArrayList_Itr" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ArrayList$Itr.class" module="java.util.ArrayList" extern="1">
		<implements path="java.util.Iterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<checkForComodification final="1" public="1" set="method"><f a=""><x path="Void"/></f></checkForComodification>
		<cursor public="1"><x path="Int"/></cursor>
		<lastRet public="1"><x path="Int"/></lastRet>
		<expectedModCount public="1"><x path="Int"/></expectedModCount>
		<this_0 final="1" public="1">
			<c path="java.util.ArrayList"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.ArrayList"><d/></c>
	<c path="java.util.ArrayList_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.ArrayList$Itr"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.ArrayList_ListItr" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ArrayList$ListItr.class" module="java.util.ArrayList" extern="1">
		<extends path="java.util.ArrayList_Itr"/>
		<implements path="java.util.ListIterator"><d/></implements>
		<hasPrevious public="1" set="method"><f a=""><x path="Bool"/></f></hasPrevious>
		<nextIndex public="1" set="method"><f a=""><x path="Int"/></f></nextIndex>
		<previousIndex public="1" set="method"><f a=""><x path="Int"/></f></previousIndex>
		<previous public="1" set="method"><f a=""><d/></f></previous>
		<set public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></set>
		<add public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></add>
		<this_0 final="1" public="1" override="1">
			<c path="java.util.ArrayList"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.ArrayList"><d/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.ArrayList$ListItr"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterator" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterator.class" extern="1" interface="1">
		<ORDERED final="1" public="1" set="null" static="1"><x path="Int"/></ORDERED>
		<DISTINCT final="1" public="1" set="null" static="1"><x path="Int"/></DISTINCT>
		<SORTED final="1" public="1" set="null" static="1"><x path="Int"/></SORTED>
		<SIZED final="1" public="1" set="null" static="1"><x path="Int"/></SIZED>
		<NONNULL final="1" public="1" set="null" static="1"><x path="Int"/></NONNULL>
		<IMMUTABLE final="1" public="1" set="null" static="1"><x path="Int"/></IMMUTABLE>
		<CONCURRENT final="1" public="1" set="null" static="1"><x path="Int"/></CONCURRENT>
		<SUBSIZED final="1" public="1" set="null" static="1"><x path="Int"/></SUBSIZED>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.Consumer"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</forEachRemaining>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Spliterator.T"/></c></f></trySplit>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<getExactSizeIfKnown public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":java.default"/></meta>
		</getExactSizeIfKnown>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<hasCharacteristics public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</hasCharacteristics>
		<getComparator public="1" set="method">
			<f a=""><c path="java.util.Comparator"><d/></c></f>
			<meta><m n=":java.default"/></meta>
		</getComparator>
		<meta>
			<m n=":native"><e>"java.util.Spliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.ArrayList_ArrayListSpliterator" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ArrayList$ArrayListSpliterator.class" module="java.util.ArrayList" extern="1">
		<implements path="java.util.Spliterator"><c path="java.util.ArrayList_ArrayListSpliterator.E"/></implements>
		<trySplit public="1" set="method"><f a=""><c path="java.util.ArrayList_ArrayListSpliterator"><c path="java.util.ArrayList_ArrayListSpliterator.E"/></c></f></trySplit>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.ArrayList"><c path="java.util.ArrayList_ArrayListSpliterator.E"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.ArrayList$ArrayListSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.ArrayList_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ArrayList$1.class" module="java.util.ArrayList" extern="1"><meta>
	<m n=":native"><e>"java.util.ArrayList$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.util.Arrays" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Arrays.class" extern="1">
		<sort public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<sort public="1" params="T" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><c path="sort.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Comparator"><d/></c>
	<x path="Void"/>
</f></sort>
				<sort public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="sort.T"/></c>
	<c path="java.util.Comparator"><d/></c>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><d/></c>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Void"/>
</f></sort>
				<sort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sort>
			</overloads>
		</sort>
		<parallelSort public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<parallelSort public="1" params="T" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><c path="parallelSort.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Comparator"><d/></c>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><c path="parallelSort.T"/></c>
	<c path="java.util.Comparator"><d/></c>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" params="T" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><c path="parallelSort.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="parallelSort.T"/></c>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Void"/>
</f></parallelSort>
				<parallelSort public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></parallelSort>
			</overloads>
		</parallelSort>
		<parallelPrefix public="1" params="T" set="method" static="1">
			<f a="param1:param2">
				<c path="java.NativeArray"><c path="parallelPrefix.T"/></c>
				<c path="java.util.function.BinaryOperator"><c path="parallelPrefix.T"/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<parallelPrefix public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.function.IntBinaryOperator"/>
	<x path="Void"/>
</f></parallelPrefix>
				<parallelPrefix public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.util.function.IntBinaryOperator"/>
	<x path="Void"/>
</f></parallelPrefix>
				<parallelPrefix public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.function.DoubleBinaryOperator"/>
	<x path="Void"/>
</f></parallelPrefix>
				<parallelPrefix public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Float"/></c>
	<c path="java.util.function.DoubleBinaryOperator"/>
	<x path="Void"/>
</f></parallelPrefix>
				<parallelPrefix public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.function.LongBinaryOperator"/>
	<x path="Void"/>
</f></parallelPrefix>
				<parallelPrefix public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<c path="java.util.function.LongBinaryOperator"/>
	<x path="Void"/>
</f></parallelPrefix>
				<parallelPrefix public="1" params="T" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><c path="parallelPrefix.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.function.BinaryOperator"><c path="parallelPrefix.T"/></c>
	<x path="Void"/>
</f></parallelPrefix>
			</overloads>
		</parallelPrefix>
		<binarySearch public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<overloads>
				<binarySearch public="1" params="T" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.NativeArray"><c path="binarySearch.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="binarySearch.T"/>
	<c path="java.util.Comparator"><d/></c>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" params="T" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><c path="binarySearch.T"/></c>
	<c path="binarySearch.T"/>
	<c path="java.util.Comparator"><d/></c>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><d/></c>
	<d/>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Single"/>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Single"/>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<t path="java.types.Int8"/>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<t path="java.types.Int8"/>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<t path="java.types.Char16"/>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<t path="java.types.Char16"/>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<t path="java.types.Int16"/>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<t path="java.types.Int16"/>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></binarySearch>
				<binarySearch public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></binarySearch>
			</overloads>
		</binarySearch>
		<equals public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<x path="Bool"/>
			</f>
			<overloads>
				<equals public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><d/></c>
	<c path="java.NativeArray"><d/></c>
	<x path="Bool"/>
</f></equals>
				<equals public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Single"/></c>
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Bool"/>
</f></equals>
				<equals public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Float"/></c>
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Bool"/>
</f></equals>
				<equals public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Bool"/></c>
	<c path="java.NativeArray"><x path="Bool"/></c>
	<x path="Bool"/>
</f></equals>
				<equals public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Bool"/>
</f></equals>
				<equals public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Bool"/>
</f></equals>
				<equals public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<x path="Bool"/>
</f></equals>
				<equals public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Bool"/>
</f></equals>
			</overloads>
		</equals>
		<fill public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<overloads>
				<fill public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><d/></c>
	<d/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Single"/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Single"/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Bool"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Bool"/></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<t path="java.types.Int8"/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<t path="java.types.Int8"/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<t path="java.types.Char16"/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<t path="java.types.Int16"/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<t path="java.types.Int16"/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
				<fill public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></fill>
			</overloads>
		</fill>
		<copyOf public="1" params="T" set="method" static="1">
			<f a="param1:param2">
				<c path="java.NativeArray"><c path="copyOf.T"/></c>
				<x path="Int"/>
				<c path="java.NativeArray"><c path="copyOf.T"/></c>
			</f>
			<overloads>
				<copyOf public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Bool"/></c>
	<x path="Int"/>
	<c path="java.NativeArray"><x path="Bool"/></c>
</f></copyOf>
				<copyOf public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<c path="java.NativeArray"><x path="Float"/></c>
</f></copyOf>
				<copyOf public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Int"/>
	<c path="java.NativeArray"><x path="Single"/></c>
</f></copyOf>
				<copyOf public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
</f></copyOf>
				<copyOf public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
</f></copyOf>
				<copyOf public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<c path="java.NativeArray"><x path="Int"/></c>
</f></copyOf>
				<copyOf public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<x path="Int"/>
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
</f></copyOf>
				<copyOf public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></copyOf>
				<copyOf public="1" params="T:U" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><c path="copyOf.U"/></c>
	<x path="Int"/>
	<c path="java.lang.Class"><c path="java.NativeArray"><c path="copyOf.T"/></c></c>
	<c path="java.NativeArray"><c path="copyOf.T"/></c>
</f></copyOf>
			</overloads>
		</copyOf>
		<copyOfRange public="1" params="T" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><c path="copyOfRange.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.NativeArray"><c path="copyOfRange.T"/></c>
			</f>
			<overloads>
				<copyOfRange public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Bool"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><x path="Bool"/></c>
</f></copyOfRange>
				<copyOfRange public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><x path="Float"/></c>
</f></copyOfRange>
				<copyOfRange public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><x path="Single"/></c>
</f></copyOfRange>
				<copyOfRange public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
</f></copyOfRange>
				<copyOfRange public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
</f></copyOfRange>
				<copyOfRange public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><x path="Int"/></c>
</f></copyOfRange>
				<copyOfRange public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
</f></copyOfRange>
				<copyOfRange public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
</f></copyOfRange>
				<copyOfRange public="1" params="T:U" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><c path="copyOfRange.U"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.Class"><c path="java.NativeArray"><c path="copyOfRange.T"/></c></c>
	<c path="java.NativeArray"><c path="copyOfRange.T"/></c>
</f></copyOfRange>
			</overloads>
		</copyOfRange>
		<asList public="1" params="T" set="method" static="1"><f a="param1">
	<x path="haxe.Rest"><c path="asList.T"/></x>
	<c path="java.util.List"><c path="asList.T"/></c>
</f></asList>
		<hashCode public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<x path="Int"/>
			</f>
			<overloads>
				<hashCode public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><d/></c>
	<x path="Int"/>
</f></hashCode>
				<hashCode public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
</f></hashCode>
				<hashCode public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Single"/></c>
	<x path="Int"/>
</f></hashCode>
				<hashCode public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Bool"/></c>
	<x path="Int"/>
</f></hashCode>
				<hashCode public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
</f></hashCode>
				<hashCode public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<x path="Int"/>
</f></hashCode>
				<hashCode public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<x path="Int"/>
</f></hashCode>
				<hashCode public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
</f></hashCode>
			</overloads>
		</hashCode>
		<deepHashCode public="1" set="method" static="1"><f a="param1">
	<c path="java.NativeArray"><d/></c>
	<x path="Int"/>
</f></deepHashCode>
		<deepEquals public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.NativeArray"><d/></c>
	<c path="java.NativeArray"><d/></c>
	<x path="Bool"/>
</f></deepEquals>
		<deepEquals0 public="1" set="method" static="1"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></deepEquals0>
		<toString public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<c path="String"/>
			</f>
			<overloads>
				<toString public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><d/></c>
	<c path="String"/>
</f></toString>
				<toString public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Float"/></c>
	<c path="String"/>
</f></toString>
				<toString public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Single"/></c>
	<c path="String"/>
</f></toString>
				<toString public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Bool"/></c>
	<c path="String"/>
</f></toString>
				<toString public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="String"/>
</f></toString>
				<toString public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	<c path="String"/>
</f></toString>
				<toString public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int16"/></c>
	<c path="String"/>
</f></toString>
				<toString public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="String"/>
</f></toString>
			</overloads>
		</toString>
		<deepToString public="1" set="method" static="1"><f a="param1">
	<c path="java.NativeArray"><d/></c>
	<c path="String"/>
</f></deepToString>
		<setAll public="1" params="T" set="method" static="1">
			<f a="param1:param2">
				<c path="java.NativeArray"><c path="setAll.T"/></c>
				<c path="java.util.function.IntFunction"><c path="setAll.T"/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<setAll public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Float"/></c>
	<c path="java.util.function.IntToDoubleFunction"/>
	<x path="Void"/>
</f></setAll>
				<setAll public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<c path="java.util.function.IntToLongFunction"/>
	<x path="Void"/>
</f></setAll>
				<setAll public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.util.function.IntUnaryOperator"/>
	<x path="Void"/>
</f></setAll>
			</overloads>
		</setAll>
		<parallelSetAll public="1" params="T" set="method" static="1">
			<f a="param1:param2">
				<c path="java.NativeArray"><c path="parallelSetAll.T"/></c>
				<c path="java.util.function.IntFunction"><c path="parallelSetAll.T"/></c>
				<x path="Void"/>
			</f>
			<overloads>
				<parallelSetAll public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Float"/></c>
	<c path="java.util.function.IntToDoubleFunction"/>
	<x path="Void"/>
</f></parallelSetAll>
				<parallelSetAll public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<c path="java.util.function.IntToLongFunction"/>
	<x path="Void"/>
</f></parallelSetAll>
				<parallelSetAll public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.util.function.IntUnaryOperator"/>
	<x path="Void"/>
</f></parallelSetAll>
			</overloads>
		</parallelSetAll>
		<spliterator public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><c path="spliterator.T"/></c>
				<c path="java.util.Spliterator"><c path="spliterator.T"/></c>
			</f>
			<overloads>
				<spliterator public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfDouble"/>
</f></spliterator>
				<spliterator public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Float"/></c>
	<c path="java.util.Spliterator_OfDouble"/>
</f></spliterator>
				<spliterator public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfLong"/>
</f></spliterator>
				<spliterator public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<c path="java.util.Spliterator_OfLong"/>
</f></spliterator>
				<spliterator public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfInt"/>
</f></spliterator>
				<spliterator public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.util.Spliterator_OfInt"/>
</f></spliterator>
				<spliterator public="1" params="T" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><c path="spliterator.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Spliterator"><c path="spliterator.T"/></c>
</f></spliterator>
			</overloads>
		</spliterator>
		<stream public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><c path="stream.T"/></c>
				<c path="java.util.stream.Stream"><c path="stream.T"/></c>
			</f>
			<overloads>
				<stream public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.stream.DoubleStream"/>
</f></stream>
				<stream public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Float"/></c>
	<c path="java.util.stream.DoubleStream"/>
</f></stream>
				<stream public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.stream.LongStream"/>
</f></stream>
				<stream public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<c path="java.util.stream.LongStream"/>
</f></stream>
				<stream public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.stream.IntStream"/>
</f></stream>
				<stream public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.util.stream.IntStream"/>
</f></stream>
				<stream public="1" params="T" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><c path="stream.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.stream.Stream"><c path="stream.T"/></c>
</f></stream>
			</overloads>
		</stream>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.util.Arrays"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Arrays_NaturalOrder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Arrays$NaturalOrder.class" module="java.util.Arrays" extern="1">
		<implements path="java.util.Comparator"><d/></implements>
		<INSTANCE final="1" public="1" set="null" static="1"><c path="java.util.Arrays_NaturalOrder"/></INSTANCE>
		<compare public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compare>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Arrays$NaturalOrder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Arrays_LegacyMergeSort" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Arrays$LegacyMergeSort.class" module="java.util.Arrays" extern="1">
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Arrays$LegacyMergeSort"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Arrays_ArrayList" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Arrays$ArrayList.class" module="java.util.Arrays" extern="1">
		<extends path="java.util.AbstractList"><c path="java.util.Arrays_ArrayList.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.RandomAccess"/>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<toArray public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<get public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.Arrays_ArrayList.E"/>
</f></get>
		<set public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Arrays_ArrayList.E"/>
	<c path="java.util.Arrays_ArrayList.E"/>
</f></set>
		<indexOf public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Int"/>
</f></indexOf>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Arrays_ArrayList.E"/></c></f></spliterator>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.UnaryOperator"><c path="java.util.Arrays_ArrayList.E"/></c>
	<x path="Void"/>
</f></replaceAll>
		<sort public="1" set="method"><f a="param1">
	<c path="java.util.Comparator"><d/></c>
	<x path="Void"/>
</f></sort>
		<new public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.util.Arrays_ArrayList.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Arrays$ArrayList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.BitSet" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/BitSet.class" extern="1">
		<implements path="java.lang.Cloneable"/>
		<implements path="java.io.Serializable"/>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<c path="java.util.BitSet"/>
			</f>
			<overloads>
				<valueOf public="1" set="method"><f a="param1">
	<c path="java.nio.ByteBuffer"/>
	<c path="java.util.BitSet"/>
</f></valueOf>
				<valueOf public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<c path="java.util.BitSet"/>
</f></valueOf>
				<valueOf public="1" set="method"><f a="param1">
	<c path="java.nio.LongBuffer"/>
	<c path="java.util.BitSet"/>
</f></valueOf>
			</overloads>
		</valueOf>
		<toByteArray public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></toByteArray>
		<toLongArray public="1" set="method"><f a=""><c path="java.NativeArray"><x path="haxe.Int64"/></c></f></toLongArray>
		<flip public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><flip public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></flip></overloads>
		</flip>
		<set public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<set public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></set>
				<set public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
				<set public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></set>
			</overloads>
		</set>
		<clear public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
				<clear public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
			</overloads>
		</clear>
		<get public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<overloads><get public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.BitSet"/>
</f></get></overloads>
		</get>
		<nextSetBit public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></nextSetBit>
		<nextClearBit public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></nextClearBit>
		<previousSetBit public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></previousSetBit>
		<previousClearBit public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></previousClearBit>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<intersects public="1" set="method"><f a="param1">
	<c path="java.util.BitSet"/>
	<x path="Bool"/>
</f></intersects>
		<cardinality public="1" set="method"><f a=""><x path="Int"/></f></cardinality>
		<and public="1" set="method"><f a="param1">
	<c path="java.util.BitSet"/>
	<x path="Void"/>
</f></and>
		<or public="1" set="method"><f a="param1">
	<c path="java.util.BitSet"/>
	<x path="Void"/>
</f></or>
		<xor public="1" set="method"><f a="param1">
	<c path="java.util.BitSet"/>
	<x path="Void"/>
</f></xor>
		<andNot public="1" set="method"><f a="param1">
	<c path="java.util.BitSet"/>
	<x path="Void"/>
</f></andNot>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<stream public="1" set="method"><f a=""><c path="java.util.stream.IntStream"/></f></stream>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.BitSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.BitSet_1BitSetIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/BitSet$1BitSetIterator.class" module="java.util.BitSet" extern="1">
		<implements path="java.util.PrimitiveIterator_OfInt"/>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<nextInt public="1" set="method"><f a=""><x path="Int"/></f></nextInt>
		<next public="1"><x path="Int"/></next>
		<this_0 final="1" public="1">
			<c path="java.util.BitSet"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.BitSet"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.BitSet$1BitSetIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Calendar" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Calendar.class" extern="1" abstract="1">
		<implements path="java.lang.Comparable"><c path="java.util.Calendar"/></implements>
		<implements path="java.lang.Cloneable"/>
		<implements path="java.io.Serializable"/>
		<getInstance public="1" set="method" static="1">
			<f a=""><c path="java.util.Calendar"/></f>
			<overloads>
				<getInstance public="1" set="method"><f a="param1:param2">
	<c path="java.util.TimeZone"/>
	<c path="java.util.Locale"/>
	<c path="java.util.Calendar"/>
</f></getInstance>
				<getInstance public="1" set="method"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="java.util.Calendar"/>
</f></getInstance>
				<getInstance public="1" set="method"><f a="param1">
	<c path="java.util.TimeZone"/>
	<c path="java.util.Calendar"/>
</f></getInstance>
			</overloads>
		</getInstance>
		<getAvailableLocales public="1" set="method" static="1"><f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f></getAvailableLocales>
		<isFieldSet public="1" set="method" static="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isFieldSet>
		<getAvailableCalendarTypes public="1" set="method" static="1"><f a=""><c path="java.util.Set"><c path="String"/></c></f></getAvailableCalendarTypes>
		<getFieldName public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="String"/>
</f></getFieldName>
		<ERA final="1" public="1" set="null" static="1"><x path="Int"/></ERA>
		<YEAR final="1" public="1" set="null" static="1"><x path="Int"/></YEAR>
		<MONTH final="1" public="1" set="null" static="1"><x path="Int"/></MONTH>
		<WEEK_OF_YEAR final="1" public="1" set="null" static="1"><x path="Int"/></WEEK_OF_YEAR>
		<WEEK_OF_MONTH final="1" public="1" set="null" static="1"><x path="Int"/></WEEK_OF_MONTH>
		<DATE final="1" public="1" set="null" static="1"><x path="Int"/></DATE>
		<DAY_OF_MONTH final="1" public="1" set="null" static="1"><x path="Int"/></DAY_OF_MONTH>
		<DAY_OF_YEAR final="1" public="1" set="null" static="1"><x path="Int"/></DAY_OF_YEAR>
		<DAY_OF_WEEK final="1" public="1" set="null" static="1"><x path="Int"/></DAY_OF_WEEK>
		<DAY_OF_WEEK_IN_MONTH final="1" public="1" set="null" static="1"><x path="Int"/></DAY_OF_WEEK_IN_MONTH>
		<AM_PM final="1" public="1" set="null" static="1"><x path="Int"/></AM_PM>
		<HOUR final="1" public="1" set="null" static="1"><x path="Int"/></HOUR>
		<HOUR_OF_DAY final="1" public="1" set="null" static="1"><x path="Int"/></HOUR_OF_DAY>
		<MINUTE final="1" public="1" set="null" static="1"><x path="Int"/></MINUTE>
		<SECOND final="1" public="1" set="null" static="1"><x path="Int"/></SECOND>
		<MILLISECOND final="1" public="1" set="null" static="1"><x path="Int"/></MILLISECOND>
		<ZONE_OFFSET final="1" public="1" set="null" static="1"><x path="Int"/></ZONE_OFFSET>
		<DST_OFFSET final="1" public="1" set="null" static="1"><x path="Int"/></DST_OFFSET>
		<FIELD_COUNT final="1" public="1" set="null" static="1"><x path="Int"/></FIELD_COUNT>
		<SUNDAY final="1" public="1" set="null" static="1"><x path="Int"/></SUNDAY>
		<MONDAY final="1" public="1" set="null" static="1"><x path="Int"/></MONDAY>
		<TUESDAY final="1" public="1" set="null" static="1"><x path="Int"/></TUESDAY>
		<WEDNESDAY final="1" public="1" set="null" static="1"><x path="Int"/></WEDNESDAY>
		<THURSDAY final="1" public="1" set="null" static="1"><x path="Int"/></THURSDAY>
		<FRIDAY final="1" public="1" set="null" static="1"><x path="Int"/></FRIDAY>
		<SATURDAY final="1" public="1" set="null" static="1"><x path="Int"/></SATURDAY>
		<JANUARY final="1" public="1" set="null" static="1"><x path="Int"/></JANUARY>
		<FEBRUARY final="1" public="1" set="null" static="1"><x path="Int"/></FEBRUARY>
		<MARCH final="1" public="1" set="null" static="1"><x path="Int"/></MARCH>
		<APRIL final="1" public="1" set="null" static="1"><x path="Int"/></APRIL>
		<MAY final="1" public="1" set="null" static="1"><x path="Int"/></MAY>
		<JUNE final="1" public="1" set="null" static="1"><x path="Int"/></JUNE>
		<JULY final="1" public="1" set="null" static="1"><x path="Int"/></JULY>
		<AUGUST final="1" public="1" set="null" static="1"><x path="Int"/></AUGUST>
		<SEPTEMBER final="1" public="1" set="null" static="1"><x path="Int"/></SEPTEMBER>
		<OCTOBER final="1" public="1" set="null" static="1"><x path="Int"/></OCTOBER>
		<NOVEMBER final="1" public="1" set="null" static="1"><x path="Int"/></NOVEMBER>
		<DECEMBER final="1" public="1" set="null" static="1"><x path="Int"/></DECEMBER>
		<UNDECIMBER final="1" public="1" set="null" static="1"><x path="Int"/></UNDECIMBER>
		<AM final="1" public="1" set="null" static="1"><x path="Int"/></AM>
		<PM final="1" public="1" set="null" static="1"><x path="Int"/></PM>
		<ALL_STYLES final="1" public="1" set="null" static="1"><x path="Int"/></ALL_STYLES>
		<STANDALONE_MASK final="1" public="1" set="null" static="1"><x path="Int"/></STANDALONE_MASK>
		<SHORT final="1" public="1" set="null" static="1"><x path="Int"/></SHORT>
		<LONG final="1" public="1" set="null" static="1"><x path="Int"/></LONG>
		<NARROW_FORMAT final="1" public="1" set="null" static="1"><x path="Int"/></NARROW_FORMAT>
		<NARROW_STANDALONE final="1" public="1" set="null" static="1"><x path="Int"/></NARROW_STANDALONE>
		<SHORT_FORMAT final="1" public="1" set="null" static="1"><x path="Int"/></SHORT_FORMAT>
		<LONG_FORMAT final="1" public="1" set="null" static="1"><x path="Int"/></LONG_FORMAT>
		<SHORT_STANDALONE final="1" public="1" set="null" static="1"><x path="Int"/></SHORT_STANDALONE>
		<LONG_STANDALONE final="1" public="1" set="null" static="1"><x path="Int"/></LONG_STANDALONE>
		<ALL_FIELDS final="1" public="1" set="null" static="1"><x path="Int"/></ALL_FIELDS>
		<currentSerialVersion final="1" public="1" set="null" static="1"><x path="Int"/></currentSerialVersion>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<ERA_MASK final="1" public="1" set="null" static="1"><x path="Int"/></ERA_MASK>
		<YEAR_MASK final="1" public="1" set="null" static="1"><x path="Int"/></YEAR_MASK>
		<MONTH_MASK final="1" public="1" set="null" static="1"><x path="Int"/></MONTH_MASK>
		<WEEK_OF_YEAR_MASK final="1" public="1" set="null" static="1"><x path="Int"/></WEEK_OF_YEAR_MASK>
		<WEEK_OF_MONTH_MASK final="1" public="1" set="null" static="1"><x path="Int"/></WEEK_OF_MONTH_MASK>
		<DAY_OF_MONTH_MASK final="1" public="1" set="null" static="1"><x path="Int"/></DAY_OF_MONTH_MASK>
		<DATE_MASK final="1" public="1" set="null" static="1"><x path="Int"/></DATE_MASK>
		<DAY_OF_YEAR_MASK final="1" public="1" set="null" static="1"><x path="Int"/></DAY_OF_YEAR_MASK>
		<DAY_OF_WEEK_MASK final="1" public="1" set="null" static="1"><x path="Int"/></DAY_OF_WEEK_MASK>
		<DAY_OF_WEEK_IN_MONTH_MASK final="1" public="1" set="null" static="1"><x path="Int"/></DAY_OF_WEEK_IN_MONTH_MASK>
		<AM_PM_MASK final="1" public="1" set="null" static="1"><x path="Int"/></AM_PM_MASK>
		<HOUR_MASK final="1" public="1" set="null" static="1"><x path="Int"/></HOUR_MASK>
		<HOUR_OF_DAY_MASK final="1" public="1" set="null" static="1"><x path="Int"/></HOUR_OF_DAY_MASK>
		<MINUTE_MASK final="1" public="1" set="null" static="1"><x path="Int"/></MINUTE_MASK>
		<SECOND_MASK final="1" public="1" set="null" static="1"><x path="Int"/></SECOND_MASK>
		<MILLISECOND_MASK final="1" public="1" set="null" static="1"><x path="Int"/></MILLISECOND_MASK>
		<ZONE_OFFSET_MASK final="1" public="1" set="null" static="1"><x path="Int"/></ZONE_OFFSET_MASK>
		<DST_OFFSET_MASK final="1" public="1" set="null" static="1"><x path="Int"/></DST_OFFSET_MASK>
		<computeTime abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></computeTime>
		<computeFields abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></computeFields>
		<getTime final="1" public="1" set="method"><f a=""><c path="java.util.Date"/></f></getTime>
		<setTime final="1" public="1" set="method"><f a="param1">
	<c path="java.util.Date"/>
	<x path="Void"/>
</f></setTime>
		<getTimeInMillis public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getTimeInMillis>
		<setTimeInMillis public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setTimeInMillis>
		<get public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<internalGet final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></internalGet>
		<internalSet final="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></internalSet>
		<set public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<set final="1" public="1" set="method"><f a="param1:param2:param3:param4:param5:param6">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
				<set final="1" public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
				<set final="1" public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
			</overloads>
		</set>
		<clear final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><clear final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></clear></overloads>
		</clear>
		<isSet final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSet>
		<getDisplayName public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getDisplayName>
		<getDisplayNames public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Locale"/>
	<c path="java.util.Map">
		<c path="String"/>
		<x path="java.lang.Integer"/>
	</c>
</f></getDisplayNames>
		<checkDisplayNameParams public="1" set="method"><f a="param1:param2:param3:param4:param5:param6">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Locale"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></checkDisplayNameParams>
		<complete public="1" set="method"><f a=""><x path="Void"/></f></complete>
		<isExternallySet final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isExternallySet>
		<getSetStateFields final="1" public="1" set="method"><f a=""><x path="Int"/></f></getSetStateFields>
		<setFieldsComputed final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setFieldsComputed>
		<setFieldsNormalized final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setFieldsNormalized>
		<isPartiallyNormalized final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isPartiallyNormalized>
		<isFullyNormalized final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isFullyNormalized>
		<setUnnormalized final="1" public="1" set="method"><f a=""><x path="Void"/></f></setUnnormalized>
		<selectFields final="1" public="1" set="method"><f a=""><x path="Int"/></f></selectFields>
		<getBaseStyle public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getBaseStyle>
		<isStandaloneStyle public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isStandaloneStyle>
		<isNarrowStyle public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isNarrowStyle>
		<getCalendarType public="1" set="method"><f a=""><c path="String"/></f></getCalendarType>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<before public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></before>
		<after public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></after>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.util.Calendar"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<add abstract="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></add>
		<roll abstract="1" public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<overloads><roll public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></roll></overloads>
		</roll>
		<setTimeZone public="1" set="method"><f a="param1">
	<c path="java.util.TimeZone"/>
	<x path="Void"/>
</f></setTimeZone>
		<getTimeZone public="1" set="method"><f a=""><c path="java.util.TimeZone"/></f></getTimeZone>
		<getZone public="1" set="method"><f a=""><c path="java.util.TimeZone"/></f></getZone>
		<setZoneShared public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setZoneShared>
		<setLenient public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setLenient>
		<isLenient public="1" set="method"><f a=""><x path="Bool"/></f></isLenient>
		<setFirstDayOfWeek public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setFirstDayOfWeek>
		<getFirstDayOfWeek public="1" set="method"><f a=""><x path="Int"/></f></getFirstDayOfWeek>
		<setMinimalDaysInFirstWeek public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setMinimalDaysInFirstWeek>
		<getMinimalDaysInFirstWeek public="1" set="method"><f a=""><x path="Int"/></f></getMinimalDaysInFirstWeek>
		<isWeekDateSupported public="1" set="method"><f a=""><x path="Bool"/></f></isWeekDateSupported>
		<getWeekYear public="1" set="method"><f a=""><x path="Int"/></f></getWeekYear>
		<setWeekDate public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setWeekDate>
		<getWeeksInWeekYear public="1" set="method"><f a=""><x path="Int"/></f></getWeeksInWeekYear>
		<getMinimum abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getMinimum>
		<getMaximum abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getMaximum>
		<getGreatestMinimum abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getGreatestMinimum>
		<getLeastMaximum abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getLeastMaximum>
		<getActualMinimum public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getActualMinimum>
		<getActualMaximum public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getActualMaximum>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toInstant final="1" public="1" set="method"><f a=""><c path="java.time.Instant"/></f></toInstant>
		<fields public="1"><c path="java.NativeArray"><x path="Int"/></c></fields>
		<time public="1"><x path="haxe.Int64"/></time>
		<isTimeSet public="1"><x path="Bool"/></isTimeSet>
		<areFieldsSet public="1"><x path="Bool"/></areFieldsSet>
		<areAllFieldsSet public="1"><x path="Bool"/></areAllFieldsSet>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.TimeZone"/>
	<c path="java.util.Locale"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Calendar"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Calendar_CalendarAccessControlContext" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Calendar$CalendarAccessControlContext.class" module="java.util.Calendar" extern="1"><meta>
	<m n=":native"><e>"java.util.Calendar$CalendarAccessControlContext"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.util.Calendar_Builder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Calendar$Builder.class" module="java.util.Calendar" extern="1">
		<setInstant public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.util.Calendar_Builder"/>
			</f>
			<overloads><setInstant public="1" set="method"><f a="param1">
	<c path="java.util.Date"/>
	<c path="java.util.Calendar_Builder"/>
</f></setInstant></overloads>
		</setInstant>
		<set public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Calendar_Builder"/>
</f></set>
		<setFields public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.util.Calendar_Builder"/>
</f></setFields>
		<setDate public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Calendar_Builder"/>
</f></setDate>
		<setTimeOfDay public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.util.Calendar_Builder"/>
			</f>
			<overloads><setTimeOfDay public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Calendar_Builder"/>
</f></setTimeOfDay></overloads>
		</setTimeOfDay>
		<setWeekDate public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Calendar_Builder"/>
</f></setWeekDate>
		<setTimeZone public="1" set="method"><f a="param1">
	<c path="java.util.TimeZone"/>
	<c path="java.util.Calendar_Builder"/>
</f></setTimeZone>
		<setLenient public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<c path="java.util.Calendar_Builder"/>
</f></setLenient>
		<setCalendarType public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.Calendar_Builder"/>
</f></setCalendarType>
		<setLocale public="1" set="method"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="java.util.Calendar_Builder"/>
</f></setLocale>
		<setWeekDefinition public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Calendar_Builder"/>
</f></setWeekDefinition>
		<build public="1" set="method"><f a=""><c path="java.util.Calendar"/></f></build>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Calendar$Builder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Calendar_AvailableCalendarTypes" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Calendar$AvailableCalendarTypes.class" module="java.util.Calendar" extern="1"><meta>
	<m n=":native"><e>"java.util.Calendar$AvailableCalendarTypes"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.util.Calendar_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Calendar$1.class" module="java.util.Calendar" extern="1">
		<implements path="java.security.PrivilegedExceptionAction"><c path="java.sun.util.calendar.ZoneInfo"/></implements>
		<run public="1" set="method"><f a=""><c path="java.sun.util.calendar.ZoneInfo"/></f></run>
		<val_input final="1" public="1">
			<c path="java.io.ObjectInputStream"/>
			<meta><m n=":native"><e>"val$input"</e></m></meta>
		</val_input>
		<this_0 final="1" public="1">
			<c path="java.util.Calendar"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Calendar"/>
	<c path="java.io.ObjectInputStream"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Calendar$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableCollection" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableCollection.class" module="java.util.Collections" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Collection"><c path="java.util.Collections_UnmodifiableCollection.E"/></implements>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<contains public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<toArray public="1" set="method">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.Collections_UnmodifiableCollection.E"/></c></f></iterator>
		<add public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableCollection.E"/>
	<x path="Bool"/>
</f></add>
		<remove public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<containsAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></containsAll>
		<addAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><c path="java.util.Collections_UnmodifiableCollection.E"/></c>
	<x path="Bool"/>
</f></addAll>
		<removeAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></removeAll>
		<retainAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></retainAll>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<removeIf public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<x path="Bool"/>
</f></removeIf>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Collections_UnmodifiableCollection.E"/></c></f></spliterator>
		<stream public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.Collections_UnmodifiableCollection.E"/></c></f></stream>
		<parallelStream public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.Collections_UnmodifiableCollection.E"/></c></f></parallelStream>
		<c final="1" public="1"><c path="java.util.Collection"><c path="java.util.Collections_UnmodifiableCollection.E"/></c></c>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><c path="java.util.Collections_UnmodifiableCollection.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableCollection"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableSet.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_UnmodifiableCollection"><c path="java.util.Collections_UnmodifiableSet.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Set"><c path="java.util.Collections_UnmodifiableSet.E"/></implements>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Set"><c path="java.util.Collections_UnmodifiableSet.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.SortedSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/SortedSet.class" extern="1" interface="1">
		<extends path="java.util.Set"><c path="java.util.SortedSet.E"/></extends>
		<comparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></comparator>
		<subSet public="1" set="method"><f a="param1:param2">
	<c path="java.util.SortedSet.E"/>
	<c path="java.util.SortedSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.SortedSet.E"/></c>
</f></subSet>
		<headSet public="1" set="method"><f a="param1">
	<c path="java.util.SortedSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.SortedSet.E"/></c>
</f></headSet>
		<tailSet public="1" set="method"><f a="param1">
	<c path="java.util.SortedSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.SortedSet.E"/></c>
</f></tailSet>
		<first public="1" set="method"><f a=""><c path="java.util.SortedSet.E"/></f></first>
		<last public="1" set="method"><f a=""><c path="java.util.SortedSet.E"/></f></last>
		<spliterator public="1" set="method">
			<f a=""><c path="java.util.Spliterator"><c path="java.util.SortedSet.E"/></c></f>
			<meta><m n=":java.default"/></meta>
		</spliterator>
		<meta>
			<m n=":native"><e>"java.util.SortedSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableSortedSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableSortedSet.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_UnmodifiableSet"><c path="java.util.Collections_UnmodifiableSortedSet.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.SortedSet"><c path="java.util.Collections_UnmodifiableSortedSet.E"/></implements>
		<comparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></comparator>
		<subSet public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_UnmodifiableSortedSet.E"/>
	<c path="java.util.Collections_UnmodifiableSortedSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.Collections_UnmodifiableSortedSet.E"/></c>
</f></subSet>
		<headSet public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableSortedSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.Collections_UnmodifiableSortedSet.E"/></c>
</f></headSet>
		<tailSet public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableSortedSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.Collections_UnmodifiableSortedSet.E"/></c>
</f></tailSet>
		<first public="1" set="method"><f a=""><c path="java.util.Collections_UnmodifiableSortedSet.E"/></f></first>
		<last public="1" set="method"><f a=""><c path="java.util.Collections_UnmodifiableSortedSet.E"/></f></last>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.SortedSet"><c path="java.util.Collections_UnmodifiableSortedSet.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableSortedSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableMap.class" module="java.util.Collections" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Map">
			<c path="java.util.Collections_UnmodifiableMap.K"/>
			<c path="java.util.Collections_UnmodifiableMap.V"/>
		</implements>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<containsKey public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsKey>
		<containsValue public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsValue>
		<get public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
</f></get>
		<put public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_UnmodifiableMap.K"/>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
</f></put>
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.util.Collections_UnmodifiableMap.V"/>
			</f>
			<overloads><remove public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></remove></overloads>
		</remove>
		<putAll public="1" set="method"><f a="param1">
	<c path="java.util.Map">
		<c path="java.util.Collections_UnmodifiableMap.K"/>
		<c path="java.util.Collections_UnmodifiableMap.V"/>
	</c>
	<x path="Void"/>
</f></putAll>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<keySet public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.Collections_UnmodifiableMap.K"/></c></f></keySet>
		<entrySet public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableMap.K"/>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
</c></c></f></entrySet>
		<values public="1" set="method"><f a=""><c path="java.util.Collection"><c path="java.util.Collections_UnmodifiableMap.V"/></c></f></values>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<getOrDefault public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
</f></getOrDefault>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.BiConsumer">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></forEach>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_UnmodifiableMap.V"/>
	</c>
	<x path="Void"/>
</f></replaceAll>
		<putIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_UnmodifiableMap.K"/>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
</f></putIfAbsent>
		<replace public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Collections_UnmodifiableMap.K"/>
				<c path="java.util.Collections_UnmodifiableMap.V"/>
				<c path="java.util.Collections_UnmodifiableMap.V"/>
				<x path="Bool"/>
			</f>
			<overloads><replace public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_UnmodifiableMap.K"/>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
</f></replace></overloads>
		</replace>
		<computeIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_UnmodifiableMap.K"/>
	<c path="java.util.function.Function">
		<d/>
		<c path="java.util.Collections_UnmodifiableMap.V"/>
	</c>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
</f></computeIfAbsent>
		<computeIfPresent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_UnmodifiableMap.K"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_UnmodifiableMap.V"/>
	</c>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
</f></computeIfPresent>
		<compute public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_UnmodifiableMap.K"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_UnmodifiableMap.V"/>
	</c>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
</f></compute>
		<merge public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Collections_UnmodifiableMap.K"/>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_UnmodifiableMap.V"/>
	</c>
	<c path="java.util.Collections_UnmodifiableMap.V"/>
</f></merge>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Map">
		<c path="java.util.Collections_UnmodifiableMap.K"/>
		<c path="java.util.Collections_UnmodifiableMap.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.SortedMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/SortedMap.class" extern="1" interface="1">
		<extends path="java.util.Map">
			<c path="java.util.SortedMap.K"/>
			<c path="java.util.SortedMap.V"/>
		</extends>
		<comparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></comparator>
		<subMap public="1" set="method"><f a="param1:param2">
	<c path="java.util.SortedMap.K"/>
	<c path="java.util.SortedMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.SortedMap.K"/>
		<c path="java.util.SortedMap.V"/>
	</c>
</f></subMap>
		<headMap public="1" set="method"><f a="param1">
	<c path="java.util.SortedMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.SortedMap.K"/>
		<c path="java.util.SortedMap.V"/>
	</c>
</f></headMap>
		<tailMap public="1" set="method"><f a="param1">
	<c path="java.util.SortedMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.SortedMap.K"/>
		<c path="java.util.SortedMap.V"/>
	</c>
</f></tailMap>
		<firstKey public="1" set="method"><f a=""><c path="java.util.SortedMap.K"/></f></firstKey>
		<lastKey public="1" set="method"><f a=""><c path="java.util.SortedMap.K"/></f></lastKey>
		<keySet public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.SortedMap.K"/></c></f></keySet>
		<values public="1" set="method"><f a=""><c path="java.util.Collection"><c path="java.util.SortedMap.V"/></c></f></values>
		<entrySet public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.SortedMap.K"/>
	<c path="java.util.SortedMap.V"/>
</c></c></f></entrySet>
		<meta>
			<m n=":native"><e>"java.util.SortedMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableSortedMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableSortedMap.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_UnmodifiableMap">
			<c path="java.util.Collections_UnmodifiableSortedMap.K"/>
			<c path="java.util.Collections_UnmodifiableSortedMap.V"/>
		</extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.SortedMap">
			<c path="java.util.Collections_UnmodifiableSortedMap.K"/>
			<c path="java.util.Collections_UnmodifiableSortedMap.V"/>
		</implements>
		<comparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></comparator>
		<subMap public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_UnmodifiableSortedMap.K"/>
	<c path="java.util.Collections_UnmodifiableSortedMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.Collections_UnmodifiableSortedMap.K"/>
		<c path="java.util.Collections_UnmodifiableSortedMap.V"/>
	</c>
</f></subMap>
		<headMap public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableSortedMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.Collections_UnmodifiableSortedMap.K"/>
		<c path="java.util.Collections_UnmodifiableSortedMap.V"/>
	</c>
</f></headMap>
		<tailMap public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableSortedMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.Collections_UnmodifiableSortedMap.K"/>
		<c path="java.util.Collections_UnmodifiableSortedMap.V"/>
	</c>
</f></tailMap>
		<firstKey public="1" set="method"><f a=""><c path="java.util.Collections_UnmodifiableSortedMap.K"/></f></firstKey>
		<lastKey public="1" set="method"><f a=""><c path="java.util.Collections_UnmodifiableSortedMap.K"/></f></lastKey>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.SortedMap">
		<c path="java.util.Collections_UnmodifiableSortedMap.K"/>
		<c path="java.util.Collections_UnmodifiableSortedMap.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableSortedMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableList" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableList.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_UnmodifiableCollection"><c path="java.util.Collections_UnmodifiableList.E"/></extends>
		<implements path="java.util.List"><c path="java.util.Collections_UnmodifiableList.E"/></implements>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<get public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.Collections_UnmodifiableList.E"/>
</f></get>
		<set public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collections_UnmodifiableList.E"/>
	<c path="java.util.Collections_UnmodifiableList.E"/>
</f></set>
		<add public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collections_UnmodifiableList.E"/>
	<x path="Void"/>
</f></add>
		<remove public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.Collections_UnmodifiableList.E"/>
</f></remove>
		<indexOf public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></lastIndexOf>
		<addAll public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collection"><c path="java.util.Collections_UnmodifiableList.E"/></c>
	<x path="Bool"/>
</f></addAll>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.UnaryOperator"><c path="java.util.Collections_UnmodifiableList.E"/></c>
	<x path="Void"/>
</f></replaceAll>
		<sort public="1" set="method"><f a="param1">
	<c path="java.util.Comparator"><d/></c>
	<x path="Void"/>
</f></sort>
		<listIterator public="1" set="method">
			<f a=""><c path="java.util.ListIterator"><c path="java.util.Collections_UnmodifiableList.E"/></c></f>
			<overloads><listIterator public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.ListIterator"><c path="java.util.Collections_UnmodifiableList.E"/></c>
</f></listIterator></overloads>
		</listIterator>
		<subList public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.List"><c path="java.util.Collections_UnmodifiableList.E"/></c>
</f></subList>
		<list final="1" public="1"><c path="java.util.List"><c path="java.util.Collections_UnmodifiableList.E"/></c></list>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.List"><c path="java.util.Collections_UnmodifiableList.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableRandomAccessList" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableRandomAccessList.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_UnmodifiableList"><c path="java.util.Collections_UnmodifiableRandomAccessList.E"/></extends>
		<implements path="java.util.RandomAccess"/>
		<subList public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.List"><c path="java.util.Collections_UnmodifiableRandomAccessList.E"/></c>
</f></subList>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.List"><c path="java.util.Collections_UnmodifiableRandomAccessList.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableRandomAccessList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.NavigableSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/NavigableSet.class" extern="1" interface="1">
		<extends path="java.util.SortedSet"><c path="java.util.NavigableSet.E"/></extends>
		<lower public="1" set="method"><f a="param1">
	<c path="java.util.NavigableSet.E"/>
	<c path="java.util.NavigableSet.E"/>
</f></lower>
		<floor public="1" set="method"><f a="param1">
	<c path="java.util.NavigableSet.E"/>
	<c path="java.util.NavigableSet.E"/>
</f></floor>
		<ceiling public="1" set="method"><f a="param1">
	<c path="java.util.NavigableSet.E"/>
	<c path="java.util.NavigableSet.E"/>
</f></ceiling>
		<higher public="1" set="method"><f a="param1">
	<c path="java.util.NavigableSet.E"/>
	<c path="java.util.NavigableSet.E"/>
</f></higher>
		<pollFirst public="1" set="method"><f a=""><c path="java.util.NavigableSet.E"/></f></pollFirst>
		<pollLast public="1" set="method"><f a=""><c path="java.util.NavigableSet.E"/></f></pollLast>
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.NavigableSet.E"/></c></f></iterator>
		<descendingSet public="1" set="method"><f a=""><c path="java.util.NavigableSet"><c path="java.util.NavigableSet.E"/></c></f></descendingSet>
		<descendingIterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.NavigableSet.E"/></c></f></descendingIterator>
		<subSet public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.util.NavigableSet.E"/>
				<x path="Bool"/>
				<c path="java.util.NavigableSet.E"/>
				<x path="Bool"/>
				<c path="java.util.NavigableSet"><c path="java.util.NavigableSet.E"/></c>
			</f>
			<overloads><subSet public="1" set="method"><f a="param1:param2">
	<c path="java.util.NavigableSet.E"/>
	<c path="java.util.NavigableSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.NavigableSet.E"/></c>
</f></subSet></overloads>
		</subSet>
		<headSet public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.NavigableSet.E"/>
				<x path="Bool"/>
				<c path="java.util.NavigableSet"><c path="java.util.NavigableSet.E"/></c>
			</f>
			<overloads><headSet public="1" set="method"><f a="param1">
	<c path="java.util.NavigableSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.NavigableSet.E"/></c>
</f></headSet></overloads>
		</headSet>
		<tailSet public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.NavigableSet.E"/>
				<x path="Bool"/>
				<c path="java.util.NavigableSet"><c path="java.util.NavigableSet.E"/></c>
			</f>
			<overloads><tailSet public="1" set="method"><f a="param1">
	<c path="java.util.NavigableSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.NavigableSet.E"/></c>
</f></tailSet></overloads>
		</tailSet>
		<meta>
			<m n=":native"><e>"java.util.NavigableSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableNavigableSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableNavigableSet.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_UnmodifiableSortedSet"><c path="java.util.Collections_UnmodifiableNavigableSet.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.NavigableSet"><c path="java.util.Collections_UnmodifiableNavigableSet.E"/></implements>
		<lower public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableNavigableSet.E"/>
	<c path="java.util.Collections_UnmodifiableNavigableSet.E"/>
</f></lower>
		<floor public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableNavigableSet.E"/>
	<c path="java.util.Collections_UnmodifiableNavigableSet.E"/>
</f></floor>
		<ceiling public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableNavigableSet.E"/>
	<c path="java.util.Collections_UnmodifiableNavigableSet.E"/>
</f></ceiling>
		<higher public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableNavigableSet.E"/>
	<c path="java.util.Collections_UnmodifiableNavigableSet.E"/>
</f></higher>
		<pollFirst public="1" set="method"><f a=""><c path="java.util.Collections_UnmodifiableNavigableSet.E"/></f></pollFirst>
		<pollLast public="1" set="method"><f a=""><c path="java.util.Collections_UnmodifiableNavigableSet.E"/></f></pollLast>
		<descendingSet public="1" set="method"><f a=""><c path="java.util.NavigableSet"><c path="java.util.Collections_UnmodifiableNavigableSet.E"/></c></f></descendingSet>
		<descendingIterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.Collections_UnmodifiableNavigableSet.E"/></c></f></descendingIterator>
		<subSet public="1" set="method" override="1"><f a="param1:param2:param3:param4">
	<c path="java.util.Collections_UnmodifiableNavigableSet.E"/>
	<x path="Bool"/>
	<c path="java.util.Collections_UnmodifiableNavigableSet.E"/>
	<x path="Bool"/>
	<c path="java.util.NavigableSet"><c path="java.util.Collections_UnmodifiableNavigableSet.E"/></c>
</f></subSet>
		<headSet public="1" set="method" override="1"><f a="param1:param2">
	<c path="java.util.Collections_UnmodifiableNavigableSet.E"/>
	<x path="Bool"/>
	<c path="java.util.NavigableSet"><c path="java.util.Collections_UnmodifiableNavigableSet.E"/></c>
</f></headSet>
		<tailSet public="1" set="method" override="1"><f a="param1:param2">
	<c path="java.util.Collections_UnmodifiableNavigableSet.E"/>
	<x path="Bool"/>
	<c path="java.util.NavigableSet"><c path="java.util.Collections_UnmodifiableNavigableSet.E"/></c>
</f></tailSet>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.NavigableSet"><c path="java.util.Collections_UnmodifiableNavigableSet.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableNavigableSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableNavigableSet_EmptyNavigableSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableNavigableSet$EmptyNavigableSet.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_UnmodifiableNavigableSet"><c path="java.util.Collections_UnmodifiableNavigableSet_EmptyNavigableSet.E"/></extends>
		<implements path="java.io.Serializable"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableNavigableSet$EmptyNavigableSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.NavigableMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/NavigableMap.class" extern="1" interface="1">
		<extends path="java.util.SortedMap">
			<c path="java.util.NavigableMap.K"/>
			<c path="java.util.NavigableMap.V"/>
		</extends>
		<lowerEntry public="1" set="method"><f a="param1">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.NavigableMap.K"/>
		<c path="java.util.NavigableMap.V"/>
	</c>
</f></lowerEntry>
		<lowerKey public="1" set="method"><f a="param1">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.NavigableMap.K"/>
</f></lowerKey>
		<floorEntry public="1" set="method"><f a="param1">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.NavigableMap.K"/>
		<c path="java.util.NavigableMap.V"/>
	</c>
</f></floorEntry>
		<floorKey public="1" set="method"><f a="param1">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.NavigableMap.K"/>
</f></floorKey>
		<ceilingEntry public="1" set="method"><f a="param1">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.NavigableMap.K"/>
		<c path="java.util.NavigableMap.V"/>
	</c>
</f></ceilingEntry>
		<ceilingKey public="1" set="method"><f a="param1">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.NavigableMap.K"/>
</f></ceilingKey>
		<higherEntry public="1" set="method"><f a="param1">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.NavigableMap.K"/>
		<c path="java.util.NavigableMap.V"/>
	</c>
</f></higherEntry>
		<higherKey public="1" set="method"><f a="param1">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.NavigableMap.K"/>
</f></higherKey>
		<firstEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.NavigableMap.V"/>
</c></f></firstEntry>
		<lastEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.NavigableMap.V"/>
</c></f></lastEntry>
		<pollFirstEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.NavigableMap.V"/>
</c></f></pollFirstEntry>
		<pollLastEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.NavigableMap.V"/>
</c></f></pollLastEntry>
		<descendingMap public="1" set="method"><f a=""><c path="java.util.NavigableMap">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.NavigableMap.V"/>
</c></f></descendingMap>
		<navigableKeySet public="1" set="method"><f a=""><c path="java.util.NavigableSet"><c path="java.util.NavigableMap.K"/></c></f></navigableKeySet>
		<descendingKeySet public="1" set="method"><f a=""><c path="java.util.NavigableSet"><c path="java.util.NavigableMap.K"/></c></f></descendingKeySet>
		<subMap public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.util.NavigableMap.K"/>
				<x path="Bool"/>
				<c path="java.util.NavigableMap.K"/>
				<x path="Bool"/>
				<c path="java.util.NavigableMap">
					<c path="java.util.NavigableMap.K"/>
					<c path="java.util.NavigableMap.V"/>
				</c>
			</f>
			<overloads><subMap public="1" set="method"><f a="param1:param2">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.NavigableMap.K"/>
		<c path="java.util.NavigableMap.V"/>
	</c>
</f></subMap></overloads>
		</subMap>
		<headMap public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.NavigableMap.K"/>
				<x path="Bool"/>
				<c path="java.util.NavigableMap">
					<c path="java.util.NavigableMap.K"/>
					<c path="java.util.NavigableMap.V"/>
				</c>
			</f>
			<overloads><headMap public="1" set="method"><f a="param1">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.NavigableMap.K"/>
		<c path="java.util.NavigableMap.V"/>
	</c>
</f></headMap></overloads>
		</headMap>
		<tailMap public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.NavigableMap.K"/>
				<x path="Bool"/>
				<c path="java.util.NavigableMap">
					<c path="java.util.NavigableMap.K"/>
					<c path="java.util.NavigableMap.V"/>
				</c>
			</f>
			<overloads><tailMap public="1" set="method"><f a="param1">
	<c path="java.util.NavigableMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.NavigableMap.K"/>
		<c path="java.util.NavigableMap.V"/>
	</c>
</f></tailMap></overloads>
		</tailMap>
		<meta>
			<m n=":native"><e>"java.util.NavigableMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableNavigableMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableNavigableMap.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_UnmodifiableSortedMap">
			<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
			<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
		</extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.NavigableMap">
			<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
			<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
		</implements>
		<lowerKey public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
</f></lowerKey>
		<floorKey public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
</f></floorKey>
		<ceilingKey public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
</f></ceilingKey>
		<higherKey public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
</f></higherKey>
		<lowerEntry public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
		<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
	</c>
</f></lowerEntry>
		<floorEntry public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
		<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
	</c>
</f></floorEntry>
		<ceilingEntry public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
		<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
	</c>
</f></ceilingEntry>
		<higherEntry public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
		<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
	</c>
</f></higherEntry>
		<firstEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
</c></f></firstEntry>
		<lastEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
</c></f></lastEntry>
		<pollFirstEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
</c></f></pollFirstEntry>
		<pollLastEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
</c></f></pollLastEntry>
		<descendingMap public="1" set="method"><f a=""><c path="java.util.NavigableMap">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
</c></f></descendingMap>
		<navigableKeySet public="1" set="method"><f a=""><c path="java.util.NavigableSet"><c path="java.util.Collections_UnmodifiableNavigableMap.K"/></c></f></navigableKeySet>
		<descendingKeySet public="1" set="method"><f a=""><c path="java.util.NavigableSet"><c path="java.util.Collections_UnmodifiableNavigableMap.K"/></c></f></descendingKeySet>
		<subMap public="1" set="method" override="1"><f a="param1:param2:param3:param4">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<x path="Bool"/>
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<x path="Bool"/>
	<c path="java.util.NavigableMap">
		<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
		<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
	</c>
</f></subMap>
		<headMap public="1" set="method" override="1"><f a="param1:param2">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<x path="Bool"/>
	<c path="java.util.NavigableMap">
		<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
		<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
	</c>
</f></headMap>
		<tailMap public="1" set="method" override="1"><f a="param1:param2">
	<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
	<x path="Bool"/>
	<c path="java.util.NavigableMap">
		<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
		<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
	</c>
</f></tailMap>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.NavigableMap">
		<c path="java.util.Collections_UnmodifiableNavigableMap.K"/>
		<c path="java.util.Collections_UnmodifiableNavigableMap.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableNavigableMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableNavigableMap_EmptyNavigableMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableNavigableMap$EmptyNavigableMap.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_UnmodifiableNavigableMap">
			<c path="java.util.Collections_UnmodifiableNavigableMap_EmptyNavigableMap.K"/>
			<c path="java.util.Collections_UnmodifiableNavigableMap_EmptyNavigableMap.V"/>
		</extends>
		<implements path="java.io.Serializable"/>
		<navigableKeySet public="1" set="method" override="1"><f a=""><c path="java.util.NavigableSet"><c path="java.util.Collections_UnmodifiableNavigableMap_EmptyNavigableMap.K"/></c></f></navigableKeySet>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableNavigableMap$EmptyNavigableMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_UnmodifiableSet"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet.K"/>
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet.V"/>
</c></extends>
		<entryConsumer public="1" params="K:V" set="method" static="1"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<c path="java.util.function.Consumer"><c path="java.util.Map_Entry">
	<c path="entryConsumer.K"/>
	<c path="entryConsumer.V"/>
</c></c>
</f></entryConsumer>
		<forEach public="1" set="method" override="1"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<spliterator public="1" set="method" override="1"><f a=""><c path="java.util.Spliterator"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet.K"/>
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet.V"/>
</c></c></f></spliterator>
		<stream public="1" set="method" override="1"><f a=""><c path="java.util.stream.Stream"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet.K"/>
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet.V"/>
</c></c></f></stream>
		<parallelStream public="1" set="method" override="1"><f a=""><c path="java.util.stream.Stream"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet.K"/>
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet.V"/>
</c></c></f></parallelStream>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet.K"/>
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet.V"/>
</c></c></f></iterator>
		<toArray public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<containsAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></containsAll>
		<equals public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet.K"/>
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet.V"/>
</c></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntrySetSpliterator" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator.class" module="java.util.Collections" extern="1">
		<implements path="java.util.Spliterator"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntrySetSpliterator.K"/>
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntrySetSpliterator.V"/>
</c></implements>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntrySetSpliterator.K"/>
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntrySetSpliterator.V"/>
</c></c></f></trySplit>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<getExactSizeIfKnown public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getExactSizeIfKnown>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<hasCharacteristics public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></hasCharacteristics>
		<getComparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></getComparator>
		<s final="1" public="1"><c path="java.util.Spliterator"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntrySetSpliterator.K"/>
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntrySetSpliterator.V"/>
</c></c></s>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Spliterator"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntrySetSpliterator.K"/>
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntrySetSpliterator.V"/>
</c></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntrySetSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.class" module="java.util.Collections" extern="1">
		<implements path="java.util.Map_Entry">
			<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry.K"/>
			<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry.V"/>
		</implements>
		<getKey public="1" set="method"><f a=""><c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry.K"/></f></getKey>
		<getValue public="1" set="method"><f a=""><c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry.V"/></f></getValue>
		<setValue public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry.V"/>
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry.V"/>
</f></setValue>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Map_Entry">
		<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry.K"/>
		<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableEntry.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.class" module="java.util.Collections" extern="1">
		<implements path="java.util.Iterator"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<this_0 final="1" public="1">
			<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableMap_UnmodifiableEntrySet">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableList_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableList$1.class" module="java.util.Collections" extern="1">
		<implements path="java.util.ListIterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<hasPrevious public="1" set="method"><f a=""><x path="Bool"/></f></hasPrevious>
		<previous public="1" set="method"><f a=""><d/></f></previous>
		<nextIndex public="1" set="method"><f a=""><x path="Int"/></f></nextIndex>
		<previousIndex public="1" set="method"><f a=""><x path="Int"/></f></previousIndex>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<set public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></set>
		<add public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></add>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<val_index final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$index"</e></m></meta>
		</val_index>
		<this_0 final="1" public="1">
			<c path="java.util.Collections_UnmodifiableList"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_UnmodifiableList"><d/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableList$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_UnmodifiableCollection_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$UnmodifiableCollection$1.class" module="java.util.Collections" extern="1">
		<implements path="java.util.Iterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<this_0 final="1" public="1">
			<c path="java.util.Collections_UnmodifiableCollection"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Collections_UnmodifiableCollection"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$UnmodifiableCollection$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_SynchronizedCollection" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$SynchronizedCollection.class" module="java.util.Collections" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Collection"><c path="java.util.Collections_SynchronizedCollection.E"/></implements>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<contains public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<toArray public="1" set="method">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.Collections_SynchronizedCollection.E"/></c></f></iterator>
		<add public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedCollection.E"/>
	<x path="Bool"/>
</f></add>
		<remove public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<containsAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></containsAll>
		<addAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><c path="java.util.Collections_SynchronizedCollection.E"/></c>
	<x path="Bool"/>
</f></addAll>
		<removeAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></removeAll>
		<retainAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></retainAll>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<removeIf public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<x path="Bool"/>
</f></removeIf>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Collections_SynchronizedCollection.E"/></c></f></spliterator>
		<stream public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.Collections_SynchronizedCollection.E"/></c></f></stream>
		<parallelStream public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.Collections_SynchronizedCollection.E"/></c></f></parallelStream>
		<c final="1" public="1"><c path="java.util.Collection"><c path="java.util.Collections_SynchronizedCollection.E"/></c></c>
		<mutex final="1" public="1"><d/></mutex>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><c path="java.util.Collections_SynchronizedCollection.E"/></c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collection"><c path="java.util.Collections_SynchronizedCollection.E"/></c>
	<d/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Collections$SynchronizedCollection"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_SynchronizedSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$SynchronizedSet.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_SynchronizedCollection"><c path="java.util.Collections_SynchronizedSet.E"/></extends>
		<implements path="java.util.Set"><c path="java.util.Collections_SynchronizedSet.E"/></implements>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.Set"><c path="java.util.Collections_SynchronizedSet.E"/></c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Set"><c path="java.util.Collections_SynchronizedSet.E"/></c>
	<d/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Collections$SynchronizedSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_SynchronizedSortedSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$SynchronizedSortedSet.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_SynchronizedSet"><c path="java.util.Collections_SynchronizedSortedSet.E"/></extends>
		<implements path="java.util.SortedSet"><c path="java.util.Collections_SynchronizedSortedSet.E"/></implements>
		<comparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></comparator>
		<subSet public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SynchronizedSortedSet.E"/>
	<c path="java.util.Collections_SynchronizedSortedSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.Collections_SynchronizedSortedSet.E"/></c>
</f></subSet>
		<headSet public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedSortedSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.Collections_SynchronizedSortedSet.E"/></c>
</f></headSet>
		<tailSet public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedSortedSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.Collections_SynchronizedSortedSet.E"/></c>
</f></tailSet>
		<first public="1" set="method"><f a=""><c path="java.util.Collections_SynchronizedSortedSet.E"/></f></first>
		<last public="1" set="method"><f a=""><c path="java.util.Collections_SynchronizedSortedSet.E"/></f></last>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.SortedSet"><c path="java.util.Collections_SynchronizedSortedSet.E"/></c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.SortedSet"><c path="java.util.Collections_SynchronizedSortedSet.E"/></c>
	<d/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Collections$SynchronizedSortedSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_SynchronizedMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$SynchronizedMap.class" module="java.util.Collections" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Map">
			<c path="java.util.Collections_SynchronizedMap.K"/>
			<c path="java.util.Collections_SynchronizedMap.V"/>
		</implements>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<containsKey public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsKey>
		<containsValue public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsValue>
		<get public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.Collections_SynchronizedMap.V"/>
</f></get>
		<put public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SynchronizedMap.K"/>
	<c path="java.util.Collections_SynchronizedMap.V"/>
	<c path="java.util.Collections_SynchronizedMap.V"/>
</f></put>
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.util.Collections_SynchronizedMap.V"/>
			</f>
			<overloads><remove public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></remove></overloads>
		</remove>
		<putAll public="1" set="method"><f a="param1">
	<c path="java.util.Map">
		<c path="java.util.Collections_SynchronizedMap.K"/>
		<c path="java.util.Collections_SynchronizedMap.V"/>
	</c>
	<x path="Void"/>
</f></putAll>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<keySet public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.Collections_SynchronizedMap.K"/></c></f></keySet>
		<entrySet public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_SynchronizedMap.K"/>
	<c path="java.util.Collections_SynchronizedMap.V"/>
</c></c></f></entrySet>
		<values public="1" set="method"><f a=""><c path="java.util.Collection"><c path="java.util.Collections_SynchronizedMap.V"/></c></f></values>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<getOrDefault public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.util.Collections_SynchronizedMap.V"/>
	<c path="java.util.Collections_SynchronizedMap.V"/>
</f></getOrDefault>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.BiConsumer">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></forEach>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_SynchronizedMap.V"/>
	</c>
	<x path="Void"/>
</f></replaceAll>
		<putIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SynchronizedMap.K"/>
	<c path="java.util.Collections_SynchronizedMap.V"/>
	<c path="java.util.Collections_SynchronizedMap.V"/>
</f></putIfAbsent>
		<replace public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Collections_SynchronizedMap.K"/>
				<c path="java.util.Collections_SynchronizedMap.V"/>
				<c path="java.util.Collections_SynchronizedMap.V"/>
				<x path="Bool"/>
			</f>
			<overloads><replace public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SynchronizedMap.K"/>
	<c path="java.util.Collections_SynchronizedMap.V"/>
	<c path="java.util.Collections_SynchronizedMap.V"/>
</f></replace></overloads>
		</replace>
		<computeIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SynchronizedMap.K"/>
	<c path="java.util.function.Function">
		<d/>
		<c path="java.util.Collections_SynchronizedMap.V"/>
	</c>
	<c path="java.util.Collections_SynchronizedMap.V"/>
</f></computeIfAbsent>
		<computeIfPresent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SynchronizedMap.K"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_SynchronizedMap.V"/>
	</c>
	<c path="java.util.Collections_SynchronizedMap.V"/>
</f></computeIfPresent>
		<compute public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SynchronizedMap.K"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_SynchronizedMap.V"/>
	</c>
	<c path="java.util.Collections_SynchronizedMap.V"/>
</f></compute>
		<merge public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Collections_SynchronizedMap.K"/>
	<c path="java.util.Collections_SynchronizedMap.V"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_SynchronizedMap.V"/>
	</c>
	<c path="java.util.Collections_SynchronizedMap.V"/>
</f></merge>
		<mutex final="1" public="1"><d/></mutex>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.Map">
					<c path="java.util.Collections_SynchronizedMap.K"/>
					<c path="java.util.Collections_SynchronizedMap.V"/>
				</c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map">
		<c path="java.util.Collections_SynchronizedMap.K"/>
		<c path="java.util.Collections_SynchronizedMap.V"/>
	</c>
	<d/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Collections$SynchronizedMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_SynchronizedSortedMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$SynchronizedSortedMap.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_SynchronizedMap">
			<c path="java.util.Collections_SynchronizedSortedMap.K"/>
			<c path="java.util.Collections_SynchronizedSortedMap.V"/>
		</extends>
		<implements path="java.util.SortedMap">
			<c path="java.util.Collections_SynchronizedSortedMap.K"/>
			<c path="java.util.Collections_SynchronizedSortedMap.V"/>
		</implements>
		<comparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></comparator>
		<subMap public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SynchronizedSortedMap.K"/>
	<c path="java.util.Collections_SynchronizedSortedMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.Collections_SynchronizedSortedMap.K"/>
		<c path="java.util.Collections_SynchronizedSortedMap.V"/>
	</c>
</f></subMap>
		<headMap public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedSortedMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.Collections_SynchronizedSortedMap.K"/>
		<c path="java.util.Collections_SynchronizedSortedMap.V"/>
	</c>
</f></headMap>
		<tailMap public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedSortedMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.Collections_SynchronizedSortedMap.K"/>
		<c path="java.util.Collections_SynchronizedSortedMap.V"/>
	</c>
</f></tailMap>
		<firstKey public="1" set="method"><f a=""><c path="java.util.Collections_SynchronizedSortedMap.K"/></f></firstKey>
		<lastKey public="1" set="method"><f a=""><c path="java.util.Collections_SynchronizedSortedMap.K"/></f></lastKey>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.SortedMap">
					<c path="java.util.Collections_SynchronizedSortedMap.K"/>
					<c path="java.util.Collections_SynchronizedSortedMap.V"/>
				</c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.SortedMap">
		<c path="java.util.Collections_SynchronizedSortedMap.K"/>
		<c path="java.util.Collections_SynchronizedSortedMap.V"/>
	</c>
	<d/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Collections$SynchronizedSortedMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_SynchronizedList" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$SynchronizedList.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_SynchronizedCollection"><c path="java.util.Collections_SynchronizedList.E"/></extends>
		<implements path="java.util.List"><c path="java.util.Collections_SynchronizedList.E"/></implements>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<get public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.Collections_SynchronizedList.E"/>
</f></get>
		<set public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collections_SynchronizedList.E"/>
	<c path="java.util.Collections_SynchronizedList.E"/>
</f></set>
		<add public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collections_SynchronizedList.E"/>
	<x path="Void"/>
</f></add>
		<remove public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.Collections_SynchronizedList.E"/>
</f></remove>
		<indexOf public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></lastIndexOf>
		<addAll public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collection"><c path="java.util.Collections_SynchronizedList.E"/></c>
	<x path="Bool"/>
</f></addAll>
		<listIterator public="1" set="method">
			<f a=""><c path="java.util.ListIterator"><c path="java.util.Collections_SynchronizedList.E"/></c></f>
			<overloads><listIterator public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.ListIterator"><c path="java.util.Collections_SynchronizedList.E"/></c>
</f></listIterator></overloads>
		</listIterator>
		<subList public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.List"><c path="java.util.Collections_SynchronizedList.E"/></c>
</f></subList>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.UnaryOperator"><c path="java.util.Collections_SynchronizedList.E"/></c>
	<x path="Void"/>
</f></replaceAll>
		<sort public="1" set="method"><f a="param1">
	<c path="java.util.Comparator"><d/></c>
	<x path="Void"/>
</f></sort>
		<list final="1" public="1"><c path="java.util.List"><c path="java.util.Collections_SynchronizedList.E"/></c></list>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.List"><c path="java.util.Collections_SynchronizedList.E"/></c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.List"><c path="java.util.Collections_SynchronizedList.E"/></c>
	<d/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Collections$SynchronizedList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_SynchronizedRandomAccessList" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$SynchronizedRandomAccessList.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_SynchronizedList"><c path="java.util.Collections_SynchronizedRandomAccessList.E"/></extends>
		<implements path="java.util.RandomAccess"/>
		<subList public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.List"><c path="java.util.Collections_SynchronizedRandomAccessList.E"/></c>
</f></subList>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.List"><c path="java.util.Collections_SynchronizedRandomAccessList.E"/></c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.List"><c path="java.util.Collections_SynchronizedRandomAccessList.E"/></c>
	<d/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Collections$SynchronizedRandomAccessList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_SynchronizedNavigableSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$SynchronizedNavigableSet.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_SynchronizedSortedSet"><c path="java.util.Collections_SynchronizedNavigableSet.E"/></extends>
		<implements path="java.util.NavigableSet"><c path="java.util.Collections_SynchronizedNavigableSet.E"/></implements>
		<lower public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
	<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
</f></lower>
		<floor public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
	<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
</f></floor>
		<ceiling public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
	<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
</f></ceiling>
		<higher public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
	<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
</f></higher>
		<pollFirst public="1" set="method"><f a=""><c path="java.util.Collections_SynchronizedNavigableSet.E"/></f></pollFirst>
		<pollLast public="1" set="method"><f a=""><c path="java.util.Collections_SynchronizedNavigableSet.E"/></f></pollLast>
		<descendingSet public="1" set="method"><f a=""><c path="java.util.NavigableSet"><c path="java.util.Collections_SynchronizedNavigableSet.E"/></c></f></descendingSet>
		<descendingIterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.Collections_SynchronizedNavigableSet.E"/></c></f></descendingIterator>
		<subSet public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
				<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
				<c path="java.util.NavigableSet"><c path="java.util.Collections_SynchronizedNavigableSet.E"/></c>
			</f>
			<overloads>
				<subSet public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<c path="java.util.SortedSet"><d/></c>
</f></subSet>
				<subSet public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
	<x path="Bool"/>
	<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
	<x path="Bool"/>
	<c path="java.util.NavigableSet"><c path="java.util.Collections_SynchronizedNavigableSet.E"/></c>
</f></subSet>
			</overloads>
		</subSet>
		<headSet public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
				<c path="java.util.NavigableSet"><c path="java.util.Collections_SynchronizedNavigableSet.E"/></c>
			</f>
			<overloads>
				<headSet public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.SortedSet"><d/></c>
</f></headSet>
				<headSet public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
	<x path="Bool"/>
	<c path="java.util.NavigableSet"><c path="java.util.Collections_SynchronizedNavigableSet.E"/></c>
</f></headSet>
			</overloads>
		</headSet>
		<tailSet public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
				<c path="java.util.NavigableSet"><c path="java.util.Collections_SynchronizedNavigableSet.E"/></c>
			</f>
			<overloads>
				<tailSet public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.SortedSet"><d/></c>
</f></tailSet>
				<tailSet public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SynchronizedNavigableSet.E"/>
	<x path="Bool"/>
	<c path="java.util.NavigableSet"><c path="java.util.Collections_SynchronizedNavigableSet.E"/></c>
</f></tailSet>
			</overloads>
		</tailSet>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.NavigableSet"><c path="java.util.Collections_SynchronizedNavigableSet.E"/></c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.NavigableSet"><c path="java.util.Collections_SynchronizedNavigableSet.E"/></c>
	<d/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Collections$SynchronizedNavigableSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_SynchronizedNavigableMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$SynchronizedNavigableMap.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_SynchronizedSortedMap">
			<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
			<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
		</extends>
		<implements path="java.util.NavigableMap">
			<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
			<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
		</implements>
		<lowerEntry public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
		<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
	</c>
</f></lowerEntry>
		<lowerKey public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
</f></lowerKey>
		<floorEntry public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
		<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
	</c>
</f></floorEntry>
		<floorKey public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
</f></floorKey>
		<ceilingEntry public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
		<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
	</c>
</f></ceilingEntry>
		<ceilingKey public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
</f></ceilingKey>
		<higherEntry public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
		<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
	</c>
</f></higherEntry>
		<higherKey public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
</f></higherKey>
		<firstEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
</c></f></firstEntry>
		<lastEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
</c></f></lastEntry>
		<pollFirstEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
</c></f></pollFirstEntry>
		<pollLastEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
</c></f></pollLastEntry>
		<descendingMap public="1" set="method"><f a=""><c path="java.util.NavigableMap">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
</c></f></descendingMap>
		<keySet public="1" set="method" override="1"><f a=""><c path="java.util.NavigableSet"><c path="java.util.Collections_SynchronizedNavigableMap.K"/></c></f></keySet>
		<navigableKeySet public="1" set="method"><f a=""><c path="java.util.NavigableSet"><c path="java.util.Collections_SynchronizedNavigableMap.K"/></c></f></navigableKeySet>
		<descendingKeySet public="1" set="method"><f a=""><c path="java.util.NavigableSet"><c path="java.util.Collections_SynchronizedNavigableMap.K"/></c></f></descendingKeySet>
		<subMap public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
				<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
				<c path="java.util.SortedMap">
					<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
					<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
				</c>
			</f>
			<overloads><subMap public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<x path="Bool"/>
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<x path="Bool"/>
	<c path="java.util.NavigableMap">
		<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
		<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
	</c>
</f></subMap></overloads>
		</subMap>
		<headMap public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
				<c path="java.util.SortedMap">
					<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
					<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
				</c>
			</f>
			<overloads><headMap public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<x path="Bool"/>
	<c path="java.util.NavigableMap">
		<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
		<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
	</c>
</f></headMap></overloads>
		</headMap>
		<tailMap public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
				<c path="java.util.SortedMap">
					<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
					<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
				</c>
			</f>
			<overloads><tailMap public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
	<x path="Bool"/>
	<c path="java.util.NavigableMap">
		<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
		<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
	</c>
</f></tailMap></overloads>
		</tailMap>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.NavigableMap">
					<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
					<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
				</c>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.NavigableMap">
		<c path="java.util.Collections_SynchronizedNavigableMap.K"/>
		<c path="java.util.Collections_SynchronizedNavigableMap.V"/>
	</c>
	<d/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Collections$SynchronizedNavigableMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_SingletonSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$SingletonSet.class" module="java.util.Collections" extern="1">
		<extends path="java.util.AbstractSet"><c path="java.util.Collections_SingletonSet.E"/></extends>
		<implements path="java.io.Serializable"/>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.Collections_SingletonSet.E"/></c></f></iterator>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Collections_SingletonSet.E"/></c></f></spliterator>
		<removeIf public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<x path="Bool"/>
</f></removeIf>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SingletonSet.E"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$SingletonSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_SingletonMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$SingletonMap.class" module="java.util.Collections" extern="1">
		<extends path="java.util.AbstractMap">
			<c path="java.util.Collections_SingletonMap.K"/>
			<c path="java.util.Collections_SingletonMap.V"/>
		</extends>
		<implements path="java.io.Serializable"/>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isEmpty>
		<containsKey public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsKey>
		<containsValue public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsValue>
		<get public="1" set="method" override="1"><f a="param1">
	<d/>
	<c path="java.util.Collections_SingletonMap.V"/>
</f></get>
		<keySet public="1" set="method" override="1"><f a=""><c path="java.util.Set"><c path="java.util.Collections_SingletonMap.K"/></c></f></keySet>
		<entrySet public="1" set="method" override="1"><f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_SingletonMap.K"/>
	<c path="java.util.Collections_SingletonMap.V"/>
</c></c></f></entrySet>
		<values public="1" set="method" override="1"><f a=""><c path="java.util.Collection"><c path="java.util.Collections_SingletonMap.V"/></c></f></values>
		<getOrDefault public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.util.Collections_SingletonMap.V"/>
	<c path="java.util.Collections_SingletonMap.V"/>
</f></getOrDefault>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.BiConsumer">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></forEach>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_SingletonMap.V"/>
	</c>
	<x path="Void"/>
</f></replaceAll>
		<putIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SingletonMap.K"/>
	<c path="java.util.Collections_SingletonMap.V"/>
	<c path="java.util.Collections_SingletonMap.V"/>
</f></putIfAbsent>
		<remove public="1" set="method" override="1"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></remove>
		<replace public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Collections_SingletonMap.K"/>
				<c path="java.util.Collections_SingletonMap.V"/>
				<c path="java.util.Collections_SingletonMap.V"/>
				<x path="Bool"/>
			</f>
			<overloads><replace public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SingletonMap.K"/>
	<c path="java.util.Collections_SingletonMap.V"/>
	<c path="java.util.Collections_SingletonMap.V"/>
</f></replace></overloads>
		</replace>
		<computeIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SingletonMap.K"/>
	<c path="java.util.function.Function">
		<d/>
		<c path="java.util.Collections_SingletonMap.V"/>
	</c>
	<c path="java.util.Collections_SingletonMap.V"/>
</f></computeIfAbsent>
		<computeIfPresent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SingletonMap.K"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_SingletonMap.V"/>
	</c>
	<c path="java.util.Collections_SingletonMap.V"/>
</f></computeIfPresent>
		<compute public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SingletonMap.K"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_SingletonMap.V"/>
	</c>
	<c path="java.util.Collections_SingletonMap.V"/>
</f></compute>
		<merge public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Collections_SingletonMap.K"/>
	<c path="java.util.Collections_SingletonMap.V"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_SingletonMap.V"/>
	</c>
	<c path="java.util.Collections_SingletonMap.V"/>
</f></merge>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_SingletonMap.K"/>
	<c path="java.util.Collections_SingletonMap.V"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$SingletonMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_SingletonList" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$SingletonList.class" module="java.util.Collections" extern="1">
		<extends path="java.util.AbstractList"><c path="java.util.Collections_SingletonList.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.RandomAccess"/>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.Collections_SingletonList.E"/></c></f></iterator>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<get public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.Collections_SingletonList.E"/>
</f></get>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<removeIf public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<x path="Bool"/>
</f></removeIf>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.UnaryOperator"><c path="java.util.Collections_SingletonList.E"/></c>
	<x path="Void"/>
</f></replaceAll>
		<sort public="1" set="method"><f a="param1">
	<c path="java.util.Comparator"><d/></c>
	<x path="Void"/>
</f></sort>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Collections_SingletonList.E"/></c></f></spliterator>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Collections_SingletonList.E"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$SingletonList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_SetFromMap" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$SetFromMap.class" module="java.util.Collections" extern="1">
		<extends path="java.util.AbstractSet"><c path="java.util.Collections_SetFromMap.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Set"><c path="java.util.Collections_SetFromMap.E"/></implements>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isEmpty>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<remove public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<add public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collections_SetFromMap.E"/>
	<x path="Bool"/>
</f></add>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.Collections_SetFromMap.E"/></c></f></iterator>
		<toArray public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<toString public="1" set="method" override="1"><f a=""><c path="String"/></f></toString>
		<hashCode public="1" set="method" override="1"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<containsAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></containsAll>
		<removeAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></removeAll>
		<retainAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></retainAll>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<removeIf public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<x path="Bool"/>
</f></removeIf>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Collections_SetFromMap.E"/></c></f></spliterator>
		<stream public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.Collections_SetFromMap.E"/></c></f></stream>
		<parallelStream public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.Collections_SetFromMap.E"/></c></f></parallelStream>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Map">
		<c path="java.util.Collections_SetFromMap.E"/>
		<x path="java.lang.Boolean"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$SetFromMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_ReverseComparator2" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$ReverseComparator2.class" module="java.util.Collections" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Comparator"><c path="java.util.Collections_ReverseComparator2.T"/></implements>
		<compare public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_ReverseComparator2.T"/>
	<c path="java.util.Collections_ReverseComparator2.T"/>
	<x path="Int"/>
</f></compare>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<reversed public="1" set="method"><f a=""><c path="java.util.Comparator"><c path="java.util.Collections_ReverseComparator2.T"/></c></f></reversed>
		<cmp final="1" public="1"><c path="java.util.Comparator"><c path="java.util.Collections_ReverseComparator2.T"/></c></cmp>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Comparator"><c path="java.util.Collections_ReverseComparator2.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$ReverseComparator2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_ReverseComparator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$ReverseComparator.class" module="java.util.Collections" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Comparator"><c path="java.lang.Comparable"><d/></c></implements>
		<REVERSE_ORDER final="1" public="1" set="null" static="1"><c path="java.util.Collections_ReverseComparator"/></REVERSE_ORDER>
		<compare public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.Comparable"><d/></c>
				<c path="java.lang.Comparable"><d/></c>
				<x path="Int"/>
			</f>
			<overloads><compare public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compare></overloads>
		</compare>
		<reversed public="1" set="method"><f a=""><c path="java.util.Comparator"><c path="java.lang.Comparable"><d/></c></c></f></reversed>
		<meta>
			<m n=":native"><e>"java.util.Collections$ReverseComparator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_EmptySet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$EmptySet.class" module="java.util.Collections" extern="1">
		<extends path="java.util.AbstractSet"><c path="java.util.Collections_EmptySet.E"/></extends>
		<implements path="java.io.Serializable"/>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.Collections_EmptySet.E"/></c></f></iterator>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isEmpty>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<containsAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></containsAll>
		<toArray public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<removeIf public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<x path="Bool"/>
</f></removeIf>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Collections_EmptySet.E"/></c></f></spliterator>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Collections_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$EmptySet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_EmptyMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$EmptyMap.class" module="java.util.Collections" extern="1">
		<extends path="java.util.AbstractMap">
			<c path="java.util.Collections_EmptyMap.K"/>
			<c path="java.util.Collections_EmptyMap.V"/>
		</extends>
		<implements path="java.io.Serializable"/>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isEmpty>
		<containsKey public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsKey>
		<containsValue public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsValue>
		<get public="1" set="method" override="1"><f a="param1">
	<d/>
	<c path="java.util.Collections_EmptyMap.V"/>
</f></get>
		<keySet public="1" set="method" override="1"><f a=""><c path="java.util.Set"><c path="java.util.Collections_EmptyMap.K"/></c></f></keySet>
		<values public="1" set="method" override="1"><f a=""><c path="java.util.Collection"><c path="java.util.Collections_EmptyMap.V"/></c></f></values>
		<entrySet public="1" set="method" override="1"><f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_EmptyMap.K"/>
	<c path="java.util.Collections_EmptyMap.V"/>
</c></c></f></entrySet>
		<equals public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method" override="1"><f a=""><x path="Int"/></f></hashCode>
		<getOrDefault public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.util.Collections_EmptyMap.V"/>
	<c path="java.util.Collections_EmptyMap.V"/>
</f></getOrDefault>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.BiConsumer">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></forEach>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_EmptyMap.V"/>
	</c>
	<x path="Void"/>
</f></replaceAll>
		<putIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_EmptyMap.K"/>
	<c path="java.util.Collections_EmptyMap.V"/>
	<c path="java.util.Collections_EmptyMap.V"/>
</f></putIfAbsent>
		<remove public="1" set="method" override="1"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></remove>
		<replace public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Collections_EmptyMap.K"/>
				<c path="java.util.Collections_EmptyMap.V"/>
				<c path="java.util.Collections_EmptyMap.V"/>
				<x path="Bool"/>
			</f>
			<overloads><replace public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_EmptyMap.K"/>
	<c path="java.util.Collections_EmptyMap.V"/>
	<c path="java.util.Collections_EmptyMap.V"/>
</f></replace></overloads>
		</replace>
		<computeIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_EmptyMap.K"/>
	<c path="java.util.function.Function">
		<d/>
		<c path="java.util.Collections_EmptyMap.V"/>
	</c>
	<c path="java.util.Collections_EmptyMap.V"/>
</f></computeIfAbsent>
		<computeIfPresent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_EmptyMap.K"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_EmptyMap.V"/>
	</c>
	<c path="java.util.Collections_EmptyMap.V"/>
</f></computeIfPresent>
		<compute public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_EmptyMap.K"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_EmptyMap.V"/>
	</c>
	<c path="java.util.Collections_EmptyMap.V"/>
</f></compute>
		<merge public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Collections_EmptyMap.K"/>
	<c path="java.util.Collections_EmptyMap.V"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_EmptyMap.V"/>
	</c>
	<c path="java.util.Collections_EmptyMap.V"/>
</f></merge>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Collections_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$EmptyMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_EmptyIterator" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$EmptyIterator.class" module="java.util.Collections" extern="1">
		<implements path="java.util.Iterator"><c path="java.util.Collections_EmptyIterator.E"/></implements>
		<EMPTY_ITERATOR final="1" public="1" set="null" static="1"><c path="java.util.Collections_EmptyIterator"><d/></c></EMPTY_ITERATOR>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><c path="java.util.Collections_EmptyIterator.E"/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Collections_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$EmptyIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_EmptyListIterator" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$EmptyListIterator.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_EmptyIterator"><c path="java.util.Collections_EmptyListIterator.E"/></extends>
		<implements path="java.util.ListIterator"><c path="java.util.Collections_EmptyListIterator.E"/></implements>
		<EMPTY_ITERATOR final="1" public="1" set="null" static="1"><c path="java.util.Collections_EmptyListIterator"><d/></c></EMPTY_ITERATOR>
		<hasPrevious public="1" set="method"><f a=""><x path="Bool"/></f></hasPrevious>
		<previous public="1" set="method"><f a=""><c path="java.util.Collections_EmptyListIterator.E"/></f></previous>
		<nextIndex public="1" set="method"><f a=""><x path="Int"/></f></nextIndex>
		<previousIndex public="1" set="method"><f a=""><x path="Int"/></f></previousIndex>
		<set public="1" set="method"><f a="param1">
	<c path="java.util.Collections_EmptyListIterator.E"/>
	<x path="Void"/>
</f></set>
		<add public="1" set="method"><f a="param1">
	<c path="java.util.Collections_EmptyListIterator.E"/>
	<x path="Void"/>
</f></add>
		<meta>
			<m n=":native"><e>"java.util.Collections$EmptyListIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_EmptyList" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$EmptyList.class" module="java.util.Collections" extern="1">
		<extends path="java.util.AbstractList"><c path="java.util.Collections_EmptyList.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.RandomAccess"/>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.Collections_EmptyList.E"/></c></f></iterator>
		<listIterator public="1" set="method" override="1"><f a=""><c path="java.util.ListIterator"><c path="java.util.Collections_EmptyList.E"/></c></f></listIterator>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isEmpty>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<containsAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></containsAll>
		<toArray public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<get public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.Collections_EmptyList.E"/>
</f></get>
		<equals public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method" override="1"><f a=""><x path="Int"/></f></hashCode>
		<removeIf public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<x path="Bool"/>
</f></removeIf>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.UnaryOperator"><c path="java.util.Collections_EmptyList.E"/></c>
	<x path="Void"/>
</f></replaceAll>
		<sort public="1" set="method"><f a="param1">
	<c path="java.util.Comparator"><d/></c>
	<x path="Void"/>
</f></sort>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Collections_EmptyList.E"/></c></f></spliterator>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Collections_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$EmptyList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_EmptyEnumeration" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$EmptyEnumeration.class" module="java.util.Collections" extern="1">
		<implements path="java.util.Enumeration"><c path="java.util.Collections_EmptyEnumeration.E"/></implements>
		<EMPTY_ENUMERATION final="1" public="1" set="null" static="1"><c path="java.util.Collections_EmptyEnumeration"><d/></c></EMPTY_ENUMERATION>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<nextElement public="1" set="method"><f a=""><c path="java.util.Collections_EmptyEnumeration.E"/></f></nextElement>
		<meta>
			<m n=":native"><e>"java.util.Collections$EmptyEnumeration"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CopiesList" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CopiesList.class" module="java.util.Collections" extern="1">
		<extends path="java.util.AbstractList"><c path="java.util.Collections_CopiesList.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.RandomAccess"/>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<indexOf public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Int"/>
</f></lastIndexOf>
		<get public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.Collections_CopiesList.E"/>
</f></get>
		<toArray public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<subList public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.List"><c path="java.util.Collections_CopiesList.E"/></c>
</f></subList>
		<stream public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.Collections_CopiesList.E"/></c></f></stream>
		<parallelStream public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.Collections_CopiesList.E"/></c></f></parallelStream>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Collections_CopiesList.E"/></c></f></spliterator>
		<n final="1" public="1"><x path="Int"/></n>
		<element final="1" public="1"><c path="java.util.Collections_CopiesList.E"/></element>
		<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collections_CopiesList.E"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CopiesList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedCollection" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedCollection.class" module="java.util.Collections" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Collection"><c path="java.util.Collections_CheckedCollection.E"/></implements>
		<typeCheck public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.Collections_CheckedCollection.E"/>
</f></typeCheck>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<contains public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<toArray public="1" set="method">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<remove public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<containsAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></containsAll>
		<removeAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></removeAll>
		<retainAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></retainAll>
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.Collections_CheckedCollection.E"/></c></f></iterator>
		<add public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedCollection.E"/>
	<x path="Bool"/>
</f></add>
		<checkedCopyOf public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><c path="java.util.Collections_CheckedCollection.E"/></c>
	<c path="java.util.Collection"><c path="java.util.Collections_CheckedCollection.E"/></c>
</f></checkedCopyOf>
		<addAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><c path="java.util.Collections_CheckedCollection.E"/></c>
	<x path="Bool"/>
</f></addAll>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<removeIf public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<x path="Bool"/>
</f></removeIf>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Collections_CheckedCollection.E"/></c></f></spliterator>
		<stream public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.Collections_CheckedCollection.E"/></c></f></stream>
		<parallelStream public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.Collections_CheckedCollection.E"/></c></f></parallelStream>
		<c final="1" public="1"><c path="java.util.Collection"><c path="java.util.Collections_CheckedCollection.E"/></c></c>
		<type final="1" public="1"><c path="java.lang.Class"><c path="java.util.Collections_CheckedCollection.E"/></c></type>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collection"><c path="java.util.Collections_CheckedCollection.E"/></c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedCollection.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedCollection"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedSet.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_CheckedCollection"><c path="java.util.Collections_CheckedSet.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Set"><c path="java.util.Collections_CheckedSet.E"/></implements>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Set"><c path="java.util.Collections_CheckedSet.E"/></c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedSet.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedSortedSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedSortedSet.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_CheckedSet"><c path="java.util.Collections_CheckedSortedSet.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.SortedSet"><c path="java.util.Collections_CheckedSortedSet.E"/></implements>
		<comparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></comparator>
		<first public="1" set="method"><f a=""><c path="java.util.Collections_CheckedSortedSet.E"/></f></first>
		<last public="1" set="method"><f a=""><c path="java.util.Collections_CheckedSortedSet.E"/></f></last>
		<subSet public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_CheckedSortedSet.E"/>
	<c path="java.util.Collections_CheckedSortedSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.Collections_CheckedSortedSet.E"/></c>
</f></subSet>
		<headSet public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedSortedSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.Collections_CheckedSortedSet.E"/></c>
</f></headSet>
		<tailSet public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedSortedSet.E"/>
	<c path="java.util.SortedSet"><c path="java.util.Collections_CheckedSortedSet.E"/></c>
</f></tailSet>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.SortedSet"><c path="java.util.Collections_CheckedSortedSet.E"/></c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedSortedSet.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedSortedSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedMap.class" module="java.util.Collections" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Map">
			<c path="java.util.Collections_CheckedMap.K"/>
			<c path="java.util.Collections_CheckedMap.V"/>
		</implements>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<containsKey public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsKey>
		<containsValue public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsValue>
		<get public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.Collections_CheckedMap.V"/>
</f></get>
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.util.Collections_CheckedMap.V"/>
			</f>
			<overloads><remove public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></remove></overloads>
		</remove>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<keySet public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.Collections_CheckedMap.K"/></c></f></keySet>
		<values public="1" set="method"><f a=""><c path="java.util.Collection"><c path="java.util.Collections_CheckedMap.V"/></c></f></values>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<put public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_CheckedMap.K"/>
	<c path="java.util.Collections_CheckedMap.V"/>
	<c path="java.util.Collections_CheckedMap.V"/>
</f></put>
		<putAll public="1" set="method"><f a="param1">
	<c path="java.util.Map">
		<c path="java.util.Collections_CheckedMap.K"/>
		<c path="java.util.Collections_CheckedMap.V"/>
	</c>
	<x path="Void"/>
</f></putAll>
		<entrySet public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_CheckedMap.K"/>
	<c path="java.util.Collections_CheckedMap.V"/>
</c></c></f></entrySet>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.BiConsumer">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></forEach>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_CheckedMap.V"/>
	</c>
	<x path="Void"/>
</f></replaceAll>
		<putIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_CheckedMap.K"/>
	<c path="java.util.Collections_CheckedMap.V"/>
	<c path="java.util.Collections_CheckedMap.V"/>
</f></putIfAbsent>
		<replace public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Collections_CheckedMap.K"/>
				<c path="java.util.Collections_CheckedMap.V"/>
				<c path="java.util.Collections_CheckedMap.V"/>
				<x path="Bool"/>
			</f>
			<overloads><replace public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_CheckedMap.K"/>
	<c path="java.util.Collections_CheckedMap.V"/>
	<c path="java.util.Collections_CheckedMap.V"/>
</f></replace></overloads>
		</replace>
		<computeIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_CheckedMap.K"/>
	<c path="java.util.function.Function">
		<d/>
		<c path="java.util.Collections_CheckedMap.V"/>
	</c>
	<c path="java.util.Collections_CheckedMap.V"/>
</f></computeIfAbsent>
		<computeIfPresent public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_CheckedMap.K"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_CheckedMap.V"/>
	</c>
	<c path="java.util.Collections_CheckedMap.V"/>
</f></computeIfPresent>
		<compute public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_CheckedMap.K"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_CheckedMap.V"/>
	</c>
	<c path="java.util.Collections_CheckedMap.V"/>
</f></compute>
		<merge public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Collections_CheckedMap.K"/>
	<c path="java.util.Collections_CheckedMap.V"/>
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.Collections_CheckedMap.V"/>
	</c>
	<c path="java.util.Collections_CheckedMap.V"/>
</f></merge>
		<keyType final="1" public="1"><c path="java.lang.Class"><c path="java.util.Collections_CheckedMap.K"/></c></keyType>
		<valueType final="1" public="1"><c path="java.lang.Class"><c path="java.util.Collections_CheckedMap.V"/></c></valueType>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Map">
		<c path="java.util.Collections_CheckedMap.K"/>
		<c path="java.util.Collections_CheckedMap.V"/>
	</c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedMap.K"/></c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedMap.V"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedSortedMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedSortedMap.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_CheckedMap">
			<c path="java.util.Collections_CheckedSortedMap.K"/>
			<c path="java.util.Collections_CheckedSortedMap.V"/>
		</extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.SortedMap">
			<c path="java.util.Collections_CheckedSortedMap.K"/>
			<c path="java.util.Collections_CheckedSortedMap.V"/>
		</implements>
		<comparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></comparator>
		<firstKey public="1" set="method"><f a=""><c path="java.util.Collections_CheckedSortedMap.K"/></f></firstKey>
		<lastKey public="1" set="method"><f a=""><c path="java.util.Collections_CheckedSortedMap.K"/></f></lastKey>
		<subMap public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_CheckedSortedMap.K"/>
	<c path="java.util.Collections_CheckedSortedMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.Collections_CheckedSortedMap.K"/>
		<c path="java.util.Collections_CheckedSortedMap.V"/>
	</c>
</f></subMap>
		<headMap public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedSortedMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.Collections_CheckedSortedMap.K"/>
		<c path="java.util.Collections_CheckedSortedMap.V"/>
	</c>
</f></headMap>
		<tailMap public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedSortedMap.K"/>
	<c path="java.util.SortedMap">
		<c path="java.util.Collections_CheckedSortedMap.K"/>
		<c path="java.util.Collections_CheckedSortedMap.V"/>
	</c>
</f></tailMap>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.SortedMap">
		<c path="java.util.Collections_CheckedSortedMap.K"/>
		<c path="java.util.Collections_CheckedSortedMap.V"/>
	</c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedSortedMap.K"/></c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedSortedMap.V"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedSortedMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedList" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedList.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_CheckedCollection"><c path="java.util.Collections_CheckedList.E"/></extends>
		<implements path="java.util.List"><c path="java.util.Collections_CheckedList.E"/></implements>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<get public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.Collections_CheckedList.E"/>
</f></get>
		<remove public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.Collections_CheckedList.E"/>
</f></remove>
		<indexOf public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></lastIndexOf>
		<set public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collections_CheckedList.E"/>
	<c path="java.util.Collections_CheckedList.E"/>
</f></set>
		<add public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collections_CheckedList.E"/>
	<x path="Void"/>
</f></add>
		<addAll public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collection"><c path="java.util.Collections_CheckedList.E"/></c>
	<x path="Bool"/>
</f></addAll>
		<listIterator public="1" set="method">
			<f a=""><c path="java.util.ListIterator"><c path="java.util.Collections_CheckedList.E"/></c></f>
			<overloads><listIterator public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.ListIterator"><c path="java.util.Collections_CheckedList.E"/></c>
</f></listIterator></overloads>
		</listIterator>
		<subList public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.List"><c path="java.util.Collections_CheckedList.E"/></c>
</f></subList>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.UnaryOperator"><c path="java.util.Collections_CheckedList.E"/></c>
	<x path="Void"/>
</f></replaceAll>
		<sort public="1" set="method"><f a="param1">
	<c path="java.util.Comparator"><d/></c>
	<x path="Void"/>
</f></sort>
		<list final="1" public="1"><c path="java.util.List"><c path="java.util.Collections_CheckedList.E"/></c></list>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.List"><c path="java.util.Collections_CheckedList.E"/></c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedList.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedRandomAccessList" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedRandomAccessList.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_CheckedList"><c path="java.util.Collections_CheckedRandomAccessList.E"/></extends>
		<implements path="java.util.RandomAccess"/>
		<subList public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.List"><c path="java.util.Collections_CheckedRandomAccessList.E"/></c>
</f></subList>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.List"><c path="java.util.Collections_CheckedRandomAccessList.E"/></c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedRandomAccessList.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedRandomAccessList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedQueue" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedQueue.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_CheckedCollection"><c path="java.util.Collections_CheckedQueue.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Queue"><c path="java.util.Collections_CheckedQueue.E"/></implements>
		<element public="1" set="method"><f a=""><c path="java.util.Collections_CheckedQueue.E"/></f></element>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<peek public="1" set="method"><f a=""><c path="java.util.Collections_CheckedQueue.E"/></f></peek>
		<poll public="1" set="method"><f a=""><c path="java.util.Collections_CheckedQueue.E"/></f></poll>
		<remove public="1" set="method" override="1"><f a=""><c path="java.util.Collections_CheckedQueue.E"/></f></remove>
		<offer public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedQueue.E"/>
	<x path="Bool"/>
</f></offer>
		<queue final="1" public="1"><c path="java.util.Queue"><c path="java.util.Collections_CheckedQueue.E"/></c></queue>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Queue"><c path="java.util.Collections_CheckedQueue.E"/></c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedQueue.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedQueue"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedNavigableSet" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedNavigableSet.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_CheckedSortedSet"><c path="java.util.Collections_CheckedNavigableSet.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.NavigableSet"><c path="java.util.Collections_CheckedNavigableSet.E"/></implements>
		<lower public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedNavigableSet.E"/>
	<c path="java.util.Collections_CheckedNavigableSet.E"/>
</f></lower>
		<floor public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedNavigableSet.E"/>
	<c path="java.util.Collections_CheckedNavigableSet.E"/>
</f></floor>
		<ceiling public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedNavigableSet.E"/>
	<c path="java.util.Collections_CheckedNavigableSet.E"/>
</f></ceiling>
		<higher public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedNavigableSet.E"/>
	<c path="java.util.Collections_CheckedNavigableSet.E"/>
</f></higher>
		<pollFirst public="1" set="method"><f a=""><c path="java.util.Collections_CheckedNavigableSet.E"/></f></pollFirst>
		<pollLast public="1" set="method"><f a=""><c path="java.util.Collections_CheckedNavigableSet.E"/></f></pollLast>
		<descendingSet public="1" set="method"><f a=""><c path="java.util.NavigableSet"><c path="java.util.Collections_CheckedNavigableSet.E"/></c></f></descendingSet>
		<descendingIterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.Collections_CheckedNavigableSet.E"/></c></f></descendingIterator>
		<subSet public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="java.util.Collections_CheckedNavigableSet.E"/>
				<c path="java.util.Collections_CheckedNavigableSet.E"/>
				<c path="java.util.NavigableSet"><c path="java.util.Collections_CheckedNavigableSet.E"/></c>
			</f>
			<overloads>
				<subSet public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<c path="java.util.SortedSet"><d/></c>
</f></subSet>
				<subSet public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.Collections_CheckedNavigableSet.E"/>
	<x path="Bool"/>
	<c path="java.util.Collections_CheckedNavigableSet.E"/>
	<x path="Bool"/>
	<c path="java.util.NavigableSet"><c path="java.util.Collections_CheckedNavigableSet.E"/></c>
</f></subSet>
			</overloads>
		</subSet>
		<headSet public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Collections_CheckedNavigableSet.E"/>
				<c path="java.util.NavigableSet"><c path="java.util.Collections_CheckedNavigableSet.E"/></c>
			</f>
			<overloads>
				<headSet public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.SortedSet"><d/></c>
</f></headSet>
				<headSet public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_CheckedNavigableSet.E"/>
	<x path="Bool"/>
	<c path="java.util.NavigableSet"><c path="java.util.Collections_CheckedNavigableSet.E"/></c>
</f></headSet>
			</overloads>
		</headSet>
		<tailSet public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Collections_CheckedNavigableSet.E"/>
				<c path="java.util.NavigableSet"><c path="java.util.Collections_CheckedNavigableSet.E"/></c>
			</f>
			<overloads>
				<tailSet public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.SortedSet"><d/></c>
</f></tailSet>
				<tailSet public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_CheckedNavigableSet.E"/>
	<x path="Bool"/>
	<c path="java.util.NavigableSet"><c path="java.util.Collections_CheckedNavigableSet.E"/></c>
</f></tailSet>
			</overloads>
		</tailSet>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.NavigableSet"><c path="java.util.Collections_CheckedNavigableSet.E"/></c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedNavigableSet.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedNavigableSet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedNavigableMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedNavigableMap.class" module="java.util.Collections" extern="1">
		<extends path="java.util.Collections_CheckedSortedMap">
			<c path="java.util.Collections_CheckedNavigableMap.K"/>
			<c path="java.util.Collections_CheckedNavigableMap.V"/>
		</extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.NavigableMap">
			<c path="java.util.Collections_CheckedNavigableMap.K"/>
			<c path="java.util.Collections_CheckedNavigableMap.V"/>
		</implements>
		<comparator public="1" set="method" override="1"><f a=""><c path="java.util.Comparator"><d/></c></f></comparator>
		<firstKey public="1" set="method" override="1"><f a=""><c path="java.util.Collections_CheckedNavigableMap.K"/></f></firstKey>
		<lastKey public="1" set="method" override="1"><f a=""><c path="java.util.Collections_CheckedNavigableMap.K"/></f></lastKey>
		<lowerEntry public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.Collections_CheckedNavigableMap.K"/>
		<c path="java.util.Collections_CheckedNavigableMap.V"/>
	</c>
</f></lowerEntry>
		<lowerKey public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
</f></lowerKey>
		<floorEntry public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.Collections_CheckedNavigableMap.K"/>
		<c path="java.util.Collections_CheckedNavigableMap.V"/>
	</c>
</f></floorEntry>
		<floorKey public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
</f></floorKey>
		<ceilingEntry public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.Collections_CheckedNavigableMap.K"/>
		<c path="java.util.Collections_CheckedNavigableMap.V"/>
	</c>
</f></ceilingEntry>
		<ceilingKey public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
</f></ceilingKey>
		<higherEntry public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<c path="java.util.Map_Entry">
		<c path="java.util.Collections_CheckedNavigableMap.K"/>
		<c path="java.util.Collections_CheckedNavigableMap.V"/>
	</c>
</f></higherEntry>
		<higherKey public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
</f></higherKey>
		<firstEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<c path="java.util.Collections_CheckedNavigableMap.V"/>
</c></f></firstEntry>
		<lastEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<c path="java.util.Collections_CheckedNavigableMap.V"/>
</c></f></lastEntry>
		<pollFirstEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<c path="java.util.Collections_CheckedNavigableMap.V"/>
</c></f></pollFirstEntry>
		<pollLastEntry public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<c path="java.util.Collections_CheckedNavigableMap.V"/>
</c></f></pollLastEntry>
		<descendingMap public="1" set="method"><f a=""><c path="java.util.NavigableMap">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<c path="java.util.Collections_CheckedNavigableMap.V"/>
</c></f></descendingMap>
		<keySet public="1" set="method" override="1"><f a=""><c path="java.util.NavigableSet"><c path="java.util.Collections_CheckedNavigableMap.K"/></c></f></keySet>
		<navigableKeySet public="1" set="method"><f a=""><c path="java.util.NavigableSet"><c path="java.util.Collections_CheckedNavigableMap.K"/></c></f></navigableKeySet>
		<descendingKeySet public="1" set="method"><f a=""><c path="java.util.NavigableSet"><c path="java.util.Collections_CheckedNavigableMap.K"/></c></f></descendingKeySet>
		<subMap public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="java.util.Collections_CheckedNavigableMap.K"/>
				<c path="java.util.Collections_CheckedNavigableMap.K"/>
				<c path="java.util.NavigableMap">
					<c path="java.util.Collections_CheckedNavigableMap.K"/>
					<c path="java.util.Collections_CheckedNavigableMap.V"/>
				</c>
			</f>
			<overloads>
				<subMap public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<c path="java.util.SortedMap">
		<d/>
		<d/>
	</c>
</f></subMap>
				<subMap public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<x path="Bool"/>
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<x path="Bool"/>
	<c path="java.util.NavigableMap">
		<c path="java.util.Collections_CheckedNavigableMap.K"/>
		<c path="java.util.Collections_CheckedNavigableMap.V"/>
	</c>
</f></subMap>
			</overloads>
		</subMap>
		<headMap public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Collections_CheckedNavigableMap.K"/>
				<c path="java.util.NavigableMap">
					<c path="java.util.Collections_CheckedNavigableMap.K"/>
					<c path="java.util.Collections_CheckedNavigableMap.V"/>
				</c>
			</f>
			<overloads>
				<headMap public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.SortedMap">
		<d/>
		<d/>
	</c>
</f></headMap>
				<headMap public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<x path="Bool"/>
	<c path="java.util.NavigableMap">
		<c path="java.util.Collections_CheckedNavigableMap.K"/>
		<c path="java.util.Collections_CheckedNavigableMap.V"/>
	</c>
</f></headMap>
			</overloads>
		</headMap>
		<tailMap public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Collections_CheckedNavigableMap.K"/>
				<c path="java.util.NavigableMap">
					<c path="java.util.Collections_CheckedNavigableMap.K"/>
					<c path="java.util.Collections_CheckedNavigableMap.V"/>
				</c>
			</f>
			<overloads>
				<tailMap public="1" set="method"><f a="param1">
	<d/>
	<c path="java.util.SortedMap">
		<d/>
		<d/>
	</c>
</f></tailMap>
				<tailMap public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_CheckedNavigableMap.K"/>
	<x path="Bool"/>
	<c path="java.util.NavigableMap">
		<c path="java.util.Collections_CheckedNavigableMap.K"/>
		<c path="java.util.Collections_CheckedNavigableMap.V"/>
	</c>
</f></tailMap>
			</overloads>
		</tailMap>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.NavigableMap">
		<c path="java.util.Collections_CheckedNavigableMap.K"/>
		<c path="java.util.Collections_CheckedNavigableMap.V"/>
	</c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedNavigableMap.K"/></c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedNavigableMap.V"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedNavigableMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedMap_CheckedEntrySet" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedMap$CheckedEntrySet.class" module="java.util.Collections" extern="1">
		<implements path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_CheckedMap_CheckedEntrySet.K"/>
	<c path="java.util.Collections_CheckedMap_CheckedEntrySet.V"/>
</c></implements>
		<checkedEntry public="1" params="K:V:T" set="method" static="1"><f a="param1:param2">
	<c path="java.util.Map_Entry">
		<c path="checkedEntry.K"/>
		<c path="checkedEntry.V"/>
	</c>
	<c path="java.lang.Class"><c path="checkedEntry.T"/></c>
	<c path="java.util.Collections_CheckedMap_CheckedEntrySet_CheckedEntry">
		<c path="checkedEntry.K"/>
		<c path="checkedEntry.V"/>
		<c path="checkedEntry.T"/>
	</c>
</f></checkedEntry>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.util.Map_Entry">
					<c path="java.util.Collections_CheckedMap_CheckedEntrySet.K"/>
					<c path="java.util.Collections_CheckedMap_CheckedEntrySet.V"/>
				</c>
				<x path="Bool"/>
			</f>
			<overloads><add public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></add></overloads>
		</add>
		<addAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_CheckedMap_CheckedEntrySet.K"/>
	<c path="java.util.Collections_CheckedMap_CheckedEntrySet.V"/>
</c></c>
	<x path="Bool"/>
</f></addAll>
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_CheckedMap_CheckedEntrySet.K"/>
	<c path="java.util.Collections_CheckedMap_CheckedEntrySet.V"/>
</c></c></f></iterator>
		<toArray public="1" set="method">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<contains public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<containsAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></containsAll>
		<remove public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<removeAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></removeAll>
		<retainAll public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></retainAll>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.Collections_CheckedMap_CheckedEntrySet.K"/>
	<c path="java.util.Collections_CheckedMap_CheckedEntrySet.V"/>
</c></c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedMap_CheckedEntrySet.V"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedMap$CheckedEntrySet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedMap_CheckedEntrySet_CheckedEntry" params="K:V:T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedMap$CheckedEntrySet$CheckedEntry.class" module="java.util.Collections" extern="1">
		<implements path="java.util.Map_Entry">
			<c path="java.util.Collections_CheckedMap_CheckedEntrySet_CheckedEntry.K"/>
			<c path="java.util.Collections_CheckedMap_CheckedEntrySet_CheckedEntry.V"/>
		</implements>
		<getKey public="1" set="method"><f a=""><c path="java.util.Collections_CheckedMap_CheckedEntrySet_CheckedEntry.K"/></f></getKey>
		<getValue public="1" set="method"><f a=""><c path="java.util.Collections_CheckedMap_CheckedEntrySet_CheckedEntry.V"/></f></getValue>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<setValue public="1" set="method"><f a="param1">
	<c path="java.util.Collections_CheckedMap_CheckedEntrySet_CheckedEntry.V"/>
	<c path="java.util.Collections_CheckedMap_CheckedEntrySet_CheckedEntry.V"/>
</f></setValue>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Map_Entry">
		<c path="java.util.Collections_CheckedMap_CheckedEntrySet_CheckedEntry.K"/>
		<c path="java.util.Collections_CheckedMap_CheckedEntrySet_CheckedEntry.V"/>
	</c>
	<c path="java.lang.Class"><c path="java.util.Collections_CheckedMap_CheckedEntrySet_CheckedEntry.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedMap_CheckedEntrySet_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedMap$CheckedEntrySet$1.class" module="java.util.Collections" extern="1">
		<implements path="java.util.Iterator"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<next public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></f></next>
		<val_i final="1" public="1">
			<c path="java.util.Iterator"><d/></c>
			<meta><m n=":native"><e>"val$i"</e></m></meta>
		</val_i>
		<val_valueType final="1" public="1">
			<c path="java.lang.Class"><d/></c>
			<meta><m n=":native"><e>"val$valueType"</e></m></meta>
		</val_valueType>
		<this_0 final="1" public="1">
			<c path="java.util.Collections_CheckedMap_CheckedEntrySet">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Collections_CheckedMap_CheckedEntrySet">
		<d/>
		<d/>
	</c>
	<c path="java.util.Iterator"><d/></c>
	<c path="java.lang.Class"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedMap$CheckedEntrySet$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedList_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedList$1.class" module="java.util.Collections" extern="1">
		<implements path="java.util.ListIterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<hasPrevious public="1" set="method"><f a=""><x path="Bool"/></f></hasPrevious>
		<previous public="1" set="method"><f a=""><d/></f></previous>
		<nextIndex public="1" set="method"><f a=""><x path="Int"/></f></nextIndex>
		<previousIndex public="1" set="method"><f a=""><x path="Int"/></f></previousIndex>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<set public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></set>
		<add public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></add>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<val_i final="1" public="1">
			<c path="java.util.ListIterator"><d/></c>
			<meta><m n=":native"><e>"val$i"</e></m></meta>
		</val_i>
		<this_0 final="1" public="1">
			<c path="java.util.Collections_CheckedList"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_CheckedList"><d/></c>
	<c path="java.util.ListIterator"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedList$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_CheckedCollection_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$CheckedCollection$1.class" module="java.util.Collections" extern="1">
		<implements path="java.util.Iterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<val_it final="1" public="1">
			<c path="java.util.Iterator"><d/></c>
			<meta><m n=":native"><e>"val$it"</e></m></meta>
		</val_it>
		<this_0 final="1" public="1">
			<c path="java.util.Collections_CheckedCollection"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collections_CheckedCollection"><d/></c>
	<c path="java.util.Iterator"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$CheckedCollection$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_AsLIFOQueue" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$AsLIFOQueue.class" module="java.util.Collections" extern="1">
		<extends path="java.util.AbstractQueue"><c path="java.util.Collections_AsLIFOQueue.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.Queue"><c path="java.util.Collections_AsLIFOQueue.E"/></implements>
		<add public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collections_AsLIFOQueue.E"/>
	<x path="Bool"/>
</f></add>
		<offer public="1" set="method"><f a="param1">
	<c path="java.util.Collections_AsLIFOQueue.E"/>
	<x path="Bool"/>
</f></offer>
		<poll public="1" set="method"><f a=""><c path="java.util.Collections_AsLIFOQueue.E"/></f></poll>
		<remove public="1" set="method" override="1">
			<f a=""><c path="java.util.Collections_AsLIFOQueue.E"/></f>
			<overloads><remove public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove></overloads>
		</remove>
		<peek public="1" set="method"><f a=""><c path="java.util.Collections_AsLIFOQueue.E"/></f></peek>
		<element public="1" set="method" override="1"><f a=""><c path="java.util.Collections_AsLIFOQueue.E"/></f></element>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isEmpty>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.Collections_AsLIFOQueue.E"/></c></f></iterator>
		<toArray public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<toString public="1" set="method" override="1"><f a=""><c path="String"/></f></toString>
		<containsAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></containsAll>
		<removeAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></removeAll>
		<retainAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></retainAll>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<removeIf public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<x path="Bool"/>
</f></removeIf>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Collections_AsLIFOQueue.E"/></c></f></spliterator>
		<stream public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.Collections_AsLIFOQueue.E"/></c></f></stream>
		<parallelStream public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.Collections_AsLIFOQueue.E"/></c></f></parallelStream>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Deque"><c path="java.util.Collections_AsLIFOQueue.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$AsLIFOQueue"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$3.class" module="java.util.Collections" extern="1">
		<implements path="java.util.Enumeration"><d/></implements>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<nextElement public="1" set="method"><f a=""><d/></f></nextElement>
		<val_c final="1" public="1">
			<c path="java.util.Collection"><d/></c>
			<meta><m n=":native"><e>"val$c"</e></m></meta>
		</val_c>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$2.class" module="java.util.Collections" extern="1">
		<implements path="java.util.Spliterator"><d/></implements>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator"><d/></c></f></trySplit>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<est public="1"><x path="haxe.Int64"/></est>
		<val_element final="1" public="1">
			<d/>
			<meta><m n=":native"><e>"val$element"</e></m></meta>
		</val_element>
		<new public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Collections_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collections$1.class" module="java.util.Collections" extern="1">
		<implements path="java.util.Iterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<val_e final="1" public="1">
			<d/>
			<meta><m n=":native"><e>"val$e"</e></m></meta>
		</val_e>
		<new public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Collections$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Date" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Date.class" extern="1">
		<implements path="java.lang.Comparable"><c path="java.util.Date"/></implements>
		<implements path="java.lang.Cloneable"/>
		<implements path="java.io.Serializable"/>
		<UTC public="1" set="method" static="1"><f a="param1:param2:param3:param4:param5:param6">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></UTC>
		<parse public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parse>
		<getMillisOf final="1" public="1" set="method" static="1"><f a="param1">
	<c path="java.util.Date"/>
	<x path="haxe.Int64"/>
</f></getMillisOf>
		<from public="1" set="method" static="1"><f a="param1">
	<c path="java.time.Instant"/>
	<c path="java.util.Date"/>
</f></from>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<getYear public="1" set="method"><f a=""><x path="Int"/></f></getYear>
		<setYear public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setYear>
		<getMonth public="1" set="method"><f a=""><x path="Int"/></f></getMonth>
		<setMonth public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setMonth>
		<getDate public="1" set="method"><f a=""><x path="Int"/></f></getDate>
		<setDate public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setDate>
		<getDay public="1" set="method"><f a=""><x path="Int"/></f></getDay>
		<getHours public="1" set="method"><f a=""><x path="Int"/></f></getHours>
		<setHours public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setHours>
		<getMinutes public="1" set="method"><f a=""><x path="Int"/></f></getMinutes>
		<setMinutes public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setMinutes>
		<getSeconds public="1" set="method"><f a=""><x path="Int"/></f></getSeconds>
		<setSeconds public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setSeconds>
		<getTime public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getTime>
		<setTime public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setTime>
		<before public="1" set="method"><f a="param1">
	<c path="java.util.Date"/>
	<x path="Bool"/>
</f></before>
		<after public="1" set="method"><f a="param1">
	<c path="java.util.Date"/>
	<x path="Bool"/>
</f></after>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.util.Date"/>
				<x path="Int"/>
			</f>
			<overloads><compareTo public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></compareTo></overloads>
		</compareTo>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toLocaleString public="1" set="method"><f a=""><c path="String"/></f></toLocaleString>
		<toGMTString public="1" set="method"><f a=""><c path="String"/></f></toGMTString>
		<getTimezoneOffset public="1" set="method"><f a=""><x path="Int"/></f></getTimezoneOffset>
		<toInstant public="1" set="method"><f a=""><c path="java.time.Instant"/></f></toInstant>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Date"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Deque" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Deque.class" extern="1" interface="1">
		<extends path="java.util.Queue"><c path="java.util.Deque.E"/></extends>
		<addFirst public="1" set="method"><f a="param1">
	<c path="java.util.Deque.E"/>
	<x path="Void"/>
</f></addFirst>
		<addLast public="1" set="method"><f a="param1">
	<c path="java.util.Deque.E"/>
	<x path="Void"/>
</f></addLast>
		<offerFirst public="1" set="method"><f a="param1">
	<c path="java.util.Deque.E"/>
	<x path="Bool"/>
</f></offerFirst>
		<offerLast public="1" set="method"><f a="param1">
	<c path="java.util.Deque.E"/>
	<x path="Bool"/>
</f></offerLast>
		<removeFirst public="1" set="method"><f a=""><c path="java.util.Deque.E"/></f></removeFirst>
		<removeLast public="1" set="method"><f a=""><c path="java.util.Deque.E"/></f></removeLast>
		<pollFirst public="1" set="method"><f a=""><c path="java.util.Deque.E"/></f></pollFirst>
		<pollLast public="1" set="method"><f a=""><c path="java.util.Deque.E"/></f></pollLast>
		<getFirst public="1" set="method"><f a=""><c path="java.util.Deque.E"/></f></getFirst>
		<getLast public="1" set="method"><f a=""><c path="java.util.Deque.E"/></f></getLast>
		<peekFirst public="1" set="method"><f a=""><c path="java.util.Deque.E"/></f></peekFirst>
		<peekLast public="1" set="method"><f a=""><c path="java.util.Deque.E"/></f></peekLast>
		<removeFirstOccurrence public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></removeFirstOccurrence>
		<removeLastOccurrence public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></removeLastOccurrence>
		<add public="1" set="method"><f a="param1">
	<c path="java.util.Deque.E"/>
	<x path="Bool"/>
</f></add>
		<offer public="1" set="method"><f a="param1">
	<c path="java.util.Deque.E"/>
	<x path="Bool"/>
</f></offer>
		<remove public="1" set="method">
			<f a=""><c path="java.util.Deque.E"/></f>
			<overloads><remove public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove></overloads>
		</remove>
		<poll public="1" set="method"><f a=""><c path="java.util.Deque.E"/></f></poll>
		<element public="1" set="method"><f a=""><c path="java.util.Deque.E"/></f></element>
		<peek public="1" set="method"><f a=""><c path="java.util.Deque.E"/></f></peek>
		<push public="1" set="method"><f a="param1">
	<c path="java.util.Deque.E"/>
	<x path="Void"/>
</f></push>
		<pop public="1" set="method"><f a=""><c path="java.util.Deque.E"/></f></pop>
		<contains public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.Deque.E"/></c></f></iterator>
		<descendingIterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.Deque.E"/></c></f></descendingIterator>
		<meta>
			<m n=":native"><e>"java.util.Deque"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.DoubleConsumer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/DoubleConsumer.class" extern="1" interface="1">
		<accept public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></accept>
		<andThen public="1" set="method">
			<f a="param1">
				<c path="java.util.function.DoubleConsumer"/>
				<c path="java.util.function.DoubleConsumer"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</andThen>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.DoubleConsumer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.DoubleSummaryStatistics" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/DoubleSummaryStatistics.class" extern="1">
		<implements path="java.util.function.DoubleConsumer"/>
		<accept public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></accept>
		<combine public="1" set="method"><f a="param1">
	<c path="java.util.DoubleSummaryStatistics"/>
	<x path="Void"/>
</f></combine>
		<getCount final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getCount>
		<getSum final="1" public="1" set="method"><f a=""><x path="Float"/></f></getSum>
		<getMin final="1" public="1" set="method"><f a=""><x path="Float"/></f></getMin>
		<getMax final="1" public="1" set="method"><f a=""><x path="Float"/></f></getMax>
		<getAverage final="1" public="1" set="method"><f a=""><x path="Float"/></f></getAverage>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.DoubleSummaryStatistics"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.GregorianCalendar" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/GregorianCalendar.class" extern="1">
		<extends path="java.util.Calendar"/>
		<from public="1" set="method" static="1"><f a="param1">
	<c path="java.time.ZonedDateTime"/>
	<c path="java.util.GregorianCalendar"/>
</f></from>
		<BC final="1" public="1" set="null" static="1"><x path="Int"/></BC>
		<BCE final="1" public="1" set="null" static="1"><x path="Int"/></BCE>
		<AD final="1" public="1" set="null" static="1"><x path="Int"/></AD>
		<CE final="1" public="1" set="null" static="1"><x path="Int"/></CE>
		<MONTH_LENGTH final="1" public="1" set="null" static="1"><c path="java.NativeArray"><x path="Int"/></c></MONTH_LENGTH>
		<LEAP_MONTH_LENGTH final="1" public="1" set="null" static="1"><c path="java.NativeArray"><x path="Int"/></c></LEAP_MONTH_LENGTH>
		<MIN_VALUES final="1" public="1" set="null" static="1"><c path="java.NativeArray"><x path="Int"/></c></MIN_VALUES>
		<LEAST_MAX_VALUES final="1" public="1" set="null" static="1"><c path="java.NativeArray"><x path="Int"/></c></LEAST_MAX_VALUES>
		<MAX_VALUES final="1" public="1" set="null" static="1"><c path="java.NativeArray"><x path="Int"/></c></MAX_VALUES>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<DEFAULT_GREGORIAN_CUTOVER final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></DEFAULT_GREGORIAN_CUTOVER>
		<setGregorianChange public="1" set="method"><f a="param1">
	<c path="java.util.Date"/>
	<x path="Void"/>
</f></setGregorianChange>
		<getGregorianChange final="1" public="1" set="method"><f a=""><c path="java.util.Date"/></f></getGregorianChange>
		<isLeapYear public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isLeapYear>
		<getCalendarType public="1" set="method" override="1"><f a=""><c path="String"/></f></getCalendarType>
		<equals public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method" override="1"><f a=""><x path="Int"/></f></hashCode>
		<add public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></add>
		<roll public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<overloads><roll public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></roll></overloads>
		</roll>
		<getMinimum public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getMinimum>
		<getMaximum public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getMaximum>
		<getGreatestMinimum public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getGreatestMinimum>
		<getLeastMaximum public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getLeastMaximum>
		<getActualMinimum public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getActualMinimum>
		<getActualMaximum public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getActualMaximum>
		<clone public="1" set="method" override="1"><f a=""><d/></f></clone>
		<getTimeZone public="1" set="method" override="1"><f a=""><c path="java.util.TimeZone"/></f></getTimeZone>
		<setTimeZone public="1" set="method" override="1"><f a="param1">
	<c path="java.util.TimeZone"/>
	<x path="Void"/>
</f></setTimeZone>
		<isWeekDateSupported final="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isWeekDateSupported>
		<getWeekYear public="1" set="method" override="1"><f a=""><x path="Int"/></f></getWeekYear>
		<setWeekDate public="1" set="method" override="1"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setWeekDate>
		<getWeeksInWeekYear public="1" set="method" override="1"><f a=""><x path="Int"/></f></getWeeksInWeekYear>
		<computeFields public="1" set="method" override="1"><f a=""><x path="Void"/></f></computeFields>
		<computeTime public="1" set="method" override="1"><f a=""><x path="Void"/></f></computeTime>
		<toZonedDateTime public="1" set="method"><f a=""><c path="java.time.ZonedDateTime"/></f></toZonedDateTime>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.TimeZone"/>
	<c path="java.util.Locale"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.TimeZone"/>
	<c path="java.util.Locale"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.util.Locale"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.util.TimeZone"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.GregorianCalendar"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.HashMap_HashMapSpliterator" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/HashMap$HashMapSpliterator.class" module="java.util.HashMap" extern="1">
		<getFence final="1" public="1" set="method"><f a=""><x path="Int"/></f></getFence>
		<estimateSize final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<map final="1" public="1"><c path="java.util.HashMap">
	<c path="java.util.HashMap_HashMapSpliterator.K"/>
	<c path="java.util.HashMap_HashMapSpliterator.V"/>
</c></map>
		<current public="1"><c path="java.util.HashMap_Node">
	<c path="java.util.HashMap_HashMapSpliterator.K"/>
	<c path="java.util.HashMap_HashMapSpliterator.V"/>
</c></current>
		<index public="1"><x path="Int"/></index>
		<fence public="1"><x path="Int"/></fence>
		<est public="1"><x path="Int"/></est>
		<expectedModCount public="1"><x path="Int"/></expectedModCount>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.util.HashMap">
		<c path="java.util.HashMap_HashMapSpliterator.K"/>
		<c path="java.util.HashMap_HashMapSpliterator.V"/>
	</c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.HashMap$HashMapSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.HashMap_ValueSpliterator" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/HashMap$ValueSpliterator.class" module="java.util.HashMap" extern="1">
		<extends path="java.util.HashMap_HashMapSpliterator">
			<c path="java.util.HashMap_ValueSpliterator.K"/>
			<c path="java.util.HashMap_ValueSpliterator.V"/>
		</extends>
		<implements path="java.util.Spliterator"><c path="java.util.HashMap_ValueSpliterator.V"/></implements>
		<trySplit public="1" set="method"><f a=""><c path="java.util.HashMap_ValueSpliterator">
	<c path="java.util.HashMap_ValueSpliterator.K"/>
	<c path="java.util.HashMap_ValueSpliterator.V"/>
</c></f></trySplit>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.util.HashMap">
		<c path="java.util.HashMap_ValueSpliterator.K"/>
		<c path="java.util.HashMap_ValueSpliterator.V"/>
	</c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.HashMap$ValueSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.HashMap_Values" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/HashMap$Values.class" module="java.util.HashMap" extern="1">
		<extends path="java.util.AbstractCollection"><d/></extends>
		<size final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<clear final="1" public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<iterator final="1" public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><d/></c></f></iterator>
		<contains final="1" public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<spliterator final="1" public="1" set="method"><f a=""><c path="java.util.Spliterator"><d/></c></f></spliterator>
		<forEach final="1" public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<this_0 final="1" public="1">
			<c path="java.util.HashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.HashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.HashMap$Values"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.HashMap_HashIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/HashMap$HashIterator.class" module="java.util.HashMap" extern="1" abstract="1">
		<hasNext final="1" public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<nextNode final="1" public="1" set="method"><f a=""><c path="java.util.HashMap_Node">
	<d/>
	<d/>
</c></f></nextNode>
		<remove final="1" public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<next public="1"><c path="java.util.HashMap_Node">
	<d/>
	<d/>
</c></next>
		<current public="1"><c path="java.util.HashMap_Node">
	<d/>
	<d/>
</c></current>
		<expectedModCount public="1"><x path="Int"/></expectedModCount>
		<index public="1"><x path="Int"/></index>
		<this_0 final="1" public="1">
			<c path="java.util.HashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.HashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.HashMap$HashIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.HashMap_ValueIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/HashMap$ValueIterator.class" module="java.util.HashMap" extern="1">
		<extends path="java.util.HashMap_HashIterator"/>
		<implements path="java.util.Iterator"><d/></implements>
		<next final="1" public="1" set="method" override="1"><f a=""><d/></f></next>
		<this_0 final="1" public="1" override="1">
			<c path="java.util.HashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.HashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.HashMap$ValueIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.HashMap_Node" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/HashMap$Node.class" module="java.util.HashMap" extern="1">
		<implements path="java.util.Map_Entry">
			<c path="java.util.HashMap_Node.K"/>
			<c path="java.util.HashMap_Node.V"/>
		</implements>
		<getKey final="1" public="1" set="method"><f a=""><c path="java.util.HashMap_Node.K"/></f></getKey>
		<getValue final="1" public="1" set="method"><f a=""><c path="java.util.HashMap_Node.V"/></f></getValue>
		<toString final="1" public="1" set="method"><f a=""><c path="String"/></f></toString>
		<hashCode final="1" public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<setValue final="1" public="1" set="method"><f a="param1">
	<c path="java.util.HashMap_Node.V"/>
	<c path="java.util.HashMap_Node.V"/>
</f></setValue>
		<equals final="1" public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hash final="1" public="1"><x path="Int"/></hash>
		<key final="1" public="1"><c path="java.util.HashMap_Node.K"/></key>
		<value public="1"><c path="java.util.HashMap_Node.V"/></value>
		<next public="1"><c path="java.util.HashMap_Node">
	<c path="java.util.HashMap_Node.K"/>
	<c path="java.util.HashMap_Node.V"/>
</c></next>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<c path="java.util.HashMap_Node.K"/>
	<c path="java.util.HashMap_Node.V"/>
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap_Node.K"/>
		<c path="java.util.HashMap_Node.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.HashMap$Node"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedHashMap_Entry" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedHashMap$Entry.class" module="java.util.LinkedHashMap" extern="1">
		<extends path="java.util.HashMap_Node">
			<c path="java.util.LinkedHashMap_Entry.K"/>
			<c path="java.util.LinkedHashMap_Entry.V"/>
		</extends>
		<before public="1"><c path="java.util.LinkedHashMap_Entry">
	<c path="java.util.LinkedHashMap_Entry.K"/>
	<c path="java.util.LinkedHashMap_Entry.V"/>
</c></before>
		<after public="1"><c path="java.util.LinkedHashMap_Entry">
	<c path="java.util.LinkedHashMap_Entry.K"/>
	<c path="java.util.LinkedHashMap_Entry.V"/>
</c></after>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<c path="java.util.LinkedHashMap_Entry.K"/>
	<c path="java.util.LinkedHashMap_Entry.V"/>
	<c path="java.util.HashMap_Node">
		<c path="java.util.LinkedHashMap_Entry.K"/>
		<c path="java.util.LinkedHashMap_Entry.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.LinkedHashMap$Entry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.HashMap_TreeNode" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/HashMap$TreeNode.class" module="java.util.HashMap" extern="1">
		<extends path="java.util.LinkedHashMap_Entry">
			<c path="java.util.HashMap_TreeNode.K"/>
			<c path="java.util.HashMap_TreeNode.V"/>
		</extends>
		<moveRootToFront public="1" params="K:V" set="method" static="1"><f a="param1:param2">
	<c path="java.NativeArray"><c path="java.util.HashMap_Node">
	<c path="moveRootToFront.K"/>
	<c path="moveRootToFront.V"/>
</c></c>
	<c path="java.util.HashMap_TreeNode">
		<c path="moveRootToFront.K"/>
		<c path="moveRootToFront.V"/>
	</c>
	<x path="Void"/>
</f></moveRootToFront>
		<tieBreakOrder public="1" set="method" static="1"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Int"/>
</f></tieBreakOrder>
		<rotateLeft public="1" params="K:V" set="method" static="1"><f a="param1:param2">
	<c path="java.util.HashMap_TreeNode">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</c>
	<c path="java.util.HashMap_TreeNode">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</c>
	<c path="java.util.HashMap_TreeNode">
		<c path="rotateLeft.K"/>
		<c path="rotateLeft.V"/>
	</c>
</f></rotateLeft>
		<rotateRight public="1" params="K:V" set="method" static="1"><f a="param1:param2">
	<c path="java.util.HashMap_TreeNode">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</c>
	<c path="java.util.HashMap_TreeNode">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</c>
	<c path="java.util.HashMap_TreeNode">
		<c path="rotateRight.K"/>
		<c path="rotateRight.V"/>
	</c>
</f></rotateRight>
		<balanceInsertion public="1" params="K:V" set="method" static="1"><f a="param1:param2">
	<c path="java.util.HashMap_TreeNode">
		<c path="balanceInsertion.K"/>
		<c path="balanceInsertion.V"/>
	</c>
	<c path="java.util.HashMap_TreeNode">
		<c path="balanceInsertion.K"/>
		<c path="balanceInsertion.V"/>
	</c>
	<c path="java.util.HashMap_TreeNode">
		<c path="balanceInsertion.K"/>
		<c path="balanceInsertion.V"/>
	</c>
</f></balanceInsertion>
		<balanceDeletion public="1" params="K:V" set="method" static="1"><f a="param1:param2">
	<c path="java.util.HashMap_TreeNode">
		<c path="balanceDeletion.K"/>
		<c path="balanceDeletion.V"/>
	</c>
	<c path="java.util.HashMap_TreeNode">
		<c path="balanceDeletion.K"/>
		<c path="balanceDeletion.V"/>
	</c>
	<c path="java.util.HashMap_TreeNode">
		<c path="balanceDeletion.K"/>
		<c path="balanceDeletion.V"/>
	</c>
</f></balanceDeletion>
		<checkInvariants public="1" params="K:V" set="method" static="1"><f a="param1">
	<c path="java.util.HashMap_TreeNode">
		<c path="checkInvariants.K"/>
		<c path="checkInvariants.V"/>
	</c>
	<x path="Bool"/>
</f></checkInvariants>
		<root final="1" public="1" set="method"><f a=""><c path="java.util.HashMap_TreeNode">
	<c path="java.util.HashMap_TreeNode.K"/>
	<c path="java.util.HashMap_TreeNode.V"/>
</c></f></root>
		<find final="1" public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<d/>
	<c path="java.lang.Class"><d/></c>
	<c path="java.util.HashMap_TreeNode">
		<c path="java.util.HashMap_TreeNode.K"/>
		<c path="java.util.HashMap_TreeNode.V"/>
	</c>
</f></find>
		<getTreeNode final="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<d/>
	<c path="java.util.HashMap_TreeNode">
		<c path="java.util.HashMap_TreeNode.K"/>
		<c path="java.util.HashMap_TreeNode.V"/>
	</c>
</f></getTreeNode>
		<treeify final="1" public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.util.HashMap_Node">
	<c path="java.util.HashMap_TreeNode.K"/>
	<c path="java.util.HashMap_TreeNode.V"/>
</c></c>
	<x path="Void"/>
</f></treeify>
		<untreeify final="1" public="1" set="method"><f a="param1">
	<c path="java.util.HashMap">
		<c path="java.util.HashMap_TreeNode.K"/>
		<c path="java.util.HashMap_TreeNode.V"/>
	</c>
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap_TreeNode.K"/>
		<c path="java.util.HashMap_TreeNode.V"/>
	</c>
</f></untreeify>
		<putTreeVal final="1" public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.util.HashMap">
		<c path="java.util.HashMap_TreeNode.K"/>
		<c path="java.util.HashMap_TreeNode.V"/>
	</c>
	<c path="java.NativeArray"><c path="java.util.HashMap_Node">
	<c path="java.util.HashMap_TreeNode.K"/>
	<c path="java.util.HashMap_TreeNode.V"/>
</c></c>
	<x path="Int"/>
	<c path="java.util.HashMap_TreeNode.K"/>
	<c path="java.util.HashMap_TreeNode.V"/>
	<c path="java.util.HashMap_TreeNode">
		<c path="java.util.HashMap_TreeNode.K"/>
		<c path="java.util.HashMap_TreeNode.V"/>
	</c>
</f></putTreeVal>
		<removeTreeNode final="1" public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.HashMap">
		<c path="java.util.HashMap_TreeNode.K"/>
		<c path="java.util.HashMap_TreeNode.V"/>
	</c>
	<c path="java.NativeArray"><c path="java.util.HashMap_Node">
	<c path="java.util.HashMap_TreeNode.K"/>
	<c path="java.util.HashMap_TreeNode.V"/>
</c></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeTreeNode>
		<split final="1" public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.HashMap">
		<c path="java.util.HashMap_TreeNode.K"/>
		<c path="java.util.HashMap_TreeNode.V"/>
	</c>
	<c path="java.NativeArray"><c path="java.util.HashMap_Node">
	<c path="java.util.HashMap_TreeNode.K"/>
	<c path="java.util.HashMap_TreeNode.V"/>
</c></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></split>
		<parent public="1"><c path="java.util.HashMap_TreeNode">
	<c path="java.util.HashMap_TreeNode.K"/>
	<c path="java.util.HashMap_TreeNode.V"/>
</c></parent>
		<left public="1"><c path="java.util.HashMap_TreeNode">
	<c path="java.util.HashMap_TreeNode.K"/>
	<c path="java.util.HashMap_TreeNode.V"/>
</c></left>
		<right public="1"><c path="java.util.HashMap_TreeNode">
	<c path="java.util.HashMap_TreeNode.K"/>
	<c path="java.util.HashMap_TreeNode.V"/>
</c></right>
		<prev public="1"><c path="java.util.HashMap_TreeNode">
	<c path="java.util.HashMap_TreeNode.K"/>
	<c path="java.util.HashMap_TreeNode.V"/>
</c></prev>
		<red public="1"><x path="Bool"/></red>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<c path="java.util.HashMap_TreeNode.K"/>
	<c path="java.util.HashMap_TreeNode.V"/>
	<c path="java.util.HashMap_Node">
		<c path="java.util.HashMap_TreeNode.K"/>
		<c path="java.util.HashMap_TreeNode.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.HashMap$TreeNode"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.HashMap_KeySpliterator" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/HashMap$KeySpliterator.class" module="java.util.HashMap" extern="1">
		<extends path="java.util.HashMap_HashMapSpliterator">
			<c path="java.util.HashMap_KeySpliterator.K"/>
			<c path="java.util.HashMap_KeySpliterator.V"/>
		</extends>
		<implements path="java.util.Spliterator"><c path="java.util.HashMap_KeySpliterator.K"/></implements>
		<trySplit public="1" set="method"><f a=""><c path="java.util.HashMap_KeySpliterator">
	<c path="java.util.HashMap_KeySpliterator.K"/>
	<c path="java.util.HashMap_KeySpliterator.V"/>
</c></f></trySplit>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.util.HashMap">
		<c path="java.util.HashMap_KeySpliterator.K"/>
		<c path="java.util.HashMap_KeySpliterator.V"/>
	</c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.HashMap$KeySpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.HashMap_KeySet" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/HashMap$KeySet.class" module="java.util.HashMap" extern="1">
		<extends path="java.util.AbstractSet"><d/></extends>
		<size final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<clear final="1" public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<iterator final="1" public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><d/></c></f></iterator>
		<contains final="1" public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<remove final="1" public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<spliterator final="1" public="1" set="method"><f a=""><c path="java.util.Spliterator"><d/></c></f></spliterator>
		<forEach final="1" public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<this_0 final="1" public="1">
			<c path="java.util.HashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.HashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.HashMap$KeySet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.HashMap_KeyIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/HashMap$KeyIterator.class" module="java.util.HashMap" extern="1">
		<extends path="java.util.HashMap_HashIterator"/>
		<implements path="java.util.Iterator"><d/></implements>
		<next final="1" public="1" set="method" override="1"><f a=""><d/></f></next>
		<this_0 final="1" public="1" override="1">
			<c path="java.util.HashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.HashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.HashMap$KeyIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.HashMap_EntrySpliterator" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/HashMap$EntrySpliterator.class" module="java.util.HashMap" extern="1">
		<extends path="java.util.HashMap_HashMapSpliterator">
			<c path="java.util.HashMap_EntrySpliterator.K"/>
			<c path="java.util.HashMap_EntrySpliterator.V"/>
		</extends>
		<implements path="java.util.Spliterator"><c path="java.util.Map_Entry">
	<c path="java.util.HashMap_EntrySpliterator.K"/>
	<c path="java.util.HashMap_EntrySpliterator.V"/>
</c></implements>
		<trySplit public="1" set="method"><f a=""><c path="java.util.HashMap_EntrySpliterator">
	<c path="java.util.HashMap_EntrySpliterator.K"/>
	<c path="java.util.HashMap_EntrySpliterator.V"/>
</c></f></trySplit>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.util.HashMap">
		<c path="java.util.HashMap_EntrySpliterator.K"/>
		<c path="java.util.HashMap_EntrySpliterator.V"/>
	</c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.HashMap$EntrySpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.HashMap_EntrySet" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/HashMap$EntrySet.class" module="java.util.HashMap" extern="1">
		<extends path="java.util.AbstractSet"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></extends>
		<size final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<clear final="1" public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<iterator final="1" public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></c></f></iterator>
		<contains final="1" public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<remove final="1" public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<spliterator final="1" public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></c></f></spliterator>
		<forEach final="1" public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<this_0 final="1" public="1">
			<c path="java.util.HashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.HashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.HashMap$EntrySet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.HashMap_EntryIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/HashMap$EntryIterator.class" module="java.util.HashMap" extern="1">
		<extends path="java.util.HashMap_HashIterator"/>
		<implements path="java.util.Iterator"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></implements>
		<next final="1" public="1" set="method" override="1"><f a=""><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></f></next>
		<this_0 final="1" public="1" override="1">
			<c path="java.util.HashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.HashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.HashMap$EntryIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Hashtable_ValueCollection" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable$ValueCollection.class" module="java.util.Hashtable" extern="1">
		<extends path="java.util.AbstractCollection"><d/></extends>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><d/></c></f></iterator>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<this_0 final="1" public="1">
			<c path="java.util.Hashtable">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Hashtable">
		<d/>
		<d/>
	</c>
	<c path="java.util.Hashtable_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Hashtable$ValueCollection"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Hashtable_KeySet" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable$KeySet.class" module="java.util.Hashtable" extern="1">
		<extends path="java.util.AbstractSet"><d/></extends>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><d/></c></f></iterator>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<remove public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<this_0 final="1" public="1">
			<c path="java.util.Hashtable">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Hashtable">
		<d/>
		<d/>
	</c>
	<c path="java.util.Hashtable_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Hashtable$KeySet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Hashtable_Enumerator" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable$Enumerator.class" module="java.util.Hashtable" extern="1">
		<implements path="java.util.Iterator"><c path="java.util.Hashtable_Enumerator.T"/></implements>
		<implements path="java.util.Enumeration"><c path="java.util.Hashtable_Enumerator.T"/></implements>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<nextElement public="1" set="method"><f a=""><c path="java.util.Hashtable_Enumerator.T"/></f></nextElement>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><c path="java.util.Hashtable_Enumerator.T"/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<table public="1"><c path="java.NativeArray"><c path="java.util.Hashtable_Entry">
	<d/>
	<d/>
</c></c></table>
		<index public="1"><x path="Int"/></index>
		<entry public="1"><c path="java.util.Hashtable_Entry">
	<d/>
	<d/>
</c></entry>
		<lastReturned public="1"><c path="java.util.Hashtable_Entry">
	<d/>
	<d/>
</c></lastReturned>
		<type public="1"><x path="Int"/></type>
		<iterator public="1"><x path="Bool"/></iterator>
		<expectedModCount public="1"><x path="Int"/></expectedModCount>
		<this_0 final="1" public="1">
			<c path="java.util.Hashtable">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Hashtable">
		<d/>
		<d/>
	</c>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Hashtable$Enumerator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Hashtable_EntrySet" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable$EntrySet.class" module="java.util.Hashtable" extern="1">
		<extends path="java.util.AbstractSet"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></extends>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></c></f></iterator>
		<add public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Map_Entry">
					<d/>
					<d/>
				</c>
				<x path="Bool"/>
			</f>
			<overloads><add public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></add></overloads>
		</add>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<remove public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<this_0 final="1" public="1">
			<c path="java.util.Hashtable">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Hashtable">
		<d/>
		<d/>
	</c>
	<c path="java.util.Hashtable_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Hashtable$EntrySet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Hashtable_Entry" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable$Entry.class" module="java.util.Hashtable" extern="1">
		<implements path="java.util.Map_Entry">
			<c path="java.util.Hashtable_Entry.K"/>
			<c path="java.util.Hashtable_Entry.V"/>
		</implements>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<getKey public="1" set="method"><f a=""><c path="java.util.Hashtable_Entry.K"/></f></getKey>
		<getValue public="1" set="method"><f a=""><c path="java.util.Hashtable_Entry.V"/></f></getValue>
		<setValue public="1" set="method"><f a="param1">
	<c path="java.util.Hashtable_Entry.V"/>
	<c path="java.util.Hashtable_Entry.V"/>
</f></setValue>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<hash final="1" public="1"><x path="Int"/></hash>
		<key final="1" public="1"><c path="java.util.Hashtable_Entry.K"/></key>
		<value public="1"><c path="java.util.Hashtable_Entry.V"/></value>
		<next public="1"><c path="java.util.Hashtable_Entry">
	<c path="java.util.Hashtable_Entry.K"/>
	<c path="java.util.Hashtable_Entry.V"/>
</c></next>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<c path="java.util.Hashtable_Entry.K"/>
	<c path="java.util.Hashtable_Entry.V"/>
	<c path="java.util.Hashtable_Entry">
		<c path="java.util.Hashtable_Entry.K"/>
		<c path="java.util.Hashtable_Entry.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Hashtable$Entry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Hashtable_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable$1.class" module="java.util.Hashtable" extern="1"><meta>
	<m n=":native"><e>"java.util.Hashtable$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.util.function.IntConsumer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/IntConsumer.class" extern="1" interface="1">
		<accept public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></accept>
		<andThen public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntConsumer"/>
				<c path="java.util.function.IntConsumer"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</andThen>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.IntConsumer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.IntSummaryStatistics" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/IntSummaryStatistics.class" extern="1">
		<implements path="java.util.function.IntConsumer"/>
		<accept public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></accept>
		<combine public="1" set="method"><f a="param1">
	<c path="java.util.IntSummaryStatistics"/>
	<x path="Void"/>
</f></combine>
		<getCount final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getCount>
		<getSum final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getSum>
		<getMin final="1" public="1" set="method"><f a=""><x path="Int"/></f></getMin>
		<getMax final="1" public="1" set="method"><f a=""><x path="Int"/></f></getMax>
		<getAverage final="1" public="1" set="method"><f a=""><x path="Float"/></f></getAverage>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.IntSummaryStatistics"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedHashMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedHashMap.class" extern="1">
		<extends path="java.util.HashMap">
			<c path="java.util.LinkedHashMap.K"/>
			<c path="java.util.LinkedHashMap.V"/>
		</extends>
		<implements path="java.util.Map">
			<c path="java.util.LinkedHashMap.K"/>
			<c path="java.util.LinkedHashMap.V"/>
		</implements>
		<reinitialize public="1" set="method" override="1"><f a=""><x path="Void"/></f></reinitialize>
		<newNode public="1" set="method" override="1"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<c path="java.util.LinkedHashMap.K"/>
	<c path="java.util.LinkedHashMap.V"/>
	<c path="java.util.HashMap_Node">
		<c path="java.util.LinkedHashMap.K"/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
	<c path="java.util.HashMap_Node">
		<c path="java.util.LinkedHashMap.K"/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
</f></newNode>
		<replacementNode public="1" set="method" override="1"><f a="param1:param2">
	<c path="java.util.HashMap_Node">
		<c path="java.util.LinkedHashMap.K"/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
	<c path="java.util.HashMap_Node">
		<c path="java.util.LinkedHashMap.K"/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
	<c path="java.util.HashMap_Node">
		<c path="java.util.LinkedHashMap.K"/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
</f></replacementNode>
		<newTreeNode public="1" set="method" override="1"><f a="param1:param2:param3:param4">
	<x path="Int"/>
	<c path="java.util.LinkedHashMap.K"/>
	<c path="java.util.LinkedHashMap.V"/>
	<c path="java.util.HashMap_Node">
		<c path="java.util.LinkedHashMap.K"/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
	<c path="java.util.HashMap_TreeNode">
		<c path="java.util.LinkedHashMap.K"/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
</f></newTreeNode>
		<replacementTreeNode public="1" set="method" override="1"><f a="param1:param2">
	<c path="java.util.HashMap_Node">
		<c path="java.util.LinkedHashMap.K"/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
	<c path="java.util.HashMap_Node">
		<c path="java.util.LinkedHashMap.K"/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
	<c path="java.util.HashMap_TreeNode">
		<c path="java.util.LinkedHashMap.K"/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
</f></replacementTreeNode>
		<afterNodeRemoval public="1" set="method" override="1"><f a="param1">
	<c path="java.util.HashMap_Node">
		<c path="java.util.LinkedHashMap.K"/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
	<x path="Void"/>
</f></afterNodeRemoval>
		<afterNodeInsertion public="1" set="method" override="1"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></afterNodeInsertion>
		<afterNodeAccess public="1" set="method" override="1"><f a="param1">
	<c path="java.util.HashMap_Node">
		<c path="java.util.LinkedHashMap.K"/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
	<x path="Void"/>
</f></afterNodeAccess>
		<internalWriteEntries public="1" set="method" override="1"><f a="param1">
	<c path="java.io.ObjectOutputStream"/>
	<x path="Void"/>
</f></internalWriteEntries>
		<containsValue public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsValue>
		<get public="1" set="method" override="1"><f a="param1">
	<d/>
	<c path="java.util.LinkedHashMap.V"/>
</f></get>
		<getOrDefault public="1" set="method" override="1"><f a="param1:param2">
	<d/>
	<c path="java.util.LinkedHashMap.V"/>
	<c path="java.util.LinkedHashMap.V"/>
</f></getOrDefault>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<removeEldestEntry public="1" set="method"><f a="param1">
	<c path="java.util.Map_Entry">
		<c path="java.util.LinkedHashMap.K"/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
	<x path="Bool"/>
</f></removeEldestEntry>
		<keySet public="1" set="method" override="1"><f a=""><c path="java.util.Set"><c path="java.util.LinkedHashMap.K"/></c></f></keySet>
		<values public="1" set="method" override="1"><f a=""><c path="java.util.Collection"><c path="java.util.LinkedHashMap.V"/></c></f></values>
		<entrySet public="1" set="method" override="1"><f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.LinkedHashMap.K"/>
	<c path="java.util.LinkedHashMap.V"/>
</c></c></f></entrySet>
		<forEach public="1" set="method" override="1"><f a="param1">
	<c path="java.util.function.BiConsumer">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></forEach>
		<replaceAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.function.BiFunction">
		<d/>
		<d/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
	<x path="Void"/>
</f></replaceAll>
		<head public="1"><c path="java.util.LinkedHashMap_Entry">
	<c path="java.util.LinkedHashMap.K"/>
	<c path="java.util.LinkedHashMap.V"/>
</c></head>
		<tail public="1"><c path="java.util.LinkedHashMap_Entry">
	<c path="java.util.LinkedHashMap.K"/>
	<c path="java.util.LinkedHashMap.V"/>
</c></tail>
		<accessOrder final="1" public="1"><x path="Bool"/></accessOrder>
		<new public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Single"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.util.Map">
		<c path="java.util.LinkedHashMap.K"/>
		<c path="java.util.LinkedHashMap.V"/>
	</c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a=""><x path="Void"/></f></new>
				<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.LinkedHashMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedHashMap_LinkedValues" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedHashMap$LinkedValues.class" module="java.util.LinkedHashMap" extern="1">
		<extends path="java.util.AbstractCollection"><d/></extends>
		<size final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<clear final="1" public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<iterator final="1" public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><d/></c></f></iterator>
		<contains final="1" public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<spliterator final="1" public="1" set="method"><f a=""><c path="java.util.Spliterator"><d/></c></f></spliterator>
		<forEach final="1" public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<this_0 final="1" public="1">
			<c path="java.util.LinkedHashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.LinkedHashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.LinkedHashMap$LinkedValues"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedHashMap_LinkedHashIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedHashMap$LinkedHashIterator.class" module="java.util.LinkedHashMap" extern="1" abstract="1">
		<hasNext final="1" public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<nextNode final="1" public="1" set="method"><f a=""><c path="java.util.LinkedHashMap_Entry">
	<d/>
	<d/>
</c></f></nextNode>
		<remove final="1" public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<next public="1"><c path="java.util.LinkedHashMap_Entry">
	<d/>
	<d/>
</c></next>
		<current public="1"><c path="java.util.LinkedHashMap_Entry">
	<d/>
	<d/>
</c></current>
		<expectedModCount public="1"><x path="Int"/></expectedModCount>
		<this_0 final="1" public="1">
			<c path="java.util.LinkedHashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.LinkedHashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.LinkedHashMap$LinkedHashIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedHashMap_LinkedValueIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedHashMap$LinkedValueIterator.class" module="java.util.LinkedHashMap" extern="1">
		<extends path="java.util.LinkedHashMap_LinkedHashIterator"/>
		<implements path="java.util.Iterator"><d/></implements>
		<next final="1" public="1" set="method" override="1"><f a=""><d/></f></next>
		<this_0 final="1" public="1" override="1">
			<c path="java.util.LinkedHashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.LinkedHashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.LinkedHashMap$LinkedValueIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedHashMap_LinkedKeySet" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedHashMap$LinkedKeySet.class" module="java.util.LinkedHashMap" extern="1">
		<extends path="java.util.AbstractSet"><d/></extends>
		<size final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<clear final="1" public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<iterator final="1" public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><d/></c></f></iterator>
		<contains final="1" public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<remove final="1" public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<spliterator final="1" public="1" set="method"><f a=""><c path="java.util.Spliterator"><d/></c></f></spliterator>
		<forEach final="1" public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<this_0 final="1" public="1">
			<c path="java.util.LinkedHashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.LinkedHashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.LinkedHashMap$LinkedKeySet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedHashMap_LinkedKeyIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedHashMap$LinkedKeyIterator.class" module="java.util.LinkedHashMap" extern="1">
		<extends path="java.util.LinkedHashMap_LinkedHashIterator"/>
		<implements path="java.util.Iterator"><d/></implements>
		<next final="1" public="1" set="method" override="1"><f a=""><d/></f></next>
		<this_0 final="1" public="1" override="1">
			<c path="java.util.LinkedHashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.LinkedHashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.LinkedHashMap$LinkedKeyIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedHashMap_LinkedEntrySet" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedHashMap$LinkedEntrySet.class" module="java.util.LinkedHashMap" extern="1">
		<extends path="java.util.AbstractSet"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></extends>
		<size final="1" public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<clear final="1" public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<iterator final="1" public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></c></f></iterator>
		<contains final="1" public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<remove final="1" public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<spliterator final="1" public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></c></f></spliterator>
		<forEach final="1" public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<this_0 final="1" public="1">
			<c path="java.util.LinkedHashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.LinkedHashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.LinkedHashMap$LinkedEntrySet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedHashMap_LinkedEntryIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedHashMap$LinkedEntryIterator.class" module="java.util.LinkedHashMap" extern="1">
		<extends path="java.util.LinkedHashMap_LinkedHashIterator"/>
		<implements path="java.util.Iterator"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></implements>
		<next final="1" public="1" set="method" override="1"><f a=""><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></f></next>
		<this_0 final="1" public="1" override="1">
			<c path="java.util.LinkedHashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.LinkedHashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.LinkedHashMap$LinkedEntryIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedList" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedList.class" extern="1">
		<extends path="java.util.AbstractSequentialList"><c path="java.util.LinkedList.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Cloneable"/>
		<implements path="java.util.Deque"><c path="java.util.LinkedList.E"/></implements>
		<implements path="java.util.List"><c path="java.util.LinkedList.E"/></implements>
		<linkLast public="1" set="method"><f a="param1">
	<c path="java.util.LinkedList.E"/>
	<x path="Void"/>
</f></linkLast>
		<linkBefore public="1" set="method"><f a="param1:param2">
	<c path="java.util.LinkedList.E"/>
	<c path="java.util.LinkedList_Node"><c path="java.util.LinkedList.E"/></c>
	<x path="Void"/>
</f></linkBefore>
		<unlink public="1" set="method"><f a="param1">
	<c path="java.util.LinkedList_Node"><c path="java.util.LinkedList.E"/></c>
	<c path="java.util.LinkedList.E"/>
</f></unlink>
		<getFirst public="1" set="method"><f a=""><c path="java.util.LinkedList.E"/></f></getFirst>
		<getLast public="1" set="method"><f a=""><c path="java.util.LinkedList.E"/></f></getLast>
		<removeFirst public="1" set="method"><f a=""><c path="java.util.LinkedList.E"/></f></removeFirst>
		<removeLast public="1" set="method"><f a=""><c path="java.util.LinkedList.E"/></f></removeLast>
		<addFirst public="1" set="method"><f a="param1">
	<c path="java.util.LinkedList.E"/>
	<x path="Void"/>
</f></addFirst>
		<addLast public="1" set="method"><f a="param1">
	<c path="java.util.LinkedList.E"/>
	<x path="Void"/>
</f></addLast>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<add public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.LinkedList.E"/>
				<x path="Bool"/>
			</f>
			<overloads><add public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.LinkedList.E"/>
	<x path="Void"/>
</f></add></overloads>
		</add>
		<remove public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<overloads>
				<remove public="1" set="method"><f a=""><c path="java.util.LinkedList.E"/></f></remove>
				<remove public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.LinkedList.E"/>
</f></remove>
			</overloads>
		</remove>
		<addAll public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Collection"><c path="java.util.LinkedList.E"/></c>
				<x path="Bool"/>
			</f>
			<overloads><addAll public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collection"><c path="java.util.LinkedList.E"/></c>
	<x path="Bool"/>
</f></addAll></overloads>
		</addAll>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<get public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.LinkedList.E"/>
</f></get>
		<set public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.LinkedList.E"/>
	<c path="java.util.LinkedList.E"/>
</f></set>
		<node public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.LinkedList_Node"><c path="java.util.LinkedList.E"/></c>
</f></node>
		<indexOf public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Int"/>
</f></lastIndexOf>
		<peek public="1" set="method"><f a=""><c path="java.util.LinkedList.E"/></f></peek>
		<element public="1" set="method"><f a=""><c path="java.util.LinkedList.E"/></f></element>
		<poll public="1" set="method"><f a=""><c path="java.util.LinkedList.E"/></f></poll>
		<offer public="1" set="method"><f a="param1">
	<c path="java.util.LinkedList.E"/>
	<x path="Bool"/>
</f></offer>
		<offerFirst public="1" set="method"><f a="param1">
	<c path="java.util.LinkedList.E"/>
	<x path="Bool"/>
</f></offerFirst>
		<offerLast public="1" set="method"><f a="param1">
	<c path="java.util.LinkedList.E"/>
	<x path="Bool"/>
</f></offerLast>
		<peekFirst public="1" set="method"><f a=""><c path="java.util.LinkedList.E"/></f></peekFirst>
		<peekLast public="1" set="method"><f a=""><c path="java.util.LinkedList.E"/></f></peekLast>
		<pollFirst public="1" set="method"><f a=""><c path="java.util.LinkedList.E"/></f></pollFirst>
		<pollLast public="1" set="method"><f a=""><c path="java.util.LinkedList.E"/></f></pollLast>
		<push public="1" set="method"><f a="param1">
	<c path="java.util.LinkedList.E"/>
	<x path="Void"/>
</f></push>
		<pop public="1" set="method"><f a=""><c path="java.util.LinkedList.E"/></f></pop>
		<removeFirstOccurrence public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></removeFirstOccurrence>
		<removeLastOccurrence public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></removeLastOccurrence>
		<listIterator public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.ListIterator"><c path="java.util.LinkedList.E"/></c>
</f></listIterator>
		<descendingIterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.LinkedList.E"/></c></f></descendingIterator>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<toArray public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.LinkedList.E"/></c></f></spliterator>
		<first public="1"><c path="java.util.LinkedList_Node"><c path="java.util.LinkedList.E"/></c></first>
		<last public="1"><c path="java.util.LinkedList_Node"><c path="java.util.LinkedList.E"/></c></last>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><c path="java.util.LinkedList.E"/></c>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.LinkedList"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedList_Node" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedList$Node.class" module="java.util.LinkedList" extern="1">
		<item public="1"><c path="java.util.LinkedList_Node.E"/></item>
		<next public="1"><c path="java.util.LinkedList_Node"><c path="java.util.LinkedList_Node.E"/></c></next>
		<prev public="1"><c path="java.util.LinkedList_Node"><c path="java.util.LinkedList_Node.E"/></c></prev>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.LinkedList_Node"><c path="java.util.LinkedList_Node.E"/></c>
	<c path="java.util.LinkedList_Node.E"/>
	<c path="java.util.LinkedList_Node"><c path="java.util.LinkedList_Node.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.LinkedList$Node"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedList_LLSpliterator" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedList$LLSpliterator.class" module="java.util.LinkedList" extern="1">
		<implements path="java.util.Spliterator"><c path="java.util.LinkedList_LLSpliterator.E"/></implements>
		<BATCH_UNIT final="1" public="1" set="null" static="1"><x path="Int"/></BATCH_UNIT>
		<MAX_BATCH final="1" public="1" set="null" static="1"><x path="Int"/></MAX_BATCH>
		<getEst final="1" public="1" set="method"><f a=""><x path="Int"/></f></getEst>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.LinkedList_LLSpliterator.E"/></c></f></trySplit>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<list final="1" public="1"><c path="java.util.LinkedList"><c path="java.util.LinkedList_LLSpliterator.E"/></c></list>
		<current public="1"><c path="java.util.LinkedList_Node"><c path="java.util.LinkedList_LLSpliterator.E"/></c></current>
		<est public="1"><x path="Int"/></est>
		<expectedModCount public="1"><x path="Int"/></expectedModCount>
		<batch public="1"><x path="Int"/></batch>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.LinkedList"><c path="java.util.LinkedList_LLSpliterator.E"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.LinkedList$LLSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedList_ListItr" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedList$ListItr.class" module="java.util.LinkedList" extern="1">
		<implements path="java.util.ListIterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<hasPrevious public="1" set="method"><f a=""><x path="Bool"/></f></hasPrevious>
		<previous public="1" set="method"><f a=""><d/></f></previous>
		<nextIndex public="1" set="method"><f a=""><x path="Int"/></f></nextIndex>
		<previousIndex public="1" set="method"><f a=""><x path="Int"/></f></previousIndex>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<set public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></set>
		<add public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></add>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<checkForComodification final="1" public="1" set="method"><f a=""><x path="Void"/></f></checkForComodification>
		<this_0 final="1" public="1">
			<c path="java.util.LinkedList"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.LinkedList"><d/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.LinkedList$ListItr"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedList_DescendingIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedList$DescendingIterator.class" module="java.util.LinkedList" extern="1">
		<implements path="java.util.Iterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<this_0 final="1" public="1">
			<c path="java.util.LinkedList"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.LinkedList"><d/></c>
	<c path="java.util.LinkedList_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.LinkedList$DescendingIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LinkedList_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LinkedList$1.class" module="java.util.LinkedList" extern="1"><meta>
	<m n=":native"><e>"java.util.LinkedList$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.util.Locale" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale.class" extern="1">
		<implements path="java.lang.Cloneable"/>
		<implements path="java.io.Serializable"/>
		<getInstance public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.util.Locale"/>
			</f>
			<overloads>
				<getInstance public="1" set="method"><f a="param1:param2">
	<c path="java.sun.util.locale.BaseLocale"/>
	<c path="java.sun.util.locale.LocaleExtensions"/>
	<c path="java.util.Locale"/>
</f></getInstance>
				<getInstance public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="java.sun.util.locale.LocaleExtensions"/>
	<c path="java.util.Locale"/>
</f></getInstance>
			</overloads>
		</getInstance>
		<getDefault public="1" set="method" static="1">
			<f a=""><c path="java.util.Locale"/></f>
			<overloads><getDefault public="1" set="method"><f a="param1">
	<e path="java.util.Locale_Category"/>
	<c path="java.util.Locale"/>
</f></getDefault></overloads>
		</getDefault>
		<setDefault public="1" set="method" static="1">
			<f a="param1">
				<c path="java.util.Locale"/>
				<x path="Void"/>
			</f>
			<overloads><setDefault public="1" set="method"><f a="param1:param2">
	<e path="java.util.Locale_Category"/>
	<c path="java.util.Locale"/>
	<x path="Void"/>
</f></setDefault></overloads>
		</setDefault>
		<getAvailableLocales public="1" set="method" static="1"><f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f></getAvailableLocales>
		<getISOCountries public="1" set="method" static="1"><f a=""><c path="java.NativeArray"><c path="String"/></c></f></getISOCountries>
		<getISOLanguages public="1" set="method" static="1"><f a=""><c path="java.NativeArray"><c path="String"/></c></f></getISOLanguages>
		<forLanguageTag public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.util.Locale"/>
</f></forLanguageTag>
		<filter public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.util.List"><c path="java.util.Locale_LanguageRange"/></c>
				<c path="java.util.Collection"><c path="java.util.Locale"/></c>
				<e path="java.util.Locale_FilteringMode"/>
				<c path="java.util.List"><c path="java.util.Locale"/></c>
			</f>
			<overloads><filter public="1" set="method"><f a="param1:param2">
	<c path="java.util.List"><c path="java.util.Locale_LanguageRange"/></c>
	<c path="java.util.Collection"><c path="java.util.Locale"/></c>
	<c path="java.util.List"><c path="java.util.Locale"/></c>
</f></filter></overloads>
		</filter>
		<filterTags public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.util.List"><c path="java.util.Locale_LanguageRange"/></c>
				<c path="java.util.Collection"><c path="String"/></c>
				<e path="java.util.Locale_FilteringMode"/>
				<c path="java.util.List"><c path="String"/></c>
			</f>
			<overloads><filterTags public="1" set="method"><f a="param1:param2">
	<c path="java.util.List"><c path="java.util.Locale_LanguageRange"/></c>
	<c path="java.util.Collection"><c path="String"/></c>
	<c path="java.util.List"><c path="String"/></c>
</f></filterTags></overloads>
		</filterTags>
		<lookup public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.util.List"><c path="java.util.Locale_LanguageRange"/></c>
	<c path="java.util.Collection"><c path="java.util.Locale"/></c>
	<c path="java.util.Locale"/>
</f></lookup>
		<lookupTag public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.util.List"><c path="java.util.Locale_LanguageRange"/></c>
	<c path="java.util.Collection"><c path="String"/></c>
	<c path="String"/>
</f></lookupTag>
		<ENGLISH final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></ENGLISH>
		<FRENCH final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></FRENCH>
		<GERMAN final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></GERMAN>
		<ITALIAN final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></ITALIAN>
		<JAPANESE final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></JAPANESE>
		<KOREAN final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></KOREAN>
		<CHINESE final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></CHINESE>
		<SIMPLIFIED_CHINESE final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></SIMPLIFIED_CHINESE>
		<TRADITIONAL_CHINESE final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></TRADITIONAL_CHINESE>
		<FRANCE final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></FRANCE>
		<GERMANY final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></GERMANY>
		<ITALY final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></ITALY>
		<JAPAN final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></JAPAN>
		<KOREA final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></KOREA>
		<CHINA final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></CHINA>
		<PRC final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></PRC>
		<TAIWAN final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></TAIWAN>
		<UK final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></UK>
		<US final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></US>
		<CANADA final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></CANADA>
		<CANADA_FRENCH final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></CANADA_FRENCH>
		<ROOT final="1" public="1" set="null" static="1"><c path="java.util.Locale"/></ROOT>
		<PRIVATE_USE_EXTENSION final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></PRIVATE_USE_EXTENSION>
		<UNICODE_LOCALE_EXTENSION final="1" public="1" set="null" static="1"><t path="java.types.Char16"/></UNICODE_LOCALE_EXTENSION>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<getLanguage public="1" set="method"><f a=""><c path="String"/></f></getLanguage>
		<getScript public="1" set="method"><f a=""><c path="String"/></f></getScript>
		<getCountry public="1" set="method"><f a=""><c path="String"/></f></getCountry>
		<getVariant public="1" set="method"><f a=""><c path="String"/></f></getVariant>
		<hasExtensions public="1" set="method"><f a=""><x path="Bool"/></f></hasExtensions>
		<stripExtensions public="1" set="method"><f a=""><c path="java.util.Locale"/></f></stripExtensions>
		<getExtension public="1" set="method"><f a="param1">
	<t path="java.types.Char16"/>
	<c path="String"/>
</f></getExtension>
		<getExtensionKeys public="1" set="method"><f a=""><c path="java.util.Set"><x path="java.lang.Character"/></c></f></getExtensionKeys>
		<getUnicodeLocaleAttributes public="1" set="method"><f a=""><c path="java.util.Set"><c path="String"/></c></f></getUnicodeLocaleAttributes>
		<getUnicodeLocaleType public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></getUnicodeLocaleType>
		<getUnicodeLocaleKeys public="1" set="method"><f a=""><c path="java.util.Set"><c path="String"/></c></f></getUnicodeLocaleKeys>
		<getBaseLocale public="1" set="method"><f a=""><c path="java.sun.util.locale.BaseLocale"/></f></getBaseLocale>
		<getLocaleExtensions public="1" set="method"><f a=""><c path="java.sun.util.locale.LocaleExtensions"/></f></getLocaleExtensions>
		<toString final="1" public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toLanguageTag public="1" set="method"><f a=""><c path="String"/></f></toLanguageTag>
		<getISO3Language public="1" set="method"><f a=""><c path="String"/></f></getISO3Language>
		<getISO3Country public="1" set="method"><f a=""><c path="String"/></f></getISO3Country>
		<getDisplayLanguage final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><getDisplayLanguage public="1" set="method"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getDisplayLanguage></overloads>
		</getDisplayLanguage>
		<getDisplayScript public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><getDisplayScript public="1" set="method"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getDisplayScript></overloads>
		</getDisplayScript>
		<getDisplayCountry final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><getDisplayCountry public="1" set="method"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getDisplayCountry></overloads>
		</getDisplayCountry>
		<getDisplayVariant final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><getDisplayVariant public="1" set="method"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getDisplayVariant></overloads>
		</getDisplayVariant>
		<getDisplayName final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><getDisplayName public="1" set="method"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getDisplayName></overloads>
		</getDisplayName>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.sun.util.locale.BaseLocale"/>
	<c path="java.sun.util.locale.LocaleExtensions"/>
	<c path="java.util.Locale_1"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Locale"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Locale_LocaleNameGetter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale$LocaleNameGetter.class" module="java.util.Locale" extern="1">
		<implements path="java.sun.util.locale.provider.LocaleServiceProviderPool_LocalizedObjectGetter">
			<c path="java.util.spi.LocaleNameProvider"/>
			<c path="String"/>
		</implements>
		<getObject public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.util.spi.LocaleNameProvider"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
				<x path="haxe.Rest"><d/></x>
				<c path="String"/>
			</f>
			<overloads><getObject public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.spi.LocaleServiceProvider"/>
	<c path="java.util.Locale"/>
	<c path="String"/>
	<c path="java.NativeArray"><d/></c>
	<d/>
</f></getObject></overloads>
		</getObject>
		<meta>
			<m n=":native"><e>"java.util.Locale$LocaleNameGetter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Locale_LocaleKey" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale$LocaleKey.class" module="java.util.Locale" extern="1">
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.sun.util.locale.BaseLocale"/>
	<c path="java.sun.util.locale.LocaleExtensions"/>
	<c path="java.util.Locale_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Locale$LocaleKey"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Locale_LanguageRange" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale$LanguageRange.class" module="java.util.Locale" extern="1">
		<parse public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.List"><c path="java.util.Locale_LanguageRange"/></c>
			</f>
			<overloads><parse public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.util.Map">
		<c path="String"/>
		<c path="java.util.List"><c path="String"/></c>
	</c>
	<c path="java.util.List"><c path="java.util.Locale_LanguageRange"/></c>
</f></parse></overloads>
		</parse>
		<mapEquivalents public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.util.List"><c path="java.util.Locale_LanguageRange"/></c>
	<c path="java.util.Map">
		<c path="String"/>
		<c path="java.util.List"><c path="String"/></c>
	</c>
	<c path="java.util.List"><c path="java.util.Locale_LanguageRange"/></c>
</f></mapEquivalents>
		<MAX_WEIGHT final="1" public="1" set="null" static="1"><x path="Float"/></MAX_WEIGHT>
		<MIN_WEIGHT final="1" public="1" set="null" static="1"><x path="Float"/></MIN_WEIGHT>
		<getRange public="1" set="method"><f a=""><c path="String"/></f></getRange>
		<getWeight public="1" set="method"><f a=""><x path="Float"/></f></getWeight>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Locale$LanguageRange"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.util.Locale_FilteringMode" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale$FilteringMode.class" module="java.util.Locale">
		<AUTOSELECT_FILTERING/>
		<EXTENDED_FILTERING/>
		<IGNORE_EXTENDED_RANGES/>
		<MAP_EXTENDED_RANGES/>
		<REJECT_EXTENDED_RANGES/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.util.Locale$FilteringMode"</e></m>
		</meta>
	</enum>
	<enum path="java.util.Locale_Category" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale$Category.class" module="java.util.Locale">
		<DISPLAY/>
		<FORMAT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.util.Locale$Category"</e></m>
		</meta>
	</enum>
	<class path="java.util.Locale_Cache" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale$Cache.class" module="java.util.Locale" extern="1">
		<extends path="java.sun.util.locale.LocaleObjectCache">
			<c path="java.util.Locale_LocaleKey"/>
			<c path="java.util.Locale"/>
		</extends>
		<createObject public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Locale_LocaleKey"/>
				<c path="java.util.Locale"/>
			</f>
			<overloads><createObject public="1" set="method"><f a="param1">
	<d/>
	<d/>
</f></createObject></overloads>
		</createObject>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Locale_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Locale$Cache"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Locale_Builder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale$Builder.class" module="java.util.Locale" extern="1">
		<setLocale public="1" set="method"><f a="param1">
	<c path="java.util.Locale"/>
	<c path="java.util.Locale_Builder"/>
</f></setLocale>
		<setLanguageTag public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.Locale_Builder"/>
</f></setLanguageTag>
		<setLanguage public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.Locale_Builder"/>
</f></setLanguage>
		<setScript public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.Locale_Builder"/>
</f></setScript>
		<setRegion public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.Locale_Builder"/>
</f></setRegion>
		<setVariant public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.Locale_Builder"/>
</f></setVariant>
		<setExtension public="1" set="method"><f a="param1:param2">
	<t path="java.types.Char16"/>
	<c path="String"/>
	<c path="java.util.Locale_Builder"/>
</f></setExtension>
		<setUnicodeLocaleKeyword public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<c path="java.util.Locale_Builder"/>
</f></setUnicodeLocaleKeyword>
		<addUnicodeLocaleAttribute public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.Locale_Builder"/>
</f></addUnicodeLocaleAttribute>
		<removeUnicodeLocaleAttribute public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.Locale_Builder"/>
</f></removeUnicodeLocaleAttribute>
		<clear public="1" set="method"><f a=""><c path="java.util.Locale_Builder"/></f></clear>
		<clearExtensions public="1" set="method"><f a=""><c path="java.util.Locale_Builder"/></f></clearExtensions>
		<build public="1" set="method"><f a=""><c path="java.util.Locale"/></f></build>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Locale$Builder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Locale_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale$1.class" module="java.util.Locale" extern="1"><meta>
	<m n=":native"><e>"java.util.Locale$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.util.function.LongConsumer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/LongConsumer.class" extern="1" interface="1">
		<accept public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></accept>
		<andThen public="1" set="method">
			<f a="param1">
				<c path="java.util.function.LongConsumer"/>
				<c path="java.util.function.LongConsumer"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</andThen>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.LongConsumer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.LongSummaryStatistics" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/LongSummaryStatistics.class" extern="1">
		<implements path="java.util.function.LongConsumer"/>
		<implements path="java.util.function.IntConsumer"/>
		<accept public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><accept public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></accept></overloads>
		</accept>
		<combine public="1" set="method"><f a="param1">
	<c path="java.util.LongSummaryStatistics"/>
	<x path="Void"/>
</f></combine>
		<getCount final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getCount>
		<getSum final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getSum>
		<getMin final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getMin>
		<getMax final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getMax>
		<getAverage final="1" public="1" set="method"><f a=""><x path="Float"/></f></getAverage>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.LongSummaryStatistics"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Optional" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Optional.class" extern="1">
		<empty public="1" params="T" set="method" static="1"><f a=""><c path="java.util.Optional"><c path="empty.T"/></c></f></empty>
		<of public="1" params="T" set="method" static="1"><f a="param1">
	<c path="of.T"/>
	<c path="java.util.Optional"><c path="of.T"/></c>
</f></of>
		<ofNullable public="1" params="T" set="method" static="1"><f a="param1">
	<c path="ofNullable.T"/>
	<c path="java.util.Optional"><c path="ofNullable.T"/></c>
</f></ofNullable>
		<get public="1" set="method"><f a=""><c path="java.util.Optional.T"/></f></get>
		<isPresent public="1" set="method"><f a=""><x path="Bool"/></f></isPresent>
		<ifPresent public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></ifPresent>
		<filter public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<c path="java.util.Optional"><c path="java.util.Optional.T"/></c>
</f></filter>
		<map public="1" params="U" set="method"><f a="param1">
	<c path="java.util.function.Function">
		<d/>
		<c path="map.U"/>
	</c>
	<c path="java.util.Optional"><c path="map.U"/></c>
</f></map>
		<flatMap public="1" params="U" set="method"><f a="param1">
	<c path="java.util.function.Function">
		<d/>
		<c path="java.util.Optional"><c path="flatMap.U"/></c>
	</c>
	<c path="java.util.Optional"><c path="flatMap.U"/></c>
</f></flatMap>
		<orElse public="1" set="method"><f a="param1">
	<c path="java.util.Optional.T"/>
	<c path="java.util.Optional.T"/>
</f></orElse>
		<orElseGet public="1" set="method"><f a="param1">
	<c path="java.util.function.Supplier"><c path="java.util.Optional.T"/></c>
	<c path="java.util.Optional.T"/>
</f></orElseGet>
		<orElseThrow public="1" params="X" set="method"><f a="param1">
	<c path="java.util.function.Supplier"><c path="orElseThrow.X"/></c>
	<c path="java.util.Optional.T"/>
</f></orElseThrow>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.util.Optional"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.OptionalDouble" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/OptionalDouble.class" extern="1">
		<empty public="1" set="method" static="1"><f a=""><c path="java.util.OptionalDouble"/></f></empty>
		<of public="1" set="method" static="1"><f a="param1">
	<x path="Float"/>
	<c path="java.util.OptionalDouble"/>
</f></of>
		<getAsDouble public="1" set="method"><f a=""><x path="Float"/></f></getAsDouble>
		<isPresent public="1" set="method"><f a=""><x path="Bool"/></f></isPresent>
		<ifPresent public="1" set="method"><f a="param1">
	<c path="java.util.function.DoubleConsumer"/>
	<x path="Void"/>
</f></ifPresent>
		<orElse public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></orElse>
		<orElseGet public="1" set="method"><f a="param1">
	<c path="java.util.function.DoubleSupplier"/>
	<x path="Float"/>
</f></orElseGet>
		<orElseThrow public="1" params="X" set="method"><f a="param1">
	<c path="java.util.function.Supplier"><c path="orElseThrow.X"/></c>
	<x path="Float"/>
</f></orElseThrow>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.util.OptionalDouble"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.OptionalInt" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/OptionalInt.class" extern="1">
		<empty public="1" set="method" static="1"><f a=""><c path="java.util.OptionalInt"/></f></empty>
		<of public="1" set="method" static="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.OptionalInt"/>
</f></of>
		<getAsInt public="1" set="method"><f a=""><x path="Int"/></f></getAsInt>
		<isPresent public="1" set="method"><f a=""><x path="Bool"/></f></isPresent>
		<ifPresent public="1" set="method"><f a="param1">
	<c path="java.util.function.IntConsumer"/>
	<x path="Void"/>
</f></ifPresent>
		<orElse public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></orElse>
		<orElseGet public="1" set="method"><f a="param1">
	<c path="java.util.function.IntSupplier"/>
	<x path="Int"/>
</f></orElseGet>
		<orElseThrow public="1" params="X" set="method"><f a="param1">
	<c path="java.util.function.Supplier"><c path="orElseThrow.X"/></c>
	<x path="Int"/>
</f></orElseThrow>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.util.OptionalInt"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.OptionalLong" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/OptionalLong.class" extern="1">
		<empty public="1" set="method" static="1"><f a=""><c path="java.util.OptionalLong"/></f></empty>
		<of public="1" set="method" static="1"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.util.OptionalLong"/>
</f></of>
		<getAsLong public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getAsLong>
		<isPresent public="1" set="method"><f a=""><x path="Bool"/></f></isPresent>
		<ifPresent public="1" set="method"><f a="param1">
	<c path="java.util.function.LongConsumer"/>
	<x path="Void"/>
</f></ifPresent>
		<orElse public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></orElse>
		<orElseGet public="1" set="method"><f a="param1">
	<c path="java.util.function.LongSupplier"/>
	<x path="haxe.Int64"/>
</f></orElseGet>
		<orElseThrow public="1" params="X" set="method"><f a="param1">
	<c path="java.util.function.Supplier"><c path="orElseThrow.X"/></c>
	<x path="haxe.Int64"/>
</f></orElseThrow>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.util.OptionalLong"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.PrimitiveIterator_OfLong" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/PrimitiveIterator$OfLong.class" module="java.util.PrimitiveIterator" extern="1" interface="1">
		<extends path="java.util.PrimitiveIterator">
			<x path="java.lang.Long"/>
			<c path="java.util.function.LongConsumer"/>
		</extends>
		<nextLong public="1" set="method"><f a=""><x path="haxe.Int64"/></f></nextLong>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.LongConsumer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads>
				<forEachRemaining public="1" set="method">
					<f a="param1">
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</forEachRemaining>
				<forEachRemaining public="1" set="method">
					<f a="param1">
						<c path="java.util.function.Consumer"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</forEachRemaining>
			</overloads>
		</forEachRemaining>
		<next public="1" set="method">
			<f a=""><x path="java.lang.Long"/></f>
			<meta><m n=":java.default"/></meta>
		</next>
		<meta>
			<m n=":native"><e>"java.util.PrimitiveIterator$OfLong"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.PrimitiveIterator_OfDouble" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/PrimitiveIterator$OfDouble.class" module="java.util.PrimitiveIterator" extern="1" interface="1">
		<extends path="java.util.PrimitiveIterator">
			<x path="java.lang.Double"/>
			<c path="java.util.function.DoubleConsumer"/>
		</extends>
		<nextDouble public="1" set="method"><f a=""><x path="Float"/></f></nextDouble>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.DoubleConsumer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads>
				<forEachRemaining public="1" set="method">
					<f a="param1">
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</forEachRemaining>
				<forEachRemaining public="1" set="method">
					<f a="param1">
						<c path="java.util.function.Consumer"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</forEachRemaining>
			</overloads>
		</forEachRemaining>
		<next public="1" set="method">
			<f a=""><x path="java.lang.Double"/></f>
			<meta><m n=":java.default"/></meta>
		</next>
		<meta>
			<m n=":native"><e>"java.util.PrimitiveIterator$OfDouble"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Properties_XmlSupport" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Properties$XmlSupport.class" module="java.util.Properties" extern="1">
		<load public="1" set="method" static="1"><f a="param1:param2">
	<c path="java.util.Properties"/>
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></load>
		<save public="1" set="method" static="1"><f a="param1:param2:param3:param4">
	<c path="java.util.Properties"/>
	<c path="java.io.OutputStream"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></save>
		<meta>
			<m n=":native"><e>"java.util.Properties$XmlSupport"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Properties_XmlSupport_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Properties$XmlSupport$1.class" module="java.util.Properties" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.sun.util.spi.XmlPropertiesProvider"/></implements>
		<run public="1" set="method"><f a=""><c path="java.sun.util.spi.XmlPropertiesProvider"/></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Properties$XmlSupport$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Properties_LineReader" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Properties$LineReader.class" module="java.util.Properties" extern="1">
		<readLine public="1" set="method"><f a=""><x path="Int"/></f></readLine>
		<inByteBuf public="1"><c path="java.NativeArray"><t path="java.types.Int8"/></c></inByteBuf>
		<inCharBuf public="1"><c path="java.NativeArray"><t path="java.types.Char16"/></c></inCharBuf>
		<lineBuf public="1"><c path="java.NativeArray"><t path="java.types.Char16"/></c></lineBuf>
		<inLimit public="1"><x path="Int"/></inLimit>
		<inOff public="1"><x path="Int"/></inOff>
		<inStream public="1"><c path="java.io.InputStream"/></inStream>
		<reader public="1"><c path="java.io.Reader"/></reader>
		<this_0 final="1" public="1">
			<c path="java.util.Properties"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Properties"/>
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Properties"/>
	<c path="java.io.Reader"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Properties$LineReader"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Random" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Random.class" extern="1">
		<implements path="java.io.Serializable"/>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<BadBound final="1" public="1" set="null" static="1"><c path="String"/></BadBound>
		<BadRange final="1" public="1" set="null" static="1"><c path="String"/></BadRange>
		<BadSize final="1" public="1" set="null" static="1"><c path="String"/></BadSize>
		<setSeed public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setSeed>
		<next public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></next>
		<nextBytes public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></nextBytes>
		<internalNextLong final="1" public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></internalNextLong>
		<internalNextInt final="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></internalNextInt>
		<internalNextDouble final="1" public="1" set="method"><f a="param1:param2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></internalNextDouble>
		<nextInt public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><nextInt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></nextInt></overloads>
		</nextInt>
		<nextLong public="1" set="method"><f a=""><x path="haxe.Int64"/></f></nextLong>
		<nextBoolean public="1" set="method"><f a=""><x path="Bool"/></f></nextBoolean>
		<nextFloat public="1" set="method"><f a=""><x path="Single"/></f></nextFloat>
		<nextDouble public="1" set="method"><f a=""><x path="Float"/></f></nextDouble>
		<nextGaussian public="1" set="method"><f a=""><x path="Float"/></f></nextGaussian>
		<ints public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.util.stream.IntStream"/>
			</f>
			<overloads>
				<ints public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.stream.IntStream"/>
</f></ints>
				<ints public="1" set="method"><f a="param1:param2:param3">
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.stream.IntStream"/>
</f></ints>
				<ints public="1" set="method"><f a=""><c path="java.util.stream.IntStream"/></f></ints>
			</overloads>
		</ints>
		<longs public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.util.stream.LongStream"/>
			</f>
			<overloads>
				<longs public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<c path="java.util.stream.LongStream"/>
</f></longs>
				<longs public="1" set="method"><f a="param1:param2:param3">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<c path="java.util.stream.LongStream"/>
</f></longs>
				<longs public="1" set="method"><f a=""><c path="java.util.stream.LongStream"/></f></longs>
			</overloads>
		</longs>
		<doubles public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.util.stream.DoubleStream"/>
			</f>
			<overloads>
				<doubles public="1" set="method"><f a="param1:param2">
	<x path="Float"/>
	<x path="Float"/>
	<c path="java.util.stream.DoubleStream"/>
</f></doubles>
				<doubles public="1" set="method"><f a="param1:param2:param3">
	<x path="haxe.Int64"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="java.util.stream.DoubleStream"/>
</f></doubles>
				<doubles public="1" set="method"><f a=""><c path="java.util.stream.DoubleStream"/></f></doubles>
			</overloads>
		</doubles>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Random"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterator_OfPrimitive" params="T:T_CONS:T_SPLITR" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterator$OfPrimitive.class" module="java.util.Spliterator" extern="1" interface="1">
		<extends path="java.util.Spliterator"><c path="java.util.Spliterator_OfPrimitive.T"/></extends>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator_OfPrimitive.T_SPLITR"/></f></trySplit>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.Spliterator_OfPrimitive.T_CONS"/>
	<x path="Bool"/>
</f></tryAdvance>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.Spliterator_OfPrimitive.T_CONS"/>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</forEachRemaining>
		<meta>
			<m n=":native"><e>"java.util.Spliterator$OfPrimitive"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterator_OfLong" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterator$OfLong.class" module="java.util.Spliterator" extern="1" interface="1">
		<extends path="java.util.Spliterator_OfPrimitive">
			<x path="java.lang.Long"/>
			<c path="java.util.function.LongConsumer"/>
			<c path="java.util.Spliterator_OfLong"/>
		</extends>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator_OfLong"/></f></trySplit>
		<tryAdvance public="1" set="method">
			<f a="param1">
				<c path="java.util.function.LongConsumer"/>
				<x path="Bool"/>
			</f>
			<overloads>
				<tryAdvance public="1" set="method">
					<f a="param1">
						<d/>
						<x path="Bool"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</tryAdvance>
				<tryAdvance public="1" set="method">
					<f a="param1">
						<c path="java.util.function.Consumer"><d/></c>
						<x path="Bool"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</tryAdvance>
			</overloads>
		</tryAdvance>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.LongConsumer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads>
				<forEachRemaining public="1" set="method">
					<f a="param1">
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</forEachRemaining>
				<forEachRemaining public="1" set="method">
					<f a="param1">
						<c path="java.util.function.Consumer"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</forEachRemaining>
			</overloads>
		</forEachRemaining>
		<meta>
			<m n=":native"><e>"java.util.Spliterator$OfLong"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Random_RandomLongsSpliterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Random$RandomLongsSpliterator.class" module="java.util.Random" extern="1">
		<implements path="java.util.Spliterator_OfLong"/>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Random_RandomLongsSpliterator"/></f></trySplit>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<tryAdvance public="1" set="method">
			<f a="param1">
				<c path="java.util.function.LongConsumer"/>
				<x path="Bool"/>
			</f>
			<overloads><tryAdvance public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></tryAdvance></overloads>
		</tryAdvance>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.LongConsumer"/>
				<x path="Void"/>
			</f>
			<overloads><forEachRemaining public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></forEachRemaining></overloads>
		</forEachRemaining>
		<rng final="1" public="1"><c path="java.util.Random"/></rng>
		<index public="1"><x path="haxe.Int64"/></index>
		<fence final="1" public="1"><x path="haxe.Int64"/></fence>
		<origin final="1" public="1"><x path="haxe.Int64"/></origin>
		<bound final="1" public="1"><x path="haxe.Int64"/></bound>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.util.Random"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Random$RandomLongsSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterator_OfInt" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterator$OfInt.class" module="java.util.Spliterator" extern="1" interface="1">
		<extends path="java.util.Spliterator_OfPrimitive">
			<x path="java.lang.Integer"/>
			<c path="java.util.function.IntConsumer"/>
			<c path="java.util.Spliterator_OfInt"/>
		</extends>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator_OfInt"/></f></trySplit>
		<tryAdvance public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntConsumer"/>
				<x path="Bool"/>
			</f>
			<overloads>
				<tryAdvance public="1" set="method">
					<f a="param1">
						<d/>
						<x path="Bool"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</tryAdvance>
				<tryAdvance public="1" set="method">
					<f a="param1">
						<c path="java.util.function.Consumer"><d/></c>
						<x path="Bool"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</tryAdvance>
			</overloads>
		</tryAdvance>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntConsumer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads>
				<forEachRemaining public="1" set="method">
					<f a="param1">
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</forEachRemaining>
				<forEachRemaining public="1" set="method">
					<f a="param1">
						<c path="java.util.function.Consumer"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</forEachRemaining>
			</overloads>
		</forEachRemaining>
		<meta>
			<m n=":native"><e>"java.util.Spliterator$OfInt"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Random_RandomIntsSpliterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Random$RandomIntsSpliterator.class" module="java.util.Random" extern="1">
		<implements path="java.util.Spliterator_OfInt"/>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Random_RandomIntsSpliterator"/></f></trySplit>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<tryAdvance public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntConsumer"/>
				<x path="Bool"/>
			</f>
			<overloads><tryAdvance public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></tryAdvance></overloads>
		</tryAdvance>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntConsumer"/>
				<x path="Void"/>
			</f>
			<overloads><forEachRemaining public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></forEachRemaining></overloads>
		</forEachRemaining>
		<rng final="1" public="1"><c path="java.util.Random"/></rng>
		<index public="1"><x path="haxe.Int64"/></index>
		<fence final="1" public="1"><x path="haxe.Int64"/></fence>
		<origin final="1" public="1"><x path="Int"/></origin>
		<bound final="1" public="1"><x path="Int"/></bound>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.util.Random"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Random$RandomIntsSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterator_OfDouble" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterator$OfDouble.class" module="java.util.Spliterator" extern="1" interface="1">
		<extends path="java.util.Spliterator_OfPrimitive">
			<x path="java.lang.Double"/>
			<c path="java.util.function.DoubleConsumer"/>
			<c path="java.util.Spliterator_OfDouble"/>
		</extends>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator_OfDouble"/></f></trySplit>
		<tryAdvance public="1" set="method">
			<f a="param1">
				<c path="java.util.function.DoubleConsumer"/>
				<x path="Bool"/>
			</f>
			<overloads>
				<tryAdvance public="1" set="method">
					<f a="param1">
						<d/>
						<x path="Bool"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</tryAdvance>
				<tryAdvance public="1" set="method">
					<f a="param1">
						<c path="java.util.function.Consumer"><d/></c>
						<x path="Bool"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</tryAdvance>
			</overloads>
		</tryAdvance>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.DoubleConsumer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads>
				<forEachRemaining public="1" set="method">
					<f a="param1">
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</forEachRemaining>
				<forEachRemaining public="1" set="method">
					<f a="param1">
						<c path="java.util.function.Consumer"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":java.default"/></meta>
				</forEachRemaining>
			</overloads>
		</forEachRemaining>
		<meta>
			<m n=":native"><e>"java.util.Spliterator$OfDouble"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Random_RandomDoublesSpliterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Random$RandomDoublesSpliterator.class" module="java.util.Random" extern="1">
		<implements path="java.util.Spliterator_OfDouble"/>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Random_RandomDoublesSpliterator"/></f></trySplit>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<tryAdvance public="1" set="method">
			<f a="param1">
				<c path="java.util.function.DoubleConsumer"/>
				<x path="Bool"/>
			</f>
			<overloads><tryAdvance public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></tryAdvance></overloads>
		</tryAdvance>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.DoubleConsumer"/>
				<x path="Void"/>
			</f>
			<overloads><forEachRemaining public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></forEachRemaining></overloads>
		</forEachRemaining>
		<rng final="1" public="1"><c path="java.util.Random"/></rng>
		<index public="1"><x path="haxe.Int64"/></index>
		<fence final="1" public="1"><x path="haxe.Int64"/></fence>
		<origin final="1" public="1"><x path="Float"/></origin>
		<bound final="1" public="1"><x path="Float"/></bound>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.util.Random"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Random$RandomDoublesSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.ServiceLoader" params="S" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ServiceLoader.class" extern="1">
		<implements path="java.lang.Iterable"><c path="java.util.ServiceLoader.S"/></implements>
		<load public="1" params="S" set="method" static="1">
			<f a="param1:param2">
				<c path="java.lang.Class"><c path="load.S"/></c>
				<c path="java.lang.ClassLoader"/>
				<c path="java.util.ServiceLoader"><c path="load.S"/></c>
			</f>
			<overloads><load public="1" params="S" set="method"><f a="param1">
	<c path="java.lang.Class"><c path="load.S"/></c>
	<c path="java.util.ServiceLoader"><c path="load.S"/></c>
</f></load></overloads>
		</load>
		<loadInstalled public="1" params="S" set="method" static="1"><f a="param1">
	<c path="java.lang.Class"><c path="loadInstalled.S"/></c>
	<c path="java.util.ServiceLoader"><c path="loadInstalled.S"/></c>
</f></loadInstalled>
		<reload public="1" set="method"><f a=""><x path="Void"/></f></reload>
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.ServiceLoader.S"/></c></f></iterator>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta>
			<m n=":native"><e>"java.util.ServiceLoader"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.ServiceLoader_LazyIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ServiceLoader$LazyIterator.class" module="java.util.ServiceLoader" extern="1">
		<implements path="java.util.Iterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<service public="1"><c path="java.lang.Class"><d/></c></service>
		<loader public="1"><c path="java.lang.ClassLoader"/></loader>
		<configs public="1"><c path="java.util.Enumeration"><c path="java.net.URL"/></c></configs>
		<pending public="1"><c path="java.util.Iterator"><c path="String"/></c></pending>
		<nextName public="1"><c path="String"/></nextName>
		<this_0 final="1" public="1">
			<c path="java.util.ServiceLoader"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.ServiceLoader"><d/></c>
	<c path="java.lang.Class"><d/></c>
	<c path="java.lang.ClassLoader"/>
	<c path="java.util.ServiceLoader_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.ServiceLoader$LazyIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.ServiceLoader_LazyIterator_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ServiceLoader$LazyIterator$2.class" module="java.util.ServiceLoader" extern="1">
		<implements path="java.security.PrivilegedAction"><d/></implements>
		<run public="1" set="method"><f a=""><d/></f></run>
		<this_1 final="1" public="1">
			<c path="java.util.ServiceLoader_LazyIterator"/>
			<meta><m n=":native"><e>"this$1"</e></m></meta>
		</this_1>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.ServiceLoader_LazyIterator"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.ServiceLoader$LazyIterator$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.ServiceLoader_LazyIterator_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ServiceLoader$LazyIterator$1.class" module="java.util.ServiceLoader" extern="1">
		<implements path="java.security.PrivilegedAction"><x path="java.lang.Boolean"/></implements>
		<run public="1" set="method"><f a=""><x path="java.lang.Boolean"/></f></run>
		<this_1 final="1" public="1">
			<c path="java.util.ServiceLoader_LazyIterator"/>
			<meta><m n=":native"><e>"this$1"</e></m></meta>
		</this_1>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.ServiceLoader_LazyIterator"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.ServiceLoader$LazyIterator$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.ServiceLoader_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ServiceLoader$1.class" module="java.util.ServiceLoader" extern="1">
		<implements path="java.util.Iterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<knownProviders public="1"><c path="java.util.Iterator"><c path="java.util.Map_Entry">
	<c path="String"/>
	<d/>
</c></c></knownProviders>
		<this_0 final="1" public="1">
			<c path="java.util.ServiceLoader"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.ServiceLoader"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.ServiceLoader$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.SimpleTimeZone" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/SimpleTimeZone.class" extern="1">
		<extends path="java.util.TimeZone"/>
		<WALL_TIME final="1" public="1" set="null" static="1"><x path="Int"/></WALL_TIME>
		<STANDARD_TIME final="1" public="1" set="null" static="1"><x path="Int"/></STANDARD_TIME>
		<UTC_TIME final="1" public="1" set="null" static="1"><x path="Int"/></UTC_TIME>
		<serialVersionUID final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></serialVersionUID>
		<currentSerialVersion final="1" public="1" set="null" static="1"><x path="Int"/></currentSerialVersion>
		<setStartYear public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setStartYear>
		<setStartRule public="1" set="method">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<setStartRule public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setStartRule>
				<setStartRule public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setStartRule>
			</overloads>
		</setStartRule>
		<setEndRule public="1" set="method">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<setEndRule public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setEndRule>
				<setEndRule public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setEndRule>
			</overloads>
		</setEndRule>
		<getOffset public="1" set="method" override="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<overloads><getOffset public="1" set="method"><f a="param1:param2:param3:param4:param5:param6">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getOffset></overloads>
		</getOffset>
		<getOffsets public="1" set="method" override="1"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
</f></getOffsets>
		<getRawOffset public="1" set="method" override="1"><f a=""><x path="Int"/></f></getRawOffset>
		<setRawOffset public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setRawOffset>
		<setDSTSavings public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setDSTSavings>
		<getDSTSavings public="1" set="method" override="1"><f a=""><x path="Int"/></f></getDSTSavings>
		<useDaylightTime public="1" set="method" override="1"><f a=""><x path="Bool"/></f></useDaylightTime>
		<observesDaylightTime public="1" set="method" override="1"><f a=""><x path="Bool"/></f></observesDaylightTime>
		<inDaylightTime public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Date"/>
	<x path="Bool"/>
</f></inDaylightTime>
		<clone public="1" set="method" override="1"><f a=""><d/></f></clone>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hasSameRules public="1" set="method" override="1"><f a="param1">
	<c path="java.util.TimeZone"/>
	<x path="Bool"/>
</f></hasSameRules>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8:param9:param10:param11:param12:param13">
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8:param9:param10:param11">
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7:param8:param9:param10">
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.SimpleTimeZone"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_IteratorSpliterator" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$IteratorSpliterator.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.Spliterator"><c path="java.util.Spliterators_IteratorSpliterator.T"/></implements>
		<BATCH_UNIT final="1" public="1" set="null" static="1"><x path="Int"/></BATCH_UNIT>
		<MAX_BATCH final="1" public="1" set="null" static="1"><x path="Int"/></MAX_BATCH>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Spliterators_IteratorSpliterator.T"/></c></f></trySplit>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<getComparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></getComparator>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Collection"><c path="java.util.Spliterators_IteratorSpliterator.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Iterator"><c path="java.util.Spliterators_IteratorSpliterator.T"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.Iterator"><c path="java.util.Spliterators_IteratorSpliterator.T"/></c>
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$IteratorSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.SortedSet_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/SortedSet$1.class" module="java.util.SortedSet" extern="1">
		<extends path="java.util.Spliterators_IteratorSpliterator"><d/></extends>
		<getComparator public="1" set="method" override="1"><f a=""><c path="java.util.Comparator"><d/></c></f></getComparator>
		<this_0 final="1" public="1">
			<c path="java.util.SortedSet"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.SortedSet"><d/></c>
	<c path="java.util.Collection"><d/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.SortedSet$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators.class" extern="1">
		<emptySpliterator public="1" params="T" set="method" static="1"><f a=""><c path="java.util.Spliterator"><c path="emptySpliterator.T"/></c></f></emptySpliterator>
		<emptyIntSpliterator public="1" set="method" static="1"><f a=""><c path="java.util.Spliterator_OfInt"/></f></emptyIntSpliterator>
		<emptyLongSpliterator public="1" set="method" static="1"><f a=""><c path="java.util.Spliterator_OfLong"/></f></emptyLongSpliterator>
		<emptyDoubleSpliterator public="1" set="method" static="1"><f a=""><c path="java.util.Spliterator_OfDouble"/></f></emptyDoubleSpliterator>
		<spliterator public="1" params="T" set="method" static="1">
			<f a="param1:param2">
				<c path="java.NativeArray"><d/></c>
				<x path="Int"/>
				<c path="java.util.Spliterator"><c path="spliterator.T"/></c>
			</f>
			<overloads>
				<spliterator public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.PrimitiveIterator_OfDouble"/>
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfDouble"/>
</f></spliterator>
				<spliterator public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.PrimitiveIterator_OfLong"/>
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfLong"/>
</f></spliterator>
				<spliterator public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.PrimitiveIterator_OfInt"/>
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfInt"/>
</f></spliterator>
				<spliterator public="1" params="T" set="method"><f a="param1:param2:param3">
	<c path="java.util.Iterator"><c path="spliterator.T"/></c>
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<c path="java.util.Spliterator"><c path="spliterator.T"/></c>
</f></spliterator>
				<spliterator public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.util.Collection"><c path="spliterator.T"/></c>
	<x path="Int"/>
	<c path="java.util.Spliterator"><c path="spliterator.T"/></c>
</f></spliterator>
				<spliterator public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfDouble"/>
</f></spliterator>
				<spliterator public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfDouble"/>
</f></spliterator>
				<spliterator public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfLong"/>
</f></spliterator>
				<spliterator public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfLong"/>
</f></spliterator>
				<spliterator public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfInt"/>
</f></spliterator>
				<spliterator public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfInt"/>
</f></spliterator>
				<spliterator public="1" params="T" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.Spliterator"><c path="spliterator.T"/></c>
</f></spliterator>
			</overloads>
		</spliterator>
		<spliteratorUnknownSize public="1" params="T" set="method" static="1">
			<f a="param1:param2">
				<c path="java.util.Iterator"><c path="spliteratorUnknownSize.T"/></c>
				<x path="Int"/>
				<c path="java.util.Spliterator"><c path="spliteratorUnknownSize.T"/></c>
			</f>
			<overloads>
				<spliteratorUnknownSize public="1" set="method"><f a="param1:param2">
	<c path="java.util.PrimitiveIterator_OfDouble"/>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfDouble"/>
</f></spliteratorUnknownSize>
				<spliteratorUnknownSize public="1" set="method"><f a="param1:param2">
	<c path="java.util.PrimitiveIterator_OfLong"/>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfLong"/>
</f></spliteratorUnknownSize>
				<spliteratorUnknownSize public="1" set="method"><f a="param1:param2">
	<c path="java.util.PrimitiveIterator_OfInt"/>
	<x path="Int"/>
	<c path="java.util.Spliterator_OfInt"/>
</f></spliteratorUnknownSize>
			</overloads>
		</spliteratorUnknownSize>
		<iterator public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.Spliterator"><c path="iterator.T"/></c>
				<c path="java.util.Iterator"><c path="iterator.T"/></c>
			</f>
			<overloads>
				<iterator public="1" set="method"><f a="param1">
	<c path="java.util.Spliterator_OfDouble"/>
	<c path="java.util.PrimitiveIterator_OfDouble"/>
</f></iterator>
				<iterator public="1" set="method"><f a="param1">
	<c path="java.util.Spliterator_OfLong"/>
	<c path="java.util.PrimitiveIterator_OfLong"/>
</f></iterator>
				<iterator public="1" set="method"><f a="param1">
	<c path="java.util.Spliterator_OfInt"/>
	<c path="java.util.PrimitiveIterator_OfInt"/>
</f></iterator>
			</overloads>
		</iterator>
		<meta>
			<m n=":native"><e>"java.util.Spliterators"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_LongIteratorSpliterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$LongIteratorSpliterator.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.Spliterator_OfLong"/>
		<BATCH_UNIT final="1" public="1" set="null" static="1"><x path="Int"/></BATCH_UNIT>
		<MAX_BATCH final="1" public="1" set="null" static="1"><x path="Int"/></MAX_BATCH>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator_OfLong"/></f></trySplit>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.LongConsumer"/>
				<x path="Void"/>
			</f>
			<overloads><forEachRemaining public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></forEachRemaining></overloads>
		</forEachRemaining>
		<tryAdvance public="1" set="method">
			<f a="param1">
				<c path="java.util.function.LongConsumer"/>
				<x path="Bool"/>
			</f>
			<overloads><tryAdvance public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></tryAdvance></overloads>
		</tryAdvance>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<getComparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></getComparator>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.PrimitiveIterator_OfLong"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.PrimitiveIterator_OfLong"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$LongIteratorSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_LongArraySpliterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$LongArraySpliterator.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.Spliterator_OfLong"/>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator_OfLong"/></f></trySplit>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.LongConsumer"/>
				<x path="Void"/>
			</f>
			<overloads><forEachRemaining public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></forEachRemaining></overloads>
		</forEachRemaining>
		<tryAdvance public="1" set="method">
			<f a="param1">
				<c path="java.util.function.LongConsumer"/>
				<x path="Bool"/>
			</f>
			<overloads><tryAdvance public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></tryAdvance></overloads>
		</tryAdvance>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<getComparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></getComparator>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$LongArraySpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_IntIteratorSpliterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$IntIteratorSpliterator.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.Spliterator_OfInt"/>
		<BATCH_UNIT final="1" public="1" set="null" static="1"><x path="Int"/></BATCH_UNIT>
		<MAX_BATCH final="1" public="1" set="null" static="1"><x path="Int"/></MAX_BATCH>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator_OfInt"/></f></trySplit>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntConsumer"/>
				<x path="Void"/>
			</f>
			<overloads><forEachRemaining public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></forEachRemaining></overloads>
		</forEachRemaining>
		<tryAdvance public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntConsumer"/>
				<x path="Bool"/>
			</f>
			<overloads><tryAdvance public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></tryAdvance></overloads>
		</tryAdvance>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<getComparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></getComparator>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.PrimitiveIterator_OfInt"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.PrimitiveIterator_OfInt"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$IntIteratorSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_IntArraySpliterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$IntArraySpliterator.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.Spliterator_OfInt"/>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator_OfInt"/></f></trySplit>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntConsumer"/>
				<x path="Void"/>
			</f>
			<overloads><forEachRemaining public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></forEachRemaining></overloads>
		</forEachRemaining>
		<tryAdvance public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntConsumer"/>
				<x path="Bool"/>
			</f>
			<overloads><tryAdvance public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></tryAdvance></overloads>
		</tryAdvance>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<getComparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></getComparator>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.NativeArray"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$IntArraySpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_EmptySpliterator" params="T:S:C" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$EmptySpliterator.class" module="java.util.Spliterators" extern="1" abstract="1">
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterators_EmptySpliterator.S"/></f></trySplit>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.Spliterators_EmptySpliterator.C"/>
	<x path="Bool"/>
</f></tryAdvance>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.Spliterators_EmptySpliterator.C"/>
	<x path="Void"/>
</f></forEachRemaining>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$EmptySpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_EmptySpliterator_OfRef" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$EmptySpliterator$OfRef.class" module="java.util.Spliterators" extern="1">
		<extends path="java.util.Spliterators_EmptySpliterator">
			<c path="java.util.Spliterators_EmptySpliterator_OfRef.T"/>
			<c path="java.util.Spliterator"><c path="java.util.Spliterators_EmptySpliterator_OfRef.T"/></c>
			<c path="java.util.function.Consumer"><d/></c>
		</extends>
		<implements path="java.util.Spliterator"><c path="java.util.Spliterators_EmptySpliterator_OfRef.T"/></implements>
		<forEachRemaining public="1" set="method" override="1"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<tryAdvance public="1" set="method" override="1"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$EmptySpliterator$OfRef"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_EmptySpliterator_OfLong" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$EmptySpliterator$OfLong.class" module="java.util.Spliterators" extern="1">
		<extends path="java.util.Spliterators_EmptySpliterator">
			<x path="java.lang.Long"/>
			<c path="java.util.Spliterator_OfLong"/>
			<c path="java.util.function.LongConsumer"/>
		</extends>
		<implements path="java.util.Spliterator_OfLong"/>
		<forEachRemaining public="1" set="method" override="1"><f a="param1">
	<c path="java.util.function.LongConsumer"/>
	<x path="Void"/>
</f></forEachRemaining>
		<tryAdvance public="1" set="method" override="1"><f a="param1">
	<c path="java.util.function.LongConsumer"/>
	<x path="Bool"/>
</f></tryAdvance>
		<trySplit public="1" set="method" override="1"><f a=""><c path="java.util.Spliterator_OfLong"/></f></trySplit>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$EmptySpliterator$OfLong"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_EmptySpliterator_OfInt" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$EmptySpliterator$OfInt.class" module="java.util.Spliterators" extern="1">
		<extends path="java.util.Spliterators_EmptySpliterator">
			<x path="java.lang.Integer"/>
			<c path="java.util.Spliterator_OfInt"/>
			<c path="java.util.function.IntConsumer"/>
		</extends>
		<implements path="java.util.Spliterator_OfInt"/>
		<forEachRemaining public="1" set="method" override="1"><f a="param1">
	<c path="java.util.function.IntConsumer"/>
	<x path="Void"/>
</f></forEachRemaining>
		<tryAdvance public="1" set="method" override="1"><f a="param1">
	<c path="java.util.function.IntConsumer"/>
	<x path="Bool"/>
</f></tryAdvance>
		<trySplit public="1" set="method" override="1"><f a=""><c path="java.util.Spliterator_OfInt"/></f></trySplit>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$EmptySpliterator$OfInt"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_EmptySpliterator_OfDouble" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$EmptySpliterator$OfDouble.class" module="java.util.Spliterators" extern="1">
		<extends path="java.util.Spliterators_EmptySpliterator">
			<x path="java.lang.Double"/>
			<c path="java.util.Spliterator_OfDouble"/>
			<c path="java.util.function.DoubleConsumer"/>
		</extends>
		<implements path="java.util.Spliterator_OfDouble"/>
		<forEachRemaining public="1" set="method" override="1"><f a="param1">
	<c path="java.util.function.DoubleConsumer"/>
	<x path="Void"/>
</f></forEachRemaining>
		<tryAdvance public="1" set="method" override="1"><f a="param1">
	<c path="java.util.function.DoubleConsumer"/>
	<x path="Bool"/>
</f></tryAdvance>
		<trySplit public="1" set="method" override="1"><f a=""><c path="java.util.Spliterator_OfDouble"/></f></trySplit>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$EmptySpliterator$OfDouble"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_DoubleIteratorSpliterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$DoubleIteratorSpliterator.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.Spliterator_OfDouble"/>
		<BATCH_UNIT final="1" public="1" set="null" static="1"><x path="Int"/></BATCH_UNIT>
		<MAX_BATCH final="1" public="1" set="null" static="1"><x path="Int"/></MAX_BATCH>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator_OfDouble"/></f></trySplit>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.DoubleConsumer"/>
				<x path="Void"/>
			</f>
			<overloads><forEachRemaining public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></forEachRemaining></overloads>
		</forEachRemaining>
		<tryAdvance public="1" set="method">
			<f a="param1">
				<c path="java.util.function.DoubleConsumer"/>
				<x path="Bool"/>
			</f>
			<overloads><tryAdvance public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></tryAdvance></overloads>
		</tryAdvance>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<getComparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></getComparator>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.PrimitiveIterator_OfDouble"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.PrimitiveIterator_OfDouble"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$DoubleIteratorSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_DoubleArraySpliterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$DoubleArraySpliterator.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.Spliterator_OfDouble"/>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator_OfDouble"/></f></trySplit>
		<forEachRemaining public="1" set="method">
			<f a="param1">
				<c path="java.util.function.DoubleConsumer"/>
				<x path="Void"/>
			</f>
			<overloads><forEachRemaining public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></forEachRemaining></overloads>
		</forEachRemaining>
		<tryAdvance public="1" set="method">
			<f a="param1">
				<c path="java.util.function.DoubleConsumer"/>
				<x path="Bool"/>
			</f>
			<overloads><tryAdvance public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></tryAdvance></overloads>
		</tryAdvance>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<getComparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></getComparator>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.NativeArray"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$DoubleArraySpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_ArraySpliterator" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$ArraySpliterator.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.Spliterator"><c path="java.util.Spliterators_ArraySpliterator.T"/></implements>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Spliterators_ArraySpliterator.T"/></c></f></trySplit>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<getComparator public="1" set="method"><f a=""><c path="java.util.Comparator"><d/></c></f></getComparator>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.NativeArray"><d/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$ArraySpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_AbstractSpliterator" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$AbstractSpliterator.class" module="java.util.Spliterators" extern="1" abstract="1">
		<implements path="java.util.Spliterator"><c path="java.util.Spliterators_AbstractSpliterator.T"/></implements>
		<BATCH_UNIT final="1" public="1" set="null" static="1"><x path="Int"/></BATCH_UNIT>
		<MAX_BATCH final="1" public="1" set="null" static="1"><x path="Int"/></MAX_BATCH>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Spliterators_AbstractSpliterator.T"/></c></f></trySplit>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<new public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$AbstractSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.Consumer" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/Consumer.class" extern="1" interface="1">
		<accept public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer.T"/>
	<x path="Void"/>
</f></accept>
		<andThen public="1" set="method">
			<f a="param1">
				<c path="java.util.function.Consumer"><d/></c>
				<c path="java.util.function.Consumer"><c path="java.util.function.Consumer.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</andThen>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.Consumer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_AbstractSpliterator_HoldingConsumer" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$AbstractSpliterator$HoldingConsumer.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.function.Consumer"><c path="java.util.Spliterators_AbstractSpliterator_HoldingConsumer.T"/></implements>
		<accept public="1" set="method"><f a="param1">
	<c path="java.util.Spliterators_AbstractSpliterator_HoldingConsumer.T"/>
	<x path="Void"/>
</f></accept>
		<value public="1"><d/></value>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$AbstractSpliterator$HoldingConsumer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_AbstractLongSpliterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$AbstractLongSpliterator.class" module="java.util.Spliterators" extern="1" abstract="1">
		<implements path="java.util.Spliterator_OfLong"/>
		<MAX_BATCH final="1" public="1" set="null" static="1"><x path="Int"/></MAX_BATCH>
		<BATCH_UNIT final="1" public="1" set="null" static="1"><x path="Int"/></BATCH_UNIT>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator_OfLong"/></f></trySplit>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<new public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$AbstractLongSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_AbstractLongSpliterator_HoldingLongConsumer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$AbstractLongSpliterator$HoldingLongConsumer.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.function.LongConsumer"/>
		<accept public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></accept>
		<value public="1"><x path="haxe.Int64"/></value>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$AbstractLongSpliterator$HoldingLongConsumer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_AbstractIntSpliterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$AbstractIntSpliterator.class" module="java.util.Spliterators" extern="1" abstract="1">
		<implements path="java.util.Spliterator_OfInt"/>
		<MAX_BATCH final="1" public="1" set="null" static="1"><x path="Int"/></MAX_BATCH>
		<BATCH_UNIT final="1" public="1" set="null" static="1"><x path="Int"/></BATCH_UNIT>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator_OfInt"/></f></trySplit>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<new public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$AbstractIntSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_AbstractIntSpliterator_HoldingIntConsumer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$AbstractIntSpliterator$HoldingIntConsumer.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.function.IntConsumer"/>
		<accept public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></accept>
		<value public="1"><x path="Int"/></value>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$AbstractIntSpliterator$HoldingIntConsumer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_AbstractDoubleSpliterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$AbstractDoubleSpliterator.class" module="java.util.Spliterators" extern="1" abstract="1">
		<implements path="java.util.Spliterator_OfDouble"/>
		<MAX_BATCH final="1" public="1" set="null" static="1"><x path="Int"/></MAX_BATCH>
		<BATCH_UNIT final="1" public="1" set="null" static="1"><x path="Int"/></BATCH_UNIT>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator_OfDouble"/></f></trySplit>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<new public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$AbstractDoubleSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_AbstractDoubleSpliterator_HoldingDoubleConsumer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$AbstractDoubleSpliterator$HoldingDoubleConsumer.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.function.DoubleConsumer"/>
		<accept public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></accept>
		<value public="1"><x path="Float"/></value>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$AbstractDoubleSpliterator$HoldingDoubleConsumer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_4Adapter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$4Adapter.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.PrimitiveIterator_OfDouble"/>
		<implements path="java.util.function.DoubleConsumer"/>
		<accept public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></accept>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<nextDouble public="1" set="method"><f a=""><x path="Float"/></f></nextDouble>
		<valueReady public="1"><x path="Bool"/></valueReady>
		<nextElement public="1"><x path="Float"/></nextElement>
		<val_spliterator final="1" public="1">
			<c path="java.util.Spliterator_OfDouble"/>
			<meta><m n=":native"><e>"val$spliterator"</e></m></meta>
		</val_spliterator>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$4Adapter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_3Adapter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$3Adapter.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.PrimitiveIterator_OfLong"/>
		<implements path="java.util.function.LongConsumer"/>
		<accept public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></accept>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<nextLong public="1" set="method"><f a=""><x path="haxe.Int64"/></f></nextLong>
		<valueReady public="1"><x path="Bool"/></valueReady>
		<nextElement public="1"><x path="haxe.Int64"/></nextElement>
		<val_spliterator final="1" public="1">
			<c path="java.util.Spliterator_OfLong"/>
			<meta><m n=":native"><e>"val$spliterator"</e></m></meta>
		</val_spliterator>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$3Adapter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_2Adapter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$2Adapter.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.PrimitiveIterator_OfInt"/>
		<implements path="java.util.function.IntConsumer"/>
		<accept public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></accept>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<nextInt public="1" set="method"><f a=""><x path="Int"/></f></nextInt>
		<valueReady public="1"><x path="Bool"/></valueReady>
		<nextElement public="1"><x path="Int"/></nextElement>
		<val_spliterator final="1" public="1">
			<c path="java.util.Spliterator_OfInt"/>
			<meta><m n=":native"><e>"val$spliterator"</e></m></meta>
		</val_spliterator>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$2Adapter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Spliterators_1Adapter" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Spliterators$1Adapter.class" module="java.util.Spliterators" extern="1">
		<implements path="java.util.function.Consumer"><d/></implements>
		<implements path="java.util.Iterator"><d/></implements>
		<accept public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></accept>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<valueReady public="1"><x path="Bool"/></valueReady>
		<nextElement public="1"><d/></nextElement>
		<val_spliterator final="1" public="1">
			<c path="java.util.Spliterator"><d/></c>
			<meta><m n=":native"><e>"val$spliterator"</e></m></meta>
		</val_spliterator>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Spliterators$1Adapter"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Vector" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Vector.class" extern="1">
		<extends path="java.util.AbstractList"><c path="java.util.Vector.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Cloneable"/>
		<implements path="java.util.RandomAccess"/>
		<implements path="java.util.List"><c path="java.util.Vector.E"/></implements>
		<copyInto public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><d/></c>
	<x path="Void"/>
</f></copyInto>
		<trimToSize public="1" set="method"><f a=""><x path="Void"/></f></trimToSize>
		<ensureCapacity public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></ensureCapacity>
		<setSize public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setSize>
		<capacity public="1" set="method"><f a=""><x path="Int"/></f></capacity>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isEmpty>
		<elements public="1" set="method"><f a=""><c path="java.util.Enumeration"><c path="java.util.Vector.E"/></c></f></elements>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<indexOf public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<overloads><indexOf public="1" set="method"><f a="param1:param2">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf></overloads>
		</indexOf>
		<lastIndexOf public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<overloads><lastIndexOf public="1" set="method"><f a="param1:param2">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf></overloads>
		</lastIndexOf>
		<elementAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.Vector.E"/>
</f></elementAt>
		<firstElement public="1" set="method"><f a=""><c path="java.util.Vector.E"/></f></firstElement>
		<lastElement public="1" set="method"><f a=""><c path="java.util.Vector.E"/></f></lastElement>
		<setElementAt public="1" set="method"><f a="param1:param2">
	<c path="java.util.Vector.E"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setElementAt>
		<removeElementAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></removeElementAt>
		<insertElementAt public="1" set="method"><f a="param1:param2">
	<c path="java.util.Vector.E"/>
	<x path="Int"/>
	<x path="Void"/>
</f></insertElementAt>
		<addElement public="1" set="method"><f a="param1">
	<c path="java.util.Vector.E"/>
	<x path="Void"/>
</f></addElement>
		<removeElement public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></removeElement>
		<removeAllElements public="1" set="method"><f a=""><x path="Void"/></f></removeAllElements>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<toArray public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<elementData public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.Vector.E"/>
</f></elementData>
		<get public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<c path="java.util.Vector.E"/>
</f></get>
		<set public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Vector.E"/>
	<c path="java.util.Vector.E"/>
</f></set>
		<add public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Vector.E"/>
				<x path="Bool"/>
			</f>
			<overloads><add public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Vector.E"/>
	<x path="Void"/>
</f></add></overloads>
		</add>
		<remove public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<overloads><remove public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.Vector.E"/>
</f></remove></overloads>
		</remove>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<containsAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></containsAll>
		<addAll public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Collection"><c path="java.util.Vector.E"/></c>
				<x path="Bool"/>
			</f>
			<overloads><addAll public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.Collection"><c path="java.util.Vector.E"/></c>
	<x path="Bool"/>
</f></addAll></overloads>
		</addAll>
		<removeAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></removeAll>
		<retainAll public="1" set="method" override="1"><f a="param1">
	<c path="java.util.Collection"><d/></c>
	<x path="Bool"/>
</f></retainAll>
		<equals public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method" override="1"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method" override="1"><f a=""><c path="String"/></f></toString>
		<subList public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.List"><c path="java.util.Vector.E"/></c>
</f></subList>
		<removeRange public="1" set="method" override="1"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeRange>
		<listIterator public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.util.ListIterator"><c path="java.util.Vector.E"/></c>
			</f>
			<overloads><listIterator public="1" set="method"><f a=""><c path="java.util.ListIterator"><c path="java.util.Vector.E"/></c></f></listIterator></overloads>
		</listIterator>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.Vector.E"/></c></f></iterator>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<removeIf public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<x path="Bool"/>
</f></removeIf>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="java.util.function.UnaryOperator"><c path="java.util.Vector.E"/></c>
	<x path="Void"/>
</f></replaceAll>
		<sort public="1" set="method"><f a="param1">
	<c path="java.util.Comparator"><d/></c>
	<x path="Void"/>
</f></sort>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Vector.E"/></c></f></spliterator>
		<elementCount public="1"><x path="Int"/></elementCount>
		<capacityIncrement public="1"><x path="Int"/></capacityIncrement>
		<new public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><c path="java.util.Vector.E"/></c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a=""><x path="Void"/></f></new>
				<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.Vector"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Stack" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Stack.class" extern="1">
		<extends path="java.util.Vector"><c path="java.util.Stack.E"/></extends>
		<push public="1" set="method"><f a="param1">
	<c path="java.util.Stack.E"/>
	<c path="java.util.Stack.E"/>
</f></push>
		<pop public="1" set="method"><f a=""><c path="java.util.Stack.E"/></f></pop>
		<peek public="1" set="method"><f a=""><c path="java.util.Stack.E"/></f></peek>
		<empty public="1" set="method"><f a=""><x path="Bool"/></f></empty>
		<search public="1" set="method"><f a="param1">
	<d/>
	<x path="Int"/>
</f></search>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.Stack"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.TimeZone_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/TimeZone$1.class" module="java.util.TimeZone" extern="1">
		<implements path="java.security.PrivilegedAction"><c path="java.lang.Void"/></implements>
		<run public="1" set="method"><f a=""><c path="java.lang.Void"/></f></run>
		<val_id final="1" public="1">
			<c path="String"/>
			<meta><m n=":native"><e>"val$id"</e></m></meta>
		</val_id>
		<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.TimeZone$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Vector_VectorSpliterator" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Vector$VectorSpliterator.class" module="java.util.Vector" extern="1">
		<implements path="java.util.Spliterator"><c path="java.util.Vector_VectorSpliterator.E"/></implements>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Vector_VectorSpliterator.E"/></c></f></trySplit>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.util.Vector"><c path="java.util.Vector_VectorSpliterator.E"/></c>
	<c path="java.NativeArray"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Vector$VectorSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Vector_Itr" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Vector$Itr.class" module="java.util.Vector" extern="1">
		<implements path="java.util.Iterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<checkForComodification final="1" public="1" set="method"><f a=""><x path="Void"/></f></checkForComodification>
		<cursor public="1"><x path="Int"/></cursor>
		<lastRet public="1"><x path="Int"/></lastRet>
		<expectedModCount public="1"><x path="Int"/></expectedModCount>
		<this_0 final="1" public="1">
			<c path="java.util.Vector"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Vector"><d/></c>
	<c path="java.util.Vector_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Vector$Itr"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Vector_ListItr" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Vector$ListItr.class" module="java.util.Vector" extern="1">
		<extends path="java.util.Vector_Itr"/>
		<implements path="java.util.ListIterator"><d/></implements>
		<hasPrevious public="1" set="method"><f a=""><x path="Bool"/></f></hasPrevious>
		<nextIndex public="1" set="method"><f a=""><x path="Int"/></f></nextIndex>
		<previousIndex public="1" set="method"><f a=""><x path="Int"/></f></previousIndex>
		<previous public="1" set="method"><f a=""><d/></f></previous>
		<set public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></set>
		<add public="1" set="method"><f a="param1">
	<d/>
	<x path="Void"/>
</f></add>
		<this_0 final="1" public="1" override="1">
			<c path="java.util.Vector"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.Vector"><d/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Vector$ListItr"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.Vector_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Vector$1.class" module="java.util.Vector" extern="1">
		<implements path="java.util.Enumeration"><d/></implements>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<nextElement public="1" set="method"><f a=""><d/></f></nextElement>
		<count public="1"><x path="Int"/></count>
		<this_0 final="1" public="1">
			<c path="java.util.Vector"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.Vector"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.Vector$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.WeakHashMap_WeakHashMapSpliterator" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/WeakHashMap$WeakHashMapSpliterator.class" module="java.util.WeakHashMap" extern="1">
		<getFence final="1" public="1" set="method"><f a=""><x path="Int"/></f></getFence>
		<estimateSize final="1" public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<map final="1" public="1"><c path="java.util.WeakHashMap">
	<c path="java.util.WeakHashMap_WeakHashMapSpliterator.K"/>
	<c path="java.util.WeakHashMap_WeakHashMapSpliterator.V"/>
</c></map>
		<current public="1"><c path="java.util.WeakHashMap_Entry">
	<c path="java.util.WeakHashMap_WeakHashMapSpliterator.K"/>
	<c path="java.util.WeakHashMap_WeakHashMapSpliterator.V"/>
</c></current>
		<index public="1"><x path="Int"/></index>
		<fence public="1"><x path="Int"/></fence>
		<est public="1"><x path="Int"/></est>
		<expectedModCount public="1"><x path="Int"/></expectedModCount>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.util.WeakHashMap">
		<c path="java.util.WeakHashMap_WeakHashMapSpliterator.K"/>
		<c path="java.util.WeakHashMap_WeakHashMapSpliterator.V"/>
	</c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.WeakHashMap$WeakHashMapSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.WeakHashMap_ValueSpliterator" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/WeakHashMap$ValueSpliterator.class" module="java.util.WeakHashMap" extern="1">
		<extends path="java.util.WeakHashMap_WeakHashMapSpliterator">
			<c path="java.util.WeakHashMap_ValueSpliterator.K"/>
			<c path="java.util.WeakHashMap_ValueSpliterator.V"/>
		</extends>
		<implements path="java.util.Spliterator"><c path="java.util.WeakHashMap_ValueSpliterator.V"/></implements>
		<trySplit public="1" set="method"><f a=""><c path="java.util.WeakHashMap_ValueSpliterator">
	<c path="java.util.WeakHashMap_ValueSpliterator.K"/>
	<c path="java.util.WeakHashMap_ValueSpliterator.V"/>
</c></f></trySplit>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.util.WeakHashMap">
		<c path="java.util.WeakHashMap_ValueSpliterator.K"/>
		<c path="java.util.WeakHashMap_ValueSpliterator.V"/>
	</c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.WeakHashMap$ValueSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.WeakHashMap_Values" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/WeakHashMap$Values.class" module="java.util.WeakHashMap" extern="1">
		<extends path="java.util.AbstractCollection"><d/></extends>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><d/></c></f></iterator>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><d/></c></f></spliterator>
		<this_0 final="1" public="1">
			<c path="java.util.WeakHashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.WeakHashMap">
		<d/>
		<d/>
	</c>
	<c path="java.util.WeakHashMap_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.WeakHashMap$Values"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.WeakHashMap_HashIterator" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/WeakHashMap$HashIterator.class" module="java.util.WeakHashMap" extern="1" abstract="1">
		<implements path="java.util.Iterator"><c path="java.util.WeakHashMap_HashIterator.T"/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<nextEntry public="1" set="method"><f a=""><c path="java.util.WeakHashMap_Entry">
	<d/>
	<d/>
</c></f></nextEntry>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<this_0 final="1" public="1">
			<c path="java.util.WeakHashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.WeakHashMap">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.WeakHashMap$HashIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.WeakHashMap_ValueIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/WeakHashMap$ValueIterator.class" module="java.util.WeakHashMap" extern="1">
		<extends path="java.util.WeakHashMap_HashIterator"><d/></extends>
		<next public="1" set="method"><f a=""><d/></f></next>
		<this_0 final="1" public="1" override="1">
			<c path="java.util.WeakHashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.WeakHashMap">
		<d/>
		<d/>
	</c>
	<c path="java.util.WeakHashMap_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.WeakHashMap$ValueIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.WeakHashMap_KeySpliterator" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/WeakHashMap$KeySpliterator.class" module="java.util.WeakHashMap" extern="1">
		<extends path="java.util.WeakHashMap_WeakHashMapSpliterator">
			<c path="java.util.WeakHashMap_KeySpliterator.K"/>
			<c path="java.util.WeakHashMap_KeySpliterator.V"/>
		</extends>
		<implements path="java.util.Spliterator"><c path="java.util.WeakHashMap_KeySpliterator.K"/></implements>
		<trySplit public="1" set="method"><f a=""><c path="java.util.WeakHashMap_KeySpliterator">
	<c path="java.util.WeakHashMap_KeySpliterator.K"/>
	<c path="java.util.WeakHashMap_KeySpliterator.V"/>
</c></f></trySplit>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.util.WeakHashMap">
		<c path="java.util.WeakHashMap_KeySpliterator.K"/>
		<c path="java.util.WeakHashMap_KeySpliterator.V"/>
	</c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.WeakHashMap$KeySpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.WeakHashMap_KeySet" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/WeakHashMap$KeySet.class" module="java.util.WeakHashMap" extern="1">
		<extends path="java.util.AbstractSet"><d/></extends>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><d/></c></f></iterator>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<remove public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><d/></c></f></spliterator>
		<this_0 final="1" public="1">
			<c path="java.util.WeakHashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.WeakHashMap">
		<d/>
		<d/>
	</c>
	<c path="java.util.WeakHashMap_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.WeakHashMap$KeySet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.WeakHashMap_KeyIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/WeakHashMap$KeyIterator.class" module="java.util.WeakHashMap" extern="1">
		<extends path="java.util.WeakHashMap_HashIterator"><d/></extends>
		<next public="1" set="method"><f a=""><d/></f></next>
		<this_0 final="1" public="1" override="1">
			<c path="java.util.WeakHashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.WeakHashMap">
		<d/>
		<d/>
	</c>
	<c path="java.util.WeakHashMap_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.WeakHashMap$KeyIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.WeakHashMap_EntrySpliterator" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/WeakHashMap$EntrySpliterator.class" module="java.util.WeakHashMap" extern="1">
		<extends path="java.util.WeakHashMap_WeakHashMapSpliterator">
			<c path="java.util.WeakHashMap_EntrySpliterator.K"/>
			<c path="java.util.WeakHashMap_EntrySpliterator.V"/>
		</extends>
		<implements path="java.util.Spliterator"><c path="java.util.Map_Entry">
	<c path="java.util.WeakHashMap_EntrySpliterator.K"/>
	<c path="java.util.WeakHashMap_EntrySpliterator.V"/>
</c></implements>
		<trySplit public="1" set="method"><f a=""><c path="java.util.WeakHashMap_EntrySpliterator">
	<c path="java.util.WeakHashMap_EntrySpliterator.K"/>
	<c path="java.util.WeakHashMap_EntrySpliterator.V"/>
</c></f></trySplit>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<c path="java.util.WeakHashMap">
		<c path="java.util.WeakHashMap_EntrySpliterator.K"/>
		<c path="java.util.WeakHashMap_EntrySpliterator.V"/>
	</c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.WeakHashMap$EntrySpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.WeakHashMap_EntrySet" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/WeakHashMap$EntrySet.class" module="java.util.WeakHashMap" extern="1">
		<extends path="java.util.AbstractSet"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></extends>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></c></f></iterator>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<remove public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<toArray public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></c></f></spliterator>
		<this_0 final="1" public="1">
			<c path="java.util.WeakHashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.WeakHashMap">
		<d/>
		<d/>
	</c>
	<c path="java.util.WeakHashMap_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.WeakHashMap$EntrySet"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.WeakHashMap_EntryIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/WeakHashMap$EntryIterator.class" module="java.util.WeakHashMap" extern="1">
		<extends path="java.util.WeakHashMap_HashIterator"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></extends>
		<next public="1" set="method"><f a=""><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></f></next>
		<this_0 final="1" public="1" override="1">
			<c path="java.util.WeakHashMap">
				<d/>
				<d/>
			</c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.WeakHashMap">
		<d/>
		<d/>
	</c>
	<c path="java.util.WeakHashMap_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.WeakHashMap$EntryIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.WeakHashMap_Entry" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/WeakHashMap$Entry.class" module="java.util.WeakHashMap" extern="1">
		<extends path="java.lang.ref.WeakReference"><d/></extends>
		<implements path="java.util.Map_Entry">
			<c path="java.util.WeakHashMap_Entry.K"/>
			<c path="java.util.WeakHashMap_Entry.V"/>
		</implements>
		<getKey public="1" set="method"><f a=""><c path="java.util.WeakHashMap_Entry.K"/></f></getKey>
		<getValue public="1" set="method"><f a=""><c path="java.util.WeakHashMap_Entry.V"/></f></getValue>
		<setValue public="1" set="method"><f a="param1">
	<c path="java.util.WeakHashMap_Entry.V"/>
	<c path="java.util.WeakHashMap_Entry.V"/>
</f></setValue>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<value public="1"><c path="java.util.WeakHashMap_Entry.V"/></value>
		<hash final="1" public="1"><x path="Int"/></hash>
		<next public="1" override="1"><c path="java.util.WeakHashMap_Entry">
	<c path="java.util.WeakHashMap_Entry.K"/>
	<c path="java.util.WeakHashMap_Entry.V"/>
</c></next>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5">
	<d/>
	<c path="java.util.WeakHashMap_Entry.V"/>
	<c path="java.lang.ref.ReferenceQueue"><d/></c>
	<x path="Int"/>
	<c path="java.util.WeakHashMap_Entry">
		<c path="java.util.WeakHashMap_Entry.K"/>
		<c path="java.util.WeakHashMap_Entry.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.WeakHashMap$Entry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.WeakHashMap_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/WeakHashMap$1.class" module="java.util.WeakHashMap" extern="1"><meta>
	<m n=":native"><e>"java.util.WeakHashMap$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.util.concurrent.BlockingQueue" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/BlockingQueue.class" extern="1" interface="1">
		<extends path="java.util.Queue"><c path="java.util.concurrent.BlockingQueue.E"/></extends>
		<add public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.BlockingQueue.E"/>
	<x path="Bool"/>
</f></add>
		<offer public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.BlockingQueue.E"/>
				<x path="Bool"/>
			</f>
			<overloads><offer public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.concurrent.BlockingQueue.E"/>
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></offer></overloads>
		</offer>
		<put public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.BlockingQueue.E"/>
	<x path="Void"/>
</f></put>
		<take public="1" set="method"><f a=""><c path="java.util.concurrent.BlockingQueue.E"/></f></take>
		<poll public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<c path="java.util.concurrent.BlockingQueue.E"/>
</f></poll>
		<remainingCapacity public="1" set="method"><f a=""><x path="Int"/></f></remainingCapacity>
		<remove public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove>
		<contains public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<drainTo public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Int"/>
			</f>
			<overloads><drainTo public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collection"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></drainTo></overloads>
		</drainTo>
		<meta>
			<m n=":native"><e>"java.util.concurrent.BlockingQueue"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.BlockingDeque" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/BlockingDeque.class" extern="1" interface="1">
		<extends path="java.util.Deque"><c path="java.util.concurrent.BlockingDeque.E"/></extends>
		<extends path="java.util.concurrent.BlockingQueue"><c path="java.util.concurrent.BlockingDeque.E"/></extends>
		<addFirst public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.BlockingDeque.E"/>
	<x path="Void"/>
</f></addFirst>
		<addLast public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.BlockingDeque.E"/>
	<x path="Void"/>
</f></addLast>
		<offerFirst public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.BlockingDeque.E"/>
				<x path="Bool"/>
			</f>
			<overloads><offerFirst public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.concurrent.BlockingDeque.E"/>
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></offerFirst></overloads>
		</offerFirst>
		<offerLast public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.BlockingDeque.E"/>
				<x path="Bool"/>
			</f>
			<overloads><offerLast public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.concurrent.BlockingDeque.E"/>
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></offerLast></overloads>
		</offerLast>
		<putFirst public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.BlockingDeque.E"/>
	<x path="Void"/>
</f></putFirst>
		<putLast public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.BlockingDeque.E"/>
	<x path="Void"/>
</f></putLast>
		<takeFirst public="1" set="method"><f a=""><c path="java.util.concurrent.BlockingDeque.E"/></f></takeFirst>
		<takeLast public="1" set="method"><f a=""><c path="java.util.concurrent.BlockingDeque.E"/></f></takeLast>
		<pollFirst public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<c path="java.util.concurrent.BlockingDeque.E"/>
</f></pollFirst>
		<pollLast public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<c path="java.util.concurrent.BlockingDeque.E"/>
</f></pollLast>
		<removeFirstOccurrence public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></removeFirstOccurrence>
		<removeLastOccurrence public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></removeLastOccurrence>
		<add public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.BlockingDeque.E"/>
	<x path="Bool"/>
</f></add>
		<offer public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.BlockingDeque.E"/>
				<x path="Bool"/>
			</f>
			<overloads><offer public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.concurrent.BlockingDeque.E"/>
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></offer></overloads>
		</offer>
		<put public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.BlockingDeque.E"/>
	<x path="Void"/>
</f></put>
		<remove public="1" set="method">
			<f a=""><c path="java.util.concurrent.BlockingDeque.E"/></f>
			<overloads><remove public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove></overloads>
		</remove>
		<poll public="1" set="method">
			<f a=""><c path="java.util.concurrent.BlockingDeque.E"/></f>
			<overloads><poll public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<c path="java.util.concurrent.BlockingDeque.E"/>
</f></poll></overloads>
		</poll>
		<take public="1" set="method"><f a=""><c path="java.util.concurrent.BlockingDeque.E"/></f></take>
		<element public="1" set="method"><f a=""><c path="java.util.concurrent.BlockingDeque.E"/></f></element>
		<peek public="1" set="method"><f a=""><c path="java.util.concurrent.BlockingDeque.E"/></f></peek>
		<contains public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.concurrent.BlockingDeque.E"/></c></f></iterator>
		<push public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.BlockingDeque.E"/>
	<x path="Void"/>
</f></push>
		<meta>
			<m n=":native"><e>"java.util.concurrent.BlockingDeque"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.Callable" params="V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/Callable.class" extern="1" interface="1">
		<call public="1" set="method"><f a=""><c path="java.util.concurrent.Callable.V"/></f></call>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.concurrent.Callable"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.ConcurrentMap" params="K:V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/ConcurrentMap.class" extern="1" interface="1">
		<extends path="java.util.Map">
			<c path="java.util.concurrent.ConcurrentMap.K"/>
			<c path="java.util.concurrent.ConcurrentMap.V"/>
		</extends>
		<getOrDefault public="1" set="method">
			<f a="param1:param2">
				<d/>
				<c path="java.util.concurrent.ConcurrentMap.V"/>
				<c path="java.util.concurrent.ConcurrentMap.V"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</getOrDefault>
		<forEach public="1" set="method">
			<f a="param1">
				<c path="java.util.function.BiConsumer">
					<d/>
					<d/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</forEach>
		<putIfAbsent public="1" set="method"><f a="param1:param2">
	<c path="java.util.concurrent.ConcurrentMap.K"/>
	<c path="java.util.concurrent.ConcurrentMap.V"/>
	<c path="java.util.concurrent.ConcurrentMap.V"/>
</f></putIfAbsent>
		<remove public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></remove>
		<replace public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.concurrent.ConcurrentMap.K"/>
				<c path="java.util.concurrent.ConcurrentMap.V"/>
				<c path="java.util.concurrent.ConcurrentMap.V"/>
				<x path="Bool"/>
			</f>
			<overloads><replace public="1" set="method"><f a="param1:param2">
	<c path="java.util.concurrent.ConcurrentMap.K"/>
	<c path="java.util.concurrent.ConcurrentMap.V"/>
	<c path="java.util.concurrent.ConcurrentMap.V"/>
</f></replace></overloads>
		</replace>
		<replaceAll public="1" set="method">
			<f a="param1">
				<c path="java.util.function.BiFunction">
					<d/>
					<d/>
					<c path="java.util.concurrent.ConcurrentMap.V"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</replaceAll>
		<computeIfAbsent public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.concurrent.ConcurrentMap.K"/>
				<c path="java.util.function.Function">
					<d/>
					<c path="java.util.concurrent.ConcurrentMap.V"/>
				</c>
				<c path="java.util.concurrent.ConcurrentMap.V"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</computeIfAbsent>
		<computeIfPresent public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.concurrent.ConcurrentMap.K"/>
				<c path="java.util.function.BiFunction">
					<d/>
					<d/>
					<c path="java.util.concurrent.ConcurrentMap.V"/>
				</c>
				<c path="java.util.concurrent.ConcurrentMap.V"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</computeIfPresent>
		<compute public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.concurrent.ConcurrentMap.K"/>
				<c path="java.util.function.BiFunction">
					<d/>
					<d/>
					<c path="java.util.concurrent.ConcurrentMap.V"/>
				</c>
				<c path="java.util.concurrent.ConcurrentMap.V"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</compute>
		<merge public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.concurrent.ConcurrentMap.K"/>
				<c path="java.util.concurrent.ConcurrentMap.V"/>
				<c path="java.util.function.BiFunction">
					<d/>
					<d/>
					<c path="java.util.concurrent.ConcurrentMap.V"/>
				</c>
				<c path="java.util.concurrent.ConcurrentMap.V"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</merge>
		<meta>
			<m n=":native"><e>"java.util.concurrent.ConcurrentMap"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.Executor" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/Executor.class" extern="1" interface="1">
		<execute public="1" set="method"><f a="param1">
	<c path="java.lang.Runnable"/>
	<x path="Void"/>
</f></execute>
		<meta>
			<m n=":native"><e>"java.util.concurrent.Executor"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.ExecutorService" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/ExecutorService.class" extern="1" interface="1">
		<extends path="java.util.concurrent.Executor"/>
		<shutdown public="1" set="method"><f a=""><x path="Void"/></f></shutdown>
		<shutdownNow public="1" set="method"><f a=""><c path="java.util.List"><c path="java.lang.Runnable"/></c></f></shutdownNow>
		<isShutdown public="1" set="method"><f a=""><x path="Bool"/></f></isShutdown>
		<isTerminated public="1" set="method"><f a=""><x path="Bool"/></f></isTerminated>
		<awaitTermination public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></awaitTermination>
		<submit public="1" params="T" set="method">
			<f a="param1">
				<c path="java.util.concurrent.Callable"><c path="submit.T"/></c>
				<c path="java.util.concurrent.Future"><c path="submit.T"/></c>
			</f>
			<overloads>
				<submit public="1" set="method"><f a="param1">
	<c path="java.lang.Runnable"/>
	<c path="java.util.concurrent.Future"><d/></c>
</f></submit>
				<submit public="1" params="T" set="method"><f a="param1:param2">
	<c path="java.lang.Runnable"/>
	<c path="submit.T"/>
	<c path="java.util.concurrent.Future"><c path="submit.T"/></c>
</f></submit>
			</overloads>
		</submit>
		<invokeAll public="1" params="T" set="method">
			<f a="param1">
				<c path="java.util.Collection"><c path="java.util.concurrent.Callable"><c path="invokeAll.T"/></c></c>
				<c path="java.util.List"><c path="java.util.concurrent.Future"><c path="invokeAll.T"/></c></c>
			</f>
			<overloads><invokeAll public="1" params="T" set="method"><f a="param1:param2:param3">
	<c path="java.util.Collection"><c path="java.util.concurrent.Callable"><c path="invokeAll.T"/></c></c>
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<c path="java.util.List"><c path="java.util.concurrent.Future"><c path="invokeAll.T"/></c></c>
</f></invokeAll></overloads>
		</invokeAll>
		<invokeAny public="1" params="T" set="method">
			<f a="param1">
				<c path="java.util.Collection"><c path="java.util.concurrent.Callable"><c path="invokeAny.T"/></c></c>
				<c path="invokeAny.T"/>
			</f>
			<overloads><invokeAny public="1" params="T" set="method"><f a="param1:param2:param3">
	<c path="java.util.Collection"><c path="java.util.concurrent.Callable"><c path="invokeAny.T"/></c></c>
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<c path="invokeAny.T"/>
</f></invokeAny></overloads>
		</invokeAny>
		<meta>
			<m n=":native"><e>"java.util.concurrent.ExecutorService"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.Future" params="V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/Future.class" extern="1" interface="1">
		<cancel public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Bool"/>
</f></cancel>
		<isCancelled public="1" set="method"><f a=""><x path="Bool"/></f></isCancelled>
		<isDone public="1" set="method"><f a=""><x path="Bool"/></f></isDone>
		<get public="1" set="method">
			<f a=""><c path="java.util.concurrent.Future.V"/></f>
			<overloads><get public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<c path="java.util.concurrent.Future.V"/>
</f></get></overloads>
		</get>
		<meta>
			<m n=":native"><e>"java.util.concurrent.Future"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.LinkedBlockingDeque" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/LinkedBlockingDeque.class" extern="1">
		<extends path="java.util.AbstractQueue"><c path="java.util.concurrent.LinkedBlockingDeque.E"/></extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.util.concurrent.BlockingDeque"><c path="java.util.concurrent.LinkedBlockingDeque.E"/></implements>
		<unlink public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.LinkedBlockingDeque_Node"><c path="java.util.concurrent.LinkedBlockingDeque.E"/></c>
	<x path="Void"/>
</f></unlink>
		<addFirst public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
	<x path="Void"/>
</f></addFirst>
		<addLast public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
	<x path="Void"/>
</f></addLast>
		<offerFirst public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
				<x path="Bool"/>
			</f>
			<overloads><offerFirst public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></offerFirst></overloads>
		</offerFirst>
		<offerLast public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
				<x path="Bool"/>
			</f>
			<overloads><offerLast public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></offerLast></overloads>
		</offerLast>
		<putFirst public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
	<x path="Void"/>
</f></putFirst>
		<putLast public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
	<x path="Void"/>
</f></putLast>
		<removeFirst public="1" set="method"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f></removeFirst>
		<removeLast public="1" set="method"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f></removeLast>
		<pollFirst public="1" set="method">
			<f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f>
			<overloads><pollFirst public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
</f></pollFirst></overloads>
		</pollFirst>
		<pollLast public="1" set="method">
			<f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f>
			<overloads><pollLast public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
</f></pollLast></overloads>
		</pollLast>
		<takeFirst public="1" set="method"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f></takeFirst>
		<takeLast public="1" set="method"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f></takeLast>
		<getFirst public="1" set="method"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f></getFirst>
		<getLast public="1" set="method"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f></getLast>
		<peekFirst public="1" set="method"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f></peekFirst>
		<peekLast public="1" set="method"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f></peekLast>
		<removeFirstOccurrence public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></removeFirstOccurrence>
		<removeLastOccurrence public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></removeLastOccurrence>
		<add public="1" set="method" override="1"><f a="param1">
	<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
	<x path="Bool"/>
</f></add>
		<offer public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
				<x path="Bool"/>
			</f>
			<overloads><offer public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></offer></overloads>
		</offer>
		<put public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
	<x path="Void"/>
</f></put>
		<remove public="1" set="method" override="1">
			<f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f>
			<overloads><remove public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></remove></overloads>
		</remove>
		<poll public="1" set="method">
			<f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f>
			<overloads><poll public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
</f></poll></overloads>
		</poll>
		<take public="1" set="method"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f></take>
		<element public="1" set="method" override="1"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f></element>
		<peek public="1" set="method"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f></peek>
		<remainingCapacity public="1" set="method"><f a=""><x path="Int"/></f></remainingCapacity>
		<drainTo public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Int"/>
			</f>
			<overloads><drainTo public="1" set="method"><f a="param1:param2">
	<c path="java.util.Collection"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></drainTo></overloads>
		</drainTo>
		<push public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.LinkedBlockingDeque.E"/>
	<x path="Void"/>
</f></push>
		<pop public="1" set="method"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque.E"/></f></pop>
		<size public="1" set="method" override="1"><f a=""><x path="Int"/></f></size>
		<contains public="1" set="method" override="1"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></contains>
		<toArray public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="T" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="toArray.T"/></c>
	<c path="java.NativeArray"><c path="toArray.T"/></c>
</f></toArray></overloads>
		</toArray>
		<toString public="1" set="method" override="1"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method" override="1"><f a=""><x path="Void"/></f></clear>
		<iterator public="1" set="method" override="1"><f a=""><c path="java.util.Iterator"><c path="java.util.concurrent.LinkedBlockingDeque.E"/></c></f></iterator>
		<descendingIterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.concurrent.LinkedBlockingDeque.E"/></c></f></descendingIterator>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.concurrent.LinkedBlockingDeque.E"/></c></f></spliterator>
		<first public="1"><c path="java.util.concurrent.LinkedBlockingDeque_Node"><c path="java.util.concurrent.LinkedBlockingDeque.E"/></c></first>
		<last public="1"><c path="java.util.concurrent.LinkedBlockingDeque_Node"><c path="java.util.concurrent.LinkedBlockingDeque.E"/></c></last>
		<lock final="1" public="1"><c path="java.util.concurrent.locks.ReentrantLock"/></lock>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.util.Collection"><c path="java.util.concurrent.LinkedBlockingDeque.E"/></c>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.util.concurrent.LinkedBlockingDeque"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.LinkedBlockingDeque_Node" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/LinkedBlockingDeque$Node.class" module="java.util.concurrent.LinkedBlockingDeque" extern="1">
		<item public="1"><c path="java.util.concurrent.LinkedBlockingDeque_Node.E"/></item>
		<prev public="1"><c path="java.util.concurrent.LinkedBlockingDeque_Node"><c path="java.util.concurrent.LinkedBlockingDeque_Node.E"/></c></prev>
		<next public="1"><c path="java.util.concurrent.LinkedBlockingDeque_Node"><c path="java.util.concurrent.LinkedBlockingDeque_Node.E"/></c></next>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.LinkedBlockingDeque_Node.E"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.LinkedBlockingDeque$Node"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.LinkedBlockingDeque_LBDSpliterator" params="E" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/LinkedBlockingDeque$LBDSpliterator.class" module="java.util.concurrent.LinkedBlockingDeque" extern="1">
		<implements path="java.util.Spliterator"><c path="java.util.concurrent.LinkedBlockingDeque_LBDSpliterator.E"/></implements>
		<MAX_BATCH final="1" public="1" set="null" static="1"><x path="Int"/></MAX_BATCH>
		<estimateSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></estimateSize>
		<trySplit public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.concurrent.LinkedBlockingDeque_LBDSpliterator.E"/></c></f></trySplit>
		<forEachRemaining public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachRemaining>
		<tryAdvance public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Bool"/>
</f></tryAdvance>
		<characteristics public="1" set="method"><f a=""><x path="Int"/></f></characteristics>
		<queue final="1" public="1"><c path="java.util.concurrent.LinkedBlockingDeque"><c path="java.util.concurrent.LinkedBlockingDeque_LBDSpliterator.E"/></c></queue>
		<current public="1"><c path="java.util.concurrent.LinkedBlockingDeque_Node"><c path="java.util.concurrent.LinkedBlockingDeque_LBDSpliterator.E"/></c></current>
		<batch public="1"><x path="Int"/></batch>
		<exhausted public="1"><x path="Bool"/></exhausted>
		<est public="1"><x path="haxe.Int64"/></est>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.LinkedBlockingDeque"><c path="java.util.concurrent.LinkedBlockingDeque_LBDSpliterator.E"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.LinkedBlockingDeque$LBDSpliterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.LinkedBlockingDeque_AbstractItr" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/LinkedBlockingDeque$AbstractItr.class" module="java.util.concurrent.LinkedBlockingDeque" extern="1" abstract="1">
		<implements path="java.util.Iterator"><d/></implements>
		<firstNode abstract="1" public="1" set="method"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque_Node"><d/></c></f></firstNode>
		<nextNode abstract="1" public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.LinkedBlockingDeque_Node"><d/></c>
	<c path="java.util.concurrent.LinkedBlockingDeque_Node"><d/></c>
</f></nextNode>
		<advance public="1" set="method"><f a=""><x path="Void"/></f></advance>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<nextItem public="1"><d/></nextItem>
		<this_0 final="1" public="1">
			<c path="java.util.concurrent.LinkedBlockingDeque"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.LinkedBlockingDeque"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.LinkedBlockingDeque$AbstractItr"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.LinkedBlockingDeque_Itr" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/LinkedBlockingDeque$Itr.class" module="java.util.concurrent.LinkedBlockingDeque" extern="1">
		<extends path="java.util.concurrent.LinkedBlockingDeque_AbstractItr"/>
		<firstNode public="1" set="method" override="1"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque_Node"><d/></c></f></firstNode>
		<nextNode public="1" set="method" override="1"><f a="param1">
	<c path="java.util.concurrent.LinkedBlockingDeque_Node"><d/></c>
	<c path="java.util.concurrent.LinkedBlockingDeque_Node"><d/></c>
</f></nextNode>
		<this_0 final="1" public="1" override="1">
			<c path="java.util.concurrent.LinkedBlockingDeque"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.concurrent.LinkedBlockingDeque"><d/></c>
	<c path="java.util.concurrent.LinkedBlockingDeque_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.LinkedBlockingDeque$Itr"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.LinkedBlockingDeque_DescendingItr" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/LinkedBlockingDeque$DescendingItr.class" module="java.util.concurrent.LinkedBlockingDeque" extern="1">
		<extends path="java.util.concurrent.LinkedBlockingDeque_AbstractItr"/>
		<firstNode public="1" set="method" override="1"><f a=""><c path="java.util.concurrent.LinkedBlockingDeque_Node"><d/></c></f></firstNode>
		<nextNode public="1" set="method" override="1"><f a="param1">
	<c path="java.util.concurrent.LinkedBlockingDeque_Node"><d/></c>
	<c path="java.util.concurrent.LinkedBlockingDeque_Node"><d/></c>
</f></nextNode>
		<this_0 final="1" public="1" override="1">
			<c path="java.util.concurrent.LinkedBlockingDeque"><d/></c>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.concurrent.LinkedBlockingDeque"><d/></c>
	<c path="java.util.concurrent.LinkedBlockingDeque_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.LinkedBlockingDeque$DescendingItr"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.LinkedBlockingDeque_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/LinkedBlockingDeque$1.class" module="java.util.concurrent.LinkedBlockingDeque" extern="1"><meta>
	<m n=":native"><e>"java.util.concurrent.LinkedBlockingDeque$1"</e></m>
	<m n=":libType"/>
</meta></class>
	<class path="java.util.concurrent.Semaphore" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/Semaphore.class" extern="1">
		<implements path="java.io.Serializable"/>
		<acquire public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><acquire public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></acquire></overloads>
		</acquire>
		<acquireUninterruptibly public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><acquireUninterruptibly public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></acquireUninterruptibly></overloads>
		</acquireUninterruptibly>
		<tryAcquire public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<overloads>
				<tryAcquire public="1" set="method"><f a="param1:param2:param3">
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></tryAcquire>
				<tryAcquire public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></tryAcquire>
				<tryAcquire public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></tryAcquire>
			</overloads>
		</tryAcquire>
		<release public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><release public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></release></overloads>
		</release>
		<availablePermits public="1" set="method"><f a=""><x path="Int"/></f></availablePermits>
		<drainPermits public="1" set="method"><f a=""><x path="Int"/></f></drainPermits>
		<reducePermits public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></reducePermits>
		<isFair public="1" set="method"><f a=""><x path="Bool"/></f></isFair>
		<hasQueuedThreads final="1" public="1" set="method"><f a=""><x path="Bool"/></f></hasQueuedThreads>
		<getQueueLength final="1" public="1" set="method"><f a=""><x path="Int"/></f></getQueueLength>
		<getQueuedThreads public="1" set="method"><f a=""><c path="java.util.Collection"><c path="java.lang.Thread"/></c></f></getQueuedThreads>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.Semaphore"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.AbstractOwnableSynchronizer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/AbstractOwnableSynchronizer.class" extern="1" abstract="1">
		<implements path="java.io.Serializable"/>
		<setExclusiveOwnerThread final="1" public="1" set="method"><f a="param1">
	<c path="java.lang.Thread"/>
	<x path="Void"/>
</f></setExclusiveOwnerThread>
		<getExclusiveOwnerThread final="1" public="1" set="method"><f a=""><c path="java.lang.Thread"/></f></getExclusiveOwnerThread>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.locks.AbstractOwnableSynchronizer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.AbstractQueuedSynchronizer" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/AbstractQueuedSynchronizer.class" extern="1" abstract="1">
		<extends path="java.util.concurrent.locks.AbstractOwnableSynchronizer"/>
		<implements path="java.io.Serializable"/>
		<selfInterrupt public="1" set="method" static="1"><f a=""><x path="Void"/></f></selfInterrupt>
		<spinForTimeoutThreshold final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></spinForTimeoutThreshold>
		<getState final="1" public="1" set="method"><f a=""><x path="Int"/></f></getState>
		<setState final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setState>
		<compareAndSetState final="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></compareAndSetState>
		<acquireQueued final="1" public="1" set="method"><f a="param1:param2">
	<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_Node"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></acquireQueued>
		<tryAcquire public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></tryAcquire>
		<tryRelease public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></tryRelease>
		<tryAcquireShared public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></tryAcquireShared>
		<tryReleaseShared public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></tryReleaseShared>
		<isHeldExclusively public="1" set="method"><f a=""><x path="Bool"/></f></isHeldExclusively>
		<acquire final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></acquire>
		<acquireInterruptibly final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></acquireInterruptibly>
		<tryAcquireNanos final="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Bool"/>
</f></tryAcquireNanos>
		<release final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></release>
		<acquireShared final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></acquireShared>
		<acquireSharedInterruptibly final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></acquireSharedInterruptibly>
		<tryAcquireSharedNanos final="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="haxe.Int64"/>
	<x path="Bool"/>
</f></tryAcquireSharedNanos>
		<releaseShared final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></releaseShared>
		<hasQueuedThreads final="1" public="1" set="method"><f a=""><x path="Bool"/></f></hasQueuedThreads>
		<hasContended final="1" public="1" set="method"><f a=""><x path="Bool"/></f></hasContended>
		<getFirstQueuedThread final="1" public="1" set="method"><f a=""><c path="java.lang.Thread"/></f></getFirstQueuedThread>
		<isQueued final="1" public="1" set="method"><f a="param1">
	<c path="java.lang.Thread"/>
	<x path="Bool"/>
</f></isQueued>
		<apparentlyFirstQueuedIsExclusive final="1" public="1" set="method"><f a=""><x path="Bool"/></f></apparentlyFirstQueuedIsExclusive>
		<hasQueuedPredecessors final="1" public="1" set="method"><f a=""><x path="Bool"/></f></hasQueuedPredecessors>
		<getQueueLength final="1" public="1" set="method"><f a=""><x path="Int"/></f></getQueueLength>
		<getQueuedThreads final="1" public="1" set="method"><f a=""><c path="java.util.Collection"><c path="java.lang.Thread"/></c></f></getQueuedThreads>
		<getExclusiveQueuedThreads final="1" public="1" set="method"><f a=""><c path="java.util.Collection"><c path="java.lang.Thread"/></c></f></getExclusiveQueuedThreads>
		<getSharedQueuedThreads final="1" public="1" set="method"><f a=""><c path="java.util.Collection"><c path="java.lang.Thread"/></c></f></getSharedQueuedThreads>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<isOnSyncQueue final="1" public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_Node"/>
	<x path="Bool"/>
</f></isOnSyncQueue>
		<transferForSignal final="1" public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_Node"/>
	<x path="Bool"/>
</f></transferForSignal>
		<transferAfterCancelledWait final="1" public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_Node"/>
	<x path="Bool"/>
</f></transferAfterCancelledWait>
		<fullyRelease final="1" public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_Node"/>
	<x path="Int"/>
</f></fullyRelease>
		<owns final="1" public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_ConditionObject"/>
	<x path="Bool"/>
</f></owns>
		<hasWaiters final="1" public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_ConditionObject"/>
	<x path="Bool"/>
</f></hasWaiters>
		<getWaitQueueLength final="1" public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_ConditionObject"/>
	<x path="Int"/>
</f></getWaitQueueLength>
		<getWaitingThreads final="1" public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_ConditionObject"/>
	<c path="java.util.Collection"><c path="java.lang.Thread"/></c>
</f></getWaitingThreads>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.locks.AbstractQueuedSynchronizer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.Semaphore_Sync" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/Semaphore$Sync.class" module="java.util.concurrent.Semaphore" extern="1" abstract="1">
		<extends path="java.util.concurrent.locks.AbstractQueuedSynchronizer"/>
		<getPermits final="1" public="1" set="method"><f a=""><x path="Int"/></f></getPermits>
		<nonfairTryAcquireShared final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></nonfairTryAcquireShared>
		<tryReleaseShared final="1" public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></tryReleaseShared>
		<reducePermits final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></reducePermits>
		<drainPermits final="1" public="1" set="method"><f a=""><x path="Int"/></f></drainPermits>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.Semaphore$Sync"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.Semaphore_NonfairSync" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/Semaphore$NonfairSync.class" module="java.util.concurrent.Semaphore" extern="1">
		<extends path="java.util.concurrent.Semaphore_Sync"/>
		<tryAcquireShared public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></tryAcquireShared>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.Semaphore$NonfairSync"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.Semaphore_FairSync" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/Semaphore$FairSync.class" module="java.util.concurrent.Semaphore" extern="1">
		<extends path="java.util.concurrent.Semaphore_Sync"/>
		<tryAcquireShared public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></tryAcquireShared>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.Semaphore$FairSync"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.util.concurrent.TimeUnit" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/TimeUnit.class">
		<NANOSECONDS/>
		<MICROSECONDS/>
		<MILLISECONDS/>
		<SECONDS/>
		<MINUTES/>
		<HOURS/>
		<DAYS/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.util.concurrent.TimeUnit"</e></m>
		</meta>
	</enum>
	<enum path="java.util.concurrent.TimeUnit_7" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/TimeUnit$7.class" module="java.util.concurrent.TimeUnit"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.concurrent.TimeUnit$7"</e></m>
</meta></enum>
	<enum path="java.util.concurrent.TimeUnit_6" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/TimeUnit$6.class" module="java.util.concurrent.TimeUnit"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.concurrent.TimeUnit$6"</e></m>
</meta></enum>
	<enum path="java.util.concurrent.TimeUnit_5" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/TimeUnit$5.class" module="java.util.concurrent.TimeUnit"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.concurrent.TimeUnit$5"</e></m>
</meta></enum>
	<enum path="java.util.concurrent.TimeUnit_4" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/TimeUnit$4.class" module="java.util.concurrent.TimeUnit"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.concurrent.TimeUnit$4"</e></m>
</meta></enum>
	<enum path="java.util.concurrent.TimeUnit_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/TimeUnit$3.class" module="java.util.concurrent.TimeUnit"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.concurrent.TimeUnit$3"</e></m>
</meta></enum>
	<enum path="java.util.concurrent.TimeUnit_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/TimeUnit$2.class" module="java.util.concurrent.TimeUnit"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.concurrent.TimeUnit$2"</e></m>
</meta></enum>
	<enum path="java.util.concurrent.TimeUnit_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/TimeUnit$1.class" module="java.util.concurrent.TimeUnit"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.concurrent.TimeUnit$1"</e></m>
</meta></enum>
	<class path="java.util.concurrent.atomic.AtomicBoolean" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/atomic/AtomicBoolean.class" extern="1">
		<implements path="java.io.Serializable"/>
		<get final="1" public="1" set="method"><f a=""><x path="Bool"/></f></get>
		<compareAndSet final="1" public="1" set="method"><f a="param1:param2">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></compareAndSet>
		<weakCompareAndSet public="1" set="method"><f a="param1:param2">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></weakCompareAndSet>
		<set final="1" public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></set>
		<lazySet final="1" public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></lazySet>
		<getAndSet final="1" public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Bool"/>
</f></getAndSet>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a=""><x path="Void"/></f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.atomic.AtomicBoolean"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.atomic.AtomicInteger" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/atomic/AtomicInteger.class" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.io.Serializable"/>
		<get final="1" public="1" set="method"><f a=""><x path="Int"/></f></get>
		<set final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<lazySet final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></lazySet>
		<getAndSet final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getAndSet>
		<compareAndSet final="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></compareAndSet>
		<weakCompareAndSet final="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></weakCompareAndSet>
		<getAndIncrement final="1" public="1" set="method"><f a=""><x path="Int"/></f></getAndIncrement>
		<getAndDecrement final="1" public="1" set="method"><f a=""><x path="Int"/></f></getAndDecrement>
		<getAndAdd final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></getAndAdd>
		<incrementAndGet final="1" public="1" set="method"><f a=""><x path="Int"/></f></incrementAndGet>
		<decrementAndGet final="1" public="1" set="method"><f a=""><x path="Int"/></f></decrementAndGet>
		<addAndGet final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></addAndGet>
		<getAndUpdate final="1" public="1" set="method"><f a="param1">
	<c path="java.util.function.IntUnaryOperator"/>
	<x path="Int"/>
</f></getAndUpdate>
		<updateAndGet final="1" public="1" set="method"><f a="param1">
	<c path="java.util.function.IntUnaryOperator"/>
	<x path="Int"/>
</f></updateAndGet>
		<getAndAccumulate final="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.function.IntBinaryOperator"/>
	<x path="Int"/>
</f></getAndAccumulate>
		<accumulateAndGet final="1" public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.function.IntBinaryOperator"/>
	<x path="Int"/>
</f></accumulateAndGet>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<intValue public="1" set="method" override="1"><f a=""><x path="Int"/></f></intValue>
		<longValue public="1" set="method" override="1"><f a=""><x path="haxe.Int64"/></f></longValue>
		<floatValue public="1" set="method" override="1"><f a=""><x path="Single"/></f></floatValue>
		<doubleValue public="1" set="method" override="1"><f a=""><x path="Float"/></f></doubleValue>
		<new public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a=""><x path="Void"/></f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.atomic.AtomicInteger"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.atomic.AtomicReference" params="V" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/atomic/AtomicReference.class" extern="1">
		<implements path="java.io.Serializable"/>
		<get final="1" public="1" set="method"><f a=""><c path="java.util.concurrent.atomic.AtomicReference.V"/></f></get>
		<set final="1" public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.atomic.AtomicReference.V"/>
	<x path="Void"/>
</f></set>
		<lazySet final="1" public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.atomic.AtomicReference.V"/>
	<x path="Void"/>
</f></lazySet>
		<compareAndSet final="1" public="1" set="method"><f a="param1:param2">
	<c path="java.util.concurrent.atomic.AtomicReference.V"/>
	<c path="java.util.concurrent.atomic.AtomicReference.V"/>
	<x path="Bool"/>
</f></compareAndSet>
		<weakCompareAndSet final="1" public="1" set="method"><f a="param1:param2">
	<c path="java.util.concurrent.atomic.AtomicReference.V"/>
	<c path="java.util.concurrent.atomic.AtomicReference.V"/>
	<x path="Bool"/>
</f></weakCompareAndSet>
		<getAndSet final="1" public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.atomic.AtomicReference.V"/>
	<c path="java.util.concurrent.atomic.AtomicReference.V"/>
</f></getAndSet>
		<getAndUpdate final="1" public="1" set="method"><f a="param1">
	<c path="java.util.function.UnaryOperator"><c path="java.util.concurrent.atomic.AtomicReference.V"/></c>
	<c path="java.util.concurrent.atomic.AtomicReference.V"/>
</f></getAndUpdate>
		<updateAndGet final="1" public="1" set="method"><f a="param1">
	<c path="java.util.function.UnaryOperator"><c path="java.util.concurrent.atomic.AtomicReference.V"/></c>
	<c path="java.util.concurrent.atomic.AtomicReference.V"/>
</f></updateAndGet>
		<getAndAccumulate final="1" public="1" set="method"><f a="param1:param2">
	<c path="java.util.concurrent.atomic.AtomicReference.V"/>
	<c path="java.util.function.BinaryOperator"><c path="java.util.concurrent.atomic.AtomicReference.V"/></c>
	<c path="java.util.concurrent.atomic.AtomicReference.V"/>
</f></getAndAccumulate>
		<accumulateAndGet final="1" public="1" set="method"><f a="param1:param2">
	<c path="java.util.concurrent.atomic.AtomicReference.V"/>
	<c path="java.util.function.BinaryOperator"><c path="java.util.concurrent.atomic.AtomicReference.V"/></c>
	<c path="java.util.concurrent.atomic.AtomicReference.V"/>
</f></accumulateAndGet>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.atomic.AtomicReference.V"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a=""><x path="Void"/></f></new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"java.util.concurrent.atomic.AtomicReference"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.AbstractQueuedSynchronizer_Node" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.class" module="java.util.concurrent.locks.AbstractQueuedSynchronizer" extern="1">
		<SHARED final="1" public="1" set="null" static="1"><c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_Node"/></SHARED>
		<EXCLUSIVE final="1" public="1" set="null" static="1"><c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_Node"/></EXCLUSIVE>
		<CANCELLED final="1" public="1" set="null" static="1"><x path="Int"/></CANCELLED>
		<SIGNAL final="1" public="1" set="null" static="1"><x path="Int"/></SIGNAL>
		<CONDITION final="1" public="1" set="null" static="1"><x path="Int"/></CONDITION>
		<PROPAGATE final="1" public="1" set="null" static="1"><x path="Int"/></PROPAGATE>
		<isShared final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isShared>
		<predecessor final="1" public="1" set="method"><f a=""><c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_Node"/></f></predecessor>
		<waitStatus public="1"><x path="Int"/></waitStatus>
		<prev public="1"><c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_Node"/></prev>
		<next public="1"><c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_Node"/></next>
		<thread public="1"><c path="java.lang.Thread"/></thread>
		<nextWaiter public="1"><c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_Node"/></nextWaiter>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Thread"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.lang.Thread"/>
	<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_Node"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.locks.AbstractQueuedSynchronizer$Node"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.Condition" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/Condition.class" extern="1" interface="1">
		<await public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><await public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></await></overloads>
		</await>
		<awaitUninterruptibly public="1" set="method"><f a=""><x path="Void"/></f></awaitUninterruptibly>
		<awaitNanos public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></awaitNanos>
		<awaitUntil public="1" set="method"><f a="param1">
	<c path="java.util.Date"/>
	<x path="Bool"/>
</f></awaitUntil>
		<signal public="1" set="method"><f a=""><x path="Void"/></f></signal>
		<signalAll public="1" set="method"><f a=""><x path="Void"/></f></signalAll>
		<meta>
			<m n=":native"><e>"java.util.concurrent.locks.Condition"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.AbstractQueuedSynchronizer_ConditionObject" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.class" module="java.util.concurrent.locks.AbstractQueuedSynchronizer" extern="1">
		<implements path="java.util.concurrent.locks.Condition"/>
		<implements path="java.io.Serializable"/>
		<signal final="1" public="1" set="method"><f a=""><x path="Void"/></f></signal>
		<signalAll final="1" public="1" set="method"><f a=""><x path="Void"/></f></signalAll>
		<awaitUninterruptibly final="1" public="1" set="method"><f a=""><x path="Void"/></f></awaitUninterruptibly>
		<await final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><await final="1" public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<e path="java.util.concurrent.TimeUnit"/>
	<x path="Bool"/>
</f></await></overloads>
		</await>
		<awaitNanos final="1" public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></awaitNanos>
		<awaitUntil final="1" public="1" set="method"><f a="param1">
	<c path="java.util.Date"/>
	<x path="Bool"/>
</f></awaitUntil>
		<isOwnedBy final="1" public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer"/>
	<x path="Bool"/>
</f></isOwnedBy>
		<hasWaiters final="1" public="1" set="method"><f a=""><x path="Bool"/></f></hasWaiters>
		<getWaitQueueLength final="1" public="1" set="method"><f a=""><x path="Int"/></f></getWaitQueueLength>
		<getWaitingThreads final="1" public="1" set="method"><f a=""><c path="java.util.Collection"><c path="java.lang.Thread"/></c></f></getWaitingThreads>
		<this_0 final="1" public="1">
			<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.ReentrantLock_Sync" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/ReentrantLock$Sync.class" module="java.util.concurrent.locks.ReentrantLock" extern="1" abstract="1">
		<extends path="java.util.concurrent.locks.AbstractQueuedSynchronizer"/>
		<lock abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<nonfairTryAcquire final="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></nonfairTryAcquire>
		<tryRelease final="1" public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></tryRelease>
		<isHeldExclusively final="1" public="1" set="method" override="1"><f a=""><x path="Bool"/></f></isHeldExclusively>
		<newCondition final="1" public="1" set="method"><f a=""><c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_ConditionObject"/></f></newCondition>
		<getOwner final="1" public="1" set="method"><f a=""><c path="java.lang.Thread"/></f></getOwner>
		<getHoldCount final="1" public="1" set="method"><f a=""><x path="Int"/></f></getHoldCount>
		<isLocked final="1" public="1" set="method"><f a=""><x path="Bool"/></f></isLocked>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.locks.ReentrantLock$Sync"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.ReentrantLock_NonfairSync" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/ReentrantLock$NonfairSync.class" module="java.util.concurrent.locks.ReentrantLock" extern="1">
		<extends path="java.util.concurrent.locks.ReentrantLock_Sync"/>
		<lock final="1" public="1" set="method" override="1"><f a=""><x path="Void"/></f></lock>
		<tryAcquire final="1" public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></tryAcquire>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.locks.ReentrantLock$NonfairSync"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.ReentrantLock_FairSync" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/ReentrantLock$FairSync.class" module="java.util.concurrent.locks.ReentrantLock" extern="1">
		<extends path="java.util.concurrent.locks.ReentrantLock_Sync"/>
		<lock final="1" public="1" set="method" override="1"><f a=""><x path="Void"/></f></lock>
		<tryAcquire final="1" public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></tryAcquire>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.concurrent.locks.ReentrantLock$FairSync"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.BiConsumer" params="T:U" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/BiConsumer.class" extern="1" interface="1">
		<accept public="1" set="method"><f a="param1:param2">
	<c path="java.util.function.BiConsumer.T"/>
	<c path="java.util.function.BiConsumer.U"/>
	<x path="Void"/>
</f></accept>
		<andThen public="1" set="method">
			<f a="param1">
				<c path="java.util.function.BiConsumer">
					<d/>
					<d/>
				</c>
				<c path="java.util.function.BiConsumer">
					<c path="java.util.function.BiConsumer.T"/>
					<c path="java.util.function.BiConsumer.U"/>
				</c>
			</f>
			<meta><m n=":java.default"/></meta>
		</andThen>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.BiConsumer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.BiFunction" params="T:U:R" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/BiFunction.class" extern="1" interface="1">
		<apply public="1" set="method"><f a="param1:param2">
	<c path="java.util.function.BiFunction.T"/>
	<c path="java.util.function.BiFunction.U"/>
	<c path="java.util.function.BiFunction.R"/>
</f></apply>
		<andThen public="1" params="V" set="method">
			<f a="param1">
				<c path="java.util.function.Function">
					<d/>
					<c path="andThen.V"/>
				</c>
				<c path="java.util.function.BiFunction">
					<c path="java.util.function.BiFunction.T"/>
					<c path="java.util.function.BiFunction.U"/>
					<c path="andThen.V"/>
				</c>
			</f>
			<meta><m n=":java.default"/></meta>
		</andThen>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.BiFunction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.BiPredicate" params="T:U" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/BiPredicate.class" extern="1" interface="1">
		<test public="1" set="method"><f a="param1:param2">
	<c path="java.util.function.BiPredicate.T"/>
	<c path="java.util.function.BiPredicate.U"/>
	<x path="Bool"/>
</f></test>
		<and public="1" set="method">
			<f a="param1">
				<c path="java.util.function.BiPredicate">
					<d/>
					<d/>
				</c>
				<c path="java.util.function.BiPredicate">
					<c path="java.util.function.BiPredicate.T"/>
					<c path="java.util.function.BiPredicate.U"/>
				</c>
			</f>
			<meta><m n=":java.default"/></meta>
		</and>
		<negate public="1" set="method">
			<f a=""><c path="java.util.function.BiPredicate">
	<c path="java.util.function.BiPredicate.T"/>
	<c path="java.util.function.BiPredicate.U"/>
</c></f>
			<meta><m n=":java.default"/></meta>
		</negate>
		<or public="1" set="method">
			<f a="param1">
				<c path="java.util.function.BiPredicate">
					<d/>
					<d/>
				</c>
				<c path="java.util.function.BiPredicate">
					<c path="java.util.function.BiPredicate.T"/>
					<c path="java.util.function.BiPredicate.U"/>
				</c>
			</f>
			<meta><m n=":java.default"/></meta>
		</or>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.BiPredicate"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.BinaryOperator" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/BinaryOperator.class" extern="1" interface="1">
		<extends path="java.util.function.BiFunction">
			<c path="java.util.function.BinaryOperator.T"/>
			<c path="java.util.function.BinaryOperator.T"/>
			<c path="java.util.function.BinaryOperator.T"/>
		</extends>
		<minBy public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.Comparator"><d/></c>
				<c path="java.util.function.BinaryOperator"><c path="minBy.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</minBy>
		<maxBy public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.Comparator"><d/></c>
				<c path="java.util.function.BinaryOperator"><c path="maxBy.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</maxBy>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.BinaryOperator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.DoubleBinaryOperator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/DoubleBinaryOperator.class" extern="1" interface="1">
		<applyAsDouble public="1" set="method"><f a="param1:param2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></applyAsDouble>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.DoubleBinaryOperator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.DoubleFunction" params="R" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/DoubleFunction.class" extern="1" interface="1">
		<apply public="1" set="method"><f a="param1">
	<x path="Float"/>
	<c path="java.util.function.DoubleFunction.R"/>
</f></apply>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.DoubleFunction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.DoublePredicate" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/DoublePredicate.class" extern="1" interface="1">
		<test public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Bool"/>
</f></test>
		<and public="1" set="method">
			<f a="param1">
				<c path="java.util.function.DoublePredicate"/>
				<c path="java.util.function.DoublePredicate"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</and>
		<negate public="1" set="method">
			<f a=""><c path="java.util.function.DoublePredicate"/></f>
			<meta><m n=":java.default"/></meta>
		</negate>
		<or public="1" set="method">
			<f a="param1">
				<c path="java.util.function.DoublePredicate"/>
				<c path="java.util.function.DoublePredicate"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</or>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.DoublePredicate"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.DoubleSupplier" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/DoubleSupplier.class" extern="1" interface="1">
		<getAsDouble public="1" set="method"><f a=""><x path="Float"/></f></getAsDouble>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.DoubleSupplier"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.DoubleToIntFunction" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/DoubleToIntFunction.class" extern="1" interface="1">
		<applyAsInt public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Int"/>
</f></applyAsInt>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.DoubleToIntFunction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.DoubleToLongFunction" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/DoubleToLongFunction.class" extern="1" interface="1">
		<applyAsLong public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></applyAsLong>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.DoubleToLongFunction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.DoubleUnaryOperator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/DoubleUnaryOperator.class" extern="1" interface="1">
		<identity public="1" set="method" static="1">
			<f a=""><c path="java.util.function.DoubleUnaryOperator"/></f>
			<meta><m n=":java.default"/></meta>
		</identity>
		<applyAsDouble public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Float"/>
</f></applyAsDouble>
		<compose public="1" set="method">
			<f a="param1">
				<c path="java.util.function.DoubleUnaryOperator"/>
				<c path="java.util.function.DoubleUnaryOperator"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</compose>
		<andThen public="1" set="method">
			<f a="param1">
				<c path="java.util.function.DoubleUnaryOperator"/>
				<c path="java.util.function.DoubleUnaryOperator"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</andThen>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.DoubleUnaryOperator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.Function" params="T:R" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/Function.class" extern="1" interface="1">
		<identity public="1" params="T" set="method" static="1">
			<f a=""><c path="java.util.function.Function">
	<c path="identity.T"/>
	<c path="identity.T"/>
</c></f>
			<meta><m n=":java.default"/></meta>
		</identity>
		<apply public="1" set="method"><f a="param1">
	<c path="java.util.function.Function.T"/>
	<c path="java.util.function.Function.R"/>
</f></apply>
		<compose public="1" params="V" set="method">
			<f a="param1">
				<c path="java.util.function.Function">
					<d/>
					<c path="java.util.function.Function.T"/>
				</c>
				<c path="java.util.function.Function">
					<c path="compose.V"/>
					<c path="java.util.function.Function.R"/>
				</c>
			</f>
			<meta><m n=":java.default"/></meta>
		</compose>
		<andThen public="1" params="V" set="method">
			<f a="param1">
				<c path="java.util.function.Function">
					<d/>
					<c path="andThen.V"/>
				</c>
				<c path="java.util.function.Function">
					<c path="java.util.function.Function.T"/>
					<c path="andThen.V"/>
				</c>
			</f>
			<meta><m n=":java.default"/></meta>
		</andThen>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.Function"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.IntBinaryOperator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/IntBinaryOperator.class" extern="1" interface="1">
		<applyAsInt public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></applyAsInt>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.IntBinaryOperator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.IntFunction" params="R" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/IntFunction.class" extern="1" interface="1">
		<apply public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="java.util.function.IntFunction.R"/>
</f></apply>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.IntFunction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.IntPredicate" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/IntPredicate.class" extern="1" interface="1">
		<test public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></test>
		<and public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntPredicate"/>
				<c path="java.util.function.IntPredicate"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</and>
		<negate public="1" set="method">
			<f a=""><c path="java.util.function.IntPredicate"/></f>
			<meta><m n=":java.default"/></meta>
		</negate>
		<or public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntPredicate"/>
				<c path="java.util.function.IntPredicate"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</or>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.IntPredicate"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.IntSupplier" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/IntSupplier.class" extern="1" interface="1">
		<getAsInt public="1" set="method"><f a=""><x path="Int"/></f></getAsInt>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.IntSupplier"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.IntToDoubleFunction" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/IntToDoubleFunction.class" extern="1" interface="1">
		<applyAsDouble public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Float"/>
</f></applyAsDouble>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.IntToDoubleFunction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.IntToLongFunction" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/IntToLongFunction.class" extern="1" interface="1">
		<applyAsLong public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="haxe.Int64"/>
</f></applyAsLong>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.IntToLongFunction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.IntUnaryOperator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/IntUnaryOperator.class" extern="1" interface="1">
		<identity public="1" set="method" static="1">
			<f a=""><c path="java.util.function.IntUnaryOperator"/></f>
			<meta><m n=":java.default"/></meta>
		</identity>
		<applyAsInt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></applyAsInt>
		<compose public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntUnaryOperator"/>
				<c path="java.util.function.IntUnaryOperator"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</compose>
		<andThen public="1" set="method">
			<f a="param1">
				<c path="java.util.function.IntUnaryOperator"/>
				<c path="java.util.function.IntUnaryOperator"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</andThen>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.IntUnaryOperator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.LongBinaryOperator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/LongBinaryOperator.class" extern="1" interface="1">
		<applyAsLong public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></applyAsLong>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.LongBinaryOperator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.LongFunction" params="R" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/LongFunction.class" extern="1" interface="1">
		<apply public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.util.function.LongFunction.R"/>
</f></apply>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.LongFunction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.LongPredicate" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/LongPredicate.class" extern="1" interface="1">
		<test public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Bool"/>
</f></test>
		<and public="1" set="method">
			<f a="param1">
				<c path="java.util.function.LongPredicate"/>
				<c path="java.util.function.LongPredicate"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</and>
		<negate public="1" set="method">
			<f a=""><c path="java.util.function.LongPredicate"/></f>
			<meta><m n=":java.default"/></meta>
		</negate>
		<or public="1" set="method">
			<f a="param1">
				<c path="java.util.function.LongPredicate"/>
				<c path="java.util.function.LongPredicate"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</or>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.LongPredicate"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.LongSupplier" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/LongSupplier.class" extern="1" interface="1">
		<getAsLong public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getAsLong>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.LongSupplier"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.LongToDoubleFunction" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/LongToDoubleFunction.class" extern="1" interface="1">
		<applyAsDouble public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Float"/>
</f></applyAsDouble>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.LongToDoubleFunction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.LongToIntFunction" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/LongToIntFunction.class" extern="1" interface="1">
		<applyAsInt public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Int"/>
</f></applyAsInt>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.LongToIntFunction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.LongUnaryOperator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/LongUnaryOperator.class" extern="1" interface="1">
		<identity public="1" set="method" static="1">
			<f a=""><c path="java.util.function.LongUnaryOperator"/></f>
			<meta><m n=":java.default"/></meta>
		</identity>
		<applyAsLong public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></applyAsLong>
		<compose public="1" set="method">
			<f a="param1">
				<c path="java.util.function.LongUnaryOperator"/>
				<c path="java.util.function.LongUnaryOperator"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</compose>
		<andThen public="1" set="method">
			<f a="param1">
				<c path="java.util.function.LongUnaryOperator"/>
				<c path="java.util.function.LongUnaryOperator"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</andThen>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.LongUnaryOperator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.ObjDoubleConsumer" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/ObjDoubleConsumer.class" extern="1" interface="1">
		<accept public="1" set="method"><f a="param1:param2">
	<c path="java.util.function.ObjDoubleConsumer.T"/>
	<x path="Float"/>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.ObjDoubleConsumer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.ObjIntConsumer" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/ObjIntConsumer.class" extern="1" interface="1">
		<accept public="1" set="method"><f a="param1:param2">
	<c path="java.util.function.ObjIntConsumer.T"/>
	<x path="Int"/>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.ObjIntConsumer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.ObjLongConsumer" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/ObjLongConsumer.class" extern="1" interface="1">
		<accept public="1" set="method"><f a="param1:param2">
	<c path="java.util.function.ObjLongConsumer.T"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></accept>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.ObjLongConsumer"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.Predicate" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/Predicate.class" extern="1" interface="1">
		<isEqual public="1" params="T" set="method" static="1">
			<f a="param1">
				<d/>
				<c path="java.util.function.Predicate"><c path="isEqual.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</isEqual>
		<test public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate.T"/>
	<x path="Bool"/>
</f></test>
		<and public="1" set="method">
			<f a="param1">
				<c path="java.util.function.Predicate"><d/></c>
				<c path="java.util.function.Predicate"><c path="java.util.function.Predicate.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</and>
		<negate public="1" set="method">
			<f a=""><c path="java.util.function.Predicate"><c path="java.util.function.Predicate.T"/></c></f>
			<meta><m n=":java.default"/></meta>
		</negate>
		<or public="1" set="method">
			<f a="param1">
				<c path="java.util.function.Predicate"><d/></c>
				<c path="java.util.function.Predicate"><c path="java.util.function.Predicate.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</or>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.Predicate"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.Supplier" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/Supplier.class" extern="1" interface="1">
		<get public="1" set="method"><f a=""><c path="java.util.function.Supplier.T"/></f></get>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.Supplier"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.ToDoubleFunction" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/ToDoubleFunction.class" extern="1" interface="1">
		<applyAsDouble public="1" set="method"><f a="param1">
	<c path="java.util.function.ToDoubleFunction.T"/>
	<x path="Float"/>
</f></applyAsDouble>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.ToDoubleFunction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.ToIntFunction" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/ToIntFunction.class" extern="1" interface="1">
		<applyAsInt public="1" set="method"><f a="param1">
	<c path="java.util.function.ToIntFunction.T"/>
	<x path="Int"/>
</f></applyAsInt>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.ToIntFunction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.ToLongFunction" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/ToLongFunction.class" extern="1" interface="1">
		<applyAsLong public="1" set="method"><f a="param1">
	<c path="java.util.function.ToLongFunction.T"/>
	<x path="haxe.Int64"/>
</f></applyAsLong>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.ToLongFunction"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.function.UnaryOperator" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/function/UnaryOperator.class" extern="1" interface="1">
		<extends path="java.util.function.Function">
			<c path="java.util.function.UnaryOperator.T"/>
			<c path="java.util.function.UnaryOperator.T"/>
		</extends>
		<identity public="1" params="T" set="method" static="1">
			<f a=""><c path="java.util.function.UnaryOperator"><c path="identity.T"/></c></f>
			<meta><m n=":java.default"/></meta>
		</identity>
		<meta>
			<m n=":functionalInterface"/>
			<m n=":native"><e>"java.util.function.UnaryOperator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.jar.Attributes" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/jar/Attributes.class" extern="1">
		<implements path="java.lang.Cloneable"/>
		<implements path="java.util.Map">
			<d/>
			<d/>
		</implements>
		<get public="1" set="method"><f a="param1">
	<d/>
	<d/>
</f></get>
		<getValue public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<overloads><getValue public="1" set="method"><f a="param1">
	<c path="java.util.jar.Attributes_Name"/>
	<c path="String"/>
</f></getValue></overloads>
		</getValue>
		<put public="1" set="method"><f a="param1:param2">
	<d/>
	<d/>
	<d/>
</f></put>
		<putValue public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></putValue>
		<remove public="1" set="method"><f a="param1">
	<d/>
	<d/>
</f></remove>
		<containsValue public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsValue>
		<containsKey public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></containsKey>
		<putAll public="1" set="method"><f a="param1">
	<c path="java.util.Map">
		<d/>
		<d/>
	</c>
	<x path="Void"/>
</f></putAll>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<keySet public="1" set="method"><f a=""><c path="java.util.Set"><d/></c></f></keySet>
		<values public="1" set="method"><f a=""><c path="java.util.Collection"><d/></c></f></values>
		<entrySet public="1" set="method"><f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></c></f></entrySet>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<write public="1" set="method"><f a="param1">
	<c path="java.io.DataOutputStream"/>
	<x path="Void"/>
</f></write>
		<writeMain public="1" set="method"><f a="param1">
	<c path="java.io.DataOutputStream"/>
	<x path="Void"/>
</f></writeMain>
		<read public="1" set="method"><f a="param1:param2">
	<c path="java.util.jar.Manifest_FastInputStream"/>
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></read>
		<map public="1"><c path="java.util.Map">
	<d/>
	<d/>
</c></map>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.util.jar.Attributes"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.jar.Attributes"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.jar.Attributes_Name" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/jar/Attributes$Name.class" module="java.util.jar.Attributes" extern="1">
		<MANIFEST_VERSION final="1" public="1" set="null" static="1"><c path="java.util.jar.Attributes_Name"/></MANIFEST_VERSION>
		<SIGNATURE_VERSION final="1" public="1" set="null" static="1"><c path="java.util.jar.Attributes_Name"/></SIGNATURE_VERSION>
		<CONTENT_TYPE final="1" public="1" set="null" static="1"><c path="java.util.jar.Attributes_Name"/></CONTENT_TYPE>
		<CLASS_PATH final="1" public="1" set="null" static="1"><c path="java.util.jar.Attributes_Name"/></CLASS_PATH>
		<MAIN_CLASS final="1" public="1" set="null" static="1"><c path="java.util.jar.Attributes_Name"/></MAIN_CLASS>
		<SEALED final="1" public="1" set="null" static="1"><c path="java.util.jar.Attributes_Name"/></SEALED>
		<EXTENSION_LIST final="1" public="1" set="null" static="1"><c path="java.util.jar.Attributes_Name"/></EXTENSION_LIST>
		<EXTENSION_NAME final="1" public="1" set="null" static="1"><c path="java.util.jar.Attributes_Name"/></EXTENSION_NAME>
		<EXTENSION_INSTALLATION final="1" public="1" set="null" static="1">
			<c path="java.util.jar.Attributes_Name"/>
			<meta><m n=":deprecated"/></meta>
		</EXTENSION_INSTALLATION>
		<IMPLEMENTATION_TITLE final="1" public="1" set="null" static="1"><c path="java.util.jar.Attributes_Name"/></IMPLEMENTATION_TITLE>
		<IMPLEMENTATION_VERSION final="1" public="1" set="null" static="1"><c path="java.util.jar.Attributes_Name"/></IMPLEMENTATION_VERSION>
		<IMPLEMENTATION_VENDOR final="1" public="1" set="null" static="1"><c path="java.util.jar.Attributes_Name"/></IMPLEMENTATION_VENDOR>
		<IMPLEMENTATION_VENDOR_ID final="1" public="1" set="null" static="1">
			<c path="java.util.jar.Attributes_Name"/>
			<meta><m n=":deprecated"/></meta>
		</IMPLEMENTATION_VENDOR_ID>
		<IMPLEMENTATION_URL final="1" public="1" set="null" static="1">
			<c path="java.util.jar.Attributes_Name"/>
			<meta><m n=":deprecated"/></meta>
		</IMPLEMENTATION_URL>
		<SPECIFICATION_TITLE final="1" public="1" set="null" static="1"><c path="java.util.jar.Attributes_Name"/></SPECIFICATION_TITLE>
		<SPECIFICATION_VERSION final="1" public="1" set="null" static="1"><c path="java.util.jar.Attributes_Name"/></SPECIFICATION_VERSION>
		<SPECIFICATION_VENDOR final="1" public="1" set="null" static="1"><c path="java.util.jar.Attributes_Name"/></SPECIFICATION_VENDOR>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.jar.Attributes$Name"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.zip.ZipConstants" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/zip/ZipConstants.class" extern="1" interface="1">
		<LOCSIG final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></LOCSIG>
		<EXTSIG final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></EXTSIG>
		<CENSIG final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></CENSIG>
		<ENDSIG final="1" public="1" set="null" static="1"><x path="haxe.Int64"/></ENDSIG>
		<LOCHDR final="1" public="1" set="null" static="1"><x path="Int"/></LOCHDR>
		<EXTHDR final="1" public="1" set="null" static="1"><x path="Int"/></EXTHDR>
		<CENHDR final="1" public="1" set="null" static="1"><x path="Int"/></CENHDR>
		<ENDHDR final="1" public="1" set="null" static="1"><x path="Int"/></ENDHDR>
		<LOCVER final="1" public="1" set="null" static="1"><x path="Int"/></LOCVER>
		<LOCFLG final="1" public="1" set="null" static="1"><x path="Int"/></LOCFLG>
		<LOCHOW final="1" public="1" set="null" static="1"><x path="Int"/></LOCHOW>
		<LOCTIM final="1" public="1" set="null" static="1"><x path="Int"/></LOCTIM>
		<LOCCRC final="1" public="1" set="null" static="1"><x path="Int"/></LOCCRC>
		<LOCSIZ final="1" public="1" set="null" static="1"><x path="Int"/></LOCSIZ>
		<LOCLEN final="1" public="1" set="null" static="1"><x path="Int"/></LOCLEN>
		<LOCNAM final="1" public="1" set="null" static="1"><x path="Int"/></LOCNAM>
		<LOCEXT final="1" public="1" set="null" static="1"><x path="Int"/></LOCEXT>
		<EXTCRC final="1" public="1" set="null" static="1"><x path="Int"/></EXTCRC>
		<EXTSIZ final="1" public="1" set="null" static="1"><x path="Int"/></EXTSIZ>
		<EXTLEN final="1" public="1" set="null" static="1"><x path="Int"/></EXTLEN>
		<CENVEM final="1" public="1" set="null" static="1"><x path="Int"/></CENVEM>
		<CENVER final="1" public="1" set="null" static="1"><x path="Int"/></CENVER>
		<CENFLG final="1" public="1" set="null" static="1"><x path="Int"/></CENFLG>
		<CENHOW final="1" public="1" set="null" static="1"><x path="Int"/></CENHOW>
		<CENTIM final="1" public="1" set="null" static="1"><x path="Int"/></CENTIM>
		<CENCRC final="1" public="1" set="null" static="1"><x path="Int"/></CENCRC>
		<CENSIZ final="1" public="1" set="null" static="1"><x path="Int"/></CENSIZ>
		<CENLEN final="1" public="1" set="null" static="1"><x path="Int"/></CENLEN>
		<CENNAM final="1" public="1" set="null" static="1"><x path="Int"/></CENNAM>
		<CENEXT final="1" public="1" set="null" static="1"><x path="Int"/></CENEXT>
		<CENCOM final="1" public="1" set="null" static="1"><x path="Int"/></CENCOM>
		<CENDSK final="1" public="1" set="null" static="1"><x path="Int"/></CENDSK>
		<CENATT final="1" public="1" set="null" static="1"><x path="Int"/></CENATT>
		<CENATX final="1" public="1" set="null" static="1"><x path="Int"/></CENATX>
		<CENOFF final="1" public="1" set="null" static="1"><x path="Int"/></CENOFF>
		<ENDSUB final="1" public="1" set="null" static="1"><x path="Int"/></ENDSUB>
		<ENDTOT final="1" public="1" set="null" static="1"><x path="Int"/></ENDTOT>
		<ENDSIZ final="1" public="1" set="null" static="1"><x path="Int"/></ENDSIZ>
		<ENDOFF final="1" public="1" set="null" static="1"><x path="Int"/></ENDOFF>
		<ENDCOM final="1" public="1" set="null" static="1"><x path="Int"/></ENDCOM>
		<meta>
			<m n=":native"><e>"java.util.zip.ZipConstants"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.zip.ZipEntry" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/zip/ZipEntry.class" extern="1">
		<implements path="java.util.zip.ZipConstants"/>
		<implements path="java.lang.Cloneable"/>
		<STORED final="1" public="1" set="null" static="1"><x path="Int"/></STORED>
		<DEFLATED final="1" public="1" set="null" static="1"><x path="Int"/></DEFLATED>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<setTime public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setTime>
		<getTime public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getTime>
		<setLastModifiedTime public="1" set="method"><f a="param1">
	<c path="java.nio.file.attribute.FileTime"/>
	<c path="java.util.zip.ZipEntry"/>
</f></setLastModifiedTime>
		<getLastModifiedTime public="1" set="method"><f a=""><c path="java.nio.file.attribute.FileTime"/></f></getLastModifiedTime>
		<setLastAccessTime public="1" set="method"><f a="param1">
	<c path="java.nio.file.attribute.FileTime"/>
	<c path="java.util.zip.ZipEntry"/>
</f></setLastAccessTime>
		<getLastAccessTime public="1" set="method"><f a=""><c path="java.nio.file.attribute.FileTime"/></f></getLastAccessTime>
		<setCreationTime public="1" set="method"><f a="param1">
	<c path="java.nio.file.attribute.FileTime"/>
	<c path="java.util.zip.ZipEntry"/>
</f></setCreationTime>
		<getCreationTime public="1" set="method"><f a=""><c path="java.nio.file.attribute.FileTime"/></f></getCreationTime>
		<setSize public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setSize>
		<getSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getSize>
		<getCompressedSize public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getCompressedSize>
		<setCompressedSize public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setCompressedSize>
		<setCrc public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></setCrc>
		<getCrc public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getCrc>
		<setMethod public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setMethod>
		<getMethod public="1" set="method"><f a=""><x path="Int"/></f></getMethod>
		<setExtra public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></setExtra>
		<setExtra0 public="1" set="method"><f a="param1:param2">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></setExtra0>
		<getExtra public="1" set="method"><f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f></getExtra>
		<setComment public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Void"/>
</f></setComment>
		<getComment public="1" set="method"><f a=""><c path="String"/></f></getComment>
		<isDirectory public="1" set="method"><f a=""><x path="Bool"/></f></isDirectory>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<name public="1"><c path="String"/></name>
		<time public="1"><x path="haxe.Int64"/></time>
		<mtime public="1"><c path="java.nio.file.attribute.FileTime"/></mtime>
		<atime public="1"><c path="java.nio.file.attribute.FileTime"/></atime>
		<ctime public="1"><c path="java.nio.file.attribute.FileTime"/></ctime>
		<crc public="1"><x path="haxe.Int64"/></crc>
		<size public="1"><x path="haxe.Int64"/></size>
		<csize public="1"><x path="haxe.Int64"/></csize>
		<method public="1"><x path="Int"/></method>
		<flag public="1"><x path="Int"/></flag>
		<extra public="1"><c path="java.NativeArray"><t path="java.types.Int8"/></c></extra>
		<comment public="1"><c path="String"/></comment>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a=""><x path="Void"/></f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.util.zip.ZipEntry"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.zip.ZipEntry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.jar.JarEntry" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/jar/JarEntry.class" extern="1">
		<extends path="java.util.zip.ZipEntry"/>
		<getAttributes public="1" set="method"><f a=""><c path="java.util.jar.Attributes"/></f></getAttributes>
		<getCertificates public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.security.cert.Certificate"/></c></f></getCertificates>
		<getCodeSigners public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.security.CodeSigner"/></c></f></getCodeSigners>
		<attr public="1"><c path="java.util.jar.Attributes"/></attr>
		<certs public="1"><c path="java.NativeArray"><c path="java.security.cert.Certificate"/></c></certs>
		<signers public="1"><c path="java.NativeArray"><c path="java.security.CodeSigner"/></c></signers>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.util.jar.JarEntry"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.util.zip.ZipEntry"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.jar.JarEntry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.zip.ZipFile" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/zip/ZipFile.class" extern="1">
		<implements path="java.util.zip.ZipConstants"/>
		<implements path="java.io.Closeable"/>
		<OPEN_READ final="1" public="1" set="null" static="1"><x path="Int"/></OPEN_READ>
		<OPEN_DELETE final="1" public="1" set="null" static="1"><x path="Int"/></OPEN_DELETE>
		<getComment public="1" set="method"><f a=""><c path="String"/></f></getComment>
		<getEntry public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.zip.ZipEntry"/>
</f></getEntry>
		<getInputStream public="1" set="method"><f a="param1">
	<c path="java.util.zip.ZipEntry"/>
	<c path="java.io.InputStream"/>
</f></getInputStream>
		<getName public="1" set="method"><f a=""><c path="String"/></f></getName>
		<entries public="1" set="method"><f a=""><c path="java.util.Enumeration"><c path="java.util.zip.ZipEntry"/></c></f></entries>
		<stream public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.zip.ZipEntry"/></c></f></stream>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<finalize public="1" set="method"><f a=""><x path="Void"/></f></finalize>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.File"/>
	<c path="java.nio.charset.Charset"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.nio.charset.Charset"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.io.File"/>
	<x path="Int"/>
	<c path="java.nio.charset.Charset"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.io.File"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.File"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.zip.ZipFile"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.jar.JarFile" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/jar/JarFile.class" extern="1">
		<extends path="java.util.zip.ZipFile"/>
		<MANIFEST_NAME final="1" public="1" set="null" static="1"><c path="String"/></MANIFEST_NAME>
		<getManifest public="1" set="method"><f a=""><c path="java.util.jar.Manifest"/></f></getManifest>
		<getJarEntry public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.jar.JarEntry"/>
</f></getJarEntry>
		<getEntry public="1" set="method" override="1"><f a="param1">
	<c path="String"/>
	<c path="java.util.zip.ZipEntry"/>
</f></getEntry>
		<entries public="1" set="method" override="1"><f a=""><c path="java.util.Enumeration"><c path="java.util.jar.JarEntry"/></c></f></entries>
		<stream public="1" set="method" override="1"><f a=""><c path="java.util.stream.Stream"><c path="java.util.jar.JarEntry"/></c></f></stream>
		<getInputStream public="1" set="method" override="1"><f a="param1">
	<c path="java.util.zip.ZipEntry"/>
	<c path="java.io.InputStream"/>
</f></getInputStream>
		<hasClassPathAttribute public="1" set="method"><f a=""><x path="Bool"/></f></hasClassPathAttribute>
		<newEntry public="1" set="method"><f a="param1">
	<c path="java.util.zip.ZipEntry"/>
	<c path="java.util.jar.JarEntry"/>
</f></newEntry>
		<entryNames public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><c path="java.security.CodeSource"/></c>
	<c path="java.util.Enumeration"><c path="String"/></c>
</f></entryNames>
		<entries2 public="1" set="method"><f a=""><c path="java.util.Enumeration"><c path="java.util.jar.JarEntry"/></c></f></entries2>
		<getCodeSources public="1" set="method"><f a="param1">
	<c path="java.net.URL"/>
	<c path="java.NativeArray"><c path="java.security.CodeSource"/></c>
</f></getCodeSources>
		<getCodeSource public="1" set="method"><f a="param1:param2">
	<c path="java.net.URL"/>
	<c path="String"/>
	<c path="java.security.CodeSource"/>
</f></getCodeSource>
		<setEagerValidation public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></setEagerValidation>
		<getManifestDigests public="1" set="method"><f a=""><c path="java.util.List"><d/></c></f></getManifestDigests>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.io.File"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.File"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.io.File"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.jar.JarFile"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.jar.JarFile_JarFileEntry" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/jar/JarFile$JarFileEntry.class" module="java.util.jar.JarFile" extern="1">
		<extends path="java.util.jar.JarEntry"/>
		<getAttributes public="1" set="method" override="1"><f a=""><c path="java.util.jar.Attributes"/></f></getAttributes>
		<getCertificates public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.security.cert.Certificate"/></c></f></getCertificates>
		<getCodeSigners public="1" set="method" override="1"><f a=""><c path="java.NativeArray"><c path="java.security.CodeSigner"/></c></f></getCodeSigners>
		<this_0 final="1" public="1">
			<c path="java.util.jar.JarFile"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.jar.JarFile"/>
	<c path="java.util.zip.ZipEntry"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.jar.JarFile$JarFileEntry"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.jar.JarFile_JarEntryIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/jar/JarFile$JarEntryIterator.class" module="java.util.jar.JarFile" extern="1">
		<implements path="java.util.Iterator"><c path="java.util.jar.JarEntry"/></implements>
		<implements path="java.util.Enumeration"><c path="java.util.jar.JarEntry"/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><c path="java.util.jar.JarEntry"/></f></next>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<nextElement public="1" set="method"><f a=""><c path="java.util.jar.JarEntry"/></f></nextElement>
		<e final="1" public="1"><c path="java.util.Enumeration"><c path="java.util.zip.ZipEntry"/></c></e>
		<this_0 final="1" public="1">
			<c path="java.util.jar.JarFile"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.jar.JarFile"/>
	<c path="java.util.jar.JarFile_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.jar.JarFile$JarEntryIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.jar.JarFile_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/jar/JarFile$3.class" module="java.util.jar.JarFile" extern="1">
		<implements path="java.util.Enumeration"><c path="String"/></implements>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<nextElement public="1" set="method"><f a=""><c path="String"/></f></nextElement>
		<name public="1"><c path="String"/></name>
		<val_entries final="1" public="1">
			<c path="java.util.Enumeration"><d/></c>
			<meta><m n=":native"><e>"val$entries"</e></m></meta>
		</val_entries>
		<this_0 final="1" public="1">
			<c path="java.util.jar.JarFile"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.jar.JarFile"/>
	<c path="java.util.Enumeration"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.jar.JarFile$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.jar.JarFile_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/jar/JarFile$2.class" module="java.util.jar.JarFile" extern="1">
		<implements path="java.util.Enumeration"><c path="java.util.jar.JarEntry"/></implements>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<nextElement public="1" set="method"><f a=""><c path="java.util.jar.JarFile_JarFileEntry"/></f></nextElement>
		<entry public="1"><c path="java.util.zip.ZipEntry"/></entry>
		<val_enum_ final="1" public="1">
			<c path="java.util.Enumeration"><d/></c>
			<meta><m n=":native"><e>"val$enum_"</e></m></meta>
		</val_enum_>
		<this_0 final="1" public="1">
			<c path="java.util.jar.JarFile"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.jar.JarFile"/>
	<c path="java.util.Enumeration"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.jar.JarFile$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.jar.JarFile_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/jar/JarFile$1.class" module="java.util.jar.JarFile" extern="1">
		<implements path="java.util.Enumeration"><c path="String"/></implements>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<nextElement public="1" set="method"><f a=""><c path="String"/></f></nextElement>
		<this_0 final="1" public="1">
			<c path="java.util.jar.JarFile"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.jar.JarFile"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.jar.JarFile$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.jar.Manifest" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/jar/Manifest.class" extern="1">
		<implements path="java.lang.Cloneable"/>
		<make72Safe public="1" set="method" static="1"><f a="param1">
	<c path="java.lang.StringBuffer"/>
	<x path="Void"/>
</f></make72Safe>
		<getMainAttributes public="1" set="method"><f a=""><c path="java.util.jar.Attributes"/></f></getMainAttributes>
		<getEntries public="1" set="method"><f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="java.util.jar.Attributes"/>
</c></f></getEntries>
		<getAttributes public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="java.util.jar.Attributes"/>
</f></getAttributes>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<write public="1" set="method"><f a="param1">
	<c path="java.io.OutputStream"/>
	<x path="Void"/>
</f></write>
		<read public="1" set="method"><f a="param1">
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></read>
		<equals public="1" set="method"><f a="param1">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method"><f a=""><x path="Int"/></f></hashCode>
		<clone public="1" set="method"><f a=""><d/></f></clone>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.util.jar.Manifest"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1">
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.jar.Manifest"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.jar.Manifest_FastInputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/jar/Manifest$FastInputStream.class" module="java.util.jar.Manifest" extern="1">
		<extends path="java.io.FilterInputStream"/>
		<read public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<overloads><read public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></read></overloads>
		</read>
		<readLine public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><readLine public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
</f></readLine></overloads>
		</readLine>
		<peek public="1" set="method"><f a=""><t path="java.types.Int8"/></f></peek>
		<skip public="1" set="method" override="1"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></skip>
		<available public="1" set="method" override="1"><f a=""><x path="Int"/></f></available>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.io.InputStream"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.jar.Manifest$FastInputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.MatchResult" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/MatchResult.class" extern="1" interface="1">
		<start public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><start public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></start></overloads>
		</start>
		<end public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><end public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></end></overloads>
		</end>
		<group public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><group public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="String"/>
</f></group></overloads>
		</group>
		<groupCount public="1" set="method"><f a=""><x path="Int"/></f></groupCount>
		<meta>
			<m n=":native"><e>"java.util.regex.MatchResult"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Matcher" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Matcher.class" extern="1">
		<implements path="java.util.regex.MatchResult"/>
		<quoteReplacement public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></quoteReplacement>
		<ENDANCHOR final="1" public="1" set="null" static="1"><x path="Int"/></ENDANCHOR>
		<NOANCHOR final="1" public="1" set="null" static="1"><x path="Int"/></NOANCHOR>
		<pattern public="1" set="method"><f a=""><c path="java.util.regex.Pattern"/></f></pattern>
		<toMatchResult public="1" set="method"><f a=""><c path="java.util.regex.MatchResult"/></f></toMatchResult>
		<usePattern public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern"/>
	<c path="java.util.regex.Matcher"/>
</f></usePattern>
		<reset public="1" set="method">
			<f a=""><c path="java.util.regex.Matcher"/></f>
			<overloads><reset public="1" set="method"><f a="param1">
	<c path="java.lang.CharSequence"/>
	<c path="java.util.regex.Matcher"/>
</f></reset></overloads>
		</reset>
		<start public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads>
				<start public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Int"/>
</f></start>
				<start public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></start>
			</overloads>
		</start>
		<end public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads>
				<end public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Int"/>
</f></end>
				<end public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></end>
			</overloads>
		</end>
		<group public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads>
				<group public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></group>
				<group public="1" set="method"><f a="param1">
	<x path="Int"/>
	<c path="String"/>
</f></group>
			</overloads>
		</group>
		<groupCount public="1" set="method"><f a=""><x path="Int"/></f></groupCount>
		<matches public="1" set="method"><f a=""><x path="Bool"/></f></matches>
		<find public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<overloads><find public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></find></overloads>
		</find>
		<lookingAt public="1" set="method"><f a=""><x path="Bool"/></f></lookingAt>
		<appendReplacement public="1" set="method"><f a="param1:param2">
	<c path="java.lang.StringBuffer"/>
	<c path="String"/>
	<c path="java.util.regex.Matcher"/>
</f></appendReplacement>
		<appendTail public="1" set="method"><f a="param1">
	<c path="java.lang.StringBuffer"/>
	<c path="java.lang.StringBuffer"/>
</f></appendTail>
		<replaceAll public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></replaceAll>
		<replaceFirst public="1" set="method"><f a="param1">
	<c path="String"/>
	<c path="String"/>
</f></replaceFirst>
		<region public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.regex.Matcher"/>
</f></region>
		<regionStart public="1" set="method"><f a=""><x path="Int"/></f></regionStart>
		<regionEnd public="1" set="method"><f a=""><x path="Int"/></f></regionEnd>
		<hasTransparentBounds public="1" set="method"><f a=""><x path="Bool"/></f></hasTransparentBounds>
		<useTransparentBounds public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<c path="java.util.regex.Matcher"/>
</f></useTransparentBounds>
		<hasAnchoringBounds public="1" set="method"><f a=""><x path="Bool"/></f></hasAnchoringBounds>
		<useAnchoringBounds public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<c path="java.util.regex.Matcher"/>
</f></useAnchoringBounds>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<hitEnd public="1" set="method"><f a=""><x path="Bool"/></f></hitEnd>
		<requireEnd public="1" set="method"><f a=""><x path="Bool"/></f></requireEnd>
		<search public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></search>
		<match public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></match>
		<getTextLength public="1" set="method"><f a=""><x path="Int"/></f></getTextLength>
		<getSubSequence public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
</f></getSubSequence>
		<charAt public="1" set="method"><f a="param1">
	<x path="Int"/>
	<t path="java.types.Char16"/>
</f></charAt>
		<getMatchedGroupIndex public="1" set="method"><f a="param1">
	<c path="String"/>
	<x path="Int"/>
</f></getMatchedGroupIndex>
		<parentPattern public="1"><c path="java.util.regex.Pattern"/></parentPattern>
		<groups public="1"><c path="java.NativeArray"><x path="Int"/></c></groups>
		<from public="1"><x path="Int"/></from>
		<to public="1"><x path="Int"/></to>
		<lookbehindTo public="1"><x path="Int"/></lookbehindTo>
		<text public="1"><c path="java.lang.CharSequence"/></text>
		<acceptMode public="1"><x path="Int"/></acceptMode>
		<first public="1"><x path="Int"/></first>
		<last public="1"><x path="Int"/></last>
		<oldLast public="1"><x path="Int"/></oldLast>
		<lastAppendPosition public="1"><x path="Int"/></lastAppendPosition>
		<locals public="1"><c path="java.NativeArray"><x path="Int"/></c></locals>
		<transparentBounds public="1"><x path="Bool"/></transparentBounds>
		<anchoringBounds public="1"><x path="Bool"/></anchoringBounds>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads><new public="1" set="method"><f a="param1:param2">
	<c path="java.util.regex.Pattern"/>
	<c path="java.lang.CharSequence"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.regex.Matcher"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Node" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Node.class" module="java.util.regex.Pattern" extern="1">
		<match public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<next public="1"><c path="java.util.regex.Pattern_Node"/></next>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Node"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharProperty" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharProperty.class" module="java.util.regex.Pattern" extern="1" abstract="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<isSatisfiedBy abstract="1" public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<complement public="1" set="method"><f a=""><c path="java.util.regex.Pattern_CharProperty"/></f></complement>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharProperty"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BmpCharProperty" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$BmpCharProperty.class" module="java.util.regex.Pattern" extern="1" abstract="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$BmpCharProperty"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_VertWS" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$VertWS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BmpCharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$VertWS"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Utype" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Utype.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<uprop final="1" public="1"><e path="java.util.regex.UnicodeProp"/></uprop>
		<new public="1" set="method"><f a="param1">
	<e path="java.util.regex.UnicodeProp"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Utype"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_UnixDot" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$UnixDot.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$UnixDot"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_UnixDollar" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$UnixDollar.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<multiline public="1"><x path="Bool"/></multiline>
		<new public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$UnixDollar"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_UnixCaret" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$UnixCaret.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$UnixCaret"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_TreeInfo" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$TreeInfo.class" module="java.util.regex.Pattern" extern="1">
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<minLength public="1"><x path="Int"/></minLength>
		<maxLength public="1"><x path="Int"/></maxLength>
		<maxValid public="1"><x path="Bool"/></maxValid>
		<deterministic public="1"><x path="Bool"/></deterministic>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$TreeInfo"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Start" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Start.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<minLength public="1"><x path="Int"/></minLength>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Start"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_StartS" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$StartS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Start"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$StartS"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceNode" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SliceNode.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<buffer public="1"><c path="java.NativeArray"><x path="Int"/></c></buffer>
		<new public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$SliceNode"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceIS" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SliceIS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<toLower public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></toLower>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$SliceIS"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceUS" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SliceUS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceIS"/>
		<toLower public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Int"/>
</f></toLower>
		<new public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$SliceUS"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceU" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SliceU.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$SliceU"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceS" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SliceS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$SliceS"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceI" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SliceI.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$SliceI"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Slice" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Slice.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Slice"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SingleU" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SingleU.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<lower final="1" public="1"><x path="Int"/></lower>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$SingleU"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SingleS" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SingleS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<c final="1" public="1"><x path="Int"/></c>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$SingleS"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SingleI" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SingleI.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BmpCharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<lower final="1" public="1"><x path="Int"/></lower>
		<upper final="1" public="1"><x path="Int"/></upper>
		<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$SingleI"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Single" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Single.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BmpCharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<c final="1" public="1"><x path="Int"/></c>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Single"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Script" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Script.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<script final="1" public="1"><e path="java.lang.Character_UnicodeScript"/></script>
		<new public="1" set="method"><f a="param1">
	<e path="java.lang.Character_UnicodeScript"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Script"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Ques" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Ques.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<atom public="1"><c path="java.util.regex.Pattern_Node"/></atom>
		<type public="1"><x path="Int"/></type>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Ques"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Prolog" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Prolog.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<loop public="1"><c path="java.util.regex.Pattern_Loop"/></loop>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_Loop"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Prolog"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Pos" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Pos.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<cond public="1"><c path="java.util.regex.Pattern_Node"/></cond>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Pos"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_NotBehind" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$NotBehind.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<cond public="1"><c path="java.util.regex.Pattern_Node"/></cond>
		<rmax public="1"><x path="Int"/></rmax>
		<rmin public="1"><x path="Int"/></rmin>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$NotBehind"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_NotBehindS" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$NotBehindS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_NotBehind"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$NotBehindS"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Neg" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Neg.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<cond public="1"><c path="java.util.regex.Pattern_Node"/></cond>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Neg"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Loop" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Loop.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<matchInit public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></matchInit>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<body public="1"><c path="java.util.regex.Pattern_Node"/></body>
		<countIndex public="1"><x path="Int"/></countIndex>
		<beginIndex public="1"><x path="Int"/></beginIndex>
		<cmin public="1"><x path="Int"/></cmin>
		<cmax public="1"><x path="Int"/></cmax>
		<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Loop"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_LineEnding" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$LineEnding.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$LineEnding"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_LazyLoop" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$LazyLoop.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Loop"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<matchInit public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></matchInit>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$LazyLoop"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_LastNode" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$LastNode.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$LastNode"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_LastMatch" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$LastMatch.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$LastMatch"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_HorizWS" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$HorizWS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BmpCharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$HorizWS"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_GroupTail" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$GroupTail.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<localIndex public="1"><x path="Int"/></localIndex>
		<groupIndex public="1"><x path="Int"/></groupIndex>
		<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$GroupTail"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_GroupRef" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$GroupRef.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<head public="1"><c path="java.util.regex.Pattern_GroupHead"/></head>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_GroupHead"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$GroupRef"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_GroupHead" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$GroupHead.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<matchRef public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></matchRef>
		<localIndex public="1"><x path="Int"/></localIndex>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$GroupHead"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_GroupCurly" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$GroupCurly.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<match0 public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match0>
		<match1 public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match1>
		<match2 public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match2>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<atom public="1"><c path="java.util.regex.Pattern_Node"/></atom>
		<type public="1"><x path="Int"/></type>
		<cmin public="1"><x path="Int"/></cmin>
		<cmax public="1"><x path="Int"/></cmax>
		<localIndex public="1"><x path="Int"/></localIndex>
		<groupIndex public="1"><x path="Int"/></groupIndex>
		<capture public="1"><x path="Bool"/></capture>
		<new public="1" set="method"><f a="param1:param2:param3:param4:param5:param6:param7">
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$GroupCurly"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_First" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$First.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<atom public="1"><c path="java.util.regex.Pattern_Node"/></atom>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$First"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_End" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$End.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$End"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Dot" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Dot.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Dot"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Dollar" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Dollar.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<multiline public="1"><x path="Bool"/></multiline>
		<new public="1" set="method"><f a="param1">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Dollar"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Curly" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Curly.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<match0 public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match0>
		<match1 public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match1>
		<match2 public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match2>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<atom public="1"><c path="java.util.regex.Pattern_Node"/></atom>
		<type public="1"><x path="Int"/></type>
		<cmin public="1"><x path="Int"/></cmin>
		<cmax public="1"><x path="Int"/></cmax>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Curly"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Ctype" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Ctype.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BmpCharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<ctype final="1" public="1"><x path="Int"/></ctype>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Ctype"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Conditional" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Conditional.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<cond public="1"><c path="java.util.regex.Pattern_Node"/></cond>
		<yes public="1"><c path="java.util.regex.Pattern_Node"/></yes>
		<not public="1"><c path="java.util.regex.Pattern_Node"/></not>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.regex.Pattern_Node"/>
	<c path="java.util.regex.Pattern_Node"/>
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Conditional"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CIBackRef" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CIBackRef.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<groupIndex public="1"><x path="Int"/></groupIndex>
		<doUnicodeCase public="1"><x path="Bool"/></doUnicodeCase>
		<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CIBackRef"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames.class" module="java.util.regex.Pattern" extern="1">
		<charPropertyFor public="1" set="method" static="1"><f a="param1">
	<c path="String"/>
	<c path="java.util.regex.Pattern_CharProperty"/>
</f></charPropertyFor>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$CloneableProperty.class" module="java.util.regex.Pattern" extern="1" abstract="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<implements path="java.lang.Cloneable"/>
		<clone public="1" set="method"><f a=""><c path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/></f></clone>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$CloneableProperty"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_CharPropertyFactory" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$CharPropertyFactory.class" module="java.util.regex.Pattern" extern="1" abstract="1">
		<make abstract="1" public="1" set="method"><f a=""><c path="java.util.regex.Pattern_CharProperty"/></f></make>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_1"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_9" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$9.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$9"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_8" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$8.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$8"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_7" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$7.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$7"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_6" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$6.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$6"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_5" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$5.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CharPropertyFactory"/>
		<make public="1" set="method" override="1"><f a=""><c path="java.util.regex.Pattern_CharProperty"/></f></make>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$5"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_4" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$4.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CharPropertyFactory"/>
		<make public="1" set="method" override="1"><f a=""><c path="java.util.regex.Pattern_CharProperty"/></f></make>
		<val_p final="1" public="1">
			<c path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
			<meta><m n=":native"><e>"val$p"</e></m></meta>
		</val_p>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$4"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$3.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CharPropertyFactory"/>
		<make public="1" set="method" override="1"><f a=""><c path="java.util.regex.Pattern_CharProperty"/></f></make>
		<val_ctype final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$ctype"</e></m></meta>
		</val_ctype>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_23" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$23.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$23"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_22" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$22.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$22"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_21" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$21.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$21"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_20" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$20.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$20"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$2.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CharPropertyFactory"/>
		<make public="1" set="method" override="1"><f a=""><c path="java.util.regex.Pattern_CharProperty"/></f></make>
		<val_lower final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$lower"</e></m></meta>
		</val_lower>
		<val_upper final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$upper"</e></m></meta>
		</val_upper>
		<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_19" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$19.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$19"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_18" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$18.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$18"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_17" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$17.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$17"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_16" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$16.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$16"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_15" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$15.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$15"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_14" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$14.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$14"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_13" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$13.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$13"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_12" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$12.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$12"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_11" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$11.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$11"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_10" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$10.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$10"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$1.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharPropertyNames_CharPropertyFactory"/>
		<make public="1" set="method" override="1"><f a=""><c path="java.util.regex.Pattern_CharProperty"/></f></make>
		<val_typeMask final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$typeMask"</e></m></meta>
		</val_typeMask>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharProperty_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharProperty$1.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<this_0 final="1" public="1">
			<c path="java.util.regex.Pattern_CharProperty"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_CharProperty"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$CharProperty$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Category" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Category.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<typeMask final="1" public="1"><x path="Int"/></typeMask>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Category"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Caret" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Caret.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Caret"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BranchConn" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$BranchConn.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$BranchConn"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Branch" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Branch.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<add public="1" set="method"><f a="param1">
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Void"/>
</f></add>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<atoms public="1"><c path="java.NativeArray"><c path="java.util.regex.Pattern_Node"/></c></atoms>
		<size public="1"><x path="Int"/></size>
		<conn public="1"><c path="java.util.regex.Pattern_Node"/></conn>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.regex.Pattern_Node"/>
	<c path="java.util.regex.Pattern_Node"/>
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Branch"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Bound" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Bound.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<LEFT public="1" static="1"><x path="Int"/></LEFT>
		<RIGHT public="1" static="1"><x path="Int"/></RIGHT>
		<BOTH public="1" static="1"><x path="Int"/></BOTH>
		<NONE public="1" static="1"><x path="Int"/></NONE>
		<isWord public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isWord>
		<check public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Int"/>
</f></check>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<type public="1"><x path="Int"/></type>
		<useUWORD public="1"><x path="Bool"/></useUWORD>
		<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Bound"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BnM" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$BnM.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<optimize public="1" set="method" static="1"><f a="param1">
	<c path="java.util.regex.Pattern_Node"/>
	<c path="java.util.regex.Pattern_Node"/>
</f></optimize>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<buffer public="1"><c path="java.NativeArray"><x path="Int"/></c></buffer>
		<lastOcc public="1"><c path="java.NativeArray"><x path="Int"/></c></lastOcc>
		<optoSft public="1"><c path="java.NativeArray"><x path="Int"/></c></optoSft>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$BnM"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BnMS" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$BnMS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BnM"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<lengthInChars public="1"><x path="Int"/></lengthInChars>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$BnMS"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Block" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Block.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<block final="1" public="1"><c path="java.lang.Character_UnicodeBlock"/></block>
		<new public="1" set="method"><f a="param1">
	<c path="java.lang.Character_UnicodeBlock"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Block"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BitClass" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$BitClass.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BmpCharProperty"/>
		<add public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.util.regex.Pattern_BitClass"/>
</f></add>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<bits final="1" public="1"><c path="java.NativeArray"><x path="Bool"/></c></bits>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$BitClass"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Behind" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Behind.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<cond public="1"><c path="java.util.regex.Pattern_Node"/></cond>
		<rmax public="1"><x path="Int"/></rmax>
		<rmin public="1"><x path="Int"/></rmin>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Behind"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BehindS" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$BehindS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Behind"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.regex.Pattern_Node"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$BehindS"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Begin" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Begin.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$Begin"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BackRef" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$BackRef.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<study public="1" set="method" override="1"><f a="param1">
	<c path="java.util.regex.Pattern_TreeInfo"/>
	<x path="Bool"/>
</f></study>
		<groupIndex public="1"><x path="Int"/></groupIndex>
		<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$BackRef"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_All" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$All.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$All"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_7" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$7.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<val_rhs final="1" public="1">
			<c path="java.util.regex.Pattern_CharProperty"/>
			<meta><m n=":native"><e>"val$rhs"</e></m></meta>
		</val_rhs>
		<val_lhs final="1" public="1">
			<c path="java.util.regex.Pattern_CharProperty"/>
			<meta><m n=":native"><e>"val$lhs"</e></m></meta>
		</val_lhs>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.regex.Pattern_CharProperty"/>
	<c path="java.util.regex.Pattern_CharProperty"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$7"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_6" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$6.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<val_lhs final="1" public="1">
			<c path="java.util.regex.Pattern_CharProperty"/>
			<meta><m n=":native"><e>"val$lhs"</e></m></meta>
		</val_lhs>
		<val_rhs final="1" public="1">
			<c path="java.util.regex.Pattern_CharProperty"/>
			<meta><m n=":native"><e>"val$rhs"</e></m></meta>
		</val_rhs>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.regex.Pattern_CharProperty"/>
	<c path="java.util.regex.Pattern_CharProperty"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$6"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_5" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$5.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<val_lhs final="1" public="1">
			<c path="java.util.regex.Pattern_CharProperty"/>
			<meta><m n=":native"><e>"val$lhs"</e></m></meta>
		</val_lhs>
		<val_rhs final="1" public="1">
			<c path="java.util.regex.Pattern_CharProperty"/>
			<meta><m n=":native"><e>"val$rhs"</e></m></meta>
		</val_rhs>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.regex.Pattern_CharProperty"/>
	<c path="java.util.regex.Pattern_CharProperty"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$5"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_4" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$4.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<match public="1" set="method" override="1"><f a="param1:param2:param3">
	<c path="java.util.regex.Matcher"/>
	<x path="Int"/>
	<c path="java.lang.CharSequence"/>
	<x path="Bool"/>
</f></match>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$4"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$3.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<val_lower final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$lower"</e></m></meta>
		</val_lower>
		<val_upper final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$upper"</e></m></meta>
		</val_upper>
		<this_0 final="1" public="1">
			<c path="java.util.regex.Pattern"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.regex.Pattern"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$3"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$2.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<val_lower final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$lower"</e></m></meta>
		</val_lower>
		<val_upper final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$upper"</e></m></meta>
		</val_upper>
		<this_0 final="1" public="1">
			<c path="java.util.regex.Pattern"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3">
	<c path="java.util.regex.Pattern"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$2"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_1MatcherIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$1MatcherIterator.class" module="java.util.regex.Pattern" extern="1">
		<implements path="java.util.Iterator"><c path="String"/></implements>
		<next public="1" set="method"><f a=""><c path="String"/></f></next>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<val_input final="1" public="1">
			<c path="java.lang.CharSequence"/>
			<meta><m n=":native"><e>"val$input"</e></m></meta>
		</val_input>
		<this_0 final="1" public="1">
			<c path="java.util.regex.Pattern"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$1MatcherIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$1.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<isSatisfiedBy public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSatisfiedBy>
		<val_lower final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$lower"</e></m></meta>
		</val_lower>
		<val_upper final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$upper"</e></m></meta>
		</val_upper>
		<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.regex.Pattern$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.util.regex.UnicodeProp" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp.class">
		<ALPHABETIC/>
		<LETTER/>
		<IDEOGRAPHIC/>
		<LOWERCASE/>
		<UPPERCASE/>
		<TITLECASE/>
		<WHITE_SPACE/>
		<CONTROL/>
		<PUNCTUATION/>
		<HEX_DIGIT/>
		<ASSIGNED/>
		<NONCHARACTER_CODE_POINT/>
		<DIGIT/>
		<ALNUM/>
		<BLANK/>
		<GRAPH/>
		<PRINT/>
		<WORD/>
		<JOIN_CONTROL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.util.regex.UnicodeProp"</e></m>
		</meta>
	</enum>
	<enum path="java.util.regex.UnicodeProp_9" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$9.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$9"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_8" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$8.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$8"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_7" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$7.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$7"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_6" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$6.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$6"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_5" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$5.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$5"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_4" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$4.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$4"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_3" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$3.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$3"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_2" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$2.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$2"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_19" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$19.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$19"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_18" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$18.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$18"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_17" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$17.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$17"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_16" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$16.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$16"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_15" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$15.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$15"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_14" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$14.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$14"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_13" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$13.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$13"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_12" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$12.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$12"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_11" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$11.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$11"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_10" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$10.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$10"</e></m>
</meta></enum>
	<enum path="java.util.regex.UnicodeProp_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/UnicodeProp$1.class" module="java.util.regex.UnicodeProp"><meta>
	<m n=":flatEnum"/>
	<m n=":native"><e>"java.util.regex.UnicodeProp$1"</e></m>
</meta></enum>
	<class path="java.util.spi.LocaleServiceProvider" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/spi/LocaleServiceProvider.class" extern="1" abstract="1">
		<getAvailableLocales abstract="1" public="1" set="method"><f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f></getAvailableLocales>
		<isSupportedLocale public="1" set="method"><f a="param1">
	<c path="java.util.Locale"/>
	<x path="Bool"/>
</f></isSupportedLocale>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.spi.LocaleServiceProvider"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.spi.LocaleNameProvider" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/spi/LocaleNameProvider.class" extern="1" abstract="1">
		<extends path="java.util.spi.LocaleServiceProvider"/>
		<getDisplayLanguage abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getDisplayLanguage>
		<getDisplayScript public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getDisplayScript>
		<getDisplayCountry abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getDisplayCountry>
		<getDisplayVariant abstract="1" public="1" set="method"><f a="param1:param2">
	<c path="String"/>
	<c path="java.util.Locale"/>
	<c path="String"/>
</f></getDisplayVariant>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.spi.LocaleNameProvider"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.stream.BaseStream" params="T:S" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/BaseStream.class" extern="1" interface="1">
		<extends path="java.lang.AutoCloseable"/>
		<iterator public="1" set="method"><f a=""><c path="java.util.Iterator"><c path="java.util.stream.BaseStream.T"/></c></f></iterator>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator"><c path="java.util.stream.BaseStream.T"/></c></f></spliterator>
		<isParallel public="1" set="method"><f a=""><x path="Bool"/></f></isParallel>
		<sequential public="1" set="method"><f a=""><c path="java.util.stream.BaseStream.S"/></f></sequential>
		<parallel public="1" set="method"><f a=""><c path="java.util.stream.BaseStream.S"/></f></parallel>
		<unordered public="1" set="method"><f a=""><c path="java.util.stream.BaseStream.S"/></f></unordered>
		<onClose public="1" set="method"><f a="param1">
	<c path="java.lang.Runnable"/>
	<c path="java.util.stream.BaseStream.S"/>
</f></onClose>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<meta>
			<m n=":native"><e>"java.util.stream.BaseStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.stream.Collector" params="T:A:R" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/Collector.class" extern="1" interface="1">
		<of public="1" params="T:R" set="method" static="1">
			<f a="param1:param2:param3:param4">
				<c path="java.util.function.Supplier"><c path="of.R"/></c>
				<c path="java.util.function.BiConsumer">
					<c path="of.R"/>
					<c path="of.T"/>
				</c>
				<c path="java.util.function.BinaryOperator"><c path="of.R"/></c>
				<x path="haxe.Rest"><e path="java.util.stream.Collector_Characteristics"/></x>
				<c path="java.util.stream.Collector">
					<c path="of.T"/>
					<c path="of.R"/>
					<c path="of.R"/>
				</c>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><of public="1" params="T:A:R" set="method">
	<f a="param1:param2:param3:param4:param5">
		<c path="java.util.function.Supplier"><c path="of.A"/></c>
		<c path="java.util.function.BiConsumer">
			<c path="of.A"/>
			<c path="of.T"/>
		</c>
		<c path="java.util.function.BinaryOperator"><c path="of.A"/></c>
		<c path="java.util.function.Function">
			<c path="of.A"/>
			<c path="of.R"/>
		</c>
		<x path="haxe.Rest"><e path="java.util.stream.Collector_Characteristics"/></x>
		<c path="java.util.stream.Collector">
			<c path="of.T"/>
			<c path="of.A"/>
			<c path="of.R"/>
		</c>
	</f>
	<meta><m n=":java.default"/></meta>
</of></overloads>
		</of>
		<supplier public="1" set="method"><f a=""><c path="java.util.function.Supplier"><c path="java.util.stream.Collector.A"/></c></f></supplier>
		<accumulator public="1" set="method"><f a=""><c path="java.util.function.BiConsumer">
	<c path="java.util.stream.Collector.A"/>
	<c path="java.util.stream.Collector.T"/>
</c></f></accumulator>
		<combiner public="1" set="method"><f a=""><c path="java.util.function.BinaryOperator"><c path="java.util.stream.Collector.A"/></c></f></combiner>
		<finisher public="1" set="method"><f a=""><c path="java.util.function.Function">
	<c path="java.util.stream.Collector.A"/>
	<c path="java.util.stream.Collector.R"/>
</c></f></finisher>
		<characteristics public="1" set="method"><f a=""><c path="java.util.Set"><e path="java.util.stream.Collector_Characteristics"/></c></f></characteristics>
		<meta>
			<m n=":native"><e>"java.util.stream.Collector"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<enum path="java.util.stream.Collector_Characteristics" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/Collector$Characteristics.class" module="java.util.stream.Collector">
		<CONCURRENT/>
		<UNORDERED/>
		<IDENTITY_FINISH/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":native"><e>"java.util.stream.Collector$Characteristics"</e></m>
		</meta>
	</enum>
	<class path="java.util.stream.DoubleStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/DoubleStream.class" extern="1" interface="1">
		<extends path="java.util.stream.BaseStream">
			<x path="java.lang.Double"/>
			<c path="java.util.stream.DoubleStream"/>
		</extends>
		<builder public="1" set="method" static="1">
			<f a=""><c path="java.util.stream.DoubleStream_Builder"/></f>
			<meta><m n=":java.default"/></meta>
		</builder>
		<empty public="1" set="method" static="1">
			<f a=""><c path="java.util.stream.DoubleStream"/></f>
			<meta><m n=":java.default"/></meta>
		</empty>
		<of public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<c path="java.util.stream.DoubleStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><of public="1" set="method">
	<f a="param1">
		<c path="java.NativeArray"><x path="Float"/></c>
		<c path="java.util.stream.DoubleStream"/>
	</f>
	<meta><m n=":java.default"/></meta>
</of></overloads>
		</of>
		<iterate public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<c path="java.util.function.DoubleUnaryOperator"/>
				<c path="java.util.stream.DoubleStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</iterate>
		<generate public="1" set="method" static="1">
			<f a="param1">
				<c path="java.util.function.DoubleSupplier"/>
				<c path="java.util.stream.DoubleStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</generate>
		<concat public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.util.stream.DoubleStream"/>
				<c path="java.util.stream.DoubleStream"/>
				<c path="java.util.stream.DoubleStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</concat>
		<filter public="1" set="method"><f a="param1">
	<c path="java.util.function.DoublePredicate"/>
	<c path="java.util.stream.DoubleStream"/>
</f></filter>
		<map public="1" set="method"><f a="param1">
	<c path="java.util.function.DoubleUnaryOperator"/>
	<c path="java.util.stream.DoubleStream"/>
</f></map>
		<mapToObj public="1" params="U" set="method"><f a="param1">
	<c path="java.util.function.DoubleFunction"><c path="mapToObj.U"/></c>
	<c path="java.util.stream.Stream"><c path="mapToObj.U"/></c>
</f></mapToObj>
		<mapToInt public="1" set="method"><f a="param1">
	<c path="java.util.function.DoubleToIntFunction"/>
	<c path="java.util.stream.IntStream"/>
</f></mapToInt>
		<mapToLong public="1" set="method"><f a="param1">
	<c path="java.util.function.DoubleToLongFunction"/>
	<c path="java.util.stream.LongStream"/>
</f></mapToLong>
		<flatMap public="1" set="method"><f a="param1">
	<c path="java.util.function.DoubleFunction"><c path="java.util.stream.DoubleStream"/></c>
	<c path="java.util.stream.DoubleStream"/>
</f></flatMap>
		<distinct public="1" set="method"><f a=""><c path="java.util.stream.DoubleStream"/></f></distinct>
		<sorted public="1" set="method"><f a=""><c path="java.util.stream.DoubleStream"/></f></sorted>
		<peek public="1" set="method"><f a="param1">
	<c path="java.util.function.DoubleConsumer"/>
	<c path="java.util.stream.DoubleStream"/>
</f></peek>
		<limit public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.util.stream.DoubleStream"/>
</f></limit>
		<skip public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.util.stream.DoubleStream"/>
</f></skip>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.DoubleConsumer"/>
	<x path="Void"/>
</f></forEach>
		<forEachOrdered public="1" set="method"><f a="param1">
	<c path="java.util.function.DoubleConsumer"/>
	<x path="Void"/>
</f></forEachOrdered>
		<toArray public="1" set="method"><f a=""><c path="java.NativeArray"><x path="Float"/></c></f></toArray>
		<reduce public="1" set="method">
			<f a="param1:param2">
				<x path="Float"/>
				<c path="java.util.function.DoubleBinaryOperator"/>
				<x path="Float"/>
			</f>
			<overloads><reduce public="1" set="method"><f a="param1">
	<c path="java.util.function.DoubleBinaryOperator"/>
	<c path="java.util.OptionalDouble"/>
</f></reduce></overloads>
		</reduce>
		<collect public="1" params="R" set="method"><f a="param1:param2:param3">
	<c path="java.util.function.Supplier"><c path="collect.R"/></c>
	<c path="java.util.function.ObjDoubleConsumer"><c path="collect.R"/></c>
	<c path="java.util.function.BiConsumer">
		<c path="collect.R"/>
		<c path="collect.R"/>
	</c>
	<c path="collect.R"/>
</f></collect>
		<sum public="1" set="method"><f a=""><x path="Float"/></f></sum>
		<min public="1" set="method"><f a=""><c path="java.util.OptionalDouble"/></f></min>
		<max public="1" set="method"><f a=""><c path="java.util.OptionalDouble"/></f></max>
		<count public="1" set="method"><f a=""><x path="haxe.Int64"/></f></count>
		<average public="1" set="method"><f a=""><c path="java.util.OptionalDouble"/></f></average>
		<summaryStatistics public="1" set="method"><f a=""><c path="java.util.DoubleSummaryStatistics"/></f></summaryStatistics>
		<anyMatch public="1" set="method"><f a="param1">
	<c path="java.util.function.DoublePredicate"/>
	<x path="Bool"/>
</f></anyMatch>
		<allMatch public="1" set="method"><f a="param1">
	<c path="java.util.function.DoublePredicate"/>
	<x path="Bool"/>
</f></allMatch>
		<noneMatch public="1" set="method"><f a="param1">
	<c path="java.util.function.DoublePredicate"/>
	<x path="Bool"/>
</f></noneMatch>
		<findFirst public="1" set="method"><f a=""><c path="java.util.OptionalDouble"/></f></findFirst>
		<findAny public="1" set="method"><f a=""><c path="java.util.OptionalDouble"/></f></findAny>
		<boxed public="1" set="method"><f a=""><c path="java.util.stream.Stream"><x path="java.lang.Double"/></c></f></boxed>
		<sequential public="1" set="method"><f a=""><c path="java.util.stream.DoubleStream"/></f></sequential>
		<parallel public="1" set="method"><f a=""><c path="java.util.stream.DoubleStream"/></f></parallel>
		<iterator public="1" set="method"><f a=""><c path="java.util.PrimitiveIterator_OfDouble"/></f></iterator>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator_OfDouble"/></f></spliterator>
		<meta>
			<m n=":native"><e>"java.util.stream.DoubleStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.stream.DoubleStream_Builder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/DoubleStream$Builder.class" module="java.util.stream.DoubleStream" extern="1" interface="1">
		<extends path="java.util.function.DoubleConsumer"/>
		<accept public="1" set="method"><f a="param1">
	<x path="Float"/>
	<x path="Void"/>
</f></accept>
		<add public="1" set="method">
			<f a="param1">
				<x path="Float"/>
				<c path="java.util.stream.DoubleStream_Builder"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</add>
		<build public="1" set="method"><f a=""><c path="java.util.stream.DoubleStream"/></f></build>
		<meta>
			<m n=":native"><e>"java.util.stream.DoubleStream$Builder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.stream.DoubleStream_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/DoubleStream$1.class" module="java.util.stream.DoubleStream" extern="1">
		<implements path="java.util.PrimitiveIterator_OfDouble"/>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<nextDouble public="1" set="method"><f a=""><x path="Float"/></f></nextDouble>
		<t public="1"><x path="Float"/></t>
		<val_seed final="1" public="1">
			<x path="Float"/>
			<meta><m n=":native"><e>"val$seed"</e></m></meta>
		</val_seed>
		<val_f final="1" public="1">
			<c path="java.util.function.DoubleUnaryOperator"/>
			<meta><m n=":native"><e>"val$f"</e></m></meta>
		</val_f>
		<new public="1" set="method"><f a="param1:param2">
	<x path="Float"/>
	<c path="java.util.function.DoubleUnaryOperator"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.stream.DoubleStream$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.stream.IntStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/IntStream.class" extern="1" interface="1">
		<extends path="java.util.stream.BaseStream">
			<x path="java.lang.Integer"/>
			<c path="java.util.stream.IntStream"/>
		</extends>
		<builder public="1" set="method" static="1">
			<f a=""><c path="java.util.stream.IntStream_Builder"/></f>
			<meta><m n=":java.default"/></meta>
		</builder>
		<empty public="1" set="method" static="1">
			<f a=""><c path="java.util.stream.IntStream"/></f>
			<meta><m n=":java.default"/></meta>
		</empty>
		<of public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.util.stream.IntStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><of public="1" set="method">
	<f a="param1">
		<c path="java.NativeArray"><x path="Int"/></c>
		<c path="java.util.stream.IntStream"/>
	</f>
	<meta><m n=":java.default"/></meta>
</of></overloads>
		</of>
		<iterate public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.util.function.IntUnaryOperator"/>
				<c path="java.util.stream.IntStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</iterate>
		<generate public="1" set="method" static="1">
			<f a="param1">
				<c path="java.util.function.IntSupplier"/>
				<c path="java.util.stream.IntStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</generate>
		<range public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.util.stream.IntStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</range>
		<rangeClosed public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.util.stream.IntStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</rangeClosed>
		<concat public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.util.stream.IntStream"/>
				<c path="java.util.stream.IntStream"/>
				<c path="java.util.stream.IntStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</concat>
		<filter public="1" set="method"><f a="param1">
	<c path="java.util.function.IntPredicate"/>
	<c path="java.util.stream.IntStream"/>
</f></filter>
		<map public="1" set="method"><f a="param1">
	<c path="java.util.function.IntUnaryOperator"/>
	<c path="java.util.stream.IntStream"/>
</f></map>
		<mapToObj public="1" params="U" set="method"><f a="param1">
	<c path="java.util.function.IntFunction"><c path="mapToObj.U"/></c>
	<c path="java.util.stream.Stream"><c path="mapToObj.U"/></c>
</f></mapToObj>
		<mapToLong public="1" set="method"><f a="param1">
	<c path="java.util.function.IntToLongFunction"/>
	<c path="java.util.stream.LongStream"/>
</f></mapToLong>
		<mapToDouble public="1" set="method"><f a="param1">
	<c path="java.util.function.IntToDoubleFunction"/>
	<c path="java.util.stream.DoubleStream"/>
</f></mapToDouble>
		<flatMap public="1" set="method"><f a="param1">
	<c path="java.util.function.IntFunction"><c path="java.util.stream.IntStream"/></c>
	<c path="java.util.stream.IntStream"/>
</f></flatMap>
		<distinct public="1" set="method"><f a=""><c path="java.util.stream.IntStream"/></f></distinct>
		<sorted public="1" set="method"><f a=""><c path="java.util.stream.IntStream"/></f></sorted>
		<peek public="1" set="method"><f a="param1">
	<c path="java.util.function.IntConsumer"/>
	<c path="java.util.stream.IntStream"/>
</f></peek>
		<limit public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.util.stream.IntStream"/>
</f></limit>
		<skip public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.util.stream.IntStream"/>
</f></skip>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.IntConsumer"/>
	<x path="Void"/>
</f></forEach>
		<forEachOrdered public="1" set="method"><f a="param1">
	<c path="java.util.function.IntConsumer"/>
	<x path="Void"/>
</f></forEachOrdered>
		<toArray public="1" set="method"><f a=""><c path="java.NativeArray"><x path="Int"/></c></f></toArray>
		<reduce public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.util.function.IntBinaryOperator"/>
				<x path="Int"/>
			</f>
			<overloads><reduce public="1" set="method"><f a="param1">
	<c path="java.util.function.IntBinaryOperator"/>
	<c path="java.util.OptionalInt"/>
</f></reduce></overloads>
		</reduce>
		<collect public="1" params="R" set="method"><f a="param1:param2:param3">
	<c path="java.util.function.Supplier"><c path="collect.R"/></c>
	<c path="java.util.function.ObjIntConsumer"><c path="collect.R"/></c>
	<c path="java.util.function.BiConsumer">
		<c path="collect.R"/>
		<c path="collect.R"/>
	</c>
	<c path="collect.R"/>
</f></collect>
		<sum public="1" set="method"><f a=""><x path="Int"/></f></sum>
		<min public="1" set="method"><f a=""><c path="java.util.OptionalInt"/></f></min>
		<max public="1" set="method"><f a=""><c path="java.util.OptionalInt"/></f></max>
		<count public="1" set="method"><f a=""><x path="haxe.Int64"/></f></count>
		<average public="1" set="method"><f a=""><c path="java.util.OptionalDouble"/></f></average>
		<summaryStatistics public="1" set="method"><f a=""><c path="java.util.IntSummaryStatistics"/></f></summaryStatistics>
		<anyMatch public="1" set="method"><f a="param1">
	<c path="java.util.function.IntPredicate"/>
	<x path="Bool"/>
</f></anyMatch>
		<allMatch public="1" set="method"><f a="param1">
	<c path="java.util.function.IntPredicate"/>
	<x path="Bool"/>
</f></allMatch>
		<noneMatch public="1" set="method"><f a="param1">
	<c path="java.util.function.IntPredicate"/>
	<x path="Bool"/>
</f></noneMatch>
		<findFirst public="1" set="method"><f a=""><c path="java.util.OptionalInt"/></f></findFirst>
		<findAny public="1" set="method"><f a=""><c path="java.util.OptionalInt"/></f></findAny>
		<asLongStream public="1" set="method"><f a=""><c path="java.util.stream.LongStream"/></f></asLongStream>
		<asDoubleStream public="1" set="method"><f a=""><c path="java.util.stream.DoubleStream"/></f></asDoubleStream>
		<boxed public="1" set="method"><f a=""><c path="java.util.stream.Stream"><x path="java.lang.Integer"/></c></f></boxed>
		<sequential public="1" set="method"><f a=""><c path="java.util.stream.IntStream"/></f></sequential>
		<parallel public="1" set="method"><f a=""><c path="java.util.stream.IntStream"/></f></parallel>
		<iterator public="1" set="method"><f a=""><c path="java.util.PrimitiveIterator_OfInt"/></f></iterator>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator_OfInt"/></f></spliterator>
		<meta>
			<m n=":native"><e>"java.util.stream.IntStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.stream.IntStream_Builder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/IntStream$Builder.class" module="java.util.stream.IntStream" extern="1" interface="1">
		<extends path="java.util.function.IntConsumer"/>
		<accept public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></accept>
		<add public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.util.stream.IntStream_Builder"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</add>
		<build public="1" set="method"><f a=""><c path="java.util.stream.IntStream"/></f></build>
		<meta>
			<m n=":native"><e>"java.util.stream.IntStream$Builder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.stream.IntStream_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/IntStream$1.class" module="java.util.stream.IntStream" extern="1">
		<implements path="java.util.PrimitiveIterator_OfInt"/>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<nextInt public="1" set="method"><f a=""><x path="Int"/></f></nextInt>
		<t public="1"><x path="Int"/></t>
		<val_seed final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"val$seed"</e></m></meta>
		</val_seed>
		<val_f final="1" public="1">
			<c path="java.util.function.IntUnaryOperator"/>
			<meta><m n=":native"><e>"val$f"</e></m></meta>
		</val_f>
		<new public="1" set="method"><f a="param1:param2">
	<x path="Int"/>
	<c path="java.util.function.IntUnaryOperator"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.stream.IntStream$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.stream.LongStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/LongStream.class" extern="1" interface="1">
		<extends path="java.util.stream.BaseStream">
			<x path="java.lang.Long"/>
			<c path="java.util.stream.LongStream"/>
		</extends>
		<builder public="1" set="method" static="1">
			<f a=""><c path="java.util.stream.LongStream_Builder"/></f>
			<meta><m n=":java.default"/></meta>
		</builder>
		<empty public="1" set="method" static="1">
			<f a=""><c path="java.util.stream.LongStream"/></f>
			<meta><m n=":java.default"/></meta>
		</empty>
		<of public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.util.stream.LongStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><of public="1" set="method">
	<f a="param1">
		<c path="java.NativeArray"><x path="haxe.Int64"/></c>
		<c path="java.util.stream.LongStream"/>
	</f>
	<meta><m n=":java.default"/></meta>
</of></overloads>
		</of>
		<iterate public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<c path="java.util.function.LongUnaryOperator"/>
				<c path="java.util.stream.LongStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</iterate>
		<generate public="1" set="method" static="1">
			<f a="param1">
				<c path="java.util.function.LongSupplier"/>
				<c path="java.util.stream.LongStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</generate>
		<range public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<c path="java.util.stream.LongStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</range>
		<rangeClosed public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<c path="java.util.stream.LongStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</rangeClosed>
		<concat public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.util.stream.LongStream"/>
				<c path="java.util.stream.LongStream"/>
				<c path="java.util.stream.LongStream"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</concat>
		<filter public="1" set="method"><f a="param1">
	<c path="java.util.function.LongPredicate"/>
	<c path="java.util.stream.LongStream"/>
</f></filter>
		<map public="1" set="method"><f a="param1">
	<c path="java.util.function.LongUnaryOperator"/>
	<c path="java.util.stream.LongStream"/>
</f></map>
		<mapToObj public="1" params="U" set="method"><f a="param1">
	<c path="java.util.function.LongFunction"><c path="mapToObj.U"/></c>
	<c path="java.util.stream.Stream"><c path="mapToObj.U"/></c>
</f></mapToObj>
		<mapToInt public="1" set="method"><f a="param1">
	<c path="java.util.function.LongToIntFunction"/>
	<c path="java.util.stream.IntStream"/>
</f></mapToInt>
		<mapToDouble public="1" set="method"><f a="param1">
	<c path="java.util.function.LongToDoubleFunction"/>
	<c path="java.util.stream.DoubleStream"/>
</f></mapToDouble>
		<flatMap public="1" set="method"><f a="param1">
	<c path="java.util.function.LongFunction"><c path="java.util.stream.LongStream"/></c>
	<c path="java.util.stream.LongStream"/>
</f></flatMap>
		<distinct public="1" set="method"><f a=""><c path="java.util.stream.LongStream"/></f></distinct>
		<sorted public="1" set="method"><f a=""><c path="java.util.stream.LongStream"/></f></sorted>
		<peek public="1" set="method"><f a="param1">
	<c path="java.util.function.LongConsumer"/>
	<c path="java.util.stream.LongStream"/>
</f></peek>
		<limit public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.util.stream.LongStream"/>
</f></limit>
		<skip public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.util.stream.LongStream"/>
</f></skip>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.LongConsumer"/>
	<x path="Void"/>
</f></forEach>
		<forEachOrdered public="1" set="method"><f a="param1">
	<c path="java.util.function.LongConsumer"/>
	<x path="Void"/>
</f></forEachOrdered>
		<toArray public="1" set="method"><f a=""><c path="java.NativeArray"><x path="haxe.Int64"/></c></f></toArray>
		<reduce public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<c path="java.util.function.LongBinaryOperator"/>
				<x path="haxe.Int64"/>
			</f>
			<overloads><reduce public="1" set="method"><f a="param1">
	<c path="java.util.function.LongBinaryOperator"/>
	<c path="java.util.OptionalLong"/>
</f></reduce></overloads>
		</reduce>
		<collect public="1" params="R" set="method"><f a="param1:param2:param3">
	<c path="java.util.function.Supplier"><c path="collect.R"/></c>
	<c path="java.util.function.ObjLongConsumer"><c path="collect.R"/></c>
	<c path="java.util.function.BiConsumer">
		<c path="collect.R"/>
		<c path="collect.R"/>
	</c>
	<c path="collect.R"/>
</f></collect>
		<sum public="1" set="method"><f a=""><x path="haxe.Int64"/></f></sum>
		<min public="1" set="method"><f a=""><c path="java.util.OptionalLong"/></f></min>
		<max public="1" set="method"><f a=""><c path="java.util.OptionalLong"/></f></max>
		<count public="1" set="method"><f a=""><x path="haxe.Int64"/></f></count>
		<average public="1" set="method"><f a=""><c path="java.util.OptionalDouble"/></f></average>
		<summaryStatistics public="1" set="method"><f a=""><c path="java.util.LongSummaryStatistics"/></f></summaryStatistics>
		<anyMatch public="1" set="method"><f a="param1">
	<c path="java.util.function.LongPredicate"/>
	<x path="Bool"/>
</f></anyMatch>
		<allMatch public="1" set="method"><f a="param1">
	<c path="java.util.function.LongPredicate"/>
	<x path="Bool"/>
</f></allMatch>
		<noneMatch public="1" set="method"><f a="param1">
	<c path="java.util.function.LongPredicate"/>
	<x path="Bool"/>
</f></noneMatch>
		<findFirst public="1" set="method"><f a=""><c path="java.util.OptionalLong"/></f></findFirst>
		<findAny public="1" set="method"><f a=""><c path="java.util.OptionalLong"/></f></findAny>
		<asDoubleStream public="1" set="method"><f a=""><c path="java.util.stream.DoubleStream"/></f></asDoubleStream>
		<boxed public="1" set="method"><f a=""><c path="java.util.stream.Stream"><x path="java.lang.Long"/></c></f></boxed>
		<sequential public="1" set="method"><f a=""><c path="java.util.stream.LongStream"/></f></sequential>
		<parallel public="1" set="method"><f a=""><c path="java.util.stream.LongStream"/></f></parallel>
		<iterator public="1" set="method"><f a=""><c path="java.util.PrimitiveIterator_OfLong"/></f></iterator>
		<spliterator public="1" set="method"><f a=""><c path="java.util.Spliterator_OfLong"/></f></spliterator>
		<meta>
			<m n=":native"><e>"java.util.stream.LongStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.stream.LongStream_Builder" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/LongStream$Builder.class" module="java.util.stream.LongStream" extern="1" interface="1">
		<extends path="java.util.function.LongConsumer"/>
		<accept public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></accept>
		<add public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.util.stream.LongStream_Builder"/>
			</f>
			<meta><m n=":java.default"/></meta>
		</add>
		<build public="1" set="method"><f a=""><c path="java.util.stream.LongStream"/></f></build>
		<meta>
			<m n=":native"><e>"java.util.stream.LongStream$Builder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.stream.LongStream_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/LongStream$1.class" module="java.util.stream.LongStream" extern="1">
		<implements path="java.util.PrimitiveIterator_OfLong"/>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<nextLong public="1" set="method"><f a=""><x path="haxe.Int64"/></f></nextLong>
		<t public="1"><x path="haxe.Int64"/></t>
		<val_seed final="1" public="1">
			<x path="haxe.Int64"/>
			<meta><m n=":native"><e>"val$seed"</e></m></meta>
		</val_seed>
		<val_f final="1" public="1">
			<c path="java.util.function.LongUnaryOperator"/>
			<meta><m n=":native"><e>"val$f"</e></m></meta>
		</val_f>
		<new public="1" set="method"><f a="param1:param2">
	<x path="haxe.Int64"/>
	<c path="java.util.function.LongUnaryOperator"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.stream.LongStream$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.stream.Stream" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/Stream.class" extern="1" interface="1">
		<extends path="java.util.stream.BaseStream">
			<c path="java.util.stream.Stream.T"/>
			<c path="java.util.stream.Stream"><c path="java.util.stream.Stream.T"/></c>
		</extends>
		<builder public="1" params="T" set="method" static="1">
			<f a=""><c path="java.util.stream.Stream_Builder"><c path="builder.T"/></c></f>
			<meta><m n=":java.default"/></meta>
		</builder>
		<empty public="1" params="T" set="method" static="1">
			<f a=""><c path="java.util.stream.Stream"><c path="empty.T"/></c></f>
			<meta><m n=":java.default"/></meta>
		</empty>
		<of public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="of.T"/>
				<c path="java.util.stream.Stream"><c path="of.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
			<overloads><of public="1" params="T" set="method">
	<f a="param1">
		<x path="haxe.Rest"><c path="of.T"/></x>
		<c path="java.util.stream.Stream"><c path="of.T"/></c>
	</f>
	<meta><m n=":java.default"/></meta>
</of></overloads>
		</of>
		<iterate public="1" params="T" set="method" static="1">
			<f a="param1:param2">
				<c path="iterate.T"/>
				<c path="java.util.function.UnaryOperator"><c path="iterate.T"/></c>
				<c path="java.util.stream.Stream"><c path="iterate.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</iterate>
		<generate public="1" params="T" set="method" static="1">
			<f a="param1">
				<c path="java.util.function.Supplier"><c path="generate.T"/></c>
				<c path="java.util.stream.Stream"><c path="generate.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</generate>
		<concat public="1" params="T" set="method" static="1">
			<f a="param1:param2">
				<c path="java.util.stream.Stream"><c path="concat.T"/></c>
				<c path="java.util.stream.Stream"><c path="concat.T"/></c>
				<c path="java.util.stream.Stream"><c path="concat.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</concat>
		<filter public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<c path="java.util.stream.Stream"><c path="java.util.stream.Stream.T"/></c>
</f></filter>
		<map public="1" params="R" set="method"><f a="param1">
	<c path="java.util.function.Function">
		<d/>
		<c path="map.R"/>
	</c>
	<c path="java.util.stream.Stream"><c path="map.R"/></c>
</f></map>
		<mapToInt public="1" set="method"><f a="param1">
	<c path="java.util.function.ToIntFunction"><d/></c>
	<c path="java.util.stream.IntStream"/>
</f></mapToInt>
		<mapToLong public="1" set="method"><f a="param1">
	<c path="java.util.function.ToLongFunction"><d/></c>
	<c path="java.util.stream.LongStream"/>
</f></mapToLong>
		<mapToDouble public="1" set="method"><f a="param1">
	<c path="java.util.function.ToDoubleFunction"><d/></c>
	<c path="java.util.stream.DoubleStream"/>
</f></mapToDouble>
		<flatMap public="1" params="R" set="method"><f a="param1">
	<c path="java.util.function.Function">
		<d/>
		<c path="java.util.stream.Stream"><c path="flatMap.R"/></c>
	</c>
	<c path="java.util.stream.Stream"><c path="flatMap.R"/></c>
</f></flatMap>
		<flatMapToInt public="1" set="method"><f a="param1">
	<c path="java.util.function.Function">
		<d/>
		<c path="java.util.stream.IntStream"/>
	</c>
	<c path="java.util.stream.IntStream"/>
</f></flatMapToInt>
		<flatMapToLong public="1" set="method"><f a="param1">
	<c path="java.util.function.Function">
		<d/>
		<c path="java.util.stream.LongStream"/>
	</c>
	<c path="java.util.stream.LongStream"/>
</f></flatMapToLong>
		<flatMapToDouble public="1" set="method"><f a="param1">
	<c path="java.util.function.Function">
		<d/>
		<c path="java.util.stream.DoubleStream"/>
	</c>
	<c path="java.util.stream.DoubleStream"/>
</f></flatMapToDouble>
		<distinct public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.stream.Stream.T"/></c></f></distinct>
		<sorted public="1" set="method">
			<f a=""><c path="java.util.stream.Stream"><c path="java.util.stream.Stream.T"/></c></f>
			<overloads><sorted public="1" set="method"><f a="param1">
	<c path="java.util.Comparator"><d/></c>
	<c path="java.util.stream.Stream"><c path="java.util.stream.Stream.T"/></c>
</f></sorted></overloads>
		</sorted>
		<peek public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<c path="java.util.stream.Stream"><c path="java.util.stream.Stream.T"/></c>
</f></peek>
		<limit public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.util.stream.Stream"><c path="java.util.stream.Stream.T"/></c>
</f></limit>
		<skip public="1" set="method"><f a="param1">
	<x path="haxe.Int64"/>
	<c path="java.util.stream.Stream"><c path="java.util.stream.Stream.T"/></c>
</f></skip>
		<forEach public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEach>
		<forEachOrdered public="1" set="method"><f a="param1">
	<c path="java.util.function.Consumer"><d/></c>
	<x path="Void"/>
</f></forEachOrdered>
		<toArray public="1" set="method">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<overloads><toArray public="1" params="A" set="method"><f a="param1">
	<c path="java.util.function.IntFunction"><c path="java.NativeArray"><c path="toArray.A"/></c></c>
	<c path="java.NativeArray"><c path="toArray.A"/></c>
</f></toArray></overloads>
		</toArray>
		<reduce public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.stream.Stream.T"/>
				<c path="java.util.function.BinaryOperator"><c path="java.util.stream.Stream.T"/></c>
				<c path="java.util.stream.Stream.T"/>
			</f>
			<overloads>
				<reduce public="1" params="U" set="method"><f a="param1:param2:param3">
	<c path="reduce.U"/>
	<c path="java.util.function.BiFunction">
		<c path="reduce.U"/>
		<d/>
		<c path="reduce.U"/>
	</c>
	<c path="java.util.function.BinaryOperator"><c path="reduce.U"/></c>
	<c path="reduce.U"/>
</f></reduce>
				<reduce public="1" set="method"><f a="param1">
	<c path="java.util.function.BinaryOperator"><c path="java.util.stream.Stream.T"/></c>
	<c path="java.util.Optional"><c path="java.util.stream.Stream.T"/></c>
</f></reduce>
			</overloads>
		</reduce>
		<collect public="1" params="R" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.function.Supplier"><c path="collect.R"/></c>
				<c path="java.util.function.BiConsumer">
					<c path="collect.R"/>
					<d/>
				</c>
				<c path="java.util.function.BiConsumer">
					<c path="collect.R"/>
					<c path="collect.R"/>
				</c>
				<c path="collect.R"/>
			</f>
			<overloads><collect public="1" params="R:A" set="method"><f a="param1">
	<c path="java.util.stream.Collector">
		<d/>
		<c path="collect.A"/>
		<c path="collect.R"/>
	</c>
	<c path="collect.R"/>
</f></collect></overloads>
		</collect>
		<min public="1" set="method"><f a="param1">
	<c path="java.util.Comparator"><d/></c>
	<c path="java.util.Optional"><c path="java.util.stream.Stream.T"/></c>
</f></min>
		<max public="1" set="method"><f a="param1">
	<c path="java.util.Comparator"><d/></c>
	<c path="java.util.Optional"><c path="java.util.stream.Stream.T"/></c>
</f></max>
		<count public="1" set="method"><f a=""><x path="haxe.Int64"/></f></count>
		<anyMatch public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<x path="Bool"/>
</f></anyMatch>
		<allMatch public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<x path="Bool"/>
</f></allMatch>
		<noneMatch public="1" set="method"><f a="param1">
	<c path="java.util.function.Predicate"><d/></c>
	<x path="Bool"/>
</f></noneMatch>
		<findFirst public="1" set="method"><f a=""><c path="java.util.Optional"><c path="java.util.stream.Stream.T"/></c></f></findFirst>
		<findAny public="1" set="method"><f a=""><c path="java.util.Optional"><c path="java.util.stream.Stream.T"/></c></f></findAny>
		<meta>
			<m n=":native"><e>"java.util.stream.Stream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.stream.Stream_Builder" params="T" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/Stream$Builder.class" module="java.util.stream.Stream" extern="1" interface="1">
		<extends path="java.util.function.Consumer"><c path="java.util.stream.Stream_Builder.T"/></extends>
		<accept public="1" set="method"><f a="param1">
	<c path="java.util.stream.Stream_Builder.T"/>
	<x path="Void"/>
</f></accept>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.util.stream.Stream_Builder.T"/>
				<c path="java.util.stream.Stream_Builder"><c path="java.util.stream.Stream_Builder.T"/></c>
			</f>
			<meta><m n=":java.default"/></meta>
		</add>
		<build public="1" set="method"><f a=""><c path="java.util.stream.Stream"><c path="java.util.stream.Stream_Builder.T"/></c></f></build>
		<meta>
			<m n=":native"><e>"java.util.stream.Stream$Builder"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.stream.Stream_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/stream/Stream$1.class" module="java.util.stream.Stream" extern="1">
		<implements path="java.util.Iterator"><d/></implements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<t public="1"><d/></t>
		<val_seed final="1" public="1">
			<d/>
			<meta><m n=":native"><e>"val$seed"</e></m></meta>
		</val_seed>
		<val_f final="1" public="1">
			<c path="java.util.function.UnaryOperator"><d/></c>
			<meta><m n=":native"><e>"val$f"</e></m></meta>
		</val_f>
		<new public="1" set="method"><f a="param1:param2">
	<d/>
	<c path="java.util.function.UnaryOperator"><d/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.stream.Stream$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.zip.Deflater" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/zip/Deflater.class" extern="1">
		<DEFLATED final="1" public="1" set="null" static="1"><x path="Int"/></DEFLATED>
		<NO_COMPRESSION final="1" public="1" set="null" static="1"><x path="Int"/></NO_COMPRESSION>
		<BEST_SPEED final="1" public="1" set="null" static="1"><x path="Int"/></BEST_SPEED>
		<BEST_COMPRESSION final="1" public="1" set="null" static="1"><x path="Int"/></BEST_COMPRESSION>
		<DEFAULT_COMPRESSION final="1" public="1" set="null" static="1"><x path="Int"/></DEFAULT_COMPRESSION>
		<FILTERED final="1" public="1" set="null" static="1"><x path="Int"/></FILTERED>
		<HUFFMAN_ONLY final="1" public="1" set="null" static="1"><x path="Int"/></HUFFMAN_ONLY>
		<DEFAULT_STRATEGY final="1" public="1" set="null" static="1"><x path="Int"/></DEFAULT_STRATEGY>
		<NO_FLUSH final="1" public="1" set="null" static="1"><x path="Int"/></NO_FLUSH>
		<SYNC_FLUSH final="1" public="1" set="null" static="1"><x path="Int"/></SYNC_FLUSH>
		<FULL_FLUSH final="1" public="1" set="null" static="1"><x path="Int"/></FULL_FLUSH>
		<setInput public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><setInput public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></setInput></overloads>
		</setInput>
		<setDictionary public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><setDictionary public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></setDictionary></overloads>
		</setDictionary>
		<setStrategy public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setStrategy>
		<setLevel public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></setLevel>
		<needsInput public="1" set="method"><f a=""><x path="Bool"/></f></needsInput>
		<finish public="1" set="method"><f a=""><x path="Void"/></f></finish>
		<finished public="1" set="method"><f a=""><x path="Bool"/></f></finished>
		<deflate public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads>
				<deflate public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></deflate>
				<deflate public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
</f></deflate>
			</overloads>
		</deflate>
		<getAdler public="1" set="method"><f a=""><x path="Int"/></f></getAdler>
		<getTotalIn public="1" set="method"><f a=""><x path="Int"/></f></getTotalIn>
		<getBytesRead public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getBytesRead>
		<getTotalOut public="1" set="method"><f a=""><x path="Int"/></f></getTotalOut>
		<getBytesWritten public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getBytesWritten>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<end public="1" set="method"><f a=""><x path="Void"/></f></end>
		<finalize public="1" set="method"><f a=""><x path="Void"/></f></finalize>
		<new public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a=""><x path="Void"/></f></new>
				<new public="1" set="method"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.zip.Deflater"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.zip.Inflater" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/zip/Inflater.class" extern="1">
		<setInput public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><setInput public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></setInput></overloads>
		</setInput>
		<setDictionary public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><setDictionary public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Void"/>
</f></setDictionary></overloads>
		</setDictionary>
		<getRemaining public="1" set="method"><f a=""><x path="Int"/></f></getRemaining>
		<needsInput public="1" set="method"><f a=""><x path="Bool"/></f></needsInput>
		<needsDictionary public="1" set="method"><f a=""><x path="Bool"/></f></needsDictionary>
		<finished public="1" set="method"><f a=""><x path="Bool"/></f></finished>
		<inflate public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><inflate public="1" set="method"><f a="param1">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
</f></inflate></overloads>
		</inflate>
		<getAdler public="1" set="method"><f a=""><x path="Int"/></f></getAdler>
		<getTotalIn public="1" set="method"><f a=""><x path="Int"/></f></getTotalIn>
		<getBytesRead public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getBytesRead>
		<getTotalOut public="1" set="method"><f a=""><x path="Int"/></f></getTotalOut>
		<getBytesWritten public="1" set="method"><f a=""><x path="haxe.Int64"/></f></getBytesWritten>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<end public="1" set="method"><f a=""><x path="Void"/></f></end>
		<finalize public="1" set="method"><f a=""><x path="Void"/></f></finalize>
		<ended public="1" set="method"><f a=""><x path="Bool"/></f></ended>
		<new public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a=""><x path="Void"/></f></new></overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.zip.Inflater"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.zip.InflaterInputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/zip/InflaterInputStream.class" extern="1">
		<extends path="java.io.FilterInputStream"/>
		<read public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<overloads><read public="1" set="method"><f a="param1:param2:param3">
	<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></read></overloads>
		</read>
		<available public="1" set="method" override="1"><f a=""><x path="Int"/></f></available>
		<skip public="1" set="method" override="1"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></skip>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<fill public="1" set="method"><f a=""><x path="Void"/></f></fill>
		<markSupported public="1" set="method" override="1"><f a=""><x path="Bool"/></f></markSupported>
		<mark public="1" set="method" override="1"><f a="param1">
	<x path="Int"/>
	<x path="Void"/>
</f></mark>
		<reset public="1" set="method" override="1"><f a=""><x path="Void"/></f></reset>
		<inf public="1"><c path="java.util.zip.Inflater"/></inf>
		<buf public="1"><c path="java.NativeArray"><t path="java.types.Int8"/></c></buf>
		<len public="1"><x path="Int"/></len>
		<usesDefaultInflater public="1"><x path="Bool"/></usesDefaultInflater>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.io.InputStream"/>
				<c path="java.util.zip.Inflater"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<new public="1" set="method"><f a="param1">
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="param1:param2">
	<c path="java.io.InputStream"/>
	<c path="java.util.zip.Inflater"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<meta>
			<m n=":native"><e>"java.util.zip.InflaterInputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.zip.ZipFile_ZipFileInputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/zip/ZipFile$ZipFileInputStream.class" module="java.util.zip.ZipFile" extern="1">
		<extends path="java.io.InputStream"/>
		<read public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<overloads><read public="1" set="method"><f a=""><x path="Int"/></f></read></overloads>
		</read>
		<skip public="1" set="method" override="1"><f a="param1">
	<x path="haxe.Int64"/>
	<x path="haxe.Int64"/>
</f></skip>
		<available public="1" set="method" override="1"><f a=""><x path="Int"/></f></available>
		<size public="1" set="method"><f a=""><x path="haxe.Int64"/></f></size>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<finalize public="1" set="method"><f a=""><x path="Void"/></f></finalize>
		<jzentry public="1"><x path="haxe.Int64"/></jzentry>
		<rem public="1"><x path="haxe.Int64"/></rem>
		<this_0 final="1" public="1">
			<c path="java.util.zip.ZipFile"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2">
	<c path="java.util.zip.ZipFile"/>
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.zip.ZipFile$ZipFileInputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.zip.ZipFile_ZipFileInflaterInputStream" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/zip/ZipFile$ZipFileInflaterInputStream.class" module="java.util.zip.ZipFile" extern="1">
		<extends path="java.util.zip.InflaterInputStream"/>
		<close public="1" set="method" override="1"><f a=""><x path="Void"/></f></close>
		<fill public="1" set="method" override="1"><f a=""><x path="Void"/></f></fill>
		<available public="1" set="method" override="1"><f a=""><x path="Int"/></f></available>
		<finalize public="1" set="method"><f a=""><x path="Void"/></f></finalize>
		<this_0 final="1" public="1">
			<c path="java.util.zip.ZipFile"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1:param2:param3:param4">
	<c path="java.util.zip.ZipFile"/>
	<c path="java.util.zip.ZipFile_ZipFileInputStream"/>
	<c path="java.util.zip.Inflater"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.zip.ZipFile$ZipFileInflaterInputStream"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.zip.ZipFile_ZipEntryIterator" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/zip/ZipFile$ZipEntryIterator.class" module="java.util.zip.ZipFile" extern="1">
		<implements path="java.util.Iterator"><c path="java.util.zip.ZipEntry"/></implements>
		<implements path="java.util.Enumeration"><c path="java.util.zip.ZipEntry"/></implements>
		<hasMoreElements public="1" set="method"><f a=""><x path="Bool"/></f></hasMoreElements>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<nextElement public="1" set="method"><f a=""><c path="java.util.zip.ZipEntry"/></f></nextElement>
		<next public="1" set="method"><f a=""><c path="java.util.zip.ZipEntry"/></f></next>
		<this_0 final="1" public="1">
			<c path="java.util.zip.ZipFile"/>
			<meta><m n=":native"><e>"this$0"</e></m></meta>
		</this_0>
		<new public="1" set="method"><f a="param1">
	<c path="java.util.zip.ZipFile"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"java.util.zip.ZipFile$ZipEntryIterator"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.util.zip.ZipFile_1" params="" file="/home/runner/work/haxe/haxe/extra/.haxelib/hxjava/git/lib/hxjava-std.jar@java/util/zip/ZipFile$1.class" module="java.util.zip.ZipFile" extern="1">
		<implements path="java.sun.misc.JavaUtilZipFileAccess"/>
		<startsWithLocHeader public="1" set="method"><f a="param1">
	<c path="java.util.zip.ZipFile"/>
	<x path="Bool"/>
</f></startsWithLocHeader>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":native"><e>"java.util.zip.ZipFile$1"</e></m>
			<m n=":libType"/>
		</meta>
	</class>
	<class path="java.vm.AtomicList" params="T" file="/home/runner/work/haxe/haxe/std/java/vm/AtomicList.hx">
		<head>
			<c path="java.vm.AtomicNode"><c path="java.vm.AtomicList.T"/></c>
			<meta>
				<m n=":volatile"/>
				<m n=":private"/>
			</meta>
		</head>
		<tail>
			<c path="java.util.concurrent.atomic.AtomicReference"><c path="java.vm.AtomicNode"><c path="java.vm.AtomicList.T"/></c></c>
			<meta>
				<m n=":volatile"/>
				<m n=":private"/>
			</meta>
		</tail>
		<add public="1" set="method" line="41"><f a="v">
	<c path="java.vm.AtomicList.T"/>
	<x path="Void"/>
</f></add>
		<pop public="1" set="method" line="50"><f a=""><x path="Null"><c path="java.vm.AtomicList.T"/></x></f></pop>
		<peek public="1" set="method" line="63"><f a=""><x path="Null"><c path="java.vm.AtomicList.T"/></x></f></peek>
		<peekLast public="1" set="method" line="70"><f a=""><c path="java.vm.AtomicList.T"/></f></peekLast>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A lock-free queue implementation</haxe_doc>
		<meta>
			<m n=":native"><e>"haxe.java.vm.AtomicList"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="java.vm.AtomicNode" params="T" file="/home/runner/work/haxe/haxe/std/java/vm/AtomicList.hx" module="java.vm.AtomicList">
		<extends path="java.util.concurrent.atomic.AtomicReference"><c path="java.vm.AtomicNode"><c path="java.vm.AtomicNode.T"/></c></extends>
		<value public="1"><c path="java.vm.AtomicNode.T"/></value>
		<new public="1" set="method" line="79"><f a="value">
	<c path="java.vm.AtomicNode.T"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"haxe.java.vm.AtomicNode"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<typedef path="java.vm.Deque" params="T" file="/home/runner/work/haxe/haxe/std/java/vm/Deque.hx">
		<c path="sys.thread.Deque"><c path="java.vm.Deque.T"/></c>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="java.vm.Gc" params="" file="/home/runner/work/haxe/haxe/std/java/vm/Gc.hx">
		<run public="1" set="method" line="26" static="1"><f a="major">
	<x path="Bool"/>
	<x path="Void"/>
</f></run>
		<stats public="1" set="method" line="30" static="1"><f a=""><a>
	<heap><x path="Int"/></heap>
	<free><x path="Int"/></free>
</a></f></stats>
		<meta><m n=":native"><e>"haxe.java.vm.Gc"</e></m></meta>
	</class>
	<typedef path="java.vm.Lock" params="" file="/home/runner/work/haxe/haxe/std/java/vm/Lock.hx">
		<c path="sys.thread.Lock"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="java.vm.Mutex" params="" file="/home/runner/work/haxe/haxe/std/java/vm/Mutex.hx">
		<c path="sys.thread.Mutex"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="java.vm.Thread" params="" file="/home/runner/work/haxe/haxe/std/java/vm/Thread.hx">
		<x path="sys.thread.Thread"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<typedef path="java.vm.Tls" params="T" file="/home/runner/work/haxe/haxe/std/java/vm/Tls.hx">
		<c path="sys.thread.Tls"><c path="java.vm.Tls.T"/></c>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="jvm.Function" params="" file="/home/runner/work/haxe/haxe/std/jvm/Function.hx" extern="1">
		<implements path="java.lang.Runnable"/>
		<invokeDynamic public="1" set="method"><f a="args">
	<c path="java.NativeArray"><d/></c>
	<d/>
</f></invokeDynamic>
		<equals public="1" set="method"><f a="other">
	<c path="java.lang.Object"/>
	<x path="Bool"/>
</f></equals>
		<invoke public="1" set="method"><f a="arg1">
	<c path="java.lang.Object"/>
	<c path="java.lang.Object"/>
</f></invoke>
		<run public="1" set="method"><f a=""><x path="Void"/></f></run>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"haxe.jvm.Function"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="jvm.ClosureDispatch" params="" file="/home/runner/work/haxe/haxe/std/jvm/Closure.hx" module="jvm.Closure" extern="1">
		<extends path="jvm.Function"/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"haxe.jvm.ClosureDispatch"</e></m>
		</meta>
	</class>
	<class path="jvm.Closure" params="" file="/home/runner/work/haxe/haxe/std/jvm/Closure.hx">
		<extends path="jvm.ClosureDispatch"/>
		<context public="1"><d/></context>
		<method public="1"><c path="java.lang.reflect.Method"/></method>
		<isStatic><x path="Bool"/></isStatic>
		<params><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></params>
		<bindTo public="1" set="method" line="24"><f a="context">
	<d/>
	<c path="jvm.Closure"/>
</f></bindTo>
		<equals public="1" set="method" line="28" override="1"><f a="other">
	<c path="java.lang.Object"/>
	<x path="Bool"/>
</f></equals>
		<invokeDynamic public="1" set="method" line="36" override="1"><f a="args">
	<c path="java.NativeArray"><d/></c>
	<d/>
</f></invokeDynamic>
		<new public="1" set="method" line="16"><f a="context:method">
	<x path="Null"><d/></x>
	<c path="java.lang.reflect.Method"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"haxe.jvm.Closure"</e></m>
			<m n=":nativeGen"/>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="jvm.VarArgs" params="" file="/home/runner/work/haxe/haxe/std/jvm/Closure.hx" module="jvm.Closure" extern="1">
		<extends path="jvm.Function"/>
		<func public="1"><c path="jvm.Function"/></func>
		<new public="1" set="method"><f a="func">
	<c path="jvm.Function"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"haxe.jvm.VarArgs"</e></m></meta>
	</class>
	<class path="jvm.Object" params="" file="/home/runner/work/haxe/haxe/std/jvm/Object.hx">
		<_hx_getField public="1" set="method" line="31">
			<f a="name">
				<c path="String"/>
				<x path="Null"><d/></x>
			</f>
			<meta><m n=":jvm.synthetic"/></meta>
		</_hx_getField>
		<_hx_setField public="1" set="method" line="35">
			<f a="name:value">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":jvm.synthetic"/></meta>
		</_hx_setField>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.jvm.Object"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="jvm.DynamicObject" params="" file="/home/runner/work/haxe/haxe/std/jvm/DynamicObject.hx">
		<extends path="jvm.Object"/>
		<implements path="java.lang.Cloneable"/>
		<__hx_toString_depth expr="0" line="9" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":private"/>
			</meta>
		</__hx_toString_depth>
		<_hx_fields>
			<x path="Null"><c path="haxe.ds.StringMap"><d/></c></x>
			<meta><m n=":private"/></meta>
		</_hx_fields>
		<_hx_deletedAField public="1">
			<x path="Null"><x path="Bool"/></x>
			<meta><m n=":jvm.synthetic"/></meta>
		</_hx_deletedAField>
		<toString public="1" set="method" line="15"><f a=""><c path="String"/></f></toString>
		<_hx_deleteField final="1" public="1" set="method" line="47">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":jvm.synthetic"/></meta>
		</_hx_deleteField>
		<_hx_getFields final="1" public="1" set="method" line="56">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<meta><m n=":jvm.synthetic"/></meta>
		</_hx_getFields>
		<_hx_getField public="1" params="T" set="method" line="61" override="1">
			<f a="name">
				<c path="String"/>
				<x path="Null"><d/></x>
			</f>
			<meta><m n=":jvm.synthetic"/></meta>
		</_hx_getField>
		<_hx_hasField final="1" public="1" set="method" line="66">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":jvm.synthetic"/></meta>
		</_hx_hasField>
		<_hx_setField public="1" set="method" line="71" override="1">
			<f a="name:value">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":jvm.synthetic"/></meta>
		</_hx_setField>
		<_hx_clone final="1" public="1" set="method" line="76">
			<f a=""><c path="jvm.DynamicObject"/></f>
			<meta><m n=":jvm.synthetic"/></meta>
		</_hx_clone>
		<_hx_initReflection final="1" set="method" line="84">
			<f a=""><x path="Void"/></f>
			<meta><m n=":jvm.synthetic"/></meta>
		</_hx_initReflection>
		<_hx_getKnownFields set="method" line="90">
			<f a=""><c path="haxe.ds.StringMap"><d/></c></f>
			<meta><m n=":jvm.synthetic"/></meta>
		</_hx_getKnownFields>
		<meta>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.jvm.DynamicObject"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="jvm.Enum" params="T" file="/home/runner/work/haxe/haxe/std/jvm/Enum.hx">
		<extends path="java.lang.Enum"><c path="jvm.Enum.T"/></extends>
		<equals public="1" params="T" set="method" line="34" override="1">
			<f a="other">
				<c path="jvm.Enum"><c path="equals.T"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<_hx_getParameters public="1" set="method" line="38">
			<f a=""><c path="java.NativeArray"><x path="Any"/></c></f>
			<meta><m n=":jvm.synthetic"/></meta>
		</_hx_getParameters>
		<toString public="1" set="method" line="43" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method" line="30">
			<f a="index:name">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeGen"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.jvm.Enum"</e></m>
		</meta>
	</class>
	<class path="jvm.ObjectTools" params="" file="/home/runner/work/haxe/haxe/std/jvm/NativeTools.hx" module="jvm.NativeTools" extern="1"><object public="1" params="T" get="inline" set="null" line="26" static="1"><f a="t">
	<c path="object.T"/>
	<c path="java.lang.Object"/>
</f></object></class>
	<class path="jvm.NativeClassTools" params="" file="/home/runner/work/haxe/haxe/std/jvm/NativeTools.hx" module="jvm.NativeTools" extern="1">
		<native public="1" params="T" get="inline" set="null" line="32" static="1"><f a="c">
	<x path="Class"><c path="native.T"/></x>
	<c path="java.lang.Class"><c path="native.T"/></c>
</f></native>
		<haxe public="1" params="T" get="inline" set="null" line="36" static="1"><f a="c">
	<c path="java.lang.Class"><c path="haxe.T"/></c>
	<x path="Class"><c path="haxe.T"/></x>
</f></haxe>
		<haxeEnum public="1" params="T" get="inline" set="null" line="40" static="1"><f a="c">
	<c path="java.lang.Class"><c path="haxeEnum.T"/></c>
	<x path="Enum"><c path="haxeEnum.T"/></x>
</f></haxeEnum>
	</class>
	<class path="jvm.NativeEnumTools" params="" file="/home/runner/work/haxe/haxe/std/jvm/NativeTools.hx" module="jvm.NativeTools" extern="1"><native public="1" params="T" get="inline" set="null" line="46" static="1"><f a="e">
	<x path="Enum"><d/></x>
	<c path="java.lang.Class"><c path="native.T"/></c>
</f></native></class>
	<class path="jvm.StringExt" params="" file="/home/runner/work/haxe/haxe/std/jvm/StringExt.hx">
		<fromCharCode public="1" set="method" line="30" static="1"><f a="code">
	<x path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<charAt public="1" set="method" line="36" static="1"><f a="me:index">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></charAt>
		<charCodeAt public="1" set="method" line="43" static="1"><f a="me:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Null"><x path="Int"/></x>
</f></charCodeAt>
		<indexOf public="1" set="method" line="50" static="1"><f a="me:str:startIndex">
	<c path="String"/>
	<c path="String"/>
	<x path="Null"><x path="Int"/></x>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method" line="57" static="1"><f a="me:str:?startIndex">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<split public="1" set="method" line="67" static="1"><f a="me:delimiter">
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></split>
		<substr public="1" set="method" line="86" static="1"><f a="me:pos:?len">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></substr>
		<substring public="1" set="method" line="108" static="1"><f a="me:startIndex:?endIndex">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></substring>
		<toLowerCase public="1" set="method" line="129" static="1"><f a="me">
	<c path="String"/>
	<c path="String"/>
</f></toLowerCase>
		<toUpperCase public="1" set="method" line="133" static="1"><f a="me">
	<c path="String"/>
	<c path="String"/>
</f></toUpperCase>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"haxe.jvm.StringExt"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="jvm.annotation.ClassReflectionInformation" params="" file="/home/runner/work/haxe/haxe/std/jvm/annotation/ClassReflectionInformation.hx" interface="1">
		<extends path="java.lang.annotation.Annotation"/>
		<hasSuperClass public="1" set="method"><f a=""><x path="Bool"/></f></hasSuperClass>
		<meta>
			<m n=":annotation"><e>"RUNTIME"</e></m>
			<m n=":native"><e>"haxe.jvm.annotation.ClassReflectionInformation"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="jvm.annotation.EnumReflectionInformation" params="" file="/home/runner/work/haxe/haxe/std/jvm/annotation/EnumReflectionInformation.hx" interface="1">
		<extends path="java.lang.annotation.Annotation"/>
		<constructorNames public="1" set="method"><f a=""><c path="java.NativeArray"><c path="String"/></c></f></constructorNames>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":annotation"><e>"RUNTIME"</e></m>
			<m n=":native"><e>"haxe.jvm.annotation.EnumReflectionInformation"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="jvm.annotation.EnumValueReflectionInformation" params="" file="/home/runner/work/haxe/haxe/std/jvm/annotation/EnumValueReflectionInformation.hx" interface="1">
		<extends path="java.lang.annotation.Annotation"/>
		<argumentNames public="1" set="method"><f a=""><c path="java.NativeArray"><c path="String"/></c></f></argumentNames>
		<meta>
			<m n=":annotation"><e>"RUNTIME"</e></m>
			<m n=":native"><e>"haxe.jvm.annotation.EnumValueReflectionInformation"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<typedef path="sys.FileStat" params="" file="/home/runner/work/haxe/haxe/std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>The user id for the file owner.</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>The size of the file, in bytes.</haxe_doc>
			</size>
			<rdev>
				<x path="Int"/>
				<haxe_doc>The device type on which stat resides (special files only).</haxe_doc>
			</rdev>
			<nlink>
				<x path="Int"/>
				<haxe_doc>The number of hard links to stat.</haxe_doc>
			</nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>The last modification time for the file.</haxe_doc>
			</mtime>
			<mode>
				<x path="Int"/>
				<haxe_doc>The permission bits of stat. The meaning of the bits is platform dependent.</haxe_doc>
			</mode>
			<ino>
				<x path="Int"/>
				<haxe_doc>The inode number for stat.</haxe_doc>
			</ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>The user group id for the file owner.</haxe_doc>
			</gid>
			<dev>
				<x path="Int"/>
				<haxe_doc>The device on which stat resides.</haxe_doc>
			</dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>The creation time for the file (not all file systems support this).</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>The last access time for the file (when enabled by the file system).</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File information, as given by `sys.FileSystem.stat`.</haxe_doc>
	</typedef>
	<class path="sys.FileSystem" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/FileSystem.hx">
		<exists public="1" set="method" line="30" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the file or directory specified by `path` exists.</haxe_doc>
		</exists>
		<rename public="1" set="method" line="34" static="1">
			<f a="path:newPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renames/moves the file or directory specified by `path` to `newPath`.

		If `path` is not a valid file system entry, or if it is not accessible,
		or if `newPath` is not accessible, an exception is thrown.</haxe_doc>
		</rename>
		<stat public="1" set="method" line="40" static="1">
			<f a="path">
				<c path="String"/>
				<t path="sys.FileStat"/>
			</f>
			<haxe_doc>Returns `FileStat` information for the file or directory specified by
		`path`.</haxe_doc>
		</stat>
		<fullPath public="1" set="method" line="81" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. Symlinks will be
		followed and the path will be normalized.</haxe_doc>
		</fullPath>
		<absolutePath public="1" set="method" line="89" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. The path doesn't
		have to exist.</haxe_doc>
		</absolutePath>
		<isDirectory public="1" set="method" line="95" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the file or directory specified by `path` is a directory.

		If `path` is not a valid file system entry or if its destination is not
		accessible, an exception is thrown.</haxe_doc>
		</isDirectory>
		<createDirectory public="1" set="method" line="102" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a directory specified by `path`.

		This method is recursive: The parent directories don't have to exist.

		If the directory cannot be created, an exception is thrown.</haxe_doc>
		</createDirectory>
		<deleteFile public="1" set="method" line="108" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the file specified by `path`.

		If `path` does not denote a valid file, or if that file cannot be
		deleted, an exception is thrown.</haxe_doc>
		</deleteFile>
		<deleteDirectory public="1" set="method" line="113" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the directory specified by `path`. Only empty directories can
		be deleted.

		If `path` does not denote a valid directory, or if that directory cannot
		be deleted, an exception is thrown.</haxe_doc>
		</deleteDirectory>
		<readDirectory public="1" set="method" line="118" static="1">
			<f a="path">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the names of all files and directories in the directory specified
		by `path`. `"."` and `".."` are not included in the output.

		If `path` does not denote a valid directory, an exception is thrown.</haxe_doc>
		</readDirectory>
		<haxe_doc>This class provides information about files and directories.

	If `null` is passed as a file path to any function in this class, the
	result is unspecified, and may differ from target to target.

	See `sys.io.File` for the complementary file API.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.Http" params="" file="/home/runner/work/haxe/haxe/std/sys/Http.hx">
		<extends path="haxe.http.HttpBase"/>
		<PROXY public="1" expr="null" line="48" static="1">
			<a>
				<port><x path="Int"/></port>
				<host><c path="String"/></host>
				<auth><a>
	<user><c path="String"/></user>
	<pass><c path="String"/></pass>
</a></auth>
			</a>
			<meta><m n=":value"><e>null</e></m></meta>
		</PROXY>
		<requestUrl public="1" set="method" line="528" static="1">
			<f a="url">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Makes a synchronous request to `url`.

	This creates a new Http instance and makes a GET request by calling its
	`request(false)` method.

	If `url` is null, the result is unspecified.</haxe_doc>
		</requestUrl>
		<noShutdown public="1"><x path="Bool"/></noShutdown>
		<cnxTimeout public="1"><x path="Float"/></cnxTimeout>
		<responseHeaders public="1"><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></responseHeaders>
		<responseHeadersSameKey><t path="Map">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</t></responseHeadersSameKey>
		<chunk_size><x path="Null"><x path="Int"/></x></chunk_size>
		<chunk_buf><c path="haxe.io.Bytes"/></chunk_buf>
		<file><a>
	<size><x path="Int"/></size>
	<param><c path="String"/></param>
	<mimeType><c path="String"/></mimeType>
	<io><c path="haxe.io.Input"/></io>
	<filename><c path="String"/></filename>
</a></file>
		<request public="1" set="method" line="58" override="1"><f a="?post">
	<x path="Bool"/>
	<x path="Void"/>
</f></request>
		<fileTransfert public="1" get="inline" set="null" line="78">
			<f a="argname:filename:file:size:?mimeType" v="::::&quot;application/octet-stream&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ mimeType : "application/octet-stream" }</e></m>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"Use fileTransfer instead"</e></m>
			</meta>
		</fileTransfert>
		<fileTransfer public="1" set="method" line="82">
			<f a="argname:filename:file:size:?mimeType" v="::::&quot;application/octet-stream&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mimeType : "application/octet-stream" }</e></m></meta>
		</fileTransfer>
		<customRequest public="1" set="method" line="92"><f a="post:api:?sock:?method">
	<x path="Bool"/>
	<c path="haxe.io.Output"/>
	<c path="sys.net.Socket"/>
	<c path="String"/>
	<x path="Void"/>
</f></customRequest>
		<getResponseHeaderValues public="1" set="method" line="265">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
			</f>
			<haxe_doc>Returns an array of values for a single response header or returns
		null if no such header exists.
		This method can be useful when you need to get a multiple headers with
		the same name (e.g. `Set-Cookie`), that are unreachable via the
		`responseHeaders` variable.</haxe_doc>
		</getResponseHeaderValues>
		<writeBody set="method" line="275"><f a="body:fileInput:fileSize:boundary:sock">
	<x path="Null"><c path="haxe.io.BytesOutput"/></x>
	<x path="Null"><c path="haxe.io.Input"/></x>
	<x path="Int"/>
	<x path="Null"><c path="String"/></x>
	<c path="sys.net.Socket"/>
	<x path="Void"/>
</f></writeBody>
		<readHttpResponse set="method" line="300"><f a="api:sock">
	<c path="haxe.io.Output"/>
	<c path="sys.net.Socket"/>
	<x path="Void"/>
</f></readHttpResponse>
		<readChunk set="method" line="462"><f a="chunk_re:api:buf:len">
	<c path="EReg"/>
	<c path="haxe.io.Output"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></readChunk>
		<new public="1" set="method" line="50"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.io.File" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/io/File.hx">
		<getContent public="1" set="method" line="27" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the content of the file specified by `path` as a String.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getContent>
		<saveContent public="1" set="method" line="34" static="1">
			<f a="path:content">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `content` in the file specified by `path`.

		If the file cannot be written to, an exception is thrown.

		If `path` or `content` are null, the result is unspecified.</haxe_doc>
		</saveContent>
		<getBytes public="1" set="method" line="40" static="1">
			<f a="path">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the binary content of the file specified by `path`.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getBytes>
		<saveBytes public="1" set="method" line="47" static="1">
			<f a="path:bytes">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `bytes` in the file specified by `path` in binary mode.

		If the file cannot be written to, an exception is thrown.

		If `path` or `bytes` are null, the result is unspecified.</haxe_doc>
		</saveBytes>
		<read public="1" set="method" line="53" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileInput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Returns an `FileInput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file does not exist or can not be read, an exception is thrown.

		Operations on the returned `FileInput` handle read on the opened file.

		File handles should be closed via `FileInput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</read>
		<write public="1" set="method" line="62" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Returns an `FileOutput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file cannot be written to, an exception is thrown.

		Operations on the returned `FileOutput` handle write to the opened file.
		If the file existed, its previous content is overwritten.

		File handles should be closed via `FileOutput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</write>
		<append public="1" set="method" line="76" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Similar to `sys.io.File.write`, but appends to the file if it exists
		instead of overwriting its contents.</haxe_doc>
		</append>
		<update public="1" set="method" line="91" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Similar to `sys.io.File.append`. While `append` can only seek or write
		starting from the end of the file's previous contents, `update` can
		seek to any position, so the file's previous contents can be
		selectively overwritten.</haxe_doc>
		</update>
		<copy public="1" set="method" line="103" static="1">
			<f a="srcPath:dstPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the contents of the file specified by `srcPath` to the file
		specified by `dstPath`.

		If the `srcPath` does not exist or cannot be read, or if the `dstPath`
		file cannot be written to, an exception is thrown.

		If the file at `dstPath` exists, its contents are overwritten.

		If `srcPath` or `dstPath` are null, the result is unspecified.</haxe_doc>
		</copy>
		<haxe_doc>API for reading and writing files.

	See `sys.FileSystem` for the complementary file system API.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.io.FileInput" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/io/FileInput.hx">
		<extends path="haxe.io.Input"/>
		<f><c path="java.io.RandomAccessFile"/></f>
		<_eof><x path="Bool"/></_eof>
		<close public="1" set="method" line="41" override="1"><f a=""><x path="Void"/></f></close>
		<readByte public="1" set="method" line="48" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="60" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<seek public="1" set="method" line="80"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="100"><f a=""><x path="Int"/></f></tell>
		<eof public="1" get="inline" set="null" line="108"><f a=""><x path="Bool"/></f></eof>
		<new set="method" line="36"><f a="f">
	<c path="java.io.RandomAccessFile"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.io.FileOutput" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/io/FileOutput.hx">
		<extends path="haxe.io.Output"/>
		<f><c path="java.io.RandomAccessFile"/></f>
		<close public="1" set="method" line="38" override="1"><f a=""><x path="Void"/></f></close>
		<writeByte public="1" set="method" line="45" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<write public="1" set="method" line="53" override="1"><f a="s">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></write>
		<writeBytes public="1" set="method" line="61" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<seek public="1" set="method" line="70"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="87"><f a=""><x path="Int"/></f></tell>
		<new set="method" line="34"><f a="f">
	<c path="java.io.RandomAccessFile"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="sys.io.FileSeek" params="" file="/home/runner/work/haxe/haxe/std/sys/io/FileSeek.hx">
		<SeekBegin/>
		<SeekCur/>
		<SeekEnd/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="sys.io.Process" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/io/Process.hx">
		<createProcessBuilder set="method" line="42" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<c path="java.lang.ProcessBuilder"/>
			</f>
			<meta><m n=":allow"><e>Sys</e></m></meta>
		</createProcessBuilder>
		<stdout public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard output. The output stream where a process writes its output data.</haxe_doc>
		</stdout>
		<stderr public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard error. The output stream to output error messages or diagnostics.</haxe_doc>
		</stderr>
		<stdin public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>Standard input. The stream data going into a process.</haxe_doc>
		</stdin>
		<proc><c path="java.lang.Process"/></proc>
		<getPid public="1" set="method" line="90">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the process ID.</haxe_doc>
		</getPid>
		<exitCode public="1" set="method" line="96">
			<f a="?block" v="true">
				<x path="Bool"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta><m n=":value"><e>{ block : true }</e></m></meta>
			<haxe_doc>Query the exit code of the process.
		If `block` is true or not specified, it will block until the process terminates.
		If `block` is false, it will return either the process exit code if it's already terminated or null if it's still running.
		If the process has already exited, return the exit code immediately.</haxe_doc>
		</exitCode>
		<close public="1" set="method" line="115">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the process handle and release the associated resources.
		All `Process` fields should not be used after `close()` is called.</haxe_doc>
		</close>
		<kill public="1" set="method" line="119">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Kill the process.</haxe_doc>
		</kill>
		<new public="1" set="method" line="81">
			<f a="cmd:?args:?detached">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a `Process` object, which run the given command immediately.

		Command arguments can be passed in two ways: 1. using `args`, 2. appending to `cmd` and leaving `args` as `null`.

		 1. When using `args` to pass command arguments, each argument will be automatically quoted, and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		`detached` allows the created process to be standalone. You cannot communicate with it but you can look at its exit code. Not supported on php.

		`close()` should be called when the `Process` is no longer used.</haxe_doc>
		</new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.io._Process.ProcessInput" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="java.io.NativeInput"/>
		<chained><c path="haxe.io.BytesInput"/></chained>
		<bufferContents public="1" set="method" line="127"><f a=""><x path="Void"/></f></bufferContents>
		<readByte public="1" set="method" line="134" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="148" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="167" override="1"><f a=""><x path="Void"/></f></close>
	</class>
	<class path="sys.net.Address" params="" file="/home/runner/work/haxe/haxe/std/sys/net/Address.hx">
		<host public="1"><x path="Int"/></host>
		<port public="1"><x path="Int"/></port>
		<getHost public="1" set="method" line="38">
			<f a=""><c path="sys.net.Host"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getHost>
		<compare public="1" set="method" line="44"><f a="a">
	<c path="sys.net.Address"/>
	<x path="Int"/>
</f></compare>
		<clone public="1" set="method" line="54"><f a=""><c path="sys.net.Address"/></f></clone>
		<new public="1" set="method" line="33"><f a=""><x path="Void"/></f></new>
		<haxe_doc>An address is used to represent a port on a given host ip.
	It is used by `sys.net.UdpSocket`.</haxe_doc>
	</class>
	<class path="sys.net.Host" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/net/Host.hx">
		<localhost public="1" set="method" line="52" static="1"><f a=""><c path="String"/></f></localhost>
		<host public="1" set="null"><c path="String"/></host>
		<ip public="1" set="null"><x path="Int"/></ip>
		<wrapped>
			<c path="java.net.InetAddress"/>
			<meta><m n=":allow"><e>sys.net</e></m></meta>
		</wrapped>
		<toString public="1" set="method" line="44"><f a=""><c path="String"/></f></toString>
		<reverse public="1" set="method" line="48"><f a=""><c path="String"/></f></reverse>
		<new public="1" set="method" line="33"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.net.UdpSocket" params="" file="/home/runner/work/haxe/haxe/std/sys/net/UdpSocket.hx">
		<extends path="sys.net.Socket"/>
		<setBroadcast public="1" set="method" line="37">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows the socket to send to broadcast addresses.</haxe_doc>
		</setBroadcast>
		<sendTo public="1" set="method" line="44">
			<f a="buf:pos:len:addr">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="sys.net.Address"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Sends data to the specified target host/port address.</haxe_doc>
		</sendTo>
		<readFrom public="1" set="method" line="51">
			<f a="buf:pos:len:addr">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="sys.net.Address"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads data from any incoming address and store the receiver address into the address parameter.</haxe_doc>
		</readFrom>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A UDP socket class</haxe_doc>
	</class>
	<class path="sys.ssl.Certificate" params="" file="/home/runner/work/haxe/haxe/std/sys/ssl/Certificate.hx" extern="1">
		<loadFile public="1" set="method" static="1"><f a="file">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></loadFile>
		<loadPath public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></loadPath>
		<fromString public="1" set="method" static="1"><f a="str">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></fromString>
		<loadDefaults public="1" set="method" static="1"><f a=""><c path="sys.ssl.Certificate"/></f></loadDefaults>
		<commonName public="1" get="accessor" set="null"><x path="Null"><c path="String"/></x></commonName>
		<altNames public="1" get="accessor" set="null"><c path="Array"><c path="String"/></c></altNames>
		<notBefore public="1" get="accessor" set="null"><c path="Date"/></notBefore>
		<notAfter public="1" get="accessor" set="null"><c path="Date"/></notAfter>
		<subject public="1" set="method"><f a="field">
	<c path="String"/>
	<x path="Null"><c path="String"/></x>
</f></subject>
		<issuer public="1" set="method"><f a="field">
	<c path="String"/>
	<x path="Null"><c path="String"/></x>
</f></issuer>
		<next public="1" set="method"><f a=""><x path="Null"><c path="sys.ssl.Certificate"/></x></f></next>
		<add public="1" set="method"><f a="pem">
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<addDER public="1" set="method"><f a="der">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></addDER>
		<get_commonName set="method"><f a=""><x path="Null"><c path="String"/></x></f></get_commonName>
		<get_altNames set="method"><f a=""><c path="Array"><c path="String"/></c></f></get_altNames>
		<get_notBefore set="method"><f a=""><c path="Date"/></f></get_notBefore>
		<get_notAfter set="method"><f a=""><c path="Date"/></f></get_notAfter>
	</class>
	<class path="sys.ssl.Digest" params="" file="/home/runner/work/haxe/haxe/std/sys/ssl/Digest.hx" extern="1">
		<make public="1" set="method" static="1"><f a="data:alg">
	<c path="haxe.io.Bytes"/>
	<x path="sys.ssl.DigestAlgorithm"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<sign public="1" set="method" static="1"><f a="data:privKey:alg">
	<c path="haxe.io.Bytes"/>
	<c path="sys.ssl.Key"/>
	<x path="sys.ssl.DigestAlgorithm"/>
	<c path="haxe.io.Bytes"/>
</f></sign>
		<verify public="1" set="method" static="1"><f a="data:signature:pubKey:alg">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="sys.ssl.Key"/>
	<x path="sys.ssl.DigestAlgorithm"/>
	<x path="Bool"/>
</f></verify>
	</class>
	<abstract path="sys.ssl.DigestAlgorithm" params="" file="/home/runner/work/haxe/haxe/std/sys/ssl/DigestAlgorithm.hx">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="sys.ssl._DigestAlgorithm.DigestAlgorithm_Impl_" params="" file="/home/runner/work/haxe/haxe/std/sys/ssl/DigestAlgorithm.hx" private="1" module="sys.ssl.DigestAlgorithm" extern="1" final="1">
	<MD5 public="1" get="inline" set="null" expr="cast &quot;MD5&quot;" line="26" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "MD5"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MD5>
	<SHA1 public="1" get="inline" set="null" expr="cast &quot;SHA1&quot;" line="27" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA1"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SHA1>
	<SHA224 public="1" get="inline" set="null" expr="cast &quot;SHA224&quot;" line="28" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA224"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SHA224>
	<SHA256 public="1" get="inline" set="null" expr="cast &quot;SHA256&quot;" line="29" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA256"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SHA256>
	<SHA384 public="1" get="inline" set="null" expr="cast &quot;SHA384&quot;" line="30" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA384"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SHA384>
	<SHA512 public="1" get="inline" set="null" expr="cast &quot;SHA512&quot;" line="31" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA512"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SHA512>
	<RIPEMD160 public="1" get="inline" set="null" expr="cast &quot;RIPEMD160&quot;" line="32" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "RIPEMD160"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RIPEMD160>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="sys.ssl._DigestAlgorithm.DigestAlgorithm_Impl_" params="" file="/home/runner/work/haxe/haxe/std/sys/ssl/DigestAlgorithm.hx" private="1" module="sys.ssl.DigestAlgorithm" extern="1" final="1">
		<MD5 public="1" get="inline" set="null" expr="cast &quot;MD5&quot;" line="26" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "MD5"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MD5>
		<SHA1 public="1" get="inline" set="null" expr="cast &quot;SHA1&quot;" line="27" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA1"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SHA1>
		<SHA224 public="1" get="inline" set="null" expr="cast &quot;SHA224&quot;" line="28" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA224"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SHA224>
		<SHA256 public="1" get="inline" set="null" expr="cast &quot;SHA256&quot;" line="29" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA256"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SHA256>
		<SHA384 public="1" get="inline" set="null" expr="cast &quot;SHA384&quot;" line="30" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA384"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SHA384>
		<SHA512 public="1" get="inline" set="null" expr="cast &quot;SHA512&quot;" line="31" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA512"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SHA512>
		<RIPEMD160 public="1" get="inline" set="null" expr="cast &quot;RIPEMD160&quot;" line="32" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "RIPEMD160"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RIPEMD160>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="sys.ssl.Key" params="" file="/home/runner/work/haxe/haxe/std/sys/ssl/Key.hx" extern="1">
		<loadFile public="1" set="method" static="1"><f a="file:?isPublic:?pass">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="sys.ssl.Key"/>
</f></loadFile>
		<readPEM public="1" set="method" static="1"><f a="data:isPublic:?pass">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="sys.ssl.Key"/>
</f></readPEM>
		<readDER public="1" set="method" static="1"><f a="data:isPublic">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
	<c path="sys.ssl.Key"/>
</f></readDER>
	</class>
	<class path="sys.ssl.Socket" params="" file="/home/runner/work/haxe/haxe/std/sys/ssl/Socket.hx" extern="1">
		<extends path="sys.net.Socket"/>
		<DEFAULT_VERIFY_CERT public="1" static="1"><x path="Null"><x path="Bool"/></x></DEFAULT_VERIFY_CERT>
		<DEFAULT_CA public="1" static="1"><x path="Null"><c path="sys.ssl.Certificate"/></x></DEFAULT_CA>
		<verifyCert public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>Define if peer certificate is verified during SSL handshake.</haxe_doc>
		</verifyCert>
		<handshake public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Perform the SSL handshake.</haxe_doc>
		</handshake>
		<setCA public="1" set="method">
			<f a="cert">
				<c path="sys.ssl.Certificate"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure the certificate chain for peer certificate verification.</haxe_doc>
		</setCA>
		<setHostname public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure the hostname for Server Name Indication TLS extension.</haxe_doc>
		</setHostname>
		<setCertificate public="1" set="method">
			<f a="cert:key">
				<c path="sys.ssl.Certificate"/>
				<c path="sys.ssl.Key"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure own certificate and private key.</haxe_doc>
		</setCertificate>
		<addSNICertificate public="1" set="method">
			<f a="cbServernameMatch:cert:key">
				<f a="">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<c path="sys.ssl.Certificate"/>
				<c path="sys.ssl.Key"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure additionals certificates and private keys for Server Name Indication extension.
		The callback may be called during handshake to determine the certificate to use.</haxe_doc>
		</addSNICertificate>
		<peerCertificate public="1" set="method">
			<f a=""><c path="sys.ssl.Certificate"/></f>
			<haxe_doc>Return the certificate received from the other side of a connection.</haxe_doc>
		</peerCertificate>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A TLS socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</haxe_doc>
	</class>
	<class path="sys.thread.Condition" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/thread/Condition.hx">
		<lock final="1"><c path="java.util.concurrent.locks.ReentrantLock"/></lock>
		<native final="1"><c path="java.util.concurrent.locks.Condition"/></native>
		<acquire public="1" set="method" line="18">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Acquires the internal mutex.</haxe_doc>
		</acquire>
		<tryAcquire public="1" set="method" line="22">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tries to acquire the internal mutex.
		@see `Mutex.tryAcquire`</haxe_doc>
		</tryAcquire>
		<release public="1" set="method" line="26">
			<f a=""><x path="Void"/></f>
			<haxe_doc>*
		Releases the internal mutex.</haxe_doc>
		</release>
		<wait public="1" set="method" line="34">
			<f a=""><x path="Void"/></f>
			<meta><m n=":native"><e>"waitOn"</e></m></meta>
			<haxe_doc>Atomically releases the mutex and blocks until the condition variable pointed is signaled by a call to
		`signal` or to `broadcast`. When the calling thread becomes unblocked it
		acquires the internal mutex.
		The internal mutex should be locked before this function is called.</haxe_doc>
		</wait>
		<signal public="1" set="method" line="38">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unblocks one of the threads that are blocked on the
		condition variable at the time of the call. If no threads are blocked
		on the condition variable at the time of the call, the function does nothing.</haxe_doc>
		</signal>
		<broadcast public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Unblocks all of the threads that are blocked on the
		condition variable at the time of the call. If no threads are blocked
		on the condition variable at the time of the call, the function does
		nothing.</haxe_doc>
		</broadcast>
		<new public="1" set="method" line="13">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create a new condition variable.
		A thread that waits on a newly created condition variable will block.</haxe_doc>
		</new>
		<haxe_doc>Creates a new condition variable.
	Conditions variables can be used to block one or more threads at the same time,
	until another thread modifies a shared variable (the condition)
	and signals the condition variable.</haxe_doc>
		<meta>
			<m n=":access"><e>sys.thread.Mutex</e></m>
			<m n=":coreApi"/>
			<m n=":native"><e>"haxe.java.vm.Condition"</e></m>
		</meta>
	</class>
	<class path="sys.thread.Deque" params="T" file="/home/runner/work/haxe/haxe/std/java/_std/sys/thread/Deque.hx">
		<lbd><c path="java.util.concurrent.LinkedBlockingDeque"><c path="sys.thread.Deque.T"/></c></lbd>
		<add public="1" set="method" line="36">
			<f a="i">
				<c path="sys.thread.Deque.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an element at the end of `this` Deque.

		(Java,Jvm): throws `java.lang.NullPointerException` if `i` is `null`.</haxe_doc>
		</add>
		<push public="1" set="method" line="40">
			<f a="i">
				<c path="sys.thread.Deque.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an element at the front of `this` Deque.

		(Java,Jvm): throws `java.lang.NullPointerException` if `i` is `null`.</haxe_doc>
		</push>
		<pop public="1" get="inline" set="null" line="44">
			<f a="block">
				<x path="Bool"/>
				<x path="Null"><c path="sys.thread.Deque.T"/></x>
			</f>
			<haxe_doc>Tries to retrieve an element from the front of `this` Deque.

		If an element is available, it is removed from the queue and returned.

		If no element is available and `block` is `false`, `null` is returned.

		Otherwise, execution blocks until an element is available and returns it.</haxe_doc>
		</pop>
		<new public="1" set="method" line="32">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create a new Deque instance which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>A Deque is a double-ended queue with a `pop` method that can block until
	an element is available. It is commonly used to synchronize threads.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":native"><e>"haxe.java.vm.Deque"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="sys.thread.IThreadPool" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/IThreadPool.hx" interface="1">
		<get_threadsCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</get_threadsCount>
		<get_isShutdown public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":compilerGenerated"/>
				<m n=":noCompletion"/>
			</meta>
		</get_isShutdown>
		<threadsCount public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>Amount of alive threads in this pool.</haxe_doc>
		</threadsCount>
		<isShutdown public="1" get="accessor" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates if `shutdown` method of this pool has been called.</haxe_doc>
		</isShutdown>
		<run public="1" set="method">
			<f a="task">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Submit a task to run in a thread.

		Throws an exception if the pool is shut down.</haxe_doc>
		</run>
		<shutdown public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Initiates a shutdown.
		All previousely submitted tasks will be executed, but no new tasks will
		be accepted.

		Multiple calls to this method have no effect.</haxe_doc>
		</shutdown>
		<haxe_doc>A thread pool interface.</haxe_doc>
	</class>
	<class path="sys.thread.ElasticThreadPool" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/ElasticThreadPool.hx">
		<implements path="sys.thread.IThreadPool"/>
		<threadsCount public="1" get="accessor" set="null"><x path="Int"/></threadsCount>
		<maxThreadsCount public="1"><x path="Int"/></maxThreadsCount>
		<isShutdown public="1" get="accessor" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates if `shutdown` method of this pool has been called.</haxe_doc>
		</isShutdown>
		<_isShutdown expr="false" line="45">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</_isShutdown>
		<get_isShutdown set="method" line="46"><f a=""><x path="Bool"/></f></get_isShutdown>
		<pool final="1" expr="[]" line="48">
			<c path="Array"><c path="sys.thread._ElasticThreadPool.Worker"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pool>
		<queue final="1" expr="new Deque&lt;Void -&gt; Void&gt;()" line="49">
			<c path="sys.thread.Deque"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Deque<Void -> Void>()]]></e></m></meta>
		</queue>
		<mutex final="1" expr="new Mutex()" line="50">
			<c path="sys.thread.Mutex"/>
			<meta><m n=":value"><e>new Mutex()</e></m></meta>
		</mutex>
		<threadTimeout final="1"><x path="Float"/></threadTimeout>
		<run public="1" set="method" line="71">
			<f a="task">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Submit a task to run in a thread.

		Throws an exception if the pool is shut down.</haxe_doc>
		</run>
		<shutdown public="1" set="method" line="111">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Initiates a shutdown.
		All previousely submitted tasks will be executed, but no new tasks will
		be accepted.

		Multiple calls to this method have no effect.</haxe_doc>
		</shutdown>
		<get_threadsCount set="method" line="121"><f a=""><x path="Int"/></f></get_threadsCount>
		<new public="1" set="method" line="59">
			<f a="maxThreadsCount:?threadTimeout" v=":60">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ threadTimeout : 60 }</e></m></meta>
			<haxe_doc>Create a new thread pool with `threadsCount` threads.

		If a worker thread does not receive a task for `threadTimeout` seconds it
		is terminated.</haxe_doc>
		</new>
		<haxe_doc>Thread pool with a varying amount of threads.

	A new thread is spawned every time a task is submitted while all existing
	threads are busy.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.thread._ElasticThreadPool.Worker" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/ElasticThreadPool.hx" private="1" module="sys.thread.ElasticThreadPool">
		<task public="1" set="null"><x path="Null"><f a=""><x path="Void"/></f></x></task>
		<dead public="1" set="null" expr="false" line="132">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</dead>
		<deathMutex final="1" expr="new Mutex()" line="134">
			<c path="sys.thread.Mutex"/>
			<meta><m n=":value"><e>new Mutex()</e></m></meta>
		</deathMutex>
		<waiter final="1" expr="new Lock()" line="135">
			<c path="sys.thread.Lock"/>
			<meta><m n=":value"><e>new Lock()</e></m></meta>
		</waiter>
		<queue final="1"><c path="sys.thread.Deque"><f a=""><x path="Void"/></f></c></queue>
		<timeout final="1"><x path="Float"/></timeout>
		<thread><x path="sys.thread.Thread"/></thread>
		<isShutdown expr="false" line="139">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</isShutdown>
		<wakeup public="1" set="method" line="147"><f a="task">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></wakeup>
		<shutdown public="1" set="method" line="156"><f a=""><x path="Void"/></f></shutdown>
		<start set="method" line="161"><f a=""><x path="Void"/></f></start>
		<loop set="method" line="166"><f a=""><x path="Void"/></f></loop>
		<new public="1" set="method" line="141"><f a="queue:timeout">
	<c path="sys.thread.Deque"><f a=""><x path="Void"/></f></c>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="sys.thread.NextEventTime" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/EventLoop.hx" module="sys.thread.EventLoop">
		<Now><haxe_doc>There's already an event waiting to be executed</haxe_doc></Now>
		<Never><haxe_doc>No new events are expected.</haxe_doc></Never>
		<AnyTime a="time">
			<x path="Null"><x path="Float"/></x>
			<haxe_doc>An event is expected to arrive at any time.
		If `time` is specified, then the event will be ready at that time for sure.</haxe_doc>
		</AnyTime>
		<At a="time">
			<x path="Float"/>
			<haxe_doc>An event is expected to be ready for execution at `time`.</haxe_doc>
		</At>
		<haxe_doc>When an event loop has an available event to execute.</haxe_doc>
	</enum>
	<abstract path="sys.thread.EventHandler" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/EventLoop.hx" module="sys.thread.EventLoop">
		<from><icast><c path="sys.thread._EventLoop.RegularEvent"/></icast></from>
		<this><c path="sys.thread._EventLoop.RegularEvent"/></this>
		<to><icast><c path="sys.thread._EventLoop.RegularEvent"/></icast></to>
		<impl><class path="sys.thread._EventLoop.EventHandler_Impl_" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/EventLoop.hx" private="1" module="sys.thread.EventLoop" extern="1" final="1"/></impl>
	</abstract>
	<class path="sys.thread._EventLoop.EventHandler_Impl_" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/EventLoop.hx" private="1" module="sys.thread.EventLoop" extern="1" final="1"/>
	<class path="sys.thread._EventLoop.RegularEvent" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/EventLoop.hx" private="1" module="sys.thread.EventLoop">
		<nextRunTime public="1"><x path="Float"/></nextRunTime>
		<interval final="1" public="1"><x path="Float"/></interval>
		<run final="1" public="1"><f a=""><x path="Void"/></f></run>
		<next public="1"><x path="Null"><c path="sys.thread._EventLoop.RegularEvent"/></x></next>
		<previous public="1"><x path="Null"><c path="sys.thread._EventLoop.RegularEvent"/></x></previous>
		<cancelled public="1" expr="false" line="284">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</cancelled>
		<new public="1" set="method" line="286"><f a="run:nextRunTime:interval">
	<f a=""><x path="Void"/></f>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.thread.FixedThreadPool" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/FixedThreadPool.hx">
		<implements path="sys.thread.IThreadPool"/>
		<shutdownTask set="method" line="88" static="1"><f a=""><x path="Void"/></f></shutdownTask>
		<threadsCount public="1" get="accessor" set="null"><x path="Int"/></threadsCount>
		<get_threadsCount set="method" line="39"><f a=""><x path="Int"/></f></get_threadsCount>
		<isShutdown public="1" get="accessor" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates if `shutdown` method of this pool has been called.</haxe_doc>
		</isShutdown>
		<_isShutdown expr="false" line="43">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</_isShutdown>
		<get_isShutdown set="method" line="44"><f a=""><x path="Bool"/></f></get_isShutdown>
		<pool final="1"><c path="Array"><c path="sys.thread._FixedThreadPool.Worker"/></c></pool>
		<poolMutex final="1" expr="new Mutex()" line="47">
			<c path="sys.thread.Mutex"/>
			<meta><m n=":value"><e>new Mutex()</e></m></meta>
		</poolMutex>
		<queue final="1" expr="new Deque&lt;Void -&gt; Void&gt;()" line="48">
			<c path="sys.thread.Deque"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Deque<Void -> Void>()]]></e></m></meta>
		</queue>
		<run public="1" set="method" line="65">
			<f a="task">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Submit a task to run in a thread.

		Throws an exception if the pool is shut down.</haxe_doc>
		</run>
		<shutdown public="1" set="method" line="80">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Initiates a shutdown.
		All previousely submitted tasks will be executed, but no new tasks will
		be accepted.

		Multiple calls to this method have no effect.</haxe_doc>
		</shutdown>
		<new public="1" set="method" line="53">
			<f a="threadsCount">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new thread pool with `threadsCount` threads.</haxe_doc>
		</new>
		<haxe_doc>Thread pool with a constant amount of threads.
	Threads in the pool will exist until the pool is explicitly shut down.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.thread._FixedThreadPool.ShutdownException" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/FixedThreadPool.hx" private="1" module="sys.thread.FixedThreadPool"><extends path="haxe.Exception"/></class>
	<class path="sys.thread._FixedThreadPool.Worker" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/FixedThreadPool.hx" private="1" module="sys.thread.FixedThreadPool">
		<thread><x path="sys.thread.Thread"/></thread>
		<queue final="1"><c path="sys.thread.Deque"><x path="Null"><f a=""><x path="Void"/></f></x></c></queue>
		<loop set="method" line="104"><f a=""><x path="Void"/></f></loop>
		<new public="1" set="method" line="99"><f a="queue">
	<c path="sys.thread.Deque"><x path="Null"><f a=""><x path="Void"/></f></x></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.thread.Lock" params="" file="/home/runner/work/haxe/haxe/std/jvm/_std/sys/thread/Lock.hx">
		<deque final="1" expr="new LinkedBlockingDeque&lt;String&gt;()" line="29">
			<c path="java.util.concurrent.LinkedBlockingDeque"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[new LinkedBlockingDeque<String>()]]></e></m></meta>
		</deque>
		<wait public="1" set="method" line="33">
			<f a="?timeout">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Waits for the lock to be released, or `timeout` (in seconds)
		to expire. Returns `true` if the lock is released and `false`
		if a time-out occurs.</haxe_doc>
		</wait>
		<release public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the lock once.

		The thread does not need to own the lock in order to release
		it. Each call to `release` allows exactly one call to `wait`
		to execute.</haxe_doc>
		</release>
		<new public="1" set="method" line="31">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Lock which is initially locked.</haxe_doc>
		</new>
		<haxe_doc>A Lock allows blocking execution until it has been unlocked. It keeps track
	of how often `release` has been called, and blocks exactly as many `wait`
	calls.

	The order of the `release` and `wait` calls is irrelevant. That is, a Lock
	can be released before anyone waits for it. In that case, the `wait` call
	will execute immediately.

	Usage example:

	```haxe
	var lock = new Lock();
	var elements = [1, 2, 3];
	for (element in elements) {
		// Create one thread per element
		new Thread(function() {
			trace(element);
			Sys.sleep(1);
			// Release once per thread = 3 times
			lock.release();
		});
	}
	for (_ in elements) {
		// Wait 3 times
		lock.wait();
	}
	trace("All threads finished");
	```</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.thread.NoEventLoopException" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/NoEventLoopException.hx">
		<extends path="haxe.Exception"/>
		<new public="1" set="method" line="6">
			<f a="?msg:?previous" v="&quot;Event loop is not available. Refer to sys.thread.Thread.runWithEventLoop.&quot;:">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ msg : "Event loop is not available. Refer to sys.thread.Thread.runWithEventLoop." }</e></m></meta>
		</new>
	</class>
	<class path="sys.thread.Semaphore" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/thread/Semaphore.hx">
		<native final="1"><c path="java.util.concurrent.Semaphore"/></native>
		<acquire public="1" set="method" line="14">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Locks the semaphore.
		If the value of the semaphore is zero, then the thread will block until it is able to lock the semaphore.
		If the value is non-zero, it is decreased by one.</haxe_doc>
		</acquire>
		<tryAcquire public="1" set="method" line="18">
			<f a="?timeout">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Try to lock the semaphore.
		If the value of the semaphore is zero, `false` is returned, else the value is increased.

		If `timeout` is specified, this function will block until the thread is able to acquire the semaphore, or the timout expires.
		`timeout` is in seconds.</haxe_doc>
		</tryAcquire>
		<release public="1" set="method" line="22">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Release the semaphore.
		The value of the semaphore is increased by one.</haxe_doc>
		</release>
		<new public="1" set="method" line="10">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new semaphore with an initial value.</haxe_doc>
		</new>
		<meta>
			<m n=":coreApi"/>
			<m n=":native"><e>"haxe.java.vm.Semaphore"</e></m>
		</meta>
	</class>
	<typedef path="sys.thread._Thread.ThreadImpl" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread"><c path="sys.thread._Thread.HaxeThread"/></typedef>
	<abstract path="sys.thread.Thread" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/thread/Thread.hx">
		<from><icast><t path="sys.thread._Thread.ThreadImpl"/></icast></from>
		<this><t path="sys.thread._Thread.ThreadImpl"/></this>
		<impl><class path="sys.thread._Thread.Thread_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread" final="1">
	<events public="1" get="accessor" set="null" static="1"><c path="sys.thread.EventLoop"/></events>
	<_new get="inline" set="null" line="40" static="1">
		<f a="t">
			<c path="sys.thread._Thread.HaxeThread"/>
			<x path="sys.thread.Thread"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<create public="1" get="inline" set="null" line="44" static="1"><f a="job">
	<f a=""><x path="Void"/></f>
	<x path="sys.thread.Thread"/>
</f></create>
	<current public="1" get="inline" set="null" line="48" static="1"><f a=""><x path="sys.thread.Thread"/></f></current>
	<runWithEventLoop public="1" get="inline" set="null" line="52" static="1"><f a="job">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runWithEventLoop>
	<createWithEventLoop public="1" get="inline" set="null" line="56" static="1"><f a="job">
	<f a=""><x path="Void"/></f>
	<x path="sys.thread.Thread"/>
</f></createWithEventLoop>
	<readMessage public="1" get="inline" set="null" line="60" static="1"><f a="block">
	<x path="Bool"/>
	<d/>
</f></readMessage>
	<sendMessage public="1" get="inline" set="null" line="64" static="1"><f a="this:msg">
	<t path="sys.thread._Thread.ThreadImpl"/>
	<d/>
	<x path="Void"/>
</f></sendMessage>
	<getHandle get="inline" set="null" line="68" static="1"><f a="this">
	<t path="sys.thread._Thread.ThreadImpl"/>
	<c path="sys.thread._Thread.HaxeThread"/>
</f></getHandle>
	<get_events set="method" line="72" static="1"><f a="this">
	<t path="sys.thread._Thread.ThreadImpl"/>
	<c path="sys.thread.EventLoop"/>
</f></get_events>
	<processEvents set="method" line="79" static="1">
		<f a=""><x path="Void"/></f>
		<meta><m n=":keep"/></meta>
	</processEvents>
</class></impl>
	</abstract>
	<class path="sys.thread._Thread.Thread_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread" final="1">
		<events public="1" get="accessor" set="null" static="1"><c path="sys.thread.EventLoop"/></events>
		<_new get="inline" set="null" line="40" static="1">
			<f a="t">
				<c path="sys.thread._Thread.HaxeThread"/>
				<x path="sys.thread.Thread"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<create public="1" get="inline" set="null" line="44" static="1"><f a="job">
	<f a=""><x path="Void"/></f>
	<x path="sys.thread.Thread"/>
</f></create>
		<current public="1" get="inline" set="null" line="48" static="1"><f a=""><x path="sys.thread.Thread"/></f></current>
		<runWithEventLoop public="1" get="inline" set="null" line="52" static="1"><f a="job">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runWithEventLoop>
		<createWithEventLoop public="1" get="inline" set="null" line="56" static="1"><f a="job">
	<f a=""><x path="Void"/></f>
	<x path="sys.thread.Thread"/>
</f></createWithEventLoop>
		<readMessage public="1" get="inline" set="null" line="60" static="1"><f a="block">
	<x path="Bool"/>
	<d/>
</f></readMessage>
		<sendMessage public="1" get="inline" set="null" line="64" static="1"><f a="this:msg">
	<t path="sys.thread._Thread.ThreadImpl"/>
	<d/>
	<x path="Void"/>
</f></sendMessage>
		<getHandle get="inline" set="null" line="68" static="1"><f a="this">
	<t path="sys.thread._Thread.ThreadImpl"/>
	<c path="sys.thread._Thread.HaxeThread"/>
</f></getHandle>
		<get_events set="method" line="72" static="1"><f a="this">
	<t path="sys.thread._Thread.ThreadImpl"/>
	<c path="sys.thread.EventLoop"/>
</f></get_events>
		<processEvents set="method" line="79" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</processEvents>
	</class>
	<abstract path="sys.thread._Thread.Job" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread">
		<from><icast><c path="java.lang.Runnable"/></icast></from>
		<this><c path="java.lang.Runnable"/></this>
		<to><icast><c path="java.lang.Runnable"/></icast></to>
		<impl><class path="sys.thread._Thread.Job_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread" final="1"><_new public="1" get="inline" set="null" line="174" static="1">
	<f a="job">
		<f a=""><x path="Void"/></f>
		<x path="sys.thread._Thread.Job"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class></impl>
	</abstract>
	<class path="sys.thread._Thread.Job_Impl_" params="" file="/home/runner/work/haxe/haxe/std/java/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread" final="1"><_new public="1" get="inline" set="null" line="174" static="1">
	<f a="job">
		<f a=""><x path="Void"/></f>
		<x path="sys.thread._Thread.Job"/>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class>
	<class path="sys.thread.ThreadPoolException" params="" file="/home/runner/work/haxe/haxe/std/sys/thread/ThreadPoolException.hx"><extends path="haxe.Exception"/></class>
	<class path="sys.thread.Tls" params="T" file="/home/runner/work/haxe/haxe/std/java/_std/sys/thread/Tls.hx">
		<t><c path="java.lang.ThreadLocal"><c path="sys.thread.Tls.T"/></c></t>
		<value public="1" get="accessor" set="accessor"><c path="sys.thread.Tls.T"/></value>
		<get_value get="inline" set="null" line="35"><f a=""><c path="sys.thread.Tls.T"/></f></get_value>
		<set_value get="inline" set="null" line="39"><f a="v">
	<c path="sys.thread.Tls.T"/>
	<c path="sys.thread.Tls.T"/>
</f></set_value>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<meta><m n=":native"><e>"haxe.java.vm.Tls"</e></m></meta>
	</class>
</haxe>