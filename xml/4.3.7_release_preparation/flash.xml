<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/home/runner/work/haxe/haxe/std/Any.hx">
		<from><icast><d/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="/home/runner/work/haxe/haxe/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="37" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<toString get="inline" set="null" line="40" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</toString>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/home/runner/work/haxe/haxe/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="37" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<toString get="inline" set="null" line="40" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</toString>
	</class>
	<class path="Array" params="T" file="/home/runner/work/haxe/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<contains public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether `this` Array contains `x`.

		If `x` is found by checking standard equality, the function returns `true`, otherwise
		the function returns `false`.</haxe_doc>
		</contains>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="280">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="287">
			<f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array indices and values.</haxe_doc>
		</keyValueIterator>
		<map public="1" params="S" get="inline" set="null" line="298">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="316">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="/home/runner/work/haxe/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/home/runner/work/haxe/haxe/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="DateTools" params="" file="/home/runner/work/haxe/haxe/std/DateTools.hx">
		<DAY_SHORT_NAMES expr="[&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;]" line="35" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]</e></m></meta>
		</DAY_SHORT_NAMES>
		<DAY_NAMES expr="[&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;]" line="36" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]</e></m></meta>
		</DAY_NAMES>
		<MONTH_SHORT_NAMES expr="[&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]" line="37" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]</e></m></meta>
		</MONTH_SHORT_NAMES>
		<MONTH_NAMES expr="[&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]" line="40" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]</e></m></meta>
		</MONTH_NAMES>
		<__format_get set="method" line="44" static="1"><f a="d:e">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format_get>
		<__format set="method" line="105" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="144" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.

		```haxe
		var t = DateTools.format(Date.now(), "%Y-%m-%d_%H:%M:%S");
		// 2016-07-08_14:44:05

		var t = DateTools.format(Date.now(), "%r");
		// 02:44:05 PM

		var t = DateTools.format(Date.now(), "%T");
		// 14:44:05

		var t = DateTools.format(Date.now(), "%F");
		// 2016-07-08
		```</haxe_doc>
		</format>
		<delta public="1" get="inline" set="null" line="160" static="1">
			<f a="d:t">
				<c path="Date"/>
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns the result of adding timestamp `t` to Date `d`.

		This is a convenience function for calling
		`Date.fromTime(d.getTime() + t)`.</haxe_doc>
		</delta>
		<DAYS_OF_MONTH expr="[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]" line="164" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</e></m></meta>
		</DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="171" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in the month of Date `d`.

		This method handles leap years.</haxe_doc>
		</getMonthDays>
		<seconds public="1" get="inline" set="null" line="185" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of seconds to a timestamp.</haxe_doc>
		</seconds>
		<minutes public="1" get="inline" set="null" line="192" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of minutes to a timestamp.</haxe_doc>
		</minutes>
		<hours public="1" get="inline" set="null" line="199" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of hours to a timestamp.</haxe_doc>
		</hours>
		<days public="1" get="inline" set="null" line="206" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of days to a timestamp.</haxe_doc>
		</days>
		<parse public="1" set="method" line="213" static="1">
			<f a="t">
				<x path="Float"/>
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
			</f>
			<haxe_doc>Separate a date-time into several components</haxe_doc>
		</parse>
		<make public="1" set="method" line="235" static="1">
			<f a="o">
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
				<x path="Float"/>
			</f>
			<haxe_doc>Build a date-time from several components</haxe_doc>
		</make>
		<makeUtc public="1" get="inline" set="null" line="243" static="1">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Retrieve Unix timestamp value from Date components. Takes same argument sequence as the Date constructor.</haxe_doc>
		</makeUtc>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="flash.utils.RegExp" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/RegExp.hx" extern="1">
		<dotall public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</dotall>
		<extended public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</extended>
		<global public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</global>
		<ignoreCase public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ignoreCase>
		<lastIndex public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</lastIndex>
		<multiline public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</multiline>
		<source public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</source>
		<exec public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</exec>
		<get_dotall set="method"><f a=""><x path="Bool"/></f></get_dotall>
		<get_extended set="method"><f a=""><x path="Bool"/></f></get_extended>
		<get_global set="method"><f a=""><x path="Bool"/></f></get_global>
		<get_ignoreCase set="method"><f a=""><x path="Bool"/></f></get_ignoreCase>
		<get_lastIndex set="method"><f a=""><x path="Int"/></f></get_lastIndex>
		<get_multiline set="method"><f a=""><x path="Bool"/></f></get_multiline>
		<get_source set="method"><f a=""><c path="String"/></f></get_source>
		<set_lastIndex set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_lastIndex>
		<test public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</test>
		<new public="1" set="method"><f a="?pattern:?options">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="EReg" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/EReg.hx">
		<escape public="1" get="inline" set="null" line="118" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Escape the string `s` for use as a part of regular expression.

		If `s` is null, the result is unspecified.</haxe_doc>
		</escape>
		<escapeRe expr="new flash.utils.RegExp(&quot;[.*+?^${}()|[\\]\\\\]&quot;, &quot;g&quot;)" line="122" static="1">
			<c path="flash.utils.RegExp"/>
			<meta><m n=":value"><e>new flash.utils.RegExp("[.*+?^${}()|[\\]\\\\]", "g")</e></m></meta>
		</escapeRe>
		<r><c path="flash.utils.RegExp"/></r>
		<result><d/></result>
		<match public="1" set="method" line="30">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="37">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, the result is unspecified.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="41">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="48">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="56">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="62">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="81">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<replace public="1" set="method" line="88">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="92">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method" line="26">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Enum" params="T" file="/home/runner/work/haxe/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/home/runner/work/haxe/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/home/runner/work/haxe/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><match public="1" set="method" line="58" static="1">
	<f a="this:pattern">
		<x path="EnumValue"/>
		<d/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
</match></class></impl>
	</abstract>
	<class path="_EnumValue.EnumValue_Impl_" params="" file="/home/runner/work/haxe/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><match public="1" set="method" line="58" static="1">
	<f a="this:pattern">
		<x path="EnumValue"/>
		<d/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
</match></class>
	<class path="IntIterator" params="" file="/home/runner/work/haxe/haxe/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="53">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="62">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="45">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</class>
	<class path="Lambda" params="" file="/home/runner/work/haxe/haxe/std/Lambda.hx">
		<array public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="57" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="haxe.ds.List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" get="inline" set="null" line="69" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="item">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="Array"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `it`.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" get="inline" set="null" line="78" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a="index:item">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="Array"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<flatten public="1" params="A" get="inline" set="null" line="87" static="1">
			<f a="it">
				<t path="Iterable"><t path="Iterable"><c path="flatten.A"/></t></t>
				<c path="Array"><c path="flatten.A"/></c>
			</f>
			<haxe_doc>Concatenate a list of iterables.
		The order of elements is preserved.</haxe_doc>
		</flatten>
		<flatMap public="1" params="A:B" get="inline" set="null" line="96" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="flatMap.A"/></t>
				<f a="item">
					<c path="flatMap.A"/>
					<t path="Iterable"><c path="flatMap.B"/></t>
				</f>
				<c path="Array"><c path="flatMap.B"/></c>
			</f>
			<haxe_doc>A composition of map and flatten.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</flatMap>
		<has public="1" params="A" set="method" line="108" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="item">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.

		This function returns true as soon as an element is found for which a
		call to `f` returns true.

		If no such element is found, the result is false.

		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="144" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="item">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.

		This function returns false as soon as an element is found for which a
		call to `f` returns false.

		If no such element is found, the result is true.

		In particular, this function always returns true if `it` is empty.

		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="156" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="item">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.

		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="167" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="item">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a Array containing those elements of `it` for which `f` returned
		true.
		If `it` is empty, the result is the empty Array even if `f` is null.
		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="183" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a="item:result">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.

		If `it` has no elements, the result is `first`.

		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<foldi public="1" params="A:B" set="method" line="194" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="foldi.A"/></t>
				<f a="item:result:index">
					<c path="foldi.A"/>
					<c path="foldi.B"/>
					<x path="Int"/>
					<c path="foldi.B"/>
				</f>
				<c path="foldi.B"/>
				<c path="foldi.B"/>
			</f>
			<haxe_doc>Similar to fold, but also passes the index of each element to `f`.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</foldi>
		<count public="1" params="A" set="method" line="209" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="item">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="224" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="235" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<find public="1" params="T" set="method" line="255" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="item">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<x path="Null"><c path="find.T"/></x>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<findIndex public="1" params="T" set="method" line="273" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="findIndex.T"/></t>
				<f a="item">
					<c path="findIndex.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is -1.

		If `f` is null, the result is unspecified.</haxe_doc>
		</findIndex>
		<concat public="1" params="T" set="method" line="289" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="Array"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new Array containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
	</class>
	<typedef path="List" params="T" file="/home/runner/work/haxe/haxe/std/List.hx"><c path="haxe.ds.List"><c path="List.T"/></c></typedef>
	<typedef path="Map" params="K:V" file="/home/runner/work/haxe/haxe/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/home/runner/work/haxe/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/home/runner/work/haxe/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately `3.141592653589793`.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of `-1.0 / 0.0`.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of `1.0 / 0.0`.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		`NaN` stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: `Math.sqrt(-1)`.

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		- If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.
		- If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		- If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		`exp(1.0)` is approximately `2.718281828459`.

		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to `0.0`,
		and less than `1.0`.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is `Math.NaN`.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, `null`, `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="Reflect" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/Reflect.hx">
		<hasField public="1" set="method" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="29" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="34" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="39" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="50" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" get="inline" set="null" line="60" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Call a method `func` with the given arguments `args`.

		The object `o` is ignored in most cases. It serves as the `this`-context in the following
		situations:

		* (neko) Allows switching the context to `o` in all cases.
		* (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
		* (js, lua) Require the `o` argument if `func` does not, but should have a context.
			This can occur by accessing a function field natively, e.g. through `Reflect.field`
			or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
			ignored like on other targets.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="65" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="79" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="83" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="89" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="94" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="104" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="109" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="116" static="1">
			<f a="o">
				<x path="Null"><c path="copy.T"/></x>
				<x path="Null"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is `null`.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="126" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="Std" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/Std.hx">
		<is public="1" get="inline" set="null" line="27" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.is is deprecated. Use Std.isOfType instead."</e></m></meta>
			<haxe_doc>DEPRECATED. Use `Std.isOfType(v, t)` instead.

		Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<isOfType public="1" set="method" line="31" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<downcast public="1" params="T:S" get="inline" set="null" line="35" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" get="inline" set="null" line="40" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m></meta>
		</instance>
		<string public="1" set="method" line="44" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="48" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="52" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		`x` may optionally start with a + or - to denote a postive or negative value respectively.

		If the optional sign is followed 0x or 0X, hexadecimal notation is recognized where the following
		digits may contain 0-9 and A-F. Both the prefix and digits are case insensitive.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. Octal and binary
		notations are not supported.

		Parsing continues until an invalid character is detected, in which case the result up to
		that point is returned. Scientific notation is not supported. That is `Std.parseInt('10e2')` produces `10`.

		If `x` is `null`, the result is `null`.
		If `x` cannot be parsed as integer or is empty, the result is `null`.

		If `x` starts with a hexadecimal prefix which is not followed by at least one valid hexadecimal
		digit, the result is unspecified.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="59" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of `null`. Also, hexadecimal support is **not** specified.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.

		It may also end with `e` or `E` followed by optional minus or plus sign and a sequence of
		digits (defines exponent to base 10).</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="63" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/home/runner/work/haxe/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="38" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringBuf" params="" file="/home/runner/work/haxe/haxe/std/StringBuf.hx">
		<b><c path="String"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="48"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" get="inline" set="null" line="61">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addChar public="1" get="inline" set="null" line="71">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<addSub public="1" get="inline" set="null" line="87">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<toString public="1" get="inline" set="null" line="96">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.SysTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/SysTools.hx">
		<winMetaCharacters final="1" public="1" set="null" expr="[&quot; &quot;.code, &quot;(&quot;.code, &quot;)&quot;.code, &quot;%&quot;.code, &quot;!&quot;.code, &quot;^&quot;.code, &quot;\&quot;&quot;.code, &quot;&lt;&quot;.code, &quot;&gt;&quot;.code, &quot;&amp;&quot;.code, &quot;|&quot;.code, &quot;\n&quot;.code, &quot;\r&quot;.code, &quot;,&quot;.code, &quot;;&quot;.code]" line="9" static="1">
			<x path="haxe.ds.ReadOnlyArray"><x path="Int"/></x>
			<meta><m n=":value"><e><![CDATA[[" ".code, "(".code, ")".code, "%".code, "!".code, "^".code, "\"".code, "<".code, ">".code, "&".code, "|".code, "\n".code, "\r".code, ",".code, ";".code]]]></e></m></meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteUnixArg public="1" set="method" line="18" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<quoteWinArg public="1" set="method" line="46" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```haxe
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
	</class>
	<class path="StringTools" params="" file="/home/runner/work/haxe/haxe/std/StringTools.hx">
		<urlEncode public="1" get="inline" set="null" line="42" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" get="inline" set="null" line="110" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="158" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="193" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: `htmlUnescape(htmlEscape(s)) == s`

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<contains public="1" get="inline" set="null" line="211" static="1">
			<f a="s:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `s` contains `value` and  `false` otherwise.

		When `value` is `null`, the result is unspecified.</haxe_doc>
		</contains>
		<startsWith public="1" set="method" line="226" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="251" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="282" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="300" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="325" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="347" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="369" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="394" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="416" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurrences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s` except the last one. If `by` is also the empty String `""`, `s`
		remains unchanged.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="438" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="480" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof()` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</fastCodeAt>
		<unsafeCodeAt public="1" get="inline" set="null" line="519" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</unsafeCodeAt>
		<iterator public="1" get="inline" set="null" line="554" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringIterator"/>
			</f>
			<haxe_doc>Returns an iterator of the char codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringIteratorUnicode`.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="565" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIterator"/>
			</f>
			<haxe_doc>Returns an iterator of the char indexes and codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different of runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringKeyValueIteratorUnicode`.</haxe_doc>
		</keyValueIterator>
		<isEof public="1" get="inline" set="null" line="572" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Tells if `c` represents the end-of-file (EOF) character.</haxe_doc>
		</isEof>
		<quoteUnixArg public="1" set="method" line="593" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.quoteUnixArg() is deprecated. Use haxe.SysTools.quoteUnixArg() instead."</e></m>
			</meta>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<winMetaCharacters public="1" expr="cast haxe.SysTools.winMetaCharacters" line="602" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta>
				<m n=":value"><e>cast haxe.SysTools.winMetaCharacters</e></m>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.winMetaCharacters is deprecated. Use haxe.SysTools.winMetaCharacters instead."</e></m>
			</meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteWinArg public="1" set="method" line="619" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.quoteWinArg() is deprecated. Use haxe.SysTools.quoteWinArg() instead."</e></m>
			</meta>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```haxe
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<MIN_SURROGATE_CODE_POINT get="inline" set="null" expr="65536" line="634" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65536</e></m></meta>
		</MIN_SURROGATE_CODE_POINT>
		<utf16CodePointAt get="inline" set="null" line="636" static="1"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></utf16CodePointAt>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="Type" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="36" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="49" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="63" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="70" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="91" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="96" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="119" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="138" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="161" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="174" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="188" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<describe set="method" line="196" static="1">
			<f a="t:fact">
				<d/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</describe>
		<getInstanceFields public="1" set="method" line="213" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`, including
		inherited fields.

		This only includes fields which are known at compile-time. In
		particular, using `getInstanceFields(getClass(obj))` will not include
		any fields which were added to `obj` at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="217" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="224" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="230" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="269" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="286" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="290" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="294" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="298" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="UInt" params="" file="/home/runner/work/haxe/haxe/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/home/runner/work/haxe/haxe/std/UInt.hx" private="1" module="UInt" final="1">
	<add get="inline" set="null" line="135" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<div get="inline" set="null" line="139" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</div>
	<mul get="inline" set="null" line="143" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</mul>
	<sub get="inline" set="null" line="147" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<gt get="inline" set="null" line="152" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gte get="inline" set="null" line="159" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="165" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="169" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<and get="inline" set="null" line="173" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
	</and>
	<or get="inline" set="null" line="177" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
	</or>
	<xor get="inline" set="null" line="181" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
	</xor>
	<shl get="inline" set="null" line="185" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
	</shl>
	<shr get="inline" set="null" line="189" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</shr>
	<ushr get="inline" set="null" line="193" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
	</ushr>
	<mod get="inline" set="null" line="197" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</mod>
	<addWithFloat get="inline" set="null" line="201" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addWithFloat>
	<mulWithFloat get="inline" set="null" line="205" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulWithFloat>
	<divFloat get="inline" set="null" line="209" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divFloat>
	<floatDiv get="inline" set="null" line="213" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</floatDiv>
	<subFloat get="inline" set="null" line="217" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subFloat>
	<floatSub get="inline" set="null" line="221" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</floatSub>
	<gtFloat get="inline" set="null" line="225" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtFloat>
	<equalsInt params="T" get="inline" set="null" line="229" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsInt>
	<notEqualsInt params="T" get="inline" set="null" line="233" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsInt>
	<equalsFloat params="T" get="inline" set="null" line="237" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsFloat>
	<notEqualsFloat params="T" get="inline" set="null" line="241" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsFloat>
	<gteFloat get="inline" set="null" line="245" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteFloat>
	<floatGt get="inline" set="null" line="249" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</floatGt>
	<floatGte get="inline" set="null" line="253" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</floatGte>
	<ltFloat get="inline" set="null" line="257" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltFloat>
	<lteFloat get="inline" set="null" line="261" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteFloat>
	<floatLt get="inline" set="null" line="265" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</floatLt>
	<floatLte get="inline" set="null" line="269" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</floatLte>
	<modFloat get="inline" set="null" line="273" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modFloat>
	<floatMod get="inline" set="null" line="277" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</floatMod>
	<negBits get="inline" set="null" line="281" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
	</negBits>
	<prefixIncrement get="inline" set="null" line="285" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>++A</e></m></meta>
	</prefixIncrement>
	<postfixIncrement get="inline" set="null" line="289" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</postfixIncrement>
	<prefixDecrement get="inline" set="null" line="293" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>--A</e></m></meta>
	</prefixDecrement>
	<postfixDecrement get="inline" set="null" line="297" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A--</e></m></meta>
	</postfixDecrement>
	<toString get="inline" set="null" line="302" static="1"><f a="this:?radix">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></toString>
	<toInt get="inline" set="null" line="306" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
	<toFloat get="inline" set="null" line="310" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
</class></impl>
	</abstract>
	<class path="_UInt.UInt_Impl_" params="" file="/home/runner/work/haxe/haxe/std/UInt.hx" private="1" module="UInt" final="1">
		<add get="inline" set="null" line="135" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<div get="inline" set="null" line="139" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</div>
		<mul get="inline" set="null" line="143" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</mul>
		<sub get="inline" set="null" line="147" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<gt get="inline" set="null" line="152" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gte get="inline" set="null" line="159" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="165" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="169" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<and get="inline" set="null" line="173" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		</and>
		<or get="inline" set="null" line="177" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
		</or>
		<xor get="inline" set="null" line="181" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
		</xor>
		<shl get="inline" set="null" line="185" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		</shl>
		<shr get="inline" set="null" line="189" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</shr>
		<ushr get="inline" set="null" line="193" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		</ushr>
		<mod get="inline" set="null" line="197" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</mod>
		<addWithFloat get="inline" set="null" line="201" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addWithFloat>
		<mulWithFloat get="inline" set="null" line="205" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulWithFloat>
		<divFloat get="inline" set="null" line="209" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divFloat>
		<floatDiv get="inline" set="null" line="213" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</floatDiv>
		<subFloat get="inline" set="null" line="217" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subFloat>
		<floatSub get="inline" set="null" line="221" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</floatSub>
		<gtFloat get="inline" set="null" line="225" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtFloat>
		<equalsInt params="T" get="inline" set="null" line="229" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsInt>
		<notEqualsInt params="T" get="inline" set="null" line="233" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsInt>
		<equalsFloat params="T" get="inline" set="null" line="237" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsFloat>
		<notEqualsFloat params="T" get="inline" set="null" line="241" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsFloat>
		<gteFloat get="inline" set="null" line="245" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteFloat>
		<floatGt get="inline" set="null" line="249" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</floatGt>
		<floatGte get="inline" set="null" line="253" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</floatGte>
		<ltFloat get="inline" set="null" line="257" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltFloat>
		<lteFloat get="inline" set="null" line="261" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteFloat>
		<floatLt get="inline" set="null" line="265" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</floatLt>
		<floatLte get="inline" set="null" line="269" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</floatLte>
		<modFloat get="inline" set="null" line="273" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modFloat>
		<floatMod get="inline" set="null" line="277" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</floatMod>
		<negBits get="inline" set="null" line="281" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
		</negBits>
		<prefixIncrement get="inline" set="null" line="285" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>++A</e></m></meta>
		</prefixIncrement>
		<postfixIncrement get="inline" set="null" line="289" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</postfixIncrement>
		<prefixDecrement get="inline" set="null" line="293" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>--A</e></m></meta>
		</prefixDecrement>
		<postfixDecrement get="inline" set="null" line="297" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A--</e></m></meta>
		</postfixDecrement>
		<toString get="inline" set="null" line="302" static="1"><f a="this:?radix">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></toString>
		<toInt get="inline" set="null" line="306" static="1"><f a="this">
	<x path="Int"/>
	<x path="Int"/>
</f></toInt>
		<toFloat get="inline" set="null" line="310" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
	</class>
	<abstract path="UnicodeString" params="" file="/home/runner/work/haxe/haxe/std/UnicodeString.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>This abstract provides consistent cross-target unicode support for characters of any width.

	Due to differing internal representations of strings across targets, only the basic
	multilingual plane (BMP) is supported consistently by `String` class.

	This abstract provides API to consistently handle all characters even beyond BMP.

	@see https://haxe.org/manual/std-String-unicode.html</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":access"><e>StringTools</e></m>
		</meta>
		<impl><class path="_UnicodeString.UnicodeString_Impl_" params="" file="/home/runner/work/haxe/haxe/std/UnicodeString.hx" private="1" module="UnicodeString" final="1">
	<validate public="1" set="method" line="44" static="1">
		<f a="b:encoding">
			<c path="haxe.io.Bytes"/>
			<e path="haxe.io.Encoding"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Tells if `b` is a correctly encoded UTF8 byte sequence.</haxe_doc>
	</validate>
	<_new public="1" get="inline" set="null" line="119" static="1">
		<f a="string">
			<c path="String"/>
			<x path="UnicodeString"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates an instance of UnicodeString.</haxe_doc>
	</_new>
	<iterator public="1" get="inline" set="null" line="126" static="1">
		<f a="this">
			<c path="String"/>
			<c path="haxe.iterators.StringIteratorUnicode"/>
		</f>
		<haxe_doc>Returns an iterator of the unicode code points.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="133" static="1">
		<f a="this">
			<c path="String"/>
			<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
		</f>
		<haxe_doc>Returns an iterator of the code point indices and unicode code points.</haxe_doc>
	</keyValueIterator>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The number of characters in `this` String.</haxe_doc>
	</length>
	<charAt public="1" set="method" line="149" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
	</charAt>
	<charCodeAt public="1" set="method" line="172" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="Null"><x path="Int"/></x>
		</f>
		<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.</haxe_doc>
	</charCodeAt>
	<indexOf public="1" set="method" line="205" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex` (if `startIndex` is posivite
		or 0) or `max(this.length + startIndex, 0)` (if `startIndex` is negative).

		If `startIndex` exceeds `this.length`, -1 is returned.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</indexOf>
	<lastIndexOf public="1" set="method" line="261" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</lastIndexOf>
	<substr public="1" set="method" line="320" static="1">
		<f a="this:pos:?len">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
	</substr>
	<substring public="1" set="method" line="375" static="1">
		<f a="this:startIndex:?endIndex">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
	</substring>
	<get_length set="method" line="420" static="1"><f a="this">
	<c path="String"/>
	<x path="Int"/>
</f></get_length>
	<meta><m n=":access"><e>StringTools</e></m></meta>
</class></impl>
	</abstract>
	<class path="_UnicodeString.UnicodeString_Impl_" params="" file="/home/runner/work/haxe/haxe/std/UnicodeString.hx" private="1" module="UnicodeString" final="1">
		<validate public="1" set="method" line="44" static="1">
			<f a="b:encoding">
				<c path="haxe.io.Bytes"/>
				<e path="haxe.io.Encoding"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `b` is a correctly encoded UTF8 byte sequence.</haxe_doc>
		</validate>
		<_new public="1" get="inline" set="null" line="119" static="1">
			<f a="string">
				<c path="String"/>
				<x path="UnicodeString"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates an instance of UnicodeString.</haxe_doc>
		</_new>
		<iterator public="1" get="inline" set="null" line="126" static="1">
			<f a="this">
				<c path="String"/>
				<c path="haxe.iterators.StringIteratorUnicode"/>
			</f>
			<haxe_doc>Returns an iterator of the unicode code points.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="133" static="1">
			<f a="this">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
			</f>
			<haxe_doc>Returns an iterator of the code point indices and unicode code points.</haxe_doc>
		</keyValueIterator>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<charAt public="1" set="method" line="149" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method" line="172" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method" line="205" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex` (if `startIndex` is posivite
		or 0) or `max(this.length + startIndex, 0)` (if `startIndex` is negative).

		If `startIndex` exceeds `this.length`, -1 is returned.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="261" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<substr public="1" set="method" line="320" static="1">
			<f a="this:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method" line="375" static="1">
			<f a="this:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<get_length set="method" line="420" static="1"><f a="this">
	<c path="String"/>
	<x path="Int"/>
</f></get_length>
		<meta><m n=":access"><e>StringTools</e></m></meta>
	</class>
	<abstract path="XmlType" params="" file="/home/runner/work/haxe/haxe/std/Xml.hx" module="Xml">
		<this><x path="Int"/></this>
		<haxe_doc>Xml node types.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="_Xml.XmlType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/Xml.hx" private="1" module="Xml" final="1">
	<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML element type.</haxe_doc>
	</Element>
	<PCData public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents XML parsed character data type.</haxe_doc>
	</PCData>
	<CData public="1" get="inline" set="null" expr="cast 2" line="42" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents XML character data type.</haxe_doc>
	</CData>
	<Comment public="1" get="inline" set="null" expr="cast 3" line="47" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML comment type.</haxe_doc>
	</Comment>
	<DocType public="1" get="inline" set="null" expr="cast 4" line="52" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML doctype element type.</haxe_doc>
	</DocType>
	<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="57" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
	</ProcessingInstruction>
	<Document public="1" get="inline" set="null" expr="cast 6" line="62" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Represents an XML document type.</haxe_doc>
	</Document>
	<toString public="1" set="method" line="64" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="_Xml.XmlType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/Xml.hx" private="1" module="Xml" final="1">
		<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML element type.</haxe_doc>
		</Element>
		<PCData public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" get="inline" set="null" expr="cast 2" line="42" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" get="inline" set="null" expr="cast 3" line="47" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" get="inline" set="null" expr="cast 4" line="52" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="57" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" get="inline" set="null" expr="cast 6" line="62" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Represents an XML document type.</haxe_doc>
		</Document>
		<toString public="1" set="method" line="64" static="1"><f a="this">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="Xml" params="" file="/home/runner/work/haxe/haxe/std/Xml.hx">
		<Element public="1" set="null" expr="XmlType.Element" line="86" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Element</e></m></meta>
			<haxe_doc>XML element type.</haxe_doc>
		</Element>
		<PCData public="1" set="null" expr="XmlType.PCData" line="91" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.PCData</e></m></meta>
			<haxe_doc>XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" set="null" expr="XmlType.CData" line="96" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.CData</e></m></meta>
			<haxe_doc>XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" set="null" expr="XmlType.Comment" line="101" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Comment</e></m></meta>
			<haxe_doc>XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" expr="XmlType.DocType" line="106" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.DocType</e></m></meta>
			<haxe_doc>XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" expr="XmlType.ProcessingInstruction" line="111" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.ProcessingInstruction</e></m></meta>
			<haxe_doc>XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" expr="XmlType.Document" line="116" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Document</e></m></meta>
			<haxe_doc>XML document type.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="121" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parses the String into an Xml document.</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="182" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="191" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="200" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="209" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="218" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="227" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="236" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<x path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<parent public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be `null`, an Element or a Document.</haxe_doc>
		</parent>
		<children><c path="Array"><c path="Xml"/></c></children>
		<attributeMap><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></attributeMap>
		<get_nodeName get="inline" set="null" line="151"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeName get="inline" set="null" line="158"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeValue get="inline" set="null" line="165"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeValue get="inline" set="null" line="172"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<get public="1" set="method" line="244">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns `null` if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method" line="255">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<remove public="1" set="method" line="266">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="277">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="287">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an `Iterator` on all the attribute names.</haxe_doc>
		</attributes>
		<iterator public="1" get="inline" set="null" line="298">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="307">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="317">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<firstChild public="1" get="inline" set="null" line="329">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="337">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="353">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		A child node can only be inside one given parent node, which is indicated by the `parent` property.
		If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="366">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="381">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.
		A child node can only be inside one given parent node, which is indicated by the [parent] property.
		If the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</insertChild>
		<toString public="1" get="inline" set="null" line="393">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<ensureElementType get="inline" set="null" line="403"><f a=""><x path="Void"/></f></ensureElementType>
		<new set="method" line="397"><f a="nodeType">
	<x path="XmlType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Cross-platform Xml API.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
	</class>
	<abstract path="flash.AnyType" params="" file="/home/runner/work/haxe/haxe/std/flash/AnyType.hx">
		<from><icast><d/></icast></from>
		<this><x path="flash.AnyType"/></this>
		<to><icast><d/></icast></to>
		<haxe_doc><![CDATA[This type represents the Flash `*` type, which is
	actually the absense of type. It can be used as a
	type parameter for `flash.Vector` to represent the
	native `Vector.<*>` type.]]></haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="flash.events.IEventDispatcher" params="" file="/home/runner/work/haxe/haxe/std/flash/events/IEventDispatcher.hx" extern="1" interface="1">
		<addEventListener public="1" set="method">
			<f a="type:listener:?useCapture:?priority:?useWeakReference" v="::false:0:false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useWeakReference : false, priority : 0, useCapture : false }</e></m></meta>
		</addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?useCapture" v="::false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useCapture : false }</e></m></meta>
		</removeEventListener>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
	</class>
	<class path="flash.events.EventDispatcher" params="" file="/home/runner/work/haxe/haxe/std/flash/events/EventDispatcher.hx" extern="1">
		<implements path="flash.events.IEventDispatcher"/>
		<addEventListener public="1" set="method">
			<f a="type:listener:?useCapture:?priority:?useWeakReference" v="::false:0:false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useWeakReference : false, priority : 0, useCapture : false }</e></m></meta>
		</addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?useCapture" v="::false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ useCapture : false }</e></m></meta>
		</removeEventListener>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<new public="1" set="method"><f a="?target">
	<c path="flash.events.IEventDispatcher"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="/home/runner/work/haxe/haxe/std/flash/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="flash.display.DisplayObject" params="" file="/home/runner/work/haxe/haxe/std/flash/display/DisplayObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.display.IBitmapDrawable"/>
		<accessibilityProperties public="1" get="accessor" set="accessor">
			<c path="flash.accessibility.AccessibilityProperties"/>
			<meta><m n=":flash.property"/></meta>
		</accessibilityProperties>
		<alpha public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</alpha>
		<blendMode public="1" get="accessor" set="accessor">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":flash.property"/></meta>
		</blendMode>
		<blendShader public="1" get="null" set="accessor">
			<c path="flash.display.Shader"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</blendShader>
		<cacheAsBitmap public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</cacheAsBitmap>
		<filters public="1" get="accessor" set="accessor">
			<c path="Array"><c path="flash.filters.BitmapFilter"/></c>
			<meta><m n=":flash.property"/></meta>
		</filters>
		<height public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</height>
		<loaderInfo public="1" get="accessor" set="null">
			<c path="flash.display.LoaderInfo"/>
			<meta><m n=":flash.property"/></meta>
		</loaderInfo>
		<mask public="1" get="accessor" set="accessor">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</mask>
		<mouseX public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</mouseX>
		<mouseY public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</mouseY>
		<name public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</name>
		<opaqueBackground public="1" get="accessor" set="accessor">
			<x path="Null"><x path="UInt"/></x>
			<meta><m n=":flash.property"/></meta>
		</opaqueBackground>
		<parent public="1" get="accessor" set="null">
			<c path="flash.display.DisplayObjectContainer"/>
			<meta><m n=":flash.property"/></meta>
		</parent>
		<root public="1" get="accessor" set="null">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</root>
		<rotation public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</rotation>
		<rotationX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</rotationX>
		<rotationY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</rotationY>
		<rotationZ public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</rotationZ>
		<scale9Grid public="1" get="accessor" set="accessor">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</scale9Grid>
		<scaleX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</scaleX>
		<scaleY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</scaleY>
		<scaleZ public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</scaleZ>
		<scrollRect public="1" get="accessor" set="accessor">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</scrollRect>
		<stage public="1" get="accessor" set="null">
			<c path="flash.display.Stage"/>
			<meta><m n=":flash.property"/></meta>
		</stage>
		<transform public="1" get="accessor" set="accessor">
			<c path="flash.geom.Transform"/>
			<meta><m n=":flash.property"/></meta>
		</transform>
		<visible public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</visible>
		<width public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</width>
		<x public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</x>
		<y public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</y>
		<z public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</z>
		<getBounds public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getBounds>
		<getRect public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getRect>
		<get_accessibilityProperties set="method"><f a=""><c path="flash.accessibility.AccessibilityProperties"/></f></get_accessibilityProperties>
		<get_alpha set="method"><f a=""><x path="Float"/></f></get_alpha>
		<get_blendMode set="method"><f a=""><x path="flash.display.BlendMode"/></f></get_blendMode>
		<get_cacheAsBitmap set="method"><f a=""><x path="Bool"/></f></get_cacheAsBitmap>
		<get_filters set="method"><f a=""><c path="Array"><c path="flash.filters.BitmapFilter"/></c></f></get_filters>
		<get_height set="method"><f a=""><x path="Float"/></f></get_height>
		<get_loaderInfo set="method"><f a=""><c path="flash.display.LoaderInfo"/></f></get_loaderInfo>
		<get_mask set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_mask>
		<get_metaData set="method"><f a=""><d/></f></get_metaData>
		<get_mouseX set="method"><f a=""><x path="Float"/></f></get_mouseX>
		<get_mouseY set="method"><f a=""><x path="Float"/></f></get_mouseY>
		<get_name set="method"><f a=""><c path="String"/></f></get_name>
		<get_opaqueBackground set="method"><f a=""><x path="Null"><x path="UInt"/></x></f></get_opaqueBackground>
		<get_parent set="method"><f a=""><c path="flash.display.DisplayObjectContainer"/></f></get_parent>
		<get_root set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_root>
		<get_rotation set="method"><f a=""><x path="Float"/></f></get_rotation>
		<get_rotationX set="method"><f a=""><x path="Float"/></f></get_rotationX>
		<get_rotationY set="method"><f a=""><x path="Float"/></f></get_rotationY>
		<get_rotationZ set="method"><f a=""><x path="Float"/></f></get_rotationZ>
		<get_scale9Grid set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_scale9Grid>
		<get_scaleX set="method"><f a=""><x path="Float"/></f></get_scaleX>
		<get_scaleY set="method"><f a=""><x path="Float"/></f></get_scaleY>
		<get_scaleZ set="method"><f a=""><x path="Float"/></f></get_scaleZ>
		<get_scrollRect set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_scrollRect>
		<get_stage set="method"><f a=""><c path="flash.display.Stage"/></f></get_stage>
		<get_transform set="method"><f a=""><c path="flash.geom.Transform"/></f></get_transform>
		<get_visible set="method"><f a=""><x path="Bool"/></f></get_visible>
		<get_width set="method"><f a=""><x path="Float"/></f></get_width>
		<get_x set="method"><f a=""><x path="Float"/></f></get_x>
		<get_y set="method"><f a=""><x path="Float"/></f></get_y>
		<get_z set="method"><f a=""><x path="Float"/></f></get_z>
		<globalToLocal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></globalToLocal>
		<globalToLocal3D public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Vector3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</globalToLocal3D>
		<hitTestObject public="1" set="method"><f a="obj">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></hitTestObject>
		<hitTestPoint public="1" set="method">
			<f a="x:y:?shapeFlag" v="::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ shapeFlag : false }</e></m></meta>
		</hitTestPoint>
		<local3DToGlobal public="1" set="method">
			<f a="point3d">
				<c path="flash.geom.Vector3D"/>
				<c path="flash.geom.Point"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</local3DToGlobal>
		<localToGlobal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></localToGlobal>
		<set_accessibilityProperties set="method"><f a="value">
	<c path="flash.accessibility.AccessibilityProperties"/>
	<c path="flash.accessibility.AccessibilityProperties"/>
</f></set_accessibilityProperties>
		<set_alpha set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<set_blendMode set="method"><f a="value">
	<x path="flash.display.BlendMode"/>
	<x path="flash.display.BlendMode"/>
</f></set_blendMode>
		<set_blendShader set="method"><f a="value">
	<c path="flash.display.Shader"/>
	<c path="flash.display.Shader"/>
</f></set_blendShader>
		<set_cacheAsBitmap set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_cacheAsBitmap>
		<set_filters set="method"><f a="value">
	<c path="Array"><c path="flash.filters.BitmapFilter"/></c>
	<c path="Array"><c path="flash.filters.BitmapFilter"/></c>
</f></set_filters>
		<set_height set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
		<set_mask set="method"><f a="value">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></set_mask>
		<set_metaData set="method"><f a="value">
	<d/>
	<d/>
</f></set_metaData>
		<set_name set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_name>
		<set_opaqueBackground set="method"><f a="value">
	<x path="Null"><x path="UInt"/></x>
	<x path="Null"><x path="UInt"/></x>
</f></set_opaqueBackground>
		<set_rotation set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotation>
		<set_rotationX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotationX>
		<set_rotationY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotationY>
		<set_rotationZ set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotationZ>
		<set_scale9Grid set="method"><f a="value">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></set_scale9Grid>
		<set_scaleX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleX>
		<set_scaleY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleY>
		<set_scaleZ set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleZ>
		<set_scrollRect set="method"><f a="value">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></set_scrollRect>
		<set_transform set="method"><f a="value">
	<c path="flash.geom.Transform"/>
	<c path="flash.geom.Transform"/>
</f></set_transform>
		<set_visible set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<set_width set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<set_x set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<set_z set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
	</class>
	<class path="flash.display.InteractiveObject" params="" file="/home/runner/work/haxe/haxe/std/flash/display/InteractiveObject.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<accessibilityImplementation public="1" get="accessor" set="accessor">
			<c path="flash.accessibility.AccessibilityImplementation"/>
			<meta><m n=":flash.property"/></meta>
		</accessibilityImplementation>
		<contextMenu public="1" get="accessor" set="accessor">
			<c path="flash.ui.ContextMenu"/>
			<meta><m n=":flash.property"/></meta>
		</contextMenu>
		<doubleClickEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</doubleClickEnabled>
		<focusRect public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</focusRect>
		<mouseEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</mouseEnabled>
		<needsSoftKeyboard public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</needsSoftKeyboard>
		<softKeyboardInputAreaOfInterest public="1" get="accessor" set="accessor">
			<c path="flash.geom.Rectangle"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</softKeyboardInputAreaOfInterest>
		<tabEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</tabEnabled>
		<tabIndex public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</tabIndex>
		<get_accessibilityImplementation set="method"><f a=""><c path="flash.accessibility.AccessibilityImplementation"/></f></get_accessibilityImplementation>
		<get_contextMenu set="method"><f a=""><c path="flash.ui.ContextMenu"/></f></get_contextMenu>
		<get_doubleClickEnabled set="method"><f a=""><x path="Bool"/></f></get_doubleClickEnabled>
		<get_focusRect set="method"><f a=""><d/></f></get_focusRect>
		<get_mouseEnabled set="method"><f a=""><x path="Bool"/></f></get_mouseEnabled>
		<get_needsSoftKeyboard set="method"><f a=""><x path="Bool"/></f></get_needsSoftKeyboard>
		<get_softKeyboardInputAreaOfInterest set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_softKeyboardInputAreaOfInterest>
		<get_tabEnabled set="method"><f a=""><x path="Bool"/></f></get_tabEnabled>
		<get_tabIndex set="method"><f a=""><x path="Int"/></f></get_tabIndex>
		<requestSoftKeyboard public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestSoftKeyboard>
		<set_accessibilityImplementation set="method"><f a="value">
	<c path="flash.accessibility.AccessibilityImplementation"/>
	<c path="flash.accessibility.AccessibilityImplementation"/>
</f></set_accessibilityImplementation>
		<set_contextMenu set="method"><f a="value">
	<c path="flash.ui.ContextMenu"/>
	<c path="flash.ui.ContextMenu"/>
</f></set_contextMenu>
		<set_doubleClickEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_doubleClickEnabled>
		<set_focusRect set="method"><f a="value">
	<d/>
	<d/>
</f></set_focusRect>
		<set_mouseEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_mouseEnabled>
		<set_needsSoftKeyboard set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_needsSoftKeyboard>
		<set_softKeyboardInputAreaOfInterest set="method"><f a="value">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></set_softKeyboardInputAreaOfInterest>
		<set_tabEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_tabEnabled>
		<set_tabIndex set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_tabIndex>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.DisplayObjectContainer" params="" file="/home/runner/work/haxe/haxe/std/flash/display/DisplayObjectContainer.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<mouseChildren public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</mouseChildren>
		<numChildren public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</numChildren>
		<tabChildren public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</tabChildren>
		<textSnapshot public="1" get="accessor" set="null">
			<c path="flash.text.TextSnapshot"/>
			<meta><m n=":flash.property"/></meta>
		</textSnapshot>
		<addChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></addChildAt>
		<areInaccessibleObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<contains public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></contains>
		<getChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildAt>
		<getChildByName public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildByName>
		<getChildIndex public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
</f></getChildIndex>
		<getObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="flash.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<get_mouseChildren set="method"><f a=""><x path="Bool"/></f></get_mouseChildren>
		<get_numChildren set="method"><f a=""><x path="Int"/></f></get_numChildren>
		<get_tabChildren set="method"><f a=""><x path="Bool"/></f></get_tabChildren>
		<get_textSnapshot set="method"><f a=""><c path="flash.text.TextSnapshot"/></f></get_textSnapshot>
		<removeChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChild>
		<removeChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChildAt>
		<removeChildren public="1" set="method">
			<f a="?beginIndex:?endIndex" v="0:2147483647">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ endIndex : 2147483647, beginIndex : 0 }</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</removeChildren>
		<setChildIndex public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setChildIndex>
		<set_mouseChildren set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_mouseChildren>
		<set_tabChildren set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_tabChildren>
		<stopAllMovieClips public="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_8</e></m></meta>
		</stopAllMovieClips>
		<swapChildren public="1" set="method"><f a="child1:child2">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></swapChildren>
		<swapChildrenAt public="1" set="method"><f a="index1:index2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swapChildrenAt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.Sprite" params="" file="/home/runner/work/haxe/haxe/std/flash/display/Sprite.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<buttonMode public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</buttonMode>
		<dropTarget public="1" get="accessor" set="null">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</dropTarget>
		<graphics public="1" get="accessor" set="null">
			<c path="flash.display.Graphics"/>
			<meta><m n=":flash.property"/></meta>
		</graphics>
		<hitArea public="1" get="accessor" set="accessor">
			<c path="flash.display.Sprite"/>
			<meta><m n=":flash.property"/></meta>
		</hitArea>
		<soundTransform public="1" get="accessor" set="accessor">
			<c path="flash.media.SoundTransform"/>
			<meta><m n=":flash.property"/></meta>
		</soundTransform>
		<useHandCursor public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</useHandCursor>
		<get_buttonMode set="method"><f a=""><x path="Bool"/></f></get_buttonMode>
		<get_dropTarget set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_dropTarget>
		<get_graphics set="method"><f a=""><c path="flash.display.Graphics"/></f></get_graphics>
		<get_hitArea set="method"><f a=""><c path="flash.display.Sprite"/></f></get_hitArea>
		<get_soundTransform set="method"><f a=""><c path="flash.media.SoundTransform"/></f></get_soundTransform>
		<get_useHandCursor set="method"><f a=""><x path="Bool"/></f></get_useHandCursor>
		<set_buttonMode set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_buttonMode>
		<set_hitArea set="method"><f a="value">
	<c path="flash.display.Sprite"/>
	<c path="flash.display.Sprite"/>
</f></set_hitArea>
		<set_soundTransform set="method"><f a="value">
	<c path="flash.media.SoundTransform"/>
	<c path="flash.media.SoundTransform"/>
</f></set_soundTransform>
		<set_useHandCursor set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useHandCursor>
		<startDrag public="1" set="method">
			<f a="?lockCenter:?bounds" v="false:">
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ lockCenter : false }</e></m></meta>
		</startDrag>
		<startTouchDrag public="1" set="method">
			<f a="touchPointID:?lockCenter:?bounds" v=":false:">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ lockCenter : false }</e></m>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</startTouchDrag>
		<stopDrag public="1" set="method"><f a=""><x path="Void"/></f></stopDrag>
		<stopTouchDrag public="1" set="method">
			<f a="touchPointID">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</stopTouchDrag>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.MovieClip" params="" file="/home/runner/work/haxe/haxe/std/flash/display/MovieClip.hx" extern="1">
		<extends path="flash.display.Sprite"/>
		<currentFrame public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</currentFrame>
		<currentFrameLabel public="1" get="accessor" set="null">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</currentFrameLabel>
		<currentLabel public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</currentLabel>
		<currentLabels public="1" get="accessor" set="null">
			<c path="Array"><c path="flash.display.FrameLabel"/></c>
			<meta><m n=":flash.property"/></meta>
		</currentLabels>
		<currentScene public="1" get="accessor" set="null">
			<c path="flash.display.Scene"/>
			<meta><m n=":flash.property"/></meta>
		</currentScene>
		<enabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</enabled>
		<framesLoaded public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</framesLoaded>
		<isPlaying public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</isPlaying>
		<scenes public="1" get="accessor" set="null">
			<c path="Array"><c path="flash.display.Scene"/></c>
			<meta><m n=":flash.property"/></meta>
		</scenes>
		<totalFrames public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</totalFrames>
		<trackAsMenu public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</trackAsMenu>
		<addFrameScript public="1" set="method"><f a="restArgs">
	<t path="haxe.extern.Rest"><d/></t>
	<x path="Void"/>
</f></addFrameScript>
		<get_currentFrame set="method"><f a=""><x path="Int"/></f></get_currentFrame>
		<get_currentFrameLabel set="method"><f a=""><c path="String"/></f></get_currentFrameLabel>
		<get_currentLabel set="method"><f a=""><c path="String"/></f></get_currentLabel>
		<get_currentLabels set="method"><f a=""><c path="Array"><c path="flash.display.FrameLabel"/></c></f></get_currentLabels>
		<get_currentScene set="method"><f a=""><c path="flash.display.Scene"/></f></get_currentScene>
		<get_enabled set="method"><f a=""><x path="Bool"/></f></get_enabled>
		<get_framesLoaded set="method"><f a=""><x path="Int"/></f></get_framesLoaded>
		<get_isPlaying set="method"><f a=""><x path="Bool"/></f></get_isPlaying>
		<get_scenes set="method"><f a=""><c path="Array"><c path="flash.display.Scene"/></c></f></get_scenes>
		<get_totalFrames set="method"><f a=""><x path="Int"/></f></get_totalFrames>
		<get_trackAsMenu set="method"><f a=""><x path="Bool"/></f></get_trackAsMenu>
		<gotoAndPlay public="1" set="method"><f a="frame:?scene">
	<x path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndPlay>
		<gotoAndStop public="1" set="method"><f a="frame:?scene">
	<x path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndStop>
		<nextFrame public="1" set="method"><f a=""><x path="Void"/></f></nextFrame>
		<nextScene public="1" set="method"><f a=""><x path="Void"/></f></nextScene>
		<play public="1" set="method"><f a=""><x path="Void"/></f></play>
		<prevFrame public="1" set="method"><f a=""><x path="Void"/></f></prevFrame>
		<prevScene public="1" set="method"><f a=""><x path="Void"/></f></prevScene>
		<set_enabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enabled>
		<set_trackAsMenu set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_trackAsMenu>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.iterators.ArrayKeyValueIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/ArrayKeyValueIterator.hx">
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<array><c path="Array"><c path="haxe.iterators.ArrayKeyValueIterator.T"/></c></array>
		<hasNext public="1" get="inline" set="null" line="34"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="38"><f a=""><a>
	<value><c path="haxe.iterators.ArrayKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="30"><f a="array">
	<c path="Array"><c path="haxe.iterators.ArrayKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":ifFeature">
				<e>"anon_read.keyValueIterator"</e>
				<e>"dynamic_read.keyValueIterator"</e>
			</m>
		</meta>
	</class>
	<class path="flash.Boot" params="" file="/home/runner/work/haxe/haxe/std/flash/Boot.hx">
		<extends path="flash.display.MovieClip"/>
		<tf static="1"><c path="flash.text.TextField"/></tf>
		<lines static="1"><c path="Array"><c path="String"/></c></lines>
		<lastError static="1"><c path="flash.errors.Error"/></lastError>
		<skip_constructor public="1" expr="false" line="52" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</skip_constructor>
		<IN_E expr="0" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</IN_E>
		<enum_to_string public="1" set="method" line="85" static="1"><f a="e">
	<a>
		<tag><c path="String"/></tag>
		<params><c path="Array"><d/></c></params>
	</a>
	<c path="String"/>
</f></enum_to_string>
		<__instanceof public="1" set="method" line="100" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__instanceof>
		<__clear_trace public="1" set="method" line="109" static="1"><f a=""><x path="Void"/></f></__clear_trace>
		<__set_trace_color public="1" set="method" line="117" static="1"><f a="rgb">
	<x path="UInt"/>
	<x path="Void"/>
</f></__set_trace_color>
		<getTrace public="1" set="method" line="123" static="1"><f a=""><c path="flash.text.TextField"/></f></getTrace>
		<__trace public="1" set="method" line="151" static="1"><f a="v:pos">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></__trace>
		<__string_rec public="1" set="method" line="171" static="1">
			<f a="v:str:?maxRecursion" v="::5">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ maxRecursion : 5 }</e></m>
			</meta>
		</__string_rec>
		<fromCodePoint public="1" set="method" line="221" static="1"><f a="code">
	<x path="Int"/>
	<c path="String"/>
</f></fromCodePoint>
		<__unprotect__ set="method" line="230" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unprotect__>
		<mapDynamic public="1" set="method" line="234" static="1">
			<f a="d:f">
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</mapDynamic>
		<filterDynamic public="1" set="method" line="242" static="1">
			<f a="d:f">
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</filterDynamic>
		<start set="method" line="54">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</start>
		<doInitDelay set="method" line="74"><f a="_">
	<d/>
	<x path="Void"/>
</f></doInitDelay>
		<init set="method" line="79"><f a=""><x path="Void"/></f></init>
		<new public="1" set="method" line="47"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="flash._Boot.RealBoot" params="" file="/home/runner/work/haxe/haxe/std/flash/Boot.hx" private="1" module="flash.Boot">
		<extends path="flash.Boot"/>
		<new set="method" line="36"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="flash.Lib" params="" file="/home/runner/work/haxe/haxe/std/flash/Lib.hx">
		<current public="1" static="1"><c path="flash.display.MovieClip"/></current>
		<getTimer public="1" get="inline" set="null" line="32" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getTimer>
		<eval public="1" set="method" line="36" static="1">
			<f a="path">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</eval>
		<getURL public="1" set="method" line="57" static="1">
			<f a="url:?target">
				<c path="flash.net.URLRequest"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getURL>
		<fscommand public="1" set="method" line="65" static="1">
			<f a="cmd:?param">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fscommand>
		<trace public="1" set="method" line="69" static="1">
			<f a="arg">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</trace>
		<describeType public="1" set="method" line="73" static="1">
			<f a="value">
				<d/>
				<c path="flash.xml.XML"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</describeType>
		<attach public="1" set="method" line="77" static="1">
			<f a="name">
				<c path="String"/>
				<c path="flash.display.MovieClip"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</attach>
		<as public="1" params="T" get="inline" set="null" line="82" static="1">
			<f a="v:c">
				<d/>
				<x path="Class"><c path="as.T"/></x>
				<x path="Null"><c path="as.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</as>
		<redirectTraces public="1" set="method" line="86" static="1"><f a=""><x path="Void"/></f></redirectTraces>
		<traceToConsole set="method" line="91" static="1"><f a="v:?inf">
	<d/>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<x path="Void"/>
</f></traceToConsole>
		<parseInt public="1" get="accessor" set="null" static="1"><f a="string:?radix">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
</f></parseInt>
		<get_parseInt get="inline" set="null" line="106" static="1">
			<f a=""><f a="string:?radix">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
</f></f>
			<meta><m n=":has_untyped"/></meta>
		</get_parseInt>
		<haxe_doc>Platform-specific Flash Library. Provides some platform-specific
	functions for the Flash target.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="flash.Memory" params="" file="/home/runner/work/haxe/haxe/std/flash/Memory.hx" extern="1">
		<select public="1" get="inline" set="null" line="26" static="1"><f a="b">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></select>
		<setByte public="1" get="inline" set="null" line="30" static="1">
			<f a="addr:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setByte>
		<setI16 public="1" get="inline" set="null" line="34" static="1">
			<f a="addr:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setI16>
		<setI32 public="1" get="inline" set="null" line="38" static="1">
			<f a="addr:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setI32>
		<setFloat public="1" get="inline" set="null" line="42" static="1">
			<f a="addr:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setFloat>
		<setDouble public="1" get="inline" set="null" line="46" static="1">
			<f a="addr:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setDouble>
		<getByte public="1" get="inline" set="null" line="50" static="1">
			<f a="addr">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getByte>
		<getUI16 public="1" get="inline" set="null" line="54" static="1">
			<f a="addr">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getUI16>
		<getI32 public="1" get="inline" set="null" line="58" static="1">
			<f a="addr">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getI32>
		<getFloat public="1" get="inline" set="null" line="62" static="1">
			<f a="addr">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getFloat>
		<getDouble public="1" get="inline" set="null" line="66" static="1">
			<f a="addr">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getDouble>
		<signExtend1 public="1" get="inline" set="null" line="70" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</signExtend1>
		<signExtend8 public="1" get="inline" set="null" line="74" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</signExtend8>
		<signExtend16 public="1" get="inline" set="null" line="78" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</signExtend16>
	</class>
	<enum path="flash.XmlType" params="" file="/home/runner/work/haxe/haxe/std/flash/NativeXml.hx" module="flash.NativeXml"><meta><m n=":flatEnum"/></meta></enum>
	<typedef path="flash.NativeXml" params="" file="/home/runner/work/haxe/haxe/std/flash/NativeXml.hx"><c path="flash.Xml"/></typedef>
	<class path="flash.Xml" params="" file="/home/runner/work/haxe/haxe/std/flash/NativeXml.hx" module="flash.NativeXml">
		<Element public="1" set="null" static="1"><e path="flash.XmlType"/></Element>
		<PCData public="1" set="null" static="1"><e path="flash.XmlType"/></PCData>
		<CData public="1" set="null" static="1"><e path="flash.XmlType"/></CData>
		<Comment public="1" set="null" static="1"><e path="flash.XmlType"/></Comment>
		<DocType public="1" set="null" static="1"><e path="flash.XmlType"/></DocType>
		<ProcessingInstruction public="1" set="null" static="1"><e path="flash.XmlType"/></ProcessingInstruction>
		<Document public="1" set="null" static="1"><e path="flash.XmlType"/></Document>
		<parse public="1" set="method" line="47" static="1"><f a="str">
	<c path="String"/>
	<c path="flash.Xml"/>
</f></parse>
		<compare set="method" line="69" static="1">
			<f a="a:b">
				<c path="flash.Xml"/>
				<c path="flash.Xml"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</compare>
		<createElement public="1" set="method" line="75" static="1"><f a="name">
	<c path="String"/>
	<c path="flash.Xml"/>
</f></createElement>
		<createPCData public="1" set="method" line="79" static="1"><f a="data">
	<c path="String"/>
	<c path="flash.Xml"/>
</f></createPCData>
		<createCData public="1" set="method" line="84" static="1"><f a="data">
	<c path="String"/>
	<c path="flash.Xml"/>
</f></createCData>
		<createComment public="1" set="method" line="88" static="1"><f a="data">
	<c path="String"/>
	<c path="flash.Xml"/>
</f></createComment>
		<createDocType public="1" set="method" line="93" static="1"><f a="data">
	<c path="String"/>
	<c path="flash.Xml"/>
</f></createDocType>
		<createProcessingInstruction public="1" set="method" line="97" static="1"><f a="data">
	<c path="String"/>
	<c path="flash.Xml"/>
</f></createProcessingInstruction>
		<createDocument public="1" set="method" line="102" static="1"><f a=""><c path="flash.Xml"/></f></createDocument>
		<getNodeType set="method" line="106" static="1"><f a="node">
	<c path="flash.xml.XML"/>
	<e path="flash.XmlType"/>
</f></getNodeType>
		<wrap set="method" line="181" static="1"><f a="node:?type">
	<c path="flash.xml.XML"/>
	<e path="flash.XmlType"/>
	<c path="flash.Xml"/>
</f></wrap>
		<nodeType public="1" set="null"><e path="flash.XmlType"/></nodeType>
		<nodeName public="1" get="accessor" set="accessor"><c path="String"/></nodeName>
		<nodeValue public="1" get="accessor" set="accessor"><c path="String"/></nodeValue>
		<parent public="1" get="accessor" set="null"><c path="flash.Xml"/></parent>
		<_node><c path="flash.xml.XML"/></_node>
		<get_nodeName set="method" line="121"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeName set="method" line="128"><f a="n">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeValue set="method" line="141"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeValue set="method" line="150">
			<f a="v">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</set_nodeValue>
		<get_parent set="method" line="176"><f a=""><c path="flash.Xml"/></f></get_parent>
		<wraps set="method" line="188"><f a="xList">
	<c path="flash.xml.XMLList"/>
	<c path="Array"><c path="flash.Xml"/></c>
</f></wraps>
		<getAttribNS set="method" line="195"><f a="cur:ns">
	<c path="flash.xml.XML"/>
	<c path="Array"><c path="String"/></c>
	<c path="flash.xml.XMLList"/>
</f></getAttribNS>
		<get public="1" set="method" line="208"><f a="att">
	<c path="String"/>
	<c path="String"/>
</f></get>
		<set public="1" set="method" line="225">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</set>
		<remove public="1" set="method" line="246">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</remove>
		<exists public="1" set="method" line="256"><f a="att">
	<c path="String"/>
	<x path="Bool"/>
</f></exists>
		<attributes public="1" set="method" line="267"><f a=""><t path="Iterator"><c path="String"/></t></f></attributes>
		<iterator public="1" set="method" line="289"><f a=""><t path="Iterator"><c path="flash.Xml"/></t></f></iterator>
		<elements public="1" set="method" line="305"><f a=""><t path="Iterator"><c path="flash.Xml"/></t></f></elements>
		<elementsNamed public="1" set="method" line="321"><f a="name">
	<c path="String"/>
	<t path="Iterator"><c path="flash.Xml"/></t>
</f></elementsNamed>
		<firstChild public="1" set="method" line="346"><f a=""><c path="flash.Xml"/></f></firstChild>
		<firstElement public="1" set="method" line="355"><f a=""><c path="flash.Xml"/></f></firstElement>
		<addChild public="1" set="method" line="364"><f a="x">
	<c path="flash.Xml"/>
	<x path="Void"/>
</f></addChild>
		<removeChild public="1" set="method" line="373">
			<f a="x">
				<c path="flash.Xml"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</removeChild>
		<insertChild public="1" set="method" line="384"><f a="x:pos">
	<c path="flash.Xml"/>
	<x path="Int"/>
	<x path="Void"/>
</f></insertChild>
		<toString public="1" set="method" line="396"><f a=""><c path="String"/></f></toString>
		<new set="method" line="73"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.Vector" params="T" file="/home/runner/work/haxe/haxe/std/flash/Vector.hx" extern="1">
		<ofArray public="1" params="T" get="inline" set="null" line="56" static="1">
			<f a="v">
				<c path="Array"><c path="ofArray.T"/></c>
				<c path="flash.Vector"><c path="ofArray.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</ofArray>
		<convert public="1" params="T:U" get="inline" set="null" line="60" static="1">
			<f a="v">
				<c path="flash.Vector"><c path="convert.T"/></c>
				<c path="flash.Vector"><c path="convert.U"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</convert>
		<typeReference public="1" params="T" get="inline" set="null" line="91" static="1">
			<f a=""><x path="Class"><c path="flash.Vector"><c path="typeReference.T"/></c></x></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Get a run-time value referencing the `Vector` class with concrete type parameters.

		Normally in Haxe, for most of the types, type parameters are eliminated at run-time,
		so there is no way to check if a value is of a type with specific type parameters.

		However, on the Flash target, the `flash.Vector<T>` values carry type parameter
		information at run-time all the type-checks (such as `Std.isOfType` and `Std.downcast`) on them
		must be done using a `Class<T>` value that also carries the type parameters. However,
		Haxe syntax does not allow creating such values and this function exists to mitigate
		this limitation.

		It should be used as such:
		```haxe
		var specificVectorType:Class<Vector<Int>> = Vector.typeReference();
		trace(Std.isOfType(vec, specificVectorType));
		```
		or using the type-check syntax:
		```haxe
		trace(Std.isOfType(vec, (Vector.typeReference() : Class<Vector<Int>>)));
		```

		It's also helpful when working with native Flash libraries, that receive Class instances:
		```haxe
		new Signal((Vector.typeReference() : Class<Vector<Int>>));
		```]]></haxe_doc>
		</typeReference>
		<length public="1"><x path="Int"/></length>
		<fixed public="1"><x path="Bool"/></fixed>
		<concat public="1" set="method"><f a="?a">
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></concat>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method"><f a=""><x path="Null"><c path="flash.Vector.T"/></x></f></pop>
		<push public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method"><f a=""><x path="Null"><c path="flash.Vector.T"/></x></f></shift>
		<unshift public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Void"/>
</f></unshift>
		<slice public="1" set="method"><f a="?pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></slice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="flash.Vector.T"/>
		<c path="flash.Vector.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></splice>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<indexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<insertAt public="1" get="inline" set="null" line="50"><f a="index:element">
	<x path="Int"/>
	<c path="flash.Vector.T"/>
	<x path="Void"/>
</f></insertAt>
		<removeAt public="1">
			<f a="index">
				<x path="Int"/>
				<c path="flash.Vector.T"/>
			</f>
			<meta><m n=":require"><e>flash19</e></m></meta>
		</removeAt>
		<new public="1" set="method"><f a="?length:?fixed">
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Vector class is very similar to Array but is only supported by the Flash Player 10+</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":require"><e>flash10</e></m>
		</meta>
	</class>
	<class path="flash.accessibility.Accessibility" params="" file="/home/runner/work/haxe/haxe/std/flash/accessibility/Accessibility.hx" extern="1">
		<active public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</active>
		<get_active set="method" static="1"><f a=""><x path="Bool"/></f></get_active>
		<sendEvent public="1" set="method" static="1">
			<f a="source:childID:eventType:?nonHTML" v=":::false">
				<c path="flash.display.DisplayObject"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ nonHTML : false }</e></m></meta>
		</sendEvent>
		<updateProperties public="1" set="method" static="1"><f a=""><x path="Void"/></f></updateProperties>
	</class>
	<class path="flash.accessibility.AccessibilityImplementation" params="" file="/home/runner/work/haxe/haxe/std/flash/accessibility/AccessibilityImplementation.hx" extern="1">
		<errno public="1"><x path="UInt"/></errno>
		<stub public="1"><x path="Bool"/></stub>
		<accDoDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="Void"/>
</f></accDoDefaultAction>
		<accLocation public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<d/>
</f></accLocation>
		<accSelect public="1" set="method"><f a="operation:childID">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></accSelect>
		<getChildIDArray public="1" set="method"><f a=""><c path="Array"><d/></c></f></getChildIDArray>
		<get_accDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accDefaultAction>
		<get_accFocus public="1" set="method"><f a=""><x path="UInt"/></f></get_accFocus>
		<get_accName public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accName>
		<get_accRole public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accRole>
		<get_accSelection public="1" set="method"><f a=""><c path="Array"><d/></c></f></get_accSelection>
		<get_accState public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accState>
		<get_accValue public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accValue>
		<get_selectionActiveIndex public="1" set="method"><f a=""><d/></f></get_selectionActiveIndex>
		<get_selectionAnchorIndex public="1" set="method"><f a=""><d/></f></get_selectionAnchorIndex>
		<isLabeledBy public="1" set="method"><f a="labelBounds">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></isLabeledBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.accessibility.AccessibilityProperties" params="" file="/home/runner/work/haxe/haxe/std/flash/accessibility/AccessibilityProperties.hx" extern="1">
		<description public="1"><c path="String"/></description>
		<forceSimple public="1"><x path="Bool"/></forceSimple>
		<name public="1"><c path="String"/></name>
		<noAutoLabeling public="1"><x path="Bool"/></noAutoLabeling>
		<shortcut public="1"><c path="String"/></shortcut>
		<silent public="1"><x path="Bool"/></silent>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.accessibility.ISearchableText" params="" file="/home/runner/work/haxe/haxe/std/flash/accessibility/ISearchableText.hx" extern="1" interface="1">
		<searchText public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</searchText>
		<get_searchText set="method"><f a=""><c path="String"/></f></get_searchText>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.accessibility.ISimpleTextSelection" params="" file="/home/runner/work/haxe/haxe/std/flash/accessibility/ISimpleTextSelection.hx" extern="1" interface="1">
		<selectionActiveIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</selectionActiveIndex>
		<selectionAnchorIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</selectionAnchorIndex>
		<get_selectionActiveIndex set="method"><f a=""><x path="Int"/></f></get_selectionActiveIndex>
		<get_selectionAnchorIndex set="method"><f a=""><x path="Int"/></f></get_selectionAnchorIndex>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.automation.ActionGenerator" params="" file="/home/runner/work/haxe/haxe/std/flash/automation/ActionGenerator.hx" extern="1">
		<generateAction public="1" set="method"><f a="action">
	<c path="flash.automation.AutomationAction"/>
	<x path="Void"/>
</f></generateAction>
		<generateActions public="1" set="method"><f a="a">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></generateActions>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.automation.AutomationAction" params="" file="/home/runner/work/haxe/haxe/std/flash/automation/AutomationAction.hx" extern="1">
		<type public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</type>
		<get_type set="method"><f a=""><c path="String"/></f></get_type>
		<set_type set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_type>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.automation.Configuration" params="" file="/home/runner/work/haxe/haxe/std/flash/automation/Configuration.hx" extern="1">
		<deviceConfiguration public="1" get="accessor" set="accessor" static="1">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</deviceConfiguration>
		<testAutomationConfiguration public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</testAutomationConfiguration>
		<get_deviceConfiguration set="method" static="1"><f a=""><c path="String"/></f></get_deviceConfiguration>
		<get_testAutomationConfiguration set="method" static="1"><f a=""><c path="String"/></f></get_testAutomationConfiguration>
		<set_deviceConfiguration set="method" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_deviceConfiguration>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.automation.KeyboardAutomationAction" params="" file="/home/runner/work/haxe/haxe/std/flash/automation/KeyboardAutomationAction.hx" extern="1">
		<extends path="flash.automation.AutomationAction"/>
		<KEY_DOWN final="1" public="1" set="null" static="1"><c path="String"/></KEY_DOWN>
		<KEY_UP final="1" public="1" set="null" static="1"><c path="String"/></KEY_UP>
		<keyCode public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</keyCode>
		<get_keyCode set="method"><f a=""><x path="UInt"/></f></get_keyCode>
		<set_keyCode set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_keyCode>
		<new public="1" set="method">
			<f a="type:?keyCode" v=":0">
				<c path="String"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ keyCode : 0 }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.automation.MouseAutomationAction" params="" file="/home/runner/work/haxe/haxe/std/flash/automation/MouseAutomationAction.hx" extern="1">
		<extends path="flash.automation.AutomationAction"/>
		<MIDDLE_MOUSE_DOWN final="1" public="1" set="null" static="1"><c path="String"/></MIDDLE_MOUSE_DOWN>
		<MIDDLE_MOUSE_UP final="1" public="1" set="null" static="1"><c path="String"/></MIDDLE_MOUSE_UP>
		<MOUSE_DOWN final="1" public="1" set="null" static="1"><c path="String"/></MOUSE_DOWN>
		<MOUSE_MOVE final="1" public="1" set="null" static="1"><c path="String"/></MOUSE_MOVE>
		<MOUSE_UP final="1" public="1" set="null" static="1"><c path="String"/></MOUSE_UP>
		<MOUSE_WHEEL final="1" public="1" set="null" static="1"><c path="String"/></MOUSE_WHEEL>
		<RIGHT_MOUSE_DOWN final="1" public="1" set="null" static="1"><c path="String"/></RIGHT_MOUSE_DOWN>
		<RIGHT_MOUSE_UP final="1" public="1" set="null" static="1"><c path="String"/></RIGHT_MOUSE_UP>
		<delta public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</delta>
		<stageX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</stageX>
		<stageY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</stageY>
		<get_delta set="method"><f a=""><x path="Int"/></f></get_delta>
		<get_stageX set="method"><f a=""><x path="Float"/></f></get_stageX>
		<get_stageY set="method"><f a=""><x path="Float"/></f></get_stageY>
		<set_delta set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_delta>
		<set_stageX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_stageX>
		<set_stageY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_stageY>
		<new public="1" set="method">
			<f a="type:?stageX:?stageY:?delta" v=":0:0:0">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ delta : 0, stageY : 0, stageX : 0 }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.automation.StageCapture" params="" file="/home/runner/work/haxe/haxe/std/flash/automation/StageCapture.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<CURRENT final="1" public="1" set="null" static="1"><c path="String"/></CURRENT>
		<MULTIPLE final="1" public="1" set="null" static="1"><c path="String"/></MULTIPLE>
		<NEXT final="1" public="1" set="null" static="1"><c path="String"/></NEXT>
		<RASTER final="1" public="1" set="null" static="1"><c path="String"/></RASTER>
		<SCREEN final="1" public="1" set="null" static="1"><c path="String"/></SCREEN>
		<STAGE final="1" public="1" set="null" static="1"><c path="String"/></STAGE>
		<capturePTS public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</capturePTS>
		<captureSource public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</captureSource>
		<clipRect public="1" get="accessor" set="accessor">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</clipRect>
		<fileNameBase public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</fileNameBase>
		<cancel public="1" set="method"><f a=""><x path="Void"/></f></cancel>
		<capture public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Void"/>
</f></capture>
		<captureBitmapData public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></captureBitmapData>
		<get_capturePTS set="method"><f a=""><x path="Float"/></f></get_capturePTS>
		<get_captureSource set="method"><f a=""><c path="String"/></f></get_captureSource>
		<get_clipRect set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_clipRect>
		<get_fileNameBase set="method"><f a=""><c path="String"/></f></get_fileNameBase>
		<set_capturePTS set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_capturePTS>
		<set_captureSource set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_captureSource>
		<set_clipRect set="method"><f a="value">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></set_clipRect>
		<set_fileNameBase set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_fileNameBase>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.Event" params="" file="/home/runner/work/haxe/haxe/std/flash/events/Event.hx" extern="1">
		<ACTIVATE final="1" public="1" set="null" static="1"><c path="String"/></ACTIVATE>
		<ADDED final="1" public="1" set="null" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE final="1" public="1" set="null" static="1"><c path="String"/></ADDED_TO_STAGE>
		<BROWSER_ZOOM_CHANGE final="1" public="1" set="null" static="1"><c path="String"/></BROWSER_ZOOM_CHANGE>
		<CANCEL final="1" public="1" set="null" static="1"><c path="String"/></CANCEL>
		<CHANGE final="1" public="1" set="null" static="1"><c path="String"/></CHANGE>
		<CHANNEL_MESSAGE final="1" public="1" set="null" static="1"><c path="String"/></CHANNEL_MESSAGE>
		<CHANNEL_STATE final="1" public="1" set="null" static="1"><c path="String"/></CHANNEL_STATE>
		<CLEAR final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CLEAR>
		<CLOSE final="1" public="1" set="null" static="1"><c path="String"/></CLOSE>
		<COMPLETE final="1" public="1" set="null" static="1"><c path="String"/></COMPLETE>
		<CONNECT final="1" public="1" set="null" static="1"><c path="String"/></CONNECT>
		<CONTEXT3D_CREATE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</CONTEXT3D_CREATE>
		<COPY final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</COPY>
		<CUT final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CUT>
		<DEACTIVATE final="1" public="1" set="null" static="1"><c path="String"/></DEACTIVATE>
		<ENTER_FRAME final="1" public="1" set="null" static="1"><c path="String"/></ENTER_FRAME>
		<EXIT_FRAME final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</EXIT_FRAME>
		<FRAME_CONSTRUCTED final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</FRAME_CONSTRUCTED>
		<FRAME_LABEL final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</FRAME_LABEL>
		<FULLSCREEN final="1" public="1" set="null" static="1"><c path="String"/></FULLSCREEN>
		<ID3 final="1" public="1" set="null" static="1"><c path="String"/></ID3>
		<INIT final="1" public="1" set="null" static="1"><c path="String"/></INIT>
		<MOUSE_LEAVE final="1" public="1" set="null" static="1"><c path="String"/></MOUSE_LEAVE>
		<OPEN final="1" public="1" set="null" static="1"><c path="String"/></OPEN>
		<PASTE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</PASTE>
		<REMOVED final="1" public="1" set="null" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE final="1" public="1" set="null" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<RENDER final="1" public="1" set="null" static="1"><c path="String"/></RENDER>
		<RESIZE final="1" public="1" set="null" static="1"><c path="String"/></RESIZE>
		<SCROLL final="1" public="1" set="null" static="1"><c path="String"/></SCROLL>
		<SELECT final="1" public="1" set="null" static="1"><c path="String"/></SELECT>
		<SELECT_ALL final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</SELECT_ALL>
		<SOUND_COMPLETE final="1" public="1" set="null" static="1"><c path="String"/></SOUND_COMPLETE>
		<SUSPEND final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</SUSPEND>
		<TAB_CHILDREN_CHANGE final="1" public="1" set="null" static="1"><c path="String"/></TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE final="1" public="1" set="null" static="1"><c path="String"/></TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE final="1" public="1" set="null" static="1"><c path="String"/></TAB_INDEX_CHANGE>
		<TEXTURE_READY final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</TEXTURE_READY>
		<TEXT_INTERACTION_MODE_CHANGE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</TEXT_INTERACTION_MODE_CHANGE>
		<UNLOAD final="1" public="1" set="null" static="1"><c path="String"/></UNLOAD>
		<VIDEO_FRAME final="1" public="1" set="null" static="1"><c path="String"/></VIDEO_FRAME>
		<WORKER_STATE final="1" public="1" set="null" static="1"><c path="String"/></WORKER_STATE>
		<bubbles public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</bubbles>
		<cancelable public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</cancelable>
		<currentTarget public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</currentTarget>
		<eventPhase public="1" get="accessor" set="null">
			<x path="flash.events.EventPhase"/>
			<meta><m n=":flash.property"/></meta>
		</eventPhase>
		<target public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</target>
		<type public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</type>
		<clone public="1" set="method"><f a=""><c path="flash.events.Event"/></f></clone>
		<formatToString public="1" set="method"><f a="className:restArgs">
	<c path="String"/>
	<t path="haxe.extern.Rest"><d/></t>
	<c path="String"/>
</f></formatToString>
		<get_bubbles set="method"><f a=""><x path="Bool"/></f></get_bubbles>
		<get_cancelable set="method"><f a=""><x path="Bool"/></f></get_cancelable>
		<get_currentTarget set="method"><f a=""><d/></f></get_currentTarget>
		<get_eventPhase set="method"><f a=""><x path="flash.events.EventPhase"/></f></get_eventPhase>
		<get_target set="method"><f a=""><d/></f></get_target>
		<get_type set="method"><f a=""><c path="String"/></f></get_type>
		<isDefaultPrevented public="1" set="method"><f a=""><x path="Bool"/></f></isDefaultPrevented>
		<preventDefault public="1" set="method"><f a=""><x path="Void"/></f></preventDefault>
		<stopImmediatePropagation public="1" set="method"><f a=""><x path="Void"/></f></stopImmediatePropagation>
		<stopPropagation public="1" set="method"><f a=""><x path="Void"/></f></stopPropagation>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable" v=":false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="flash.automation.StageCaptureEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/automation/StageCaptureEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<CAPTURE final="1" public="1" set="null" static="1"><c path="String"/></CAPTURE>
		<checksum public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</checksum>
		<pts public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</pts>
		<url public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</url>
		<get_checksum set="method"><f a=""><x path="UInt"/></f></get_checksum>
		<get_pts set="method"><f a=""><x path="Float"/></f></get_pts>
		<get_url set="method"><f a=""><c path="String"/></f></get_url>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?url:?checksum:?pts" v=":false:false::0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ pts : 0, checksum : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.concurrent.Condition" params="" file="/home/runner/work/haxe/haxe/std/flash/concurrent/Condition.hx" extern="1" final="1">
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isSupported>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<mutex public="1" get="accessor" set="null">
			<c path="flash.concurrent.Mutex"/>
			<meta><m n=":flash.property"/></meta>
		</mutex>
		<get_mutex set="method"><f a=""><c path="flash.concurrent.Mutex"/></f></get_mutex>
		<notify public="1" set="method"><f a=""><x path="Void"/></f></notify>
		<notifyAll public="1" set="method"><f a=""><x path="Void"/></f></notifyAll>
		<wait public="1" set="method">
			<f a="?timeout" v="-1">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ timeout : -1 }</e></m></meta>
		</wait>
		<new public="1" set="method"><f a="mutex">
	<c path="flash.concurrent.Mutex"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash11_4</e></m></meta>
	</class>
	<class path="flash.concurrent.Mutex" params="" file="/home/runner/work/haxe/haxe/std/flash/concurrent/Mutex.hx" extern="1" final="1">
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isSupported>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<lock public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<tryLock public="1" set="method"><f a=""><x path="Bool"/></f></tryLock>
		<unlock public="1" set="method"><f a=""><x path="Void"/></f></unlock>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash11_4</e></m></meta>
	</class>
	<class path="flash.desktop.Clipboard" params="" file="/home/runner/work/haxe/haxe/std/flash/desktop/Clipboard.hx" extern="1">
		<generalClipboard public="1" get="accessor" set="null" static="1">
			<c path="flash.desktop.Clipboard"/>
			<meta><m n=":flash.property"/></meta>
		</generalClipboard>
		<get_generalClipboard set="method" static="1"><f a=""><c path="flash.desktop.Clipboard"/></f></get_generalClipboard>
		<formats public="1" get="accessor" set="null">
			<c path="Array"><x path="flash.desktop.ClipboardFormats"/></c>
			<meta><m n=":flash.property"/></meta>
		</formats>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<clearData public="1" set="method"><f a="format">
	<x path="flash.desktop.ClipboardFormats"/>
	<x path="Void"/>
</f></clearData>
		<getData public="1" set="method"><f a="format:?transferMode">
	<x path="flash.desktop.ClipboardFormats"/>
	<x path="flash.desktop.ClipboardTransferMode"/>
	<x path="flash.utils.Object"/>
</f></getData>
		<get_formats set="method"><f a=""><c path="Array"><x path="flash.desktop.ClipboardFormats"/></c></f></get_formats>
		<hasFormat public="1" set="method"><f a="format">
	<x path="flash.desktop.ClipboardFormats"/>
	<x path="Bool"/>
</f></hasFormat>
		<setData public="1" set="method">
			<f a="format:data:?serializable" v="::true">
				<x path="flash.desktop.ClipboardFormats"/>
				<x path="flash.utils.Object"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ serializable : true }</e></m></meta>
		</setData>
		<setDataHandler public="1" set="method">
			<f a="format:handler:?serializable" v="::true">
				<x path="flash.desktop.ClipboardFormats"/>
				<t path="flash.utils.Function"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ serializable : true }</e></m></meta>
		</setDataHandler>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<abstract path="flash.desktop.ClipboardFormats" params="" file="/home/runner/work/haxe/haxe/std/flash/desktop/ClipboardFormats.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.desktop.ClipboardFormats"</e></m>
			<m n=":require"><e>flash10</e></m>
		</meta>
		<impl><class path="flash.desktop._ClipboardFormats.ClipboardFormats_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/desktop/ClipboardFormats.hx" private="1" module="flash.desktop.ClipboardFormats" extern="1" final="1">
	<AIR_PREFIX public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardFormats"/>
		<meta><m n=":enum"/></meta>
	</AIR_PREFIX>
	<BITMAP_FORMAT public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardFormats"/>
		<meta><m n=":enum"/></meta>
	</BITMAP_FORMAT>
	<FILE_LIST_FORMAT public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardFormats"/>
		<meta><m n=":enum"/></meta>
	</FILE_LIST_FORMAT>
	<FILE_PROMISE_LIST_FORMAT public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardFormats"/>
		<meta><m n=":enum"/></meta>
	</FILE_PROMISE_LIST_FORMAT>
	<FLASH_PREFIX public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardFormats"/>
		<meta><m n=":enum"/></meta>
	</FLASH_PREFIX>
	<HTML_FORMAT public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardFormats"/>
		<meta><m n=":enum"/></meta>
	</HTML_FORMAT>
	<REFERENCE_PREFIX public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardFormats"/>
		<meta><m n=":enum"/></meta>
	</REFERENCE_PREFIX>
	<RICH_TEXT_FORMAT public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardFormats"/>
		<meta><m n=":enum"/></meta>
	</RICH_TEXT_FORMAT>
	<SERIALIZATION_PREFIX public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardFormats"/>
		<meta><m n=":enum"/></meta>
	</SERIALIZATION_PREFIX>
	<TEXT_FORMAT public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardFormats"/>
		<meta><m n=":enum"/></meta>
	</TEXT_FORMAT>
	<URL_FORMAT public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardFormats"/>
		<meta><m n=":enum"/></meta>
	</URL_FORMAT>
	<meta>
		<m n=":native"><e>"flash.desktop.ClipboardFormats"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.desktop._ClipboardFormats.ClipboardFormats_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/desktop/ClipboardFormats.hx" private="1" module="flash.desktop.ClipboardFormats" extern="1" final="1">
		<AIR_PREFIX public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardFormats"/>
			<meta><m n=":enum"/></meta>
		</AIR_PREFIX>
		<BITMAP_FORMAT public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardFormats"/>
			<meta><m n=":enum"/></meta>
		</BITMAP_FORMAT>
		<FILE_LIST_FORMAT public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardFormats"/>
			<meta><m n=":enum"/></meta>
		</FILE_LIST_FORMAT>
		<FILE_PROMISE_LIST_FORMAT public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardFormats"/>
			<meta><m n=":enum"/></meta>
		</FILE_PROMISE_LIST_FORMAT>
		<FLASH_PREFIX public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardFormats"/>
			<meta><m n=":enum"/></meta>
		</FLASH_PREFIX>
		<HTML_FORMAT public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardFormats"/>
			<meta><m n=":enum"/></meta>
		</HTML_FORMAT>
		<REFERENCE_PREFIX public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardFormats"/>
			<meta><m n=":enum"/></meta>
		</REFERENCE_PREFIX>
		<RICH_TEXT_FORMAT public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardFormats"/>
			<meta><m n=":enum"/></meta>
		</RICH_TEXT_FORMAT>
		<SERIALIZATION_PREFIX public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardFormats"/>
			<meta><m n=":enum"/></meta>
		</SERIALIZATION_PREFIX>
		<TEXT_FORMAT public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardFormats"/>
			<meta><m n=":enum"/></meta>
		</TEXT_FORMAT>
		<URL_FORMAT public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardFormats"/>
			<meta><m n=":enum"/></meta>
		</URL_FORMAT>
		<meta>
			<m n=":native"><e>"flash.desktop.ClipboardFormats"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.desktop.ClipboardTransferMode" params="" file="/home/runner/work/haxe/haxe/std/flash/desktop/ClipboardTransferMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.desktop.ClipboardTransferMode"</e></m>
			<m n=":require"><e>flash10</e></m>
		</meta>
		<impl><class path="flash.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/desktop/ClipboardTransferMode.hx" private="1" module="flash.desktop.ClipboardTransferMode" extern="1" final="1">
	<CLONE_ONLY public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardTransferMode"/>
		<meta><m n=":enum"/></meta>
	</CLONE_ONLY>
	<CLONE_PREFERRED public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardTransferMode"/>
		<meta><m n=":enum"/></meta>
	</CLONE_PREFERRED>
	<ORIGINAL_ONLY public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardTransferMode"/>
		<meta><m n=":enum"/></meta>
	</ORIGINAL_ONLY>
	<ORIGINAL_PREFERRED public="1" set="null" static="1">
		<x path="flash.desktop.ClipboardTransferMode"/>
		<meta><m n=":enum"/></meta>
	</ORIGINAL_PREFERRED>
	<meta>
		<m n=":native"><e>"flash.desktop.ClipboardTransferMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/desktop/ClipboardTransferMode.hx" private="1" module="flash.desktop.ClipboardTransferMode" extern="1" final="1">
		<CLONE_ONLY public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardTransferMode"/>
			<meta><m n=":enum"/></meta>
		</CLONE_ONLY>
		<CLONE_PREFERRED public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardTransferMode"/>
			<meta><m n=":enum"/></meta>
		</CLONE_PREFERRED>
		<ORIGINAL_ONLY public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardTransferMode"/>
			<meta><m n=":enum"/></meta>
		</ORIGINAL_ONLY>
		<ORIGINAL_PREFERRED public="1" set="null" static="1">
			<x path="flash.desktop.ClipboardTransferMode"/>
			<meta><m n=":enum"/></meta>
		</ORIGINAL_PREFERRED>
		<meta>
			<m n=":native"><e>"flash.desktop.ClipboardTransferMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.Loader" params="" file="/home/runner/work/haxe/haxe/std/flash/display/Loader.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<content public="1" get="accessor" set="null">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</content>
		<contentLoaderInfo public="1" get="accessor" set="null">
			<c path="flash.display.LoaderInfo"/>
			<meta><m n=":flash.property"/></meta>
		</contentLoaderInfo>
		<uncaughtErrorEvents public="1" get="accessor" set="null">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</uncaughtErrorEvents>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<get_content set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_content>
		<get_contentLoaderInfo set="method"><f a=""><c path="flash.display.LoaderInfo"/></f></get_contentLoaderInfo>
		<get_uncaughtErrorEvents set="method"><f a=""><c path="flash.events.UncaughtErrorEvents"/></f></get_uncaughtErrorEvents>
		<load public="1" set="method"><f a="request:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></load>
		<loadBytes public="1" set="method"><f a="bytes:?context">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></loadBytes>
		<unload public="1" set="method"><f a=""><x path="Void"/></f></unload>
		<unloadAndStop public="1" set="method">
			<f a="?gc" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ gc : true }</e></m>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</unloadAndStop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.AVLoader" params="" file="/home/runner/work/haxe/haxe/std/flash/display/AVLoader.hx" extern="1">
		<extends path="flash.display.Loader"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.AVM1Movie" params="" file="/home/runner/work/haxe/haxe/std/flash/display/AVM1Movie.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<addCallback public="1" set="method"><f a="functionName:closure">
	<c path="String"/>
	<t path="flash.utils.Function"/>
	<x path="Void"/>
</f></addCallback>
		<call public="1" set="method"><f a="functionName:restArgs">
	<c path="String"/>
	<t path="haxe.extern.Rest"><d/></t>
	<d/>
</f></call>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.display.ActionScriptVersion" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ActionScriptVersion.hx">
		<this><x path="UInt"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.ActionScriptVersion"</e></m>
		</meta>
		<impl><class path="flash.display._ActionScriptVersion.ActionScriptVersion_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ActionScriptVersion.hx" private="1" module="flash.display.ActionScriptVersion" extern="1" final="1">
	<ACTIONSCRIPT2 public="1" set="null" static="1">
		<x path="flash.display.ActionScriptVersion"/>
		<meta><m n=":enum"/></meta>
	</ACTIONSCRIPT2>
	<ACTIONSCRIPT3 public="1" set="null" static="1">
		<x path="flash.display.ActionScriptVersion"/>
		<meta><m n=":enum"/></meta>
	</ACTIONSCRIPT3>
	<meta>
		<m n=":native"><e>"flash.display.ActionScriptVersion"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._ActionScriptVersion.ActionScriptVersion_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ActionScriptVersion.hx" private="1" module="flash.display.ActionScriptVersion" extern="1" final="1">
		<ACTIONSCRIPT2 public="1" set="null" static="1">
			<x path="flash.display.ActionScriptVersion"/>
			<meta><m n=":enum"/></meta>
		</ACTIONSCRIPT2>
		<ACTIONSCRIPT3 public="1" set="null" static="1">
			<x path="flash.display.ActionScriptVersion"/>
			<meta><m n=":enum"/></meta>
		</ACTIONSCRIPT3>
		<meta>
			<m n=":native"><e>"flash.display.ActionScriptVersion"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.Bitmap" params="" file="/home/runner/work/haxe/haxe/std/flash/display/Bitmap.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<bitmapData public="1" get="accessor" set="accessor">
			<c path="flash.display.BitmapData"/>
			<meta><m n=":flash.property"/></meta>
		</bitmapData>
		<pixelSnapping public="1" get="accessor" set="accessor">
			<x path="flash.display.PixelSnapping"/>
			<meta><m n=":flash.property"/></meta>
		</pixelSnapping>
		<smoothing public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</smoothing>
		<get_bitmapData set="method"><f a=""><c path="flash.display.BitmapData"/></f></get_bitmapData>
		<get_pixelSnapping set="method"><f a=""><x path="flash.display.PixelSnapping"/></f></get_pixelSnapping>
		<get_smoothing set="method"><f a=""><x path="Bool"/></f></get_smoothing>
		<set_bitmapData set="method"><f a="value">
	<c path="flash.display.BitmapData"/>
	<c path="flash.display.BitmapData"/>
</f></set_bitmapData>
		<set_pixelSnapping set="method"><f a="value">
	<x path="flash.display.PixelSnapping"/>
	<x path="flash.display.PixelSnapping"/>
</f></set_pixelSnapping>
		<set_smoothing set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_smoothing>
		<new public="1" set="method">
			<f a="?bitmapData:?pixelSnapping:?smoothing" v="::false">
				<c path="flash.display.BitmapData"/>
				<x path="flash.display.PixelSnapping"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smoothing : false }</e></m></meta>
		</new>
	</class>
	<abstract path="flash.display.BitmapCompressColorSpace" params="" file="/home/runner/work/haxe/haxe/std/flash/display/BitmapCompressColorSpace.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.BitmapCompressColorSpace"</e></m>
		</meta>
		<impl><class path="flash.display._BitmapCompressColorSpace.BitmapCompressColorSpace_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/BitmapCompressColorSpace.hx" private="1" module="flash.display.BitmapCompressColorSpace" extern="1" final="1">
	<COLORSPACE_4_2_0 public="1" set="null" static="1">
		<x path="flash.display.BitmapCompressColorSpace"/>
		<meta><m n=":enum"/></meta>
	</COLORSPACE_4_2_0>
	<COLORSPACE_4_2_2 public="1" set="null" static="1">
		<x path="flash.display.BitmapCompressColorSpace"/>
		<meta><m n=":enum"/></meta>
	</COLORSPACE_4_2_2>
	<COLORSPACE_4_4_4 public="1" set="null" static="1">
		<x path="flash.display.BitmapCompressColorSpace"/>
		<meta><m n=":enum"/></meta>
	</COLORSPACE_4_4_4>
	<COLORSPACE_AUTO public="1" set="null" static="1">
		<x path="flash.display.BitmapCompressColorSpace"/>
		<meta><m n=":enum"/></meta>
	</COLORSPACE_AUTO>
	<meta>
		<m n=":native"><e>"flash.display.BitmapCompressColorSpace"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._BitmapCompressColorSpace.BitmapCompressColorSpace_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/BitmapCompressColorSpace.hx" private="1" module="flash.display.BitmapCompressColorSpace" extern="1" final="1">
		<COLORSPACE_4_2_0 public="1" set="null" static="1">
			<x path="flash.display.BitmapCompressColorSpace"/>
			<meta><m n=":enum"/></meta>
		</COLORSPACE_4_2_0>
		<COLORSPACE_4_2_2 public="1" set="null" static="1">
			<x path="flash.display.BitmapCompressColorSpace"/>
			<meta><m n=":enum"/></meta>
		</COLORSPACE_4_2_2>
		<COLORSPACE_4_4_4 public="1" set="null" static="1">
			<x path="flash.display.BitmapCompressColorSpace"/>
			<meta><m n=":enum"/></meta>
		</COLORSPACE_4_4_4>
		<COLORSPACE_AUTO public="1" set="null" static="1">
			<x path="flash.display.BitmapCompressColorSpace"/>
			<meta><m n=":enum"/></meta>
		</COLORSPACE_AUTO>
		<meta>
			<m n=":native"><e>"flash.display.BitmapCompressColorSpace"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.BitmapData" params="" file="/home/runner/work/haxe/haxe/std/flash/display/BitmapData.hx" extern="1">
		<implements path="flash.display.IBitmapDrawable"/>
		<height public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</height>
		<rect public="1" get="accessor" set="null">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</rect>
		<transparent public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</transparent>
		<width public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</width>
		<applyFilter public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<x path="Void"/>
</f></applyFilter>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<colorTransform public="1" set="method"><f a="rect:colorTransform">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></colorTransform>
		<compare public="1" set="method"><f a="otherBitmapData">
	<c path="flash.display.BitmapData"/>
	<x path="flash.utils.Object"/>
</f></compare>
		<copyChannel public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></copyChannel>
		<copyPixels public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha" v=":::::false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Point"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mergeAlpha : false }</e></m></meta>
		</copyPixels>
		<copyPixelsToByteArray public="1" set="method">
			<f a="rect:data">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyPixelsToByteArray>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<draw public="1" set="method">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing" v=":::::false">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<x path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smoothing : false }</e></m></meta>
		</draw>
		<drawWithQuality public="1" set="method">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing:?quality" v=":::::false:">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<x path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<x path="flash.display.StageQuality"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ smoothing : false }</e></m>
				<m n=":require"><e>flash11_3</e></m>
			</meta>
		</drawWithQuality>
		<encode public="1" set="method">
			<f a="rect:compressor:?byteArray">
				<c path="flash.geom.Rectangle"/>
				<x path="flash.utils.Object"/>
				<c path="flash.utils.ByteArray"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</encode>
		<fillRect public="1" set="method"><f a="rect:color">
	<c path="flash.geom.Rectangle"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></fillRect>
		<floodFill public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></floodFill>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
</f></generateFilterRect>
		<getColorBoundsRect public="1" set="method">
			<f a="mask:color:?findColor" v="::true">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
			</f>
			<meta><m n=":value"><e>{ findColor : true }</e></m></meta>
		</getColorBoundsRect>
		<getPixel public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel>
		<getPixel32 public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel32>
		<getPixels public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></getPixels>
		<getVector public="1" set="method">
			<f a="rect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getVector>
		<get_height set="method"><f a=""><x path="Int"/></f></get_height>
		<get_rect set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_rect>
		<get_transparent set="method"><f a=""><x path="Bool"/></f></get_transparent>
		<get_width set="method"><f a=""><x path="Int"/></f></get_width>
		<histogram public="1" set="method">
			<f a="?hRect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><c path="flash.Vector"><x path="Float"/></c></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</histogram>
		<hitTest public="1" set="method">
			<f a="firstPoint:firstAlphaThreshold:secondObject:?secondBitmapDataPoint:?secondAlphaThreshold" v="::::1">
				<c path="flash.geom.Point"/>
				<x path="UInt"/>
				<x path="flash.utils.Object"/>
				<c path="flash.geom.Point"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ secondAlphaThreshold : 1 }</e></m></meta>
		</hitTest>
		<lock public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<merge public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></merge>
		<noise public="1" set="method">
			<f a="randomSeed:?low:?high:?channelOptions:?grayScale" v=":0:255:7:false">
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ grayScale : false, channelOptions : 7, high : 255, low : 0 }</e></m></meta>
		</noise>
		<paletteMap public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?redArray:?greenArray:?blueArray:?alphaArray">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></paletteMap>
		<perlinNoise public="1" set="method">
			<f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets" v="::::::7:false:">
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<c path="Array"><c path="flash.geom.Point"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ grayScale : false, channelOptions : 7 }</e></m></meta>
		</perlinNoise>
		<pixelDissolve public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:?randomSeed:?numPixels:?fillColor" v=":::0:0:0">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ fillColor : 0, numPixels : 0, randomSeed : 0 }</e></m></meta>
		</pixelDissolve>
		<scroll public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scroll>
		<setPixel public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel32>
		<setPixels public="1" set="method"><f a="rect:inputByteArray">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></setPixels>
		<setVector public="1" set="method">
			<f a="rect:inputVector">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</setVector>
		<threshold public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource" v=":::::0:0xFFFFFFFF:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="String"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":value"><e>{ copySource : false, mask : 0xFFFFFFFF, color : 0 }</e></m></meta>
		</threshold>
		<unlock public="1" set="method"><f a="?changeRect">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></unlock>
		<new public="1" set="method">
			<f a="width:height:?transparent:?fillColor" v="::true:0xFFFFFFFF">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ fillColor : 0xFFFFFFFF, transparent : true }</e></m></meta>
		</new>
	</class>
	<class path="flash.display.BitmapDataChannel" params="" file="/home/runner/work/haxe/haxe/std/flash/display/BitmapDataChannel.hx" extern="1">
		<ALPHA public="1" get="inline" set="null" expr="8" line="4" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</ALPHA>
		<BLUE public="1" get="inline" set="null" expr="4" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BLUE>
		<GREEN public="1" get="inline" set="null" expr="2" line="6" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</GREEN>
		<RED public="1" get="inline" set="null" expr="1" line="7" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</RED>
	</class>
	<abstract path="flash.display.BitmapEncodingColorSpace" params="" file="/home/runner/work/haxe/haxe/std/flash/display/BitmapEncodingColorSpace.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.BitmapEncodingColorSpace"</e></m>
		</meta>
		<impl><class path="flash.display._BitmapEncodingColorSpace.BitmapEncodingColorSpace_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/BitmapEncodingColorSpace.hx" private="1" module="flash.display.BitmapEncodingColorSpace" extern="1" final="1">
	<COLORSPACE_4_2_0 public="1" set="null" static="1">
		<x path="flash.display.BitmapEncodingColorSpace"/>
		<meta><m n=":enum"/></meta>
	</COLORSPACE_4_2_0>
	<COLORSPACE_4_2_2 public="1" set="null" static="1">
		<x path="flash.display.BitmapEncodingColorSpace"/>
		<meta><m n=":enum"/></meta>
	</COLORSPACE_4_2_2>
	<COLORSPACE_4_4_4 public="1" set="null" static="1">
		<x path="flash.display.BitmapEncodingColorSpace"/>
		<meta><m n=":enum"/></meta>
	</COLORSPACE_4_4_4>
	<COLORSPACE_AUTO public="1" set="null" static="1">
		<x path="flash.display.BitmapEncodingColorSpace"/>
		<meta><m n=":enum"/></meta>
	</COLORSPACE_AUTO>
	<meta>
		<m n=":native"><e>"flash.display.BitmapEncodingColorSpace"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._BitmapEncodingColorSpace.BitmapEncodingColorSpace_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/BitmapEncodingColorSpace.hx" private="1" module="flash.display.BitmapEncodingColorSpace" extern="1" final="1">
		<COLORSPACE_4_2_0 public="1" set="null" static="1">
			<x path="flash.display.BitmapEncodingColorSpace"/>
			<meta><m n=":enum"/></meta>
		</COLORSPACE_4_2_0>
		<COLORSPACE_4_2_2 public="1" set="null" static="1">
			<x path="flash.display.BitmapEncodingColorSpace"/>
			<meta><m n=":enum"/></meta>
		</COLORSPACE_4_2_2>
		<COLORSPACE_4_4_4 public="1" set="null" static="1">
			<x path="flash.display.BitmapEncodingColorSpace"/>
			<meta><m n=":enum"/></meta>
		</COLORSPACE_4_4_4>
		<COLORSPACE_AUTO public="1" set="null" static="1">
			<x path="flash.display.BitmapEncodingColorSpace"/>
			<meta><m n=":enum"/></meta>
		</COLORSPACE_AUTO>
		<meta>
			<m n=":native"><e>"flash.display.BitmapEncodingColorSpace"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.BlendMode" params="" file="/home/runner/work/haxe/haxe/std/flash/display/BlendMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.BlendMode"</e></m>
		</meta>
		<impl><class path="flash.display._BlendMode.BlendMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/BlendMode.hx" private="1" module="flash.display.BlendMode" extern="1" final="1">
	<ADD public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</ADD>
	<ALPHA public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</ALPHA>
	<DARKEN public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</DARKEN>
	<DIFFERENCE public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</DIFFERENCE>
	<ERASE public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</ERASE>
	<HARDLIGHT public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</HARDLIGHT>
	<INVERT public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</INVERT>
	<LAYER public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</LAYER>
	<LIGHTEN public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</LIGHTEN>
	<MULTIPLY public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</MULTIPLY>
	<NORMAL public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</NORMAL>
	<OVERLAY public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</OVERLAY>
	<SCREEN public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</SCREEN>
	<SHADER public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</SHADER>
	<SUBTRACT public="1" set="null" static="1">
		<x path="flash.display.BlendMode"/>
		<meta><m n=":enum"/></meta>
	</SUBTRACT>
	<meta>
		<m n=":native"><e>"flash.display.BlendMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._BlendMode.BlendMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/BlendMode.hx" private="1" module="flash.display.BlendMode" extern="1" final="1">
		<ADD public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</ADD>
		<ALPHA public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</ALPHA>
		<DARKEN public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</DARKEN>
		<DIFFERENCE public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</DIFFERENCE>
		<ERASE public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</ERASE>
		<HARDLIGHT public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</HARDLIGHT>
		<INVERT public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</INVERT>
		<LAYER public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</LAYER>
		<LIGHTEN public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</LIGHTEN>
		<MULTIPLY public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</MULTIPLY>
		<NORMAL public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</NORMAL>
		<OVERLAY public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</OVERLAY>
		<SCREEN public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</SCREEN>
		<SHADER public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</SHADER>
		<SUBTRACT public="1" set="null" static="1">
			<x path="flash.display.BlendMode"/>
			<meta><m n=":enum"/></meta>
		</SUBTRACT>
		<meta>
			<m n=":native"><e>"flash.display.BlendMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.CapsStyle" params="" file="/home/runner/work/haxe/haxe/std/flash/display/CapsStyle.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.CapsStyle"</e></m>
		</meta>
		<impl><class path="flash.display._CapsStyle.CapsStyle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/CapsStyle.hx" private="1" module="flash.display.CapsStyle" extern="1" final="1">
	<NONE public="1" set="null" static="1">
		<x path="flash.display.CapsStyle"/>
		<meta><m n=":enum"/></meta>
	</NONE>
	<ROUND public="1" set="null" static="1">
		<x path="flash.display.CapsStyle"/>
		<meta><m n=":enum"/></meta>
	</ROUND>
	<SQUARE public="1" set="null" static="1">
		<x path="flash.display.CapsStyle"/>
		<meta><m n=":enum"/></meta>
	</SQUARE>
	<meta>
		<m n=":native"><e>"flash.display.CapsStyle"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._CapsStyle.CapsStyle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/CapsStyle.hx" private="1" module="flash.display.CapsStyle" extern="1" final="1">
		<NONE public="1" set="null" static="1">
			<x path="flash.display.CapsStyle"/>
			<meta><m n=":enum"/></meta>
		</NONE>
		<ROUND public="1" set="null" static="1">
			<x path="flash.display.CapsStyle"/>
			<meta><m n=":enum"/></meta>
		</ROUND>
		<SQUARE public="1" set="null" static="1">
			<x path="flash.display.CapsStyle"/>
			<meta><m n=":enum"/></meta>
		</SQUARE>
		<meta>
			<m n=":native"><e>"flash.display.CapsStyle"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.ColorCorrection" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ColorCorrection.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.ColorCorrection"</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
		<impl><class path="flash.display._ColorCorrection.ColorCorrection_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ColorCorrection.hx" private="1" module="flash.display.ColorCorrection" extern="1" final="1">
	<DEFAULT public="1" set="null" static="1">
		<x path="flash.display.ColorCorrection"/>
		<meta><m n=":enum"/></meta>
	</DEFAULT>
	<OFF public="1" set="null" static="1">
		<x path="flash.display.ColorCorrection"/>
		<meta><m n=":enum"/></meta>
	</OFF>
	<ON public="1" set="null" static="1">
		<x path="flash.display.ColorCorrection"/>
		<meta><m n=":enum"/></meta>
	</ON>
	<meta>
		<m n=":native"><e>"flash.display.ColorCorrection"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._ColorCorrection.ColorCorrection_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ColorCorrection.hx" private="1" module="flash.display.ColorCorrection" extern="1" final="1">
		<DEFAULT public="1" set="null" static="1">
			<x path="flash.display.ColorCorrection"/>
			<meta><m n=":enum"/></meta>
		</DEFAULT>
		<OFF public="1" set="null" static="1">
			<x path="flash.display.ColorCorrection"/>
			<meta><m n=":enum"/></meta>
		</OFF>
		<ON public="1" set="null" static="1">
			<x path="flash.display.ColorCorrection"/>
			<meta><m n=":enum"/></meta>
		</ON>
		<meta>
			<m n=":native"><e>"flash.display.ColorCorrection"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.ColorCorrectionSupport" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ColorCorrectionSupport.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.ColorCorrectionSupport"</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
		<impl><class path="flash.display._ColorCorrectionSupport.ColorCorrectionSupport_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ColorCorrectionSupport.hx" private="1" module="flash.display.ColorCorrectionSupport" extern="1" final="1">
	<DEFAULT_OFF public="1" set="null" static="1">
		<x path="flash.display.ColorCorrectionSupport"/>
		<meta><m n=":enum"/></meta>
	</DEFAULT_OFF>
	<DEFAULT_ON public="1" set="null" static="1">
		<x path="flash.display.ColorCorrectionSupport"/>
		<meta><m n=":enum"/></meta>
	</DEFAULT_ON>
	<UNSUPPORTED public="1" set="null" static="1">
		<x path="flash.display.ColorCorrectionSupport"/>
		<meta><m n=":enum"/></meta>
	</UNSUPPORTED>
	<meta>
		<m n=":native"><e>"flash.display.ColorCorrectionSupport"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._ColorCorrectionSupport.ColorCorrectionSupport_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ColorCorrectionSupport.hx" private="1" module="flash.display.ColorCorrectionSupport" extern="1" final="1">
		<DEFAULT_OFF public="1" set="null" static="1">
			<x path="flash.display.ColorCorrectionSupport"/>
			<meta><m n=":enum"/></meta>
		</DEFAULT_OFF>
		<DEFAULT_ON public="1" set="null" static="1">
			<x path="flash.display.ColorCorrectionSupport"/>
			<meta><m n=":enum"/></meta>
		</DEFAULT_ON>
		<UNSUPPORTED public="1" set="null" static="1">
			<x path="flash.display.ColorCorrectionSupport"/>
			<meta><m n=":enum"/></meta>
		</UNSUPPORTED>
		<meta>
			<m n=":native"><e>"flash.display.ColorCorrectionSupport"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.FocusDirection" params="" file="/home/runner/work/haxe/haxe/std/flash/display/FocusDirection.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.FocusDirection"</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
		<impl><class path="flash.display._FocusDirection.FocusDirection_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/FocusDirection.hx" private="1" module="flash.display.FocusDirection" extern="1" final="1">
	<BOTTOM public="1" set="null" static="1">
		<x path="flash.display.FocusDirection"/>
		<meta><m n=":enum"/></meta>
	</BOTTOM>
	<NONE public="1" set="null" static="1">
		<x path="flash.display.FocusDirection"/>
		<meta><m n=":enum"/></meta>
	</NONE>
	<TOP public="1" set="null" static="1">
		<x path="flash.display.FocusDirection"/>
		<meta><m n=":enum"/></meta>
	</TOP>
	<meta>
		<m n=":native"><e>"flash.display.FocusDirection"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._FocusDirection.FocusDirection_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/FocusDirection.hx" private="1" module="flash.display.FocusDirection" extern="1" final="1">
		<BOTTOM public="1" set="null" static="1">
			<x path="flash.display.FocusDirection"/>
			<meta><m n=":enum"/></meta>
		</BOTTOM>
		<NONE public="1" set="null" static="1">
			<x path="flash.display.FocusDirection"/>
			<meta><m n=":enum"/></meta>
		</NONE>
		<TOP public="1" set="null" static="1">
			<x path="flash.display.FocusDirection"/>
			<meta><m n=":enum"/></meta>
		</TOP>
		<meta>
			<m n=":native"><e>"flash.display.FocusDirection"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.FrameLabel" params="" file="/home/runner/work/haxe/haxe/std/flash/display/FrameLabel.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<frame public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</frame>
		<name public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</name>
		<get_frame set="method"><f a=""><x path="Int"/></f></get_frame>
		<get_name set="method"><f a=""><c path="String"/></f></get_name>
		<new public="1" set="method"><f a="name:frame">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="flash.display.GradientType" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GradientType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.GradientType"</e></m>
		</meta>
		<impl><class path="flash.display._GradientType.GradientType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GradientType.hx" private="1" module="flash.display.GradientType" extern="1" final="1">
	<LINEAR public="1" set="null" static="1">
		<x path="flash.display.GradientType"/>
		<meta><m n=":enum"/></meta>
	</LINEAR>
	<RADIAL public="1" set="null" static="1">
		<x path="flash.display.GradientType"/>
		<meta><m n=":enum"/></meta>
	</RADIAL>
	<meta>
		<m n=":native"><e>"flash.display.GradientType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._GradientType.GradientType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GradientType.hx" private="1" module="flash.display.GradientType" extern="1" final="1">
		<LINEAR public="1" set="null" static="1">
			<x path="flash.display.GradientType"/>
			<meta><m n=":enum"/></meta>
		</LINEAR>
		<RADIAL public="1" set="null" static="1">
			<x path="flash.display.GradientType"/>
			<meta><m n=":enum"/></meta>
		</RADIAL>
		<meta>
			<m n=":native"><e>"flash.display.GradientType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.Graphics" params="" file="/home/runner/work/haxe/haxe/std/flash/display/Graphics.hx" extern="1" final="1">
		<beginBitmapFill public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth" v="::true:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : false, repeat : true }</e></m></meta>
		</beginBitmapFill>
		<beginFill public="1" set="method">
			<f a="color:?alpha" v=":1">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1 }</e></m></meta>
		</beginFill>
		<beginGradientFill public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio" v=":::::::0">
				<x path="flash.display.GradientType"/>
				<c path="Array"><x path="UInt"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="flash.geom.Matrix"/>
				<x path="flash.display.SpreadMethod"/>
				<x path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ focalPointRatio : 0 }</e></m></meta>
		</beginGradientFill>
		<beginShaderFill public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</beginShaderFill>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<copyFrom public="1" set="method">
			<f a="sourceGraphics">
				<c path="flash.display.Graphics"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</copyFrom>
		<cubicCurveTo public="1" set="method">
			<f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</cubicCurveTo>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<drawCircle public="1" set="method"><f a="x:y:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawCircle>
		<drawEllipse public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawEllipse>
		<drawGraphicsData public="1" set="method">
			<f a="graphicsData">
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawGraphicsData>
		<drawPath public="1" set="method">
			<f a="commands:data:?winding">
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="flash.display.GraphicsPathWinding"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawPath>
		<drawRect public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRect>
		<drawRoundRect public="1" set="method">
			<f a="x:y:width:height:ellipseWidth:?ellipseHeight" v=":::::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ellipseHeight : 0 }</e></m></meta>
		</drawRoundRect>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRectComplex>
		<drawTriangles public="1" set="method">
			<f a="vertices:?indices:?uvtData:?culling">
				<c path="flash.Vector"><x path="Float"/></c>
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="flash.display.TriangleCulling"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawTriangles>
		<endFill public="1" set="method"><f a=""><x path="Void"/></f></endFill>
		<lineBitmapStyle public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth" v="::true:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ smooth : false, repeat : true }</e></m>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</lineBitmapStyle>
		<lineGradientStyle public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio" v=":::::::0">
				<x path="flash.display.GradientType"/>
				<c path="Array"><x path="UInt"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="flash.geom.Matrix"/>
				<x path="flash.display.SpreadMethod"/>
				<x path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ focalPointRatio : 0 }</e></m></meta>
		</lineGradientStyle>
		<lineShaderStyle public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineShaderStyle>
		<lineStyle public="1" set="method">
			<f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit" v="0:0:1:false::::3">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="flash.display.LineScaleMode"/>
				<x path="flash.display.CapsStyle"/>
				<x path="flash.display.JointStyle"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miterLimit : 3, pixelHinting : false, alpha : 1, color : 0, thickness : 0 }</e></m></meta>
		</lineStyle>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<readGraphicsData public="1" expr="{ recurse : true }">
			<f a="?recurse">
				<x path="Bool"/>
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
			</f>
			<meta>
				<m n=":value"><e>{ recurse : true }</e></m>
				<m n=":require"><e>flash11_6</e></m>
			</meta>
		</readGraphicsData>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.IGraphicsFill" params="" file="/home/runner/work/haxe/haxe/std/flash/display/IGraphicsFill.hx" extern="1" interface="1"/>
	<class path="flash.display.IGraphicsData" params="" file="/home/runner/work/haxe/haxe/std/flash/display/IGraphicsData.hx" extern="1" interface="1"/>
	<class path="flash.display.GraphicsBitmapFill" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GraphicsBitmapFill.hx" extern="1" final="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<bitmapData public="1"><c path="flash.display.BitmapData"/></bitmapData>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<repeat public="1"><x path="Bool"/></repeat>
		<smooth public="1"><x path="Bool"/></smooth>
		<new public="1" set="method">
			<f a="?bitmapData:?matrix:?repeat:?smooth" v="::true:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ smooth : false, repeat : true }</e></m></meta>
		</new>
	</class>
	<class path="flash.display.GraphicsEndFill" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GraphicsEndFill.hx" extern="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.GraphicsGradientFill" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GraphicsGradientFill.hx" extern="1" final="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<alphas public="1"><c path="Array"><x path="Float"/></c></alphas>
		<colors public="1"><c path="Array"><x path="UInt"/></c></colors>
		<focalPointRatio public="1"><x path="Float"/></focalPointRatio>
		<interpolationMethod public="1" get="accessor" set="accessor">
			<x path="flash.display.InterpolationMethod"/>
			<meta><m n=":flash.property"/></meta>
		</interpolationMethod>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<ratios public="1"><c path="Array"><x path="Float"/></c></ratios>
		<spreadMethod public="1" get="accessor" set="accessor">
			<x path="flash.display.SpreadMethod"/>
			<meta><m n=":flash.property"/></meta>
		</spreadMethod>
		<type public="1" get="accessor" set="accessor">
			<x path="flash.display.GradientType"/>
			<meta><m n=":flash.property"/></meta>
		</type>
		<get_interpolationMethod set="method"><f a=""><x path="flash.display.InterpolationMethod"/></f></get_interpolationMethod>
		<get_spreadMethod set="method"><f a=""><x path="flash.display.SpreadMethod"/></f></get_spreadMethod>
		<get_type set="method"><f a=""><x path="flash.display.GradientType"/></f></get_type>
		<set_interpolationMethod set="method"><f a="value">
	<x path="flash.display.InterpolationMethod"/>
	<x path="flash.display.InterpolationMethod"/>
</f></set_interpolationMethod>
		<set_spreadMethod set="method"><f a="value">
	<x path="flash.display.SpreadMethod"/>
	<x path="flash.display.SpreadMethod"/>
</f></set_spreadMethod>
		<set_type set="method"><f a="value">
	<x path="flash.display.GradientType"/>
	<x path="flash.display.GradientType"/>
</f></set_type>
		<new public="1" set="method">
			<f a="?type:?colors:?alphas:?ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio" v=":::::::0">
				<x path="flash.display.GradientType"/>
				<c path="Array"><x path="UInt"/></c>
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<c path="flash.geom.Matrix"/>
				<x path="flash.display.SpreadMethod"/>
				<x path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ focalPointRatio : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.display.IGraphicsPath" params="" file="/home/runner/work/haxe/haxe/std/flash/display/IGraphicsPath.hx" extern="1" interface="1"/>
	<class path="flash.display.GraphicsPath" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GraphicsPath.hx" extern="1" final="1">
		<implements path="flash.display.IGraphicsPath"/>
		<implements path="flash.display.IGraphicsData"/>
		<commands public="1"><c path="flash.Vector"><x path="Int"/></c></commands>
		<data public="1"><c path="flash.Vector"><x path="Float"/></c></data>
		<winding public="1" get="accessor" set="accessor">
			<x path="flash.display.GraphicsPathWinding"/>
			<meta><m n=":flash.property"/></meta>
		</winding>
		<cubicCurveTo public="1" set="method">
			<f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</cubicCurveTo>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<get_winding set="method"><f a=""><x path="flash.display.GraphicsPathWinding"/></f></get_winding>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<set_winding set="method"><f a="value">
	<x path="flash.display.GraphicsPathWinding"/>
	<x path="flash.display.GraphicsPathWinding"/>
</f></set_winding>
		<wideLineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></wideLineTo>
		<wideMoveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></wideMoveTo>
		<new public="1" set="method"><f a="?commands:?data:?winding">
	<c path="flash.Vector"><x path="Int"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="flash.display.GraphicsPathWinding"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.GraphicsPathCommand" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GraphicsPathCommand.hx" extern="1">
		<LINE_TO public="1" get="inline" set="null" expr="2" line="4" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LINE_TO>
		<MOVE_TO public="1" get="inline" set="null" expr="1" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</MOVE_TO>
		<CURVE_TO public="1" get="inline" set="null" expr="3" line="6" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</CURVE_TO>
		<CUBIC_CURVE_TO public="1" get="inline" set="null" expr="6" line="7" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>6</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</CUBIC_CURVE_TO>
		<WIDE_LINE_TO public="1" get="inline" set="null" expr="5" line="8" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</WIDE_LINE_TO>
		<WIDE_MOVE_TO public="1" get="inline" set="null" expr="4" line="9" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</WIDE_MOVE_TO>
		<NO_OP public="1" get="inline" set="null" expr="0" line="10" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_OP>
	</class>
	<abstract path="flash.display.GraphicsPathWinding" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GraphicsPathWinding.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.GraphicsPathWinding"</e></m>
		</meta>
		<impl><class path="flash.display._GraphicsPathWinding.GraphicsPathWinding_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GraphicsPathWinding.hx" private="1" module="flash.display.GraphicsPathWinding" extern="1" final="1">
	<EVEN_ODD public="1" set="null" static="1">
		<x path="flash.display.GraphicsPathWinding"/>
		<meta><m n=":enum"/></meta>
	</EVEN_ODD>
	<NON_ZERO public="1" set="null" static="1">
		<x path="flash.display.GraphicsPathWinding"/>
		<meta><m n=":enum"/></meta>
	</NON_ZERO>
	<meta>
		<m n=":native"><e>"flash.display.GraphicsPathWinding"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._GraphicsPathWinding.GraphicsPathWinding_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GraphicsPathWinding.hx" private="1" module="flash.display.GraphicsPathWinding" extern="1" final="1">
		<EVEN_ODD public="1" set="null" static="1">
			<x path="flash.display.GraphicsPathWinding"/>
			<meta><m n=":enum"/></meta>
		</EVEN_ODD>
		<NON_ZERO public="1" set="null" static="1">
			<x path="flash.display.GraphicsPathWinding"/>
			<meta><m n=":enum"/></meta>
		</NON_ZERO>
		<meta>
			<m n=":native"><e>"flash.display.GraphicsPathWinding"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.GraphicsShaderFill" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GraphicsShaderFill.hx" extern="1" final="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<shader public="1"><c path="flash.display.Shader"/></shader>
		<new public="1" set="method"><f a="?shader:?matrix">
	<c path="flash.display.Shader"/>
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.GraphicsSolidFill" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GraphicsSolidFill.hx" extern="1" final="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<alpha public="1"><x path="Float"/></alpha>
		<color public="1"><x path="UInt"/></color>
		<new public="1" set="method">
			<f a="?color:?alpha" v="0:1">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 1, color : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.display.IGraphicsStroke" params="" file="/home/runner/work/haxe/haxe/std/flash/display/IGraphicsStroke.hx" extern="1" interface="1"/>
	<class path="flash.display.GraphicsStroke" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GraphicsStroke.hx" extern="1" final="1">
		<implements path="flash.display.IGraphicsStroke"/>
		<implements path="flash.display.IGraphicsData"/>
		<caps public="1" get="accessor" set="accessor">
			<x path="flash.display.CapsStyle"/>
			<meta><m n=":flash.property"/></meta>
		</caps>
		<fill public="1"><c path="flash.display.IGraphicsFill"/></fill>
		<joints public="1" get="accessor" set="accessor">
			<x path="flash.display.JointStyle"/>
			<meta><m n=":flash.property"/></meta>
		</joints>
		<miterLimit public="1"><x path="Float"/></miterLimit>
		<pixelHinting public="1"><x path="Bool"/></pixelHinting>
		<scaleMode public="1" get="accessor" set="accessor">
			<x path="flash.display.LineScaleMode"/>
			<meta><m n=":flash.property"/></meta>
		</scaleMode>
		<thickness public="1"><x path="Float"/></thickness>
		<get_caps set="method"><f a=""><x path="flash.display.CapsStyle"/></f></get_caps>
		<get_joints set="method"><f a=""><x path="flash.display.JointStyle"/></f></get_joints>
		<get_scaleMode set="method"><f a=""><x path="flash.display.LineScaleMode"/></f></get_scaleMode>
		<set_caps set="method"><f a="value">
	<x path="flash.display.CapsStyle"/>
	<x path="flash.display.CapsStyle"/>
</f></set_caps>
		<set_joints set="method"><f a="value">
	<x path="flash.display.JointStyle"/>
	<x path="flash.display.JointStyle"/>
</f></set_joints>
		<set_scaleMode set="method"><f a="value">
	<x path="flash.display.LineScaleMode"/>
	<x path="flash.display.LineScaleMode"/>
</f></set_scaleMode>
		<new public="1" set="method">
			<f a="?thickness:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit:?fill" v="0.:false::::3:">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="flash.display.LineScaleMode"/>
				<x path="flash.display.CapsStyle"/>
				<x path="flash.display.JointStyle"/>
				<x path="Float"/>
				<c path="flash.display.IGraphicsFill"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miterLimit : 3, pixelHinting : false, thickness : 0. }</e></m></meta>
		</new>
	</class>
	<class path="flash.display.GraphicsTrianglePath" params="" file="/home/runner/work/haxe/haxe/std/flash/display/GraphicsTrianglePath.hx" extern="1" final="1">
		<implements path="flash.display.IGraphicsPath"/>
		<implements path="flash.display.IGraphicsData"/>
		<culling public="1" get="accessor" set="accessor">
			<x path="flash.display.TriangleCulling"/>
			<meta><m n=":flash.property"/></meta>
		</culling>
		<indices public="1"><c path="flash.Vector"><x path="Int"/></c></indices>
		<uvtData public="1"><c path="flash.Vector"><x path="Float"/></c></uvtData>
		<vertices public="1"><c path="flash.Vector"><x path="Float"/></c></vertices>
		<get_culling set="method"><f a=""><x path="flash.display.TriangleCulling"/></f></get_culling>
		<set_culling set="method"><f a="value">
	<x path="flash.display.TriangleCulling"/>
	<x path="flash.display.TriangleCulling"/>
</f></set_culling>
		<new public="1" set="method"><f a="?vertices:?indices:?uvtData:?culling">
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Int"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="flash.display.TriangleCulling"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.IBitmapCompressOptions" params="" file="/home/runner/work/haxe/haxe/std/flash/display/IBitmapCompressOptions.hx" extern="1" interface="1"/>
	<class path="flash.display.IDrawCommand" params="" file="/home/runner/work/haxe/haxe/std/flash/display/IDrawCommand.hx" extern="1" interface="1"/>
	<abstract path="flash.display.InterpolationMethod" params="" file="/home/runner/work/haxe/haxe/std/flash/display/InterpolationMethod.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.InterpolationMethod"</e></m>
		</meta>
		<impl><class path="flash.display._InterpolationMethod.InterpolationMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/InterpolationMethod.hx" private="1" module="flash.display.InterpolationMethod" extern="1" final="1">
	<LINEAR_RGB public="1" set="null" static="1">
		<x path="flash.display.InterpolationMethod"/>
		<meta><m n=":enum"/></meta>
	</LINEAR_RGB>
	<RGB public="1" set="null" static="1">
		<x path="flash.display.InterpolationMethod"/>
		<meta><m n=":enum"/></meta>
	</RGB>
	<meta>
		<m n=":native"><e>"flash.display.InterpolationMethod"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._InterpolationMethod.InterpolationMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/InterpolationMethod.hx" private="1" module="flash.display.InterpolationMethod" extern="1" final="1">
		<LINEAR_RGB public="1" set="null" static="1">
			<x path="flash.display.InterpolationMethod"/>
			<meta><m n=":enum"/></meta>
		</LINEAR_RGB>
		<RGB public="1" set="null" static="1">
			<x path="flash.display.InterpolationMethod"/>
			<meta><m n=":enum"/></meta>
		</RGB>
		<meta>
			<m n=":native"><e>"flash.display.InterpolationMethod"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.JPEGCompressOptions" params="" file="/home/runner/work/haxe/haxe/std/flash/display/JPEGCompressOptions.hx" extern="1" final="1">
		<implements path="flash.display.IBitmapCompressOptions"/>
		<quality public="1"><x path="UInt"/></quality>
		<new public="1" set="method">
			<f a="?quality" v="80">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ quality : 80 }</e></m></meta>
		</new>
	</class>
	<class path="flash.display.JPEGEncoderOptions" params="" file="/home/runner/work/haxe/haxe/std/flash/display/JPEGEncoderOptions.hx" extern="1" final="1">
		<quality public="1"><x path="UInt"/></quality>
		<new public="1" set="method">
			<f a="?quality" v="80">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ quality : 80 }</e></m></meta>
		</new>
	</class>
	<class path="flash.display.JPEGXRCompressOptions" params="" file="/home/runner/work/haxe/haxe/std/flash/display/JPEGXRCompressOptions.hx" extern="1" final="1">
		<implements path="flash.display.IBitmapCompressOptions"/>
		<colorSpace public="1"><c path="String"/></colorSpace>
		<quantization public="1"><x path="UInt"/></quantization>
		<trimFlexBits public="1"><x path="UInt"/></trimFlexBits>
		<new public="1" set="method">
			<f a="?quantization:?colorSpace:?trimFlexBits" v="20::0">
				<x path="UInt"/>
				<c path="String"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ trimFlexBits : 0, quantization : 20 }</e></m></meta>
		</new>
	</class>
	<class path="flash.display.JPEGXREncoderOptions" params="" file="/home/runner/work/haxe/haxe/std/flash/display/JPEGXREncoderOptions.hx" extern="1" final="1">
		<colorSpace public="1"><x path="flash.display.BitmapEncodingColorSpace"/></colorSpace>
		<quantization public="1"><x path="UInt"/></quantization>
		<trimFlexBits public="1"><x path="UInt"/></trimFlexBits>
		<new public="1" set="method">
			<f a="?quantization:?colorSpace:?trimFlexBits" v="20::0">
				<x path="UInt"/>
				<x path="flash.display.BitmapEncodingColorSpace"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ trimFlexBits : 0, quantization : 20 }</e></m></meta>
		</new>
	</class>
	<abstract path="flash.display.JointStyle" params="" file="/home/runner/work/haxe/haxe/std/flash/display/JointStyle.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.JointStyle"</e></m>
		</meta>
		<impl><class path="flash.display._JointStyle.JointStyle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/JointStyle.hx" private="1" module="flash.display.JointStyle" extern="1" final="1">
	<BEVEL public="1" set="null" static="1">
		<x path="flash.display.JointStyle"/>
		<meta><m n=":enum"/></meta>
	</BEVEL>
	<MITER public="1" set="null" static="1">
		<x path="flash.display.JointStyle"/>
		<meta><m n=":enum"/></meta>
	</MITER>
	<ROUND public="1" set="null" static="1">
		<x path="flash.display.JointStyle"/>
		<meta><m n=":enum"/></meta>
	</ROUND>
	<meta>
		<m n=":native"><e>"flash.display.JointStyle"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._JointStyle.JointStyle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/JointStyle.hx" private="1" module="flash.display.JointStyle" extern="1" final="1">
		<BEVEL public="1" set="null" static="1">
			<x path="flash.display.JointStyle"/>
			<meta><m n=":enum"/></meta>
		</BEVEL>
		<MITER public="1" set="null" static="1">
			<x path="flash.display.JointStyle"/>
			<meta><m n=":enum"/></meta>
		</MITER>
		<ROUND public="1" set="null" static="1">
			<x path="flash.display.JointStyle"/>
			<meta><m n=":enum"/></meta>
		</ROUND>
		<meta>
			<m n=":native"><e>"flash.display.JointStyle"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.LineScaleMode" params="" file="/home/runner/work/haxe/haxe/std/flash/display/LineScaleMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.LineScaleMode"</e></m>
		</meta>
		<impl><class path="flash.display._LineScaleMode.LineScaleMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/LineScaleMode.hx" private="1" module="flash.display.LineScaleMode" extern="1" final="1">
	<HORIZONTAL public="1" set="null" static="1">
		<x path="flash.display.LineScaleMode"/>
		<meta><m n=":enum"/></meta>
	</HORIZONTAL>
	<NONE public="1" set="null" static="1">
		<x path="flash.display.LineScaleMode"/>
		<meta><m n=":enum"/></meta>
	</NONE>
	<NORMAL public="1" set="null" static="1">
		<x path="flash.display.LineScaleMode"/>
		<meta><m n=":enum"/></meta>
	</NORMAL>
	<VERTICAL public="1" set="null" static="1">
		<x path="flash.display.LineScaleMode"/>
		<meta><m n=":enum"/></meta>
	</VERTICAL>
	<meta>
		<m n=":native"><e>"flash.display.LineScaleMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._LineScaleMode.LineScaleMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/LineScaleMode.hx" private="1" module="flash.display.LineScaleMode" extern="1" final="1">
		<HORIZONTAL public="1" set="null" static="1">
			<x path="flash.display.LineScaleMode"/>
			<meta><m n=":enum"/></meta>
		</HORIZONTAL>
		<NONE public="1" set="null" static="1">
			<x path="flash.display.LineScaleMode"/>
			<meta><m n=":enum"/></meta>
		</NONE>
		<NORMAL public="1" set="null" static="1">
			<x path="flash.display.LineScaleMode"/>
			<meta><m n=":enum"/></meta>
		</NORMAL>
		<VERTICAL public="1" set="null" static="1">
			<x path="flash.display.LineScaleMode"/>
			<meta><m n=":enum"/></meta>
		</VERTICAL>
		<meta>
			<m n=":native"><e>"flash.display.LineScaleMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.LoaderInfo" params="" file="/home/runner/work/haxe/haxe/std/flash/display/LoaderInfo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<getLoaderInfoByDefinition public="1" set="method" static="1"><f a="object">
	<d/>
	<c path="flash.display.LoaderInfo"/>
</f></getLoaderInfoByDefinition>
		<actionScriptVersion public="1" get="accessor" set="null">
			<x path="flash.display.ActionScriptVersion"/>
			<meta><m n=":flash.property"/></meta>
		</actionScriptVersion>
		<applicationDomain public="1" get="accessor" set="null">
			<c path="flash.system.ApplicationDomain"/>
			<meta><m n=":flash.property"/></meta>
		</applicationDomain>
		<bytes public="1" get="accessor" set="null">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":flash.property"/></meta>
		</bytes>
		<bytesLoaded public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesLoaded>
		<bytesTotal public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesTotal>
		<childAllowsParent public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</childAllowsParent>
		<childSandboxBridge public="1" get="accessor" set="accessor">
			<d/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</childSandboxBridge>
		<content public="1" get="accessor" set="null">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</content>
		<contentType public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</contentType>
		<frameRate public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</frameRate>
		<height public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</height>
		<isURLInaccessible public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</isURLInaccessible>
		<loader public="1" get="accessor" set="null">
			<c path="flash.display.Loader"/>
			<meta><m n=":flash.property"/></meta>
		</loader>
		<loaderURL public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</loaderURL>
		<parameters public="1" get="accessor" set="null">
			<d><c path="String"/></d>
			<meta><m n=":flash.property"/></meta>
		</parameters>
		<parentAllowsChild public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</parentAllowsChild>
		<parentSandboxBridge public="1" get="accessor" set="accessor">
			<d/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</parentSandboxBridge>
		<sameDomain public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</sameDomain>
		<sharedEvents public="1" get="accessor" set="null">
			<c path="flash.events.EventDispatcher"/>
			<meta><m n=":flash.property"/></meta>
		</sharedEvents>
		<swfVersion public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</swfVersion>
		<uncaughtErrorEvents public="1" get="accessor" set="null">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</uncaughtErrorEvents>
		<url public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</url>
		<width public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</width>
		<get_actionScriptVersion set="method"><f a=""><x path="flash.display.ActionScriptVersion"/></f></get_actionScriptVersion>
		<get_applicationDomain set="method"><f a=""><c path="flash.system.ApplicationDomain"/></f></get_applicationDomain>
		<get_bytes set="method"><f a=""><c path="flash.utils.ByteArray"/></f></get_bytes>
		<get_bytesLoaded set="method"><f a=""><x path="UInt"/></f></get_bytesLoaded>
		<get_bytesTotal set="method"><f a=""><x path="UInt"/></f></get_bytesTotal>
		<get_childAllowsParent set="method"><f a=""><x path="Bool"/></f></get_childAllowsParent>
		<get_childSandboxBridge set="method"><f a=""><d/></f></get_childSandboxBridge>
		<get_content set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_content>
		<get_contentType set="method"><f a=""><c path="String"/></f></get_contentType>
		<get_frameRate set="method"><f a=""><x path="Float"/></f></get_frameRate>
		<get_height set="method"><f a=""><x path="Int"/></f></get_height>
		<get_isURLInaccessible set="method"><f a=""><x path="Bool"/></f></get_isURLInaccessible>
		<get_loader set="method"><f a=""><c path="flash.display.Loader"/></f></get_loader>
		<get_loaderURL set="method"><f a=""><c path="String"/></f></get_loaderURL>
		<get_parameters set="method"><f a=""><d><c path="String"/></d></f></get_parameters>
		<get_parentAllowsChild set="method"><f a=""><x path="Bool"/></f></get_parentAllowsChild>
		<get_parentSandboxBridge set="method"><f a=""><d/></f></get_parentSandboxBridge>
		<get_sameDomain set="method"><f a=""><x path="Bool"/></f></get_sameDomain>
		<get_sharedEvents set="method"><f a=""><c path="flash.events.EventDispatcher"/></f></get_sharedEvents>
		<get_swfVersion set="method"><f a=""><x path="UInt"/></f></get_swfVersion>
		<get_uncaughtErrorEvents set="method"><f a=""><c path="flash.events.UncaughtErrorEvents"/></f></get_uncaughtErrorEvents>
		<get_url set="method"><f a=""><c path="String"/></f></get_url>
		<get_width set="method"><f a=""><x path="Int"/></f></get_width>
		<set_childSandboxBridge set="method"><f a="value">
	<d/>
	<d/>
</f></set_childSandboxBridge>
		<set_parentSandboxBridge set="method"><f a="value">
	<d/>
	<d/>
</f></set_parentSandboxBridge>
	</class>
	<class path="flash.display.MorphShape" params="" file="/home/runner/work/haxe/haxe/std/flash/display/MorphShape.hx" extern="1"><extends path="flash.display.DisplayObject"/></class>
	<class path="flash.display.NativeMenu" params="" file="/home/runner/work/haxe/haxe/std/flash/display/NativeMenu.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.display.NativeMenuItem" params="" file="/home/runner/work/haxe/haxe/std/flash/display/NativeMenuItem.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<enabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</enabled>
		<get_enabled set="method"><f a=""><x path="Bool"/></f></get_enabled>
		<set_enabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enabled>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.display.PNGCompressOptions" params="" file="/home/runner/work/haxe/haxe/std/flash/display/PNGCompressOptions.hx" extern="1">
		<implements path="flash.display.IBitmapCompressOptions"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.PNGEncoderOptions" params="" file="/home/runner/work/haxe/haxe/std/flash/display/PNGEncoderOptions.hx" extern="1" final="1">
		<fastCompression public="1"><x path="Bool"/></fastCompression>
		<new public="1" set="method">
			<f a="?fastCompression" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ fastCompression : false }</e></m></meta>
		</new>
	</class>
	<abstract path="flash.display.PixelSnapping" params="" file="/home/runner/work/haxe/haxe/std/flash/display/PixelSnapping.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.PixelSnapping"</e></m>
		</meta>
		<impl><class path="flash.display._PixelSnapping.PixelSnapping_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/PixelSnapping.hx" private="1" module="flash.display.PixelSnapping" extern="1" final="1">
	<ALWAYS public="1" set="null" static="1">
		<x path="flash.display.PixelSnapping"/>
		<meta><m n=":enum"/></meta>
	</ALWAYS>
	<AUTO public="1" set="null" static="1">
		<x path="flash.display.PixelSnapping"/>
		<meta><m n=":enum"/></meta>
	</AUTO>
	<NEVER public="1" set="null" static="1">
		<x path="flash.display.PixelSnapping"/>
		<meta><m n=":enum"/></meta>
	</NEVER>
	<meta>
		<m n=":native"><e>"flash.display.PixelSnapping"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._PixelSnapping.PixelSnapping_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/PixelSnapping.hx" private="1" module="flash.display.PixelSnapping" extern="1" final="1">
		<ALWAYS public="1" set="null" static="1">
			<x path="flash.display.PixelSnapping"/>
			<meta><m n=":enum"/></meta>
		</ALWAYS>
		<AUTO public="1" set="null" static="1">
			<x path="flash.display.PixelSnapping"/>
			<meta><m n=":enum"/></meta>
		</AUTO>
		<NEVER public="1" set="null" static="1">
			<x path="flash.display.PixelSnapping"/>
			<meta><m n=":enum"/></meta>
		</NEVER>
		<meta>
			<m n=":native"><e>"flash.display.PixelSnapping"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.SWFVersion" params="" file="/home/runner/work/haxe/haxe/std/flash/display/SWFVersion.hx" extern="1">
		<FLASH1 final="1" public="1" set="null" static="1"><x path="UInt"/></FLASH1>
		<FLASH10 final="1" public="1" set="null" static="1"><x path="UInt"/></FLASH10>
		<FLASH11 final="1" public="1" set="null" static="1"><x path="UInt"/></FLASH11>
		<FLASH12 final="1" public="1" set="null" static="1"><x path="UInt"/></FLASH12>
		<FLASH2 final="1" public="1" set="null" static="1"><x path="UInt"/></FLASH2>
		<FLASH3 final="1" public="1" set="null" static="1"><x path="UInt"/></FLASH3>
		<FLASH4 final="1" public="1" set="null" static="1"><x path="UInt"/></FLASH4>
		<FLASH5 final="1" public="1" set="null" static="1"><x path="UInt"/></FLASH5>
		<FLASH6 final="1" public="1" set="null" static="1"><x path="UInt"/></FLASH6>
		<FLASH7 final="1" public="1" set="null" static="1"><x path="UInt"/></FLASH7>
		<FLASH8 final="1" public="1" set="null" static="1"><x path="UInt"/></FLASH8>
		<FLASH9 final="1" public="1" set="null" static="1"><x path="UInt"/></FLASH9>
	</class>
	<class path="flash.display.Scene" params="" file="/home/runner/work/haxe/haxe/std/flash/display/Scene.hx" extern="1" final="1">
		<labels public="1" get="accessor" set="null">
			<c path="Array"><c path="flash.display.FrameLabel"/></c>
			<meta><m n=":flash.property"/></meta>
		</labels>
		<name public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</name>
		<numFrames public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</numFrames>
		<get_labels set="method"><f a=""><c path="Array"><c path="flash.display.FrameLabel"/></c></f></get_labels>
		<get_name set="method"><f a=""><c path="String"/></f></get_name>
		<get_numFrames set="method"><f a=""><x path="Int"/></f></get_numFrames>
		<new public="1" set="method"><f a="name:labels:numFrames">
	<c path="String"/>
	<c path="Array"><c path="flash.display.FrameLabel"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.Shader" params="" file="/home/runner/work/haxe/haxe/std/flash/display/Shader.hx" extern="1">
		<byteCode public="1" get="null" set="accessor">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":flash.property"/></meta>
		</byteCode>
		<data public="1" get="accessor" set="accessor">
			<c path="flash.display.ShaderData"/>
			<meta><m n=":flash.property"/></meta>
		</data>
		<precisionHint public="1" get="accessor" set="accessor">
			<x path="flash.display.ShaderPrecision"/>
			<meta><m n=":flash.property"/></meta>
		</precisionHint>
		<get_data set="method"><f a=""><c path="flash.display.ShaderData"/></f></get_data>
		<get_precisionHint set="method"><f a=""><x path="flash.display.ShaderPrecision"/></f></get_precisionHint>
		<set_byteCode set="method"><f a="value">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
</f></set_byteCode>
		<set_data set="method"><f a="value">
	<c path="flash.display.ShaderData"/>
	<c path="flash.display.ShaderData"/>
</f></set_data>
		<set_precisionHint set="method"><f a="value">
	<x path="flash.display.ShaderPrecision"/>
	<x path="flash.display.ShaderPrecision"/>
</f></set_precisionHint>
		<new public="1" set="method"><f a="?code">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.display.ShaderData" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ShaderData.hx" extern="1"><new public="1" set="method"><f a="byteCode">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new></class>
	<class path="flash.display.ShaderInput" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ShaderInput.hx" extern="1" final="1">
		<channels public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</channels>
		<height public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</height>
		<index public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</index>
		<input public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</input>
		<width public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</width>
		<get_channels set="method"><f a=""><x path="Int"/></f></get_channels>
		<get_height set="method"><f a=""><x path="Int"/></f></get_height>
		<get_index set="method"><f a=""><x path="Int"/></f></get_index>
		<get_input set="method"><f a=""><d/></f></get_input>
		<get_width set="method"><f a=""><x path="Int"/></f></get_width>
		<set_height set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_height>
		<set_input set="method"><f a="value">
	<d/>
	<d/>
</f></set_input>
		<set_width set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_width>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.ShaderJob" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ShaderJob.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<height public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</height>
		<progress public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</progress>
		<shader public="1" get="accessor" set="accessor">
			<c path="flash.display.Shader"/>
			<meta><m n=":flash.property"/></meta>
		</shader>
		<target public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</target>
		<width public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</width>
		<cancel public="1" set="method"><f a=""><x path="Void"/></f></cancel>
		<get_height set="method"><f a=""><x path="Int"/></f></get_height>
		<get_progress set="method"><f a=""><x path="Float"/></f></get_progress>
		<get_shader set="method"><f a=""><c path="flash.display.Shader"/></f></get_shader>
		<get_target set="method"><f a=""><d/></f></get_target>
		<get_width set="method"><f a=""><x path="Int"/></f></get_width>
		<set_height set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_height>
		<set_shader set="method"><f a="value">
	<c path="flash.display.Shader"/>
	<c path="flash.display.Shader"/>
</f></set_shader>
		<set_target set="method"><f a="value">
	<d/>
	<d/>
</f></set_target>
		<set_width set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_width>
		<start public="1" set="method">
			<f a="?waitForCompletion" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ waitForCompletion : false }</e></m></meta>
		</start>
		<new public="1" set="method">
			<f a="?shader:?target:?width:?height" v="::0:0">
				<c path="flash.display.Shader"/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0, width : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.display.ShaderParameter" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ShaderParameter.hx" extern="1" final="1">
		<index public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</index>
		<type public="1" get="accessor" set="null">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":flash.property"/></meta>
		</type>
		<value public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</value>
		<get_index set="method"><f a=""><x path="Int"/></f></get_index>
		<get_type set="method"><f a=""><x path="flash.display.ShaderParameterType"/></f></get_type>
		<get_value set="method"><f a=""><c path="Array"><d/></c></f></get_value>
		<set_value set="method"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_value>
	</class>
	<abstract path="flash.display.ShaderParameterType" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ShaderParameterType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.ShaderParameterType"</e></m>
		</meta>
		<impl><class path="flash.display._ShaderParameterType.ShaderParameterType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ShaderParameterType.hx" private="1" module="flash.display.ShaderParameterType" extern="1" final="1">
	<BOOL public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</BOOL>
	<BOOL2 public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</BOOL2>
	<BOOL3 public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</BOOL3>
	<BOOL4 public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</BOOL4>
	<FLOAT public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</FLOAT>
	<FLOAT2 public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</FLOAT2>
	<FLOAT3 public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</FLOAT3>
	<FLOAT4 public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</FLOAT4>
	<INT public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</INT>
	<INT2 public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</INT2>
	<INT3 public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</INT3>
	<INT4 public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</INT4>
	<MATRIX2X2 public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</MATRIX2X2>
	<MATRIX3X3 public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</MATRIX3X3>
	<MATRIX4X4 public="1" set="null" static="1">
		<x path="flash.display.ShaderParameterType"/>
		<meta><m n=":enum"/></meta>
	</MATRIX4X4>
	<meta>
		<m n=":native"><e>"flash.display.ShaderParameterType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._ShaderParameterType.ShaderParameterType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ShaderParameterType.hx" private="1" module="flash.display.ShaderParameterType" extern="1" final="1">
		<BOOL public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</BOOL>
		<BOOL2 public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</BOOL2>
		<BOOL3 public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</BOOL3>
		<BOOL4 public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</BOOL4>
		<FLOAT public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</FLOAT>
		<FLOAT2 public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</FLOAT2>
		<FLOAT3 public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</FLOAT3>
		<FLOAT4 public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</FLOAT4>
		<INT public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</INT>
		<INT2 public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</INT2>
		<INT3 public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</INT3>
		<INT4 public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</INT4>
		<MATRIX2X2 public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</MATRIX2X2>
		<MATRIX3X3 public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</MATRIX3X3>
		<MATRIX4X4 public="1" set="null" static="1">
			<x path="flash.display.ShaderParameterType"/>
			<meta><m n=":enum"/></meta>
		</MATRIX4X4>
		<meta>
			<m n=":native"><e>"flash.display.ShaderParameterType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.ShaderPrecision" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ShaderPrecision.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.ShaderPrecision"</e></m>
		</meta>
		<impl><class path="flash.display._ShaderPrecision.ShaderPrecision_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ShaderPrecision.hx" private="1" module="flash.display.ShaderPrecision" extern="1" final="1">
	<FAST public="1" set="null" static="1">
		<x path="flash.display.ShaderPrecision"/>
		<meta><m n=":enum"/></meta>
	</FAST>
	<FULL public="1" set="null" static="1">
		<x path="flash.display.ShaderPrecision"/>
		<meta><m n=":enum"/></meta>
	</FULL>
	<meta>
		<m n=":native"><e>"flash.display.ShaderPrecision"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._ShaderPrecision.ShaderPrecision_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/ShaderPrecision.hx" private="1" module="flash.display.ShaderPrecision" extern="1" final="1">
		<FAST public="1" set="null" static="1">
			<x path="flash.display.ShaderPrecision"/>
			<meta><m n=":enum"/></meta>
		</FAST>
		<FULL public="1" set="null" static="1">
			<x path="flash.display.ShaderPrecision"/>
			<meta><m n=":enum"/></meta>
		</FULL>
		<meta>
			<m n=":native"><e>"flash.display.ShaderPrecision"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.Shape" params="" file="/home/runner/work/haxe/haxe/std/flash/display/Shape.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<graphics public="1" get="accessor" set="null">
			<c path="flash.display.Graphics"/>
			<meta><m n=":flash.property"/></meta>
		</graphics>
		<get_graphics set="method"><f a=""><c path="flash.display.Graphics"/></f></get_graphics>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.SimpleButton" params="" file="/home/runner/work/haxe/haxe/std/flash/display/SimpleButton.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<downState public="1" get="accessor" set="accessor">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</downState>
		<enabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</enabled>
		<hitTestState public="1" get="accessor" set="accessor">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</hitTestState>
		<overState public="1" get="accessor" set="accessor">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</overState>
		<soundTransform public="1" get="accessor" set="accessor">
			<c path="flash.media.SoundTransform"/>
			<meta><m n=":flash.property"/></meta>
		</soundTransform>
		<trackAsMenu public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</trackAsMenu>
		<upState public="1" get="accessor" set="accessor">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</upState>
		<useHandCursor public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</useHandCursor>
		<get_downState set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_downState>
		<get_enabled set="method"><f a=""><x path="Bool"/></f></get_enabled>
		<get_hitTestState set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_hitTestState>
		<get_overState set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_overState>
		<get_soundTransform set="method"><f a=""><c path="flash.media.SoundTransform"/></f></get_soundTransform>
		<get_trackAsMenu set="method"><f a=""><x path="Bool"/></f></get_trackAsMenu>
		<get_upState set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_upState>
		<get_useHandCursor set="method"><f a=""><x path="Bool"/></f></get_useHandCursor>
		<set_downState set="method"><f a="value">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></set_downState>
		<set_enabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enabled>
		<set_hitTestState set="method"><f a="value">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></set_hitTestState>
		<set_overState set="method"><f a="value">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></set_overState>
		<set_soundTransform set="method"><f a="value">
	<c path="flash.media.SoundTransform"/>
	<c path="flash.media.SoundTransform"/>
</f></set_soundTransform>
		<set_trackAsMenu set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_trackAsMenu>
		<set_upState set="method"><f a="value">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></set_upState>
		<set_useHandCursor set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useHandCursor>
		<new public="1" set="method"><f a="?upState:?overState:?downState:?hitTestState">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="flash.display.SpreadMethod" params="" file="/home/runner/work/haxe/haxe/std/flash/display/SpreadMethod.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.SpreadMethod"</e></m>
		</meta>
		<impl><class path="flash.display._SpreadMethod.SpreadMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/SpreadMethod.hx" private="1" module="flash.display.SpreadMethod" extern="1" final="1">
	<PAD public="1" set="null" static="1">
		<x path="flash.display.SpreadMethod"/>
		<meta><m n=":enum"/></meta>
	</PAD>
	<REFLECT public="1" set="null" static="1">
		<x path="flash.display.SpreadMethod"/>
		<meta><m n=":enum"/></meta>
	</REFLECT>
	<REPEAT public="1" set="null" static="1">
		<x path="flash.display.SpreadMethod"/>
		<meta><m n=":enum"/></meta>
	</REPEAT>
	<meta>
		<m n=":native"><e>"flash.display.SpreadMethod"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._SpreadMethod.SpreadMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/SpreadMethod.hx" private="1" module="flash.display.SpreadMethod" extern="1" final="1">
		<PAD public="1" set="null" static="1">
			<x path="flash.display.SpreadMethod"/>
			<meta><m n=":enum"/></meta>
		</PAD>
		<REFLECT public="1" set="null" static="1">
			<x path="flash.display.SpreadMethod"/>
			<meta><m n=":enum"/></meta>
		</REFLECT>
		<REPEAT public="1" set="null" static="1">
			<x path="flash.display.SpreadMethod"/>
			<meta><m n=":enum"/></meta>
		</REPEAT>
		<meta>
			<m n=":native"><e>"flash.display.SpreadMethod"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.Stage" params="" file="/home/runner/work/haxe/haxe/std/flash/display/Stage.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<align public="1" get="accessor" set="accessor">
			<x path="flash.display.StageAlign"/>
			<meta><m n=":flash.property"/></meta>
		</align>
		<allowsFullScreen public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</allowsFullScreen>
		<allowsFullScreenInteractive public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_3</e></m>
			</meta>
		</allowsFullScreenInteractive>
		<browserZoomFactor public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</browserZoomFactor>
		<color public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_2</e></m>
			</meta>
		</color>
		<colorCorrection public="1" get="accessor" set="accessor">
			<x path="flash.display.ColorCorrection"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</colorCorrection>
		<colorCorrectionSupport public="1" get="accessor" set="null">
			<x path="flash.display.ColorCorrectionSupport"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</colorCorrectionSupport>
		<contentsScaleFactor public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</contentsScaleFactor>
		<displayContextInfo public="1" get="accessor" set="null">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</displayContextInfo>
		<displayState public="1" get="accessor" set="accessor">
			<x path="flash.display.StageDisplayState"/>
			<meta><m n=":flash.property"/></meta>
		</displayState>
		<focus public="1" get="accessor" set="accessor">
			<c path="flash.display.InteractiveObject"/>
			<meta><m n=":flash.property"/></meta>
		</focus>
		<frameRate public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</frameRate>
		<fullScreenHeight public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</fullScreenHeight>
		<fullScreenSourceRect public="1" get="accessor" set="accessor">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</fullScreenSourceRect>
		<fullScreenWidth public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</fullScreenWidth>
		<mouseLock public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_2</e></m>
			</meta>
		</mouseLock>
		<quality public="1" get="accessor" set="accessor">
			<x path="flash.display.StageQuality"/>
			<meta><m n=":flash.property"/></meta>
		</quality>
		<scaleMode public="1" get="accessor" set="accessor">
			<x path="flash.display.StageScaleMode"/>
			<meta><m n=":flash.property"/></meta>
		</scaleMode>
		<showDefaultContextMenu public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</showDefaultContextMenu>
		<softKeyboardRect public="1" get="accessor" set="null">
			<c path="flash.geom.Rectangle"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</softKeyboardRect>
		<stage3Ds public="1" get="accessor" set="null">
			<c path="flash.Vector"><c path="flash.display.Stage3D"/></c>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</stage3Ds>
		<stageFocusRect public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</stageFocusRect>
		<stageHeight public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</stageHeight>
		<stageVideos public="1" get="accessor" set="null">
			<c path="flash.Vector"><c path="flash.media.StageVideo"/></c>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_2</e></m>
			</meta>
		</stageVideos>
		<stageWidth public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</stageWidth>
		<wmodeGPU public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</wmodeGPU>
		<get_align set="method"><f a=""><x path="flash.display.StageAlign"/></f></get_align>
		<get_allowsFullScreen set="method"><f a=""><x path="Bool"/></f></get_allowsFullScreen>
		<get_allowsFullScreenInteractive set="method"><f a=""><x path="Bool"/></f></get_allowsFullScreenInteractive>
		<get_browserZoomFactor set="method"><f a=""><x path="Float"/></f></get_browserZoomFactor>
		<get_color set="method"><f a=""><x path="UInt"/></f></get_color>
		<get_colorCorrection set="method"><f a=""><x path="flash.display.ColorCorrection"/></f></get_colorCorrection>
		<get_colorCorrectionSupport set="method"><f a=""><x path="flash.display.ColorCorrectionSupport"/></f></get_colorCorrectionSupport>
		<get_constructor set="method"><f a=""><d/></f></get_constructor>
		<get_contentsScaleFactor set="method"><f a=""><x path="Float"/></f></get_contentsScaleFactor>
		<get_displayContextInfo set="method"><f a=""><c path="String"/></f></get_displayContextInfo>
		<get_displayState set="method"><f a=""><x path="flash.display.StageDisplayState"/></f></get_displayState>
		<get_focus set="method"><f a=""><c path="flash.display.InteractiveObject"/></f></get_focus>
		<get_frameRate set="method"><f a=""><x path="Float"/></f></get_frameRate>
		<get_fullScreenHeight set="method"><f a=""><x path="UInt"/></f></get_fullScreenHeight>
		<get_fullScreenSourceRect set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_fullScreenSourceRect>
		<get_fullScreenWidth set="method"><f a=""><x path="UInt"/></f></get_fullScreenWidth>
		<get_mouseLock set="method"><f a=""><x path="Bool"/></f></get_mouseLock>
		<get_quality set="method"><f a=""><x path="flash.display.StageQuality"/></f></get_quality>
		<get_scaleMode set="method"><f a=""><x path="flash.display.StageScaleMode"/></f></get_scaleMode>
		<get_showDefaultContextMenu set="method"><f a=""><x path="Bool"/></f></get_showDefaultContextMenu>
		<get_softKeyboardRect set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_softKeyboardRect>
		<get_stage3Ds set="method"><f a=""><c path="flash.Vector"><c path="flash.display.Stage3D"/></c></f></get_stage3Ds>
		<get_stageFocusRect set="method"><f a=""><x path="Bool"/></f></get_stageFocusRect>
		<get_stageHeight set="method"><f a=""><x path="Int"/></f></get_stageHeight>
		<get_stageVideos set="method"><f a=""><c path="flash.Vector"><c path="flash.media.StageVideo"/></c></f></get_stageVideos>
		<get_stageWidth set="method"><f a=""><x path="Int"/></f></get_stageWidth>
		<get_wmodeGPU set="method"><f a=""><x path="Bool"/></f></get_wmodeGPU>
		<invalidate public="1" set="method"><f a=""><x path="Void"/></f></invalidate>
		<isFocusInaccessible public="1" set="method"><f a=""><x path="Bool"/></f></isFocusInaccessible>
		<set_align set="method"><f a="value">
	<x path="flash.display.StageAlign"/>
	<x path="flash.display.StageAlign"/>
</f></set_align>
		<set_color set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_color>
		<set_colorCorrection set="method"><f a="value">
	<x path="flash.display.ColorCorrection"/>
	<x path="flash.display.ColorCorrection"/>
</f></set_colorCorrection>
		<set_constructor set="method"><f a="value">
	<d/>
	<d/>
</f></set_constructor>
		<set_displayState set="method"><f a="value">
	<x path="flash.display.StageDisplayState"/>
	<x path="flash.display.StageDisplayState"/>
</f></set_displayState>
		<set_focus set="method"><f a="value">
	<c path="flash.display.InteractiveObject"/>
	<c path="flash.display.InteractiveObject"/>
</f></set_focus>
		<set_frameRate set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_frameRate>
		<set_fullScreenSourceRect set="method"><f a="value">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></set_fullScreenSourceRect>
		<set_mouseLock set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_mouseLock>
		<set_quality set="method"><f a="value">
	<x path="flash.display.StageQuality"/>
	<x path="flash.display.StageQuality"/>
</f></set_quality>
		<set_scaleMode set="method"><f a="value">
	<x path="flash.display.StageScaleMode"/>
	<x path="flash.display.StageScaleMode"/>
</f></set_scaleMode>
		<set_showDefaultContextMenu set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_showDefaultContextMenu>
		<set_stageFocusRect set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_stageFocusRect>
		<set_stageHeight set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_stageHeight>
		<set_stageWidth set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_stageWidth>
	</class>
	<class path="flash.display.Stage3D" params="" file="/home/runner/work/haxe/haxe/std/flash/display/Stage3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<context3D public="1" get="accessor" set="null">
			<c path="flash.display3D.Context3D"/>
			<meta><m n=":flash.property"/></meta>
		</context3D>
		<visible public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</visible>
		<x public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</x>
		<y public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</y>
		<get_context3D set="method"><f a=""><c path="flash.display3D.Context3D"/></f></get_context3D>
		<get_visible set="method"><f a=""><x path="Bool"/></f></get_visible>
		<get_x set="method"><f a=""><x path="Float"/></f></get_x>
		<get_y set="method"><f a=""><x path="Float"/></f></get_y>
		<requestContext3D public="1" set="method"><f a="?context3DRenderMode:?profile">
	<c path="String"/>
	<x path="flash.display3D.Context3DProfile"/>
	<x path="Void"/>
</f></requestContext3D>
		<requestContext3DMatchingProfiles public="1">
			<f a="profiles">
				<c path="flash.Vector"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash12</e></m></meta>
		</requestContext3DMatchingProfiles>
		<set_visible set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<set_x set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<meta><m n=":require"><e>flash11</e></m></meta>
	</class>
	<abstract path="flash.display.StageAlign" params="" file="/home/runner/work/haxe/haxe/std/flash/display/StageAlign.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.StageAlign"</e></m>
		</meta>
		<impl><class path="flash.display._StageAlign.StageAlign_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/StageAlign.hx" private="1" module="flash.display.StageAlign" extern="1" final="1">
	<BOTTOM public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta><m n=":enum"/></meta>
	</BOTTOM>
	<BOTTOM_LEFT public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta><m n=":enum"/></meta>
	</BOTTOM_LEFT>
	<BOTTOM_RIGHT public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta><m n=":enum"/></meta>
	</BOTTOM_RIGHT>
	<LEFT public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta><m n=":enum"/></meta>
	</LEFT>
	<RIGHT public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta><m n=":enum"/></meta>
	</RIGHT>
	<TOP public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta><m n=":enum"/></meta>
	</TOP>
	<TOP_LEFT public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta><m n=":enum"/></meta>
	</TOP_LEFT>
	<TOP_RIGHT public="1" set="null" static="1">
		<x path="flash.display.StageAlign"/>
		<meta><m n=":enum"/></meta>
	</TOP_RIGHT>
	<meta>
		<m n=":native"><e>"flash.display.StageAlign"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._StageAlign.StageAlign_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/StageAlign.hx" private="1" module="flash.display.StageAlign" extern="1" final="1">
		<BOTTOM public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta><m n=":enum"/></meta>
		</BOTTOM>
		<BOTTOM_LEFT public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta><m n=":enum"/></meta>
		</BOTTOM_LEFT>
		<BOTTOM_RIGHT public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta><m n=":enum"/></meta>
		</BOTTOM_RIGHT>
		<LEFT public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta><m n=":enum"/></meta>
		</LEFT>
		<RIGHT public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta><m n=":enum"/></meta>
		</RIGHT>
		<TOP public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta><m n=":enum"/></meta>
		</TOP>
		<TOP_LEFT public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta><m n=":enum"/></meta>
		</TOP_LEFT>
		<TOP_RIGHT public="1" set="null" static="1">
			<x path="flash.display.StageAlign"/>
			<meta><m n=":enum"/></meta>
		</TOP_RIGHT>
		<meta>
			<m n=":native"><e>"flash.display.StageAlign"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.StageDisplayState" params="" file="/home/runner/work/haxe/haxe/std/flash/display/StageDisplayState.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.StageDisplayState"</e></m>
		</meta>
		<impl><class path="flash.display._StageDisplayState.StageDisplayState_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/StageDisplayState.hx" private="1" module="flash.display.StageDisplayState" extern="1" final="1">
	<FULL_SCREEN public="1" set="null" static="1">
		<x path="flash.display.StageDisplayState"/>
		<meta><m n=":enum"/></meta>
	</FULL_SCREEN>
	<FULL_SCREEN_INTERACTIVE public="1" set="null" static="1">
		<x path="flash.display.StageDisplayState"/>
		<meta><m n=":enum"/></meta>
	</FULL_SCREEN_INTERACTIVE>
	<NORMAL public="1" set="null" static="1">
		<x path="flash.display.StageDisplayState"/>
		<meta><m n=":enum"/></meta>
	</NORMAL>
	<meta>
		<m n=":native"><e>"flash.display.StageDisplayState"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._StageDisplayState.StageDisplayState_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/StageDisplayState.hx" private="1" module="flash.display.StageDisplayState" extern="1" final="1">
		<FULL_SCREEN public="1" set="null" static="1">
			<x path="flash.display.StageDisplayState"/>
			<meta><m n=":enum"/></meta>
		</FULL_SCREEN>
		<FULL_SCREEN_INTERACTIVE public="1" set="null" static="1">
			<x path="flash.display.StageDisplayState"/>
			<meta><m n=":enum"/></meta>
		</FULL_SCREEN_INTERACTIVE>
		<NORMAL public="1" set="null" static="1">
			<x path="flash.display.StageDisplayState"/>
			<meta><m n=":enum"/></meta>
		</NORMAL>
		<meta>
			<m n=":native"><e>"flash.display.StageDisplayState"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.StageQuality" params="" file="/home/runner/work/haxe/haxe/std/flash/display/StageQuality.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.StageQuality"</e></m>
		</meta>
		<impl><class path="flash.display._StageQuality.StageQuality_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/StageQuality.hx" private="1" module="flash.display.StageQuality" extern="1" final="1">
	<BEST public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta><m n=":enum"/></meta>
	</BEST>
	<HIGH public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta><m n=":enum"/></meta>
	</HIGH>
	<HIGH_16X16 public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta><m n=":enum"/></meta>
	</HIGH_16X16>
	<HIGH_16X16_LINEAR public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta><m n=":enum"/></meta>
	</HIGH_16X16_LINEAR>
	<HIGH_8X8 public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta><m n=":enum"/></meta>
	</HIGH_8X8>
	<HIGH_8X8_LINEAR public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta><m n=":enum"/></meta>
	</HIGH_8X8_LINEAR>
	<LOW public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta><m n=":enum"/></meta>
	</LOW>
	<MEDIUM public="1" set="null" static="1">
		<x path="flash.display.StageQuality"/>
		<meta><m n=":enum"/></meta>
	</MEDIUM>
	<meta>
		<m n=":native"><e>"flash.display.StageQuality"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._StageQuality.StageQuality_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/StageQuality.hx" private="1" module="flash.display.StageQuality" extern="1" final="1">
		<BEST public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta><m n=":enum"/></meta>
		</BEST>
		<HIGH public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta><m n=":enum"/></meta>
		</HIGH>
		<HIGH_16X16 public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta><m n=":enum"/></meta>
		</HIGH_16X16>
		<HIGH_16X16_LINEAR public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta><m n=":enum"/></meta>
		</HIGH_16X16_LINEAR>
		<HIGH_8X8 public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta><m n=":enum"/></meta>
		</HIGH_8X8>
		<HIGH_8X8_LINEAR public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta><m n=":enum"/></meta>
		</HIGH_8X8_LINEAR>
		<LOW public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta><m n=":enum"/></meta>
		</LOW>
		<MEDIUM public="1" set="null" static="1">
			<x path="flash.display.StageQuality"/>
			<meta><m n=":enum"/></meta>
		</MEDIUM>
		<meta>
			<m n=":native"><e>"flash.display.StageQuality"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display.StageScaleMode" params="" file="/home/runner/work/haxe/haxe/std/flash/display/StageScaleMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.StageScaleMode"</e></m>
		</meta>
		<impl><class path="flash.display._StageScaleMode.StageScaleMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/StageScaleMode.hx" private="1" module="flash.display.StageScaleMode" extern="1" final="1">
	<EXACT_FIT public="1" set="null" static="1">
		<x path="flash.display.StageScaleMode"/>
		<meta><m n=":enum"/></meta>
	</EXACT_FIT>
	<NO_BORDER public="1" set="null" static="1">
		<x path="flash.display.StageScaleMode"/>
		<meta><m n=":enum"/></meta>
	</NO_BORDER>
	<NO_SCALE public="1" set="null" static="1">
		<x path="flash.display.StageScaleMode"/>
		<meta><m n=":enum"/></meta>
	</NO_SCALE>
	<SHOW_ALL public="1" set="null" static="1">
		<x path="flash.display.StageScaleMode"/>
		<meta><m n=":enum"/></meta>
	</SHOW_ALL>
	<meta>
		<m n=":native"><e>"flash.display.StageScaleMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._StageScaleMode.StageScaleMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/StageScaleMode.hx" private="1" module="flash.display.StageScaleMode" extern="1" final="1">
		<EXACT_FIT public="1" set="null" static="1">
			<x path="flash.display.StageScaleMode"/>
			<meta><m n=":enum"/></meta>
		</EXACT_FIT>
		<NO_BORDER public="1" set="null" static="1">
			<x path="flash.display.StageScaleMode"/>
			<meta><m n=":enum"/></meta>
		</NO_BORDER>
		<NO_SCALE public="1" set="null" static="1">
			<x path="flash.display.StageScaleMode"/>
			<meta><m n=":enum"/></meta>
		</NO_SCALE>
		<SHOW_ALL public="1" set="null" static="1">
			<x path="flash.display.StageScaleMode"/>
			<meta><m n=":enum"/></meta>
		</SHOW_ALL>
		<meta>
			<m n=":native"><e>"flash.display.StageScaleMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.StageWorker" params="" file="/home/runner/work/haxe/haxe/std/flash/display/StageWorker.hx" extern="1" final="1">
		<extends path="flash.display.Sprite"/>
		<scaleMode public="1"><c path="String"/></scaleMode>
		<viewport public="1"><c path="flash.geom.Rectangle"/></viewport>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash11_2</e></m></meta>
	</class>
	<abstract path="flash.display.TriangleCulling" params="" file="/home/runner/work/haxe/haxe/std/flash/display/TriangleCulling.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display.TriangleCulling"</e></m>
		</meta>
		<impl><class path="flash.display._TriangleCulling.TriangleCulling_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/TriangleCulling.hx" private="1" module="flash.display.TriangleCulling" extern="1" final="1">
	<NEGATIVE public="1" set="null" static="1">
		<x path="flash.display.TriangleCulling"/>
		<meta><m n=":enum"/></meta>
	</NEGATIVE>
	<NONE public="1" set="null" static="1">
		<x path="flash.display.TriangleCulling"/>
		<meta><m n=":enum"/></meta>
	</NONE>
	<POSITIVE public="1" set="null" static="1">
		<x path="flash.display.TriangleCulling"/>
		<meta><m n=":enum"/></meta>
	</POSITIVE>
	<meta>
		<m n=":native"><e>"flash.display.TriangleCulling"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display._TriangleCulling.TriangleCulling_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display/TriangleCulling.hx" private="1" module="flash.display.TriangleCulling" extern="1" final="1">
		<NEGATIVE public="1" set="null" static="1">
			<x path="flash.display.TriangleCulling"/>
			<meta><m n=":enum"/></meta>
		</NEGATIVE>
		<NONE public="1" set="null" static="1">
			<x path="flash.display.TriangleCulling"/>
			<meta><m n=":enum"/></meta>
		</NONE>
		<POSITIVE public="1" set="null" static="1">
			<x path="flash.display.TriangleCulling"/>
			<meta><m n=":enum"/></meta>
		</POSITIVE>
		<meta>
			<m n=":native"><e>"flash.display.TriangleCulling"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display.Worker" params="" file="/home/runner/work/haxe/haxe/std/flash/display/Worker.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<running public="1" set="null"><x path="Bool"/></running>
		<view public="1" set="null"><c path="flash.display.StageWorker"/></view>
		<load public="1" set="method"><f a="request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></load>
		<unload public="1" set="method"><f a=""><x path="Void"/></f></unload>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash11_2</e></m></meta>
	</class>
	<class path="flash.display3D.Context3D" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3D.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<supportsVideoTexture public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</supportsVideoTexture>
		<get_supportsVideoTexture set="method" static="1"><f a=""><x path="Bool"/></f></get_supportsVideoTexture>
		<backBufferHeight public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</backBufferHeight>
		<backBufferWidth public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</backBufferWidth>
		<driverInfo public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</driverInfo>
		<enableErrorChecking public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</enableErrorChecking>
		<maxBackBufferHeight public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</maxBackBufferHeight>
		<maxBackBufferWidth public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</maxBackBufferWidth>
		<profile public="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash12</e></m>
			</meta>
		</profile>
		<totalGPUMemory public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</totalGPUMemory>
		<clear public="1" set="method">
			<f a="?red:?green:?blue:?alpha:?depth:?stencil:?mask" v="0:0:0:1:1:0:0xFFFFFFFF">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mask : 0xFFFFFFFF, stencil : 0, depth : 1, alpha : 1, blue : 0, green : 0, red : 0 }</e></m></meta>
		</clear>
		<configureBackBuffer public="1" set="method">
			<f a="width:height:antiAlias:?enableDepthAndStencil:?wantsBestResolution:?wantsBestResolutionOnBrowserZoom" v=":::true:false:false">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ wantsBestResolutionOnBrowserZoom : false, wantsBestResolution : false, enableDepthAndStencil : true }</e></m></meta>
		</configureBackBuffer>
		<createCubeTexture public="1" set="method">
			<f a="size:format:optimizeForRenderToTexture:?streamingLevels" v=":::0">
				<x path="Int"/>
				<x path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="flash.display3D.textures.CubeTexture"/>
			</f>
			<meta><m n=":value"><e>{ streamingLevels : 0 }</e></m></meta>
		</createCubeTexture>
		<createIndexBuffer public="1" set="method"><f a="numIndices:?bufferUsage">
	<x path="Int"/>
	<x path="flash.display3D.Context3DBufferUsage"/>
	<c path="flash.display3D.IndexBuffer3D"/>
</f></createIndexBuffer>
		<createProgram public="1" set="method"><f a=""><c path="flash.display3D.Program3D"/></f></createProgram>
		<createRectangleTexture public="1">
			<f a="width:height:format:optimizeForRenderToTexture">
				<x path="Int"/>
				<x path="Int"/>
				<x path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<c path="flash.display3D.textures.RectangleTexture"/>
			</f>
			<meta><m n=":require"><e>flash11_8</e></m></meta>
		</createRectangleTexture>
		<createTexture public="1" set="method">
			<f a="width:height:format:optimizeForRenderToTexture:?streamingLevels" v="::::0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="flash.display3D.textures.Texture"/>
			</f>
			<meta><m n=":value"><e>{ streamingLevels : 0 }</e></m></meta>
		</createTexture>
		<createVertexBuffer public="1" set="method"><f a="numVertices:data32PerVertex:?bufferUsage">
	<x path="Int"/>
	<x path="Int"/>
	<x path="flash.display3D.Context3DBufferUsage"/>
	<c path="flash.display3D.VertexBuffer3D"/>
</f></createVertexBuffer>
		<createVideoTexture public="1" set="method"><f a=""><c path="flash.display3D.textures.VideoTexture"/></f></createVideoTexture>
		<dispose public="1" set="method">
			<f a="?recreate" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ recreate : true }</e></m></meta>
		</dispose>
		<drawToBitmapData public="1" set="method"><f a="destination">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></drawToBitmapData>
		<drawTriangles public="1" set="method">
			<f a="indexBuffer:?firstIndex:?numTriangles" v=":0:-1">
				<c path="flash.display3D.IndexBuffer3D"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ numTriangles : -1, firstIndex : 0 }</e></m></meta>
		</drawTriangles>
		<get_backBufferHeight set="method"><f a=""><x path="Int"/></f></get_backBufferHeight>
		<get_backBufferWidth set="method"><f a=""><x path="Int"/></f></get_backBufferWidth>
		<get_driverInfo set="method"><f a=""><c path="String"/></f></get_driverInfo>
		<get_enableErrorChecking set="method"><f a=""><x path="Bool"/></f></get_enableErrorChecking>
		<get_maxBackBufferHeight set="method"><f a=""><x path="Int"/></f></get_maxBackBufferHeight>
		<get_maxBackBufferWidth set="method"><f a=""><x path="Int"/></f></get_maxBackBufferWidth>
		<get_profile set="method"><f a=""><c path="String"/></f></get_profile>
		<get_totalGPUMemory set="method"><f a=""><x path="Float"/></f></get_totalGPUMemory>
		<present public="1" set="method"><f a=""><x path="Void"/></f></present>
		<setBlendFactors public="1" set="method"><f a="sourceFactor:destinationFactor">
	<x path="flash.display3D.Context3DBlendFactor"/>
	<x path="flash.display3D.Context3DBlendFactor"/>
	<x path="Void"/>
</f></setBlendFactors>
		<setColorMask public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setColorMask>
		<setCulling public="1" set="method"><f a="triangleFaceToCull">
	<x path="flash.display3D.Context3DTriangleFace"/>
	<x path="Void"/>
</f></setCulling>
		<setDepthTest public="1" set="method"><f a="depthMask:passCompareMode">
	<x path="Bool"/>
	<x path="flash.display3D.Context3DCompareMode"/>
	<x path="Void"/>
</f></setDepthTest>
		<setProgram public="1" set="method"><f a="program">
	<c path="flash.display3D.Program3D"/>
	<x path="Void"/>
</f></setProgram>
		<setProgramConstantsFromByteArray public="1" set="method">
			<f a="programType:firstRegister:numRegisters:data:byteArrayOffset">
				<x path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</setProgramConstantsFromByteArray>
		<setProgramConstantsFromMatrix public="1" set="method">
			<f a="programType:firstRegister:matrix:?transposedMatrix" v=":::false">
				<x path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<c path="flash.geom.Matrix3D"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ transposedMatrix : false }</e></m></meta>
		</setProgramConstantsFromMatrix>
		<setProgramConstantsFromVector public="1" set="method">
			<f a="programType:firstRegister:data:?numRegisters" v=":::-1">
				<x path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ numRegisters : -1 }</e></m></meta>
		</setProgramConstantsFromVector>
		<setRenderToBackBuffer public="1" set="method"><f a=""><x path="Void"/></f></setRenderToBackBuffer>
		<setRenderToTexture public="1" set="method">
			<f a="texture:?enableDepthAndStencil:?antiAlias:?surfaceSelector:?colorOutputIndex" v=":false:0:0:0">
				<c path="flash.display3D.textures.TextureBase"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ colorOutputIndex : 0, surfaceSelector : 0, antiAlias : 0, enableDepthAndStencil : false }</e></m></meta>
		</setRenderToTexture>
		<setSamplerStateAt public="1">
			<f a="sampler:wrap:filter:mipfilter">
				<x path="Int"/>
				<x path="flash.display3D.Context3DWrapMode"/>
				<x path="flash.display3D.Context3DTextureFilter"/>
				<x path="flash.display3D.Context3DMipFilter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_6</e></m></meta>
		</setSamplerStateAt>
		<setScissorRectangle public="1" set="method"><f a="rectangle">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></setScissorRectangle>
		<setStencilActions public="1" set="method"><f a="?triangleFace:?compareMode:?actionOnBothPass:?actionOnDepthFail:?actionOnDepthPassStencilFail">
	<x path="flash.display3D.Context3DTriangleFace"/>
	<x path="flash.display3D.Context3DCompareMode"/>
	<x path="flash.display3D.Context3DStencilAction"/>
	<x path="flash.display3D.Context3DStencilAction"/>
	<x path="flash.display3D.Context3DStencilAction"/>
	<x path="Void"/>
</f></setStencilActions>
		<setStencilReferenceValue public="1" set="method">
			<f a="referenceValue:?readMask:?writeMask" v=":255:255">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ writeMask : 255, readMask : 255 }</e></m></meta>
		</setStencilReferenceValue>
		<setTextureAt public="1" set="method"><f a="sampler:texture">
	<x path="Int"/>
	<c path="flash.display3D.textures.TextureBase"/>
	<x path="Void"/>
</f></setTextureAt>
		<setVertexBufferAt public="1" set="method">
			<f a="index:buffer:?bufferOffset:?format" v="::0:">
				<x path="Int"/>
				<c path="flash.display3D.VertexBuffer3D"/>
				<x path="Int"/>
				<x path="flash.display3D.Context3DVertexBufferFormat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ bufferOffset : 0 }</e></m></meta>
		</setVertexBufferAt>
		<set_enableErrorChecking set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enableErrorChecking>
		<set_maxBackBufferHeight set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_maxBackBufferHeight>
		<set_maxBackBufferWidth set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_maxBackBufferWidth>
	</class>
	<abstract path="flash.display3D.Context3DBlendFactor" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DBlendFactor.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DBlendFactor"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DBlendFactor.hx" private="1" module="flash.display3D.Context3DBlendFactor" extern="1" final="1">
	<DESTINATION_ALPHA public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta><m n=":enum"/></meta>
	</DESTINATION_ALPHA>
	<DESTINATION_COLOR public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta><m n=":enum"/></meta>
	</DESTINATION_COLOR>
	<ONE public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta><m n=":enum"/></meta>
	</ONE>
	<ONE_MINUS_DESTINATION_ALPHA public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta><m n=":enum"/></meta>
	</ONE_MINUS_DESTINATION_ALPHA>
	<ONE_MINUS_DESTINATION_COLOR public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta><m n=":enum"/></meta>
	</ONE_MINUS_DESTINATION_COLOR>
	<ONE_MINUS_SOURCE_ALPHA public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta><m n=":enum"/></meta>
	</ONE_MINUS_SOURCE_ALPHA>
	<ONE_MINUS_SOURCE_COLOR public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta><m n=":enum"/></meta>
	</ONE_MINUS_SOURCE_COLOR>
	<SOURCE_ALPHA public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta><m n=":enum"/></meta>
	</SOURCE_ALPHA>
	<SOURCE_COLOR public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta><m n=":enum"/></meta>
	</SOURCE_COLOR>
	<ZERO public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBlendFactor"/>
		<meta><m n=":enum"/></meta>
	</ZERO>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DBlendFactor"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DBlendFactor.hx" private="1" module="flash.display3D.Context3DBlendFactor" extern="1" final="1">
		<DESTINATION_ALPHA public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta><m n=":enum"/></meta>
		</DESTINATION_ALPHA>
		<DESTINATION_COLOR public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta><m n=":enum"/></meta>
		</DESTINATION_COLOR>
		<ONE public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta><m n=":enum"/></meta>
		</ONE>
		<ONE_MINUS_DESTINATION_ALPHA public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta><m n=":enum"/></meta>
		</ONE_MINUS_DESTINATION_ALPHA>
		<ONE_MINUS_DESTINATION_COLOR public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta><m n=":enum"/></meta>
		</ONE_MINUS_DESTINATION_COLOR>
		<ONE_MINUS_SOURCE_ALPHA public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta><m n=":enum"/></meta>
		</ONE_MINUS_SOURCE_ALPHA>
		<ONE_MINUS_SOURCE_COLOR public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta><m n=":enum"/></meta>
		</ONE_MINUS_SOURCE_COLOR>
		<SOURCE_ALPHA public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta><m n=":enum"/></meta>
		</SOURCE_ALPHA>
		<SOURCE_COLOR public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta><m n=":enum"/></meta>
		</SOURCE_COLOR>
		<ZERO public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBlendFactor"/>
			<meta><m n=":enum"/></meta>
		</ZERO>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DBlendFactor"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DBufferUsage" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DBufferUsage.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DBufferUsage"</e></m>
			<m n=":require"><e>flash12</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DBufferUsage.hx" private="1" module="flash.display3D.Context3DBufferUsage" extern="1" final="1">
	<DYNAMIC_DRAW public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBufferUsage"/>
		<meta><m n=":enum"/></meta>
	</DYNAMIC_DRAW>
	<STATIC_DRAW public="1" set="null" static="1">
		<x path="flash.display3D.Context3DBufferUsage"/>
		<meta><m n=":enum"/></meta>
	</STATIC_DRAW>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DBufferUsage"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DBufferUsage.hx" private="1" module="flash.display3D.Context3DBufferUsage" extern="1" final="1">
		<DYNAMIC_DRAW public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBufferUsage"/>
			<meta><m n=":enum"/></meta>
		</DYNAMIC_DRAW>
		<STATIC_DRAW public="1" set="null" static="1">
			<x path="flash.display3D.Context3DBufferUsage"/>
			<meta><m n=":enum"/></meta>
		</STATIC_DRAW>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DBufferUsage"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display3D.Context3DClearMask" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DClearMask.hx" extern="1">
		<ALL final="1" public="1" set="null" static="1"><x path="Int"/></ALL>
		<COLOR final="1" public="1" set="null" static="1"><x path="Int"/></COLOR>
		<DEPTH final="1" public="1" set="null" static="1"><x path="Int"/></DEPTH>
		<STENCIL final="1" public="1" set="null" static="1"><x path="Int"/></STENCIL>
	</class>
	<abstract path="flash.display3D.Context3DCompareMode" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DCompareMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DCompareMode"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DCompareMode.Context3DCompareMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DCompareMode.hx" private="1" module="flash.display3D.Context3DCompareMode" extern="1" final="1">
	<ALWAYS public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta><m n=":enum"/></meta>
	</ALWAYS>
	<EQUAL public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta><m n=":enum"/></meta>
	</EQUAL>
	<GREATER public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta><m n=":enum"/></meta>
	</GREATER>
	<GREATER_EQUAL public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta><m n=":enum"/></meta>
	</GREATER_EQUAL>
	<LESS public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta><m n=":enum"/></meta>
	</LESS>
	<LESS_EQUAL public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta><m n=":enum"/></meta>
	</LESS_EQUAL>
	<NEVER public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta><m n=":enum"/></meta>
	</NEVER>
	<NOT_EQUAL public="1" set="null" static="1">
		<x path="flash.display3D.Context3DCompareMode"/>
		<meta><m n=":enum"/></meta>
	</NOT_EQUAL>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DCompareMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DCompareMode.Context3DCompareMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DCompareMode.hx" private="1" module="flash.display3D.Context3DCompareMode" extern="1" final="1">
		<ALWAYS public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta><m n=":enum"/></meta>
		</ALWAYS>
		<EQUAL public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta><m n=":enum"/></meta>
		</EQUAL>
		<GREATER public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta><m n=":enum"/></meta>
		</GREATER>
		<GREATER_EQUAL public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta><m n=":enum"/></meta>
		</GREATER_EQUAL>
		<LESS public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta><m n=":enum"/></meta>
		</LESS>
		<LESS_EQUAL public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta><m n=":enum"/></meta>
		</LESS_EQUAL>
		<NEVER public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta><m n=":enum"/></meta>
		</NEVER>
		<NOT_EQUAL public="1" set="null" static="1">
			<x path="flash.display3D.Context3DCompareMode"/>
			<meta><m n=":enum"/></meta>
		</NOT_EQUAL>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DCompareMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DFillMode" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DFillMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DFillMode"</e></m>
			<m n=":require"><e>flash16</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DFillMode.Context3DFillMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DFillMode.hx" private="1" module="flash.display3D.Context3DFillMode" extern="1" final="1">
	<SOLID public="1" set="null" static="1">
		<x path="flash.display3D.Context3DFillMode"/>
		<meta><m n=":enum"/></meta>
	</SOLID>
	<WIREFRAME public="1" set="null" static="1">
		<x path="flash.display3D.Context3DFillMode"/>
		<meta><m n=":enum"/></meta>
	</WIREFRAME>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DFillMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DFillMode.Context3DFillMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DFillMode.hx" private="1" module="flash.display3D.Context3DFillMode" extern="1" final="1">
		<SOLID public="1" set="null" static="1">
			<x path="flash.display3D.Context3DFillMode"/>
			<meta><m n=":enum"/></meta>
		</SOLID>
		<WIREFRAME public="1" set="null" static="1">
			<x path="flash.display3D.Context3DFillMode"/>
			<meta><m n=":enum"/></meta>
		</WIREFRAME>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DFillMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DMipFilter" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DMipFilter.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DMipFilter"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DMipFilter.Context3DMipFilter_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DMipFilter.hx" private="1" module="flash.display3D.Context3DMipFilter" extern="1" final="1">
	<MIPLINEAR public="1" set="null" static="1">
		<x path="flash.display3D.Context3DMipFilter"/>
		<meta><m n=":enum"/></meta>
	</MIPLINEAR>
	<MIPNEAREST public="1" set="null" static="1">
		<x path="flash.display3D.Context3DMipFilter"/>
		<meta><m n=":enum"/></meta>
	</MIPNEAREST>
	<MIPNONE public="1" set="null" static="1">
		<x path="flash.display3D.Context3DMipFilter"/>
		<meta><m n=":enum"/></meta>
	</MIPNONE>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DMipFilter"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DMipFilter.Context3DMipFilter_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DMipFilter.hx" private="1" module="flash.display3D.Context3DMipFilter" extern="1" final="1">
		<MIPLINEAR public="1" set="null" static="1">
			<x path="flash.display3D.Context3DMipFilter"/>
			<meta><m n=":enum"/></meta>
		</MIPLINEAR>
		<MIPNEAREST public="1" set="null" static="1">
			<x path="flash.display3D.Context3DMipFilter"/>
			<meta><m n=":enum"/></meta>
		</MIPNEAREST>
		<MIPNONE public="1" set="null" static="1">
			<x path="flash.display3D.Context3DMipFilter"/>
			<meta><m n=":enum"/></meta>
		</MIPNONE>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DMipFilter"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DProfile" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DProfile.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DProfile"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DProfile.Context3DProfile_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DProfile.hx" private="1" module="flash.display3D.Context3DProfile" extern="1" final="1">
	<BASELINE public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProfile"/>
		<meta><m n=":enum"/></meta>
	</BASELINE>
	<BASELINE_CONSTRAINED public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProfile"/>
		<meta><m n=":enum"/></meta>
	</BASELINE_CONSTRAINED>
	<BASELINE_EXTENDED public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProfile"/>
		<meta><m n=":enum"/></meta>
	</BASELINE_EXTENDED>
	<STANDARD public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProfile"/>
		<meta><m n=":enum"/></meta>
	</STANDARD>
	<STANDARD_CONSTRAINED public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProfile"/>
		<meta><m n=":enum"/></meta>
	</STANDARD_CONSTRAINED>
	<STANDARD_EXTENDED public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProfile"/>
		<meta><m n=":enum"/></meta>
	</STANDARD_EXTENDED>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DProfile"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DProfile.Context3DProfile_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DProfile.hx" private="1" module="flash.display3D.Context3DProfile" extern="1" final="1">
		<BASELINE public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProfile"/>
			<meta><m n=":enum"/></meta>
		</BASELINE>
		<BASELINE_CONSTRAINED public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProfile"/>
			<meta><m n=":enum"/></meta>
		</BASELINE_CONSTRAINED>
		<BASELINE_EXTENDED public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProfile"/>
			<meta><m n=":enum"/></meta>
		</BASELINE_EXTENDED>
		<STANDARD public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProfile"/>
			<meta><m n=":enum"/></meta>
		</STANDARD>
		<STANDARD_CONSTRAINED public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProfile"/>
			<meta><m n=":enum"/></meta>
		</STANDARD_CONSTRAINED>
		<STANDARD_EXTENDED public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProfile"/>
			<meta><m n=":enum"/></meta>
		</STANDARD_EXTENDED>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DProfile"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DProgramType" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DProgramType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DProgramType"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DProgramType.Context3DProgramType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DProgramType.hx" private="1" module="flash.display3D.Context3DProgramType" extern="1" final="1">
	<FRAGMENT public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProgramType"/>
		<meta><m n=":enum"/></meta>
	</FRAGMENT>
	<VERTEX public="1" set="null" static="1">
		<x path="flash.display3D.Context3DProgramType"/>
		<meta><m n=":enum"/></meta>
	</VERTEX>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DProgramType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DProgramType.Context3DProgramType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DProgramType.hx" private="1" module="flash.display3D.Context3DProgramType" extern="1" final="1">
		<FRAGMENT public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProgramType"/>
			<meta><m n=":enum"/></meta>
		</FRAGMENT>
		<VERTEX public="1" set="null" static="1">
			<x path="flash.display3D.Context3DProgramType"/>
			<meta><m n=":enum"/></meta>
		</VERTEX>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DProgramType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DRenderMode" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DRenderMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DRenderMode"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DRenderMode.Context3DRenderMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DRenderMode.hx" private="1" module="flash.display3D.Context3DRenderMode" extern="1" final="1">
	<AUTO public="1" set="null" static="1">
		<x path="flash.display3D.Context3DRenderMode"/>
		<meta><m n=":enum"/></meta>
	</AUTO>
	<SOFTWARE public="1" set="null" static="1">
		<x path="flash.display3D.Context3DRenderMode"/>
		<meta><m n=":enum"/></meta>
	</SOFTWARE>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DRenderMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DRenderMode.Context3DRenderMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DRenderMode.hx" private="1" module="flash.display3D.Context3DRenderMode" extern="1" final="1">
		<AUTO public="1" set="null" static="1">
			<x path="flash.display3D.Context3DRenderMode"/>
			<meta><m n=":enum"/></meta>
		</AUTO>
		<SOFTWARE public="1" set="null" static="1">
			<x path="flash.display3D.Context3DRenderMode"/>
			<meta><m n=":enum"/></meta>
		</SOFTWARE>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DRenderMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DStencilAction" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DStencilAction.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DStencilAction"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DStencilAction.Context3DStencilAction_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DStencilAction.hx" private="1" module="flash.display3D.Context3DStencilAction" extern="1" final="1">
	<DECREMENT_SATURATE public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta><m n=":enum"/></meta>
	</DECREMENT_SATURATE>
	<DECREMENT_WRAP public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta><m n=":enum"/></meta>
	</DECREMENT_WRAP>
	<INCREMENT_SATURATE public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta><m n=":enum"/></meta>
	</INCREMENT_SATURATE>
	<INCREMENT_WRAP public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta><m n=":enum"/></meta>
	</INCREMENT_WRAP>
	<INVERT public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta><m n=":enum"/></meta>
	</INVERT>
	<KEEP public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta><m n=":enum"/></meta>
	</KEEP>
	<SET public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta><m n=":enum"/></meta>
	</SET>
	<ZERO public="1" set="null" static="1">
		<x path="flash.display3D.Context3DStencilAction"/>
		<meta><m n=":enum"/></meta>
	</ZERO>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DStencilAction"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DStencilAction.Context3DStencilAction_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DStencilAction.hx" private="1" module="flash.display3D.Context3DStencilAction" extern="1" final="1">
		<DECREMENT_SATURATE public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta><m n=":enum"/></meta>
		</DECREMENT_SATURATE>
		<DECREMENT_WRAP public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta><m n=":enum"/></meta>
		</DECREMENT_WRAP>
		<INCREMENT_SATURATE public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta><m n=":enum"/></meta>
		</INCREMENT_SATURATE>
		<INCREMENT_WRAP public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta><m n=":enum"/></meta>
		</INCREMENT_WRAP>
		<INVERT public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta><m n=":enum"/></meta>
		</INVERT>
		<KEEP public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta><m n=":enum"/></meta>
		</KEEP>
		<SET public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta><m n=":enum"/></meta>
		</SET>
		<ZERO public="1" set="null" static="1">
			<x path="flash.display3D.Context3DStencilAction"/>
			<meta><m n=":enum"/></meta>
		</ZERO>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DStencilAction"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DTextureFilter" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DTextureFilter.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DTextureFilter"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DTextureFilter.hx" private="1" module="flash.display3D.Context3DTextureFilter" extern="1" final="1">
	<ANISOTROPIC16X public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFilter"/>
		<meta><m n=":enum"/></meta>
	</ANISOTROPIC16X>
	<ANISOTROPIC2X public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFilter"/>
		<meta><m n=":enum"/></meta>
	</ANISOTROPIC2X>
	<ANISOTROPIC4X public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFilter"/>
		<meta><m n=":enum"/></meta>
	</ANISOTROPIC4X>
	<ANISOTROPIC8X public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFilter"/>
		<meta><m n=":enum"/></meta>
	</ANISOTROPIC8X>
	<LINEAR public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFilter"/>
		<meta><m n=":enum"/></meta>
	</LINEAR>
	<NEAREST public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFilter"/>
		<meta><m n=":enum"/></meta>
	</NEAREST>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DTextureFilter"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DTextureFilter.hx" private="1" module="flash.display3D.Context3DTextureFilter" extern="1" final="1">
		<ANISOTROPIC16X public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFilter"/>
			<meta><m n=":enum"/></meta>
		</ANISOTROPIC16X>
		<ANISOTROPIC2X public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFilter"/>
			<meta><m n=":enum"/></meta>
		</ANISOTROPIC2X>
		<ANISOTROPIC4X public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFilter"/>
			<meta><m n=":enum"/></meta>
		</ANISOTROPIC4X>
		<ANISOTROPIC8X public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFilter"/>
			<meta><m n=":enum"/></meta>
		</ANISOTROPIC8X>
		<LINEAR public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFilter"/>
			<meta><m n=":enum"/></meta>
		</LINEAR>
		<NEAREST public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFilter"/>
			<meta><m n=":enum"/></meta>
		</NEAREST>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DTextureFilter"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DTextureFormat" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DTextureFormat.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DTextureFormat"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DTextureFormat.hx" private="1" module="flash.display3D.Context3DTextureFormat" extern="1" final="1">
	<BGRA public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFormat"/>
		<meta><m n=":enum"/></meta>
	</BGRA>
	<BGRA_PACKED public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFormat"/>
		<meta><m n=":enum"/></meta>
	</BGRA_PACKED>
	<BGR_PACKED public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFormat"/>
		<meta><m n=":enum"/></meta>
	</BGR_PACKED>
	<COMPRESSED public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFormat"/>
		<meta><m n=":enum"/></meta>
	</COMPRESSED>
	<COMPRESSED_ALPHA public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFormat"/>
		<meta><m n=":enum"/></meta>
	</COMPRESSED_ALPHA>
	<RGBA_HALF_FLOAT public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTextureFormat"/>
		<meta><m n=":enum"/></meta>
	</RGBA_HALF_FLOAT>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DTextureFormat"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DTextureFormat.hx" private="1" module="flash.display3D.Context3DTextureFormat" extern="1" final="1">
		<BGRA public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFormat"/>
			<meta><m n=":enum"/></meta>
		</BGRA>
		<BGRA_PACKED public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFormat"/>
			<meta><m n=":enum"/></meta>
		</BGRA_PACKED>
		<BGR_PACKED public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFormat"/>
			<meta><m n=":enum"/></meta>
		</BGR_PACKED>
		<COMPRESSED public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFormat"/>
			<meta><m n=":enum"/></meta>
		</COMPRESSED>
		<COMPRESSED_ALPHA public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFormat"/>
			<meta><m n=":enum"/></meta>
		</COMPRESSED_ALPHA>
		<RGBA_HALF_FLOAT public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTextureFormat"/>
			<meta><m n=":enum"/></meta>
		</RGBA_HALF_FLOAT>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DTextureFormat"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DTriangleFace" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DTriangleFace.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DTriangleFace"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DTriangleFace.hx" private="1" module="flash.display3D.Context3DTriangleFace" extern="1" final="1">
	<BACK public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTriangleFace"/>
		<meta><m n=":enum"/></meta>
	</BACK>
	<FRONT public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTriangleFace"/>
		<meta><m n=":enum"/></meta>
	</FRONT>
	<FRONT_AND_BACK public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTriangleFace"/>
		<meta><m n=":enum"/></meta>
	</FRONT_AND_BACK>
	<NONE public="1" set="null" static="1">
		<x path="flash.display3D.Context3DTriangleFace"/>
		<meta><m n=":enum"/></meta>
	</NONE>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DTriangleFace"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DTriangleFace.hx" private="1" module="flash.display3D.Context3DTriangleFace" extern="1" final="1">
		<BACK public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTriangleFace"/>
			<meta><m n=":enum"/></meta>
		</BACK>
		<FRONT public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTriangleFace"/>
			<meta><m n=":enum"/></meta>
		</FRONT>
		<FRONT_AND_BACK public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTriangleFace"/>
			<meta><m n=":enum"/></meta>
		</FRONT_AND_BACK>
		<NONE public="1" set="null" static="1">
			<x path="flash.display3D.Context3DTriangleFace"/>
			<meta><m n=":enum"/></meta>
		</NONE>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DTriangleFace"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DVertexBufferFormat" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DVertexBufferFormat.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DVertexBufferFormat"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DVertexBufferFormat.hx" private="1" module="flash.display3D.Context3DVertexBufferFormat" extern="1" final="1">
	<BYTES_4 public="1" set="null" static="1">
		<x path="flash.display3D.Context3DVertexBufferFormat"/>
		<meta><m n=":enum"/></meta>
	</BYTES_4>
	<FLOAT_1 public="1" set="null" static="1">
		<x path="flash.display3D.Context3DVertexBufferFormat"/>
		<meta><m n=":enum"/></meta>
	</FLOAT_1>
	<FLOAT_2 public="1" set="null" static="1">
		<x path="flash.display3D.Context3DVertexBufferFormat"/>
		<meta><m n=":enum"/></meta>
	</FLOAT_2>
	<FLOAT_3 public="1" set="null" static="1">
		<x path="flash.display3D.Context3DVertexBufferFormat"/>
		<meta><m n=":enum"/></meta>
	</FLOAT_3>
	<FLOAT_4 public="1" set="null" static="1">
		<x path="flash.display3D.Context3DVertexBufferFormat"/>
		<meta><m n=":enum"/></meta>
	</FLOAT_4>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DVertexBufferFormat"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DVertexBufferFormat.hx" private="1" module="flash.display3D.Context3DVertexBufferFormat" extern="1" final="1">
		<BYTES_4 public="1" set="null" static="1">
			<x path="flash.display3D.Context3DVertexBufferFormat"/>
			<meta><m n=":enum"/></meta>
		</BYTES_4>
		<FLOAT_1 public="1" set="null" static="1">
			<x path="flash.display3D.Context3DVertexBufferFormat"/>
			<meta><m n=":enum"/></meta>
		</FLOAT_1>
		<FLOAT_2 public="1" set="null" static="1">
			<x path="flash.display3D.Context3DVertexBufferFormat"/>
			<meta><m n=":enum"/></meta>
		</FLOAT_2>
		<FLOAT_3 public="1" set="null" static="1">
			<x path="flash.display3D.Context3DVertexBufferFormat"/>
			<meta><m n=":enum"/></meta>
		</FLOAT_3>
		<FLOAT_4 public="1" set="null" static="1">
			<x path="flash.display3D.Context3DVertexBufferFormat"/>
			<meta><m n=":enum"/></meta>
		</FLOAT_4>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DVertexBufferFormat"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.display3D.Context3DWrapMode" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DWrapMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.display3D.Context3DWrapMode"</e></m>
		</meta>
		<impl><class path="flash.display3D._Context3DWrapMode.Context3DWrapMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DWrapMode.hx" private="1" module="flash.display3D.Context3DWrapMode" extern="1" final="1">
	<CLAMP public="1" set="null" static="1">
		<x path="flash.display3D.Context3DWrapMode"/>
		<meta><m n=":enum"/></meta>
	</CLAMP>
	<CLAMP_U_REPEAT_V public="1" set="null" static="1">
		<x path="flash.display3D.Context3DWrapMode"/>
		<meta><m n=":enum"/></meta>
	</CLAMP_U_REPEAT_V>
	<REPEAT public="1" set="null" static="1">
		<x path="flash.display3D.Context3DWrapMode"/>
		<meta><m n=":enum"/></meta>
	</REPEAT>
	<REPEAT_U_CLAMP_V public="1" set="null" static="1">
		<x path="flash.display3D.Context3DWrapMode"/>
		<meta><m n=":enum"/></meta>
	</REPEAT_U_CLAMP_V>
	<meta>
		<m n=":native"><e>"flash.display3D.Context3DWrapMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.display3D._Context3DWrapMode.Context3DWrapMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Context3DWrapMode.hx" private="1" module="flash.display3D.Context3DWrapMode" extern="1" final="1">
		<CLAMP public="1" set="null" static="1">
			<x path="flash.display3D.Context3DWrapMode"/>
			<meta><m n=":enum"/></meta>
		</CLAMP>
		<CLAMP_U_REPEAT_V public="1" set="null" static="1">
			<x path="flash.display3D.Context3DWrapMode"/>
			<meta><m n=":enum"/></meta>
		</CLAMP_U_REPEAT_V>
		<REPEAT public="1" set="null" static="1">
			<x path="flash.display3D.Context3DWrapMode"/>
			<meta><m n=":enum"/></meta>
		</REPEAT>
		<REPEAT_U_CLAMP_V public="1" set="null" static="1">
			<x path="flash.display3D.Context3DWrapMode"/>
			<meta><m n=":enum"/></meta>
		</REPEAT_U_CLAMP_V>
		<meta>
			<m n=":native"><e>"flash.display3D.Context3DWrapMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.display3D.IndexBuffer3D" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/IndexBuffer3D.hx" extern="1" final="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startOffset:count">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startOffset:count">
	<c path="flash.Vector"><x path="UInt"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
	</class>
	<class path="flash.display3D.Program3D" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/Program3D.hx" extern="1" final="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<upload public="1" set="method"><f a="vertexProgram:fragmentProgram">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></upload>
	</class>
	<class path="flash.display3D.VertexBuffer3D" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/VertexBuffer3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startVertex:numVertices">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startVertex:numVertices">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
	</class>
	<class path="flash.display3D.textures.TextureBase" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/textures/TextureBase.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
	</class>
	<class path="flash.display3D.textures.CubeTexture" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/textures/CubeTexture.hx" extern="1" final="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?async" v="::false">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ async : false }</e></m></meta>
		</uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method">
			<f a="source:side:?miplevel" v="::0">
				<c path="flash.display.BitmapData"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:side:?miplevel" v=":::0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromByteArray>
	</class>
	<class path="flash.display3D.textures.RectangleTexture" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/textures/RectangleTexture.hx" extern="1" final="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadFromBitmapData public="1" set="method"><f a="source">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display3D.textures.Texture" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/textures/Texture.hx" extern="1" final="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?async" v="::false">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ async : false }</e></m></meta>
		</uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method">
			<f a="source:?miplevel" v=":0">
				<c path="flash.display.BitmapData"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?miplevel" v="::0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ miplevel : 0 }</e></m></meta>
		</uploadFromByteArray>
	</class>
	<class path="flash.display3D.textures.VideoTexture" params="" file="/home/runner/work/haxe/haxe/std/flash/display3D/textures/VideoTexture.hx" extern="1" final="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<videoHeight public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</videoHeight>
		<videoWidth public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</videoWidth>
		<attachCamera public="1" set="method"><f a="theCamera">
	<c path="flash.media.Camera"/>
	<x path="Void"/>
</f></attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<get_videoHeight set="method"><f a=""><x path="Int"/></f></get_videoHeight>
		<get_videoWidth set="method"><f a=""><x path="Int"/></f></get_videoWidth>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.errors.Error" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/Error.hx" extern="1">
		<length final="1" public="1" set="null" static="1"><x path="Int"/></length>
		<getErrorMessage public="1" set="method" static="1"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></getErrorMessage>
		<throwError public="1" set="method" static="1"><f a="type:index:restArgs">
	<x path="Class"><d/></x>
	<x path="UInt"/>
	<t path="haxe.extern.Rest"><d/></t>
	<d/>
</f></throwError>
		<errorID public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</errorID>
		<message public="1"><d/></message>
		<name public="1"><d/></name>
		<getStackTrace public="1" set="method"><f a=""><c path="String"/></f></getStackTrace>
		<get_errorID set="method"><f a=""><x path="Int"/></f></get_errorID>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ id : 0 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="flash.errors.ArgumentError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/ArgumentError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"ArgumentError"</e></m></meta>
	</class>
	<class path="flash.errors.DRMManagerError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/DRMManagerError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<subErrorID public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</subErrorID>
		<get_subErrorID set="method"><f a=""><x path="Int"/></f></get_subErrorID>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="message:id:subErrorID">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.errors.DefinitionError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/DefinitionError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"DefinitionError"</e></m></meta>
	</class>
	<class path="flash.errors.IOError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/IOError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ id : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.errors.EOFError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/EOFError.hx" extern="1">
		<extends path="flash.errors.IOError"/>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ id : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.errors.EvalError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/EvalError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="flash.errors.IllegalOperationError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/IllegalOperationError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ id : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.errors.InvalidSWFError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/InvalidSWFError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ id : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.errors.MemoryError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/MemoryError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ id : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.errors.RangeError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/RangeError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="flash.errors.ReferenceError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/ReferenceError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="flash.errors.ScriptTimeoutError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/ScriptTimeoutError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ id : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.errors.SecurityError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/SecurityError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"SecurityError"</e></m></meta>
	</class>
	<class path="flash.errors.StackOverflowError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/StackOverflowError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ id : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.errors.SyntaxError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/SyntaxError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="flash.errors.TypeError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/TypeError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="flash.errors.URIError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/URIError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="flash.errors.UninitializedError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/UninitializedError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"UninitializedError"</e></m></meta>
	</class>
	<class path="flash.errors.VerifyError" params="" file="/home/runner/work/haxe/haxe/std/flash/errors/VerifyError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"VerifyError"</e></m></meta>
	</class>
	<class path="flash.events.AVDictionaryDataEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/AVDictionaryDataEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AV_DICTIONARY_DATA final="1" public="1" set="null" static="1"><c path="String"/></AV_DICTIONARY_DATA>
		<dictionary public="1" get="accessor" set="null">
			<c path="flash.utils.Dictionary"/>
			<meta><m n=":flash.property"/></meta>
		</dictionary>
		<time public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</time>
		<get_dictionary set="method"><f a=""><c path="flash.utils.Dictionary"/></f></get_dictionary>
		<get_time set="method"><f a=""><x path="Float"/></f></get_time>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?init_dictionary:?init_dataTime" v=":false:false::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.utils.Dictionary"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ init_dataTime : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AVHTTPStatusEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/AVHTTPStatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AV_HTTP_RESPONSE_STATUS final="1" public="1" set="null" static="1"><c path="String"/></AV_HTTP_RESPONSE_STATUS>
		<responseHeaders public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</responseHeaders>
		<responseURL public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</responseURL>
		<status public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</status>
		<get_responseHeaders set="method"><f a=""><c path="Array"><d/></c></f></get_responseHeaders>
		<get_responseURL set="method"><f a=""><c path="String"/></f></get_responseURL>
		<get_status set="method"><f a=""><x path="Int"/></f></get_status>
		<set_responseHeaders set="method"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_responseHeaders>
		<set_responseURL set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_responseURL>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?status:?responseUrl:?responseHeaders" v=":false:false:0::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ status : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AVLoadInfoEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/AVLoadInfoEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AV_LOAD_INFO final="1" public="1" set="null" static="1"><d/></AV_LOAD_INFO>
		<loadInfo public="1" get="accessor" set="null">
			<c path="flash.utils.Dictionary"/>
			<meta><m n=":flash.property"/></meta>
		</loadInfo>
		<get_loadInfo set="method"><f a=""><c path="flash.utils.Dictionary"/></f></get_loadInfo>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?inLoadInfo" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.utils.Dictionary"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AVManifestLoadEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/AVManifestLoadEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AV_MANIFEST_LOAD final="1" public="1" set="null" static="1"><c path="String"/></AV_MANIFEST_LOAD>
		<duration public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</duration>
		<handle public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</handle>
		<result public="1" get="accessor" set="null">
			<c path="flash.media.AVResult"/>
			<meta><m n=":flash.property"/></meta>
		</result>
		<userData public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</userData>
		<get_duration set="method"><f a=""><x path="Float"/></f></get_duration>
		<get_handle set="method"><f a=""><x path="Int"/></f></get_handle>
		<get_result set="method"><f a=""><c path="flash.media.AVResult"/></f></get_result>
		<get_userData set="method"><f a=""><x path="Int"/></f></get_userData>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?inResult:?inUserData:?inHandle:?inDuration" v=":false:false:0:0:0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ inDuration : 0, inHandle : 0, inUserData : 0, inResult : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AVPauseAtPeriodEndEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/AVPauseAtPeriodEndEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AV_PAUSE_AT_PERIOD_END final="1" public="1" set="null" static="1"><c path="String"/></AV_PAUSE_AT_PERIOD_END>
		<userData public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</userData>
		<get_userData set="method"><f a=""><x path="Int"/></f></get_userData>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?userData" v=":false:false:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ userData : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AVPlayStateEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/AVPlayStateEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AV_PLAY_STATE final="1" public="1" set="null" static="1"><c path="String"/></AV_PLAY_STATE>
		<playState public="1" get="accessor" set="null">
			<c path="flash.media.AVPlayState"/>
			<meta><m n=":flash.property"/></meta>
		</playState>
		<get_playState set="method"><f a=""><c path="flash.media.AVPlayState"/></f></get_playState>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?inState" v=":false:false:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ inState : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AVStatusEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/AVStatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AV_STATUS final="1" public="1" set="null" static="1"><c path="String"/></AV_STATUS>
		<BACKGROUND_MANIFEST_ERROR final="1" public="1" set="null" static="1"><c path="String"/></BACKGROUND_MANIFEST_ERROR>
		<BACKGROUND_MANIFEST_WARNING final="1" public="1" set="null" static="1"><c path="String"/></BACKGROUND_MANIFEST_WARNING>
		<BUFFER_STATE final="1" public="1" set="null" static="1"><c path="String"/></BUFFER_STATE>
		<DECODER_TYPE final="1" public="1" set="null" static="1"><c path="String"/></DECODER_TYPE>
		<DIMENSION_CHANGE final="1" public="1" set="null" static="1"><c path="String"/></DIMENSION_CHANGE>
		<ERROR final="1" public="1" set="null" static="1"><c path="String"/></ERROR>
		<INSERTION_COMPLETE final="1" public="1" set="null" static="1"><c path="String"/></INSERTION_COMPLETE>
		<LOAD_COMPLETE final="1" public="1" set="null" static="1"><c path="String"/></LOAD_COMPLETE>
		<MANIFEST_UPDATE final="1" public="1" set="null" static="1"><c path="String"/></MANIFEST_UPDATE>
		<PLAY_STATE final="1" public="1" set="null" static="1"><c path="String"/></PLAY_STATE>
		<RENDER_TYPE final="1" public="1" set="null" static="1"><c path="String"/></RENDER_TYPE>
		<SEEK_COMPLETE final="1" public="1" set="null" static="1"><c path="String"/></SEEK_COMPLETE>
		<STEP_COMPLETE final="1" public="1" set="null" static="1"><c path="String"/></STEP_COMPLETE>
		<STREAM_SWITCH final="1" public="1" set="null" static="1"><c path="String"/></STREAM_SWITCH>
		<TRICKPLAY_ENDED final="1" public="1" set="null" static="1"><c path="String"/></TRICKPLAY_ENDED>
		<WARNING final="1" public="1" set="null" static="1"><c path="String"/></WARNING>
		<description public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</description>
		<notificationType public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</notificationType>
		<result public="1" get="accessor" set="null">
			<c path="flash.media.AVResult"/>
			<meta><m n=":flash.property"/></meta>
		</result>
		<get_description set="method"><f a=""><c path="String"/></f></get_description>
		<get_notificationType set="method"><f a=""><c path="String"/></f></get_notificationType>
		<get_result set="method"><f a=""><c path="flash.media.AVResult"/></f></get_result>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?inNotificationType:?inResult:?inDescription" v=":false:false::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ inResult : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AVStreamSwitchEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/AVStreamSwitchEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<ABR_SWITCH final="1" public="1" set="null" static="1"><x path="Int"/></ABR_SWITCH>
		<AV_STREAM_SWITCH final="1" public="1" set="null" static="1"><c path="String"/></AV_STREAM_SWITCH>
		<PERIOD_SWITCH final="1" public="1" set="null" static="1"><x path="Int"/></PERIOD_SWITCH>
		<bitrate public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</bitrate>
		<description public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</description>
		<switchType public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</switchType>
		<time public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</time>
		<userData public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</userData>
		<get_bitrate set="method"><f a=""><x path="Int"/></f></get_bitrate>
		<get_description set="method"><f a=""><c path="String"/></f></get_description>
		<get_switchType set="method"><f a=""><x path="Int"/></f></get_switchType>
		<get_time set="method"><f a=""><x path="Float"/></f></get_time>
		<get_userData set="method"><f a=""><x path="Int"/></f></get_userData>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?time:?switchType:?bitrate:?description:?userData" v=":false:false:0:0:0::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ userData : 0, bitrate : 0, switchType : 0, time : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AccelerometerEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/AccelerometerEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<UPDATE final="1" public="1" set="null" static="1"><c path="String"/></UPDATE>
		<accelerationX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</accelerationX>
		<accelerationY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</accelerationY>
		<accelerationZ public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</accelerationZ>
		<timestamp public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</timestamp>
		<get_accelerationX set="method"><f a=""><x path="Float"/></f></get_accelerationX>
		<get_accelerationY set="method"><f a=""><x path="Float"/></f></get_accelerationY>
		<get_accelerationZ set="method"><f a=""><x path="Float"/></f></get_accelerationZ>
		<get_timestamp set="method"><f a=""><x path="Float"/></f></get_timestamp>
		<set_accelerationX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_accelerationX>
		<set_accelerationY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_accelerationY>
		<set_accelerationZ set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_accelerationZ>
		<set_timestamp set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_timestamp>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?timestamp:?accelerationX:?accelerationY:?accelerationZ" v=":false:false:0:0:0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ accelerationZ : 0, accelerationY : 0, accelerationX : 0, timestamp : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.ActivityEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/ActivityEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<ACTIVITY final="1" public="1" set="null" static="1"><c path="String"/></ACTIVITY>
		<activating public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</activating>
		<get_activating set="method"><f a=""><x path="Bool"/></f></get_activating>
		<set_activating set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_activating>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?activating" v=":false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ activating : false, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.TextEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/TextEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<LINK final="1" public="1" set="null" static="1"><c path="String"/></LINK>
		<TEXT_INPUT final="1" public="1" set="null" static="1"><c path="String"/></TEXT_INPUT>
		<text public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</text>
		<get_text set="method"><f a=""><c path="String"/></f></get_text>
		<set_text set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.ErrorEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/ErrorEvent.hx" extern="1">
		<extends path="flash.events.TextEvent"/>
		<ERROR final="1" public="1" set="null" static="1"><c path="String"/></ERROR>
		<errorID public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</errorID>
		<get_errorID set="method"><f a=""><x path="Int"/></f></get_errorID>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text:?id" v=":false:false::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ id : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AsyncErrorEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/AsyncErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<ASYNC_ERROR final="1" public="1" set="null" static="1"><c path="String"/></ASYNC_ERROR>
		<error public="1"><c path="flash.errors.Error"/></error>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text:?error" v=":false:false::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="flash.errors.Error"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AudioOutputChangeEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/AudioOutputChangeEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AUDIO_OUTPUT_CHANGE final="1" public="1" set="null" static="1"><c path="String"/></AUDIO_OUTPUT_CHANGE>
		<reason public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</reason>
		<get_reason set="method"><f a=""><c path="String"/></f></get_reason>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?reason" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.ContextMenuEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/ContextMenuEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<MENU_ITEM_SELECT final="1" public="1" set="null" static="1"><c path="String"/></MENU_ITEM_SELECT>
		<MENU_SELECT final="1" public="1" set="null" static="1"><c path="String"/></MENU_SELECT>
		<contextMenuOwner public="1" get="accessor" set="accessor">
			<c path="flash.display.InteractiveObject"/>
			<meta><m n=":flash.property"/></meta>
		</contextMenuOwner>
		<isMouseTargetInaccessible public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</isMouseTargetInaccessible>
		<mouseTarget public="1" get="accessor" set="accessor">
			<c path="flash.display.InteractiveObject"/>
			<meta><m n=":flash.property"/></meta>
		</mouseTarget>
		<get_contextMenuOwner set="method"><f a=""><c path="flash.display.InteractiveObject"/></f></get_contextMenuOwner>
		<get_isMouseTargetInaccessible set="method"><f a=""><x path="Bool"/></f></get_isMouseTargetInaccessible>
		<get_mouseTarget set="method"><f a=""><c path="flash.display.InteractiveObject"/></f></get_mouseTarget>
		<set_contextMenuOwner set="method"><f a="value">
	<c path="flash.display.InteractiveObject"/>
	<c path="flash.display.InteractiveObject"/>
</f></set_contextMenuOwner>
		<set_isMouseTargetInaccessible set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_isMouseTargetInaccessible>
		<set_mouseTarget set="method"><f a="value">
	<c path="flash.display.InteractiveObject"/>
	<c path="flash.display.InteractiveObject"/>
</f></set_mouseTarget>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?mouseTarget:?contextMenuOwner" v=":false:false::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.display.InteractiveObject"/>
				<c path="flash.display.InteractiveObject"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.DRMAuthenticateEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/DRMAuthenticateEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AUTHENTICATION_TYPE_DRM final="1" public="1" set="null" static="1"><c path="String"/></AUTHENTICATION_TYPE_DRM>
		<AUTHENTICATION_TYPE_PROXY final="1" public="1" set="null" static="1"><c path="String"/></AUTHENTICATION_TYPE_PROXY>
		<DRM_AUTHENTICATE final="1" public="1" set="null" static="1"><c path="String"/></DRM_AUTHENTICATE>
		<authenticationType public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</authenticationType>
		<header public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</header>
		<netstream public="1" get="accessor" set="null">
			<c path="flash.net.NetStream"/>
			<meta><m n=":flash.property"/></meta>
		</netstream>
		<passwordPrompt public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</passwordPrompt>
		<urlPrompt public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</urlPrompt>
		<usernamePrompt public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</usernamePrompt>
		<get_authenticationType set="method"><f a=""><c path="String"/></f></get_authenticationType>
		<get_header set="method"><f a=""><c path="String"/></f></get_header>
		<get_netstream set="method"><f a=""><c path="flash.net.NetStream"/></f></get_netstream>
		<get_passwordPrompt set="method"><f a=""><c path="String"/></f></get_passwordPrompt>
		<get_urlPrompt set="method"><f a=""><c path="String"/></f></get_urlPrompt>
		<get_usernamePrompt set="method"><f a=""><c path="String"/></f></get_usernamePrompt>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?header:?userPrompt:?passPrompt:?urlPrompt:?authenticationType:?netstream" v=":false:false::::::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="flash.net.NetStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.DRMAuthenticationCompleteEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/DRMAuthenticationCompleteEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AUTHENTICATION_COMPLETE final="1" public="1" set="null" static="1"><c path="String"/></AUTHENTICATION_COMPLETE>
		<domain public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</domain>
		<serverURL public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</serverURL>
		<token public="1" get="accessor" set="accessor">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":flash.property"/></meta>
		</token>
		<get_domain set="method"><f a=""><c path="String"/></f></get_domain>
		<get_serverURL set="method"><f a=""><c path="String"/></f></get_serverURL>
		<get_token set="method"><f a=""><c path="flash.utils.ByteArray"/></f></get_token>
		<set_domain set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_domain>
		<set_serverURL set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_serverURL>
		<set_token set="method"><f a="value">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
</f></set_token>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?inServerURL:?inDomain:?inToken" v=":false:false:::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.DRMAuthenticationErrorEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/DRMAuthenticationErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<AUTHENTICATION_ERROR final="1" public="1" set="null" static="1"><c path="String"/></AUTHENTICATION_ERROR>
		<domain public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</domain>
		<serverURL public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</serverURL>
		<subErrorID public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</subErrorID>
		<get_domain set="method"><f a=""><c path="String"/></f></get_domain>
		<get_serverURL set="method"><f a=""><c path="String"/></f></get_serverURL>
		<get_subErrorID set="method"><f a=""><x path="Int"/></f></get_subErrorID>
		<set_domain set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_domain>
		<set_serverURL set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_serverURL>
		<set_subErrorID set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_subErrorID>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?inDetail:?inErrorID:?inSubErrorID:?inServerURL:?inDomain" v=":false:false::0:0::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ inSubErrorID : 0, inErrorID : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.DRMCustomProperties" params="" file="/home/runner/work/haxe/haxe/std/flash/events/DRMCustomProperties.hx" extern="1">
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.DRMDeviceGroupErrorEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/DRMDeviceGroupErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<ADD_TO_DEVICE_GROUP_ERROR final="1" public="1" set="null" static="1"><c path="String"/></ADD_TO_DEVICE_GROUP_ERROR>
		<REMOVE_FROM_DEVICE_GROUP_ERROR final="1" public="1" set="null" static="1"><c path="String"/></REMOVE_FROM_DEVICE_GROUP_ERROR>
		<deviceGroup public="1" get="accessor" set="accessor">
			<c path="flash.net.drm.DRMDeviceGroup"/>
			<meta><m n=":flash.property"/></meta>
		</deviceGroup>
		<drmUpdateNeeded public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</drmUpdateNeeded>
		<subErrorID public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</subErrorID>
		<systemUpdateNeeded public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</systemUpdateNeeded>
		<get_deviceGroup set="method"><f a=""><c path="flash.net.drm.DRMDeviceGroup"/></f></get_deviceGroup>
		<get_drmUpdateNeeded set="method"><f a=""><x path="Bool"/></f></get_drmUpdateNeeded>
		<get_subErrorID set="method"><f a=""><x path="Int"/></f></get_subErrorID>
		<get_systemUpdateNeeded set="method"><f a=""><x path="Bool"/></f></get_systemUpdateNeeded>
		<set_deviceGroup set="method"><f a="value">
	<c path="flash.net.drm.DRMDeviceGroup"/>
	<c path="flash.net.drm.DRMDeviceGroup"/>
</f></set_deviceGroup>
		<set_subErrorID set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_subErrorID>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?errorDetail:?errorCode:?subErrorID:?deviceGroup:?systemUpdateNeeded:?drmUpdateNeeded" v=":false:false::0:0::false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.net.drm.DRMDeviceGroup"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ drmUpdateNeeded : false, systemUpdateNeeded : false, subErrorID : 0, errorCode : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.DRMDeviceGroupEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/DRMDeviceGroupEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<ADD_TO_DEVICE_GROUP_COMPLETE final="1" public="1" set="null" static="1"><c path="String"/></ADD_TO_DEVICE_GROUP_COMPLETE>
		<REMOVE_FROM_DEVICE_GROUP_COMPLETE final="1" public="1" set="null" static="1"><c path="String"/></REMOVE_FROM_DEVICE_GROUP_COMPLETE>
		<deviceGroup public="1" get="accessor" set="accessor">
			<c path="flash.net.drm.DRMDeviceGroup"/>
			<meta><m n=":flash.property"/></meta>
		</deviceGroup>
		<get_deviceGroup set="method"><f a=""><c path="flash.net.drm.DRMDeviceGroup"/></f></get_deviceGroup>
		<set_deviceGroup set="method"><f a="value">
	<c path="flash.net.drm.DRMDeviceGroup"/>
	<c path="flash.net.drm.DRMDeviceGroup"/>
</f></set_deviceGroup>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?deviceGroup" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.net.drm.DRMDeviceGroup"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.DRMErrorEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/DRMErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<DRM_ERROR final="1" public="1" set="null" static="1"><c path="String"/></DRM_ERROR>
		<DRM_LOAD_DEVICEID_ERROR final="1" public="1" set="null" static="1"><c path="String"/></DRM_LOAD_DEVICEID_ERROR>
		<contentData public="1" get="accessor" set="accessor">
			<c path="flash.net.drm.DRMContentData"/>
			<meta><m n=":flash.property"/></meta>
		</contentData>
		<drmUpdateNeeded public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</drmUpdateNeeded>
		<subErrorID public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</subErrorID>
		<systemUpdateNeeded public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</systemUpdateNeeded>
		<get_contentData set="method"><f a=""><c path="flash.net.drm.DRMContentData"/></f></get_contentData>
		<get_drmUpdateNeeded set="method"><f a=""><x path="Bool"/></f></get_drmUpdateNeeded>
		<get_subErrorID set="method"><f a=""><x path="Int"/></f></get_subErrorID>
		<get_systemUpdateNeeded set="method"><f a=""><x path="Bool"/></f></get_systemUpdateNeeded>
		<set_contentData set="method"><f a="value">
	<c path="flash.net.drm.DRMContentData"/>
	<c path="flash.net.drm.DRMContentData"/>
</f></set_contentData>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?inErrorDetail:?inErrorCode:?insubErrorID:?inMetadata:?inSystemUpdateNeeded:?inDrmUpdateNeeded" v=":false:false::0:0::false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.net.drm.DRMContentData"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ inDrmUpdateNeeded : false, inSystemUpdateNeeded : false, insubErrorID : 0, inErrorCode : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.DRMLicenseRequestEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/DRMLicenseRequestEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<LICENSE_REQUEST final="1" public="1" set="null" static="1"><c path="String"/></LICENSE_REQUEST>
		<serverURL public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</serverURL>
		<get_serverURL set="method"><f a=""><c path="String"/></f></get_serverURL>
		<set_serverURL set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_serverURL>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?inServerURL" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.DRMMetadataEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/DRMMetadataEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<DRM_METADATA final="1" public="1" set="null" static="1"><c path="String"/></DRM_METADATA>
		<drmMetadata public="1" get="accessor" set="null">
			<c path="flash.net.drm.DRMContentData"/>
			<meta><m n=":flash.property"/></meta>
		</drmMetadata>
		<timestamp public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</timestamp>
		<get_drmMetadata set="method"><f a=""><c path="flash.net.drm.DRMContentData"/></f></get_drmMetadata>
		<get_timestamp set="method"><f a=""><x path="Float"/></f></get_timestamp>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?inMetadata:?inTimestamp" v=":false:false::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ inTimestamp : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.DRMReturnVoucherCompleteEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/DRMReturnVoucherCompleteEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<RETURN_VOUCHER_COMPLETE final="1" public="1" set="null" static="1"><c path="String"/></RETURN_VOUCHER_COMPLETE>
		<licenseID public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</licenseID>
		<numberOfVouchersReturned public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</numberOfVouchersReturned>
		<policyID public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</policyID>
		<serverURL public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</serverURL>
		<get_licenseID set="method"><f a=""><c path="String"/></f></get_licenseID>
		<get_numberOfVouchersReturned set="method"><f a=""><x path="Int"/></f></get_numberOfVouchersReturned>
		<get_policyID set="method"><f a=""><c path="String"/></f></get_policyID>
		<get_serverURL set="method"><f a=""><c path="String"/></f></get_serverURL>
		<set_licenseID set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_licenseID>
		<set_numberOfVouchersReturned set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_numberOfVouchersReturned>
		<set_policyID set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_policyID>
		<set_serverURL set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_serverURL>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?inServerURL:?inLicenseID:?inPolicyID:?inNumberOfVouchersReturned" v=":false:false::::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ inNumberOfVouchersReturned : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.DRMReturnVoucherErrorEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/DRMReturnVoucherErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<RETURN_VOUCHER_ERROR final="1" public="1" set="null" static="1"><c path="String"/></RETURN_VOUCHER_ERROR>
		<licenseID public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</licenseID>
		<policyID public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</policyID>
		<serverURL public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</serverURL>
		<subErrorID public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</subErrorID>
		<get_licenseID set="method"><f a=""><c path="String"/></f></get_licenseID>
		<get_policyID set="method"><f a=""><c path="String"/></f></get_policyID>
		<get_serverURL set="method"><f a=""><c path="String"/></f></get_serverURL>
		<get_subErrorID set="method"><f a=""><x path="Int"/></f></get_subErrorID>
		<set_licenseID set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_licenseID>
		<set_policyID set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_policyID>
		<set_serverURL set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_serverURL>
		<set_subErrorID set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_subErrorID>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?inDetail:?inErrorID:?inSubErrorID:?inServerURL:?inLicenseID:?inPolicyID" v=":false:false::0:0:::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ inSubErrorID : 0, inErrorID : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.DRMStatusEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/DRMStatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<DRM_STATUS final="1" public="1" set="null" static="1"><c path="String"/></DRM_STATUS>
		<contentData public="1" get="accessor" set="accessor">
			<c path="flash.net.drm.DRMContentData"/>
			<meta><m n=":flash.property"/></meta>
		</contentData>
		<isLocal public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isLocal>
		<voucher public="1" get="accessor" set="accessor">
			<c path="flash.net.drm.DRMVoucher"/>
			<meta><m n=":flash.property"/></meta>
		</voucher>
		<get_contentData set="method"><f a=""><c path="flash.net.drm.DRMContentData"/></f></get_contentData>
		<get_isLocal set="method"><f a=""><x path="Bool"/></f></get_isLocal>
		<get_voucher set="method"><f a=""><c path="flash.net.drm.DRMVoucher"/></f></get_voucher>
		<set_contentData set="method"><f a="value">
	<c path="flash.net.drm.DRMContentData"/>
	<c path="flash.net.drm.DRMContentData"/>
</f></set_contentData>
		<set_isLocal set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_isLocal>
		<set_voucher set="method"><f a="value">
	<c path="flash.net.drm.DRMVoucher"/>
	<c path="flash.net.drm.DRMVoucher"/>
</f></set_voucher>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?inMetadata:?inVoucher:?inLocal" v=":false:false:::false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.net.drm.DRMContentData"/>
				<c path="flash.net.drm.DRMVoucher"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ inLocal : false, cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.DataEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/DataEvent.hx" extern="1">
		<extends path="flash.events.TextEvent"/>
		<DATA final="1" public="1" set="null" static="1"><c path="String"/></DATA>
		<UPLOAD_COMPLETE_DATA final="1" public="1" set="null" static="1"><c path="String"/></UPLOAD_COMPLETE_DATA>
		<data public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</data>
		<get_data set="method"><f a=""><c path="String"/></f></get_data>
		<set_data set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_data>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?data" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<abstract path="flash.events.EventPhase" params="" file="/home/runner/work/haxe/haxe/std/flash/events/EventPhase.hx">
		<this><x path="UInt"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.events.EventPhase"</e></m>
		</meta>
		<impl><class path="flash.events._EventPhase.EventPhase_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/events/EventPhase.hx" private="1" module="flash.events.EventPhase" extern="1" final="1">
	<AT_TARGET public="1" set="null" static="1">
		<x path="flash.events.EventPhase"/>
		<meta><m n=":enum"/></meta>
	</AT_TARGET>
	<BUBBLING_PHASE public="1" set="null" static="1">
		<x path="flash.events.EventPhase"/>
		<meta><m n=":enum"/></meta>
	</BUBBLING_PHASE>
	<CAPTURING_PHASE public="1" set="null" static="1">
		<x path="flash.events.EventPhase"/>
		<meta><m n=":enum"/></meta>
	</CAPTURING_PHASE>
	<meta>
		<m n=":native"><e>"flash.events.EventPhase"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.events._EventPhase.EventPhase_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/events/EventPhase.hx" private="1" module="flash.events.EventPhase" extern="1" final="1">
		<AT_TARGET public="1" set="null" static="1">
			<x path="flash.events.EventPhase"/>
			<meta><m n=":enum"/></meta>
		</AT_TARGET>
		<BUBBLING_PHASE public="1" set="null" static="1">
			<x path="flash.events.EventPhase"/>
			<meta><m n=":enum"/></meta>
		</BUBBLING_PHASE>
		<CAPTURING_PHASE public="1" set="null" static="1">
			<x path="flash.events.EventPhase"/>
			<meta><m n=":enum"/></meta>
		</CAPTURING_PHASE>
		<meta>
			<m n=":native"><e>"flash.events.EventPhase"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.events.FocusEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/FocusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<FOCUS_IN final="1" public="1" set="null" static="1"><c path="String"/></FOCUS_IN>
		<FOCUS_OUT final="1" public="1" set="null" static="1"><c path="String"/></FOCUS_OUT>
		<KEY_FOCUS_CHANGE final="1" public="1" set="null" static="1"><c path="String"/></KEY_FOCUS_CHANGE>
		<MOUSE_FOCUS_CHANGE final="1" public="1" set="null" static="1"><c path="String"/></MOUSE_FOCUS_CHANGE>
		<isRelatedObjectInaccessible public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</isRelatedObjectInaccessible>
		<keyCode public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</keyCode>
		<relatedObject public="1" get="accessor" set="accessor">
			<c path="flash.display.InteractiveObject"/>
			<meta><m n=":flash.property"/></meta>
		</relatedObject>
		<shiftKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</shiftKey>
		<get_isRelatedObjectInaccessible set="method"><f a=""><x path="Bool"/></f></get_isRelatedObjectInaccessible>
		<get_keyCode set="method"><f a=""><x path="UInt"/></f></get_keyCode>
		<get_relatedObject set="method"><f a=""><c path="flash.display.InteractiveObject"/></f></get_relatedObject>
		<get_shiftKey set="method"><f a=""><x path="Bool"/></f></get_shiftKey>
		<set_isRelatedObjectInaccessible set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_isRelatedObjectInaccessible>
		<set_keyCode set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_keyCode>
		<set_relatedObject set="method"><f a="value">
	<c path="flash.display.InteractiveObject"/>
	<c path="flash.display.InteractiveObject"/>
</f></set_relatedObject>
		<set_shiftKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_shiftKey>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?relatedObject:?shiftKey:?keyCode" v=":true:false::false:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.display.InteractiveObject"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ keyCode : 0, shiftKey : false, cancelable : false, bubbles : true }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.FullScreenEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/FullScreenEvent.hx" extern="1">
		<extends path="flash.events.ActivityEvent"/>
		<FULL_SCREEN final="1" public="1" set="null" static="1"><c path="String"/></FULL_SCREEN>
		<FULL_SCREEN_INTERACTIVE_ACCEPTED final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</FULL_SCREEN_INTERACTIVE_ACCEPTED>
		<fullScreen public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</fullScreen>
		<interactive public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_3</e></m>
			</meta>
		</interactive>
		<get_fullScreen set="method"><f a=""><x path="Bool"/></f></get_fullScreen>
		<get_interactive set="method"><f a=""><x path="Bool"/></f></get_interactive>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?fullScreen:?interactive" v=":false:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ interactive : false, fullScreen : false, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.GameInputEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/GameInputEvent.hx" extern="1" final="1">
		<extends path="flash.events.Event"/>
		<DEVICE_ADDED final="1" public="1" static="1"><c path="String"/></DEVICE_ADDED>
		<DEVICE_REMOVED final="1" public="1" static="1"><c path="String"/></DEVICE_REMOVED>
		<DEVICE_UNUSABLE final="1" public="1" static="1"><c path="String"/></DEVICE_UNUSABLE>
		<device public="1" get="accessor" set="null">
			<c path="flash.ui.GameInputDevice"/>
			<meta><m n=":flash.property"/></meta>
		</device>
		<get_device set="method"><f a=""><c path="flash.ui.GameInputDevice"/></f></get_device>
		<new public="1" expr="{ cancelable : false, bubbles : false }">
			<f a="type:?bubbles:?cancelable:?device">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.ui.GameInputDevice"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash11_8</e></m></meta>
	</class>
	<class path="flash.events.GeolocationEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/GeolocationEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<UPDATE final="1" public="1" set="null" static="1"><c path="String"/></UPDATE>
		<altitude public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</altitude>
		<heading public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</heading>
		<horizontalAccuracy public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</horizontalAccuracy>
		<latitude public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</latitude>
		<longitude public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</longitude>
		<speed public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</speed>
		<timestamp public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</timestamp>
		<verticalAccuracy public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</verticalAccuracy>
		<get_altitude set="method"><f a=""><x path="Float"/></f></get_altitude>
		<get_heading set="method"><f a=""><x path="Float"/></f></get_heading>
		<get_horizontalAccuracy set="method"><f a=""><x path="Float"/></f></get_horizontalAccuracy>
		<get_latitude set="method"><f a=""><x path="Float"/></f></get_latitude>
		<get_longitude set="method"><f a=""><x path="Float"/></f></get_longitude>
		<get_speed set="method"><f a=""><x path="Float"/></f></get_speed>
		<get_timestamp set="method"><f a=""><x path="Float"/></f></get_timestamp>
		<get_verticalAccuracy set="method"><f a=""><x path="Float"/></f></get_verticalAccuracy>
		<set_altitude set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_altitude>
		<set_heading set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_heading>
		<set_horizontalAccuracy set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_horizontalAccuracy>
		<set_latitude set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_latitude>
		<set_longitude set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_longitude>
		<set_speed set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_speed>
		<set_timestamp set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_timestamp>
		<set_verticalAccuracy set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_verticalAccuracy>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?latitude:?longitude:?altitude:?hAccuracy:?vAccuracy:?speed:?heading:?timestamp" v=":false:false:0:0:0:0:0:0:0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ timestamp : 0, heading : 0, speed : 0, vAccuracy : 0, hAccuracy : 0, altitude : 0, longitude : 0, latitude : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.GestureEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/GestureEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<GESTURE_TWO_FINGER_TAP final="1" public="1" set="null" static="1"><c path="String"/></GESTURE_TWO_FINGER_TAP>
		<altKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</altKey>
		<ctrlKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ctrlKey>
		<localX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</localX>
		<localY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</localY>
		<phase public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</phase>
		<shiftKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</shiftKey>
		<stageX public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</stageX>
		<stageY public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</stageY>
		<get_altKey set="method"><f a=""><x path="Bool"/></f></get_altKey>
		<get_ctrlKey set="method"><f a=""><x path="Bool"/></f></get_ctrlKey>
		<get_localX set="method"><f a=""><x path="Float"/></f></get_localX>
		<get_localY set="method"><f a=""><x path="Float"/></f></get_localY>
		<get_phase set="method"><f a=""><c path="String"/></f></get_phase>
		<get_shiftKey set="method"><f a=""><x path="Bool"/></f></get_shiftKey>
		<get_stageX set="method"><f a=""><x path="Float"/></f></get_stageX>
		<get_stageY set="method"><f a=""><x path="Float"/></f></get_stageY>
		<set_altKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_altKey>
		<set_ctrlKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ctrlKey>
		<set_localX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_localX>
		<set_localY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_localY>
		<set_phase set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_phase>
		<set_shiftKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_shiftKey>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?phase:?localX:?localY:?ctrlKey:?altKey:?shiftKey" v=":true:false::0:0:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ shiftKey : false, altKey : false, ctrlKey : false, localY : 0, localX : 0, cancelable : false, bubbles : true }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<abstract path="flash.events.GesturePhase" params="" file="/home/runner/work/haxe/haxe/std/flash/events/GesturePhase.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.events.GesturePhase"</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
		<impl><class path="flash.events._GesturePhase.GesturePhase_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/events/GesturePhase.hx" private="1" module="flash.events.GesturePhase" extern="1" final="1">
	<ALL public="1" set="null" static="1">
		<x path="flash.events.GesturePhase"/>
		<meta><m n=":enum"/></meta>
	</ALL>
	<BEGIN public="1" set="null" static="1">
		<x path="flash.events.GesturePhase"/>
		<meta><m n=":enum"/></meta>
	</BEGIN>
	<END public="1" set="null" static="1">
		<x path="flash.events.GesturePhase"/>
		<meta><m n=":enum"/></meta>
	</END>
	<UPDATE public="1" set="null" static="1">
		<x path="flash.events.GesturePhase"/>
		<meta><m n=":enum"/></meta>
	</UPDATE>
	<meta>
		<m n=":native"><e>"flash.events.GesturePhase"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.events._GesturePhase.GesturePhase_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/events/GesturePhase.hx" private="1" module="flash.events.GesturePhase" extern="1" final="1">
		<ALL public="1" set="null" static="1">
			<x path="flash.events.GesturePhase"/>
			<meta><m n=":enum"/></meta>
		</ALL>
		<BEGIN public="1" set="null" static="1">
			<x path="flash.events.GesturePhase"/>
			<meta><m n=":enum"/></meta>
		</BEGIN>
		<END public="1" set="null" static="1">
			<x path="flash.events.GesturePhase"/>
			<meta><m n=":enum"/></meta>
		</END>
		<UPDATE public="1" set="null" static="1">
			<x path="flash.events.GesturePhase"/>
			<meta><m n=":enum"/></meta>
		</UPDATE>
		<meta>
			<m n=":native"><e>"flash.events.GesturePhase"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.events.HTTPStatusEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/HTTPStatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<HTTP_RESPONSE_STATUS final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</HTTP_RESPONSE_STATUS>
		<HTTP_STATUS final="1" public="1" set="null" static="1"><c path="String"/></HTTP_STATUS>
		<redirected public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</redirected>
		<responseHeaders public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</responseHeaders>
		<responseURL public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</responseURL>
		<status public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</status>
		<get_redirected set="method"><f a=""><x path="Bool"/></f></get_redirected>
		<get_responseHeaders set="method"><f a=""><c path="Array"><d/></c></f></get_responseHeaders>
		<get_responseURL set="method"><f a=""><c path="String"/></f></get_responseURL>
		<get_status set="method"><f a=""><x path="Int"/></f></get_status>
		<set_redirected set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_redirected>
		<set_responseHeaders set="method"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_responseHeaders>
		<set_responseURL set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_responseURL>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?status:?redirected" v=":false:false:0:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ redirected : false, status : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.IMEEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/IMEEvent.hx" extern="1">
		<extends path="flash.events.TextEvent"/>
		<IME_COMPOSITION final="1" public="1" set="null" static="1"><c path="String"/></IME_COMPOSITION>
		<IME_START_COMPOSITION final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</IME_START_COMPOSITION>
		<imeClient public="1" get="accessor" set="accessor">
			<c path="flash.text.ime.IIMEClient"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</imeClient>
		<get_imeClient set="method"><f a=""><c path="flash.text.ime.IIMEClient"/></f></get_imeClient>
		<set_imeClient set="method"><f a="value">
	<c path="flash.text.ime.IIMEClient"/>
	<c path="flash.text.ime.IIMEClient"/>
</f></set_imeClient>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text:?imeClient" v=":false:false::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="flash.text.ime.IIMEClient"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.IOErrorEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/IOErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<DISK_ERROR final="1" public="1" set="null" static="1"><c path="String"/></DISK_ERROR>
		<IO_ERROR final="1" public="1" set="null" static="1"><c path="String"/></IO_ERROR>
		<NETWORK_ERROR final="1" public="1" set="null" static="1"><c path="String"/></NETWORK_ERROR>
		<VERIFY_ERROR final="1" public="1" set="null" static="1"><c path="String"/></VERIFY_ERROR>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text:?id" v=":false:false::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ id : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.KeyboardEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/KeyboardEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<KEY_DOWN final="1" public="1" set="null" static="1"><c path="String"/></KEY_DOWN>
		<KEY_UP final="1" public="1" set="null" static="1"><c path="String"/></KEY_UP>
		<altKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</altKey>
		<charCode public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</charCode>
		<ctrlKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ctrlKey>
		<keyCode public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</keyCode>
		<keyLocation public="1" get="accessor" set="accessor">
			<x path="flash.ui.KeyLocation"/>
			<meta><m n=":flash.property"/></meta>
		</keyLocation>
		<shiftKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</shiftKey>
		<get_altKey set="method"><f a=""><x path="Bool"/></f></get_altKey>
		<get_charCode set="method"><f a=""><x path="UInt"/></f></get_charCode>
		<get_ctrlKey set="method"><f a=""><x path="Bool"/></f></get_ctrlKey>
		<get_keyCode set="method"><f a=""><x path="UInt"/></f></get_keyCode>
		<get_keyLocation set="method"><f a=""><x path="flash.ui.KeyLocation"/></f></get_keyLocation>
		<get_shiftKey set="method"><f a=""><x path="Bool"/></f></get_shiftKey>
		<set_altKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_altKey>
		<set_charCode set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_charCode>
		<set_ctrlKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ctrlKey>
		<set_keyCode set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_keyCode>
		<set_keyLocation set="method"><f a="value">
	<x path="flash.ui.KeyLocation"/>
	<x path="flash.ui.KeyLocation"/>
</f></set_keyLocation>
		<set_shiftKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_shiftKey>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?charCodeValue:?keyCodeValue:?keyLocationValue:?ctrlKeyValue:?altKeyValue:?shiftKeyValue" v=":true:false:0:0:flash.ui.KeyLocation.D_PAD:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="flash.ui.KeyLocation"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ shiftKeyValue : false, altKeyValue : false, ctrlKeyValue : false, keyLocationValue : flash.ui.KeyLocation.D_PAD, keyCodeValue : 0, charCodeValue : 0, cancelable : false, bubbles : true }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.MouseEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/MouseEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<CLICK final="1" public="1" set="null" static="1"><c path="String"/></CLICK>
		<CONTEXT_MENU final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</CONTEXT_MENU>
		<DOUBLE_CLICK final="1" public="1" set="null" static="1"><c path="String"/></DOUBLE_CLICK>
		<MIDDLE_CLICK final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</MIDDLE_CLICK>
		<MIDDLE_MOUSE_DOWN final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</MIDDLE_MOUSE_DOWN>
		<MIDDLE_MOUSE_UP final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</MIDDLE_MOUSE_UP>
		<MOUSE_DOWN final="1" public="1" set="null" static="1"><c path="String"/></MOUSE_DOWN>
		<MOUSE_MOVE final="1" public="1" set="null" static="1"><c path="String"/></MOUSE_MOVE>
		<MOUSE_OUT final="1" public="1" set="null" static="1"><c path="String"/></MOUSE_OUT>
		<MOUSE_OVER final="1" public="1" set="null" static="1"><c path="String"/></MOUSE_OVER>
		<MOUSE_UP final="1" public="1" set="null" static="1"><c path="String"/></MOUSE_UP>
		<MOUSE_WHEEL final="1" public="1" set="null" static="1"><c path="String"/></MOUSE_WHEEL>
		<RELEASE_OUTSIDE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</RELEASE_OUTSIDE>
		<RIGHT_CLICK final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</RIGHT_CLICK>
		<RIGHT_MOUSE_DOWN final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</RIGHT_MOUSE_DOWN>
		<RIGHT_MOUSE_UP final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</RIGHT_MOUSE_UP>
		<ROLL_OUT final="1" public="1" set="null" static="1"><c path="String"/></ROLL_OUT>
		<ROLL_OVER final="1" public="1" set="null" static="1"><c path="String"/></ROLL_OVER>
		<altKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</altKey>
		<buttonDown public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</buttonDown>
		<ctrlKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ctrlKey>
		<delta public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</delta>
		<isRelatedObjectInaccessible public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</isRelatedObjectInaccessible>
		<localX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</localX>
		<localY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</localY>
		<movementX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_2</e></m>
			</meta>
		</movementX>
		<movementY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_2</e></m>
			</meta>
		</movementY>
		<relatedObject public="1" get="accessor" set="accessor">
			<c path="flash.display.InteractiveObject"/>
			<meta><m n=":flash.property"/></meta>
		</relatedObject>
		<shiftKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</shiftKey>
		<stageX public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</stageX>
		<stageY public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</stageY>
		<get_altKey set="method"><f a=""><x path="Bool"/></f></get_altKey>
		<get_buttonDown set="method"><f a=""><x path="Bool"/></f></get_buttonDown>
		<get_ctrlKey set="method"><f a=""><x path="Bool"/></f></get_ctrlKey>
		<get_delta set="method"><f a=""><x path="Int"/></f></get_delta>
		<get_isRelatedObjectInaccessible set="method"><f a=""><x path="Bool"/></f></get_isRelatedObjectInaccessible>
		<get_localX set="method"><f a=""><x path="Float"/></f></get_localX>
		<get_localY set="method"><f a=""><x path="Float"/></f></get_localY>
		<get_movementX set="method"><f a=""><x path="Float"/></f></get_movementX>
		<get_movementY set="method"><f a=""><x path="Float"/></f></get_movementY>
		<get_relatedObject set="method"><f a=""><c path="flash.display.InteractiveObject"/></f></get_relatedObject>
		<get_shiftKey set="method"><f a=""><x path="Bool"/></f></get_shiftKey>
		<get_stageX set="method"><f a=""><x path="Float"/></f></get_stageX>
		<get_stageY set="method"><f a=""><x path="Float"/></f></get_stageY>
		<set_altKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_altKey>
		<set_buttonDown set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_buttonDown>
		<set_ctrlKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ctrlKey>
		<set_delta set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_delta>
		<set_isRelatedObjectInaccessible set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_isRelatedObjectInaccessible>
		<set_localX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_localX>
		<set_localY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_localY>
		<set_movementX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_movementX>
		<set_movementY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_movementY>
		<set_relatedObject set="method"><f a="value">
	<c path="flash.display.InteractiveObject"/>
	<c path="flash.display.InteractiveObject"/>
</f></set_relatedObject>
		<set_shiftKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_shiftKey>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?localX:?localY:?relatedObject:?ctrlKey:?altKey:?shiftKey:?buttonDown:?delta" v=":true:false:0:0::false:false:false:false:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="flash.display.InteractiveObject"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ delta : 0, buttonDown : false, shiftKey : false, altKey : false, ctrlKey : false, localY : 0, localX : 0, cancelable : false, bubbles : true }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.NetDataEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/NetDataEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<MEDIA_TYPE_DATA final="1" public="1" set="null" static="1"><c path="String"/></MEDIA_TYPE_DATA>
		<info public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</info>
		<timestamp public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</timestamp>
		<get_info set="method"><f a=""><d/></f></get_info>
		<get_timestamp set="method"><f a=""><x path="Float"/></f></get_timestamp>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?timestamp:?info" v=":false:false:0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ timestamp : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.NetFilterEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/NetFilterEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<data public="1"><c path="flash.utils.ByteArray"/></data>
		<header public="1"><c path="flash.utils.ByteArray"/></header>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?header:?data" v=":false:false::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.utils.ByteArray"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.NetMonitorEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/NetMonitorEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<NET_STREAM_CREATE final="1" public="1" set="null" static="1"><c path="String"/></NET_STREAM_CREATE>
		<netStream public="1" get="accessor" set="null">
			<c path="flash.net.NetStream"/>
			<meta><m n=":flash.property"/></meta>
		</netStream>
		<get_netStream set="method"><f a=""><c path="flash.net.NetStream"/></f></get_netStream>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?netStream" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.net.NetStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.NetStatusEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/NetStatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<NET_STATUS final="1" public="1" set="null" static="1"><c path="String"/></NET_STATUS>
		<info public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</info>
		<get_info set="method"><f a=""><d/></f></get_info>
		<set_info set="method"><f a="value">
	<d/>
	<d/>
</f></set_info>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?info" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.OutputProgressEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/OutputProgressEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<OUTPUT_PROGRESS final="1" public="1" set="null" static="1"><c path="String"/></OUTPUT_PROGRESS>
		<bytesPending public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesPending>
		<bytesTotal public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesTotal>
		<get_bytesPending set="method"><f a=""><x path="Float"/></f></get_bytesPending>
		<get_bytesTotal set="method"><f a=""><x path="Float"/></f></get_bytesTotal>
		<set_bytesPending set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bytesPending>
		<set_bytesTotal set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bytesTotal>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?bytesPending:?bytesTotal" v=":false:false:0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ bytesTotal : 0, bytesPending : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.PressAndTapGestureEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/PressAndTapGestureEvent.hx" extern="1">
		<extends path="flash.events.GestureEvent"/>
		<GESTURE_PRESS_AND_TAP final="1" public="1" set="null" static="1"><c path="String"/></GESTURE_PRESS_AND_TAP>
		<tapLocalX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</tapLocalX>
		<tapLocalY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</tapLocalY>
		<tapStageX public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</tapStageX>
		<tapStageY public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</tapStageY>
		<get_tapLocalX set="method"><f a=""><x path="Float"/></f></get_tapLocalX>
		<get_tapLocalY set="method"><f a=""><x path="Float"/></f></get_tapLocalY>
		<get_tapStageX set="method"><f a=""><x path="Float"/></f></get_tapStageX>
		<get_tapStageY set="method"><f a=""><x path="Float"/></f></get_tapStageY>
		<set_tapLocalX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_tapLocalX>
		<set_tapLocalY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_tapLocalY>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?phase:?localX:?localY:?tapLocalX:?tapLocalY:?ctrlKey:?altKey:?shiftKey" v=":true:false::0:0:0:0:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ shiftKey : false, altKey : false, ctrlKey : false, tapLocalY : 0, tapLocalX : 0, localY : 0, localX : 0, cancelable : false, bubbles : true }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.ProgressEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/ProgressEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<PROGRESS final="1" public="1" set="null" static="1"><c path="String"/></PROGRESS>
		<SOCKET_DATA final="1" public="1" set="null" static="1"><c path="String"/></SOCKET_DATA>
		<bytesLoaded public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesLoaded>
		<bytesTotal public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesTotal>
		<get_bytesLoaded set="method"><f a=""><x path="Float"/></f></get_bytesLoaded>
		<get_bytesTotal set="method"><f a=""><x path="Float"/></f></get_bytesTotal>
		<set_bytesLoaded set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bytesLoaded>
		<set_bytesTotal set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bytesTotal>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?bytesLoaded:?bytesTotal" v=":false:false:0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ bytesTotal : 0, bytesLoaded : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.SampleDataEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/SampleDataEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<SAMPLE_DATA final="1" public="1" set="null" static="1"><c path="String"/></SAMPLE_DATA>
		<data public="1" get="accessor" set="accessor">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":flash.property"/></meta>
		</data>
		<position public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</position>
		<get_data set="method"><f a=""><c path="flash.utils.ByteArray"/></f></get_data>
		<get_position set="method"><f a=""><x path="Float"/></f></get_position>
		<set_data set="method"><f a="value">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
</f></set_data>
		<set_position set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_position>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?theposition:?thedata" v=":false:false:0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ theposition : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.SecurityErrorEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/SecurityErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<SECURITY_ERROR final="1" public="1" set="null" static="1"><c path="String"/></SECURITY_ERROR>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text:?id" v=":false:false::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ id : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.ShaderEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/ShaderEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<COMPLETE final="1" public="1" set="null" static="1"><c path="String"/></COMPLETE>
		<bitmapData public="1" get="accessor" set="accessor">
			<c path="flash.display.BitmapData"/>
			<meta><m n=":flash.property"/></meta>
		</bitmapData>
		<byteArray public="1" get="accessor" set="accessor">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":flash.property"/></meta>
		</byteArray>
		<vector public="1" get="accessor" set="accessor">
			<c path="flash.Vector"><x path="Float"/></c>
			<meta><m n=":flash.property"/></meta>
		</vector>
		<get_bitmapData set="method"><f a=""><c path="flash.display.BitmapData"/></f></get_bitmapData>
		<get_byteArray set="method"><f a=""><c path="flash.utils.ByteArray"/></f></get_byteArray>
		<get_vector set="method"><f a=""><c path="flash.Vector"><x path="Float"/></c></f></get_vector>
		<set_bitmapData set="method"><f a="value">
	<c path="flash.display.BitmapData"/>
	<c path="flash.display.BitmapData"/>
</f></set_bitmapData>
		<set_byteArray set="method"><f a="value">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
</f></set_byteArray>
		<set_vector set="method"><f a="value">
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
</f></set_vector>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?bitmap:?array:?vector" v=":false:false:::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.display.BitmapData"/>
				<c path="flash.utils.ByteArray"/>
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.SoftKeyboardEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/SoftKeyboardEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<SOFT_KEYBOARD_ACTIVATE final="1" public="1" set="null" static="1"><c path="String"/></SOFT_KEYBOARD_ACTIVATE>
		<SOFT_KEYBOARD_ACTIVATING final="1" public="1" set="null" static="1"><c path="String"/></SOFT_KEYBOARD_ACTIVATING>
		<SOFT_KEYBOARD_DEACTIVATE final="1" public="1" set="null" static="1"><c path="String"/></SOFT_KEYBOARD_DEACTIVATE>
		<relatedObject public="1" get="accessor" set="accessor">
			<c path="flash.display.InteractiveObject"/>
			<meta><m n=":flash.property"/></meta>
		</relatedObject>
		<triggerType public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</triggerType>
		<get_relatedObject set="method"><f a=""><c path="flash.display.InteractiveObject"/></f></get_relatedObject>
		<get_triggerType set="method"><f a=""><c path="String"/></f></get_triggerType>
		<set_relatedObject set="method"><f a="value">
	<c path="flash.display.InteractiveObject"/>
	<c path="flash.display.InteractiveObject"/>
</f></set_relatedObject>
		<new public="1" set="method"><f a="type:bubbles:cancelable:relatedObjectVal:triggerTypeVal">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="flash.display.InteractiveObject"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.SoftKeyboardTrigger" params="" file="/home/runner/work/haxe/haxe/std/flash/events/SoftKeyboardTrigger.hx" extern="1">
		<CONTENT_TRIGGERED final="1" public="1" set="null" static="1"><c path="String"/></CONTENT_TRIGGERED>
		<USER_TRIGGERED final="1" public="1" set="null" static="1"><c path="String"/></USER_TRIGGERED>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.events.StageVideoAvailabilityEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/StageVideoAvailabilityEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<STAGE_VIDEO_AVAILABILITY final="1" public="1" set="null" static="1"><c path="String"/></STAGE_VIDEO_AVAILABILITY>
		<availability public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</availability>
		<driver final="1" public="1"><c path="String"/></driver>
		<reason final="1" public="1"><c path="String"/></reason>
		<get_availability set="method"><f a=""><c path="String"/></f></get_availability>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?availability" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.StageVideoEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/StageVideoEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<RENDER_STATE final="1" public="1" set="null" static="1"><c path="String"/></RENDER_STATE>
		<RENDER_STATUS_ACCELERATED final="1" public="1" set="null" static="1"><c path="String"/></RENDER_STATUS_ACCELERATED>
		<RENDER_STATUS_SOFTWARE final="1" public="1" set="null" static="1"><c path="String"/></RENDER_STATUS_SOFTWARE>
		<RENDER_STATUS_UNAVAILABLE final="1" public="1" set="null" static="1"><c path="String"/></RENDER_STATUS_UNAVAILABLE>
		<codecInfo final="1" public="1"><c path="String"/></codecInfo>
		<colorSpace public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</colorSpace>
		<status public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</status>
		<get_colorSpace set="method"><f a=""><c path="String"/></f></get_colorSpace>
		<get_status set="method"><f a=""><c path="String"/></f></get_status>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?status:?colorSpace" v=":false:false::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.events.StatusEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/StatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<STATUS final="1" public="1" set="null" static="1"><c path="String"/></STATUS>
		<code public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</code>
		<level public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</level>
		<get_code set="method"><f a=""><c path="String"/></f></get_code>
		<get_level set="method"><f a=""><c path="String"/></f></get_level>
		<set_code set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_code>
		<set_level set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_level>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?code:?level" v=":false:false::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.SyncEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/SyncEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<SYNC final="1" public="1" set="null" static="1"><c path="String"/></SYNC>
		<changeList public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</changeList>
		<get_changeList set="method"><f a=""><c path="Array"><d/></c></f></get_changeList>
		<set_changeList set="method"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_changeList>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?changeList" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.ThrottleEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/ThrottleEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<THROTTLE final="1" public="1" set="null" static="1"><c path="String"/></THROTTLE>
		<state public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</state>
		<targetFrameRate public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</targetFrameRate>
		<get_state set="method"><f a=""><c path="String"/></f></get_state>
		<get_targetFrameRate set="method"><f a=""><x path="Float"/></f></get_targetFrameRate>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?state:?targetFrameRate" v=":false:false::0">
				<x path="flash.events.ThrottleType"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ targetFrameRate : 0, cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash11_2</e></m></meta>
	</class>
	<abstract path="flash.events.ThrottleType" params="" file="/home/runner/work/haxe/haxe/std/flash/events/ThrottleType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.events.ThrottleType"</e></m>
		</meta>
		<impl><class path="flash.events._ThrottleType.ThrottleType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/events/ThrottleType.hx" private="1" module="flash.events.ThrottleType" extern="1" final="1">
	<PAUSE public="1" set="null" static="1">
		<x path="flash.events.ThrottleType"/>
		<meta><m n=":enum"/></meta>
	</PAUSE>
	<RESUME public="1" set="null" static="1">
		<x path="flash.events.ThrottleType"/>
		<meta><m n=":enum"/></meta>
	</RESUME>
	<THROTTLE public="1" set="null" static="1">
		<x path="flash.events.ThrottleType"/>
		<meta><m n=":enum"/></meta>
	</THROTTLE>
	<meta>
		<m n=":native"><e>"flash.events.ThrottleType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.events._ThrottleType.ThrottleType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/events/ThrottleType.hx" private="1" module="flash.events.ThrottleType" extern="1" final="1">
		<PAUSE public="1" set="null" static="1">
			<x path="flash.events.ThrottleType"/>
			<meta><m n=":enum"/></meta>
		</PAUSE>
		<RESUME public="1" set="null" static="1">
			<x path="flash.events.ThrottleType"/>
			<meta><m n=":enum"/></meta>
		</RESUME>
		<THROTTLE public="1" set="null" static="1">
			<x path="flash.events.ThrottleType"/>
			<meta><m n=":enum"/></meta>
		</THROTTLE>
		<meta>
			<m n=":native"><e>"flash.events.ThrottleType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.events.TimerEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/TimerEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<TIMER final="1" public="1" set="null" static="1"><c path="String"/></TIMER>
		<TIMER_COMPLETE final="1" public="1" set="null" static="1"><c path="String"/></TIMER_COMPLETE>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable" v=":false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.TouchEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/TouchEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<PROXIMITY_BEGIN final="1" public="1" set="null" static="1"><c path="String"/></PROXIMITY_BEGIN>
		<PROXIMITY_END final="1" public="1" set="null" static="1"><c path="String"/></PROXIMITY_END>
		<PROXIMITY_MOVE final="1" public="1" set="null" static="1"><c path="String"/></PROXIMITY_MOVE>
		<PROXIMITY_OUT final="1" public="1" set="null" static="1"><c path="String"/></PROXIMITY_OUT>
		<PROXIMITY_OVER final="1" public="1" set="null" static="1"><c path="String"/></PROXIMITY_OVER>
		<PROXIMITY_ROLL_OUT final="1" public="1" set="null" static="1"><c path="String"/></PROXIMITY_ROLL_OUT>
		<PROXIMITY_ROLL_OVER final="1" public="1" set="null" static="1"><c path="String"/></PROXIMITY_ROLL_OVER>
		<TOUCH_BEGIN final="1" public="1" set="null" static="1"><c path="String"/></TOUCH_BEGIN>
		<TOUCH_END final="1" public="1" set="null" static="1"><c path="String"/></TOUCH_END>
		<TOUCH_MOVE final="1" public="1" set="null" static="1"><c path="String"/></TOUCH_MOVE>
		<TOUCH_OUT final="1" public="1" set="null" static="1"><c path="String"/></TOUCH_OUT>
		<TOUCH_OVER final="1" public="1" set="null" static="1"><c path="String"/></TOUCH_OVER>
		<TOUCH_ROLL_OUT final="1" public="1" set="null" static="1"><c path="String"/></TOUCH_ROLL_OUT>
		<TOUCH_ROLL_OVER final="1" public="1" set="null" static="1"><c path="String"/></TOUCH_ROLL_OVER>
		<TOUCH_TAP final="1" public="1" set="null" static="1"><c path="String"/></TOUCH_TAP>
		<altKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</altKey>
		<ctrlKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ctrlKey>
		<isPrimaryTouchPoint public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isPrimaryTouchPoint>
		<isRelatedObjectInaccessible public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isRelatedObjectInaccessible>
		<localX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</localX>
		<localY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</localY>
		<pressure public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</pressure>
		<relatedObject public="1" get="accessor" set="accessor">
			<c path="flash.display.InteractiveObject"/>
			<meta><m n=":flash.property"/></meta>
		</relatedObject>
		<shiftKey public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</shiftKey>
		<sizeX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</sizeX>
		<sizeY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</sizeY>
		<stageX public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</stageX>
		<stageY public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</stageY>
		<touchPointID public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</touchPointID>
		<get_altKey set="method"><f a=""><x path="Bool"/></f></get_altKey>
		<get_ctrlKey set="method"><f a=""><x path="Bool"/></f></get_ctrlKey>
		<get_isPrimaryTouchPoint set="method"><f a=""><x path="Bool"/></f></get_isPrimaryTouchPoint>
		<get_isRelatedObjectInaccessible set="method"><f a=""><x path="Bool"/></f></get_isRelatedObjectInaccessible>
		<get_localX set="method"><f a=""><x path="Float"/></f></get_localX>
		<get_localY set="method"><f a=""><x path="Float"/></f></get_localY>
		<get_pressure set="method"><f a=""><x path="Float"/></f></get_pressure>
		<get_relatedObject set="method"><f a=""><c path="flash.display.InteractiveObject"/></f></get_relatedObject>
		<get_shiftKey set="method"><f a=""><x path="Bool"/></f></get_shiftKey>
		<get_sizeX set="method"><f a=""><x path="Float"/></f></get_sizeX>
		<get_sizeY set="method"><f a=""><x path="Float"/></f></get_sizeY>
		<get_stageX set="method"><f a=""><x path="Float"/></f></get_stageX>
		<get_stageY set="method"><f a=""><x path="Float"/></f></get_stageY>
		<get_touchPointID set="method"><f a=""><x path="Int"/></f></get_touchPointID>
		<set_altKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_altKey>
		<set_ctrlKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ctrlKey>
		<set_isPrimaryTouchPoint set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_isPrimaryTouchPoint>
		<set_isRelatedObjectInaccessible set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_isRelatedObjectInaccessible>
		<set_localX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_localX>
		<set_localY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_localY>
		<set_pressure set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pressure>
		<set_relatedObject set="method"><f a="value">
	<c path="flash.display.InteractiveObject"/>
	<c path="flash.display.InteractiveObject"/>
</f></set_relatedObject>
		<set_shiftKey set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_shiftKey>
		<set_sizeX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_sizeX>
		<set_sizeY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_sizeY>
		<set_touchPointID set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_touchPointID>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?touchPointID:?isPrimaryTouchPoint:?localX:?localY:?sizeX:?sizeY:?pressure:?relatedObject:?ctrlKey:?altKey:?shiftKey" v=":true:false:0:false:0.:0.:0.:0.:0.::false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="flash.display.InteractiveObject"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ shiftKey : false, altKey : false, ctrlKey : false, pressure : 0., sizeY : 0., sizeX : 0., localY : 0., localX : 0., isPrimaryTouchPoint : false, touchPointID : 0, cancelable : false, bubbles : true }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.TransformGestureEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/TransformGestureEvent.hx" extern="1">
		<extends path="flash.events.GestureEvent"/>
		<GESTURE_DIRECTIONAL_TAP final="1" public="1" set="null" static="1"><c path="String"/></GESTURE_DIRECTIONAL_TAP>
		<GESTURE_PAN final="1" public="1" set="null" static="1"><c path="String"/></GESTURE_PAN>
		<GESTURE_ROTATE final="1" public="1" set="null" static="1"><c path="String"/></GESTURE_ROTATE>
		<GESTURE_SWIPE final="1" public="1" set="null" static="1"><c path="String"/></GESTURE_SWIPE>
		<GESTURE_ZOOM final="1" public="1" set="null" static="1"><c path="String"/></GESTURE_ZOOM>
		<offsetX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</offsetX>
		<offsetY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</offsetY>
		<rotation public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</rotation>
		<scaleX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</scaleX>
		<scaleY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</scaleY>
		<velocity public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</velocity>
		<get_offsetX set="method"><f a=""><x path="Float"/></f></get_offsetX>
		<get_offsetY set="method"><f a=""><x path="Float"/></f></get_offsetY>
		<get_rotation set="method"><f a=""><x path="Float"/></f></get_rotation>
		<get_scaleX set="method"><f a=""><x path="Float"/></f></get_scaleX>
		<get_scaleY set="method"><f a=""><x path="Float"/></f></get_scaleY>
		<get_velocity set="method"><f a=""><x path="Float"/></f></get_velocity>
		<set_offsetX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_offsetX>
		<set_offsetY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_offsetY>
		<set_rotation set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotation>
		<set_scaleX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleX>
		<set_scaleY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleY>
		<set_velocity set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_velocity>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?phase:?localX:?localY:?scaleX:?scaleY:?rotation:?offsetX:?offsetY:?ctrlKey:?altKey:?shiftKey" v=":true:false::0:0:1:1:0:0:0:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ shiftKey : false, altKey : false, ctrlKey : false, offsetY : 0, offsetX : 0, rotation : 0, scaleY : 1, scaleX : 1, localY : 0, localX : 0, cancelable : false, bubbles : true }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.UncaughtErrorEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/UncaughtErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<UNCAUGHT_ERROR final="1" public="1" set="null" static="1"><c path="String"/></UNCAUGHT_ERROR>
		<error public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</error>
		<get_error set="method"><f a=""><d/></f></get_error>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?error_in" v=":true:true:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : true, bubbles : true }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.UncaughtErrorEvents" params="" file="/home/runner/work/haxe/haxe/std/flash/events/UncaughtErrorEvents.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.VideoEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/VideoEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<RENDER_STATE final="1" public="1" set="null" static="1"><c path="String"/></RENDER_STATE>
		<RENDER_STATUS_ACCELERATED final="1" public="1" set="null" static="1"><c path="String"/></RENDER_STATUS_ACCELERATED>
		<RENDER_STATUS_SOFTWARE final="1" public="1" set="null" static="1"><c path="String"/></RENDER_STATUS_SOFTWARE>
		<RENDER_STATUS_UNAVAILABLE final="1" public="1" set="null" static="1"><c path="String"/></RENDER_STATUS_UNAVAILABLE>
		<codecInfo final="1" public="1"><c path="String"/></codecInfo>
		<status public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</status>
		<get_status set="method"><f a=""><c path="String"/></f></get_status>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?status" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.events.VideoTextureEvent" params="" file="/home/runner/work/haxe/haxe/std/flash/events/VideoTextureEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<RENDER_STATE final="1" public="1" set="null" static="1"><c path="String"/></RENDER_STATE>
		<codecInfo final="1" public="1"><c path="String"/></codecInfo>
		<colorSpace public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</colorSpace>
		<status public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</status>
		<get_colorSpace set="method"><f a=""><c path="String"/></f></get_colorSpace>
		<get_status set="method"><f a=""><c path="String"/></f></get_status>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?status:?colorSpace" v=":false:false::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ cancelable : false, bubbles : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.events.WeakFunctionClosure" params="" file="/home/runner/work/haxe/haxe/std/flash/events/WeakFunctionClosure.hx" extern="1"/>
	<class path="flash.events.WeakMethodClosure" params="" file="/home/runner/work/haxe/haxe/std/flash/events/WeakMethodClosure.hx" extern="1"><new public="1" set="method"><f a=""><x path="Void"/></f></new></class>
	<class path="flash.external.ExternalInterface" params="" file="/home/runner/work/haxe/haxe/std/flash/external/ExternalInterface.hx" extern="1">
		<available public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</available>
		<marshallExceptions public="1" static="1"><x path="Bool"/></marshallExceptions>
		<objectID public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</objectID>
		<addCallback public="1" set="method" static="1"><f a="functionName:closure">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></addCallback>
		<call public="1" set="method" static="1"><f a="functionName:restArgs">
	<c path="String"/>
	<t path="haxe.extern.Rest"><d/></t>
	<d/>
</f></call>
		<get_available set="method" static="1"><f a=""><x path="Bool"/></f></get_available>
		<get_objectID set="method" static="1"><f a=""><c path="String"/></f></get_objectID>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.filters.BevelFilter" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/BevelFilter.hx" extern="1" final="1">
		<extends path="flash.filters.BitmapFilter"/>
		<angle public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</angle>
		<blurX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</blurX>
		<blurY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</blurY>
		<distance public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</distance>
		<highlightAlpha public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</highlightAlpha>
		<highlightColor public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</highlightColor>
		<knockout public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</knockout>
		<quality public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</quality>
		<shadowAlpha public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</shadowAlpha>
		<shadowColor public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</shadowColor>
		<strength public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</strength>
		<type public="1" get="accessor" set="accessor">
			<x path="flash.filters.BitmapFilterType"/>
			<meta><m n=":flash.property"/></meta>
		</type>
		<get_angle set="method"><f a=""><x path="Float"/></f></get_angle>
		<get_blurX set="method"><f a=""><x path="Float"/></f></get_blurX>
		<get_blurY set="method"><f a=""><x path="Float"/></f></get_blurY>
		<get_distance set="method"><f a=""><x path="Float"/></f></get_distance>
		<get_highlightAlpha set="method"><f a=""><x path="Float"/></f></get_highlightAlpha>
		<get_highlightColor set="method"><f a=""><x path="UInt"/></f></get_highlightColor>
		<get_knockout set="method"><f a=""><x path="Bool"/></f></get_knockout>
		<get_quality set="method"><f a=""><x path="Int"/></f></get_quality>
		<get_shadowAlpha set="method"><f a=""><x path="Float"/></f></get_shadowAlpha>
		<get_shadowColor set="method"><f a=""><x path="UInt"/></f></get_shadowColor>
		<get_strength set="method"><f a=""><x path="Float"/></f></get_strength>
		<get_type set="method"><f a=""><x path="flash.filters.BitmapFilterType"/></f></get_type>
		<set_angle set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_angle>
		<set_blurX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_blurX>
		<set_blurY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_blurY>
		<set_distance set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_distance>
		<set_highlightAlpha set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_highlightAlpha>
		<set_highlightColor set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_highlightColor>
		<set_knockout set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_knockout>
		<set_quality set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_quality>
		<set_shadowAlpha set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_shadowAlpha>
		<set_shadowColor set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_shadowColor>
		<set_strength set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_strength>
		<set_type set="method"><f a="value">
	<x path="flash.filters.BitmapFilterType"/>
	<x path="flash.filters.BitmapFilterType"/>
</f></set_type>
		<new public="1" set="method">
			<f a="?distance:?angle:?highlightColor:?highlightAlpha:?shadowColor:?shadowAlpha:?blurX:?blurY:?strength:?quality:?type:?knockout" v="4:45:0xFFFFFF:1:0:1:4:4:1:1::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="flash.filters.BitmapFilterType"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ knockout : false, quality : 1, strength : 1, blurY : 4, blurX : 4, shadowAlpha : 1, shadowColor : 0, highlightAlpha : 1, highlightColor : 0xFFFFFF, angle : 45, distance : 4 }</e></m></meta>
		</new>
	</class>
	<class path="flash.filters.BitmapFilterQuality" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/BitmapFilterQuality.hx" extern="1">
		<HIGH public="1" get="inline" set="null" expr="3" line="4" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HIGH>
		<LOW public="1" get="inline" set="null" expr="1" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LOW>
		<MEDIUM public="1" get="inline" set="null" expr="2" line="6" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</MEDIUM>
	</class>
	<abstract path="flash.filters.BitmapFilterType" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/BitmapFilterType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.filters.BitmapFilterType"</e></m>
		</meta>
		<impl><class path="flash.filters._BitmapFilterType.BitmapFilterType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/BitmapFilterType.hx" private="1" module="flash.filters.BitmapFilterType" extern="1" final="1">
	<FULL public="1" set="null" static="1">
		<x path="flash.filters.BitmapFilterType"/>
		<meta><m n=":enum"/></meta>
	</FULL>
	<INNER public="1" set="null" static="1">
		<x path="flash.filters.BitmapFilterType"/>
		<meta><m n=":enum"/></meta>
	</INNER>
	<OUTER public="1" set="null" static="1">
		<x path="flash.filters.BitmapFilterType"/>
		<meta><m n=":enum"/></meta>
	</OUTER>
	<meta>
		<m n=":native"><e>"flash.filters.BitmapFilterType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.filters._BitmapFilterType.BitmapFilterType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/BitmapFilterType.hx" private="1" module="flash.filters.BitmapFilterType" extern="1" final="1">
		<FULL public="1" set="null" static="1">
			<x path="flash.filters.BitmapFilterType"/>
			<meta><m n=":enum"/></meta>
		</FULL>
		<INNER public="1" set="null" static="1">
			<x path="flash.filters.BitmapFilterType"/>
			<meta><m n=":enum"/></meta>
		</INNER>
		<OUTER public="1" set="null" static="1">
			<x path="flash.filters.BitmapFilterType"/>
			<meta><m n=":enum"/></meta>
		</OUTER>
		<meta>
			<m n=":native"><e>"flash.filters.BitmapFilterType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.filters.BlurFilter" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/BlurFilter.hx" extern="1" final="1">
		<extends path="flash.filters.BitmapFilter"/>
		<blurX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</blurX>
		<blurY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</blurY>
		<quality public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</quality>
		<get_blurX set="method"><f a=""><x path="Float"/></f></get_blurX>
		<get_blurY set="method"><f a=""><x path="Float"/></f></get_blurY>
		<get_quality set="method"><f a=""><x path="Int"/></f></get_quality>
		<set_blurX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_blurX>
		<set_blurY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_blurY>
		<set_quality set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_quality>
		<new public="1" set="method">
			<f a="?blurX:?blurY:?quality" v="4:4:1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ quality : 1, blurY : 4, blurX : 4 }</e></m></meta>
		</new>
	</class>
	<class path="flash.filters.ColorMatrixFilter" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/ColorMatrixFilter.hx" extern="1" final="1">
		<extends path="flash.filters.BitmapFilter"/>
		<matrix public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</matrix>
		<get_matrix set="method"><f a=""><c path="Array"><d/></c></f></get_matrix>
		<set_matrix set="method"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_matrix>
		<new public="1" set="method"><f a="?matrix">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.ConvolutionFilter" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/ConvolutionFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</alpha>
		<bias public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bias>
		<clamp public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</clamp>
		<color public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</color>
		<divisor public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</divisor>
		<matrix public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</matrix>
		<matrixX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</matrixX>
		<matrixY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</matrixY>
		<preserveAlpha public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</preserveAlpha>
		<get_alpha set="method"><f a=""><x path="Float"/></f></get_alpha>
		<get_bias set="method"><f a=""><x path="Float"/></f></get_bias>
		<get_clamp set="method"><f a=""><x path="Bool"/></f></get_clamp>
		<get_color set="method"><f a=""><x path="UInt"/></f></get_color>
		<get_divisor set="method"><f a=""><x path="Float"/></f></get_divisor>
		<get_matrix set="method"><f a=""><c path="Array"><d/></c></f></get_matrix>
		<get_matrixX set="method"><f a=""><x path="Float"/></f></get_matrixX>
		<get_matrixY set="method"><f a=""><x path="Float"/></f></get_matrixY>
		<get_preserveAlpha set="method"><f a=""><x path="Bool"/></f></get_preserveAlpha>
		<set_alpha set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<set_bias set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bias>
		<set_clamp set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_clamp>
		<set_color set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_color>
		<set_divisor set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_divisor>
		<set_matrix set="method"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_matrix>
		<set_matrixX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_matrixX>
		<set_matrixY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_matrixY>
		<set_preserveAlpha set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_preserveAlpha>
		<new public="1" set="method">
			<f a="?matrixX:?matrixY:?matrix:?divisor:?bias:?preserveAlpha:?clamp:?color:?alpha" v="0:0::1:0:true:true:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><d/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 0, color : 0, clamp : true, preserveAlpha : true, bias : 0, divisor : 1, matrixY : 0, matrixX : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.filters.DisplacementMapFilter" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/DisplacementMapFilter.hx" extern="1" final="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</alpha>
		<color public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</color>
		<componentX public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</componentX>
		<componentY public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</componentY>
		<mapBitmap public="1" get="accessor" set="accessor">
			<c path="flash.display.BitmapData"/>
			<meta><m n=":flash.property"/></meta>
		</mapBitmap>
		<mapPoint public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</mapPoint>
		<mode public="1" get="accessor" set="accessor">
			<x path="flash.filters.DisplacementMapFilterMode"/>
			<meta><m n=":flash.property"/></meta>
		</mode>
		<scaleX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</scaleX>
		<scaleY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</scaleY>
		<get_alpha set="method"><f a=""><x path="Float"/></f></get_alpha>
		<get_color set="method"><f a=""><x path="UInt"/></f></get_color>
		<get_componentX set="method"><f a=""><x path="UInt"/></f></get_componentX>
		<get_componentY set="method"><f a=""><x path="UInt"/></f></get_componentY>
		<get_mapBitmap set="method"><f a=""><c path="flash.display.BitmapData"/></f></get_mapBitmap>
		<get_mapPoint set="method"><f a=""><c path="flash.geom.Point"/></f></get_mapPoint>
		<get_mode set="method"><f a=""><x path="flash.filters.DisplacementMapFilterMode"/></f></get_mode>
		<get_scaleX set="method"><f a=""><x path="Float"/></f></get_scaleX>
		<get_scaleY set="method"><f a=""><x path="Float"/></f></get_scaleY>
		<set_alpha set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<set_color set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_color>
		<set_componentX set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_componentX>
		<set_componentY set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_componentY>
		<set_mapBitmap set="method"><f a="value">
	<c path="flash.display.BitmapData"/>
	<c path="flash.display.BitmapData"/>
</f></set_mapBitmap>
		<set_mapPoint set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_mapPoint>
		<set_mode set="method"><f a="value">
	<x path="flash.filters.DisplacementMapFilterMode"/>
	<x path="flash.filters.DisplacementMapFilterMode"/>
</f></set_mode>
		<set_scaleX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleX>
		<set_scaleY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleY>
		<new public="1" set="method">
			<f a="?mapBitmap:?mapPoint:?componentX:?componentY:?scaleX:?scaleY:?mode:?color:?alpha" v="::0:0:0:0::0:0">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Point"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="flash.filters.DisplacementMapFilterMode"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 0, color : 0, scaleY : 0, scaleX : 0, componentY : 0, componentX : 0 }</e></m></meta>
		</new>
	</class>
	<abstract path="flash.filters.DisplacementMapFilterMode" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/DisplacementMapFilterMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.filters.DisplacementMapFilterMode"</e></m>
		</meta>
		<impl><class path="flash.filters._DisplacementMapFilterMode.DisplacementMapFilterMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/DisplacementMapFilterMode.hx" private="1" module="flash.filters.DisplacementMapFilterMode" extern="1" final="1">
	<CLAMP public="1" set="null" static="1">
		<x path="flash.filters.DisplacementMapFilterMode"/>
		<meta><m n=":enum"/></meta>
	</CLAMP>
	<COLOR public="1" set="null" static="1">
		<x path="flash.filters.DisplacementMapFilterMode"/>
		<meta><m n=":enum"/></meta>
	</COLOR>
	<IGNORE public="1" set="null" static="1">
		<x path="flash.filters.DisplacementMapFilterMode"/>
		<meta><m n=":enum"/></meta>
	</IGNORE>
	<WRAP public="1" set="null" static="1">
		<x path="flash.filters.DisplacementMapFilterMode"/>
		<meta><m n=":enum"/></meta>
	</WRAP>
	<meta>
		<m n=":native"><e>"flash.filters.DisplacementMapFilterMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.filters._DisplacementMapFilterMode.DisplacementMapFilterMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/DisplacementMapFilterMode.hx" private="1" module="flash.filters.DisplacementMapFilterMode" extern="1" final="1">
		<CLAMP public="1" set="null" static="1">
			<x path="flash.filters.DisplacementMapFilterMode"/>
			<meta><m n=":enum"/></meta>
		</CLAMP>
		<COLOR public="1" set="null" static="1">
			<x path="flash.filters.DisplacementMapFilterMode"/>
			<meta><m n=":enum"/></meta>
		</COLOR>
		<IGNORE public="1" set="null" static="1">
			<x path="flash.filters.DisplacementMapFilterMode"/>
			<meta><m n=":enum"/></meta>
		</IGNORE>
		<WRAP public="1" set="null" static="1">
			<x path="flash.filters.DisplacementMapFilterMode"/>
			<meta><m n=":enum"/></meta>
		</WRAP>
		<meta>
			<m n=":native"><e>"flash.filters.DisplacementMapFilterMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.filters.DropShadowFilter" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/DropShadowFilter.hx" extern="1" final="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</alpha>
		<angle public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</angle>
		<blurX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</blurX>
		<blurY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</blurY>
		<color public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</color>
		<distance public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</distance>
		<hideObject public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hideObject>
		<inner public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</inner>
		<knockout public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</knockout>
		<quality public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</quality>
		<strength public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</strength>
		<get_alpha set="method"><f a=""><x path="Float"/></f></get_alpha>
		<get_angle set="method"><f a=""><x path="Float"/></f></get_angle>
		<get_blurX set="method"><f a=""><x path="Float"/></f></get_blurX>
		<get_blurY set="method"><f a=""><x path="Float"/></f></get_blurY>
		<get_color set="method"><f a=""><x path="UInt"/></f></get_color>
		<get_distance set="method"><f a=""><x path="Float"/></f></get_distance>
		<get_hideObject set="method"><f a=""><x path="Bool"/></f></get_hideObject>
		<get_inner set="method"><f a=""><x path="Bool"/></f></get_inner>
		<get_knockout set="method"><f a=""><x path="Bool"/></f></get_knockout>
		<get_quality set="method"><f a=""><x path="Int"/></f></get_quality>
		<get_strength set="method"><f a=""><x path="Float"/></f></get_strength>
		<set_alpha set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<set_angle set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_angle>
		<set_blurX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_blurX>
		<set_blurY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_blurY>
		<set_color set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_color>
		<set_distance set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_distance>
		<set_hideObject set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_hideObject>
		<set_inner set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_inner>
		<set_knockout set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_knockout>
		<set_quality set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_quality>
		<set_strength set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_strength>
		<new public="1" set="method">
			<f a="?distance:?angle:?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout:?hideObject" v="4:45:0:1:4:4:1:1:false:false:false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hideObject : false, knockout : false, inner : false, quality : 1, strength : 1, blurY : 4, blurX : 4, alpha : 1, color : 0, angle : 45, distance : 4 }</e></m></meta>
		</new>
	</class>
	<class path="flash.filters.GlowFilter" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/GlowFilter.hx" extern="1" final="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</alpha>
		<blurX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</blurX>
		<blurY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</blurY>
		<color public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</color>
		<inner public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</inner>
		<knockout public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</knockout>
		<quality public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</quality>
		<strength public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</strength>
		<get_alpha set="method"><f a=""><x path="Float"/></f></get_alpha>
		<get_blurX set="method"><f a=""><x path="Float"/></f></get_blurX>
		<get_blurY set="method"><f a=""><x path="Float"/></f></get_blurY>
		<get_color set="method"><f a=""><x path="UInt"/></f></get_color>
		<get_inner set="method"><f a=""><x path="Bool"/></f></get_inner>
		<get_knockout set="method"><f a=""><x path="Bool"/></f></get_knockout>
		<get_quality set="method"><f a=""><x path="Int"/></f></get_quality>
		<get_strength set="method"><f a=""><x path="Float"/></f></get_strength>
		<set_alpha set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<set_blurX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_blurX>
		<set_blurY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_blurY>
		<set_color set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_color>
		<set_inner set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_inner>
		<set_knockout set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_knockout>
		<set_quality set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_quality>
		<set_strength set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_strength>
		<new public="1" set="method">
			<f a="?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout" v="16711680:1:6:6:2:1:false:false">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ knockout : false, inner : false, quality : 1, strength : 2, blurY : 6, blurX : 6, alpha : 1, color : 16711680 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="flash.filters.GradientBevelFilter" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/GradientBevelFilter.hx" extern="1" final="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alphas public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</alphas>
		<angle public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</angle>
		<blurX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</blurX>
		<blurY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</blurY>
		<colors public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</colors>
		<distance public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</distance>
		<knockout public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</knockout>
		<quality public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</quality>
		<ratios public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</ratios>
		<strength public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</strength>
		<type public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</type>
		<get_alphas set="method"><f a=""><c path="Array"><d/></c></f></get_alphas>
		<get_angle set="method"><f a=""><x path="Float"/></f></get_angle>
		<get_blurX set="method"><f a=""><x path="Float"/></f></get_blurX>
		<get_blurY set="method"><f a=""><x path="Float"/></f></get_blurY>
		<get_colors set="method"><f a=""><c path="Array"><d/></c></f></get_colors>
		<get_distance set="method"><f a=""><x path="Float"/></f></get_distance>
		<get_knockout set="method"><f a=""><x path="Bool"/></f></get_knockout>
		<get_quality set="method"><f a=""><x path="Int"/></f></get_quality>
		<get_ratios set="method"><f a=""><c path="Array"><d/></c></f></get_ratios>
		<get_strength set="method"><f a=""><x path="Float"/></f></get_strength>
		<get_type set="method"><f a=""><c path="String"/></f></get_type>
		<set_alphas set="method"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_alphas>
		<set_angle set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_angle>
		<set_blurX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_blurX>
		<set_blurY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_blurY>
		<set_colors set="method"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_colors>
		<set_distance set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_distance>
		<set_knockout set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_knockout>
		<set_quality set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_quality>
		<set_ratios set="method"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_ratios>
		<set_strength set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_strength>
		<set_type set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_type>
		<new public="1" set="method">
			<f a="?distance:?angle:?colors:?alphas:?ratios:?blurX:?blurY:?strength:?quality:?type:?knockout" v="4:45::::4:4:1:1::false">
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ knockout : false, quality : 1, strength : 1, blurY : 4, blurX : 4, angle : 45, distance : 4 }</e></m></meta>
		</new>
	</class>
	<class path="flash.filters.GradientGlowFilter" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/GradientGlowFilter.hx" extern="1" final="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alphas public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</alphas>
		<angle public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</angle>
		<blurX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</blurX>
		<blurY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</blurY>
		<colors public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</colors>
		<distance public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</distance>
		<knockout public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</knockout>
		<quality public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</quality>
		<ratios public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</ratios>
		<strength public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</strength>
		<type public="1" get="accessor" set="accessor">
			<x path="flash.filters.BitmapFilterType"/>
			<meta><m n=":flash.property"/></meta>
		</type>
		<get_alphas set="method"><f a=""><c path="Array"><d/></c></f></get_alphas>
		<get_angle set="method"><f a=""><x path="Float"/></f></get_angle>
		<get_blurX set="method"><f a=""><x path="Float"/></f></get_blurX>
		<get_blurY set="method"><f a=""><x path="Float"/></f></get_blurY>
		<get_colors set="method"><f a=""><c path="Array"><d/></c></f></get_colors>
		<get_distance set="method"><f a=""><x path="Float"/></f></get_distance>
		<get_knockout set="method"><f a=""><x path="Bool"/></f></get_knockout>
		<get_quality set="method"><f a=""><x path="Int"/></f></get_quality>
		<get_ratios set="method"><f a=""><c path="Array"><d/></c></f></get_ratios>
		<get_strength set="method"><f a=""><x path="Float"/></f></get_strength>
		<get_type set="method"><f a=""><x path="flash.filters.BitmapFilterType"/></f></get_type>
		<set_alphas set="method"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_alphas>
		<set_angle set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_angle>
		<set_blurX set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_blurX>
		<set_blurY set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_blurY>
		<set_colors set="method"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_colors>
		<set_distance set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_distance>
		<set_knockout set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_knockout>
		<set_quality set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_quality>
		<set_ratios set="method"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_ratios>
		<set_strength set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_strength>
		<set_type set="method"><f a="value">
	<x path="flash.filters.BitmapFilterType"/>
	<x path="flash.filters.BitmapFilterType"/>
</f></set_type>
		<new public="1" set="method">
			<f a="?distance:?angle:?colors:?alphas:?ratios:?blurX:?blurY:?strength:?quality:?type:?knockout" v="4:45::::4:4:1:1::false">
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="flash.filters.BitmapFilterType"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ knockout : false, quality : 1, strength : 1, blurY : 4, blurX : 4, angle : 45, distance : 4 }</e></m></meta>
		</new>
	</class>
	<class path="flash.filters.ShaderFilter" params="" file="/home/runner/work/haxe/haxe/std/flash/filters/ShaderFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<bottomExtension public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</bottomExtension>
		<leftExtension public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</leftExtension>
		<rightExtension public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</rightExtension>
		<shader public="1" get="accessor" set="accessor">
			<c path="flash.display.Shader"/>
			<meta><m n=":flash.property"/></meta>
		</shader>
		<topExtension public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</topExtension>
		<get_bottomExtension set="method"><f a=""><x path="Int"/></f></get_bottomExtension>
		<get_leftExtension set="method"><f a=""><x path="Int"/></f></get_leftExtension>
		<get_rightExtension set="method"><f a=""><x path="Int"/></f></get_rightExtension>
		<get_shader set="method"><f a=""><c path="flash.display.Shader"/></f></get_shader>
		<get_topExtension set="method"><f a=""><x path="Int"/></f></get_topExtension>
		<set_bottomExtension set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_bottomExtension>
		<set_leftExtension set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_leftExtension>
		<set_rightExtension set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_rightExtension>
		<set_shader set="method"><f a="value">
	<c path="flash.display.Shader"/>
	<c path="flash.display.Shader"/>
</f></set_shader>
		<set_topExtension set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_topExtension>
		<new public="1" set="method"><f a="?shader">
	<c path="flash.display.Shader"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="/home/runner/work/haxe/haxe/std/flash/geom/ColorTransform.hx" extern="1">
		<alphaMultiplier public="1"><x path="Float"/></alphaMultiplier>
		<alphaOffset public="1"><x path="Float"/></alphaOffset>
		<blueMultiplier public="1"><x path="Float"/></blueMultiplier>
		<blueOffset public="1"><x path="Float"/></blueOffset>
		<color public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</color>
		<greenMultiplier public="1"><x path="Float"/></greenMultiplier>
		<greenOffset public="1"><x path="Float"/></greenOffset>
		<redMultiplier public="1"><x path="Float"/></redMultiplier>
		<redOffset public="1"><x path="Float"/></redOffset>
		<concat public="1" set="method"><f a="second">
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></concat>
		<get_color set="method"><f a=""><x path="UInt"/></f></get_color>
		<set_color set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_color>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset" v="1:1:1:1:0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ alphaOffset : 0, blueOffset : 0, greenOffset : 0, redOffset : 0, alphaMultiplier : 1, blueMultiplier : 1, greenMultiplier : 1, redMultiplier : 1 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Matrix" params="" file="/home/runner/work/haxe/haxe/std/flash/geom/Matrix.hx" extern="1">
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<tx public="1"><x path="Float"/></tx>
		<ty public="1"><x path="Float"/></ty>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></concat>
		<copyColumnFrom public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1" set="method">
			<f a="sourceMatrix">
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRowFrom public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<createBox public="1" set="method">
			<f a="scaleX:scaleY:?rotation:?tx:?ty" v="::0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, rotation : 0 }</e></m></meta>
		</createBox>
		<createGradientBox public="1" set="method">
			<f a="width:height:?rotation:?tx:?ty" v="::0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, rotation : 0 }</e></m></meta>
		</createGradientBox>
		<deltaTransformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></deltaTransformPoint>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<invert public="1" set="method"><f a=""><x path="Void"/></f></invert>
		<rotate public="1" set="method"><f a="angle">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<scale public="1" set="method"><f a="sx:sy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<setTo public="1" set="method">
			<f a="aa:ba:ca:da:txa:tya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<transformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></transformPoint>
		<translate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<new public="1" set="method">
			<f a="?a:?b:?c:?d:?tx:?ty" v="1:0:0:1:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ ty : 0, tx : 0, d : 1, c : 0, b : 0, a : 1 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Matrix3D" params="" file="/home/runner/work/haxe/haxe/std/flash/geom/Matrix3D.hx" extern="1">
		<interpolate public="1" set="method" static="1"><f a="thisMat:toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<c path="flash.geom.Matrix3D"/>
</f></interpolate>
		<determinant public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</determinant>
		<position public="1" get="accessor" set="accessor">
			<c path="flash.geom.Vector3D"/>
			<meta><m n=":flash.property"/></meta>
		</position>
		<rawData public="1" get="accessor" set="accessor">
			<c path="flash.Vector"><x path="Float"/></c>
			<meta><m n=":flash.property"/></meta>
		</rawData>
		<append public="1" set="method"><f a="lhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></append>
		<appendRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></appendRotation>
		<appendScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendScale>
		<appendTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendTranslation>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></clone>
		<copyColumnFrom public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1" set="method">
			<f a="sourceMatrix3D">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRawDataFrom public="1" set="method">
			<f a="vector:?index:?transpose" v=":0:false">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ transpose : false, index : 0 }</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</copyRawDataFrom>
		<copyRawDataTo public="1" set="method">
			<f a="vector:?index:?transpose" v=":0:false">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ transpose : false, index : 0 }</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</copyRawDataTo>
		<copyRowFrom public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyToMatrix3D public="1" set="method">
			<f a="dest">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyToMatrix3D>
		<decompose public="1" set="method"><f a="?orientationStyle">
	<x path="flash.geom.Orientation3D"/>
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
</f></decompose>
		<deltaTransformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></deltaTransformVector>
		<get_determinant set="method"><f a=""><x path="Float"/></f></get_determinant>
		<get_position set="method"><f a=""><c path="flash.geom.Vector3D"/></f></get_position>
		<get_rawData set="method"><f a=""><c path="flash.Vector"><x path="Float"/></c></f></get_rawData>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<interpolateTo public="1" set="method"><f a="toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<x path="Void"/>
</f></interpolateTo>
		<invert public="1" set="method"><f a=""><x path="Bool"/></f></invert>
		<pointAt public="1" set="method"><f a="pos:?at:?up">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></pointAt>
		<prepend public="1" set="method"><f a="rhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></prepend>
		<prependRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></prependRotation>
		<prependScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependScale>
		<prependTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependTranslation>
		<recompose public="1" set="method"><f a="components:?orientationStyle">
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
	<x path="flash.geom.Orientation3D"/>
	<x path="Bool"/>
</f></recompose>
		<set_position set="method"><f a="value">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></set_position>
		<set_rawData set="method"><f a="value">
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
</f></set_rawData>
		<transformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></transformVector>
		<transformVectors public="1" set="method"><f a="vin:vout">
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></transformVectors>
		<transpose public="1" set="method"><f a=""><x path="Void"/></f></transpose>
		<new public="1" set="method"><f a="?v">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<abstract path="flash.geom.Orientation3D" params="" file="/home/runner/work/haxe/haxe/std/flash/geom/Orientation3D.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.geom.Orientation3D"</e></m>
		</meta>
		<impl><class path="flash.geom._Orientation3D.Orientation3D_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/geom/Orientation3D.hx" private="1" module="flash.geom.Orientation3D" extern="1" final="1">
	<AXIS_ANGLE public="1" set="null" static="1">
		<x path="flash.geom.Orientation3D"/>
		<meta><m n=":enum"/></meta>
	</AXIS_ANGLE>
	<EULER_ANGLES public="1" set="null" static="1">
		<x path="flash.geom.Orientation3D"/>
		<meta><m n=":enum"/></meta>
	</EULER_ANGLES>
	<QUATERNION public="1" set="null" static="1">
		<x path="flash.geom.Orientation3D"/>
		<meta><m n=":enum"/></meta>
	</QUATERNION>
	<meta>
		<m n=":native"><e>"flash.geom.Orientation3D"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.geom._Orientation3D.Orientation3D_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/geom/Orientation3D.hx" private="1" module="flash.geom.Orientation3D" extern="1" final="1">
		<AXIS_ANGLE public="1" set="null" static="1">
			<x path="flash.geom.Orientation3D"/>
			<meta><m n=":enum"/></meta>
		</AXIS_ANGLE>
		<EULER_ANGLES public="1" set="null" static="1">
			<x path="flash.geom.Orientation3D"/>
			<meta><m n=":enum"/></meta>
		</EULER_ANGLES>
		<QUATERNION public="1" set="null" static="1">
			<x path="flash.geom.Orientation3D"/>
			<meta><m n=":enum"/></meta>
		</QUATERNION>
		<meta>
			<m n=":native"><e>"flash.geom.Orientation3D"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.geom.PerspectiveProjection" params="" file="/home/runner/work/haxe/haxe/std/flash/geom/PerspectiveProjection.hx" extern="1">
		<fieldOfView public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fieldOfView>
		<focalLength public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</focalLength>
		<projectionCenter public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</projectionCenter>
		<get_fieldOfView set="method"><f a=""><x path="Float"/></f></get_fieldOfView>
		<get_focalLength set="method"><f a=""><x path="Float"/></f></get_focalLength>
		<get_projectionCenter set="method"><f a=""><c path="flash.geom.Point"/></f></get_projectionCenter>
		<set_fieldOfView set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_fieldOfView>
		<set_focalLength set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_focalLength>
		<set_projectionCenter set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_projectionCenter>
		<toMatrix3D public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></toMatrix3D>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.geom.Point" params="" file="/home/runner/work/haxe/haxe/std/flash/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
</f></distance>
		<interpolate public="1" set="method" static="1"><f a="pt1:pt2:f">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" static="1"><f a="len:angle">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></polar>
		<length public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</length>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<add public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"/></f></clone>
		<copyFrom public="1" set="method">
			<f a="sourcePoint">
				<c path="flash.geom.Point"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></equals>
		<get_length set="method"><f a=""><x path="Float"/></f></get_length>
		<normalize public="1" set="method"><f a="thickness">
	<x path="Float"/>
	<x path="Void"/>
</f></normalize>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<setTo public="1" set="method">
			<f a="xa:ya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?x:?y" v="0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Rectangle" params="" file="/home/runner/work/haxe/haxe/std/flash/geom/Rectangle.hx" extern="1">
		<bottom public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bottom>
		<bottomRight public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</bottomRight>
		<height public="1"><x path="Float"/></height>
		<left public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</left>
		<right public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</right>
		<size public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</size>
		<top public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</top>
		<topLeft public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</topLeft>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"/></f></clone>
		<contains public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></contains>
		<containsPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></containsPoint>
		<containsRect public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></containsRect>
		<copyFrom public="1" set="method">
			<f a="sourceRect">
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></equals>
		<get_bottom set="method"><f a=""><x path="Float"/></f></get_bottom>
		<get_bottomRight set="method"><f a=""><c path="flash.geom.Point"/></f></get_bottomRight>
		<get_left set="method"><f a=""><x path="Float"/></f></get_left>
		<get_right set="method"><f a=""><x path="Float"/></f></get_right>
		<get_size set="method"><f a=""><c path="flash.geom.Point"/></f></get_size>
		<get_top set="method"><f a=""><x path="Float"/></f></get_top>
		<get_topLeft set="method"><f a=""><c path="flash.geom.Point"/></f></get_topLeft>
		<inflate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></inflate>
		<inflatePoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></inflatePoint>
		<intersection public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></intersection>
		<intersects public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></intersects>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<offsetPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></offsetPoint>
		<setEmpty public="1" set="method"><f a=""><x path="Void"/></f></setEmpty>
		<setTo public="1" set="method">
			<f a="xa:ya:widtha:heighta">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<set_bottom set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bottom>
		<set_bottomRight set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_bottomRight>
		<set_left set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_left>
		<set_right set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_right>
		<set_size set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_size>
		<set_top set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_top>
		<set_topLeft set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_topLeft>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<union public="1" set="method"><f a="toUnion">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></union>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 0, width : 0, y : 0, x : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Transform" params="" file="/home/runner/work/haxe/haxe/std/flash/geom/Transform.hx" extern="1">
		<colorTransform public="1" get="accessor" set="accessor">
			<c path="flash.geom.ColorTransform"/>
			<meta><m n=":flash.property"/></meta>
		</colorTransform>
		<concatenatedColorTransform public="1" get="accessor" set="null">
			<c path="flash.geom.ColorTransform"/>
			<meta><m n=":flash.property"/></meta>
		</concatenatedColorTransform>
		<concatenatedMatrix public="1" get="accessor" set="null">
			<c path="flash.geom.Matrix"/>
			<meta><m n=":flash.property"/></meta>
		</concatenatedMatrix>
		<matrix public="1" get="accessor" set="accessor">
			<c path="flash.geom.Matrix"/>
			<meta><m n=":flash.property"/></meta>
		</matrix>
		<matrix3D public="1" get="accessor" set="accessor">
			<c path="flash.geom.Matrix3D"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</matrix3D>
		<perspectiveProjection public="1" get="accessor" set="accessor">
			<c path="flash.geom.PerspectiveProjection"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</perspectiveProjection>
		<pixelBounds public="1" get="accessor" set="null">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</pixelBounds>
		<getRelativeMatrix3D public="1" set="method">
			<f a="relativeTo">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.geom.Matrix3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getRelativeMatrix3D>
		<get_colorTransform set="method"><f a=""><c path="flash.geom.ColorTransform"/></f></get_colorTransform>
		<get_concatenatedColorTransform set="method"><f a=""><c path="flash.geom.ColorTransform"/></f></get_concatenatedColorTransform>
		<get_concatenatedMatrix set="method"><f a=""><c path="flash.geom.Matrix"/></f></get_concatenatedMatrix>
		<get_matrix set="method"><f a=""><c path="flash.geom.Matrix"/></f></get_matrix>
		<get_matrix3D set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></get_matrix3D>
		<get_perspectiveProjection set="method"><f a=""><c path="flash.geom.PerspectiveProjection"/></f></get_perspectiveProjection>
		<get_pixelBounds set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_pixelBounds>
		<set_colorTransform set="method"><f a="value">
	<c path="flash.geom.ColorTransform"/>
	<c path="flash.geom.ColorTransform"/>
</f></set_colorTransform>
		<set_matrix set="method"><f a="value">
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.Matrix"/>
</f></set_matrix>
		<set_matrix3D set="method"><f a="value">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Matrix3D"/>
</f></set_matrix3D>
		<set_perspectiveProjection set="method"><f a="value">
	<c path="flash.geom.PerspectiveProjection"/>
	<c path="flash.geom.PerspectiveProjection"/>
</f></set_perspectiveProjection>
		<new public="1" set="method"><f a="displayObject">
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Utils3D" params="" file="/home/runner/work/haxe/haxe/std/flash/geom/Utils3D.hx" extern="1">
		<pointTowards public="1" set="method" static="1"><f a="percent:mat:pos:?at:?up">
	<x path="Float"/>
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Matrix3D"/>
</f></pointTowards>
		<projectVector public="1" set="method" static="1"><f a="m:v">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></projectVector>
		<projectVectors public="1" set="method" static="1"><f a="m:verts:projectedVerts:uvts">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></projectVectors>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.geom.Vector3D" params="" file="/home/runner/work/haxe/haxe/std/flash/geom/Vector3D.hx" extern="1">
		<X_AXIS final="1" public="1" set="null" static="1"><c path="flash.geom.Vector3D"/></X_AXIS>
		<Y_AXIS final="1" public="1" set="null" static="1"><c path="flash.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS final="1" public="1" set="null" static="1"><c path="flash.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" set="method" static="1"><f a="a:b">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></angleBetween>
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></distance>
		<length public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</length>
		<lengthSquared public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</lengthSquared>
		<w public="1"><x path="Float"/></w>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<add public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<copyFrom public="1" set="method">
			<f a="sourceVector3D">
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<crossProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></decrementBy>
		<dotProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></dotProduct>
		<equals public="1" set="method">
			<f a="toCompare:?allFour" v=":false">
				<c path="flash.geom.Vector3D"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allFour : false }</e></m></meta>
		</equals>
		<get_length set="method"><f a=""><x path="Float"/></f></get_length>
		<get_lengthSquared set="method"><f a=""><x path="Float"/></f></get_lengthSquared>
		<incrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></incrementBy>
		<nearEquals public="1" set="method">
			<f a="toCompare:tolerance:?allFour" v="::false">
				<c path="flash.geom.Vector3D"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ allFour : false }</e></m></meta>
		</nearEquals>
		<negate public="1" set="method"><f a=""><x path="Void"/></f></negate>
		<normalize public="1" set="method"><f a=""><x path="Float"/></f></normalize>
		<project public="1" set="method"><f a=""><x path="Void"/></f></project>
		<scaleBy public="1" set="method"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></scaleBy>
		<setTo public="1" set="method">
			<f a="xa:ya:za">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?x:?y:?z:?w" v="0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 0, z : 0, y : 0, x : 0 }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.globalization.Collator" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/Collator.hx" extern="1" final="1">
		<getAvailableLocaleIDNames public="1" set="method" static="1"><f a=""><c path="flash.Vector"><c path="String"/></c></f></getAvailableLocaleIDNames>
		<actualLocaleIDName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</actualLocaleIDName>
		<ignoreCase public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ignoreCase>
		<ignoreCharacterWidth public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ignoreCharacterWidth>
		<ignoreDiacritics public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ignoreDiacritics>
		<ignoreKanaType public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ignoreKanaType>
		<ignoreSymbols public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ignoreSymbols>
		<lastOperationStatus public="1" get="accessor" set="null">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":flash.property"/></meta>
		</lastOperationStatus>
		<numericComparison public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</numericComparison>
		<requestedLocaleIDName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</requestedLocaleIDName>
		<compare public="1" set="method"><f a="string1:string2">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
</f></compare>
		<equals public="1" set="method"><f a="string1:string2">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></equals>
		<get_actualLocaleIDName set="method"><f a=""><c path="String"/></f></get_actualLocaleIDName>
		<get_ignoreCase set="method"><f a=""><x path="Bool"/></f></get_ignoreCase>
		<get_ignoreCharacterWidth set="method"><f a=""><x path="Bool"/></f></get_ignoreCharacterWidth>
		<get_ignoreDiacritics set="method"><f a=""><x path="Bool"/></f></get_ignoreDiacritics>
		<get_ignoreKanaType set="method"><f a=""><x path="Bool"/></f></get_ignoreKanaType>
		<get_ignoreSymbols set="method"><f a=""><x path="Bool"/></f></get_ignoreSymbols>
		<get_lastOperationStatus set="method"><f a=""><x path="flash.globalization.LastOperationStatus"/></f></get_lastOperationStatus>
		<get_numericComparison set="method"><f a=""><x path="Bool"/></f></get_numericComparison>
		<get_requestedLocaleIDName set="method"><f a=""><c path="String"/></f></get_requestedLocaleIDName>
		<set_ignoreCase set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ignoreCase>
		<set_ignoreCharacterWidth set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ignoreCharacterWidth>
		<set_ignoreDiacritics set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ignoreDiacritics>
		<set_ignoreKanaType set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ignoreKanaType>
		<set_ignoreSymbols set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ignoreSymbols>
		<set_numericComparison set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_numericComparison>
		<new public="1" set="method"><f a="requestedLocaleIDName:?initialMode">
	<c path="String"/>
	<x path="flash.globalization.CollatorMode"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<abstract path="flash.globalization.CollatorMode" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/CollatorMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.globalization.CollatorMode"</e></m>
		</meta>
		<impl><class path="flash.globalization._CollatorMode.CollatorMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/CollatorMode.hx" private="1" module="flash.globalization.CollatorMode" extern="1" final="1">
	<MATCHING public="1" set="null" static="1">
		<x path="flash.globalization.CollatorMode"/>
		<meta><m n=":enum"/></meta>
	</MATCHING>
	<SORTING public="1" set="null" static="1">
		<x path="flash.globalization.CollatorMode"/>
		<meta><m n=":enum"/></meta>
	</SORTING>
	<meta>
		<m n=":native"><e>"flash.globalization.CollatorMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.globalization._CollatorMode.CollatorMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/CollatorMode.hx" private="1" module="flash.globalization.CollatorMode" extern="1" final="1">
		<MATCHING public="1" set="null" static="1">
			<x path="flash.globalization.CollatorMode"/>
			<meta><m n=":enum"/></meta>
		</MATCHING>
		<SORTING public="1" set="null" static="1">
			<x path="flash.globalization.CollatorMode"/>
			<meta><m n=":enum"/></meta>
		</SORTING>
		<meta>
			<m n=":native"><e>"flash.globalization.CollatorMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.globalization.CurrencyFormatter" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/CurrencyFormatter.hx" extern="1" final="1">
		<getAvailableLocaleIDNames public="1" set="method" static="1"><f a=""><c path="flash.Vector"><c path="String"/></c></f></getAvailableLocaleIDNames>
		<actualLocaleIDName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</actualLocaleIDName>
		<currencyISOCode public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</currencyISOCode>
		<currencySymbol public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</currencySymbol>
		<decimalSeparator public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</decimalSeparator>
		<digitsType public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</digitsType>
		<fractionalDigits public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</fractionalDigits>
		<groupingPattern public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</groupingPattern>
		<groupingSeparator public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</groupingSeparator>
		<lastOperationStatus public="1" get="accessor" set="null">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":flash.property"/></meta>
		</lastOperationStatus>
		<leadingZero public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</leadingZero>
		<negativeCurrencyFormat public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</negativeCurrencyFormat>
		<negativeSymbol public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</negativeSymbol>
		<positiveCurrencyFormat public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</positiveCurrencyFormat>
		<requestedLocaleIDName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</requestedLocaleIDName>
		<trailingZeros public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</trailingZeros>
		<useGrouping public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</useGrouping>
		<format public="1" set="method">
			<f a="value:?withCurrencySymbol" v=":false">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ withCurrencySymbol : false }</e></m></meta>
		</format>
		<formattingWithCurrencySymbolIsSafe public="1" set="method"><f a="requestedISOCode">
	<c path="String"/>
	<x path="Bool"/>
</f></formattingWithCurrencySymbolIsSafe>
		<get_actualLocaleIDName set="method"><f a=""><c path="String"/></f></get_actualLocaleIDName>
		<get_currencyISOCode set="method"><f a=""><c path="String"/></f></get_currencyISOCode>
		<get_currencySymbol set="method"><f a=""><c path="String"/></f></get_currencySymbol>
		<get_decimalSeparator set="method"><f a=""><c path="String"/></f></get_decimalSeparator>
		<get_digitsType set="method"><f a=""><x path="UInt"/></f></get_digitsType>
		<get_fractionalDigits set="method"><f a=""><x path="Int"/></f></get_fractionalDigits>
		<get_groupingPattern set="method"><f a=""><c path="String"/></f></get_groupingPattern>
		<get_groupingSeparator set="method"><f a=""><c path="String"/></f></get_groupingSeparator>
		<get_lastOperationStatus set="method"><f a=""><x path="flash.globalization.LastOperationStatus"/></f></get_lastOperationStatus>
		<get_leadingZero set="method"><f a=""><x path="Bool"/></f></get_leadingZero>
		<get_negativeCurrencyFormat set="method"><f a=""><x path="UInt"/></f></get_negativeCurrencyFormat>
		<get_negativeSymbol set="method"><f a=""><c path="String"/></f></get_negativeSymbol>
		<get_positiveCurrencyFormat set="method"><f a=""><x path="UInt"/></f></get_positiveCurrencyFormat>
		<get_requestedLocaleIDName set="method"><f a=""><c path="String"/></f></get_requestedLocaleIDName>
		<get_trailingZeros set="method"><f a=""><x path="Bool"/></f></get_trailingZeros>
		<get_useGrouping set="method"><f a=""><x path="Bool"/></f></get_useGrouping>
		<parse public="1" set="method"><f a="inputString">
	<c path="String"/>
	<c path="flash.globalization.CurrencyParseResult"/>
</f></parse>
		<setCurrency public="1" set="method"><f a="currencyISOCode:currencySymbol">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setCurrency>
		<set_decimalSeparator set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_decimalSeparator>
		<set_digitsType set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_digitsType>
		<set_fractionalDigits set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_fractionalDigits>
		<set_groupingPattern set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_groupingPattern>
		<set_groupingSeparator set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_groupingSeparator>
		<set_leadingZero set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_leadingZero>
		<set_negativeCurrencyFormat set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_negativeCurrencyFormat>
		<set_negativeSymbol set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_negativeSymbol>
		<set_positiveCurrencyFormat set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_positiveCurrencyFormat>
		<set_trailingZeros set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_trailingZeros>
		<set_useGrouping set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useGrouping>
		<new public="1" set="method"><f a="requestedLocaleIDName">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.globalization.CurrencyParseResult" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/CurrencyParseResult.hx" extern="1" final="1">
		<currencyString public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</currencyString>
		<value public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</value>
		<get_currencyString set="method"><f a=""><c path="String"/></f></get_currencyString>
		<get_value set="method"><f a=""><x path="Float"/></f></get_value>
		<new public="1" set="method">
			<f a="?value:?symbol" v="0.:">
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ value : 0. }</e></m></meta>
		</new>
	</class>
	<class path="flash.globalization.DateTimeFormatter" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/DateTimeFormatter.hx" extern="1" final="1">
		<getAvailableLocaleIDNames public="1" set="method" static="1"><f a=""><c path="flash.Vector"><c path="String"/></c></f></getAvailableLocaleIDNames>
		<actualLocaleIDName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</actualLocaleIDName>
		<lastOperationStatus public="1" get="accessor" set="null">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":flash.property"/></meta>
		</lastOperationStatus>
		<requestedLocaleIDName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</requestedLocaleIDName>
		<format public="1" set="method"><f a="dateTime">
	<c path="Date"/>
	<c path="String"/>
</f></format>
		<formatUTC public="1" set="method"><f a="dateTime">
	<c path="Date"/>
	<c path="String"/>
</f></formatUTC>
		<getDateStyle public="1" set="method"><f a=""><x path="flash.globalization.DateTimeStyle"/></f></getDateStyle>
		<getDateTimePattern public="1" set="method"><f a=""><c path="String"/></f></getDateTimePattern>
		<getFirstWeekday public="1" set="method"><f a=""><x path="Int"/></f></getFirstWeekday>
		<getMonthNames public="1" set="method"><f a="?nameStyle:?context">
	<x path="flash.globalization.DateTimeNameStyle"/>
	<x path="flash.globalization.DateTimeNameContext"/>
	<c path="flash.Vector"><c path="String"/></c>
</f></getMonthNames>
		<getTimeStyle public="1" set="method"><f a=""><x path="flash.globalization.DateTimeStyle"/></f></getTimeStyle>
		<getWeekdayNames public="1" set="method"><f a="?nameStyle:?context">
	<x path="flash.globalization.DateTimeNameStyle"/>
	<x path="flash.globalization.DateTimeNameContext"/>
	<c path="flash.Vector"><c path="String"/></c>
</f></getWeekdayNames>
		<get_actualLocaleIDName set="method"><f a=""><c path="String"/></f></get_actualLocaleIDName>
		<get_lastOperationStatus set="method"><f a=""><x path="flash.globalization.LastOperationStatus"/></f></get_lastOperationStatus>
		<get_requestedLocaleIDName set="method"><f a=""><c path="String"/></f></get_requestedLocaleIDName>
		<setDateTimePattern public="1" set="method"><f a="pattern">
	<c path="String"/>
	<x path="Void"/>
</f></setDateTimePattern>
		<setDateTimeStyles public="1" set="method"><f a="dateStyle:timeStyle">
	<x path="flash.globalization.DateTimeStyle"/>
	<x path="flash.globalization.DateTimeStyle"/>
	<x path="Void"/>
</f></setDateTimeStyles>
		<new public="1" set="method"><f a="requestedLocaleIDName:?dateStyle:?timeStyle">
	<c path="String"/>
	<x path="flash.globalization.DateTimeStyle"/>
	<x path="flash.globalization.DateTimeStyle"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<abstract path="flash.globalization.DateTimeNameContext" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/DateTimeNameContext.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.globalization.DateTimeNameContext"</e></m>
		</meta>
		<impl><class path="flash.globalization._DateTimeNameContext.DateTimeNameContext_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/DateTimeNameContext.hx" private="1" module="flash.globalization.DateTimeNameContext" extern="1" final="1">
	<FORMAT public="1" set="null" static="1">
		<x path="flash.globalization.DateTimeNameContext"/>
		<meta><m n=":enum"/></meta>
	</FORMAT>
	<STANDALONE public="1" set="null" static="1">
		<x path="flash.globalization.DateTimeNameContext"/>
		<meta><m n=":enum"/></meta>
	</STANDALONE>
	<meta>
		<m n=":native"><e>"flash.globalization.DateTimeNameContext"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.globalization._DateTimeNameContext.DateTimeNameContext_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/DateTimeNameContext.hx" private="1" module="flash.globalization.DateTimeNameContext" extern="1" final="1">
		<FORMAT public="1" set="null" static="1">
			<x path="flash.globalization.DateTimeNameContext"/>
			<meta><m n=":enum"/></meta>
		</FORMAT>
		<STANDALONE public="1" set="null" static="1">
			<x path="flash.globalization.DateTimeNameContext"/>
			<meta><m n=":enum"/></meta>
		</STANDALONE>
		<meta>
			<m n=":native"><e>"flash.globalization.DateTimeNameContext"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.globalization.DateTimeNameStyle" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/DateTimeNameStyle.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.globalization.DateTimeNameStyle"</e></m>
		</meta>
		<impl><class path="flash.globalization._DateTimeNameStyle.DateTimeNameStyle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/DateTimeNameStyle.hx" private="1" module="flash.globalization.DateTimeNameStyle" extern="1" final="1">
	<FULL public="1" set="null" static="1">
		<x path="flash.globalization.DateTimeNameStyle"/>
		<meta><m n=":enum"/></meta>
	</FULL>
	<LONG_ABBREVIATION public="1" set="null" static="1">
		<x path="flash.globalization.DateTimeNameStyle"/>
		<meta><m n=":enum"/></meta>
	</LONG_ABBREVIATION>
	<SHORT_ABBREVIATION public="1" set="null" static="1">
		<x path="flash.globalization.DateTimeNameStyle"/>
		<meta><m n=":enum"/></meta>
	</SHORT_ABBREVIATION>
	<meta>
		<m n=":native"><e>"flash.globalization.DateTimeNameStyle"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.globalization._DateTimeNameStyle.DateTimeNameStyle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/DateTimeNameStyle.hx" private="1" module="flash.globalization.DateTimeNameStyle" extern="1" final="1">
		<FULL public="1" set="null" static="1">
			<x path="flash.globalization.DateTimeNameStyle"/>
			<meta><m n=":enum"/></meta>
		</FULL>
		<LONG_ABBREVIATION public="1" set="null" static="1">
			<x path="flash.globalization.DateTimeNameStyle"/>
			<meta><m n=":enum"/></meta>
		</LONG_ABBREVIATION>
		<SHORT_ABBREVIATION public="1" set="null" static="1">
			<x path="flash.globalization.DateTimeNameStyle"/>
			<meta><m n=":enum"/></meta>
		</SHORT_ABBREVIATION>
		<meta>
			<m n=":native"><e>"flash.globalization.DateTimeNameStyle"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.globalization.DateTimeStyle" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/DateTimeStyle.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.globalization.DateTimeStyle"</e></m>
		</meta>
		<impl><class path="flash.globalization._DateTimeStyle.DateTimeStyle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/DateTimeStyle.hx" private="1" module="flash.globalization.DateTimeStyle" extern="1" final="1">
	<CUSTOM public="1" set="null" static="1">
		<x path="flash.globalization.DateTimeStyle"/>
		<meta><m n=":enum"/></meta>
	</CUSTOM>
	<LONG public="1" set="null" static="1">
		<x path="flash.globalization.DateTimeStyle"/>
		<meta><m n=":enum"/></meta>
	</LONG>
	<MEDIUM public="1" set="null" static="1">
		<x path="flash.globalization.DateTimeStyle"/>
		<meta><m n=":enum"/></meta>
	</MEDIUM>
	<NONE public="1" set="null" static="1">
		<x path="flash.globalization.DateTimeStyle"/>
		<meta><m n=":enum"/></meta>
	</NONE>
	<SHORT public="1" set="null" static="1">
		<x path="flash.globalization.DateTimeStyle"/>
		<meta><m n=":enum"/></meta>
	</SHORT>
	<meta>
		<m n=":native"><e>"flash.globalization.DateTimeStyle"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.globalization._DateTimeStyle.DateTimeStyle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/DateTimeStyle.hx" private="1" module="flash.globalization.DateTimeStyle" extern="1" final="1">
		<CUSTOM public="1" set="null" static="1">
			<x path="flash.globalization.DateTimeStyle"/>
			<meta><m n=":enum"/></meta>
		</CUSTOM>
		<LONG public="1" set="null" static="1">
			<x path="flash.globalization.DateTimeStyle"/>
			<meta><m n=":enum"/></meta>
		</LONG>
		<MEDIUM public="1" set="null" static="1">
			<x path="flash.globalization.DateTimeStyle"/>
			<meta><m n=":enum"/></meta>
		</MEDIUM>
		<NONE public="1" set="null" static="1">
			<x path="flash.globalization.DateTimeStyle"/>
			<meta><m n=":enum"/></meta>
		</NONE>
		<SHORT public="1" set="null" static="1">
			<x path="flash.globalization.DateTimeStyle"/>
			<meta><m n=":enum"/></meta>
		</SHORT>
		<meta>
			<m n=":native"><e>"flash.globalization.DateTimeStyle"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.globalization.LastOperationStatus" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/LastOperationStatus.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.globalization.LastOperationStatus"</e></m>
		</meta>
		<impl><class path="flash.globalization._LastOperationStatus.LastOperationStatus_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/LastOperationStatus.hx" private="1" module="flash.globalization.LastOperationStatus" extern="1" final="1">
	<BUFFER_OVERFLOW_ERROR public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</BUFFER_OVERFLOW_ERROR>
	<ERROR_CODE_UNKNOWN public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</ERROR_CODE_UNKNOWN>
	<ILLEGAL_ARGUMENT_ERROR public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</ILLEGAL_ARGUMENT_ERROR>
	<INDEX_OUT_OF_BOUNDS_ERROR public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</INDEX_OUT_OF_BOUNDS_ERROR>
	<INVALID_ATTR_VALUE public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</INVALID_ATTR_VALUE>
	<INVALID_CHAR_FOUND public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</INVALID_CHAR_FOUND>
	<MEMORY_ALLOCATION_ERROR public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</MEMORY_ALLOCATION_ERROR>
	<NO_ERROR public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</NO_ERROR>
	<NUMBER_OVERFLOW_ERROR public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</NUMBER_OVERFLOW_ERROR>
	<PARSE_ERROR public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</PARSE_ERROR>
	<PATTERN_SYNTAX_ERROR public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</PATTERN_SYNTAX_ERROR>
	<PLATFORM_API_FAILED public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</PLATFORM_API_FAILED>
	<TRUNCATED_CHAR_FOUND public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</TRUNCATED_CHAR_FOUND>
	<UNEXPECTED_TOKEN public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</UNEXPECTED_TOKEN>
	<UNSUPPORTED_ERROR public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</UNSUPPORTED_ERROR>
	<USING_DEFAULT_WARNING public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</USING_DEFAULT_WARNING>
	<USING_FALLBACK_WARNING public="1" set="null" static="1">
		<x path="flash.globalization.LastOperationStatus"/>
		<meta><m n=":enum"/></meta>
	</USING_FALLBACK_WARNING>
	<meta>
		<m n=":native"><e>"flash.globalization.LastOperationStatus"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.globalization._LastOperationStatus.LastOperationStatus_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/LastOperationStatus.hx" private="1" module="flash.globalization.LastOperationStatus" extern="1" final="1">
		<BUFFER_OVERFLOW_ERROR public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</BUFFER_OVERFLOW_ERROR>
		<ERROR_CODE_UNKNOWN public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</ERROR_CODE_UNKNOWN>
		<ILLEGAL_ARGUMENT_ERROR public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</ILLEGAL_ARGUMENT_ERROR>
		<INDEX_OUT_OF_BOUNDS_ERROR public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</INDEX_OUT_OF_BOUNDS_ERROR>
		<INVALID_ATTR_VALUE public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</INVALID_ATTR_VALUE>
		<INVALID_CHAR_FOUND public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</INVALID_CHAR_FOUND>
		<MEMORY_ALLOCATION_ERROR public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</MEMORY_ALLOCATION_ERROR>
		<NO_ERROR public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</NO_ERROR>
		<NUMBER_OVERFLOW_ERROR public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</NUMBER_OVERFLOW_ERROR>
		<PARSE_ERROR public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</PARSE_ERROR>
		<PATTERN_SYNTAX_ERROR public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</PATTERN_SYNTAX_ERROR>
		<PLATFORM_API_FAILED public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</PLATFORM_API_FAILED>
		<TRUNCATED_CHAR_FOUND public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</TRUNCATED_CHAR_FOUND>
		<UNEXPECTED_TOKEN public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</UNEXPECTED_TOKEN>
		<UNSUPPORTED_ERROR public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</UNSUPPORTED_ERROR>
		<USING_DEFAULT_WARNING public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</USING_DEFAULT_WARNING>
		<USING_FALLBACK_WARNING public="1" set="null" static="1">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":enum"/></meta>
		</USING_FALLBACK_WARNING>
		<meta>
			<m n=":native"><e>"flash.globalization.LastOperationStatus"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.globalization.LocaleID" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/LocaleID.hx" extern="1" final="1">
		<DEFAULT final="1" public="1" set="null" static="1"><c path="String"/></DEFAULT>
		<determinePreferredLocales public="1" set="method" static="1"><f a="want:have:?keyword">
	<c path="flash.Vector"><c path="String"/></c>
	<c path="flash.Vector"><c path="String"/></c>
	<c path="String"/>
	<c path="flash.Vector"><c path="String"/></c>
</f></determinePreferredLocales>
		<lastOperationStatus public="1" get="accessor" set="null">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":flash.property"/></meta>
		</lastOperationStatus>
		<name public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</name>
		<getKeysAndValues public="1" set="method"><f a=""><x path="flash.utils.Object"/></f></getKeysAndValues>
		<getLanguage public="1" set="method"><f a=""><c path="String"/></f></getLanguage>
		<getRegion public="1" set="method"><f a=""><c path="String"/></f></getRegion>
		<getScript public="1" set="method"><f a=""><c path="String"/></f></getScript>
		<getVariant public="1" set="method"><f a=""><c path="String"/></f></getVariant>
		<get_lastOperationStatus set="method"><f a=""><x path="flash.globalization.LastOperationStatus"/></f></get_lastOperationStatus>
		<get_name set="method"><f a=""><c path="String"/></f></get_name>
		<isRightToLeft public="1" set="method"><f a=""><x path="Bool"/></f></isRightToLeft>
		<new public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<abstract path="flash.globalization.NationalDigitsType" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/NationalDigitsType.hx">
		<this><x path="UInt"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.globalization.NationalDigitsType"</e></m>
		</meta>
		<impl><class path="flash.globalization._NationalDigitsType.NationalDigitsType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/NationalDigitsType.hx" private="1" module="flash.globalization.NationalDigitsType" extern="1" final="1">
	<ARABIC_INDIC public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</ARABIC_INDIC>
	<BALINESE public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</BALINESE>
	<BENGALI public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</BENGALI>
	<CHAM public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</CHAM>
	<DEVANAGARI public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</DEVANAGARI>
	<EUROPEAN public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</EUROPEAN>
	<EXTENDED_ARABIC_INDIC public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</EXTENDED_ARABIC_INDIC>
	<FULL_WIDTH public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</FULL_WIDTH>
	<GUJARATI public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</GUJARATI>
	<GURMUKHI public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</GURMUKHI>
	<KANNADA public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</KANNADA>
	<KAYAH_LI public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</KAYAH_LI>
	<KHMER public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</KHMER>
	<LAO public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</LAO>
	<LEPCHA public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</LEPCHA>
	<LIMBU public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</LIMBU>
	<MALAYALAM public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</MALAYALAM>
	<MONGOLIAN public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</MONGOLIAN>
	<MYANMAR public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</MYANMAR>
	<MYANMAR_SHAN public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</MYANMAR_SHAN>
	<NEW_TAI_LUE public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</NEW_TAI_LUE>
	<NKO public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</NKO>
	<OL_CHIKI public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</OL_CHIKI>
	<ORIYA public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</ORIYA>
	<OSMANYA public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</OSMANYA>
	<SAURASHTRA public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</SAURASHTRA>
	<SUNDANESE public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</SUNDANESE>
	<TAMIL public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</TAMIL>
	<TELUGU public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</TELUGU>
	<THAI public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</THAI>
	<TIBETAN public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</TIBETAN>
	<VAI public="1" set="null" static="1">
		<x path="flash.globalization.NationalDigitsType"/>
		<meta><m n=":enum"/></meta>
	</VAI>
	<meta>
		<m n=":native"><e>"flash.globalization.NationalDigitsType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.globalization._NationalDigitsType.NationalDigitsType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/NationalDigitsType.hx" private="1" module="flash.globalization.NationalDigitsType" extern="1" final="1">
		<ARABIC_INDIC public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</ARABIC_INDIC>
		<BALINESE public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</BALINESE>
		<BENGALI public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</BENGALI>
		<CHAM public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</CHAM>
		<DEVANAGARI public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</DEVANAGARI>
		<EUROPEAN public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</EUROPEAN>
		<EXTENDED_ARABIC_INDIC public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</EXTENDED_ARABIC_INDIC>
		<FULL_WIDTH public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</FULL_WIDTH>
		<GUJARATI public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</GUJARATI>
		<GURMUKHI public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</GURMUKHI>
		<KANNADA public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</KANNADA>
		<KAYAH_LI public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</KAYAH_LI>
		<KHMER public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</KHMER>
		<LAO public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</LAO>
		<LEPCHA public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</LEPCHA>
		<LIMBU public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</LIMBU>
		<MALAYALAM public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</MALAYALAM>
		<MONGOLIAN public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</MONGOLIAN>
		<MYANMAR public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</MYANMAR>
		<MYANMAR_SHAN public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</MYANMAR_SHAN>
		<NEW_TAI_LUE public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</NEW_TAI_LUE>
		<NKO public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</NKO>
		<OL_CHIKI public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</OL_CHIKI>
		<ORIYA public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</ORIYA>
		<OSMANYA public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</OSMANYA>
		<SAURASHTRA public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</SAURASHTRA>
		<SUNDANESE public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</SUNDANESE>
		<TAMIL public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</TAMIL>
		<TELUGU public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</TELUGU>
		<THAI public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</THAI>
		<TIBETAN public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</TIBETAN>
		<VAI public="1" set="null" static="1">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":enum"/></meta>
		</VAI>
		<meta>
			<m n=":native"><e>"flash.globalization.NationalDigitsType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.globalization.NumberFormatter" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/NumberFormatter.hx" extern="1" final="1">
		<getAvailableLocaleIDNames public="1" set="method" static="1"><f a=""><c path="flash.Vector"><c path="String"/></c></f></getAvailableLocaleIDNames>
		<actualLocaleIDName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</actualLocaleIDName>
		<decimalSeparator public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</decimalSeparator>
		<digitsType public="1" get="accessor" set="accessor">
			<x path="flash.globalization.NationalDigitsType"/>
			<meta><m n=":flash.property"/></meta>
		</digitsType>
		<fractionalDigits public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</fractionalDigits>
		<groupingPattern public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</groupingPattern>
		<groupingSeparator public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</groupingSeparator>
		<lastOperationStatus public="1" get="accessor" set="null">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":flash.property"/></meta>
		</lastOperationStatus>
		<leadingZero public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</leadingZero>
		<negativeNumberFormat public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</negativeNumberFormat>
		<negativeSymbol public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</negativeSymbol>
		<requestedLocaleIDName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</requestedLocaleIDName>
		<trailingZeros public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</trailingZeros>
		<useGrouping public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</useGrouping>
		<formatInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="String"/>
</f></formatInt>
		<formatNumber public="1" set="method"><f a="value">
	<x path="Float"/>
	<c path="String"/>
</f></formatNumber>
		<formatUint public="1" set="method"><f a="value">
	<x path="UInt"/>
	<c path="String"/>
</f></formatUint>
		<get_actualLocaleIDName set="method"><f a=""><c path="String"/></f></get_actualLocaleIDName>
		<get_decimalSeparator set="method"><f a=""><c path="String"/></f></get_decimalSeparator>
		<get_digitsType set="method"><f a=""><x path="flash.globalization.NationalDigitsType"/></f></get_digitsType>
		<get_fractionalDigits set="method"><f a=""><x path="Int"/></f></get_fractionalDigits>
		<get_groupingPattern set="method"><f a=""><c path="String"/></f></get_groupingPattern>
		<get_groupingSeparator set="method"><f a=""><c path="String"/></f></get_groupingSeparator>
		<get_lastOperationStatus set="method"><f a=""><x path="flash.globalization.LastOperationStatus"/></f></get_lastOperationStatus>
		<get_leadingZero set="method"><f a=""><x path="Bool"/></f></get_leadingZero>
		<get_negativeNumberFormat set="method"><f a=""><x path="UInt"/></f></get_negativeNumberFormat>
		<get_negativeSymbol set="method"><f a=""><c path="String"/></f></get_negativeSymbol>
		<get_requestedLocaleIDName set="method"><f a=""><c path="String"/></f></get_requestedLocaleIDName>
		<get_trailingZeros set="method"><f a=""><x path="Bool"/></f></get_trailingZeros>
		<get_useGrouping set="method"><f a=""><x path="Bool"/></f></get_useGrouping>
		<parse public="1" set="method"><f a="parseString">
	<c path="String"/>
	<c path="flash.globalization.NumberParseResult"/>
</f></parse>
		<parseNumber public="1" set="method"><f a="parseString">
	<c path="String"/>
	<x path="Float"/>
</f></parseNumber>
		<set_decimalSeparator set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_decimalSeparator>
		<set_digitsType set="method"><f a="value">
	<x path="flash.globalization.NationalDigitsType"/>
	<x path="flash.globalization.NationalDigitsType"/>
</f></set_digitsType>
		<set_fractionalDigits set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_fractionalDigits>
		<set_groupingPattern set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_groupingPattern>
		<set_groupingSeparator set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_groupingSeparator>
		<set_leadingZero set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_leadingZero>
		<set_negativeNumberFormat set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_negativeNumberFormat>
		<set_negativeSymbol set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_negativeSymbol>
		<set_trailingZeros set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_trailingZeros>
		<set_useGrouping set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useGrouping>
		<new public="1" set="method"><f a="requestedLocaleIDName">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.globalization.NumberParseResult" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/NumberParseResult.hx" extern="1" final="1">
		<endIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</endIndex>
		<startIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</startIndex>
		<value public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</value>
		<get_endIndex set="method"><f a=""><x path="Int"/></f></get_endIndex>
		<get_startIndex set="method"><f a=""><x path="Int"/></f></get_startIndex>
		<get_value set="method"><f a=""><x path="Float"/></f></get_value>
		<new public="1" set="method">
			<f a="?value:?startIndex:?endIndex" v="0.:2147483647:2147483647">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endIndex : 2147483647, startIndex : 2147483647, value : 0. }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.globalization.StringTools" params="" file="/home/runner/work/haxe/haxe/std/flash/globalization/StringTools.hx" extern="1" final="1">
		<getAvailableLocaleIDNames public="1" set="method" static="1"><f a=""><c path="flash.Vector"><c path="String"/></c></f></getAvailableLocaleIDNames>
		<actualLocaleIDName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</actualLocaleIDName>
		<lastOperationStatus public="1" get="accessor" set="null">
			<x path="flash.globalization.LastOperationStatus"/>
			<meta><m n=":flash.property"/></meta>
		</lastOperationStatus>
		<requestedLocaleIDName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</requestedLocaleIDName>
		<get_actualLocaleIDName set="method"><f a=""><c path="String"/></f></get_actualLocaleIDName>
		<get_lastOperationStatus set="method"><f a=""><x path="flash.globalization.LastOperationStatus"/></f></get_lastOperationStatus>
		<get_requestedLocaleIDName set="method"><f a=""><c path="String"/></f></get_requestedLocaleIDName>
		<toLowerCase public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></toLowerCase>
		<toUpperCase public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></toUpperCase>
		<new public="1" set="method"><f a="requestedLocaleIDName">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.media.AVABRParameters" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVABRParameters.hx" extern="1">
		<AGGRESSIVE final="1" public="1" set="null" static="1"><c path="String"/></AGGRESSIVE>
		<CONSERVATIVE final="1" public="1" set="null" static="1"><c path="String"/></CONSERVATIVE>
		<MODERATE final="1" public="1" set="null" static="1"><c path="String"/></MODERATE>
		<maxBitsPerSecond public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</maxBitsPerSecond>
		<minBitsPerSecond public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</minBitsPerSecond>
		<policy public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</policy>
		<startBitsPerSecond public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</startBitsPerSecond>
		<get_maxBitsPerSecond set="method"><f a=""><x path="Int"/></f></get_maxBitsPerSecond>
		<get_minBitsPerSecond set="method"><f a=""><x path="Int"/></f></get_minBitsPerSecond>
		<get_policy set="method"><f a=""><c path="String"/></f></get_policy>
		<get_startBitsPerSecond set="method"><f a=""><x path="Int"/></f></get_startBitsPerSecond>
		<set_maxBitsPerSecond set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_maxBitsPerSecond>
		<set_minBitsPerSecond set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_minBitsPerSecond>
		<set_policy set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_policy>
		<set_startBitsPerSecond set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_startBitsPerSecond>
		<new public="1" set="method"><f a="init_policy:init_startBitsPerSecond:init_minBitsPerSecond:init_maxBitsPerSecond">
	<c path="String"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVABRProfileInfo" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVABRProfileInfo.hx" extern="1">
		<bitsPerSecond public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</bitsPerSecond>
		<height public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</height>
		<width public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</width>
		<get_bitsPerSecond set="method"><f a=""><x path="Int"/></f></get_bitsPerSecond>
		<get_height set="method"><f a=""><x path="Int"/></f></get_height>
		<get_width set="method"><f a=""><x path="Int"/></f></get_width>
		<new public="1" set="method"><f a="init_bitsPerSecond:init_width:init_height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVCaptionStyle" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVCaptionStyle.hx" extern="1">
		<BLACK final="1" public="1" set="null" static="1"><c path="String"/></BLACK>
		<BLUE final="1" public="1" set="null" static="1"><c path="String"/></BLUE>
		<BRIGHT_BLUE final="1" public="1" set="null" static="1"><c path="String"/></BRIGHT_BLUE>
		<BRIGHT_CYAN final="1" public="1" set="null" static="1"><c path="String"/></BRIGHT_CYAN>
		<BRIGHT_GREEN final="1" public="1" set="null" static="1"><c path="String"/></BRIGHT_GREEN>
		<BRIGHT_MAGENTA final="1" public="1" set="null" static="1"><c path="String"/></BRIGHT_MAGENTA>
		<BRIGHT_RED final="1" public="1" set="null" static="1"><c path="String"/></BRIGHT_RED>
		<BRIGHT_WHITE final="1" public="1" set="null" static="1"><c path="String"/></BRIGHT_WHITE>
		<BRIGHT_YELLOW final="1" public="1" set="null" static="1"><c path="String"/></BRIGHT_YELLOW>
		<CASUAL final="1" public="1" set="null" static="1"><c path="String"/></CASUAL>
		<CURSIVE final="1" public="1" set="null" static="1"><c path="String"/></CURSIVE>
		<CYAN final="1" public="1" set="null" static="1"><c path="String"/></CYAN>
		<DARK_BLUE final="1" public="1" set="null" static="1"><c path="String"/></DARK_BLUE>
		<DARK_CYAN final="1" public="1" set="null" static="1"><c path="String"/></DARK_CYAN>
		<DARK_GREEN final="1" public="1" set="null" static="1"><c path="String"/></DARK_GREEN>
		<DARK_MAGENTA final="1" public="1" set="null" static="1"><c path="String"/></DARK_MAGENTA>
		<DARK_RED final="1" public="1" set="null" static="1"><c path="String"/></DARK_RED>
		<DARK_YELLOW final="1" public="1" set="null" static="1"><c path="String"/></DARK_YELLOW>
		<DEFAULT final="1" public="1" set="null" static="1"><c path="String"/></DEFAULT>
		<DEPRESSED final="1" public="1" set="null" static="1"><c path="String"/></DEPRESSED>
		<GRAY final="1" public="1" set="null" static="1"><c path="String"/></GRAY>
		<GREEN final="1" public="1" set="null" static="1"><c path="String"/></GREEN>
		<LARGE final="1" public="1" set="null" static="1"><c path="String"/></LARGE>
		<LEFT_DROP_SHADOW final="1" public="1" set="null" static="1"><c path="String"/></LEFT_DROP_SHADOW>
		<MAGENTA final="1" public="1" set="null" static="1"><c path="String"/></MAGENTA>
		<MEDIUM final="1" public="1" set="null" static="1"><c path="String"/></MEDIUM>
		<MONOSPACED_WITHOUT_SERIFS final="1" public="1" set="null" static="1"><c path="String"/></MONOSPACED_WITHOUT_SERIFS>
		<MONOSPACE_WITH_SERIFS final="1" public="1" set="null" static="1"><c path="String"/></MONOSPACE_WITH_SERIFS>
		<NONE final="1" public="1" set="null" static="1"><c path="String"/></NONE>
		<PROPORTIONAL_WITHOUT_SERIFS final="1" public="1" set="null" static="1"><c path="String"/></PROPORTIONAL_WITHOUT_SERIFS>
		<PROPORTIONAL_WITH_SERIFS final="1" public="1" set="null" static="1"><c path="String"/></PROPORTIONAL_WITH_SERIFS>
		<RAISED final="1" public="1" set="null" static="1"><c path="String"/></RAISED>
		<RED final="1" public="1" set="null" static="1"><c path="String"/></RED>
		<RIGHT_DROP_SHADOW final="1" public="1" set="null" static="1"><c path="String"/></RIGHT_DROP_SHADOW>
		<SMALL final="1" public="1" set="null" static="1"><c path="String"/></SMALL>
		<SMALL_CAPITALS final="1" public="1" set="null" static="1"><c path="String"/></SMALL_CAPITALS>
		<UNIFORM final="1" public="1" set="null" static="1"><c path="String"/></UNIFORM>
		<WHITE final="1" public="1" set="null" static="1"><c path="String"/></WHITE>
		<YELLOW final="1" public="1" set="null" static="1"><c path="String"/></YELLOW>
		<backgroundColor public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</backgroundColor>
		<backgroundOpacity public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</backgroundOpacity>
		<bottomInset public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</bottomInset>
		<edgeColor public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</edgeColor>
		<fillColor public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</fillColor>
		<fillOpacity public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</fillOpacity>
		<font public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</font>
		<fontColor public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</fontColor>
		<fontEdge public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</fontEdge>
		<fontOpacity public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</fontOpacity>
		<size public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</size>
		<get_backgroundColor set="method"><f a=""><c path="String"/></f></get_backgroundColor>
		<get_backgroundOpacity set="method"><f a=""><c path="String"/></f></get_backgroundOpacity>
		<get_bottomInset set="method"><f a=""><c path="String"/></f></get_bottomInset>
		<get_edgeColor set="method"><f a=""><c path="String"/></f></get_edgeColor>
		<get_fillColor set="method"><f a=""><c path="String"/></f></get_fillColor>
		<get_fillOpacity set="method"><f a=""><c path="String"/></f></get_fillOpacity>
		<get_font set="method"><f a=""><c path="String"/></f></get_font>
		<get_fontColor set="method"><f a=""><c path="String"/></f></get_fontColor>
		<get_fontEdge set="method"><f a=""><c path="String"/></f></get_fontEdge>
		<get_fontOpacity set="method"><f a=""><c path="String"/></f></get_fontOpacity>
		<get_size set="method"><f a=""><c path="String"/></f></get_size>
		<set_backgroundColor set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_backgroundColor>
		<set_backgroundOpacity set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_backgroundOpacity>
		<set_bottomInset set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_bottomInset>
		<set_edgeColor set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_edgeColor>
		<set_fillColor set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_fillColor>
		<set_fillOpacity set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_fillOpacity>
		<set_font set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_font>
		<set_fontColor set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_fontColor>
		<set_fontEdge set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_fontEdge>
		<set_fontOpacity set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_fontOpacity>
		<set_size set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_size>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVCuePoint" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVCuePoint.hx" extern="1">
		<dictionary public="1" get="accessor" set="null">
			<c path="flash.utils.Dictionary"/>
			<meta><m n=":flash.property"/></meta>
		</dictionary>
		<localTime public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</localTime>
		<get_dictionary set="method"><f a=""><c path="flash.utils.Dictionary"/></f></get_dictionary>
		<get_localTime set="method"><f a=""><x path="Float"/></f></get_localTime>
		<new public="1" set="method"><f a="init_dictionary:init_localTime">
	<c path="flash.utils.Dictionary"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVResult" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVResult.hx" extern="1">
		<ASYNC_OPERATION_IN_PROGRESS final="1" public="1" set="null" static="1"><x path="Int"/></ASYNC_OPERATION_IN_PROGRESS>
		<AUDIO_ONLY_STREAM_END final="1" public="1" set="null" static="1"><x path="Int"/></AUDIO_ONLY_STREAM_END>
		<AUDIO_ONLY_STREAM_START final="1" public="1" set="null" static="1"><x path="Int"/></AUDIO_ONLY_STREAM_START>
		<AUDIO_START_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></AUDIO_START_ERROR>
		<BAD_MANIFEST_SIGNATURE final="1" public="1" set="null" static="1"><x path="Int"/></BAD_MANIFEST_SIGNATURE>
		<BAD_MEDIASAMPLE_FOUND final="1" public="1" set="null" static="1"><x path="Int"/></BAD_MEDIASAMPLE_FOUND>
		<BAD_MEDIA_INTERLEAVING final="1" public="1" set="null" static="1"><x path="Int"/></BAD_MEDIA_INTERLEAVING>
		<CALLED_FROM_WRONG_THREAD final="1" public="1" set="null" static="1"><x path="Int"/></CALLED_FROM_WRONG_THREAD>
		<CANNOT_ERASE_TIMELINE final="1" public="1" set="null" static="1"><x path="Int"/></CANNOT_ERASE_TIMELINE>
		<CANNOT_FAIL_OVER final="1" public="1" set="null" static="1"><x path="Int"/></CANNOT_FAIL_OVER>
		<CANNOT_HANDLE_MAIN_MANIFEST_UPDATE final="1" public="1" set="null" static="1"><x path="Int"/></CANNOT_HANDLE_MAIN_MANIFEST_UPDATE>
		<CANNOT_LOAD_PLAY_LIST final="1" public="1" set="null" static="1"><x path="Int"/></CANNOT_LOAD_PLAY_LIST>
		<CANNOT_SPLIT_TIMELINE final="1" public="1" set="null" static="1"><x path="Int"/></CANNOT_SPLIT_TIMELINE>
		<CODEC_NOT_SUPPORTED final="1" public="1" set="null" static="1"><x path="Int"/></CODEC_NOT_SUPPORTED>
		<COMPONENT_CREATION_FAILURE final="1" public="1" set="null" static="1"><x path="Int"/></COMPONENT_CREATION_FAILURE>
		<CONTAINER_NOT_SUPPORTED final="1" public="1" set="null" static="1"><x path="Int"/></CONTAINER_NOT_SUPPORTED>
		<CONTENT_LENGTH_MISMATCH final="1" public="1" set="null" static="1"><x path="Int"/></CONTENT_LENGTH_MISMATCH>
		<CRYPTO_ALGORITHM_NOT_SUPPORTED final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ALGORITHM_NOT_SUPPORTED>
		<CRYPTO_ERROR_BAD_CERTIFICATE final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_BAD_CERTIFICATE>
		<CRYPTO_ERROR_BAD_PARAMETER final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_BAD_PARAMETER>
		<CRYPTO_ERROR_BUFFER_TOO_SMALL final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_BUFFER_TOO_SMALL>
		<CRYPTO_ERROR_CORRUPTED_DATA final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_CORRUPTED_DATA>
		<CRYPTO_ERROR_DIGEST_FINISH final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_DIGEST_FINISH>
		<CRYPTO_ERROR_DIGEST_UPDATE final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_DIGEST_UPDATE>
		<CRYPTO_ERROR_UNKNOWN final="1" public="1" set="null" static="1"><x path="Int"/></CRYPTO_ERROR_UNKNOWN>
		<CURRENT_PERIOD_EXPIRED final="1" public="1" set="null" static="1"><x path="Int"/></CURRENT_PERIOD_EXPIRED>
		<DECODER_FAILED final="1" public="1" set="null" static="1"><x path="Int"/></DECODER_FAILED>
		<DEVICE_OPEN_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></DEVICE_OPEN_ERROR>
		<DID_NOT_GET_NEXT_FRAGMENT final="1" public="1" set="null" static="1"><x path="Int"/></DID_NOT_GET_NEXT_FRAGMENT>
		<DRM_INIT_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></DRM_INIT_ERROR>
		<DRM_NOT_AVAILABLE final="1" public="1" set="null" static="1"><x path="Int"/></DRM_NOT_AVAILABLE>
		<END_OF_PERIOD final="1" public="1" set="null" static="1"><x path="Int"/></END_OF_PERIOD>
		<EOF final="1" public="1" set="null" static="1"><x path="Int"/></EOF>
		<FILE_NOT_FOUND final="1" public="1" set="null" static="1"><x path="Int"/></FILE_NOT_FOUND>
		<FILE_OPEN_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></FILE_OPEN_ERROR>
		<FILE_READ_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></FILE_READ_ERROR>
		<FILE_STRUCTURE_INVALID final="1" public="1" set="null" static="1"><x path="Int"/></FILE_STRUCTURE_INVALID>
		<FILE_WRITE_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></FILE_WRITE_ERROR>
		<FRAGMENT_READ_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></FRAGMENT_READ_ERROR>
		<GENERIC_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></GENERIC_ERROR>
		<HTTP_TIME_OUT final="1" public="1" set="null" static="1"><x path="Int"/></HTTP_TIME_OUT>
		<ID3_PARSE_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></ID3_PARSE_ERROR>
		<INCOMPATIBLE_RENDER_MODE final="1" public="1" set="null" static="1"><x path="Int"/></INCOMPATIBLE_RENDER_MODE>
		<INCOMPATIBLE_VERSION final="1" public="1" set="null" static="1"><x path="Int"/></INCOMPATIBLE_VERSION>
		<INTERNAL_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></INTERNAL_ERROR>
		<INVALID_KEY final="1" public="1" set="null" static="1"><x path="Int"/></INVALID_KEY>
		<INVALID_OPERATION final="1" public="1" set="null" static="1"><x path="Int"/></INVALID_OPERATION>
		<INVALID_PARAMETER final="1" public="1" set="null" static="1"><x path="Int"/></INVALID_PARAMETER>
		<INVALID_REPLACE_DURATION final="1" public="1" set="null" static="1"><x path="Int"/></INVALID_REPLACE_DURATION>
		<INVALID_SEEK_TIME final="1" public="1" set="null" static="1"><x path="Int"/></INVALID_SEEK_TIME>
		<INVALID_WITH_AUDIO_ONLY_FILE final="1" public="1" set="null" static="1"><x path="Int"/></INVALID_WITH_AUDIO_ONLY_FILE>
		<IRRECOVERABLE_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></IRRECOVERABLE_ERROR>
		<KEY_NOT_FOUND final="1" public="1" set="null" static="1"><x path="Int"/></KEY_NOT_FOUND>
		<KEY_SERVER_NOT_FOUND final="1" public="1" set="null" static="1"><x path="Int"/></KEY_SERVER_NOT_FOUND>
		<LISTENER_NOT_FOUND final="1" public="1" set="null" static="1"><x path="Int"/></LISTENER_NOT_FOUND>
		<LIVE_HOLD final="1" public="1" set="null" static="1"><x path="Int"/></LIVE_HOLD>
		<LIVE_WINDOW_MOVED_BACKWARD final="1" public="1" set="null" static="1"><x path="Int"/></LIVE_WINDOW_MOVED_BACKWARD>
		<LOST_CONNECTION_RECOVERABLE final="1" public="1" set="null" static="1"><x path="Int"/></LOST_CONNECTION_RECOVERABLE>
		<MAIN_MANIFEST_UPDATE_TO_BE_HANDLED final="1" public="1" set="null" static="1"><x path="Int"/></MAIN_MANIFEST_UPDATE_TO_BE_HANDLED>
		<MANIFEST_FILE_UNEXPECTEDLY_CHANGED final="1" public="1" set="null" static="1"><x path="Int"/></MANIFEST_FILE_UNEXPECTEDLY_CHANGED>
		<NETWORK_DOWN final="1" public="1" set="null" static="1"><x path="Int"/></NETWORK_DOWN>
		<NETWORK_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></NETWORK_ERROR>
		<NETWORK_UNAVAILABLE final="1" public="1" set="null" static="1"><x path="Int"/></NETWORK_UNAVAILABLE>
		<NOT_IMPLEMENTED final="1" public="1" set="null" static="1"><x path="Int"/></NOT_IMPLEMENTED>
		<NO_AUDIO_SINK final="1" public="1" set="null" static="1"><x path="Int"/></NO_AUDIO_SINK>
		<NO_FIXED_SIZE final="1" public="1" set="null" static="1"><x path="Int"/></NO_FIXED_SIZE>
		<NO_TIMELINE final="1" public="1" set="null" static="1"><x path="Int"/></NO_TIMELINE>
		<NO_USEABLE_BITRATE_PROFILE final="1" public="1" set="null" static="1"><x path="Int"/></NO_USEABLE_BITRATE_PROFILE>
		<NULL_OPERATION final="1" public="1" set="null" static="1"><x path="Int"/></NULL_OPERATION>
		<ONLY_ALLOWED_IN_PAUSED_STATE final="1" public="1" set="null" static="1"><x path="Int"/></ONLY_ALLOWED_IN_PAUSED_STATE>
		<OPERATION_ABORTED final="1" public="1" set="null" static="1"><x path="Int"/></OPERATION_ABORTED>
		<OUT_OF_MEMORY final="1" public="1" set="null" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<OVERFLOW final="1" public="1" set="null" static="1"><x path="Int"/></OVERFLOW>
		<PARSE_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></PARSE_ERROR>
		<PARTIAL_REPLACEMENT final="1" public="1" set="null" static="1"><x path="Int"/></PARTIAL_REPLACEMENT>
		<PERIOD_HOLD final="1" public="1" set="null" static="1"><x path="Int"/></PERIOD_HOLD>
		<PERIOD_NOT_LOADED final="1" public="1" set="null" static="1"><x path="Int"/></PERIOD_NOT_LOADED>
		<PLAYBACK_NOT_ENABLED final="1" public="1" set="null" static="1"><x path="Int"/></PLAYBACK_NOT_ENABLED>
		<POSTROLL_WITH_LIVE_NOT_ALLOWED final="1" public="1" set="null" static="1"><x path="Int"/></POSTROLL_WITH_LIVE_NOT_ALLOWED>
		<PREVIOUS_STEP_SEEK_IN_PROGRESS final="1" public="1" set="null" static="1"><x path="Int"/></PREVIOUS_STEP_SEEK_IN_PROGRESS>
		<PROTOCOL_NOT_SUPPORTED final="1" public="1" set="null" static="1"><x path="Int"/></PROTOCOL_NOT_SUPPORTED>
		<RANGE_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></RANGE_ERROR>
		<RANGE_SPANS_READHEAD final="1" public="1" set="null" static="1"><x path="Int"/></RANGE_SPANS_READHEAD>
		<RENDITION_M3U8_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></RENDITION_M3U8_ERROR>
		<REPLACEMENT_FAILED final="1" public="1" set="null" static="1"><x path="Int"/></REPLACEMENT_FAILED>
		<RESOURCE_NOT_SPECIFIED final="1" public="1" set="null" static="1"><x path="Int"/></RESOURCE_NOT_SPECIFIED>
		<SECURITY_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></SECURITY_ERROR>
		<SEEK_FAILED final="1" public="1" set="null" static="1"><x path="Int"/></SEEK_FAILED>
		<SEGMENT_SKIPPED_ON_FAILURE final="1" public="1" set="null" static="1"><x path="Int"/></SEGMENT_SKIPPED_ON_FAILURE>
		<SIZE_UNKNOWN final="1" public="1" set="null" static="1"><x path="Int"/></SIZE_UNKNOWN>
		<SPS_PPS_FOUND_OUTSIDE_AVCC final="1" public="1" set="null" static="1"><x path="Int"/></SPS_PPS_FOUND_OUTSIDE_AVCC>
		<SUCCESS final="1" public="1" set="null" static="1"><x path="Int"/></SUCCESS>
		<SWITCH_TO_ASYMMETRIC_PROFILE final="1" public="1" set="null" static="1"><x path="Int"/></SWITCH_TO_ASYMMETRIC_PROFILE>
		<TIMELINE_TOO_SHORT final="1" public="1" set="null" static="1"><x path="Int"/></TIMELINE_TOO_SHORT>
		<UNDERFLOW final="1" public="1" set="null" static="1"><x path="Int"/></UNDERFLOW>
		<UNREPORTED_TIME_DISCONTINUITY_FOUND final="1" public="1" set="null" static="1"><x path="Int"/></UNREPORTED_TIME_DISCONTINUITY_FOUND>
		<UNSUPPORTED_CONFIGURATION final="1" public="1" set="null" static="1"><x path="Int"/></UNSUPPORTED_CONFIGURATION>
		<UNSUPPORTED_HLS_VERSION final="1" public="1" set="null" static="1"><x path="Int"/></UNSUPPORTED_HLS_VERSION>
		<UNSUPPORTED_OPERATION final="1" public="1" set="null" static="1"><x path="Int"/></UNSUPPORTED_OPERATION>
		<VIDEO_PROFILE_NOT_SUPPORTED final="1" public="1" set="null" static="1"><x path="Int"/></VIDEO_PROFILE_NOT_SUPPORTED>
		<WAITING_FOR_INIT final="1" public="1" set="null" static="1"><x path="Int"/></WAITING_FOR_INIT>
		<result public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</result>
		<get_result set="method"><f a=""><x path="Int"/></f></get_result>
		<new public="1" set="method"><f a="inResult">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVInsertionResult" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVInsertionResult.hx" extern="1">
		<extends path="flash.media.AVResult"/>
		<insertedBeforeReadHead public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</insertedBeforeReadHead>
		<periodIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</periodIndex>
		<get_insertedBeforeReadHead set="method"><f a=""><x path="Bool"/></f></get_insertedBeforeReadHead>
		<get_periodIndex set="method"><f a=""><x path="Int"/></f></get_periodIndex>
		<new public="1" set="method"><f a="result:periodIndex:insertedBeforeReadHead">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVNetworkingParams" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVNetworkingParams.hx" extern="1">
		<appendRandomQueryParameter public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</appendRandomQueryParameter>
		<forceNativeNetworking public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</forceNativeNetworking>
		<networkDownVerificationUrl public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</networkDownVerificationUrl>
		<readSetCookieHeader public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</readSetCookieHeader>
		<useCookieHeaderForAllRequests public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</useCookieHeaderForAllRequests>
		<get_appendRandomQueryParameter set="method"><f a=""><c path="String"/></f></get_appendRandomQueryParameter>
		<get_forceNativeNetworking set="method"><f a=""><x path="Bool"/></f></get_forceNativeNetworking>
		<get_networkDownVerificationUrl set="method"><f a=""><c path="String"/></f></get_networkDownVerificationUrl>
		<get_readSetCookieHeader set="method"><f a=""><x path="Bool"/></f></get_readSetCookieHeader>
		<get_useCookieHeaderForAllRequests set="method"><f a=""><x path="Bool"/></f></get_useCookieHeaderForAllRequests>
		<set_appendRandomQueryParameter set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_appendRandomQueryParameter>
		<set_forceNativeNetworking set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_forceNativeNetworking>
		<set_networkDownVerificationUrl set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_networkDownVerificationUrl>
		<set_readSetCookieHeader set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_readSetCookieHeader>
		<set_useCookieHeaderForAllRequests set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useCookieHeaderForAllRequests>
		<new public="1" set="method">
			<f a="?init_forceNativeNetworking:?init_readSetCookieHeader:?init_useCookieHeaderForAllRequests:?init_networkDownVerificationUrl" v="false:true:false:">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ init_useCookieHeaderForAllRequests : false, init_readSetCookieHeader : true, init_forceNativeNetworking : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.media.AVPeriodInfo" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVPeriodInfo.hx" extern="1">
		<duration public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</duration>
		<firstCuePointIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</firstCuePointIndex>
		<firstSubscribedTagIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</firstSubscribedTagIndex>
		<lastCuePointIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</lastCuePointIndex>
		<lastSubscribedTagIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</lastSubscribedTagIndex>
		<localStartTime public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</localStartTime>
		<supportsTrickPlay public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</supportsTrickPlay>
		<targetDuration public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</targetDuration>
		<userData public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</userData>
		<virtualStartTime public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</virtualStartTime>
		<get_duration set="method"><f a=""><x path="Float"/></f></get_duration>
		<get_firstCuePointIndex set="method"><f a=""><x path="Int"/></f></get_firstCuePointIndex>
		<get_firstSubscribedTagIndex set="method"><f a=""><x path="Int"/></f></get_firstSubscribedTagIndex>
		<get_lastCuePointIndex set="method"><f a=""><x path="Int"/></f></get_lastCuePointIndex>
		<get_lastSubscribedTagIndex set="method"><f a=""><x path="Int"/></f></get_lastSubscribedTagIndex>
		<get_localStartTime set="method"><f a=""><x path="Float"/></f></get_localStartTime>
		<get_supportsTrickPlay set="method"><f a=""><x path="Bool"/></f></get_supportsTrickPlay>
		<get_targetDuration set="method"><f a=""><x path="Float"/></f></get_targetDuration>
		<get_userData set="method"><f a=""><x path="Int"/></f></get_userData>
		<get_virtualStartTime set="method"><f a=""><x path="Float"/></f></get_virtualStartTime>
		<new public="1" set="method"><f a="init_localStartTime:init_virtualStartTime:init_duration:init_firstCuePointIndex:init_lastCuePointIndex:init_firstSubscribedTagIndex:init_lastSubscribedTagIndex:init_userData:init_supportsTrickPlay:init_targetDuration">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVPlayState" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVPlayState.hx" extern="1">
		<BUFFERING final="1" public="1" set="null" static="1"><x path="Int"/></BUFFERING>
		<EOF final="1" public="1" set="null" static="1"><x path="Int"/></EOF>
		<PAUSED final="1" public="1" set="null" static="1"><x path="Int"/></PAUSED>
		<PLAYING final="1" public="1" set="null" static="1"><x path="Int"/></PLAYING>
		<READY final="1" public="1" set="null" static="1"><x path="Int"/></READY>
		<SUSPENDED final="1" public="1" set="null" static="1"><x path="Int"/></SUSPENDED>
		<TRICK_PLAY final="1" public="1" set="null" static="1"><x path="Int"/></TRICK_PLAY>
		<UNINITIALIZED final="1" public="1" set="null" static="1"><x path="Int"/></UNINITIALIZED>
		<UNRECOVERABLE_ERROR final="1" public="1" set="null" static="1"><x path="Int"/></UNRECOVERABLE_ERROR>
		<state public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</state>
		<get_state set="method"><f a=""><x path="Int"/></f></get_state>
		<new public="1" set="method"><f a="state">
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVSource" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVSource.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVSegmentedSource" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVSegmentedSource.hx" extern="1">
		<extends path="flash.media.AVSource"/>
		<AUDIO final="1" public="1" set="null" static="1"><c path="String"/></AUDIO>
		<AUDIO_DESCRIPTION final="1" public="1" set="null" static="1"><c path="String"/></AUDIO_DESCRIPTION>
		<AUDIO_LANGUAGE final="1" public="1" set="null" static="1"><c path="String"/></AUDIO_LANGUAGE>
		<AUDIO_PID final="1" public="1" set="null" static="1"><c path="String"/></AUDIO_PID>
		<DASH final="1" public="1" set="null" static="1"><c path="String"/></DASH>
		<DATA final="1" public="1" set="null" static="1"><c path="String"/></DATA>
		<DATA_DESCRIPTION final="1" public="1" set="null" static="1"><c path="String"/></DATA_DESCRIPTION>
		<HLS final="1" public="1" set="null" static="1"><c path="String"/></HLS>
		<VIDEO final="1" public="1" set="null" static="1"><c path="String"/></VIDEO>
		<VIDEO_DESCRIPTION final="1" public="1" set="null" static="1"><c path="String"/></VIDEO_DESCRIPTION>
		<cookieHeader public="1" get="null" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</cookieHeader>
		<masterUpdateInterval public="1" get="null" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</masterUpdateInterval>
		<networkingParams public="1" get="accessor" set="accessor">
			<c path="flash.media.AVNetworkingParams"/>
			<meta><m n=":flash.property"/></meta>
		</networkingParams>
		<useRedirectedUrl public="1" get="null" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</useRedirectedUrl>
		<addCustomHeader public="1" set="method"><f a="headerName:args">
	<c path="String"/>
	<c path="flash.Vector"><c path="String"/></c>
	<x path="Void"/>
</f></addCustomHeader>
		<clearPauseAtPeriodEnd public="1" set="method"><f a="periodIndex">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></clearPauseAtPeriodEnd>
		<getABRProfileCount public="1" set="method"><f a="periodIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getABRProfileCount>
		<getABRProfileInfoAtIndex public="1" set="method"><f a="periodIndex:abrProfileIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.media.AVABRProfileInfo"/>
</f></getABRProfileInfoAtIndex>
		<getBackgroundPeriodInfo public="1" set="method"><f a="periodIndex">
	<x path="Int"/>
	<c path="flash.media.AVPeriodInfo"/>
</f></getBackgroundPeriodInfo>
		<getBackgroundTimeline public="1" set="method"><f a=""><c path="flash.media.AVTimeline"/></f></getBackgroundTimeline>
		<getCuePoint public="1" set="method"><f a="periodIndex:cuePointIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.media.AVCuePoint"/>
</f></getCuePoint>
		<getMediaPreferredStartTime public="1" set="method"><f a=""><x path="Float"/></f></getMediaPreferredStartTime>
		<getPerceivedBandwidth public="1" set="method"><f a=""><x path="UInt"/></f></getPerceivedBandwidth>
		<getPeriodInfo public="1" set="method"><f a="periodIndex">
	<x path="Int"/>
	<c path="flash.media.AVPeriodInfo"/>
</f></getPeriodInfo>
		<getPeriodInfoWithTagsAcrossIndexes public="1" set="method"><f a="periodIndex:startPeriodIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.media.AVPeriodInfo"/>
</f></getPeriodInfoWithTagsAcrossIndexes>
		<getSubscribedTag public="1" set="method"><f a="periodIndex:tagDataIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.media.AVTagData"/>
</f></getSubscribedTag>
		<getSubscribedTagForBackgroundManifest public="1" set="method"><f a="periodIndex:tagDataIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.media.AVTagData"/>
</f></getSubscribedTagForBackgroundManifest>
		<getTimeline public="1" set="method"><f a=""><c path="flash.media.AVTimeline"/></f></getTimeline>
		<getTimelineSubscribedTag public="1" set="method"><f a="tagDataIndex">
	<x path="Int"/>
	<c path="flash.media.AVTagData"/>
</f></getTimelineSubscribedTag>
		<getTimelineSubscribedTagForBackgroundManifest public="1" set="method"><f a="tagDataIndex">
	<x path="Int"/>
	<c path="flash.media.AVTagData"/>
</f></getTimelineSubscribedTagForBackgroundManifest>
		<getTrackCount public="1" set="method"><f a="periodIndex:payloadType">
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
</f></getTrackCount>
		<getTrackInfo public="1" set="method"><f a="periodIndex:payloadType:trackIndex">
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="flash.media.AVTrackInfo"/>
</f></getTrackInfo>
		<get_networkingParams set="method"><f a=""><c path="flash.media.AVNetworkingParams"/></f></get_networkingParams>
		<insertByLocalTime public="1" set="method">
			<f a="periodIndex:insertionTime:handle:?userData:?replaceDuration" v=":::0:0">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="flash.media.AVInsertionResult"/>
			</f>
			<meta><m n=":value"><e>{ replaceDuration : 0, userData : 0 }</e></m></meta>
		</insertByLocalTime>
		<insertByVirtualTime public="1" set="method">
			<f a="insertionTime:handle:?userData:?replaceDuration" v="::0:0">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="flash.media.AVInsertionResult"/>
			</f>
			<meta><m n=":value"><e>{ replaceDuration : 0, userData : 0 }</e></m></meta>
		</insertByVirtualTime>
		<load public="1" set="method">
			<f a="url:?containerType:?userData" v="::0">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{ userData : 0 }</e></m></meta>
		</load>
		<loadManifest public="1" set="method">
			<f a="uri:?userData:?containerType" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{ userData : 0 }</e></m></meta>
		</loadManifest>
		<loadWithBackgroundManifest public="1" set="method"><f a="url:containerType:userData:backgroundManifest">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="flash.media.AVResult"/>
</f></loadWithBackgroundManifest>
		<releaseManifest public="1" set="method"><f a="handle">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></releaseManifest>
		<removeByLocalTime public="1" set="method"><f a="periodIndex:timeStart:timeEnd:replaceWithMainMedia">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<c path="flash.media.AVResult"/>
</f></removeByLocalTime>
		<removeByVirtualTime public="1" set="method"><f a="virtualTimeStart:virtualTimeEnd">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></removeByVirtualTime>
		<removeByVirtualTimeWithReplacement public="1" set="method"><f a="virtualTimeStart:virtualTimeEnd:replaceWithMainMedia">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<c path="flash.media.AVResult"/>
</f></removeByVirtualTimeWithReplacement>
		<selectTrack public="1" set="method"><f a="periodIndex:payloadType:trackIndex">
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></selectTrack>
		<selectTrackString public="1" set="method"><f a="periodIndex:payloadType:trackString">
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="flash.media.AVResult"/>
</f></selectTrackString>
		<setABRParameters public="1" set="method"><f a="params">
	<c path="flash.media.AVABRParameters"/>
	<c path="flash.media.AVResult"/>
</f></setABRParameters>
		<setBandwidth public="1" set="method"><f a="bitsPerSecond">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></setBandwidth>
		<setCuePointTags public="1" set="method"><f a="tagArray">
	<c path="Array"><d/></c>
	<c path="flash.media.AVResult"/>
</f></setCuePointTags>
		<setHoldAt public="1" set="method"><f a="time">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></setHoldAt>
		<setPauseAtPeriodEnd public="1" set="method">
			<f a="periodIndex:?userData" v=":0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{ userData : 0 }</e></m></meta>
		</setPauseAtPeriodEnd>
		<setSubscribedTags public="1" set="method"><f a="tagArray">
	<c path="Array"><d/></c>
	<c path="flash.media.AVResult"/>
</f></setSubscribedTags>
		<setSubscribedTagsForBackgroundManifest public="1" set="method"><f a="tagArray">
	<c path="Array"><d/></c>
	<c path="flash.media.AVResult"/>
</f></setSubscribedTagsForBackgroundManifest>
		<set_cookieHeader set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_cookieHeader>
		<set_masterUpdateInterval set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_masterUpdateInterval>
		<set_networkingParams set="method"><f a="value">
	<c path="flash.media.AVNetworkingParams"/>
	<c path="flash.media.AVNetworkingParams"/>
</f></set_networkingParams>
		<set_useRedirectedUrl set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useRedirectedUrl>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVStream" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<HARDWARE final="1" public="1" set="null" static="1"><c path="String"/></HARDWARE>
		<SOFTWARE final="1" public="1" set="null" static="1"><c path="String"/></SOFTWARE>
		<UNDEFINED final="1" public="1" set="null" static="1"><c path="String"/></UNDEFINED>
		<backBufferLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</backBufferLength>
		<backBufferTime public="1" get="null" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</backBufferTime>
		<bufferLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bufferLength>
		<bufferTime public="1" get="null" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bufferTime>
		<captionStyle public="1" get="null" set="accessor">
			<c path="flash.media.AVCaptionStyle"/>
			<meta><m n=":flash.property"/></meta>
		</captionStyle>
		<captionsEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</captionsEnabled>
		<clientLivePoint public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</clientLivePoint>
		<currentFPS public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</currentFPS>
		<decoderType public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</decoderType>
		<droppedFrames public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</droppedFrames>
		<frameTime public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</frameTime>
		<initialBufferTime public="1" get="null" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</initialBufferTime>
		<playState public="1" get="accessor" set="null">
			<c path="flash.media.AVPlayState"/>
			<meta><m n=":flash.property"/></meta>
		</playState>
		<renderType public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</renderType>
		<time public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</time>
		<useHardwareDecoder public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</useHardwareDecoder>
		<volume public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</volume>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<fastForward public="1" set="method"><f a="rate">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></fastForward>
		<get_backBufferLength set="method"><f a=""><x path="Float"/></f></get_backBufferLength>
		<get_bufferLength set="method"><f a=""><x path="Float"/></f></get_bufferLength>
		<get_captionsEnabled set="method"><f a=""><x path="Bool"/></f></get_captionsEnabled>
		<get_clientLivePoint set="method"><f a=""><x path="Float"/></f></get_clientLivePoint>
		<get_currentFPS set="method"><f a=""><x path="Float"/></f></get_currentFPS>
		<get_decoderType set="method"><f a=""><c path="String"/></f></get_decoderType>
		<get_droppedFrames set="method"><f a=""><x path="Int"/></f></get_droppedFrames>
		<get_frameTime set="method"><f a=""><x path="Float"/></f></get_frameTime>
		<get_playState set="method"><f a=""><c path="flash.media.AVPlayState"/></f></get_playState>
		<get_renderType set="method"><f a=""><c path="String"/></f></get_renderType>
		<get_time set="method"><f a=""><x path="Float"/></f></get_time>
		<get_useHardwareDecoder set="method"><f a=""><x path="Bool"/></f></get_useHardwareDecoder>
		<get_volume set="method"><f a=""><x path="Float"/></f></get_volume>
		<pause public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></pause>
		<play public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></play>
		<resume public="1" set="method"><f a=""><x path="Bool"/></f></resume>
		<rewind public="1" set="method"><f a="rate">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></rewind>
		<seek public="1" set="method">
			<f a="offset:?inBufferSeek" v=":true">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{ inBufferSeek : true }</e></m></meta>
		</seek>
		<seekToKeyFrame public="1" set="method">
			<f a="offset:?inBufferSeek" v=":true">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{ inBufferSeek : true }</e></m></meta>
		</seekToKeyFrame>
		<seekToLivePoint public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></seekToLivePoint>
		<seekToLocalTime public="1" set="method"><f a="periodIndex:time">
	<x path="Int"/>
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></seekToLocalTime>
		<setPlaySpeed public="1" set="method"><f a="speed:reserved">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setPlaySpeed>
		<set_backBufferTime set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_backBufferTime>
		<set_bufferTime set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bufferTime>
		<set_captionStyle set="method"><f a="value">
	<c path="flash.media.AVCaptionStyle"/>
	<c path="flash.media.AVCaptionStyle"/>
</f></set_captionStyle>
		<set_captionsEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_captionsEnabled>
		<set_initialBufferTime set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_initialBufferTime>
		<set_useHardwareDecoder set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useHardwareDecoder>
		<set_volume set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<step public="1" set="method"><f a="frames">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></step>
		<new public="1" set="method"><f a="source">
	<c path="flash.media.AVSource"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVTagData" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVTagData.hx" extern="1">
		<data public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</data>
		<localTime public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</localTime>
		<get_data set="method"><f a=""><c path="String"/></f></get_data>
		<get_localTime set="method"><f a=""><x path="Float"/></f></get_localTime>
		<new public="1" set="method"><f a="init_data:init_localTime">
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVTimeline" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVTimeline.hx" extern="1">
		<complete public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</complete>
		<firstPeriodIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</firstPeriodIndex>
		<firstSubscribedTagIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</firstSubscribedTagIndex>
		<lastPeriodIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</lastPeriodIndex>
		<lastSubscribedTagIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</lastSubscribedTagIndex>
		<type public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</type>
		<virtualDuration public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</virtualDuration>
		<virtualStartTime public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</virtualStartTime>
		<get_complete set="method"><f a=""><x path="Bool"/></f></get_complete>
		<get_firstPeriodIndex set="method"><f a=""><x path="Int"/></f></get_firstPeriodIndex>
		<get_firstSubscribedTagIndex set="method"><f a=""><x path="Int"/></f></get_firstSubscribedTagIndex>
		<get_lastPeriodIndex set="method"><f a=""><x path="Int"/></f></get_lastPeriodIndex>
		<get_lastSubscribedTagIndex set="method"><f a=""><x path="Int"/></f></get_lastSubscribedTagIndex>
		<get_type set="method"><f a=""><c path="String"/></f></get_type>
		<get_virtualDuration set="method"><f a=""><x path="Float"/></f></get_virtualDuration>
		<get_virtualStartTime set="method"><f a=""><x path="Float"/></f></get_virtualStartTime>
		<new public="1" set="method"><f a="init_type:init_virtualStartTime:init_virtualDuration:init_firstPeriodIndex:init_lastPeriodIndex:init_firstSubscribedIndex:init_lastSubscribedIndex:init_complete">
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVTrackInfo" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVTrackInfo.hx" extern="1">
		<DTI_608_CAPTIONS final="1" public="1" set="null" static="1"><c path="String"/></DTI_608_CAPTIONS>
		<DTI_708_CAPTIONS final="1" public="1" set="null" static="1"><c path="String"/></DTI_708_CAPTIONS>
		<DTI_WEBVTT_CAPTIONS final="1" public="1" set="null" static="1"><c path="String"/></DTI_WEBVTT_CAPTIONS>
		<activity public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</activity>
		<autoSelect public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</autoSelect>
		<dataTrackInfoServiceType public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</dataTrackInfoServiceType>
		<defaultTrack public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</defaultTrack>
		<description public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</description>
		<forced public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</forced>
		<language public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</language>
		<pid public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</pid>
		<get_activity set="method"><f a=""><x path="Bool"/></f></get_activity>
		<get_autoSelect set="method"><f a=""><x path="Bool"/></f></get_autoSelect>
		<get_dataTrackInfoServiceType set="method"><f a=""><c path="String"/></f></get_dataTrackInfoServiceType>
		<get_defaultTrack set="method"><f a=""><x path="Bool"/></f></get_defaultTrack>
		<get_description set="method"><f a=""><c path="String"/></f></get_description>
		<get_forced set="method"><f a=""><x path="Bool"/></f></get_forced>
		<get_language set="method"><f a=""><c path="String"/></f></get_language>
		<get_pid set="method"><f a=""><x path="Int"/></f></get_pid>
		<new public="1" set="method"><f a="init_description:init_language:init_defaultTrack:init_autoSelect:init_forced:init_activity:init_dataTrackInfoServiceType:init_pid">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.URLLoader" params="" file="/home/runner/work/haxe/haxe/std/flash/net/URLLoader.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<bytesLoaded public="1"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1"><x path="UInt"/></bytesTotal>
		<data public="1"><d/></data>
		<dataFormat public="1"><x path="flash.net.URLLoaderDataFormat"/></dataFormat>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<load public="1" set="method"><f a="request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></load>
		<new public="1" set="method"><f a="?request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVURLLoader" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVURLLoader.hx" extern="1">
		<extends path="flash.net.URLLoader"/>
		<cookieHeader public="1" get="null" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</cookieHeader>
		<stream public="1"><c path="flash.media.AVURLStream"/></stream>
		<set_cookieHeader set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_cookieHeader>
		<new public="1" set="method"><f a="?request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.utils.IDataInput" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/IDataInput.hx" extern="1" interface="1">
		<bytesAvailable public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesAvailable>
		<endian public="1" get="accessor" set="accessor">
			<x path="flash.utils.Endian"/>
			<meta><m n=":flash.property"/></meta>
		</endian>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<get_bytesAvailable set="method"><f a=""><x path="UInt"/></f></get_bytesAvailable>
		<get_endian set="method"><f a=""><x path="flash.utils.Endian"/></f></get_endian>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<set_endian set="method"><f a="value">
	<x path="flash.utils.Endian"/>
	<x path="flash.utils.Endian"/>
</f></set_endian>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
	</class>
	<class path="flash.net.URLStream" params="" file="/home/runner/work/haxe/haxe/std/flash/net/URLStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.utils.IDataInput"/>
		<bytesAvailable public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesAvailable>
		<connected public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</connected>
		<diskCacheEnabled public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</diskCacheEnabled>
		<endian public="1" get="accessor" set="accessor">
			<x path="flash.utils.Endian"/>
			<meta><m n=":flash.property"/></meta>
		</endian>
		<length public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</length>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<position public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</position>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<get_bytesAvailable set="method"><f a=""><x path="UInt"/></f></get_bytesAvailable>
		<get_connected set="method"><f a=""><x path="Bool"/></f></get_connected>
		<get_diskCacheEnabled set="method"><f a=""><x path="Bool"/></f></get_diskCacheEnabled>
		<get_endian set="method"><f a=""><x path="flash.utils.Endian"/></f></get_endian>
		<get_length set="method"><f a=""><x path="Float"/></f></get_length>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<get_position set="method"><f a=""><x path="Float"/></f></get_position>
		<load public="1" set="method"><f a="request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></load>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<set_endian set="method"><f a="value">
	<x path="flash.utils.Endian"/>
	<x path="flash.utils.Endian"/>
</f></set_endian>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
		<set_position set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_position>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</stop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVURLStream" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AVURLStream.hx" extern="1">
		<extends path="flash.net.URLStream"/>
		<cookieHeader public="1" get="null" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</cookieHeader>
		<set_cookieHeader set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_cookieHeader>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AudioDecoder" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AudioDecoder.hx" extern="1">
		<DOLBY_DIGITAL final="1" public="1" set="null" static="1"><c path="String"/></DOLBY_DIGITAL>
		<DOLBY_DIGITAL_PLUS final="1" public="1" set="null" static="1"><c path="String"/></DOLBY_DIGITAL_PLUS>
		<DTS final="1" public="1" set="null" static="1"><c path="String"/></DTS>
		<DTS_EXPRESS final="1" public="1" set="null" static="1"><c path="String"/></DTS_EXPRESS>
		<DTS_HD_HIGH_RESOLUTION_AUDIO final="1" public="1" set="null" static="1"><c path="String"/></DTS_HD_HIGH_RESOLUTION_AUDIO>
		<DTS_HD_MASTER_AUDIO final="1" public="1" set="null" static="1"><c path="String"/></DTS_HD_MASTER_AUDIO>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AudioDeviceManager" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AudioDeviceManager.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<audioDeviceManager public="1" get="accessor" set="null" static="1">
			<c path="flash.media.AudioDeviceManager"/>
			<meta><m n=":flash.property"/></meta>
		</audioDeviceManager>
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isSupported>
		<get_audioDeviceManager set="method" static="1"><f a=""><c path="flash.media.AudioDeviceManager"/></f></get_audioDeviceManager>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<deviceNames public="1" get="accessor" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</deviceNames>
		<selectedDeviceIndex public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</selectedDeviceIndex>
		<get_deviceNames set="method"><f a=""><c path="Array"><d/></c></f></get_deviceNames>
		<get_selectedDeviceIndex set="method"><f a=""><x path="Int"/></f></get_selectedDeviceIndex>
		<set_selectedDeviceIndex set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_selectedDeviceIndex>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AudioOutputChangeReason" params="" file="/home/runner/work/haxe/haxe/std/flash/media/AudioOutputChangeReason.hx" extern="1">
		<DEVICE_CHANGE final="1" public="1" set="null" static="1"><c path="String"/></DEVICE_CHANGE>
		<USER_SELECTION final="1" public="1" set="null" static="1"><c path="String"/></USER_SELECTION>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.Camera" params="" file="/home/runner/work/haxe/haxe/std/flash/media/Camera.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</isSupported>
		<names public="1" get="accessor" set="null" static="1">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</names>
		<_scanHardware public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":ns">
					<e>"flash.media"</e>
					<e>internal</e>
				</m>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</_scanHardware>
		<getCamera public="1" set="method" static="1"><f a="?name">
	<c path="String"/>
	<c path="flash.media.Camera"/>
</f></getCamera>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<get_names set="method" static="1"><f a=""><c path="Array"><d/></c></f></get_names>
		<activityLevel public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</activityLevel>
		<bandwidth public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</bandwidth>
		<currentFPS public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</currentFPS>
		<fps public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fps>
		<height public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</height>
		<index public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</index>
		<keyFrameInterval public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</keyFrameInterval>
		<loopback public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</loopback>
		<motionLevel public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</motionLevel>
		<motionTimeout public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</motionTimeout>
		<muted public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</muted>
		<name public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</name>
		<position public="1" get="accessor" set="null">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_2</e></m>
			</meta>
		</position>
		<quality public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</quality>
		<width public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</width>
		<copyToByteArray public="1" set="method">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToByteArray>
		<copyToVector public="1" set="method">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToVector>
		<drawToBitmapData public="1" set="method">
			<f a="destination">
				<c path="flash.display.BitmapData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</drawToBitmapData>
		<get_activityLevel set="method"><f a=""><x path="Float"/></f></get_activityLevel>
		<get_bandwidth set="method"><f a=""><x path="Int"/></f></get_bandwidth>
		<get_currentFPS set="method"><f a=""><x path="Float"/></f></get_currentFPS>
		<get_fps set="method"><f a=""><x path="Float"/></f></get_fps>
		<get_height set="method"><f a=""><x path="Int"/></f></get_height>
		<get_index set="method"><f a=""><x path="Int"/></f></get_index>
		<get_keyFrameInterval set="method"><f a=""><x path="Int"/></f></get_keyFrameInterval>
		<get_loopback set="method"><f a=""><x path="Bool"/></f></get_loopback>
		<get_motionLevel set="method"><f a=""><x path="Int"/></f></get_motionLevel>
		<get_motionTimeout set="method"><f a=""><x path="Int"/></f></get_motionTimeout>
		<get_muted set="method"><f a=""><x path="Bool"/></f></get_muted>
		<get_name set="method"><f a=""><c path="String"/></f></get_name>
		<get_position set="method"><f a=""><c path="String"/></f></get_position>
		<get_quality set="method"><f a=""><x path="Int"/></f></get_quality>
		<get_width set="method"><f a=""><x path="Int"/></f></get_width>
		<setCursor public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></setCursor>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setLoopback public="1" set="method">
			<f a="?compress" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ compress : false }</e></m></meta>
		</setLoopback>
		<setMode public="1" set="method">
			<f a="width:height:fps:?favorArea" v=":::true">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ favorArea : true }</e></m></meta>
		</setMode>
		<setMotionLevel public="1" set="method">
			<f a="motionLevel:?timeout" v=":2000">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 2000 }</e></m></meta>
		</setMotionLevel>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.H264Level" params="" file="/home/runner/work/haxe/haxe/std/flash/media/H264Level.hx" extern="1">
		<LEVEL_1 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_1>
		<LEVEL_1B final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_1B>
		<LEVEL_1_1 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_1_1>
		<LEVEL_1_2 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_1_2>
		<LEVEL_1_3 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_1_3>
		<LEVEL_2 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_2>
		<LEVEL_2_1 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_2_1>
		<LEVEL_2_2 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_2_2>
		<LEVEL_3 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_3>
		<LEVEL_3_1 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_3_1>
		<LEVEL_3_2 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_3_2>
		<LEVEL_4 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_4>
		<LEVEL_4_1 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_4_1>
		<LEVEL_4_2 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_4_2>
		<LEVEL_5 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_5>
		<LEVEL_5_1 final="1" public="1" set="null" static="1"><c path="String"/></LEVEL_5_1>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.H264Profile" params="" file="/home/runner/work/haxe/haxe/std/flash/media/H264Profile.hx" extern="1">
		<BASELINE final="1" public="1" set="null" static="1"><c path="String"/></BASELINE>
		<MAIN final="1" public="1" set="null" static="1"><c path="String"/></MAIN>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.VideoStreamSettings" params="" file="/home/runner/work/haxe/haxe/std/flash/media/VideoStreamSettings.hx" extern="1">
		<bandwidth public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</bandwidth>
		<codec public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</codec>
		<fps public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fps>
		<height public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</height>
		<keyFrameInterval public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</keyFrameInterval>
		<quality public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</quality>
		<width public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</width>
		<get_bandwidth set="method"><f a=""><x path="Int"/></f></get_bandwidth>
		<get_codec set="method"><f a=""><c path="String"/></f></get_codec>
		<get_fps set="method"><f a=""><x path="Float"/></f></get_fps>
		<get_height set="method"><f a=""><x path="Int"/></f></get_height>
		<get_keyFrameInterval set="method"><f a=""><x path="Int"/></f></get_keyFrameInterval>
		<get_quality set="method"><f a=""><x path="Int"/></f></get_quality>
		<get_width set="method"><f a=""><x path="Int"/></f></get_width>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setMode public="1" set="method"><f a="width:height:fps">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setMode>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.H264VideoStreamSettings" params="" file="/home/runner/work/haxe/haxe/std/flash/media/H264VideoStreamSettings.hx" extern="1">
		<extends path="flash.media.VideoStreamSettings"/>
		<level public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</level>
		<profile public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</profile>
		<get_level set="method"><f a=""><c path="String"/></f></get_level>
		<get_profile set="method"><f a=""><c path="String"/></f></get_profile>
		<setProfileLevel public="1" set="method"><f a="profile:level">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setProfileLevel>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.ID3Info" params="" file="/home/runner/work/haxe/haxe/std/flash/media/ID3Info.hx" extern="1" final="1">
		<album public="1"><c path="String"/></album>
		<artist public="1"><c path="String"/></artist>
		<comment public="1"><c path="String"/></comment>
		<genre public="1"><c path="String"/></genre>
		<songName public="1"><c path="String"/></songName>
		<track public="1"><c path="String"/></track>
		<year public="1"><c path="String"/></year>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.Microphone" params="" file="/home/runner/work/haxe/haxe/std/flash/media/Microphone.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</isSupported>
		<names public="1" get="accessor" set="null" static="1">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</names>
		<getEnhancedMicrophone public="1" set="method" static="1">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta>
				<m n=":value"><e>{ index : -1 }</e></m>
				<m n=":require"><e>flash10_2</e></m>
			</meta>
		</getEnhancedMicrophone>
		<getMicrophone public="1" set="method" static="1">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
		</getMicrophone>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<get_names set="method" static="1"><f a=""><c path="Array"><d/></c></f></get_names>
		<activityLevel public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</activityLevel>
		<codec public="1" get="accessor" set="accessor">
			<x path="flash.media.SoundCodec"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</codec>
		<enableVAD public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</enableVAD>
		<encodeQuality public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</encodeQuality>
		<enhancedOptions public="1" get="accessor" set="accessor">
			<c path="flash.media.MicrophoneEnhancedOptions"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_2</e></m>
			</meta>
		</enhancedOptions>
		<framesPerPacket public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</framesPerPacket>
		<gain public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</gain>
		<index public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</index>
		<muted public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</muted>
		<name public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</name>
		<noiseSuppressionLevel public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</noiseSuppressionLevel>
		<rate public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</rate>
		<silenceLevel public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</silenceLevel>
		<silenceTimeout public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</silenceTimeout>
		<soundTransform public="1" get="accessor" set="accessor">
			<c path="flash.media.SoundTransform"/>
			<meta><m n=":flash.property"/></meta>
		</soundTransform>
		<useEchoSuppression public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</useEchoSuppression>
		<get_activityLevel set="method"><f a=""><x path="Float"/></f></get_activityLevel>
		<get_codec set="method"><f a=""><x path="flash.media.SoundCodec"/></f></get_codec>
		<get_enableVAD set="method"><f a=""><x path="Bool"/></f></get_enableVAD>
		<get_encodeQuality set="method"><f a=""><x path="Int"/></f></get_encodeQuality>
		<get_enhancedOptions set="method"><f a=""><c path="flash.media.MicrophoneEnhancedOptions"/></f></get_enhancedOptions>
		<get_framesPerPacket set="method"><f a=""><x path="Int"/></f></get_framesPerPacket>
		<get_gain set="method"><f a=""><x path="Float"/></f></get_gain>
		<get_index set="method"><f a=""><x path="Int"/></f></get_index>
		<get_muted set="method"><f a=""><x path="Bool"/></f></get_muted>
		<get_name set="method"><f a=""><c path="String"/></f></get_name>
		<get_noiseSuppressionLevel set="method"><f a=""><x path="Int"/></f></get_noiseSuppressionLevel>
		<get_rate set="method"><f a=""><x path="Int"/></f></get_rate>
		<get_silenceLevel set="method"><f a=""><x path="Float"/></f></get_silenceLevel>
		<get_silenceTimeout set="method"><f a=""><x path="Int"/></f></get_silenceTimeout>
		<get_soundTransform set="method"><f a=""><c path="flash.media.SoundTransform"/></f></get_soundTransform>
		<get_useEchoSuppression set="method"><f a=""><x path="Bool"/></f></get_useEchoSuppression>
		<setLoopBack public="1" set="method">
			<f a="?state" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ state : true }</e></m></meta>
		</setLoopBack>
		<setSilenceLevel public="1" set="method">
			<f a="silenceLevel:?timeout" v=":-1">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ timeout : -1 }</e></m></meta>
		</setSilenceLevel>
		<setUseEchoSuppression public="1" set="method"><f a="useEchoSuppression">
	<x path="Bool"/>
	<x path="Void"/>
</f></setUseEchoSuppression>
		<set_codec set="method"><f a="value">
	<x path="flash.media.SoundCodec"/>
	<x path="flash.media.SoundCodec"/>
</f></set_codec>
		<set_enableVAD set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enableVAD>
		<set_encodeQuality set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_encodeQuality>
		<set_enhancedOptions set="method"><f a="value">
	<c path="flash.media.MicrophoneEnhancedOptions"/>
	<c path="flash.media.MicrophoneEnhancedOptions"/>
</f></set_enhancedOptions>
		<set_framesPerPacket set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_framesPerPacket>
		<set_gain set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_gain>
		<set_noiseSuppressionLevel set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_noiseSuppressionLevel>
		<set_rate set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_rate>
		<set_soundTransform set="method"><f a="value">
	<c path="flash.media.SoundTransform"/>
	<c path="flash.media.SoundTransform"/>
</f></set_soundTransform>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.media.MicrophoneEnhancedMode" params="" file="/home/runner/work/haxe/haxe/std/flash/media/MicrophoneEnhancedMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.media.MicrophoneEnhancedMode"</e></m>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
		<impl><class path="flash.media._MicrophoneEnhancedMode.MicrophoneEnhancedMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/media/MicrophoneEnhancedMode.hx" private="1" module="flash.media.MicrophoneEnhancedMode" extern="1" final="1">
	<FULL_DUPLEX public="1" set="null" static="1">
		<x path="flash.media.MicrophoneEnhancedMode"/>
		<meta><m n=":enum"/></meta>
	</FULL_DUPLEX>
	<HALF_DUPLEX public="1" set="null" static="1">
		<x path="flash.media.MicrophoneEnhancedMode"/>
		<meta><m n=":enum"/></meta>
	</HALF_DUPLEX>
	<HEADSET public="1" set="null" static="1">
		<x path="flash.media.MicrophoneEnhancedMode"/>
		<meta><m n=":enum"/></meta>
	</HEADSET>
	<OFF public="1" set="null" static="1">
		<x path="flash.media.MicrophoneEnhancedMode"/>
		<meta><m n=":enum"/></meta>
	</OFF>
	<SPEAKER_MUTE public="1" set="null" static="1">
		<x path="flash.media.MicrophoneEnhancedMode"/>
		<meta><m n=":enum"/></meta>
	</SPEAKER_MUTE>
	<meta>
		<m n=":native"><e>"flash.media.MicrophoneEnhancedMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.media._MicrophoneEnhancedMode.MicrophoneEnhancedMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/media/MicrophoneEnhancedMode.hx" private="1" module="flash.media.MicrophoneEnhancedMode" extern="1" final="1">
		<FULL_DUPLEX public="1" set="null" static="1">
			<x path="flash.media.MicrophoneEnhancedMode"/>
			<meta><m n=":enum"/></meta>
		</FULL_DUPLEX>
		<HALF_DUPLEX public="1" set="null" static="1">
			<x path="flash.media.MicrophoneEnhancedMode"/>
			<meta><m n=":enum"/></meta>
		</HALF_DUPLEX>
		<HEADSET public="1" set="null" static="1">
			<x path="flash.media.MicrophoneEnhancedMode"/>
			<meta><m n=":enum"/></meta>
		</HEADSET>
		<OFF public="1" set="null" static="1">
			<x path="flash.media.MicrophoneEnhancedMode"/>
			<meta><m n=":enum"/></meta>
		</OFF>
		<SPEAKER_MUTE public="1" set="null" static="1">
			<x path="flash.media.MicrophoneEnhancedMode"/>
			<meta><m n=":enum"/></meta>
		</SPEAKER_MUTE>
		<meta>
			<m n=":native"><e>"flash.media.MicrophoneEnhancedMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.media.MicrophoneEnhancedOptions" params="" file="/home/runner/work/haxe/haxe/std/flash/media/MicrophoneEnhancedOptions.hx" extern="1" final="1">
		<autoGain public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</autoGain>
		<echoPath public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</echoPath>
		<isVoiceDetected public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</isVoiceDetected>
		<mode public="1" get="accessor" set="accessor">
			<x path="flash.media.MicrophoneEnhancedMode"/>
			<meta><m n=":flash.property"/></meta>
		</mode>
		<nonLinearProcessing public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</nonLinearProcessing>
		<get_autoGain set="method"><f a=""><x path="Bool"/></f></get_autoGain>
		<get_echoPath set="method"><f a=""><x path="Int"/></f></get_echoPath>
		<get_isVoiceDetected set="method"><f a=""><x path="Int"/></f></get_isVoiceDetected>
		<get_mode set="method"><f a=""><x path="flash.media.MicrophoneEnhancedMode"/></f></get_mode>
		<get_nonLinearProcessing set="method"><f a=""><x path="Bool"/></f></get_nonLinearProcessing>
		<set_autoGain set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_autoGain>
		<set_echoPath set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_echoPath>
		<set_isVoiceDetected set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_isVoiceDetected>
		<set_mode set="method"><f a="value">
	<x path="flash.media.MicrophoneEnhancedMode"/>
	<x path="flash.media.MicrophoneEnhancedMode"/>
</f></set_mode>
		<set_nonLinearProcessing set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_nonLinearProcessing>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.media.Sound" params="" file="/home/runner/work/haxe/haxe/std/flash/media/Sound.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<bytesLoaded public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesLoaded>
		<bytesTotal public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</bytesTotal>
		<id3 public="1" get="accessor" set="null">
			<c path="flash.media.ID3Info"/>
			<meta><m n=":flash.property"/></meta>
		</id3>
		<isBuffering public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isBuffering>
		<isURLInaccessible public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</isURLInaccessible>
		<length public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</length>
		<url public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</url>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<extract public="1" set="method">
			<f a="target:length:?startPosition" v="::-1">
				<c path="flash.utils.ByteArray"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":value"><e>{ startPosition : -1 }</e></m>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</extract>
		<get_bytesLoaded set="method"><f a=""><x path="UInt"/></f></get_bytesLoaded>
		<get_bytesTotal set="method"><f a=""><x path="Int"/></f></get_bytesTotal>
		<get_id3 set="method"><f a=""><c path="flash.media.ID3Info"/></f></get_id3>
		<get_isBuffering set="method"><f a=""><x path="Bool"/></f></get_isBuffering>
		<get_isURLInaccessible set="method"><f a=""><x path="Bool"/></f></get_isURLInaccessible>
		<get_length set="method"><f a=""><x path="Float"/></f></get_length>
		<get_url set="method"><f a=""><c path="String"/></f></get_url>
		<load public="1" set="method"><f a="stream:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.media.SoundLoaderContext"/>
	<x path="Void"/>
</f></load>
		<loadCompressedDataFromByteArray public="1" set="method">
			<f a="bytes:bytesLength">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</loadCompressedDataFromByteArray>
		<loadPCMFromByteArray public="1" set="method">
			<f a="bytes:samples:?format:?stereo:?sampleRate" v=":::true:44100">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ sampleRate : 44100, stereo : true }</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</loadPCMFromByteArray>
		<play public="1" set="method">
			<f a="?startTime:?loops:?sndTransform" v="0:0:">
				<x path="Float"/>
				<x path="Int"/>
				<c path="flash.media.SoundTransform"/>
				<c path="flash.media.SoundChannel"/>
			</f>
			<meta><m n=":value"><e>{ loops : 0, startTime : 0 }</e></m></meta>
		</play>
		<new public="1" set="method"><f a="?stream:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.media.SoundLoaderContext"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.SoundChannel" params="" file="/home/runner/work/haxe/haxe/std/flash/media/SoundChannel.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<leftPeak public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</leftPeak>
		<position public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</position>
		<rightPeak public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</rightPeak>
		<soundTransform public="1" get="accessor" set="accessor">
			<c path="flash.media.SoundTransform"/>
			<meta><m n=":flash.property"/></meta>
		</soundTransform>
		<get_leftPeak set="method"><f a=""><x path="Float"/></f></get_leftPeak>
		<get_position set="method"><f a=""><x path="Float"/></f></get_position>
		<get_rightPeak set="method"><f a=""><x path="Float"/></f></get_rightPeak>
		<get_soundTransform set="method"><f a=""><c path="flash.media.SoundTransform"/></f></get_soundTransform>
		<set_soundTransform set="method"><f a="value">
	<c path="flash.media.SoundTransform"/>
	<c path="flash.media.SoundTransform"/>
</f></set_soundTransform>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.media.SoundCodec" params="" file="/home/runner/work/haxe/haxe/std/flash/media/SoundCodec.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.media.SoundCodec"</e></m>
		</meta>
		<impl><class path="flash.media._SoundCodec.SoundCodec_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/media/SoundCodec.hx" private="1" module="flash.media.SoundCodec" extern="1" final="1">
	<NELLYMOSER public="1" set="null" static="1">
		<x path="flash.media.SoundCodec"/>
		<meta><m n=":enum"/></meta>
	</NELLYMOSER>
	<PCMA public="1" set="null" static="1">
		<x path="flash.media.SoundCodec"/>
		<meta><m n=":enum"/></meta>
	</PCMA>
	<PCMU public="1" set="null" static="1">
		<x path="flash.media.SoundCodec"/>
		<meta><m n=":enum"/></meta>
	</PCMU>
	<SPEEX public="1" set="null" static="1">
		<x path="flash.media.SoundCodec"/>
		<meta><m n=":enum"/></meta>
	</SPEEX>
	<meta>
		<m n=":native"><e>"flash.media.SoundCodec"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.media._SoundCodec.SoundCodec_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/media/SoundCodec.hx" private="1" module="flash.media.SoundCodec" extern="1" final="1">
		<NELLYMOSER public="1" set="null" static="1">
			<x path="flash.media.SoundCodec"/>
			<meta><m n=":enum"/></meta>
		</NELLYMOSER>
		<PCMA public="1" set="null" static="1">
			<x path="flash.media.SoundCodec"/>
			<meta><m n=":enum"/></meta>
		</PCMA>
		<PCMU public="1" set="null" static="1">
			<x path="flash.media.SoundCodec"/>
			<meta><m n=":enum"/></meta>
		</PCMU>
		<SPEEX public="1" set="null" static="1">
			<x path="flash.media.SoundCodec"/>
			<meta><m n=":enum"/></meta>
		</SPEEX>
		<meta>
			<m n=":native"><e>"flash.media.SoundCodec"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.media.SoundLoaderContext" params="" file="/home/runner/work/haxe/haxe/std/flash/media/SoundLoaderContext.hx" extern="1">
		<bufferTime public="1"><x path="Float"/></bufferTime>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<new public="1" set="method">
			<f a="?bufferTime:?checkPolicyFile" v="1000:false">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ checkPolicyFile : false, bufferTime : 1000 }</e></m></meta>
		</new>
	</class>
	<class path="flash.media.SoundMixer" params="" file="/home/runner/work/haxe/haxe/std/flash/media/SoundMixer.hx" extern="1">
		<audioPlaybackMode public="1" get="accessor" set="accessor" static="1">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</audioPlaybackMode>
		<bufferTime public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</bufferTime>
		<soundTransform public="1" get="accessor" set="accessor" static="1">
			<c path="flash.media.SoundTransform"/>
			<meta><m n=":flash.property"/></meta>
		</soundTransform>
		<useSpeakerphoneForVoice public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</useSpeakerphoneForVoice>
		<areSoundsInaccessible public="1" set="method" static="1"><f a=""><x path="Bool"/></f></areSoundsInaccessible>
		<computeSpectrum public="1" set="method" static="1">
			<f a="outputArray:?FFTMode:?stretchFactor" v=":false:0">
				<c path="flash.utils.ByteArray"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ stretchFactor : 0, FFTMode : false }</e></m></meta>
		</computeSpectrum>
		<get_audioPlaybackMode set="method" static="1"><f a=""><c path="String"/></f></get_audioPlaybackMode>
		<get_bufferTime set="method" static="1"><f a=""><x path="Int"/></f></get_bufferTime>
		<get_soundTransform set="method" static="1"><f a=""><c path="flash.media.SoundTransform"/></f></get_soundTransform>
		<get_useSpeakerphoneForVoice set="method" static="1"><f a=""><x path="Bool"/></f></get_useSpeakerphoneForVoice>
		<set_audioPlaybackMode set="method" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_audioPlaybackMode>
		<set_bufferTime set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_bufferTime>
		<set_soundTransform set="method" static="1"><f a="value">
	<c path="flash.media.SoundTransform"/>
	<c path="flash.media.SoundTransform"/>
</f></set_soundTransform>
		<set_useSpeakerphoneForVoice set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useSpeakerphoneForVoice>
		<stopAll public="1" set="method" static="1"><f a=""><x path="Void"/></f></stopAll>
	</class>
	<class path="flash.media.SoundTransform" params="" file="/home/runner/work/haxe/haxe/std/flash/media/SoundTransform.hx" extern="1" final="1">
		<leftToLeft public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</leftToLeft>
		<leftToRight public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</leftToRight>
		<pan public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</pan>
		<rightToLeft public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</rightToLeft>
		<rightToRight public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</rightToRight>
		<volume public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</volume>
		<get_leftToLeft set="method"><f a=""><x path="Float"/></f></get_leftToLeft>
		<get_leftToRight set="method"><f a=""><x path="Float"/></f></get_leftToRight>
		<get_pan set="method"><f a=""><x path="Float"/></f></get_pan>
		<get_rightToLeft set="method"><f a=""><x path="Float"/></f></get_rightToLeft>
		<get_rightToRight set="method"><f a=""><x path="Float"/></f></get_rightToRight>
		<get_volume set="method"><f a=""><x path="Float"/></f></get_volume>
		<set_leftToLeft set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_leftToLeft>
		<set_leftToRight set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_leftToRight>
		<set_pan set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pan>
		<set_rightToLeft set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rightToLeft>
		<set_rightToRight set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rightToRight>
		<set_volume set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<new public="1" set="method">
			<f a="?vol:?panning" v="1:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ panning : 0, vol : 1 }</e></m></meta>
		</new>
	</class>
	<class path="flash.media.StageVideo" params="" file="/home/runner/work/haxe/haxe/std/flash/media/StageVideo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<colorSpaces public="1" get="accessor" set="null">
			<c path="flash.Vector"><c path="String"/></c>
			<meta><m n=":flash.property"/></meta>
		</colorSpaces>
		<depth public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</depth>
		<pan public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</pan>
		<videoHeight public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</videoHeight>
		<videoWidth public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</videoWidth>
		<viewPort public="1" get="accessor" set="accessor">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</viewPort>
		<zoom public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</zoom>
		<attachAVStream public="1">
			<f a="avStream">
				<c path="flash.media.AVStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_7</e></m></meta>
		</attachAVStream>
		<attachCamera public="1" set="method">
			<f a="theCamera">
				<c path="flash.media.Camera"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<get_colorSpaces set="method"><f a=""><c path="flash.Vector"><c path="String"/></c></f></get_colorSpaces>
		<get_depth set="method"><f a=""><x path="Int"/></f></get_depth>
		<get_pan set="method"><f a=""><c path="flash.geom.Point"/></f></get_pan>
		<get_videoHeight set="method"><f a=""><x path="Int"/></f></get_videoHeight>
		<get_videoWidth set="method"><f a=""><x path="Int"/></f></get_videoWidth>
		<get_viewPort set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_viewPort>
		<get_zoom set="method"><f a=""><c path="flash.geom.Point"/></f></get_zoom>
		<set_depth set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_depth>
		<set_pan set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_pan>
		<set_viewPort set="method"><f a="value">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></set_viewPort>
		<set_zoom set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_zoom>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.media.StageVideoAvailability" params="" file="/home/runner/work/haxe/haxe/std/flash/media/StageVideoAvailability.hx" extern="1">
		<AVAILABLE final="1" public="1" set="null" static="1"><c path="String"/></AVAILABLE>
		<UNAVAILABLE final="1" public="1" set="null" static="1"><c path="String"/></UNAVAILABLE>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.StageVideoAvailabilityReason" params="" file="/home/runner/work/haxe/haxe/std/flash/media/StageVideoAvailabilityReason.hx" extern="1">
		<DRIVER_TOO_OLD final="1" public="1" set="null" static="1"><c path="String"/></DRIVER_TOO_OLD>
		<NO_ERROR final="1" public="1" set="null" static="1"><c path="String"/></NO_ERROR>
		<UNAVAILABLE final="1" public="1" set="null" static="1"><c path="String"/></UNAVAILABLE>
		<USER_DISABLED final="1" public="1" set="null" static="1"><c path="String"/></USER_DISABLED>
		<WMODE_INCOMPATIBLE final="1" public="1" set="null" static="1"><c path="String"/></WMODE_INCOMPATIBLE>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.Video" params="" file="/home/runner/work/haxe/haxe/std/flash/media/Video.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<deblocking public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</deblocking>
		<smoothing public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</smoothing>
		<videoHeight public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</videoHeight>
		<videoWidth public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</videoWidth>
		<attachCamera public="1" set="method"><f a="camera">
	<c path="flash.media.Camera"/>
	<x path="Void"/>
</f></attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<get_deblocking set="method"><f a=""><x path="Int"/></f></get_deblocking>
		<get_smoothing set="method"><f a=""><x path="Bool"/></f></get_smoothing>
		<get_videoHeight set="method"><f a=""><x path="Int"/></f></get_videoHeight>
		<get_videoWidth set="method"><f a=""><x path="Int"/></f></get_videoWidth>
		<set_deblocking set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_deblocking>
		<set_smoothing set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_smoothing>
		<new public="1" set="method">
			<f a="?width:?height" v="320:240">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ height : 240, width : 320 }</e></m></meta>
		</new>
	</class>
	<class path="flash.media.VideoCodec" params="" file="/home/runner/work/haxe/haxe/std/flash/media/VideoCodec.hx" extern="1">
		<H264AVC final="1" public="1" set="null" static="1"><c path="String"/></H264AVC>
		<SORENSON final="1" public="1" set="null" static="1"><c path="String"/></SORENSON>
		<VP6 final="1" public="1" set="null" static="1"><c path="String"/></VP6>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.VideoStatus" params="" file="/home/runner/work/haxe/haxe/std/flash/media/VideoStatus.hx" extern="1">
		<ACCELERATED final="1" public="1" set="null" static="1"><c path="String"/></ACCELERATED>
		<SOFTWARE final="1" public="1" set="null" static="1"><c path="String"/></SOFTWARE>
		<UNAVAILABLE final="1" public="1" set="null" static="1"><c path="String"/></UNAVAILABLE>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.IDynamicPropertyOutput" params="" file="/home/runner/work/haxe/haxe/std/flash/net/IDynamicPropertyOutput.hx" extern="1" interface="1"><writeDynamicProperty public="1" set="method"><f a="name:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></writeDynamicProperty></class>
	<class path="flash.net.DynamicPropertyOutput" params="" file="/home/runner/work/haxe/haxe/std/flash/net/DynamicPropertyOutput.hx" extern="1">
		<implements path="flash.net.IDynamicPropertyOutput"/>
		<writeDynamicProperty public="1" set="method"><f a="name:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></writeDynamicProperty>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.FileFilter" params="" file="/home/runner/work/haxe/haxe/std/flash/net/FileFilter.hx" extern="1" final="1">
		<description public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</description>
		<extension public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</extension>
		<macType public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</macType>
		<get_description set="method"><f a=""><c path="String"/></f></get_description>
		<get_extension set="method"><f a=""><c path="String"/></f></get_extension>
		<get_macType set="method"><f a=""><c path="String"/></f></get_macType>
		<set_description set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_description>
		<set_extension set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_extension>
		<set_macType set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_macType>
		<new public="1" set="method"><f a="description:extension:?macType">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.FileReference" params="" file="/home/runner/work/haxe/haxe/std/flash/net/FileReference.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<creationDate public="1" get="accessor" set="null">
			<c path="Date"/>
			<meta><m n=":flash.property"/></meta>
		</creationDate>
		<creator public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</creator>
		<data public="1" get="accessor" set="null">
			<c path="flash.utils.ByteArray"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</data>
		<modificationDate public="1" get="accessor" set="null">
			<c path="Date"/>
			<meta><m n=":flash.property"/></meta>
		</modificationDate>
		<name public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</name>
		<size public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</size>
		<type public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</type>
		<browse public="1" set="method"><f a="?typeFilter">
	<c path="Array"><c path="flash.net.FileFilter"/></c>
	<x path="Bool"/>
</f></browse>
		<cancel public="1" set="method"><f a=""><x path="Void"/></f></cancel>
		<download public="1" set="method"><f a="request:?defaultFileName">
	<c path="flash.net.URLRequest"/>
	<c path="String"/>
	<x path="Void"/>
</f></download>
		<get_creationDate set="method"><f a=""><c path="Date"/></f></get_creationDate>
		<get_creator set="method"><f a=""><c path="String"/></f></get_creator>
		<get_data set="method"><f a=""><c path="flash.utils.ByteArray"/></f></get_data>
		<get_modificationDate set="method"><f a=""><c path="Date"/></f></get_modificationDate>
		<get_name set="method"><f a=""><c path="String"/></f></get_name>
		<get_size set="method"><f a=""><x path="Float"/></f></get_size>
		<get_type set="method"><f a=""><c path="String"/></f></get_type>
		<load public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</load>
		<save public="1" set="method">
			<f a="data:?defaultFileName">
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</save>
		<upload public="1" set="method">
			<f a="request:?uploadDataFieldName:?testUpload" v="::false">
				<c path="flash.net.URLRequest"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ testUpload : false }</e></m></meta>
		</upload>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.FileReferenceList" params="" file="/home/runner/work/haxe/haxe/std/flash/net/FileReferenceList.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<fileList public="1" get="accessor" set="null">
			<c path="Array"><c path="flash.net.FileReference"/></c>
			<meta><m n=":flash.property"/></meta>
		</fileList>
		<browse public="1" set="method"><f a="?typeFilter">
	<c path="Array"><c path="flash.net.FileFilter"/></c>
	<x path="Bool"/>
</f></browse>
		<get_fileList set="method"><f a=""><c path="Array"><c path="flash.net.FileReference"/></c></f></get_fileList>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.GroupSpecifier" params="" file="/home/runner/work/haxe/haxe/std/flash/net/GroupSpecifier.hx" extern="1">
		<maxSupportedGroupspecVersion public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</maxSupportedGroupspecVersion>
		<encodeBootstrapPeerIDSpec public="1" set="method" static="1"><f a="peerID">
	<c path="String"/>
	<c path="String"/>
</f></encodeBootstrapPeerIDSpec>
		<encodeIPMulticastAddressSpec public="1" set="method" static="1"><f a="address:?port:?source">
	<c path="String"/>
	<d/>
	<c path="String"/>
	<c path="String"/>
</f></encodeIPMulticastAddressSpec>
		<encodePostingAuthorization public="1" set="method" static="1"><f a="password">
	<c path="String"/>
	<c path="String"/>
</f></encodePostingAuthorization>
		<encodePublishAuthorization public="1" set="method" static="1"><f a="password">
	<c path="String"/>
	<c path="String"/>
</f></encodePublishAuthorization>
		<get_maxSupportedGroupspecVersion set="method" static="1"><f a=""><x path="Int"/></f></get_maxSupportedGroupspecVersion>
		<ipMulticastMemberUpdatesEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ipMulticastMemberUpdatesEnabled>
		<minGroupspecVersion public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</minGroupspecVersion>
		<multicastEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</multicastEnabled>
		<objectReplicationEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</objectReplicationEnabled>
		<peerToPeerDisabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</peerToPeerDisabled>
		<postingEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</postingEnabled>
		<routingEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</routingEnabled>
		<serverChannelEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</serverChannelEnabled>
		<addBootstrapPeer public="1" set="method"><f a="peerID">
	<c path="String"/>
	<x path="Void"/>
</f></addBootstrapPeer>
		<addIPMulticastAddress public="1" set="method"><f a="address:?port:?source">
	<c path="String"/>
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></addIPMulticastAddress>
		<authorizations public="1" set="method"><f a=""><c path="String"/></f></authorizations>
		<get_ipMulticastMemberUpdatesEnabled set="method"><f a=""><x path="Bool"/></f></get_ipMulticastMemberUpdatesEnabled>
		<get_minGroupspecVersion set="method"><f a=""><x path="Int"/></f></get_minGroupspecVersion>
		<get_multicastEnabled set="method"><f a=""><x path="Bool"/></f></get_multicastEnabled>
		<get_objectReplicationEnabled set="method"><f a=""><x path="Bool"/></f></get_objectReplicationEnabled>
		<get_peerToPeerDisabled set="method"><f a=""><x path="Bool"/></f></get_peerToPeerDisabled>
		<get_postingEnabled set="method"><f a=""><x path="Bool"/></f></get_postingEnabled>
		<get_routingEnabled set="method"><f a=""><x path="Bool"/></f></get_routingEnabled>
		<get_serverChannelEnabled set="method"><f a=""><x path="Bool"/></f></get_serverChannelEnabled>
		<groupspecWithAuthorizations public="1" set="method"><f a=""><c path="String"/></f></groupspecWithAuthorizations>
		<groupspecWithoutAuthorizations public="1" set="method"><f a=""><c path="String"/></f></groupspecWithoutAuthorizations>
		<makeUnique public="1" set="method"><f a=""><x path="Void"/></f></makeUnique>
		<setPostingPassword public="1" set="method"><f a="?password:?salt">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setPostingPassword>
		<setPublishPassword public="1" set="method"><f a="?password:?salt">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setPublishPassword>
		<set_ipMulticastMemberUpdatesEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ipMulticastMemberUpdatesEnabled>
		<set_minGroupspecVersion set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_minGroupspecVersion>
		<set_multicastEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_multicastEnabled>
		<set_objectReplicationEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_objectReplicationEnabled>
		<set_peerToPeerDisabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_peerToPeerDisabled>
		<set_postingEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_postingEnabled>
		<set_routingEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_routingEnabled>
		<set_serverChannelEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_serverChannelEnabled>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.net.IDynamicPropertyWriter" params="" file="/home/runner/work/haxe/haxe/std/flash/net/IDynamicPropertyWriter.hx" extern="1" interface="1"><writeDynamicProperties public="1" set="method"><f a="obj:output">
	<x path="flash.utils.Object"/>
	<c path="flash.net.IDynamicPropertyOutput"/>
	<x path="Void"/>
</f></writeDynamicProperties></class>
	<class path="flash.net.LocalConnection" params="" file="/home/runner/work/haxe/haxe/std/flash/net/LocalConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</isSupported>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<client public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</client>
		<domain public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</domain>
		<isPerUser public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</isPerUser>
		<allowDomain public="1" set="method"><f a="restArgs">
	<t path="haxe.extern.Rest"><d/></t>
	<x path="Void"/>
</f></allowDomain>
		<allowInsecureDomain public="1" set="method"><f a="restArgs">
	<t path="haxe.extern.Rest"><d/></t>
	<x path="Void"/>
</f></allowInsecureDomain>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="connectionName">
	<c path="String"/>
	<x path="Void"/>
</f></connect>
		<get_client set="method"><f a=""><d/></f></get_client>
		<get_domain set="method"><f a=""><c path="String"/></f></get_domain>
		<get_isPerUser set="method"><f a=""><x path="Bool"/></f></get_isPerUser>
		<send public="1" set="method"><f a="connectionName:methodName:restArgs">
	<c path="String"/>
	<c path="String"/>
	<t path="haxe.extern.Rest"><d/></t>
	<x path="Void"/>
</f></send>
		<set_client set="method"><f a="value">
	<d/>
	<d/>
</f></set_client>
		<set_isPerUser set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_isPerUser>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetConnection" params="" file="/home/runner/work/haxe/haxe/std/flash/net/NetConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</defaultObjectEncoding>
		<get_defaultObjectEncoding set="method" static="1"><f a=""><x path="UInt"/></f></get_defaultObjectEncoding>
		<set_defaultObjectEncoding set="method" static="1"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_defaultObjectEncoding>
		<client public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</client>
		<connected public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</connected>
		<connectedProxyType public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</connectedProxyType>
		<farID public="1" get="accessor" set="null">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</farID>
		<farNonce public="1" get="accessor" set="null">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</farNonce>
		<maxPeerConnections public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</maxPeerConnections>
		<nearID public="1" get="accessor" set="null">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</nearID>
		<nearNonce public="1" get="accessor" set="null">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</nearNonce>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<protocol public="1" get="accessor" set="null">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</protocol>
		<proxyType public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</proxyType>
		<unconnectedPeerStreams public="1" get="accessor" set="null">
			<c path="Array"><d/></c>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</unconnectedPeerStreams>
		<uri public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</uri>
		<usingTLS public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</usingTLS>
		<addHeader public="1" set="method">
			<f a="operation:?mustUnderstand:?param" v=":false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="flash.utils.Object"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mustUnderstand : false }</e></m></meta>
		</addHeader>
		<call public="1" set="method"><f a="command:responder:restArgs">
	<c path="String"/>
	<c path="flash.net.Responder"/>
	<t path="haxe.extern.Rest"><d/></t>
	<x path="Void"/>
</f></call>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="command:restArgs">
	<c path="String"/>
	<t path="haxe.extern.Rest"><d/></t>
	<x path="Void"/>
</f></connect>
		<get_client set="method"><f a=""><d/></f></get_client>
		<get_connected set="method"><f a=""><x path="Bool"/></f></get_connected>
		<get_connectedProxyType set="method"><f a=""><c path="String"/></f></get_connectedProxyType>
		<get_farID set="method"><f a=""><c path="String"/></f></get_farID>
		<get_farNonce set="method"><f a=""><c path="String"/></f></get_farNonce>
		<get_maxPeerConnections set="method"><f a=""><x path="UInt"/></f></get_maxPeerConnections>
		<get_nearID set="method"><f a=""><c path="String"/></f></get_nearID>
		<get_nearNonce set="method"><f a=""><c path="String"/></f></get_nearNonce>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<get_protocol set="method"><f a=""><c path="String"/></f></get_protocol>
		<get_proxyType set="method"><f a=""><c path="String"/></f></get_proxyType>
		<get_unconnectedPeerStreams set="method"><f a=""><c path="Array"><d/></c></f></get_unconnectedPeerStreams>
		<get_uri set="method"><f a=""><c path="String"/></f></get_uri>
		<get_usingTLS set="method"><f a=""><x path="Bool"/></f></get_usingTLS>
		<set_client set="method"><f a="value">
	<d/>
	<d/>
</f></set_client>
		<set_maxPeerConnections set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_maxPeerConnections>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
		<set_proxyType set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_proxyType>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetGroup" params="" file="/home/runner/work/haxe/haxe/std/flash/net/NetGroup.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<estimatedMemberCount public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</estimatedMemberCount>
		<info public="1" get="accessor" set="null">
			<c path="flash.net.NetGroupInfo"/>
			<meta><m n=":flash.property"/></meta>
		</info>
		<localCoverageFrom public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</localCoverageFrom>
		<localCoverageTo public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</localCoverageTo>
		<neighborCount public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</neighborCount>
		<receiveMode public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</receiveMode>
		<replicationStrategy public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</replicationStrategy>
		<addHaveObjects public="1" set="method"><f a="startIndex:endIndex">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addHaveObjects>
		<addMemberHint public="1" set="method"><f a="peerID">
	<c path="String"/>
	<x path="Bool"/>
</f></addMemberHint>
		<addNeighbor public="1" set="method"><f a="peerID">
	<c path="String"/>
	<x path="Bool"/>
</f></addNeighbor>
		<addWantObjects public="1" set="method"><f a="startIndex:endIndex">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addWantObjects>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<convertPeerIDToGroupAddress public="1" set="method"><f a="peerID">
	<c path="String"/>
	<c path="String"/>
</f></convertPeerIDToGroupAddress>
		<denyRequestedObject public="1" set="method"><f a="requestID">
	<x path="Int"/>
	<x path="Void"/>
</f></denyRequestedObject>
		<get_estimatedMemberCount set="method"><f a=""><x path="Float"/></f></get_estimatedMemberCount>
		<get_info set="method"><f a=""><c path="flash.net.NetGroupInfo"/></f></get_info>
		<get_localCoverageFrom set="method"><f a=""><c path="String"/></f></get_localCoverageFrom>
		<get_localCoverageTo set="method"><f a=""><c path="String"/></f></get_localCoverageTo>
		<get_neighborCount set="method"><f a=""><x path="Float"/></f></get_neighborCount>
		<get_receiveMode set="method"><f a=""><c path="String"/></f></get_receiveMode>
		<get_replicationStrategy set="method"><f a=""><c path="String"/></f></get_replicationStrategy>
		<post public="1" set="method"><f a="message">
	<x path="flash.utils.Object"/>
	<c path="String"/>
</f></post>
		<removeHaveObjects public="1" set="method"><f a="startIndex:endIndex">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></removeHaveObjects>
		<removeWantObjects public="1" set="method"><f a="startIndex:endIndex">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></removeWantObjects>
		<sendToAllNeighbors public="1" set="method"><f a="message">
	<x path="flash.utils.Object"/>
	<c path="String"/>
</f></sendToAllNeighbors>
		<sendToNearest public="1" set="method"><f a="message:groupAddress">
	<x path="flash.utils.Object"/>
	<c path="String"/>
	<c path="String"/>
</f></sendToNearest>
		<sendToNeighbor public="1" set="method"><f a="message:sendMode">
	<x path="flash.utils.Object"/>
	<c path="String"/>
	<c path="String"/>
</f></sendToNeighbor>
		<set_receiveMode set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_receiveMode>
		<set_replicationStrategy set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_replicationStrategy>
		<writeRequestedObject public="1" set="method"><f a="requestID:object">
	<x path="Int"/>
	<x path="flash.utils.Object"/>
	<x path="Void"/>
</f></writeRequestedObject>
		<new public="1" set="method"><f a="connection:groupspec">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.net.NetGroupInfo" params="" file="/home/runner/work/haxe/haxe/std/flash/net/NetGroupInfo.hx" extern="1" final="1">
		<objectReplicationReceiveBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</objectReplicationReceiveBytesPerSecond>
		<objectReplicationSendBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</objectReplicationSendBytesPerSecond>
		<postingReceiveControlBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</postingReceiveControlBytesPerSecond>
		<postingReceiveDataBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</postingReceiveDataBytesPerSecond>
		<postingSendControlBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</postingSendControlBytesPerSecond>
		<postingSendDataBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</postingSendDataBytesPerSecond>
		<routingReceiveBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</routingReceiveBytesPerSecond>
		<routingSendBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</routingSendBytesPerSecond>
		<get_objectReplicationReceiveBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_objectReplicationReceiveBytesPerSecond>
		<get_objectReplicationSendBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_objectReplicationSendBytesPerSecond>
		<get_postingReceiveControlBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_postingReceiveControlBytesPerSecond>
		<get_postingReceiveDataBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_postingReceiveDataBytesPerSecond>
		<get_postingSendControlBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_postingSendControlBytesPerSecond>
		<get_postingSendDataBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_postingSendDataBytesPerSecond>
		<get_routingReceiveBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_routingReceiveBytesPerSecond>
		<get_routingSendBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_routingSendBytesPerSecond>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="postingSendDataBytesPerSecond:postingSendControlBytesPerSecond:postingReceiveDataBytesPerSecond:postingReceiveControlBytesPerSecond:routingSendBytesPerSecond:routingReceiveBytesPerSecond:objectReplicationSendBytesPerSecond:objectReplicationReceiveBytesPerSecond">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.net.NetGroupReceiveMode" params="" file="/home/runner/work/haxe/haxe/std/flash/net/NetGroupReceiveMode.hx" extern="1">
		<EXACT final="1" public="1" set="null" static="1"><c path="String"/></EXACT>
		<NEAREST final="1" public="1" set="null" static="1"><c path="String"/></NEAREST>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetGroupReplicationStrategy" params="" file="/home/runner/work/haxe/haxe/std/flash/net/NetGroupReplicationStrategy.hx" extern="1">
		<LOWEST_FIRST final="1" public="1" set="null" static="1"><c path="String"/></LOWEST_FIRST>
		<RAREST_FIRST final="1" public="1" set="null" static="1"><c path="String"/></RAREST_FIRST>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetGroupSendMode" params="" file="/home/runner/work/haxe/haxe/std/flash/net/NetGroupSendMode.hx" extern="1">
		<NEXT_DECREASING final="1" public="1" set="null" static="1"><c path="String"/></NEXT_DECREASING>
		<NEXT_INCREASING final="1" public="1" set="null" static="1"><c path="String"/></NEXT_INCREASING>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetGroupSendResult" params="" file="/home/runner/work/haxe/haxe/std/flash/net/NetGroupSendResult.hx" extern="1">
		<ERROR final="1" public="1" set="null" static="1"><c path="String"/></ERROR>
		<NO_ROUTE final="1" public="1" set="null" static="1"><c path="String"/></NO_ROUTE>
		<SENT final="1" public="1" set="null" static="1"><c path="String"/></SENT>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetMonitor" params="" file="/home/runner/work/haxe/haxe/std/flash/net/NetMonitor.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<listStreams public="1" set="method"><f a=""><c path="flash.Vector"><c path="flash.net.NetStream"/></c></f></listStreams>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash11</e></m></meta>
	</class>
	<class path="flash.net.NetStream" params="" file="/home/runner/work/haxe/haxe/std/flash/net/NetStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<CONNECT_TO_FMS final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CONNECT_TO_FMS>
		<DIRECT_CONNECTIONS final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</DIRECT_CONNECTIONS>
		<resetDRMVouchers public="1" set="method" static="1"><f a=""><x path="Void"/></f></resetDRMVouchers>
		<audioCodec public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</audioCodec>
		<audioReliable public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</audioReliable>
		<audioSampleAccess public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</audioSampleAccess>
		<backBufferLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</backBufferLength>
		<backBufferTime public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</backBufferTime>
		<bufferLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bufferLength>
		<bufferTime public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bufferTime>
		<bufferTimeMax public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</bufferTimeMax>
		<bytesLoaded public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesLoaded>
		<bytesTotal public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesTotal>
		<checkPolicyFile public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</checkPolicyFile>
		<client public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</client>
		<currentFPS public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</currentFPS>
		<dataReliable public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</dataReliable>
		<decodedFrames public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</decodedFrames>
		<farID public="1" get="accessor" set="null">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</farID>
		<farNonce public="1" get="accessor" set="null">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</farNonce>
		<inBufferSeek public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</inBufferSeek>
		<info public="1" get="accessor" set="null">
			<c path="flash.net.NetStreamInfo"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</info>
		<liveDelay public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</liveDelay>
		<maxPauseBufferTime public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</maxPauseBufferTime>
		<multicastAvailabilitySendToAll public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</multicastAvailabilitySendToAll>
		<multicastAvailabilityUpdatePeriod public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</multicastAvailabilityUpdatePeriod>
		<multicastFetchPeriod public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</multicastFetchPeriod>
		<multicastInfo public="1" get="accessor" set="null">
			<c path="flash.net.NetStreamMulticastInfo"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</multicastInfo>
		<multicastPushNeighborLimit public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</multicastPushNeighborLimit>
		<multicastRelayMarginDuration public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</multicastRelayMarginDuration>
		<multicastWindowDuration public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</multicastWindowDuration>
		<nearNonce public="1" get="accessor" set="null">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</nearNonce>
		<objectEncoding public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<peerStreams public="1" get="accessor" set="null">
			<c path="Array"><d/></c>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</peerStreams>
		<soundTransform public="1" get="accessor" set="accessor">
			<c path="flash.media.SoundTransform"/>
			<meta><m n=":flash.property"/></meta>
		</soundTransform>
		<time public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</time>
		<useHardwareDecoder public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</useHardwareDecoder>
		<useJitterBuffer public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_3</e></m>
			</meta>
		</useJitterBuffer>
		<videoCodec public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</videoCodec>
		<videoReliable public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</videoReliable>
		<videoSampleAccess public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</videoSampleAccess>
		<videoStreamSettings public="1" get="accessor" set="accessor">
			<c path="flash.media.VideoStreamSettings"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</videoStreamSettings>
		<appendBytes public="1" set="method">
			<f a="bytes">
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytes>
		<appendBytesAction public="1" set="method">
			<f a="netStreamAppendBytesAction">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytesAction>
		<attach public="1" set="method">
			<f a="connection">
				<c path="flash.net.NetConnection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</attach>
		<attachAudio public="1" set="method"><f a="microphone">
	<c path="flash.media.Microphone"/>
	<x path="Void"/>
</f></attachAudio>
		<attachCamera public="1" set="method">
			<f a="theCamera:?snapshotMilliseconds" v=":-1">
				<c path="flash.media.Camera"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ snapshotMilliseconds : -1 }</e></m></meta>
		</attachCamera>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</dispose>
		<get_audioCodec set="method"><f a=""><x path="UInt"/></f></get_audioCodec>
		<get_audioReliable set="method"><f a=""><x path="Bool"/></f></get_audioReliable>
		<get_audioSampleAccess set="method"><f a=""><x path="Bool"/></f></get_audioSampleAccess>
		<get_backBufferLength set="method"><f a=""><x path="Float"/></f></get_backBufferLength>
		<get_backBufferTime set="method"><f a=""><x path="Float"/></f></get_backBufferTime>
		<get_bufferLength set="method"><f a=""><x path="Float"/></f></get_bufferLength>
		<get_bufferTime set="method"><f a=""><x path="Float"/></f></get_bufferTime>
		<get_bufferTimeMax set="method"><f a=""><x path="Float"/></f></get_bufferTimeMax>
		<get_bytesLoaded set="method"><f a=""><x path="UInt"/></f></get_bytesLoaded>
		<get_bytesTotal set="method"><f a=""><x path="UInt"/></f></get_bytesTotal>
		<get_checkPolicyFile set="method"><f a=""><x path="Bool"/></f></get_checkPolicyFile>
		<get_client set="method"><f a=""><d/></f></get_client>
		<get_currentFPS set="method"><f a=""><x path="Float"/></f></get_currentFPS>
		<get_dataReliable set="method"><f a=""><x path="Bool"/></f></get_dataReliable>
		<get_decodedFrames set="method"><f a=""><x path="UInt"/></f></get_decodedFrames>
		<get_farID set="method"><f a=""><c path="String"/></f></get_farID>
		<get_farNonce set="method"><f a=""><c path="String"/></f></get_farNonce>
		<get_inBufferSeek set="method"><f a=""><x path="Bool"/></f></get_inBufferSeek>
		<get_info set="method"><f a=""><c path="flash.net.NetStreamInfo"/></f></get_info>
		<get_liveDelay set="method"><f a=""><x path="Float"/></f></get_liveDelay>
		<get_maxPauseBufferTime set="method"><f a=""><x path="Float"/></f></get_maxPauseBufferTime>
		<get_multicastAvailabilitySendToAll set="method"><f a=""><x path="Bool"/></f></get_multicastAvailabilitySendToAll>
		<get_multicastAvailabilityUpdatePeriod set="method"><f a=""><x path="Float"/></f></get_multicastAvailabilityUpdatePeriod>
		<get_multicastFetchPeriod set="method"><f a=""><x path="Float"/></f></get_multicastFetchPeriod>
		<get_multicastInfo set="method"><f a=""><c path="flash.net.NetStreamMulticastInfo"/></f></get_multicastInfo>
		<get_multicastPushNeighborLimit set="method"><f a=""><x path="Float"/></f></get_multicastPushNeighborLimit>
		<get_multicastRelayMarginDuration set="method"><f a=""><x path="Float"/></f></get_multicastRelayMarginDuration>
		<get_multicastWindowDuration set="method"><f a=""><x path="Float"/></f></get_multicastWindowDuration>
		<get_nearNonce set="method"><f a=""><c path="String"/></f></get_nearNonce>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<get_peerStreams set="method"><f a=""><c path="Array"><d/></c></f></get_peerStreams>
		<get_soundTransform set="method"><f a=""><c path="flash.media.SoundTransform"/></f></get_soundTransform>
		<get_time set="method"><f a=""><x path="Float"/></f></get_time>
		<get_useHardwareDecoder set="method"><f a=""><x path="Bool"/></f></get_useHardwareDecoder>
		<get_useJitterBuffer set="method"><f a=""><x path="Bool"/></f></get_useJitterBuffer>
		<get_videoCodec set="method"><f a=""><x path="UInt"/></f></get_videoCodec>
		<get_videoReliable set="method"><f a=""><x path="Bool"/></f></get_videoReliable>
		<get_videoSampleAccess set="method"><f a=""><x path="Bool"/></f></get_videoSampleAccess>
		<get_videoStreamSettings set="method"><f a=""><c path="flash.media.VideoStreamSettings"/></f></get_videoStreamSettings>
		<onPeerConnect public="1" set="method">
			<f a="subscriber">
				<c path="flash.net.NetStream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</onPeerConnect>
		<pause public="1" set="method"><f a=""><x path="Void"/></f></pause>
		<play public="1" set="method"><f a="restArgs">
	<t path="haxe.extern.Rest"><d/></t>
	<x path="Void"/>
</f></play>
		<play2 public="1" set="method">
			<f a="param">
				<c path="flash.net.NetStreamPlayOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</play2>
		<publish public="1" set="method"><f a="?name:?type">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></publish>
		<receiveAudio public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveAudio>
		<receiveVideo public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveVideo>
		<receiveVideoFPS public="1" set="method"><f a="FPS">
	<x path="Float"/>
	<x path="Void"/>
</f></receiveVideoFPS>
		<resume public="1" set="method"><f a=""><x path="Void"/></f></resume>
		<seek public="1" set="method"><f a="offset">
	<x path="Float"/>
	<x path="Void"/>
</f></seek>
		<send public="1" set="method"><f a="handlerName:restArgs">
	<c path="String"/>
	<t path="haxe.extern.Rest"><d/></t>
	<x path="Void"/>
</f></send>
		<set_audioReliable set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_audioReliable>
		<set_audioSampleAccess set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_audioSampleAccess>
		<set_backBufferTime set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_backBufferTime>
		<set_bufferTime set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bufferTime>
		<set_bufferTimeMax set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_bufferTimeMax>
		<set_checkPolicyFile set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_checkPolicyFile>
		<set_client set="method"><f a="value">
	<d/>
	<d/>
</f></set_client>
		<set_dataReliable set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_dataReliable>
		<set_inBufferSeek set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_inBufferSeek>
		<set_maxPauseBufferTime set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_maxPauseBufferTime>
		<set_multicastAvailabilitySendToAll set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_multicastAvailabilitySendToAll>
		<set_multicastAvailabilityUpdatePeriod set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_multicastAvailabilityUpdatePeriod>
		<set_multicastFetchPeriod set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_multicastFetchPeriod>
		<set_multicastPushNeighborLimit set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_multicastPushNeighborLimit>
		<set_multicastRelayMarginDuration set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_multicastRelayMarginDuration>
		<set_multicastWindowDuration set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_multicastWindowDuration>
		<set_soundTransform set="method"><f a="value">
	<c path="flash.media.SoundTransform"/>
	<c path="flash.media.SoundTransform"/>
</f></set_soundTransform>
		<set_useHardwareDecoder set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useHardwareDecoder>
		<set_useJitterBuffer set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useJitterBuffer>
		<set_videoReliable set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_videoReliable>
		<set_videoSampleAccess set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_videoSampleAccess>
		<set_videoStreamSettings set="method"><f a="value">
	<c path="flash.media.VideoStreamSettings"/>
	<c path="flash.media.VideoStreamSettings"/>
</f></set_videoStreamSettings>
		<step public="1" set="method">
			<f a="frames">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</step>
		<togglePause public="1" set="method"><f a=""><x path="Void"/></f></togglePause>
		<new public="1" set="method"><f a="connection:?peerID">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.NetStreamAppendBytesAction" params="" file="/home/runner/work/haxe/haxe/std/flash/net/NetStreamAppendBytesAction.hx" extern="1">
		<END_SEQUENCE final="1" public="1" set="null" static="1"><c path="String"/></END_SEQUENCE>
		<RESET_BEGIN final="1" public="1" set="null" static="1"><c path="String"/></RESET_BEGIN>
		<RESET_SEEK final="1" public="1" set="null" static="1"><c path="String"/></RESET_SEEK>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetStreamInfo" params="" file="/home/runner/work/haxe/haxe/std/flash/net/NetStreamInfo.hx" extern="1" final="1">
		<SRTT public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</SRTT>
		<audioBufferByteLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</audioBufferByteLength>
		<audioBufferLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</audioBufferLength>
		<audioByteCount public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</audioByteCount>
		<audioBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</audioBytesPerSecond>
		<audioLossRate public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</audioLossRate>
		<byteCount public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</byteCount>
		<currentBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</currentBytesPerSecond>
		<dataBufferByteLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</dataBufferByteLength>
		<dataBufferLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</dataBufferLength>
		<dataByteCount public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</dataByteCount>
		<dataBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</dataBytesPerSecond>
		<droppedFrames public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</droppedFrames>
		<isLive public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isLive>
		<maxBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</maxBytesPerSecond>
		<metaData public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</metaData>
		<playbackBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</playbackBytesPerSecond>
		<resourceName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</resourceName>
		<uri public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</uri>
		<videoBufferByteLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</videoBufferByteLength>
		<videoBufferLength public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</videoBufferLength>
		<videoByteCount public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</videoByteCount>
		<videoBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</videoBytesPerSecond>
		<videoLossRate public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</videoLossRate>
		<xmpData public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</xmpData>
		<get_SRTT set="method"><f a=""><x path="Float"/></f></get_SRTT>
		<get_audioBufferByteLength set="method"><f a=""><x path="Float"/></f></get_audioBufferByteLength>
		<get_audioBufferLength set="method"><f a=""><x path="Float"/></f></get_audioBufferLength>
		<get_audioByteCount set="method"><f a=""><x path="Float"/></f></get_audioByteCount>
		<get_audioBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_audioBytesPerSecond>
		<get_audioLossRate set="method"><f a=""><x path="Float"/></f></get_audioLossRate>
		<get_byteCount set="method"><f a=""><x path="Float"/></f></get_byteCount>
		<get_currentBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_currentBytesPerSecond>
		<get_dataBufferByteLength set="method"><f a=""><x path="Float"/></f></get_dataBufferByteLength>
		<get_dataBufferLength set="method"><f a=""><x path="Float"/></f></get_dataBufferLength>
		<get_dataByteCount set="method"><f a=""><x path="Float"/></f></get_dataByteCount>
		<get_dataBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_dataBytesPerSecond>
		<get_droppedFrames set="method"><f a=""><x path="Float"/></f></get_droppedFrames>
		<get_isLive set="method"><f a=""><x path="Bool"/></f></get_isLive>
		<get_maxBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_maxBytesPerSecond>
		<get_metaData set="method"><f a=""><d/></f></get_metaData>
		<get_playbackBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_playbackBytesPerSecond>
		<get_resourceName set="method"><f a=""><c path="String"/></f></get_resourceName>
		<get_uri set="method"><f a=""><c path="String"/></f></get_uri>
		<get_videoBufferByteLength set="method"><f a=""><x path="Float"/></f></get_videoBufferByteLength>
		<get_videoBufferLength set="method"><f a=""><x path="Float"/></f></get_videoBufferLength>
		<get_videoByteCount set="method"><f a=""><x path="Float"/></f></get_videoByteCount>
		<get_videoBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_videoBytesPerSecond>
		<get_videoLossRate set="method"><f a=""><x path="Float"/></f></get_videoLossRate>
		<get_xmpData set="method"><f a=""><d/></f></get_xmpData>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="curBPS:byteCount:maxBPS:audioBPS:audioByteCount:videoBPS:videoByteCount:dataBPS:dataByteCount:playbackBPS:droppedFrames:audioBufferByteLength:videoBufferByteLength:dataBufferByteLength:audioBufferLength:videoBufferLength:dataBufferLength:srtt:audioLossRate:videoLossRate:?metaData:?xmpData:?uri:?resourceName:?isLive" v="::::::::::::::::::::::::true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ isLive : true }</e></m></meta>
		</new>
	</class>
	<class path="flash.net.NetStreamMulticastInfo" params="" file="/home/runner/work/haxe/haxe/std/flash/net/NetStreamMulticastInfo.hx" extern="1" final="1">
		<bytesPushedFromPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesPushedFromPeers>
		<bytesPushedToPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesPushedToPeers>
		<bytesReceivedFromIPMulticast public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesReceivedFromIPMulticast>
		<bytesReceivedFromServer public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesReceivedFromServer>
		<bytesRequestedByPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesRequestedByPeers>
		<bytesRequestedFromPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</bytesRequestedFromPeers>
		<fragmentsPushedFromPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fragmentsPushedFromPeers>
		<fragmentsPushedToPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fragmentsPushedToPeers>
		<fragmentsReceivedFromIPMulticast public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fragmentsReceivedFromIPMulticast>
		<fragmentsReceivedFromServer public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fragmentsReceivedFromServer>
		<fragmentsRequestedByPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fragmentsRequestedByPeers>
		<fragmentsRequestedFromPeers public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fragmentsRequestedFromPeers>
		<receiveControlBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</receiveControlBytesPerSecond>
		<receiveDataBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</receiveDataBytesPerSecond>
		<receiveDataBytesPerSecondFromIPMulticast public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</receiveDataBytesPerSecondFromIPMulticast>
		<receiveDataBytesPerSecondFromServer public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</receiveDataBytesPerSecondFromServer>
		<sendControlBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</sendControlBytesPerSecond>
		<sendControlBytesPerSecondToServer public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</sendControlBytesPerSecondToServer>
		<sendDataBytesPerSecond public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</sendDataBytesPerSecond>
		<get_bytesPushedFromPeers set="method"><f a=""><x path="Float"/></f></get_bytesPushedFromPeers>
		<get_bytesPushedToPeers set="method"><f a=""><x path="Float"/></f></get_bytesPushedToPeers>
		<get_bytesReceivedFromIPMulticast set="method"><f a=""><x path="Float"/></f></get_bytesReceivedFromIPMulticast>
		<get_bytesReceivedFromServer set="method"><f a=""><x path="Float"/></f></get_bytesReceivedFromServer>
		<get_bytesRequestedByPeers set="method"><f a=""><x path="Float"/></f></get_bytesRequestedByPeers>
		<get_bytesRequestedFromPeers set="method"><f a=""><x path="Float"/></f></get_bytesRequestedFromPeers>
		<get_fragmentsPushedFromPeers set="method"><f a=""><x path="Float"/></f></get_fragmentsPushedFromPeers>
		<get_fragmentsPushedToPeers set="method"><f a=""><x path="Float"/></f></get_fragmentsPushedToPeers>
		<get_fragmentsReceivedFromIPMulticast set="method"><f a=""><x path="Float"/></f></get_fragmentsReceivedFromIPMulticast>
		<get_fragmentsReceivedFromServer set="method"><f a=""><x path="Float"/></f></get_fragmentsReceivedFromServer>
		<get_fragmentsRequestedByPeers set="method"><f a=""><x path="Float"/></f></get_fragmentsRequestedByPeers>
		<get_fragmentsRequestedFromPeers set="method"><f a=""><x path="Float"/></f></get_fragmentsRequestedFromPeers>
		<get_receiveControlBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_receiveControlBytesPerSecond>
		<get_receiveDataBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_receiveDataBytesPerSecond>
		<get_receiveDataBytesPerSecondFromIPMulticast set="method"><f a=""><x path="Float"/></f></get_receiveDataBytesPerSecondFromIPMulticast>
		<get_receiveDataBytesPerSecondFromServer set="method"><f a=""><x path="Float"/></f></get_receiveDataBytesPerSecondFromServer>
		<get_sendControlBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_sendControlBytesPerSecond>
		<get_sendControlBytesPerSecondToServer set="method"><f a=""><x path="Float"/></f></get_sendControlBytesPerSecondToServer>
		<get_sendDataBytesPerSecond set="method"><f a=""><x path="Float"/></f></get_sendDataBytesPerSecond>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="sendDataBytesPerSecond:sendControlBytesPerSecond:receiveDataBytesPerSecond:receiveControlBytesPerSecond:bytesPushedToPeers:fragmentsPushedToPeers:bytesRequestedByPeers:fragmentsRequestedByPeers:bytesPushedFromPeers:fragmentsPushedFromPeers:bytesRequestedFromPeers:fragmentsRequestedFromPeers:sendControlBytesPerSecondToServer:receiveDataBytesPerSecondFromServer:bytesReceivedFromServer:fragmentsReceivedFromServer:receiveDataBytesPerSecondFromIPMulticast:bytesReceivedFromIPMulticast:fragmentsReceivedFromIPMulticast">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.net.NetStreamPlayOptions" params="" file="/home/runner/work/haxe/haxe/std/flash/net/NetStreamPlayOptions.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<len public="1"><x path="Float"/></len>
		<offset public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</offset>
		<oldStreamName public="1"><c path="String"/></oldStreamName>
		<start public="1"><x path="Float"/></start>
		<streamName public="1"><c path="String"/></streamName>
		<transition public="1"><c path="String"/></transition>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.net.NetStreamPlayTransitions" params="" file="/home/runner/work/haxe/haxe/std/flash/net/NetStreamPlayTransitions.hx">
		<SWAP/>
		<SWITCH/>
		<STOP/>
		<APPEND/>
		<RESET/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="flash.net.ObjectEncoding" params="" file="/home/runner/work/haxe/haxe/std/flash/net/ObjectEncoding.hx" extern="1">
		<AMF0 final="1" public="1" set="null" static="1"><x path="UInt"/></AMF0>
		<AMF3 final="1" public="1" set="null" static="1"><x path="UInt"/></AMF3>
		<DEFAULT final="1" public="1" set="null" static="1"><x path="UInt"/></DEFAULT>
		<dynamicPropertyWriter public="1" get="accessor" set="accessor" static="1">
			<c path="flash.net.IDynamicPropertyWriter"/>
			<meta><m n=":flash.property"/></meta>
		</dynamicPropertyWriter>
		<get_dynamicPropertyWriter set="method" static="1"><f a=""><c path="flash.net.IDynamicPropertyWriter"/></f></get_dynamicPropertyWriter>
		<set_dynamicPropertyWriter set="method" static="1"><f a="value">
	<c path="flash.net.IDynamicPropertyWriter"/>
	<c path="flash.net.IDynamicPropertyWriter"/>
</f></set_dynamicPropertyWriter>
	</class>
	<class path="flash.net.Responder" params="" file="/home/runner/work/haxe/haxe/std/flash/net/Responder.hx" extern="1"><new public="1" set="method"><f a="result:?status">
	<d/>
	<d/>
	<x path="Void"/>
</f></new></class>
	<class path="flash.utils.IDataOutput" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/IDataOutput.hx" extern="1" interface="1">
		<endian public="1" get="accessor" set="accessor">
			<x path="flash.utils.Endian"/>
			<meta><m n=":flash.property"/></meta>
		</endian>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<get_endian set="method"><f a=""><x path="flash.utils.Endian"/></f></get_endian>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<set_endian set="method"><f a="value">
	<x path="flash.utils.Endian"/>
	<x path="flash.utils.Endian"/>
</f></set_endian>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
	</class>
	<class path="flash.net.Socket" params="" file="/home/runner/work/haxe/haxe/std/flash/net/Socket.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.utils.IDataInput"/>
		<implements path="flash.utils.IDataOutput"/>
		<bytesAvailable public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesAvailable>
		<bytesPending public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</bytesPending>
		<connected public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</connected>
		<endian public="1" get="accessor" set="accessor">
			<x path="flash.utils.Endian"/>
			<meta><m n=":flash.property"/></meta>
		</endian>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<timeout public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</timeout>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="host:port">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<get_bytesAvailable set="method"><f a=""><x path="UInt"/></f></get_bytesAvailable>
		<get_bytesPending set="method"><f a=""><x path="UInt"/></f></get_bytesPending>
		<get_connected set="method"><f a=""><x path="Bool"/></f></get_connected>
		<get_endian set="method"><f a=""><x path="flash.utils.Endian"/></f></get_endian>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<get_timeout set="method"><f a=""><x path="UInt"/></f></get_timeout>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<set_endian set="method"><f a="value">
	<x path="flash.utils.Endian"/>
	<x path="flash.utils.Endian"/>
</f></set_endian>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
		<set_timeout set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_timeout>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method">
			<f a="?host:?port" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ port : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.net.SecureSocket" params="" file="/home/runner/work/haxe/haxe/std/flash/net/SecureSocket.hx" extern="1">
		<extends path="flash.net.Socket"/>
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isSupported>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<serverCertificate public="1" get="accessor" set="null">
			<c path="flash.security.X509Certificate"/>
			<meta><m n=":flash.property"/></meta>
		</serverCertificate>
		<serverCertificateStatus public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</serverCertificateStatus>
		<addBinaryChainBuildingCertificate public="1" set="method"><f a="certificate:trusted">
	<c path="flash.utils.ByteArray"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addBinaryChainBuildingCertificate>
		<get_serverCertificate set="method"><f a=""><c path="flash.security.X509Certificate"/></f></get_serverCertificate>
		<get_serverCertificateStatus set="method"><f a=""><c path="String"/></f></get_serverCertificateStatus>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash11</e></m></meta>
	</class>
	<class path="flash.net.SharedObject" params="" file="/home/runner/work/haxe/haxe/std/flash/net/SharedObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</defaultObjectEncoding>
		<preventBackup public="1" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_7</e></m>
			</meta>
		</preventBackup>
		<deleteAll public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<x path="Int"/>
</f></deleteAll>
		<getDiskUsage public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<x path="Int"/>
</f></getDiskUsage>
		<getLocal public="1" set="method" static="1">
			<f a="name:?localPath:?secure" v="::false">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="flash.net.SharedObject"/>
			</f>
			<meta><m n=":value"><e>{ secure : false }</e></m></meta>
		</getLocal>
		<getRemote public="1" set="method" static="1">
			<f a="name:?remotePath:?persistence:?secure" v="::false:false">
				<c path="String"/>
				<c path="String"/>
				<d/>
				<x path="Bool"/>
				<c path="flash.net.SharedObject"/>
			</f>
			<meta><m n=":value"><e>{ secure : false, persistence : false }</e></m></meta>
		</getRemote>
		<get_defaultObjectEncoding set="method" static="1"><f a=""><x path="UInt"/></f></get_defaultObjectEncoding>
		<get_preventBackup set="method" static="1"><f a=""><x path="Bool"/></f></get_preventBackup>
		<set_defaultObjectEncoding set="method" static="1"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_defaultObjectEncoding>
		<set_preventBackup set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_preventBackup>
		<client public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</client>
		<data public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</data>
		<fps public="1" get="null" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fps>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<size public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</size>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="myConnection:?params">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<x path="Void"/>
</f></connect>
		<flush public="1" set="method">
			<f a="?minDiskSpace" v="0">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ minDiskSpace : 0 }</e></m></meta>
		</flush>
		<get_client set="method"><f a=""><d/></f></get_client>
		<get_data set="method"><f a=""><d/></f></get_data>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<get_size set="method"><f a=""><x path="UInt"/></f></get_size>
		<send public="1" set="method"><f a="restArgs">
	<t path="haxe.extern.Rest"><d/></t>
	<x path="Void"/>
</f></send>
		<setDirty public="1" set="method"><f a="propertyName">
	<c path="String"/>
	<x path="Void"/>
</f></setDirty>
		<setProperty public="1" set="method"><f a="propertyName:?value">
	<c path="String"/>
	<x path="flash.utils.Object"/>
	<x path="Void"/>
</f></setProperty>
		<set_client set="method"><f a="value">
	<d/>
	<d/>
</f></set_client>
		<set_fps set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_fps>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.SharedObjectFlushStatus" params="" file="/home/runner/work/haxe/haxe/std/flash/net/SharedObjectFlushStatus.hx" extern="1">
		<FLUSHED final="1" public="1" set="null" static="1"><c path="String"/></FLUSHED>
		<PENDING final="1" public="1" set="null" static="1"><c path="String"/></PENDING>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.net.URLLoaderDataFormat" params="" file="/home/runner/work/haxe/haxe/std/flash/net/URLLoaderDataFormat.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.net.URLLoaderDataFormat"</e></m>
		</meta>
		<impl><class path="flash.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/net/URLLoaderDataFormat.hx" private="1" module="flash.net.URLLoaderDataFormat" extern="1" final="1">
	<BINARY public="1" set="null" static="1">
		<x path="flash.net.URLLoaderDataFormat"/>
		<meta><m n=":enum"/></meta>
	</BINARY>
	<TEXT public="1" set="null" static="1">
		<x path="flash.net.URLLoaderDataFormat"/>
		<meta><m n=":enum"/></meta>
	</TEXT>
	<VARIABLES public="1" set="null" static="1">
		<x path="flash.net.URLLoaderDataFormat"/>
		<meta><m n=":enum"/></meta>
	</VARIABLES>
	<meta>
		<m n=":native"><e>"flash.net.URLLoaderDataFormat"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/net/URLLoaderDataFormat.hx" private="1" module="flash.net.URLLoaderDataFormat" extern="1" final="1">
		<BINARY public="1" set="null" static="1">
			<x path="flash.net.URLLoaderDataFormat"/>
			<meta><m n=":enum"/></meta>
		</BINARY>
		<TEXT public="1" set="null" static="1">
			<x path="flash.net.URLLoaderDataFormat"/>
			<meta><m n=":enum"/></meta>
		</TEXT>
		<VARIABLES public="1" set="null" static="1">
			<x path="flash.net.URLLoaderDataFormat"/>
			<meta><m n=":enum"/></meta>
		</VARIABLES>
		<meta>
			<m n=":native"><e>"flash.net.URLLoaderDataFormat"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.net.URLRequest" params="" file="/home/runner/work/haxe/haxe/std/flash/net/URLRequest.hx" extern="1" final="1">
		<contentType public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</contentType>
		<data public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</data>
		<digest public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</digest>
		<method public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</method>
		<requestHeaders public="1" get="accessor" set="accessor">
			<c path="Array"><c path="flash.net.URLRequestHeader"/></c>
			<meta><m n=":flash.property"/></meta>
		</requestHeaders>
		<url public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</url>
		<get_contentType set="method"><f a=""><c path="String"/></f></get_contentType>
		<get_data set="method"><f a=""><d/></f></get_data>
		<get_digest set="method"><f a=""><c path="String"/></f></get_digest>
		<get_method set="method"><f a=""><c path="String"/></f></get_method>
		<get_requestHeaders set="method"><f a=""><c path="Array"><c path="flash.net.URLRequestHeader"/></c></f></get_requestHeaders>
		<get_url set="method"><f a=""><c path="String"/></f></get_url>
		<set_contentType set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_contentType>
		<set_data set="method"><f a="value">
	<d/>
	<d/>
</f></set_data>
		<set_digest set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_digest>
		<set_method set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_method>
		<set_requestHeaders set="method"><f a="value">
	<c path="Array"><c path="flash.net.URLRequestHeader"/></c>
	<c path="Array"><c path="flash.net.URLRequestHeader"/></c>
</f></set_requestHeaders>
		<set_url set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_url>
		<useRedirectedURL public="1" set="method">
			<f a="sourceRequest:?wholeURL:?pattern:?replace" v=":false::">
				<c path="flash.net.URLRequest"/>
				<x path="Bool"/>
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ wholeURL : false }</e></m></meta>
		</useRedirectedURL>
		<new public="1" set="method"><f a="?url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.URLRequestHeader" params="" file="/home/runner/work/haxe/haxe/std/flash/net/URLRequestHeader.hx" extern="1" final="1">
		<name public="1"><c path="String"/></name>
		<value public="1"><c path="String"/></value>
		<new public="1" set="method"><f a="?name:?value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.URLRequestMethod" params="" file="/home/runner/work/haxe/haxe/std/flash/net/URLRequestMethod.hx" extern="1">
		<DELETE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</DELETE>
		<GET final="1" public="1" set="null" static="1"><c path="String"/></GET>
		<HEAD final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</HEAD>
		<OPTIONS final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</OPTIONS>
		<POST final="1" public="1" set="null" static="1"><c path="String"/></POST>
		<PUT final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</PUT>
	</class>
	<class path="flash.net.URLVariables" params="" file="/home/runner/work/haxe/haxe/std/flash/net/URLVariables.hx" extern="1">
		<decode public="1" set="method"><f a="source">
	<c path="String"/>
	<x path="Void"/>
</f></decode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?source">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.XMLSocket" params="" file="/home/runner/work/haxe/haxe/std/flash/net/XMLSocket.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<connected public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</connected>
		<timeout public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</timeout>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="host:port">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
		<get_connected set="method"><f a=""><x path="Bool"/></f></get_connected>
		<get_timeout set="method"><f a=""><x path="Int"/></f></get_timeout>
		<send public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></send>
		<set_timeout set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_timeout>
		<new public="1" set="method">
			<f a="?host:?port" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ port : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.net.drm.AddToDeviceGroupSetting" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/AddToDeviceGroupSetting.hx" extern="1">
		<ALLOW_SERVER final="1" public="1" set="null" static="1"><c path="String"/></ALLOW_SERVER>
		<FORCE_REFRESH final="1" public="1" set="null" static="1"><c path="String"/></FORCE_REFRESH>
		<LOCAL_ONLY final="1" public="1" set="null" static="1"><c path="String"/></LOCAL_ONLY>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.AuthenticationMethod" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/AuthenticationMethod.hx" extern="1">
		<ANONYMOUS final="1" public="1" set="null" static="1"><c path="String"/></ANONYMOUS>
		<USERNAME_AND_PASSWORD final="1" public="1" set="null" static="1"><c path="String"/></USERNAME_AND_PASSWORD>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMManagerSession" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMManagerSession.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<STATUS_FAILED final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":ns">
	<e>"flash.net.drm"</e>
	<e>internal</e>
</m></meta>
		</STATUS_FAILED>
		<STATUS_NOTREADY final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":ns">
	<e>"flash.net.drm"</e>
	<e>internal</e>
</m></meta>
		</STATUS_NOTREADY>
		<STATUS_READY final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":ns">
	<e>"flash.net.drm"</e>
	<e>internal</e>
</m></meta>
		</STATUS_READY>
		<STATUS_UNKNOWN final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":ns">
	<e>"flash.net.drm"</e>
	<e>internal</e>
</m></meta>
		</STATUS_UNKNOWN>
		<m_isInSession public="1"><x path="Bool"/></m_isInSession>
		<metadata public="1" get="accessor" set="accessor">
			<c path="flash.net.drm.DRMContentData"/>
			<meta><m n=":flash.property"/></meta>
		</metadata>
		<checkStatus public="1" set="method"><f a=""><x path="UInt"/></f></checkStatus>
		<errorCodeToThrow public="1" set="method"><f a="errorCode">
	<x path="UInt"/>
	<x path="Void"/>
</f></errorCodeToThrow>
		<getLastError public="1" set="method"><f a=""><x path="UInt"/></f></getLastError>
		<getLastServerErrorString public="1" set="method"><f a=""><c path="String"/></f></getLastServerErrorString>
		<getLastSubErrorID public="1" set="method"><f a=""><x path="UInt"/></f></getLastSubErrorID>
		<get_metadata set="method"><f a=""><c path="flash.net.drm.DRMContentData"/></f></get_metadata>
		<issueDRMErrorEvent public="1" set="method"><f a="metadata:errorID:subErrorID:serverErrorString">
	<c path="flash.net.drm.DRMContentData"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></issueDRMErrorEvent>
		<issueDRMStatusEvent public="1" set="method"><f a="inMetadata:voucher">
	<c path="flash.net.drm.DRMContentData"/>
	<c path="flash.net.drm.DRMVoucher"/>
	<d/>
</f></issueDRMStatusEvent>
		<onSessionComplete public="1" set="method"><f a=""><x path="Void"/></f></onSessionComplete>
		<onSessionError public="1" set="method"><f a=""><x path="Void"/></f></onSessionError>
		<setTimerUp public="1" set="method"><f a=""><x path="Void"/></f></setTimerUp>
		<set_metadata set="method"><f a="value">
	<c path="flash.net.drm.DRMContentData"/>
	<c path="flash.net.drm.DRMContentData"/>
</f></set_metadata>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMAddToDeviceGroupContext" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMAddToDeviceGroupContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<addToDeviceGroup public="1" set="method"><f a="deviceGroup:forceRefresh">
	<c path="flash.net.drm.DRMDeviceGroup"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addToDeviceGroup>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMAuthenticationContext" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMAuthenticationContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<authenticationToken public="1" get="accessor" set="null">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":flash.property"/></meta>
		</authenticationToken>
		<authenticate public="1" set="method"><f a="url:domain:username:password">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></authenticate>
		<get_authenticationToken set="method"><f a=""><c path="flash.utils.ByteArray"/></f></get_authenticationToken>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMContentData" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMContentData.hx" extern="1">
		<authenticationMethod public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</authenticationMethod>
		<domain public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</domain>
		<licenseID public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</licenseID>
		<serverURL public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</serverURL>
		<getVoucherAccessInfo public="1" set="method"><f a=""><c path="flash.Vector"><c path="flash.net.drm.VoucherAccessInfo"/></c></f></getVoucherAccessInfo>
		<get_authenticationMethod set="method"><f a=""><c path="String"/></f></get_authenticationMethod>
		<get_domain set="method"><f a=""><c path="String"/></f></get_domain>
		<get_licenseID set="method"><f a=""><c path="String"/></f></get_licenseID>
		<get_serverURL set="method"><f a=""><c path="String"/></f></get_serverURL>
		<new public="1" set="method"><f a="?rawData">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.drm.DRMDeviceGroup" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMDeviceGroup.hx" extern="1" final="1">
		<authenticationMethod public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</authenticationMethod>
		<domain public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</domain>
		<name public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</name>
		<serverURL public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</serverURL>
		<get_authenticationMethod set="method"><f a=""><c path="String"/></f></get_authenticationMethod>
		<get_domain set="method"><f a=""><c path="String"/></f></get_domain>
		<get_name set="method"><f a=""><c path="String"/></f></get_name>
		<get_serverURL set="method"><f a=""><c path="String"/></f></get_serverURL>
		<set_name set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_name>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMManager" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMManager.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isSupported>
		<networkIdleTimeout public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</networkIdleTimeout>
		<getDRMManager public="1" set="method" static="1"><f a=""><c path="flash.net.drm.DRMManager"/></f></getDRMManager>
		<getDRMManagerInternal public="1" set="method" static="1">
			<f a=""><c path="flash.net.drm.DRMManager"/></f>
			<meta><m n=":ns">
	<e>"flash.net.drm"</e>
	<e>internal</e>
</m></meta>
		</getDRMManagerInternal>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<get_networkIdleTimeout set="method" static="1"><f a=""><x path="Float"/></f></get_networkIdleTimeout>
		<set_networkIdleTimeout set="method" static="1"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_networkIdleTimeout>
		<addToDeviceGroup public="1" set="method">
			<f a="deviceGroup:?forceRefresh" v=":false">
				<c path="flash.net.drm.DRMDeviceGroup"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ forceRefresh : false }</e></m></meta>
		</addToDeviceGroup>
		<authenticate public="1" set="method"><f a="serverURL:domain:username:password">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></authenticate>
		<loadPreviewVoucher public="1" set="method"><f a="contentData">
	<c path="flash.net.drm.DRMContentData"/>
	<x path="Void"/>
</f></loadPreviewVoucher>
		<loadVoucher public="1" set="method"><f a="contentData:setting">
	<c path="flash.net.drm.DRMContentData"/>
	<c path="String"/>
	<x path="Void"/>
</f></loadVoucher>
		<removeFromDeviceGroup public="1" set="method"><f a="deviceGroup">
	<c path="flash.net.drm.DRMDeviceGroup"/>
	<x path="Void"/>
</f></removeFromDeviceGroup>
		<resetDRMVouchers public="1" set="method"><f a=""><x path="Void"/></f></resetDRMVouchers>
		<resetDRMVouchersInternal public="1" set="method">
			<f a="isAutoReset">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ns">
	<e>"flash.net.drm"</e>
	<e>internal</e>
</m></meta>
		</resetDRMVouchersInternal>
		<returnVoucher public="1" set="method"><f a="inServerURL:immediateCommit:licenseID:policyID">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></returnVoucher>
		<setAuthenticationToken public="1" set="method"><f a="serverUrl:domain:token">
	<c path="String"/>
	<c path="String"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></setAuthenticationToken>
		<storeVoucher public="1" set="method"><f a="voucher">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></storeVoucher>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMModuleCycleProvider" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMModuleCycleProvider.hx" extern="1"><new public="1" set="method"><f a=""><x path="Void"/></f></new></class>
	<class path="flash.net.drm.DRMPlaybackTimeWindow" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMPlaybackTimeWindow.hx" extern="1">
		<endDate public="1" get="accessor" set="null">
			<c path="Date"/>
			<meta><m n=":flash.property"/></meta>
		</endDate>
		<period public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</period>
		<startDate public="1" get="accessor" set="null">
			<c path="Date"/>
			<meta><m n=":flash.property"/></meta>
		</startDate>
		<get_endDate set="method"><f a=""><c path="Date"/></f></get_endDate>
		<get_period set="method"><f a=""><x path="UInt"/></f></get_period>
		<get_startDate set="method"><f a=""><c path="Date"/></f></get_startDate>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMRemoveFromDeviceGroupContext" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMRemoveFromDeviceGroupContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<removeFromDeviceGroup public="1" set="method"><f a="deviceGroup">
	<c path="flash.net.drm.DRMDeviceGroup"/>
	<x path="Void"/>
</f></removeFromDeviceGroup>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMResetContext" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMResetContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<m_isAutoReset public="1"><x path="Bool"/></m_isAutoReset>
		<doReset public="1" set="method"><f a=""><x path="Void"/></f></doReset>
		<new public="1" set="method"><f a="isAutoReset">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.drm.DRMReturnVoucherContext" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMReturnVoucherContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<returnVoucher public="1" set="method"><f a="inServerURL:immediateCommit:licenseID:policyID">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></returnVoucher>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMStoreVoucherContext" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMStoreVoucherContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<doStoreVoucher public="1" set="method"><f a=""><x path="Void"/></f></doStoreVoucher>
		<new public="1" set="method"><f a="voucher">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.drm.DRMURLDownloadContext" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMURLDownloadContext.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<httpGetASync public="1" set="method"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></httpGetASync>
		<httpPostAndReceiveASync public="1" set="method"><f a="url:headerName:headerValue:data:serverType">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></httpPostAndReceiveASync>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMVoucher" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMVoucher.hx" extern="1">
		<licenseID public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</licenseID>
		<offlineLeaseEndDate public="1" get="accessor" set="null">
			<c path="Date"/>
			<meta><m n=":flash.property"/></meta>
		</offlineLeaseEndDate>
		<offlineLeaseStartDate public="1" get="accessor" set="null">
			<c path="Date"/>
			<meta><m n=":flash.property"/></meta>
		</offlineLeaseStartDate>
		<playbackTimeWindow public="1" get="accessor" set="null">
			<c path="flash.net.drm.DRMPlaybackTimeWindow"/>
			<meta><m n=":flash.property"/></meta>
		</playbackTimeWindow>
		<policies public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</policies>
		<policyID public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</policyID>
		<serverURL public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</serverURL>
		<voucherEndDate public="1" get="accessor" set="null">
			<c path="Date"/>
			<meta><m n=":flash.property"/></meta>
		</voucherEndDate>
		<voucherStartDate public="1" get="accessor" set="null">
			<c path="Date"/>
			<meta><m n=":flash.property"/></meta>
		</voucherStartDate>
		<get_licenseID set="method"><f a=""><c path="String"/></f></get_licenseID>
		<get_offlineLeaseEndDate set="method"><f a=""><c path="Date"/></f></get_offlineLeaseEndDate>
		<get_offlineLeaseStartDate set="method"><f a=""><c path="Date"/></f></get_offlineLeaseStartDate>
		<get_playbackTimeWindow set="method"><f a=""><c path="flash.net.drm.DRMPlaybackTimeWindow"/></f></get_playbackTimeWindow>
		<get_policies set="method"><f a=""><d/></f></get_policies>
		<get_policyID set="method"><f a=""><c path="String"/></f></get_policyID>
		<get_serverURL set="method"><f a=""><c path="String"/></f></get_serverURL>
		<get_voucherEndDate set="method"><f a=""><c path="Date"/></f></get_voucherEndDate>
		<get_voucherStartDate set="method"><f a=""><c path="Date"/></f></get_voucherStartDate>
		<toByteArray public="1" set="method"><f a=""><c path="flash.utils.ByteArray"/></f></toByteArray>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMVoucherDownloadContext" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMVoucherDownloadContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<voucher public="1" get="accessor" set="null">
			<c path="flash.net.drm.DRMVoucher"/>
			<meta><m n=":flash.property"/></meta>
		</voucher>
		<download public="1" set="method">
			<f a="inMetadata:?previewVoucher" v=":false">
				<c path="flash.net.drm.DRMContentData"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ previewVoucher : false }</e></m></meta>
		</download>
		<get_voucher set="method"><f a=""><c path="flash.net.drm.DRMVoucher"/></f></get_voucher>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMVoucherStoreContext" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/DRMVoucherStoreContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<voucher public="1" get="accessor" set="null">
			<c path="flash.net.drm.DRMVoucher"/>
			<meta><m n=":flash.property"/></meta>
		</voucher>
		<getVoucherFromStore public="1" set="method"><f a="inMetadata">
	<c path="flash.net.drm.DRMContentData"/>
	<x path="Void"/>
</f></getVoucherFromStore>
		<get_voucher set="method"><f a=""><c path="flash.net.drm.DRMVoucher"/></f></get_voucher>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.LoadVoucherSetting" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/LoadVoucherSetting.hx" extern="1">
		<ALLOW_SERVER final="1" public="1" set="null" static="1"><c path="String"/></ALLOW_SERVER>
		<FORCE_REFRESH final="1" public="1" set="null" static="1"><c path="String"/></FORCE_REFRESH>
		<LOCAL_ONLY final="1" public="1" set="null" static="1"><c path="String"/></LOCAL_ONLY>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.VoucherAccessInfo" params="" file="/home/runner/work/haxe/haxe/std/flash/net/drm/VoucherAccessInfo.hx" extern="1" final="1">
		<authenticationMethod public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</authenticationMethod>
		<deviceGroup public="1" get="accessor" set="null">
			<c path="flash.net.drm.DRMDeviceGroup"/>
			<meta><m n=":flash.property"/></meta>
		</deviceGroup>
		<displayName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</displayName>
		<domain public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</domain>
		<policyID public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</policyID>
		<get_authenticationMethod set="method"><f a=""><c path="String"/></f></get_authenticationMethod>
		<get_deviceGroup set="method"><f a=""><c path="flash.net.drm.DRMDeviceGroup"/></f></get_deviceGroup>
		<get_displayName set="method"><f a=""><c path="String"/></f></get_displayName>
		<get_domain set="method"><f a=""><c path="String"/></f></get_domain>
		<get_policyID set="method"><f a=""><c path="String"/></f></get_policyID>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.printing.PrintJob" params="" file="/home/runner/work/haxe/haxe/std/flash/printing/PrintJob.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</isSupported>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<orientation public="1" get="accessor" set="null">
			<x path="flash.printing.PrintJobOrientation"/>
			<meta><m n=":flash.property"/></meta>
		</orientation>
		<pageHeight public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</pageHeight>
		<pageWidth public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</pageWidth>
		<paperHeight public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</paperHeight>
		<paperWidth public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</paperWidth>
		<addPage public="1" set="method">
			<f a="sprite:?printArea:?options:?frameNum" v=":::0">
				<c path="flash.display.Sprite"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.printing.PrintJobOptions"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ frameNum : 0 }</e></m></meta>
		</addPage>
		<get_orientation set="method"><f a=""><x path="flash.printing.PrintJobOrientation"/></f></get_orientation>
		<get_pageHeight set="method"><f a=""><x path="Int"/></f></get_pageHeight>
		<get_pageWidth set="method"><f a=""><x path="Int"/></f></get_pageWidth>
		<get_paperHeight set="method"><f a=""><x path="Int"/></f></get_paperHeight>
		<get_paperWidth set="method"><f a=""><x path="Int"/></f></get_paperWidth>
		<send public="1" set="method"><f a=""><x path="Void"/></f></send>
		<start public="1" set="method"><f a=""><x path="Bool"/></f></start>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.printing.PrintJobOptions" params="" file="/home/runner/work/haxe/haxe/std/flash/printing/PrintJobOptions.hx" extern="1">
		<printAsBitmap public="1"><x path="Bool"/></printAsBitmap>
		<new public="1" set="method">
			<f a="?printAsBitmap" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ printAsBitmap : false }</e></m></meta>
		</new>
	</class>
	<abstract path="flash.printing.PrintJobOrientation" params="" file="/home/runner/work/haxe/haxe/std/flash/printing/PrintJobOrientation.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.printing.PrintJobOrientation"</e></m>
		</meta>
		<impl><class path="flash.printing._PrintJobOrientation.PrintJobOrientation_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/printing/PrintJobOrientation.hx" private="1" module="flash.printing.PrintJobOrientation" extern="1" final="1">
	<LANDSCAPE public="1" set="null" static="1">
		<x path="flash.printing.PrintJobOrientation"/>
		<meta><m n=":enum"/></meta>
	</LANDSCAPE>
	<PORTRAIT public="1" set="null" static="1">
		<x path="flash.printing.PrintJobOrientation"/>
		<meta><m n=":enum"/></meta>
	</PORTRAIT>
	<meta>
		<m n=":native"><e>"flash.printing.PrintJobOrientation"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.printing._PrintJobOrientation.PrintJobOrientation_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/printing/PrintJobOrientation.hx" private="1" module="flash.printing.PrintJobOrientation" extern="1" final="1">
		<LANDSCAPE public="1" set="null" static="1">
			<x path="flash.printing.PrintJobOrientation"/>
			<meta><m n=":enum"/></meta>
		</LANDSCAPE>
		<PORTRAIT public="1" set="null" static="1">
			<x path="flash.printing.PrintJobOrientation"/>
			<meta><m n=":enum"/></meta>
		</PORTRAIT>
		<meta>
			<m n=":native"><e>"flash.printing.PrintJobOrientation"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.profiler.Telemetry" params="" file="/home/runner/work/haxe/haxe/std/flash/profiler/Telemetry.hx" extern="1">
		<connected public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</connected>
		<spanMarker public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</spanMarker>
		<get_connected set="method" static="1"><f a=""><x path="Bool"/></f></get_connected>
		<get_spanMarker set="method" static="1"><f a=""><x path="Float"/></f></get_spanMarker>
		<registerCommandHandler public="1" set="method" static="1"><f a="commandName:handler">
	<c path="String"/>
	<d/>
	<x path="Bool"/>
</f></registerCommandHandler>
		<sendMetric public="1" set="method" static="1"><f a="metric:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></sendMetric>
		<sendSpanMetric public="1" set="method" static="1"><f a="metric:startSpanMarker:?value">
	<c path="String"/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></sendSpanMetric>
		<unregisterCommandHandler public="1" set="method" static="1"><f a="commandName">
	<c path="String"/>
	<x path="Bool"/>
</f></unregisterCommandHandler>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.sampler.Api" params="" file="/home/runner/work/haxe/haxe/std/flash/sampler/Api.hx" extern="1">
		<clearSamples public="1" get="inline" set="null" line="5" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</clearSamples>
		<getGetterInvocationCount public="1" get="inline" set="null" line="9" static="1">
			<f a="obj:qname">
				<d/>
				<c path="flash.utils.QName"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getGetterInvocationCount>
		<getSetterInvocationCount public="1" get="inline" set="null" line="13" static="1">
			<f a="obj:qname">
				<d/>
				<c path="flash.utils.QName"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getSetterInvocationCount>
		<getInvocationCount public="1" get="inline" set="null" line="17" static="1">
			<f a="obj:qname">
				<d/>
				<c path="flash.utils.QName"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getInvocationCount>
		<getMemberNames public="1" get="inline" set="null" line="21" static="1">
			<f a="obj:?instanceNames" v=":false">
				<d/>
				<x path="Bool"/>
				<d><c path="flash.utils.QName"/></d>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ instanceNames : false }</e></m>
			</meta>
		</getMemberNames>
		<getSampleCount public="1" get="inline" set="null" line="25" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getSampleCount>
		<getSamples public="1" get="inline" set="null" line="29" static="1">
			<f a=""><c path="Array"><c path="flash.sampler.Sample"/></c></f>
			<meta><m n=":has_untyped"/></meta>
		</getSamples>
		<getSize public="1" get="inline" set="null" line="33" static="1">
			<f a="obj">
				<d/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getSize>
		<isGetterSetter public="1" get="inline" set="null" line="37" static="1">
			<f a="obj:qname">
				<d/>
				<c path="flash.utils.QName"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isGetterSetter>
		<pauseSampling public="1" get="inline" set="null" line="41" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</pauseSampling>
		<startSampling public="1" get="inline" set="null" line="45" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</startSampling>
		<stopSampling public="1" get="inline" set="null" line="49" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</stopSampling>
		<getLexicalScopes public="1" get="inline" set="null" line="53" static="1">
			<f a="fun">
				<d/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getLexicalScopes>
		<getMasterString public="1" get="inline" set="null" line="57" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getMasterString>
		<getSavedThis public="1" get="inline" set="null" line="61" static="1">
			<f a="fun">
				<d/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getSavedThis>
		<sampleInternalAllocs public="1" get="inline" set="null" line="65" static="1">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</sampleInternalAllocs>
		<setSamplerCallback public="1" get="inline" set="null" line="69" static="1">
			<f a="callb">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setSamplerCallback>
	</class>
	<class path="flash.sampler.ClassFactory" params="" file="/home/runner/work/haxe/haxe/std/flash/sampler/ClassFactory.hx" extern="1">
		<DeleteObjectSampleClass final="1" public="1" set="null" static="1"><x path="Class"><d/></x></DeleteObjectSampleClass>
		<NewObjectSampleClass final="1" public="1" set="null" static="1"><x path="Class"><d/></x></NewObjectSampleClass>
		<SampleClass final="1" public="1" set="null" static="1"><x path="Class"><d/></x></SampleClass>
		<StackFrameClass final="1" public="1" set="null" static="1"><x path="Class"><d/></x></StackFrameClass>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.sampler.Sample" params="" file="/home/runner/work/haxe/haxe/std/flash/sampler/Sample.hx" extern="1">
		<stack final="1" public="1"><c path="Array"><c path="flash.sampler.StackFrame"/></c></stack>
		<time final="1" public="1"><x path="Float"/></time>
	</class>
	<class path="flash.sampler.DeleteObjectSample" params="" file="/home/runner/work/haxe/haxe/std/flash/sampler/DeleteObjectSample.hx" extern="1" final="1">
		<extends path="flash.sampler.Sample"/>
		<id final="1" public="1"><x path="Float"/></id>
		<size final="1" public="1"><x path="Float"/></size>
	</class>
	<class path="flash.sampler.NewObjectSample" params="" file="/home/runner/work/haxe/haxe/std/flash/sampler/NewObjectSample.hx" extern="1" final="1">
		<extends path="flash.sampler.Sample"/>
		<id final="1" public="1"><x path="Float"/></id>
		<object public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</object>
		<size public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</size>
		<type final="1" public="1"><x path="Class"><d/></x></type>
		<get_object set="method"><f a=""><d/></f></get_object>
		<get_size set="method"><f a=""><x path="Float"/></f></get_size>
	</class>
	<class path="flash.sampler.StackFrame" params="" file="/home/runner/work/haxe/haxe/std/flash/sampler/StackFrame.hx" extern="1" final="1">
		<file final="1" public="1"><c path="String"/></file>
		<line final="1" public="1"><x path="UInt"/></line>
		<name final="1" public="1"><c path="String"/></name>
		<scriptID final="1" public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</scriptID>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
	</class>
	<class path="flash.security.CertificateStatus" params="" file="/home/runner/work/haxe/haxe/std/flash/security/CertificateStatus.hx" extern="1">
		<EXPIRED final="1" public="1" set="null" static="1"><c path="String"/></EXPIRED>
		<INVALID final="1" public="1" set="null" static="1"><c path="String"/></INVALID>
		<INVALID_CHAIN final="1" public="1" set="null" static="1"><c path="String"/></INVALID_CHAIN>
		<NOT_YET_VALID final="1" public="1" set="null" static="1"><c path="String"/></NOT_YET_VALID>
		<PRINCIPAL_MISMATCH final="1" public="1" set="null" static="1"><c path="String"/></PRINCIPAL_MISMATCH>
		<REVOKED final="1" public="1" set="null" static="1"><c path="String"/></REVOKED>
		<TRUSTED final="1" public="1" set="null" static="1"><c path="String"/></TRUSTED>
		<UNKNOWN final="1" public="1" set="null" static="1"><c path="String"/></UNKNOWN>
		<UNTRUSTED_SIGNERS final="1" public="1" set="null" static="1"><c path="String"/></UNTRUSTED_SIGNERS>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.security.X500DistinguishedName" params="" file="/home/runner/work/haxe/haxe/std/flash/security/X500DistinguishedName.hx" extern="1">
		<commonName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</commonName>
		<countryName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</countryName>
		<localityName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</localityName>
		<organizationName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</organizationName>
		<organizationalUnitName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</organizationalUnitName>
		<stateOrProvinceName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</stateOrProvinceName>
		<get_commonName set="method"><f a=""><c path="String"/></f></get_commonName>
		<get_countryName set="method"><f a=""><c path="String"/></f></get_countryName>
		<get_localityName set="method"><f a=""><c path="String"/></f></get_localityName>
		<get_organizationName set="method"><f a=""><c path="String"/></f></get_organizationName>
		<get_organizationalUnitName set="method"><f a=""><c path="String"/></f></get_organizationalUnitName>
		<get_stateOrProvinceName set="method"><f a=""><c path="String"/></f></get_stateOrProvinceName>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.security.X509Certificate" params="" file="/home/runner/work/haxe/haxe/std/flash/security/X509Certificate.hx" extern="1">
		<encoded public="1" get="accessor" set="null">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":flash.property"/></meta>
		</encoded>
		<issuer public="1" get="accessor" set="null">
			<c path="flash.security.X500DistinguishedName"/>
			<meta><m n=":flash.property"/></meta>
		</issuer>
		<issuerUniqueID public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</issuerUniqueID>
		<serialNumber public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</serialNumber>
		<signatureAlgorithmOID public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</signatureAlgorithmOID>
		<signatureAlgorithmParams public="1" get="accessor" set="null">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":flash.property"/></meta>
		</signatureAlgorithmParams>
		<subject public="1" get="accessor" set="null">
			<c path="flash.security.X500DistinguishedName"/>
			<meta><m n=":flash.property"/></meta>
		</subject>
		<subjectPublicKey public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</subjectPublicKey>
		<subjectPublicKeyAlgorithmOID public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</subjectPublicKeyAlgorithmOID>
		<subjectUniqueID public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</subjectUniqueID>
		<validNotAfter public="1" get="accessor" set="null">
			<c path="Date"/>
			<meta><m n=":flash.property"/></meta>
		</validNotAfter>
		<validNotBefore public="1" get="accessor" set="null">
			<c path="Date"/>
			<meta><m n=":flash.property"/></meta>
		</validNotBefore>
		<version public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</version>
		<get_encoded set="method"><f a=""><c path="flash.utils.ByteArray"/></f></get_encoded>
		<get_issuer set="method"><f a=""><c path="flash.security.X500DistinguishedName"/></f></get_issuer>
		<get_issuerUniqueID set="method"><f a=""><c path="String"/></f></get_issuerUniqueID>
		<get_serialNumber set="method"><f a=""><c path="String"/></f></get_serialNumber>
		<get_signatureAlgorithmOID set="method"><f a=""><c path="String"/></f></get_signatureAlgorithmOID>
		<get_signatureAlgorithmParams set="method"><f a=""><c path="flash.utils.ByteArray"/></f></get_signatureAlgorithmParams>
		<get_subject set="method"><f a=""><c path="flash.security.X500DistinguishedName"/></f></get_subject>
		<get_subjectPublicKey set="method"><f a=""><c path="String"/></f></get_subjectPublicKey>
		<get_subjectPublicKeyAlgorithmOID set="method"><f a=""><c path="String"/></f></get_subjectPublicKeyAlgorithmOID>
		<get_subjectUniqueID set="method"><f a=""><c path="String"/></f></get_subjectUniqueID>
		<get_validNotAfter set="method"><f a=""><c path="Date"/></f></get_validNotAfter>
		<get_validNotBefore set="method"><f a=""><c path="Date"/></f></get_validNotBefore>
		<get_version set="method"><f a=""><x path="UInt"/></f></get_version>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.sensors.Accelerometer" params="" file="/home/runner/work/haxe/haxe/std/flash/sensors/Accelerometer.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isSupported>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<muted public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</muted>
		<get_muted set="method"><f a=""><x path="Bool"/></f></get_muted>
		<setRequestedUpdateInterval public="1" set="method"><f a="interval">
	<x path="Float"/>
	<x path="Void"/>
</f></setRequestedUpdateInterval>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.sensors.Geolocation" params="" file="/home/runner/work/haxe/haxe/std/flash/sensors/Geolocation.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isSupported>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<muted public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</muted>
		<get_muted set="method"><f a=""><x path="Bool"/></f></get_muted>
		<setRequestedUpdateInterval public="1" set="method"><f a="interval">
	<x path="Float"/>
	<x path="Void"/>
</f></setRequestedUpdateInterval>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.system.ApplicationDomain" params="" file="/home/runner/work/haxe/haxe/std/flash/system/ApplicationDomain.hx" extern="1" final="1">
		<MIN_DOMAIN_MEMORY_LENGTH public="1" get="accessor" set="null" static="1">
			<x path="UInt"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</MIN_DOMAIN_MEMORY_LENGTH>
		<currentDomain public="1" get="accessor" set="null" static="1">
			<c path="flash.system.ApplicationDomain"/>
			<meta><m n=":flash.property"/></meta>
		</currentDomain>
		<get_MIN_DOMAIN_MEMORY_LENGTH set="method" static="1"><f a=""><x path="UInt"/></f></get_MIN_DOMAIN_MEMORY_LENGTH>
		<get_currentDomain set="method" static="1"><f a=""><c path="flash.system.ApplicationDomain"/></f></get_currentDomain>
		<domainMemory public="1" get="accessor" set="accessor">
			<c path="flash.utils.ByteArray"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</domainMemory>
		<parentDomain public="1" get="accessor" set="null">
			<c path="flash.system.ApplicationDomain"/>
			<meta><m n=":flash.property"/></meta>
		</parentDomain>
		<getDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="flash.utils.Object"/>
</f></getDefinition>
		<getQualifiedDefinitionNames public="1" set="method">
			<f a=""><c path="flash.Vector"><c path="String"/></c></f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</getQualifiedDefinitionNames>
		<get_domainMemory set="method"><f a=""><c path="flash.utils.ByteArray"/></f></get_domainMemory>
		<get_parentDomain set="method"><f a=""><c path="flash.system.ApplicationDomain"/></f></get_parentDomain>
		<hasDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasDefinition>
		<set_domainMemory set="method"><f a="value">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
</f></set_domainMemory>
		<new public="1" set="method"><f a="?parentDomain">
	<c path="flash.system.ApplicationDomain"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.system.ApplicationInstaller" params="" file="/home/runner/work/haxe/haxe/std/flash/system/ApplicationInstaller.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<iconDigest public="1" set="method" static="1"><f a="icon">
	<c path="flash.utils.ByteArray"/>
	<c path="String"/>
</f></iconDigest>
		<stringsDigest public="1" set="method" static="1"><f a="strings">
	<c path="flash.xml.XML"/>
	<c path="String"/>
</f></stringsDigest>
		<isInstalled public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isInstalled>
		<get_isInstalled set="method"><f a=""><x path="Bool"/></f></get_isInstalled>
		<install public="1" set="method"><f a="?mode">
	<c path="String"/>
	<x path="Void"/>
</f></install>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash11_3</e></m></meta>
	</class>
	<abstract path="flash.system.ApplicationInstallerMode" params="" file="/home/runner/work/haxe/haxe/std/flash/system/ApplicationInstallerMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.system.ApplicationInstallerMode"</e></m>
		</meta>
		<impl><class path="flash.system._ApplicationInstallerMode.ApplicationInstallerMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/ApplicationInstallerMode.hx" private="1" module="flash.system.ApplicationInstallerMode" extern="1" final="1">
	<INSTALL_ONLY public="1" set="null" static="1">
		<x path="flash.system.ApplicationInstallerMode"/>
		<meta><m n=":enum"/></meta>
	</INSTALL_ONLY>
	<INSTALL_WITH_SHORTCUTS public="1" set="null" static="1">
		<x path="flash.system.ApplicationInstallerMode"/>
		<meta><m n=":enum"/></meta>
	</INSTALL_WITH_SHORTCUTS>
	<SHORTCUTS_ONLY public="1" set="null" static="1">
		<x path="flash.system.ApplicationInstallerMode"/>
		<meta><m n=":enum"/></meta>
	</SHORTCUTS_ONLY>
	<meta>
		<m n=":native"><e>"flash.system.ApplicationInstallerMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.system._ApplicationInstallerMode.ApplicationInstallerMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/ApplicationInstallerMode.hx" private="1" module="flash.system.ApplicationInstallerMode" extern="1" final="1">
		<INSTALL_ONLY public="1" set="null" static="1">
			<x path="flash.system.ApplicationInstallerMode"/>
			<meta><m n=":enum"/></meta>
		</INSTALL_ONLY>
		<INSTALL_WITH_SHORTCUTS public="1" set="null" static="1">
			<x path="flash.system.ApplicationInstallerMode"/>
			<meta><m n=":enum"/></meta>
		</INSTALL_WITH_SHORTCUTS>
		<SHORTCUTS_ONLY public="1" set="null" static="1">
			<x path="flash.system.ApplicationInstallerMode"/>
			<meta><m n=":enum"/></meta>
		</SHORTCUTS_ONLY>
		<meta>
			<m n=":native"><e>"flash.system.ApplicationInstallerMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.system.AuthorizedFeatures" params="" file="/home/runner/work/haxe/haxe/std/flash/system/AuthorizedFeatures.hx" extern="1" final="1">
		<createApplicationInstaller public="1" set="method"><f a="strings:icon">
	<c path="flash.xml.XML"/>
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.ApplicationInstaller"/>
</f></createApplicationInstaller>
		<enableAVLoader public="1" set="method"><f a="loader">
	<c path="flash.display.AVLoader"/>
	<x path="Bool"/>
</f></enableAVLoader>
		<enableAVURLLoader public="1" set="method"><f a="loader">
	<c path="flash.media.AVURLLoader"/>
	<x path="Bool"/>
</f></enableAVURLLoader>
		<enableAVURLStream public="1" set="method"><f a="stream">
	<c path="flash.media.AVURLStream"/>
	<x path="Bool"/>
</f></enableAVURLStream>
		<enableDiskCache public="1" set="method">
			<f a="stream">
				<c path="flash.net.URLStream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</enableDiskCache>
		<enableHLSPlayback public="1">
			<f a="stream">
				<c path="flash.media.AVStream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash11_7</e></m></meta>
		</enableHLSPlayback>
		<enableMediaPlayerHLSPlayback public="1" set="method"><f a="player">
	<d/>
	<x path="Bool"/>
</f></enableMediaPlayerHLSPlayback>
		<isFeatureEnabled public="1" set="method">
			<f a="feature:?data">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":ns">
					<e>"flash.system"</e>
					<e>internal</e>
				</m>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</isFeatureEnabled>
		<isNegativeToken public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":ns">
					<e>"flash.system"</e>
					<e>internal</e>
				</m>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</isNegativeToken>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash11_3</e></m></meta>
	</class>
	<class path="flash.system.AuthorizedFeaturesLoader" params="" file="/home/runner/work/haxe/haxe/std/flash/system/AuthorizedFeaturesLoader.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<authorizedFeatures public="1" get="accessor" set="null">
			<c path="flash.system.AuthorizedFeatures"/>
			<meta><m n=":flash.property"/></meta>
		</authorizedFeatures>
		<get_authorizedFeatures set="method"><f a=""><c path="flash.system.AuthorizedFeatures"/></f></get_authorizedFeatures>
		<loadAuthorizedFeatures public="1" set="method"><f a=""><x path="Void"/></f></loadAuthorizedFeatures>
		<loadAuthorizedFeaturesFromData public="1">
			<f a="data">
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_7</e></m></meta>
		</loadAuthorizedFeaturesFromData>
		<makeGlobal public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":ns">
					<e>"flash.system"</e>
					<e>internal</e>
				</m>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</makeGlobal>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash11_3</e></m></meta>
	</class>
	<class path="flash.system.Capabilities" params="" file="/home/runner/work/haxe/haxe/std/flash/system/Capabilities.hx" extern="1">
		<_internal public="1" get="accessor" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</_internal>
		<avHardwareDisable public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</avHardwareDisable>
		<cpuAddressSize public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</cpuAddressSize>
		<cpuArchitecture public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</cpuArchitecture>
		<hasAccessibility public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hasAccessibility>
		<hasAudio public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hasAudio>
		<hasAudioEncoder public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hasAudioEncoder>
		<hasEmbeddedVideo public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hasEmbeddedVideo>
		<hasIME public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hasIME>
		<hasMP3 public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hasMP3>
		<hasPrinting public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hasPrinting>
		<hasScreenBroadcast public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hasScreenBroadcast>
		<hasScreenPlayback public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hasScreenPlayback>
		<hasStreamingAudio public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hasStreamingAudio>
		<hasStreamingVideo public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hasStreamingVideo>
		<hasTLS public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hasTLS>
		<hasVideoEncoder public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hasVideoEncoder>
		<isDebugger public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isDebugger>
		<isEmbeddedInAcrobat public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</isEmbeddedInAcrobat>
		<language public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</language>
		<localFileReadDisable public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</localFileReadDisable>
		<manufacturer public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</manufacturer>
		<maxLevelIDC public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</maxLevelIDC>
		<os public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</os>
		<pixelAspectRatio public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</pixelAspectRatio>
		<playerType public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</playerType>
		<screenColor public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</screenColor>
		<screenDPI public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</screenDPI>
		<screenResolutionX public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</screenResolutionX>
		<screenResolutionY public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</screenResolutionY>
		<serverString public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</serverString>
		<supports32BitProcesses public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</supports32BitProcesses>
		<supports64BitProcesses public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</supports64BitProcesses>
		<touchscreenType public="1" get="accessor" set="null" static="1">
			<x path="flash.system.TouchscreenType"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</touchscreenType>
		<version public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</version>
		<get__internal set="method" static="1"><f a=""><x path="UInt"/></f></get__internal>
		<get_avHardwareDisable set="method" static="1"><f a=""><x path="Bool"/></f></get_avHardwareDisable>
		<get_cpuAddressSize set="method" static="1"><f a=""><x path="Float"/></f></get_cpuAddressSize>
		<get_cpuArchitecture set="method" static="1"><f a=""><c path="String"/></f></get_cpuArchitecture>
		<get_hasAccessibility set="method" static="1"><f a=""><x path="Bool"/></f></get_hasAccessibility>
		<get_hasAudio set="method" static="1"><f a=""><x path="Bool"/></f></get_hasAudio>
		<get_hasAudioEncoder set="method" static="1"><f a=""><x path="Bool"/></f></get_hasAudioEncoder>
		<get_hasEmbeddedVideo set="method" static="1"><f a=""><x path="Bool"/></f></get_hasEmbeddedVideo>
		<get_hasIME set="method" static="1"><f a=""><x path="Bool"/></f></get_hasIME>
		<get_hasMP3 set="method" static="1"><f a=""><x path="Bool"/></f></get_hasMP3>
		<get_hasPrinting set="method" static="1"><f a=""><x path="Bool"/></f></get_hasPrinting>
		<get_hasScreenBroadcast set="method" static="1"><f a=""><x path="Bool"/></f></get_hasScreenBroadcast>
		<get_hasScreenPlayback set="method" static="1"><f a=""><x path="Bool"/></f></get_hasScreenPlayback>
		<get_hasStreamingAudio set="method" static="1"><f a=""><x path="Bool"/></f></get_hasStreamingAudio>
		<get_hasStreamingVideo set="method" static="1"><f a=""><x path="Bool"/></f></get_hasStreamingVideo>
		<get_hasTLS set="method" static="1"><f a=""><x path="Bool"/></f></get_hasTLS>
		<get_hasVideoEncoder set="method" static="1"><f a=""><x path="Bool"/></f></get_hasVideoEncoder>
		<get_isDebugger set="method" static="1"><f a=""><x path="Bool"/></f></get_isDebugger>
		<get_isEmbeddedInAcrobat set="method" static="1"><f a=""><x path="Bool"/></f></get_isEmbeddedInAcrobat>
		<get_language set="method" static="1"><f a=""><c path="String"/></f></get_language>
		<get_localFileReadDisable set="method" static="1"><f a=""><x path="Bool"/></f></get_localFileReadDisable>
		<get_manufacturer set="method" static="1"><f a=""><c path="String"/></f></get_manufacturer>
		<get_maxLevelIDC set="method" static="1"><f a=""><c path="String"/></f></get_maxLevelIDC>
		<get_os set="method" static="1"><f a=""><c path="String"/></f></get_os>
		<get_pixelAspectRatio set="method" static="1"><f a=""><x path="Float"/></f></get_pixelAspectRatio>
		<get_playerType set="method" static="1"><f a=""><c path="String"/></f></get_playerType>
		<get_screenColor set="method" static="1"><f a=""><c path="String"/></f></get_screenColor>
		<get_screenDPI set="method" static="1"><f a=""><x path="Float"/></f></get_screenDPI>
		<get_screenResolutionX set="method" static="1"><f a=""><x path="Float"/></f></get_screenResolutionX>
		<get_screenResolutionY set="method" static="1"><f a=""><x path="Float"/></f></get_screenResolutionY>
		<get_serverString set="method" static="1"><f a=""><c path="String"/></f></get_serverString>
		<get_supports32BitProcesses set="method" static="1"><f a=""><x path="Bool"/></f></get_supports32BitProcesses>
		<get_supports64BitProcesses set="method" static="1"><f a=""><x path="Bool"/></f></get_supports64BitProcesses>
		<get_touchscreenType set="method" static="1"><f a=""><x path="flash.system.TouchscreenType"/></f></get_touchscreenType>
		<get_version set="method" static="1"><f a=""><c path="String"/></f></get_version>
		<hasMultiChannelAudio public="1" set="method" static="1">
			<f a="type">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</hasMultiChannelAudio>
	</class>
	<class path="flash.system.ConnexionsClient" params="" file="/home/runner/work/haxe/haxe/std/flash/system/ConnexionsClient.hx" extern="1" final="1">
		<Connexions public="1" set="method"><f a=""><d/></f></Connexions>
		<_init public="1" set="method"><f a="topLocation:documentReferrer:windowLocation:movie:userAgent:timeout">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></_init>
		<autoAdd public="1" set="method"><f a="port">
	<x path="Int"/>
	<d/>
</f></autoAdd>
		<manualAdd public="1" set="method"><f a="port">
	<x path="Int"/>
	<d/>
</f></manualAdd>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.system.DomainMemoryWithStage3D" params="" file="/home/runner/work/haxe/haxe/std/flash/system/DomainMemoryWithStage3D.hx" extern="1"><new public="1" set="method"><f a=""><x path="Void"/></f></new></class>
	<class path="flash.system.FSCommand" params="" file="/home/runner/work/haxe/haxe/std/flash/system/FSCommand.hx" extern="1"><_fscommand public="1" set="method" static="1"><f a="command:args">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></_fscommand></class>
	<class path="flash.system.IME" params="" file="/home/runner/work/haxe/haxe/std/flash/system/IME.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<conversionMode public="1" get="accessor" set="accessor" static="1">
			<x path="flash.system.IMEConversionMode"/>
			<meta><m n=":flash.property"/></meta>
		</conversionMode>
		<enabled public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</enabled>
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</isSupported>
		<compositionAbandoned public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</compositionAbandoned>
		<compositionSelectionChanged public="1" set="method" static="1">
			<f a="start:end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</compositionSelectionChanged>
		<doConversion public="1" set="method" static="1"><f a=""><x path="Void"/></f></doConversion>
		<get_conversionMode set="method" static="1"><f a=""><x path="flash.system.IMEConversionMode"/></f></get_conversionMode>
		<get_enabled set="method" static="1"><f a=""><x path="Bool"/></f></get_enabled>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<setCompositionString public="1" set="method" static="1"><f a="composition">
	<c path="String"/>
	<x path="Void"/>
</f></setCompositionString>
		<set_conversionMode set="method" static="1"><f a="value">
	<x path="flash.system.IMEConversionMode"/>
	<x path="flash.system.IMEConversionMode"/>
</f></set_conversionMode>
		<set_enabled set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enabled>
	</class>
	<abstract path="flash.system.IMEConversionMode" params="" file="/home/runner/work/haxe/haxe/std/flash/system/IMEConversionMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.system.IMEConversionMode"</e></m>
		</meta>
		<impl><class path="flash.system._IMEConversionMode.IMEConversionMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/IMEConversionMode.hx" private="1" module="flash.system.IMEConversionMode" extern="1" final="1">
	<ALPHANUMERIC_FULL public="1" set="null" static="1">
		<x path="flash.system.IMEConversionMode"/>
		<meta><m n=":enum"/></meta>
	</ALPHANUMERIC_FULL>
	<ALPHANUMERIC_HALF public="1" set="null" static="1">
		<x path="flash.system.IMEConversionMode"/>
		<meta><m n=":enum"/></meta>
	</ALPHANUMERIC_HALF>
	<CHINESE public="1" set="null" static="1">
		<x path="flash.system.IMEConversionMode"/>
		<meta><m n=":enum"/></meta>
	</CHINESE>
	<JAPANESE_HIRAGANA public="1" set="null" static="1">
		<x path="flash.system.IMEConversionMode"/>
		<meta><m n=":enum"/></meta>
	</JAPANESE_HIRAGANA>
	<JAPANESE_KATAKANA_FULL public="1" set="null" static="1">
		<x path="flash.system.IMEConversionMode"/>
		<meta><m n=":enum"/></meta>
	</JAPANESE_KATAKANA_FULL>
	<JAPANESE_KATAKANA_HALF public="1" set="null" static="1">
		<x path="flash.system.IMEConversionMode"/>
		<meta><m n=":enum"/></meta>
	</JAPANESE_KATAKANA_HALF>
	<KOREAN public="1" set="null" static="1">
		<x path="flash.system.IMEConversionMode"/>
		<meta><m n=":enum"/></meta>
	</KOREAN>
	<UNKNOWN public="1" set="null" static="1">
		<x path="flash.system.IMEConversionMode"/>
		<meta><m n=":enum"/></meta>
	</UNKNOWN>
	<meta>
		<m n=":native"><e>"flash.system.IMEConversionMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.system._IMEConversionMode.IMEConversionMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/IMEConversionMode.hx" private="1" module="flash.system.IMEConversionMode" extern="1" final="1">
		<ALPHANUMERIC_FULL public="1" set="null" static="1">
			<x path="flash.system.IMEConversionMode"/>
			<meta><m n=":enum"/></meta>
		</ALPHANUMERIC_FULL>
		<ALPHANUMERIC_HALF public="1" set="null" static="1">
			<x path="flash.system.IMEConversionMode"/>
			<meta><m n=":enum"/></meta>
		</ALPHANUMERIC_HALF>
		<CHINESE public="1" set="null" static="1">
			<x path="flash.system.IMEConversionMode"/>
			<meta><m n=":enum"/></meta>
		</CHINESE>
		<JAPANESE_HIRAGANA public="1" set="null" static="1">
			<x path="flash.system.IMEConversionMode"/>
			<meta><m n=":enum"/></meta>
		</JAPANESE_HIRAGANA>
		<JAPANESE_KATAKANA_FULL public="1" set="null" static="1">
			<x path="flash.system.IMEConversionMode"/>
			<meta><m n=":enum"/></meta>
		</JAPANESE_KATAKANA_FULL>
		<JAPANESE_KATAKANA_HALF public="1" set="null" static="1">
			<x path="flash.system.IMEConversionMode"/>
			<meta><m n=":enum"/></meta>
		</JAPANESE_KATAKANA_HALF>
		<KOREAN public="1" set="null" static="1">
			<x path="flash.system.IMEConversionMode"/>
			<meta><m n=":enum"/></meta>
		</KOREAN>
		<UNKNOWN public="1" set="null" static="1">
			<x path="flash.system.IMEConversionMode"/>
			<meta><m n=":enum"/></meta>
		</UNKNOWN>
		<meta>
			<m n=":native"><e>"flash.system.IMEConversionMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.system.ImageDecodingPolicy" params="" file="/home/runner/work/haxe/haxe/std/flash/system/ImageDecodingPolicy.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.system.ImageDecodingPolicy"</e></m>
		</meta>
		<impl><class path="flash.system._ImageDecodingPolicy.ImageDecodingPolicy_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/ImageDecodingPolicy.hx" private="1" module="flash.system.ImageDecodingPolicy" extern="1" final="1">
	<ON_DEMAND public="1" set="null" static="1">
		<x path="flash.system.ImageDecodingPolicy"/>
		<meta><m n=":enum"/></meta>
	</ON_DEMAND>
	<ON_LOAD public="1" set="null" static="1">
		<x path="flash.system.ImageDecodingPolicy"/>
		<meta><m n=":enum"/></meta>
	</ON_LOAD>
	<meta>
		<m n=":native"><e>"flash.system.ImageDecodingPolicy"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.system._ImageDecodingPolicy.ImageDecodingPolicy_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/ImageDecodingPolicy.hx" private="1" module="flash.system.ImageDecodingPolicy" extern="1" final="1">
		<ON_DEMAND public="1" set="null" static="1">
			<x path="flash.system.ImageDecodingPolicy"/>
			<meta><m n=":enum"/></meta>
		</ON_DEMAND>
		<ON_LOAD public="1" set="null" static="1">
			<x path="flash.system.ImageDecodingPolicy"/>
			<meta><m n=":enum"/></meta>
		</ON_LOAD>
		<meta>
			<m n=":native"><e>"flash.system.ImageDecodingPolicy"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.system.LoaderContext" params="" file="/home/runner/work/haxe/haxe/std/flash/system/LoaderContext.hx" extern="1">
		<allowCodeImport public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowCodeImport>
		<allowLoadBytesCodeExecution public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</allowLoadBytesCodeExecution>
		<applicationDomain public="1"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<imageDecodingPolicy public="1">
			<x path="flash.system.ImageDecodingPolicy"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</imageDecodingPolicy>
		<parameters public="1">
			<d/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</parameters>
		<requestedContentParent public="1">
			<c path="flash.display.DisplayObjectContainer"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestedContentParent>
		<securityDomain public="1"><c path="flash.system.SecurityDomain"/></securityDomain>
		<get_allowLoadBytesCodeExecution set="method"><f a=""><x path="Bool"/></f></get_allowLoadBytesCodeExecution>
		<set_allowLoadBytesCodeExecution set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_allowLoadBytesCodeExecution>
		<new public="1" set="method">
			<f a="?checkPolicyFile:?applicationDomain:?securityDomain" v="false::">
				<x path="Bool"/>
				<c path="flash.system.ApplicationDomain"/>
				<c path="flash.system.SecurityDomain"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ checkPolicyFile : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.system.JPEGLoaderContext" params="" file="/home/runner/work/haxe/haxe/std/flash/system/JPEGLoaderContext.hx" extern="1">
		<extends path="flash.system.LoaderContext"/>
		<deblockingFilter public="1"><x path="Float"/></deblockingFilter>
		<new public="1" set="method">
			<f a="?deblockingFilter:?checkPolicyFile:?applicationDomain:?securityDomain" v="0:false::">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.system.ApplicationDomain"/>
				<c path="flash.system.SecurityDomain"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ checkPolicyFile : false, deblockingFilter : 0 }</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.system.MessageChannel" params="" file="/home/runner/work/haxe/haxe/std/flash/system/MessageChannel.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<messageAvailable public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</messageAvailable>
		<state public="1" get="accessor" set="null">
			<x path="flash.system.MessageChannelState"/>
			<meta><m n=":flash.property"/></meta>
		</state>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<get_messageAvailable set="method"><f a=""><x path="Bool"/></f></get_messageAvailable>
		<get_state set="method"><f a=""><x path="flash.system.MessageChannelState"/></f></get_state>
		<receive public="1" set="method">
			<f a="?blockUntilReceived" v="false">
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ blockUntilReceived : false }</e></m></meta>
		</receive>
		<send public="1" set="method">
			<f a="arg:?queueLimit" v=":-1">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ queueLimit : -1 }</e></m></meta>
		</send>
		<meta><m n=":require"><e>flash11_4</e></m></meta>
	</class>
	<abstract path="flash.system.MessageChannelState" params="" file="/home/runner/work/haxe/haxe/std/flash/system/MessageChannelState.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.system.MessageChannelState"</e></m>
		</meta>
		<impl><class path="flash.system._MessageChannelState.MessageChannelState_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/MessageChannelState.hx" private="1" module="flash.system.MessageChannelState" extern="1" final="1">
	<CLOSED public="1" set="null" static="1">
		<x path="flash.system.MessageChannelState"/>
		<meta><m n=":enum"/></meta>
	</CLOSED>
	<CLOSING public="1" set="null" static="1">
		<x path="flash.system.MessageChannelState"/>
		<meta><m n=":enum"/></meta>
	</CLOSING>
	<OPEN public="1" set="null" static="1">
		<x path="flash.system.MessageChannelState"/>
		<meta><m n=":enum"/></meta>
	</OPEN>
	<meta>
		<m n=":native"><e>"flash.system.MessageChannelState"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.system._MessageChannelState.MessageChannelState_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/MessageChannelState.hx" private="1" module="flash.system.MessageChannelState" extern="1" final="1">
		<CLOSED public="1" set="null" static="1">
			<x path="flash.system.MessageChannelState"/>
			<meta><m n=":enum"/></meta>
		</CLOSED>
		<CLOSING public="1" set="null" static="1">
			<x path="flash.system.MessageChannelState"/>
			<meta><m n=":enum"/></meta>
		</CLOSING>
		<OPEN public="1" set="null" static="1">
			<x path="flash.system.MessageChannelState"/>
			<meta><m n=":enum"/></meta>
		</OPEN>
		<meta>
			<m n=":native"><e>"flash.system.MessageChannelState"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.system.Security" params="" file="/home/runner/work/haxe/haxe/std/flash/system/Security.hx" extern="1">
		<APPLICATION final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</APPLICATION>
		<LOCAL_TRUSTED final="1" public="1" set="null" static="1"><c path="String"/></LOCAL_TRUSTED>
		<LOCAL_WITH_FILE final="1" public="1" set="null" static="1"><c path="String"/></LOCAL_WITH_FILE>
		<LOCAL_WITH_NETWORK final="1" public="1" set="null" static="1"><c path="String"/></LOCAL_WITH_NETWORK>
		<REMOTE final="1" public="1" set="null" static="1"><c path="String"/></REMOTE>
		<disableAVM1Loading public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</disableAVM1Loading>
		<exactSettings public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</exactSettings>
		<pageDomain public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</pageDomain>
		<sandboxType public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</sandboxType>
		<allowDomain public="1" set="method" static="1"><f a="restArgs">
	<t path="haxe.extern.Rest"><d/></t>
	<x path="Void"/>
</f></allowDomain>
		<allowInsecureDomain public="1" set="method" static="1"><f a="restArgs">
	<t path="haxe.extern.Rest"><d/></t>
	<x path="Void"/>
</f></allowInsecureDomain>
		<duplicateSandboxBridgeInputArguments public="1" set="method" static="1">
			<f a="toplevel:args">
				<d/>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
			</f>
			<meta>
				<m n=":ns">
					<e>"flash.system"</e>
					<e>internal</e>
				</m>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</duplicateSandboxBridgeInputArguments>
		<duplicateSandboxBridgeOutputArgument public="1" set="method" static="1">
			<f a="toplevel:arg">
				<d/>
				<d/>
				<d/>
			</f>
			<meta>
				<m n=":ns">
					<e>"flash.system"</e>
					<e>internal</e>
				</m>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</duplicateSandboxBridgeOutputArgument>
		<get_disableAVM1Loading set="method" static="1"><f a=""><x path="Bool"/></f></get_disableAVM1Loading>
		<get_exactSettings set="method" static="1"><f a=""><x path="Bool"/></f></get_exactSettings>
		<get_pageDomain set="method" static="1"><f a=""><c path="String"/></f></get_pageDomain>
		<get_sandboxType set="method" static="1"><f a=""><c path="String"/></f></get_sandboxType>
		<loadPolicyFile public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></loadPolicyFile>
		<set_disableAVM1Loading set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_disableAVM1Loading>
		<set_exactSettings set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_exactSettings>
		<showSettings public="1" set="method" static="1"><f a="?panel">
	<x path="flash.system.SecurityPanel"/>
	<x path="Void"/>
</f></showSettings>
	</class>
	<class path="flash.system.SecurityDomain" params="" file="/home/runner/work/haxe/haxe/std/flash/system/SecurityDomain.hx" extern="1">
		<currentDomain public="1" get="accessor" set="null" static="1">
			<c path="flash.system.SecurityDomain"/>
			<meta><m n=":flash.property"/></meta>
		</currentDomain>
		<get_currentDomain set="method" static="1"><f a=""><c path="flash.system.SecurityDomain"/></f></get_currentDomain>
		<domainID public="1" get="accessor" set="null">
			<c path="String"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_3</e></m>
			</meta>
		</domainID>
		<get_domainID set="method"><f a=""><c path="String"/></f></get_domainID>
	</class>
	<abstract path="flash.system.SecurityPanel" params="" file="/home/runner/work/haxe/haxe/std/flash/system/SecurityPanel.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.system.SecurityPanel"</e></m>
		</meta>
		<impl><class path="flash.system._SecurityPanel.SecurityPanel_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/SecurityPanel.hx" private="1" module="flash.system.SecurityPanel" extern="1" final="1">
	<CAMERA public="1" set="null" static="1">
		<x path="flash.system.SecurityPanel"/>
		<meta><m n=":enum"/></meta>
	</CAMERA>
	<DEFAULT public="1" set="null" static="1">
		<x path="flash.system.SecurityPanel"/>
		<meta><m n=":enum"/></meta>
	</DEFAULT>
	<DISPLAY public="1" set="null" static="1">
		<x path="flash.system.SecurityPanel"/>
		<meta><m n=":enum"/></meta>
	</DISPLAY>
	<LOCAL_STORAGE public="1" set="null" static="1">
		<x path="flash.system.SecurityPanel"/>
		<meta><m n=":enum"/></meta>
	</LOCAL_STORAGE>
	<MICROPHONE public="1" set="null" static="1">
		<x path="flash.system.SecurityPanel"/>
		<meta><m n=":enum"/></meta>
	</MICROPHONE>
	<PRIVACY public="1" set="null" static="1">
		<x path="flash.system.SecurityPanel"/>
		<meta><m n=":enum"/></meta>
	</PRIVACY>
	<SETTINGS_MANAGER public="1" set="null" static="1">
		<x path="flash.system.SecurityPanel"/>
		<meta><m n=":enum"/></meta>
	</SETTINGS_MANAGER>
	<meta>
		<m n=":native"><e>"flash.system.SecurityPanel"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.system._SecurityPanel.SecurityPanel_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/SecurityPanel.hx" private="1" module="flash.system.SecurityPanel" extern="1" final="1">
		<CAMERA public="1" set="null" static="1">
			<x path="flash.system.SecurityPanel"/>
			<meta><m n=":enum"/></meta>
		</CAMERA>
		<DEFAULT public="1" set="null" static="1">
			<x path="flash.system.SecurityPanel"/>
			<meta><m n=":enum"/></meta>
		</DEFAULT>
		<DISPLAY public="1" set="null" static="1">
			<x path="flash.system.SecurityPanel"/>
			<meta><m n=":enum"/></meta>
		</DISPLAY>
		<LOCAL_STORAGE public="1" set="null" static="1">
			<x path="flash.system.SecurityPanel"/>
			<meta><m n=":enum"/></meta>
		</LOCAL_STORAGE>
		<MICROPHONE public="1" set="null" static="1">
			<x path="flash.system.SecurityPanel"/>
			<meta><m n=":enum"/></meta>
		</MICROPHONE>
		<PRIVACY public="1" set="null" static="1">
			<x path="flash.system.SecurityPanel"/>
			<meta><m n=":enum"/></meta>
		</PRIVACY>
		<SETTINGS_MANAGER public="1" set="null" static="1">
			<x path="flash.system.SecurityPanel"/>
			<meta><m n=":enum"/></meta>
		</SETTINGS_MANAGER>
		<meta>
			<m n=":native"><e>"flash.system.SecurityPanel"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.system.System" params="" file="/home/runner/work/haxe/haxe/std/flash/system/System.hx" extern="1">
		<freeMemory public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</freeMemory>
		<ime public="1" get="accessor" set="null" static="1">
			<c path="flash.system.IME"/>
			<meta><m n=":flash.property"/></meta>
		</ime>
		<privateMemory public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</privateMemory>
		<processCPUUsage public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</processCPUUsage>
		<totalMemory public="1" get="accessor" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</totalMemory>
		<totalMemoryNumber public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</totalMemoryNumber>
		<useCodePage public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</useCodePage>
		<vmVersion public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</vmVersion>
		<disposeXML public="1" set="method" static="1">
			<f a="node">
				<c path="flash.xml.XML"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</disposeXML>
		<exit public="1" set="method" static="1"><f a="code">
	<x path="UInt"/>
	<x path="Void"/>
</f></exit>
		<gc public="1" set="method" static="1"><f a=""><x path="Void"/></f></gc>
		<get_freeMemory set="method" static="1"><f a=""><x path="Float"/></f></get_freeMemory>
		<get_ime set="method" static="1"><f a=""><c path="flash.system.IME"/></f></get_ime>
		<get_privateMemory set="method" static="1"><f a=""><x path="Float"/></f></get_privateMemory>
		<get_processCPUUsage set="method" static="1"><f a=""><x path="Float"/></f></get_processCPUUsage>
		<get_totalMemory set="method" static="1"><f a=""><x path="UInt"/></f></get_totalMemory>
		<get_totalMemoryNumber set="method" static="1"><f a=""><x path="Float"/></f></get_totalMemoryNumber>
		<get_useCodePage set="method" static="1"><f a=""><x path="Bool"/></f></get_useCodePage>
		<get_vmVersion set="method" static="1"><f a=""><c path="String"/></f></get_vmVersion>
		<pause public="1" set="method" static="1"><f a=""><x path="Void"/></f></pause>
		<pauseForGCIfCollectionImminent public="1" set="method" static="1">
			<f a="?imminence" v="0.75">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ imminence : 0.75 }</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</pauseForGCIfCollectionImminent>
		<resume public="1" set="method" static="1"><f a=""><x path="Void"/></f></resume>
		<setClipboard public="1" set="method" static="1"><f a="string">
	<c path="String"/>
	<x path="Void"/>
</f></setClipboard>
		<set_useCodePage set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useCodePage>
	</class>
	<class path="flash.system.SystemUpdater" params="" file="/home/runner/work/haxe/haxe/std/flash/system/SystemUpdater.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<cancel public="1" set="method"><f a=""><x path="Void"/></f></cancel>
		<update public="1" set="method"><f a="type">
	<x path="flash.system.SystemUpdaterType"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<abstract path="flash.system.SystemUpdaterType" params="" file="/home/runner/work/haxe/haxe/std/flash/system/SystemUpdaterType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.system.SystemUpdaterType"</e></m>
		</meta>
		<impl><class path="flash.system._SystemUpdaterType.SystemUpdaterType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/SystemUpdaterType.hx" private="1" module="flash.system.SystemUpdaterType" extern="1" final="1">
	<DRM public="1" set="null" static="1">
		<x path="flash.system.SystemUpdaterType"/>
		<meta><m n=":enum"/></meta>
	</DRM>
	<SYSTEM public="1" set="null" static="1">
		<x path="flash.system.SystemUpdaterType"/>
		<meta><m n=":enum"/></meta>
	</SYSTEM>
	<meta>
		<m n=":native"><e>"flash.system.SystemUpdaterType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.system._SystemUpdaterType.SystemUpdaterType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/SystemUpdaterType.hx" private="1" module="flash.system.SystemUpdaterType" extern="1" final="1">
		<DRM public="1" set="null" static="1">
			<x path="flash.system.SystemUpdaterType"/>
			<meta><m n=":enum"/></meta>
		</DRM>
		<SYSTEM public="1" set="null" static="1">
			<x path="flash.system.SystemUpdaterType"/>
			<meta><m n=":enum"/></meta>
		</SYSTEM>
		<meta>
			<m n=":native"><e>"flash.system.SystemUpdaterType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.system.TouchscreenType" params="" file="/home/runner/work/haxe/haxe/std/flash/system/TouchscreenType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.system.TouchscreenType"</e></m>
		</meta>
		<impl><class path="flash.system._TouchscreenType.TouchscreenType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/TouchscreenType.hx" private="1" module="flash.system.TouchscreenType" extern="1" final="1">
	<FINGER public="1" set="null" static="1">
		<x path="flash.system.TouchscreenType"/>
		<meta><m n=":enum"/></meta>
	</FINGER>
	<NONE public="1" set="null" static="1">
		<x path="flash.system.TouchscreenType"/>
		<meta><m n=":enum"/></meta>
	</NONE>
	<STYLUS public="1" set="null" static="1">
		<x path="flash.system.TouchscreenType"/>
		<meta><m n=":enum"/></meta>
	</STYLUS>
	<meta>
		<m n=":native"><e>"flash.system.TouchscreenType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.system._TouchscreenType.TouchscreenType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/TouchscreenType.hx" private="1" module="flash.system.TouchscreenType" extern="1" final="1">
		<FINGER public="1" set="null" static="1">
			<x path="flash.system.TouchscreenType"/>
			<meta><m n=":enum"/></meta>
		</FINGER>
		<NONE public="1" set="null" static="1">
			<x path="flash.system.TouchscreenType"/>
			<meta><m n=":enum"/></meta>
		</NONE>
		<STYLUS public="1" set="null" static="1">
			<x path="flash.system.TouchscreenType"/>
			<meta><m n=":enum"/></meta>
		</STYLUS>
		<meta>
			<m n=":native"><e>"flash.system.TouchscreenType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.system.Worker" params="" file="/home/runner/work/haxe/haxe/std/flash/system/Worker.hx" extern="1" final="1">
		<extends path="flash.events.EventDispatcher"/>
		<current public="1" get="accessor" set="null" static="1">
			<c path="flash.system.Worker"/>
			<meta><m n=":flash.property"/></meta>
		</current>
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isSupported>
		<get_current set="method" static="1"><f a=""><c path="flash.system.Worker"/></f></get_current>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<isPrimordial public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isPrimordial>
		<state public="1" get="accessor" set="null">
			<x path="flash.system.WorkerState"/>
			<meta><m n=":flash.property"/></meta>
		</state>
		<createMessageChannel public="1" set="method"><f a="receiver">
	<c path="flash.system.Worker"/>
	<c path="flash.system.MessageChannel"/>
</f></createMessageChannel>
		<getSharedProperty public="1" set="method"><f a="key">
	<c path="String"/>
	<d/>
</f></getSharedProperty>
		<get_isPrimordial set="method"><f a=""><x path="Bool"/></f></get_isPrimordial>
		<get_state set="method"><f a=""><x path="flash.system.WorkerState"/></f></get_state>
		<setSharedProperty public="1" set="method"><f a="key:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></setSharedProperty>
		<start public="1" set="method"><f a=""><x path="Void"/></f></start>
		<terminate public="1" set="method"><f a=""><x path="Bool"/></f></terminate>
		<meta><m n=":require"><e>flash11_4</e></m></meta>
	</class>
	<class path="flash.system.WorkerDomain" params="" file="/home/runner/work/haxe/haxe/std/flash/system/WorkerDomain.hx" extern="1" final="1">
		<current public="1" get="accessor" set="null" static="1">
			<c path="flash.system.WorkerDomain"/>
			<meta><m n=":flash.property"/></meta>
		</current>
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isSupported>
		<get_current set="method" static="1"><f a=""><c path="flash.system.WorkerDomain"/></f></get_current>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<createWorker public="1" set="method">
			<f a="swf:?giveAppPrivileges" v=":false">
				<c path="flash.utils.ByteArray"/>
				<x path="Bool"/>
				<c path="flash.system.Worker"/>
			</f>
			<meta><m n=":value"><e>{ giveAppPrivileges : false }</e></m></meta>
		</createWorker>
		<listWorkers public="1" set="method"><f a=""><c path="flash.Vector"><c path="flash.system.Worker"/></c></f></listWorkers>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash11_4</e></m></meta>
	</class>
	<abstract path="flash.system.WorkerState" params="" file="/home/runner/work/haxe/haxe/std/flash/system/WorkerState.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.system.WorkerState"</e></m>
		</meta>
		<impl><class path="flash.system._WorkerState.WorkerState_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/WorkerState.hx" private="1" module="flash.system.WorkerState" extern="1" final="1">
	<NEW public="1" set="null" static="1">
		<x path="flash.system.WorkerState"/>
		<meta><m n=":enum"/></meta>
	</NEW>
	<RUNNING public="1" set="null" static="1">
		<x path="flash.system.WorkerState"/>
		<meta><m n=":enum"/></meta>
	</RUNNING>
	<TERMINATED public="1" set="null" static="1">
		<x path="flash.system.WorkerState"/>
		<meta><m n=":enum"/></meta>
	</TERMINATED>
	<meta>
		<m n=":native"><e>"flash.system.WorkerState"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.system._WorkerState.WorkerState_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/system/WorkerState.hx" private="1" module="flash.system.WorkerState" extern="1" final="1">
		<NEW public="1" set="null" static="1">
			<x path="flash.system.WorkerState"/>
			<meta><m n=":enum"/></meta>
		</NEW>
		<RUNNING public="1" set="null" static="1">
			<x path="flash.system.WorkerState"/>
			<meta><m n=":enum"/></meta>
		</RUNNING>
		<TERMINATED public="1" set="null" static="1">
			<x path="flash.system.WorkerState"/>
			<meta><m n=":enum"/></meta>
		</TERMINATED>
		<meta>
			<m n=":native"><e>"flash.system.WorkerState"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.AntiAliasType" params="" file="/home/runner/work/haxe/haxe/std/flash/text/AntiAliasType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.AntiAliasType"</e></m>
		</meta>
		<impl><class path="flash.text._AntiAliasType.AntiAliasType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/AntiAliasType.hx" private="1" module="flash.text.AntiAliasType" extern="1" final="1">
	<ADVANCED public="1" set="null" static="1">
		<x path="flash.text.AntiAliasType"/>
		<meta><m n=":enum"/></meta>
	</ADVANCED>
	<NORMAL public="1" set="null" static="1">
		<x path="flash.text.AntiAliasType"/>
		<meta><m n=":enum"/></meta>
	</NORMAL>
	<meta>
		<m n=":native"><e>"flash.text.AntiAliasType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text._AntiAliasType.AntiAliasType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/AntiAliasType.hx" private="1" module="flash.text.AntiAliasType" extern="1" final="1">
		<ADVANCED public="1" set="null" static="1">
			<x path="flash.text.AntiAliasType"/>
			<meta><m n=":enum"/></meta>
		</ADVANCED>
		<NORMAL public="1" set="null" static="1">
			<x path="flash.text.AntiAliasType"/>
			<meta><m n=":enum"/></meta>
		</NORMAL>
		<meta>
			<m n=":native"><e>"flash.text.AntiAliasType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.text.CSMSettings" params="" file="/home/runner/work/haxe/haxe/std/flash/text/CSMSettings.hx" extern="1" final="1">
		<fontSize public="1"><x path="Float"/></fontSize>
		<insideCutoff public="1"><x path="Float"/></insideCutoff>
		<outsideCutoff public="1"><x path="Float"/></outsideCutoff>
		<new public="1" set="method"><f a="fontSize:insideCutoff:outsideCutoff">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.Font" params="" file="/home/runner/work/haxe/haxe/std/flash/text/Font.hx" extern="1">
		<enumerateFonts public="1" set="method" static="1">
			<f a="?enumerateDeviceFonts" v="false">
				<x path="Bool"/>
				<c path="Array"><c path="flash.text.Font"/></c>
			</f>
			<meta><m n=":value"><e>{ enumerateDeviceFonts : false }</e></m></meta>
		</enumerateFonts>
		<registerFont public="1" set="method" static="1"><f a="font">
	<x path="Class"><d/></x>
	<x path="Void"/>
</f></registerFont>
		<fontName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</fontName>
		<fontStyle public="1" get="accessor" set="null">
			<x path="flash.text.FontStyle"/>
			<meta><m n=":flash.property"/></meta>
		</fontStyle>
		<fontType public="1" get="accessor" set="null">
			<x path="flash.text.FontType"/>
			<meta><m n=":flash.property"/></meta>
		</fontType>
		<get_fontName set="method"><f a=""><c path="String"/></f></get_fontName>
		<get_fontStyle set="method"><f a=""><x path="flash.text.FontStyle"/></f></get_fontStyle>
		<get_fontType set="method"><f a=""><x path="flash.text.FontType"/></f></get_fontType>
		<hasGlyphs public="1" set="method"><f a="str">
	<c path="String"/>
	<x path="Bool"/>
</f></hasGlyphs>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.text.FontStyle" params="" file="/home/runner/work/haxe/haxe/std/flash/text/FontStyle.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.FontStyle"</e></m>
		</meta>
		<impl><class path="flash.text._FontStyle.FontStyle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/FontStyle.hx" private="1" module="flash.text.FontStyle" extern="1" final="1">
	<BOLD public="1" set="null" static="1">
		<x path="flash.text.FontStyle"/>
		<meta><m n=":enum"/></meta>
	</BOLD>
	<BOLD_ITALIC public="1" set="null" static="1">
		<x path="flash.text.FontStyle"/>
		<meta><m n=":enum"/></meta>
	</BOLD_ITALIC>
	<ITALIC public="1" set="null" static="1">
		<x path="flash.text.FontStyle"/>
		<meta><m n=":enum"/></meta>
	</ITALIC>
	<REGULAR public="1" set="null" static="1">
		<x path="flash.text.FontStyle"/>
		<meta><m n=":enum"/></meta>
	</REGULAR>
	<meta>
		<m n=":native"><e>"flash.text.FontStyle"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text._FontStyle.FontStyle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/FontStyle.hx" private="1" module="flash.text.FontStyle" extern="1" final="1">
		<BOLD public="1" set="null" static="1">
			<x path="flash.text.FontStyle"/>
			<meta><m n=":enum"/></meta>
		</BOLD>
		<BOLD_ITALIC public="1" set="null" static="1">
			<x path="flash.text.FontStyle"/>
			<meta><m n=":enum"/></meta>
		</BOLD_ITALIC>
		<ITALIC public="1" set="null" static="1">
			<x path="flash.text.FontStyle"/>
			<meta><m n=":enum"/></meta>
		</ITALIC>
		<REGULAR public="1" set="null" static="1">
			<x path="flash.text.FontStyle"/>
			<meta><m n=":enum"/></meta>
		</REGULAR>
		<meta>
			<m n=":native"><e>"flash.text.FontStyle"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.FontType" params="" file="/home/runner/work/haxe/haxe/std/flash/text/FontType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.FontType"</e></m>
		</meta>
		<impl><class path="flash.text._FontType.FontType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/FontType.hx" private="1" module="flash.text.FontType" extern="1" final="1">
	<DEVICE public="1" set="null" static="1">
		<x path="flash.text.FontType"/>
		<meta><m n=":enum"/></meta>
	</DEVICE>
	<EMBEDDED public="1" set="null" static="1">
		<x path="flash.text.FontType"/>
		<meta><m n=":enum"/></meta>
	</EMBEDDED>
	<EMBEDDED_CFF public="1" set="null" static="1">
		<x path="flash.text.FontType"/>
		<meta><m n=":enum"/></meta>
	</EMBEDDED_CFF>
	<meta>
		<m n=":native"><e>"flash.text.FontType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text._FontType.FontType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/FontType.hx" private="1" module="flash.text.FontType" extern="1" final="1">
		<DEVICE public="1" set="null" static="1">
			<x path="flash.text.FontType"/>
			<meta><m n=":enum"/></meta>
		</DEVICE>
		<EMBEDDED public="1" set="null" static="1">
			<x path="flash.text.FontType"/>
			<meta><m n=":enum"/></meta>
		</EMBEDDED>
		<EMBEDDED_CFF public="1" set="null" static="1">
			<x path="flash.text.FontType"/>
			<meta><m n=":enum"/></meta>
		</EMBEDDED_CFF>
		<meta>
			<m n=":native"><e>"flash.text.FontType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.GridFitType" params="" file="/home/runner/work/haxe/haxe/std/flash/text/GridFitType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.GridFitType"</e></m>
		</meta>
		<impl><class path="flash.text._GridFitType.GridFitType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/GridFitType.hx" private="1" module="flash.text.GridFitType" extern="1" final="1">
	<NONE public="1" set="null" static="1">
		<x path="flash.text.GridFitType"/>
		<meta><m n=":enum"/></meta>
	</NONE>
	<PIXEL public="1" set="null" static="1">
		<x path="flash.text.GridFitType"/>
		<meta><m n=":enum"/></meta>
	</PIXEL>
	<SUBPIXEL public="1" set="null" static="1">
		<x path="flash.text.GridFitType"/>
		<meta><m n=":enum"/></meta>
	</SUBPIXEL>
	<meta>
		<m n=":native"><e>"flash.text.GridFitType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text._GridFitType.GridFitType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/GridFitType.hx" private="1" module="flash.text.GridFitType" extern="1" final="1">
		<NONE public="1" set="null" static="1">
			<x path="flash.text.GridFitType"/>
			<meta><m n=":enum"/></meta>
		</NONE>
		<PIXEL public="1" set="null" static="1">
			<x path="flash.text.GridFitType"/>
			<meta><m n=":enum"/></meta>
		</PIXEL>
		<SUBPIXEL public="1" set="null" static="1">
			<x path="flash.text.GridFitType"/>
			<meta><m n=":enum"/></meta>
		</SUBPIXEL>
		<meta>
			<m n=":native"><e>"flash.text.GridFitType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.text.StaticText" params="" file="/home/runner/work/haxe/haxe/std/flash/text/StaticText.hx" extern="1" final="1">
		<extends path="flash.display.DisplayObject"/>
		<text public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</text>
		<get_text set="method"><f a=""><c path="String"/></f></get_text>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.text.StyleSheet" params="" file="/home/runner/work/haxe/haxe/std/flash/text/StyleSheet.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<styleNames public="1" get="accessor" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</styleNames>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<getStyle public="1" set="method"><f a="styleName">
	<c path="String"/>
	<x path="flash.utils.Object"/>
</f></getStyle>
		<get_styleNames set="method"><f a=""><c path="Array"><d/></c></f></get_styleNames>
		<parseCSS public="1" set="method"><f a="CSSText">
	<c path="String"/>
	<x path="Void"/>
</f></parseCSS>
		<setStyle public="1" set="method"><f a="styleName:styleObject">
	<c path="String"/>
	<x path="flash.utils.Object"/>
	<x path="Void"/>
</f></setStyle>
		<transform public="1" set="method"><f a="formatObject">
	<x path="flash.utils.Object"/>
	<c path="flash.text.TextFormat"/>
</f></transform>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.text.TextColorType" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextColorType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.TextColorType"</e></m>
		</meta>
		<impl><class path="flash.text._TextColorType.TextColorType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextColorType.hx" private="1" module="flash.text.TextColorType" extern="1" final="1">
	<DARK_COLOR public="1" set="null" static="1">
		<x path="flash.text.TextColorType"/>
		<meta><m n=":enum"/></meta>
	</DARK_COLOR>
	<LIGHT_COLOR public="1" set="null" static="1">
		<x path="flash.text.TextColorType"/>
		<meta><m n=":enum"/></meta>
	</LIGHT_COLOR>
	<meta>
		<m n=":native"><e>"flash.text.TextColorType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text._TextColorType.TextColorType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextColorType.hx" private="1" module="flash.text.TextColorType" extern="1" final="1">
		<DARK_COLOR public="1" set="null" static="1">
			<x path="flash.text.TextColorType"/>
			<meta><m n=":enum"/></meta>
		</DARK_COLOR>
		<LIGHT_COLOR public="1" set="null" static="1">
			<x path="flash.text.TextColorType"/>
			<meta><m n=":enum"/></meta>
		</LIGHT_COLOR>
		<meta>
			<m n=":native"><e>"flash.text.TextColorType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.TextDisplayMode" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextDisplayMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.TextDisplayMode"</e></m>
		</meta>
		<impl><class path="flash.text._TextDisplayMode.TextDisplayMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextDisplayMode.hx" private="1" module="flash.text.TextDisplayMode" extern="1" final="1">
	<CRT public="1" set="null" static="1">
		<x path="flash.text.TextDisplayMode"/>
		<meta><m n=":enum"/></meta>
	</CRT>
	<DEFAULT public="1" set="null" static="1">
		<x path="flash.text.TextDisplayMode"/>
		<meta><m n=":enum"/></meta>
	</DEFAULT>
	<LCD public="1" set="null" static="1">
		<x path="flash.text.TextDisplayMode"/>
		<meta><m n=":enum"/></meta>
	</LCD>
	<meta>
		<m n=":native"><e>"flash.text.TextDisplayMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text._TextDisplayMode.TextDisplayMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextDisplayMode.hx" private="1" module="flash.text.TextDisplayMode" extern="1" final="1">
		<CRT public="1" set="null" static="1">
			<x path="flash.text.TextDisplayMode"/>
			<meta><m n=":enum"/></meta>
		</CRT>
		<DEFAULT public="1" set="null" static="1">
			<x path="flash.text.TextDisplayMode"/>
			<meta><m n=":enum"/></meta>
		</DEFAULT>
		<LCD public="1" set="null" static="1">
			<x path="flash.text.TextDisplayMode"/>
			<meta><m n=":enum"/></meta>
		</LCD>
		<meta>
			<m n=":native"><e>"flash.text.TextDisplayMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.text.TextExtent" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextExtent.hx" extern="1">
		<ascent public="1"><x path="Float"/></ascent>
		<descent public="1"><x path="Float"/></descent>
		<height public="1"><x path="Float"/></height>
		<textFieldHeight public="1"><x path="Float"/></textFieldHeight>
		<textFieldWidth public="1"><x path="Float"/></textFieldWidth>
		<width public="1"><x path="Float"/></width>
		<new public="1" set="method"><f a="width:height:textFieldWidth:textFieldHeight:ascent:descent">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextField" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextField.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<isFontCompatible public="1" set="method" static="1">
			<f a="fontName:fontStyle">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isFontCompatible>
		<alwaysShowSelection public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</alwaysShowSelection>
		<antiAliasType public="1" get="accessor" set="accessor">
			<x path="flash.text.AntiAliasType"/>
			<meta><m n=":flash.property"/></meta>
		</antiAliasType>
		<autoSize public="1" get="accessor" set="accessor">
			<x path="flash.text.TextFieldAutoSize"/>
			<meta><m n=":flash.property"/></meta>
		</autoSize>
		<background public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</background>
		<backgroundColor public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</backgroundColor>
		<border public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</border>
		<borderColor public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</borderColor>
		<bottomScrollV public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</bottomScrollV>
		<caretIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</caretIndex>
		<condenseWhite public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</condenseWhite>
		<defaultTextFormat public="1" get="accessor" set="accessor">
			<c path="flash.text.TextFormat"/>
			<meta><m n=":flash.property"/></meta>
		</defaultTextFormat>
		<displayAsPassword public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</displayAsPassword>
		<embedFonts public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</embedFonts>
		<gridFitType public="1" get="accessor" set="accessor">
			<x path="flash.text.GridFitType"/>
			<meta><m n=":flash.property"/></meta>
		</gridFitType>
		<htmlText public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</htmlText>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</length>
		<maxChars public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</maxChars>
		<maxScrollH public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</maxScrollH>
		<maxScrollV public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</maxScrollV>
		<mouseWheelEnabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</mouseWheelEnabled>
		<multiline public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</multiline>
		<numLines public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</numLines>
		<restrict public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</restrict>
		<scrollH public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</scrollH>
		<scrollV public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</scrollV>
		<selectable public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</selectable>
		<selectedText public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</selectedText>
		<selectionBeginIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</selectionBeginIndex>
		<selectionEndIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</selectionEndIndex>
		<sharpness public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</sharpness>
		<styleSheet public="1" get="accessor" set="accessor">
			<c path="flash.text.StyleSheet"/>
			<meta><m n=":flash.property"/></meta>
		</styleSheet>
		<text public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</text>
		<textColor public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</textColor>
		<textHeight public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</textHeight>
		<textInteractionMode public="1" get="accessor" set="null">
			<x path="flash.text.TextInteractionMode"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</textInteractionMode>
		<textWidth public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</textWidth>
		<thickness public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</thickness>
		<type public="1" get="accessor" set="accessor">
			<x path="flash.text.TextFieldType"/>
			<meta><m n=":flash.property"/></meta>
		</type>
		<useRichTextClipboard public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</useRichTextClipboard>
		<wordWrap public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</wordWrap>
		<appendText public="1" set="method"><f a="newText">
	<c path="String"/>
	<x path="Void"/>
</f></appendText>
		<copyRichText public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":ns">
	<e>"flash.text"</e>
	<e>internal</e>
</m></meta>
		</copyRichText>
		<getCharBoundaries public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getCharBoundaries>
		<getCharIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getCharIndexAtPoint>
		<getFirstCharInParagraph public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getFirstCharInParagraph>
		<getImageReference public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getImageReference>
		<getLineIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getLineIndexAtPoint>
		<getLineIndexOfChar public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineIndexOfChar>
		<getLineLength public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineLength>
		<getLineMetrics public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="flash.text.TextLineMetrics"/>
</f></getLineMetrics>
		<getLineOffset public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineOffset>
		<getLineText public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="String"/>
</f></getLineText>
		<getParagraphLength public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getParagraphLength>
		<getRawText public="1" set="method"><f a=""><c path="String"/></f></getRawText>
		<getTextFormat public="1" set="method">
			<f a="?beginIndex:?endIndex" v="-1:-1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.text.TextFormat"/>
			</f>
			<meta><m n=":value"><e>{ endIndex : -1, beginIndex : -1 }</e></m></meta>
		</getTextFormat>
		<getTextRuns public="1" set="method">
			<f a="?beginIndex:?endIndex" v="0:2147483647">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":value"><e>{ endIndex : 2147483647, beginIndex : 0 }</e></m></meta>
		</getTextRuns>
		<getXMLText public="1" set="method">
			<f a="?beginIndex:?endIndex" v="0:2147483647">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ endIndex : 2147483647, beginIndex : 0 }</e></m></meta>
		</getXMLText>
		<get_alwaysShowSelection set="method"><f a=""><x path="Bool"/></f></get_alwaysShowSelection>
		<get_antiAliasType set="method"><f a=""><x path="flash.text.AntiAliasType"/></f></get_antiAliasType>
		<get_autoSize set="method"><f a=""><x path="flash.text.TextFieldAutoSize"/></f></get_autoSize>
		<get_background set="method"><f a=""><x path="Bool"/></f></get_background>
		<get_backgroundColor set="method"><f a=""><x path="UInt"/></f></get_backgroundColor>
		<get_border set="method"><f a=""><x path="Bool"/></f></get_border>
		<get_borderColor set="method"><f a=""><x path="UInt"/></f></get_borderColor>
		<get_bottomScrollV set="method"><f a=""><x path="Int"/></f></get_bottomScrollV>
		<get_caretIndex set="method"><f a=""><x path="Int"/></f></get_caretIndex>
		<get_condenseWhite set="method"><f a=""><x path="Bool"/></f></get_condenseWhite>
		<get_defaultTextFormat set="method"><f a=""><c path="flash.text.TextFormat"/></f></get_defaultTextFormat>
		<get_displayAsPassword set="method"><f a=""><x path="Bool"/></f></get_displayAsPassword>
		<get_embedFonts set="method"><f a=""><x path="Bool"/></f></get_embedFonts>
		<get_gridFitType set="method"><f a=""><x path="flash.text.GridFitType"/></f></get_gridFitType>
		<get_htmlText set="method"><f a=""><c path="String"/></f></get_htmlText>
		<get_length set="method"><f a=""><x path="Int"/></f></get_length>
		<get_maxChars set="method"><f a=""><x path="Int"/></f></get_maxChars>
		<get_maxScrollH set="method"><f a=""><x path="Int"/></f></get_maxScrollH>
		<get_maxScrollV set="method"><f a=""><x path="Int"/></f></get_maxScrollV>
		<get_mouseWheelEnabled set="method"><f a=""><x path="Bool"/></f></get_mouseWheelEnabled>
		<get_multiline set="method"><f a=""><x path="Bool"/></f></get_multiline>
		<get_numLines set="method"><f a=""><x path="Int"/></f></get_numLines>
		<get_restrict set="method"><f a=""><c path="String"/></f></get_restrict>
		<get_scrollH set="method"><f a=""><x path="Int"/></f></get_scrollH>
		<get_scrollV set="method"><f a=""><x path="Int"/></f></get_scrollV>
		<get_selectable set="method"><f a=""><x path="Bool"/></f></get_selectable>
		<get_selectedText set="method"><f a=""><c path="String"/></f></get_selectedText>
		<get_selectionBeginIndex set="method"><f a=""><x path="Int"/></f></get_selectionBeginIndex>
		<get_selectionEndIndex set="method"><f a=""><x path="Int"/></f></get_selectionEndIndex>
		<get_sharpness set="method"><f a=""><x path="Float"/></f></get_sharpness>
		<get_styleSheet set="method"><f a=""><c path="flash.text.StyleSheet"/></f></get_styleSheet>
		<get_text set="method"><f a=""><c path="String"/></f></get_text>
		<get_textColor set="method"><f a=""><x path="UInt"/></f></get_textColor>
		<get_textHeight set="method"><f a=""><x path="Float"/></f></get_textHeight>
		<get_textInteractionMode set="method"><f a=""><x path="flash.text.TextInteractionMode"/></f></get_textInteractionMode>
		<get_textWidth set="method"><f a=""><x path="Float"/></f></get_textWidth>
		<get_thickness set="method"><f a=""><x path="Float"/></f></get_thickness>
		<get_type set="method"><f a=""><x path="flash.text.TextFieldType"/></f></get_type>
		<get_useRichTextClipboard set="method"><f a=""><x path="Bool"/></f></get_useRichTextClipboard>
		<get_wordWrap set="method"><f a=""><x path="Bool"/></f></get_wordWrap>
		<insertXMLText public="1" set="method">
			<f a="beginIndex:endIndex:richText:?pasting" v=":::false">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ pasting : false }</e></m></meta>
		</insertXMLText>
		<pasteRichText public="1" set="method">
			<f a="richText">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns">
	<e>"flash.text"</e>
	<e>internal</e>
</m></meta>
		</pasteRichText>
		<replaceSelectedText public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></replaceSelectedText>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></replaceText>
		<setSelection public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSelection>
		<setTextFormat public="1" set="method">
			<f a="format:?beginIndex:?endIndex" v=":-1:-1">
				<c path="flash.text.TextFormat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ endIndex : -1, beginIndex : -1 }</e></m></meta>
		</setTextFormat>
		<set_alwaysShowSelection set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_alwaysShowSelection>
		<set_antiAliasType set="method"><f a="value">
	<x path="flash.text.AntiAliasType"/>
	<x path="flash.text.AntiAliasType"/>
</f></set_antiAliasType>
		<set_autoSize set="method"><f a="value">
	<x path="flash.text.TextFieldAutoSize"/>
	<x path="flash.text.TextFieldAutoSize"/>
</f></set_autoSize>
		<set_background set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_background>
		<set_backgroundColor set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_backgroundColor>
		<set_border set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_border>
		<set_borderColor set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_borderColor>
		<set_condenseWhite set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_condenseWhite>
		<set_defaultTextFormat set="method"><f a="value">
	<c path="flash.text.TextFormat"/>
	<c path="flash.text.TextFormat"/>
</f></set_defaultTextFormat>
		<set_displayAsPassword set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_displayAsPassword>
		<set_embedFonts set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_embedFonts>
		<set_gridFitType set="method"><f a="value">
	<x path="flash.text.GridFitType"/>
	<x path="flash.text.GridFitType"/>
</f></set_gridFitType>
		<set_htmlText set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_htmlText>
		<set_maxChars set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_maxChars>
		<set_mouseWheelEnabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_mouseWheelEnabled>
		<set_multiline set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_multiline>
		<set_restrict set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_restrict>
		<set_scrollH set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_scrollH>
		<set_scrollV set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_scrollV>
		<set_selectable set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_selectable>
		<set_sharpness set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_sharpness>
		<set_styleSheet set="method"><f a="value">
	<c path="flash.text.StyleSheet"/>
	<c path="flash.text.StyleSheet"/>
</f></set_styleSheet>
		<set_text set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<set_textColor set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_textColor>
		<set_thickness set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_thickness>
		<set_type set="method"><f a="value">
	<x path="flash.text.TextFieldType"/>
	<x path="flash.text.TextFieldType"/>
</f></set_type>
		<set_useRichTextClipboard set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_useRichTextClipboard>
		<set_wordWrap set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_wordWrap>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="flash.text.TextFieldAutoSize" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextFieldAutoSize.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.TextFieldAutoSize"</e></m>
		</meta>
		<impl><class path="flash.text._TextFieldAutoSize.TextFieldAutoSize_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextFieldAutoSize.hx" private="1" module="flash.text.TextFieldAutoSize" extern="1" final="1">
	<CENTER public="1" set="null" static="1">
		<x path="flash.text.TextFieldAutoSize"/>
		<meta><m n=":enum"/></meta>
	</CENTER>
	<LEFT public="1" set="null" static="1">
		<x path="flash.text.TextFieldAutoSize"/>
		<meta><m n=":enum"/></meta>
	</LEFT>
	<NONE public="1" set="null" static="1">
		<x path="flash.text.TextFieldAutoSize"/>
		<meta><m n=":enum"/></meta>
	</NONE>
	<RIGHT public="1" set="null" static="1">
		<x path="flash.text.TextFieldAutoSize"/>
		<meta><m n=":enum"/></meta>
	</RIGHT>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":native"><e>"flash.text.TextFieldAutoSize"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text._TextFieldAutoSize.TextFieldAutoSize_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextFieldAutoSize.hx" private="1" module="flash.text.TextFieldAutoSize" extern="1" final="1">
		<CENTER public="1" set="null" static="1">
			<x path="flash.text.TextFieldAutoSize"/>
			<meta><m n=":enum"/></meta>
		</CENTER>
		<LEFT public="1" set="null" static="1">
			<x path="flash.text.TextFieldAutoSize"/>
			<meta><m n=":enum"/></meta>
		</LEFT>
		<NONE public="1" set="null" static="1">
			<x path="flash.text.TextFieldAutoSize"/>
			<meta><m n=":enum"/></meta>
		</NONE>
		<RIGHT public="1" set="null" static="1">
			<x path="flash.text.TextFieldAutoSize"/>
			<meta><m n=":enum"/></meta>
		</RIGHT>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"flash.text.TextFieldAutoSize"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.TextFieldType" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextFieldType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.TextFieldType"</e></m>
		</meta>
		<impl><class path="flash.text._TextFieldType.TextFieldType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextFieldType.hx" private="1" module="flash.text.TextFieldType" extern="1" final="1">
	<DYNAMIC public="1" set="null" static="1">
		<x path="flash.text.TextFieldType"/>
		<meta><m n=":enum"/></meta>
	</DYNAMIC>
	<INPUT public="1" set="null" static="1">
		<x path="flash.text.TextFieldType"/>
		<meta><m n=":enum"/></meta>
	</INPUT>
	<meta>
		<m n=":native"><e>"flash.text.TextFieldType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text._TextFieldType.TextFieldType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextFieldType.hx" private="1" module="flash.text.TextFieldType" extern="1" final="1">
		<DYNAMIC public="1" set="null" static="1">
			<x path="flash.text.TextFieldType"/>
			<meta><m n=":enum"/></meta>
		</DYNAMIC>
		<INPUT public="1" set="null" static="1">
			<x path="flash.text.TextFieldType"/>
			<meta><m n=":enum"/></meta>
		</INPUT>
		<meta>
			<m n=":native"><e>"flash.text.TextFieldType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.text.TextFormat" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextFormat.hx" extern="1">
		<align public="1" get="accessor" set="accessor">
			<x path="flash.text.TextFormatAlign"/>
			<meta><m n=":flash.property"/></meta>
		</align>
		<blockIndent public="1" get="accessor" set="accessor">
			<x path="Null"><x path="Float"/></x>
			<meta><m n=":flash.property"/></meta>
		</blockIndent>
		<bold public="1" get="accessor" set="accessor">
			<x path="Null"><x path="Bool"/></x>
			<meta><m n=":flash.property"/></meta>
		</bold>
		<bullet public="1" get="accessor" set="accessor">
			<x path="Null"><x path="Bool"/></x>
			<meta><m n=":flash.property"/></meta>
		</bullet>
		<color public="1" get="accessor" set="accessor">
			<x path="Null"><x path="UInt"/></x>
			<meta><m n=":flash.property"/></meta>
		</color>
		<display public="1" get="accessor" set="accessor">
			<x path="flash.text.TextFormatDisplay"/>
			<meta><m n=":flash.property"/></meta>
		</display>
		<font public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</font>
		<indent public="1" get="accessor" set="accessor">
			<x path="Null"><x path="Float"/></x>
			<meta><m n=":flash.property"/></meta>
		</indent>
		<italic public="1" get="accessor" set="accessor">
			<x path="Null"><x path="Bool"/></x>
			<meta><m n=":flash.property"/></meta>
		</italic>
		<kerning public="1" get="accessor" set="accessor">
			<x path="Null"><x path="Bool"/></x>
			<meta><m n=":flash.property"/></meta>
		</kerning>
		<leading public="1" get="accessor" set="accessor">
			<x path="Null"><x path="Float"/></x>
			<meta><m n=":flash.property"/></meta>
		</leading>
		<leftMargin public="1" get="accessor" set="accessor">
			<x path="Null"><x path="Float"/></x>
			<meta><m n=":flash.property"/></meta>
		</leftMargin>
		<letterSpacing public="1" get="accessor" set="accessor">
			<x path="Null"><x path="Float"/></x>
			<meta><m n=":flash.property"/></meta>
		</letterSpacing>
		<rightMargin public="1" get="accessor" set="accessor">
			<x path="Null"><x path="Float"/></x>
			<meta><m n=":flash.property"/></meta>
		</rightMargin>
		<size public="1" get="accessor" set="accessor">
			<x path="Null"><x path="Float"/></x>
			<meta><m n=":flash.property"/></meta>
		</size>
		<tabStops public="1" get="accessor" set="accessor">
			<c path="Array"><x path="UInt"/></c>
			<meta><m n=":flash.property"/></meta>
		</tabStops>
		<target public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</target>
		<underline public="1" get="accessor" set="accessor">
			<x path="Null"><x path="Bool"/></x>
			<meta><m n=":flash.property"/></meta>
		</underline>
		<url public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</url>
		<get_align set="method"><f a=""><x path="flash.text.TextFormatAlign"/></f></get_align>
		<get_blockIndent set="method"><f a=""><x path="Null"><x path="Float"/></x></f></get_blockIndent>
		<get_bold set="method"><f a=""><x path="Null"><x path="Bool"/></x></f></get_bold>
		<get_bullet set="method"><f a=""><x path="Null"><x path="Bool"/></x></f></get_bullet>
		<get_color set="method"><f a=""><x path="Null"><x path="UInt"/></x></f></get_color>
		<get_display set="method"><f a=""><x path="flash.text.TextFormatDisplay"/></f></get_display>
		<get_font set="method"><f a=""><c path="String"/></f></get_font>
		<get_indent set="method"><f a=""><x path="Null"><x path="Float"/></x></f></get_indent>
		<get_italic set="method"><f a=""><x path="Null"><x path="Bool"/></x></f></get_italic>
		<get_kerning set="method"><f a=""><x path="Null"><x path="Bool"/></x></f></get_kerning>
		<get_leading set="method"><f a=""><x path="Null"><x path="Float"/></x></f></get_leading>
		<get_leftMargin set="method"><f a=""><x path="Null"><x path="Float"/></x></f></get_leftMargin>
		<get_letterSpacing set="method"><f a=""><x path="Null"><x path="Float"/></x></f></get_letterSpacing>
		<get_rightMargin set="method"><f a=""><x path="Null"><x path="Float"/></x></f></get_rightMargin>
		<get_size set="method"><f a=""><x path="Null"><x path="Float"/></x></f></get_size>
		<get_tabStops set="method"><f a=""><c path="Array"><x path="UInt"/></c></f></get_tabStops>
		<get_target set="method"><f a=""><c path="String"/></f></get_target>
		<get_underline set="method"><f a=""><x path="Null"><x path="Bool"/></x></f></get_underline>
		<get_url set="method"><f a=""><c path="String"/></f></get_url>
		<set_align set="method"><f a="value">
	<x path="flash.text.TextFormatAlign"/>
	<x path="flash.text.TextFormatAlign"/>
</f></set_align>
		<set_blockIndent set="method"><f a="value">
	<x path="Null"><x path="Float"/></x>
	<x path="Null"><x path="Float"/></x>
</f></set_blockIndent>
		<set_bold set="method"><f a="value">
	<x path="Null"><x path="Bool"/></x>
	<x path="Null"><x path="Bool"/></x>
</f></set_bold>
		<set_bullet set="method"><f a="value">
	<x path="Null"><x path="Bool"/></x>
	<x path="Null"><x path="Bool"/></x>
</f></set_bullet>
		<set_color set="method"><f a="value">
	<x path="Null"><x path="UInt"/></x>
	<x path="Null"><x path="UInt"/></x>
</f></set_color>
		<set_display set="method"><f a="value">
	<x path="flash.text.TextFormatDisplay"/>
	<x path="flash.text.TextFormatDisplay"/>
</f></set_display>
		<set_font set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_font>
		<set_indent set="method"><f a="value">
	<x path="Null"><x path="Float"/></x>
	<x path="Null"><x path="Float"/></x>
</f></set_indent>
		<set_italic set="method"><f a="value">
	<x path="Null"><x path="Bool"/></x>
	<x path="Null"><x path="Bool"/></x>
</f></set_italic>
		<set_kerning set="method"><f a="value">
	<x path="Null"><x path="Bool"/></x>
	<x path="Null"><x path="Bool"/></x>
</f></set_kerning>
		<set_leading set="method"><f a="value">
	<x path="Null"><x path="Float"/></x>
	<x path="Null"><x path="Float"/></x>
</f></set_leading>
		<set_leftMargin set="method"><f a="value">
	<x path="Null"><x path="Float"/></x>
	<x path="Null"><x path="Float"/></x>
</f></set_leftMargin>
		<set_letterSpacing set="method"><f a="value">
	<x path="Null"><x path="Float"/></x>
	<x path="Null"><x path="Float"/></x>
</f></set_letterSpacing>
		<set_rightMargin set="method"><f a="value">
	<x path="Null"><x path="Float"/></x>
	<x path="Null"><x path="Float"/></x>
</f></set_rightMargin>
		<set_size set="method"><f a="value">
	<x path="Null"><x path="Float"/></x>
	<x path="Null"><x path="Float"/></x>
</f></set_size>
		<set_tabStops set="method"><f a="value">
	<c path="Array"><x path="UInt"/></c>
	<c path="Array"><x path="UInt"/></c>
</f></set_tabStops>
		<set_target set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_target>
		<set_underline set="method"><f a="value">
	<x path="Null"><x path="Bool"/></x>
	<x path="Null"><x path="Bool"/></x>
</f></set_underline>
		<set_url set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_url>
		<new public="1" set="method">
			<f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading" v=":0:0:false:false:false::::0:0:0:0">
				<c path="String"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<x path="flash.text.TextFormatAlign"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ leading : 0, indent : 0, rightMargin : 0, leftMargin : 0, underline : false, italic : false, bold : false, color : 0, size : 0 }</e></m></meta>
		</new>
	</class>
	<abstract path="flash.text.TextFormatAlign" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextFormatAlign.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.TextFormatAlign"</e></m>
		</meta>
		<impl><class path="flash.text._TextFormatAlign.TextFormatAlign_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextFormatAlign.hx" private="1" module="flash.text.TextFormatAlign" extern="1" final="1">
	<CENTER public="1" set="null" static="1">
		<x path="flash.text.TextFormatAlign"/>
		<meta><m n=":enum"/></meta>
	</CENTER>
	<END public="1" set="null" static="1">
		<x path="flash.text.TextFormatAlign"/>
		<meta><m n=":enum"/></meta>
	</END>
	<JUSTIFY public="1" set="null" static="1">
		<x path="flash.text.TextFormatAlign"/>
		<meta><m n=":enum"/></meta>
	</JUSTIFY>
	<LEFT public="1" set="null" static="1">
		<x path="flash.text.TextFormatAlign"/>
		<meta><m n=":enum"/></meta>
	</LEFT>
	<RIGHT public="1" set="null" static="1">
		<x path="flash.text.TextFormatAlign"/>
		<meta><m n=":enum"/></meta>
	</RIGHT>
	<START public="1" set="null" static="1">
		<x path="flash.text.TextFormatAlign"/>
		<meta><m n=":enum"/></meta>
	</START>
	<meta>
		<m n=":native"><e>"flash.text.TextFormatAlign"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text._TextFormatAlign.TextFormatAlign_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextFormatAlign.hx" private="1" module="flash.text.TextFormatAlign" extern="1" final="1">
		<CENTER public="1" set="null" static="1">
			<x path="flash.text.TextFormatAlign"/>
			<meta><m n=":enum"/></meta>
		</CENTER>
		<END public="1" set="null" static="1">
			<x path="flash.text.TextFormatAlign"/>
			<meta><m n=":enum"/></meta>
		</END>
		<JUSTIFY public="1" set="null" static="1">
			<x path="flash.text.TextFormatAlign"/>
			<meta><m n=":enum"/></meta>
		</JUSTIFY>
		<LEFT public="1" set="null" static="1">
			<x path="flash.text.TextFormatAlign"/>
			<meta><m n=":enum"/></meta>
		</LEFT>
		<RIGHT public="1" set="null" static="1">
			<x path="flash.text.TextFormatAlign"/>
			<meta><m n=":enum"/></meta>
		</RIGHT>
		<START public="1" set="null" static="1">
			<x path="flash.text.TextFormatAlign"/>
			<meta><m n=":enum"/></meta>
		</START>
		<meta>
			<m n=":native"><e>"flash.text.TextFormatAlign"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.TextFormatDisplay" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextFormatDisplay.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.TextFormatDisplay"</e></m>
		</meta>
		<impl><class path="flash.text._TextFormatDisplay.TextFormatDisplay_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextFormatDisplay.hx" private="1" module="flash.text.TextFormatDisplay" extern="1" final="1">
	<BLOCK public="1" set="null" static="1">
		<x path="flash.text.TextFormatDisplay"/>
		<meta><m n=":enum"/></meta>
	</BLOCK>
	<INLINE public="1" set="null" static="1">
		<x path="flash.text.TextFormatDisplay"/>
		<meta><m n=":enum"/></meta>
	</INLINE>
	<meta>
		<m n=":native"><e>"flash.text.TextFormatDisplay"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text._TextFormatDisplay.TextFormatDisplay_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextFormatDisplay.hx" private="1" module="flash.text.TextFormatDisplay" extern="1" final="1">
		<BLOCK public="1" set="null" static="1">
			<x path="flash.text.TextFormatDisplay"/>
			<meta><m n=":enum"/></meta>
		</BLOCK>
		<INLINE public="1" set="null" static="1">
			<x path="flash.text.TextFormatDisplay"/>
			<meta><m n=":enum"/></meta>
		</INLINE>
		<meta>
			<m n=":native"><e>"flash.text.TextFormatDisplay"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.TextInteractionMode" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextInteractionMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.TextInteractionMode"</e></m>
		</meta>
		<impl><class path="flash.text._TextInteractionMode.TextInteractionMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextInteractionMode.hx" private="1" module="flash.text.TextInteractionMode" extern="1" final="1">
	<NORMAL public="1" set="null" static="1">
		<x path="flash.text.TextInteractionMode"/>
		<meta><m n=":enum"/></meta>
	</NORMAL>
	<SELECTION public="1" set="null" static="1">
		<x path="flash.text.TextInteractionMode"/>
		<meta><m n=":enum"/></meta>
	</SELECTION>
	<meta>
		<m n=":native"><e>"flash.text.TextInteractionMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text._TextInteractionMode.TextInteractionMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextInteractionMode.hx" private="1" module="flash.text.TextInteractionMode" extern="1" final="1">
		<NORMAL public="1" set="null" static="1">
			<x path="flash.text.TextInteractionMode"/>
			<meta><m n=":enum"/></meta>
		</NORMAL>
		<SELECTION public="1" set="null" static="1">
			<x path="flash.text.TextInteractionMode"/>
			<meta><m n=":enum"/></meta>
		</SELECTION>
		<meta>
			<m n=":native"><e>"flash.text.TextInteractionMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.text.TextLineMetrics" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextLineMetrics.hx" extern="1">
		<ascent public="1"><x path="Float"/></ascent>
		<descent public="1"><x path="Float"/></descent>
		<height public="1"><x path="Float"/></height>
		<leading public="1"><x path="Float"/></leading>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<new public="1" set="method"><f a="x:width:height:ascent:descent:leading">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextRenderer" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextRenderer.hx" extern="1">
		<antiAliasType public="1" get="accessor" set="accessor" static="1">
			<x path="flash.text.AntiAliasType"/>
			<meta><m n=":flash.property"/></meta>
		</antiAliasType>
		<displayMode public="1" get="accessor" set="accessor" static="1">
			<x path="flash.text.TextDisplayMode"/>
			<meta><m n=":flash.property"/></meta>
		</displayMode>
		<maxLevel public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</maxLevel>
		<get_antiAliasType set="method" static="1"><f a=""><x path="flash.text.AntiAliasType"/></f></get_antiAliasType>
		<get_displayMode set="method" static="1"><f a=""><x path="flash.text.TextDisplayMode"/></f></get_displayMode>
		<get_maxLevel set="method" static="1"><f a=""><x path="Int"/></f></get_maxLevel>
		<setAdvancedAntiAliasingTable public="1" set="method" static="1"><f a="fontName:fontStyle:colorType:advancedAntiAliasingTable">
	<c path="String"/>
	<x path="flash.text.FontStyle"/>
	<x path="flash.text.TextColorType"/>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></setAdvancedAntiAliasingTable>
		<set_antiAliasType set="method" static="1"><f a="value">
	<x path="flash.text.AntiAliasType"/>
	<x path="flash.text.AntiAliasType"/>
</f></set_antiAliasType>
		<set_displayMode set="method" static="1"><f a="value">
	<x path="flash.text.TextDisplayMode"/>
	<x path="flash.text.TextDisplayMode"/>
</f></set_displayMode>
		<set_maxLevel set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_maxLevel>
	</class>
	<class path="flash.text.TextRun" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextRun.hx" extern="1">
		<beginIndex public="1"><x path="Int"/></beginIndex>
		<endIndex public="1"><x path="Int"/></endIndex>
		<textFormat public="1"><c path="flash.text.TextFormat"/></textFormat>
		<new public="1" set="method"><f a="beginIndex:endIndex:textFormat">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.text.TextFormat"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextSnapshot" params="" file="/home/runner/work/haxe/haxe/std/flash/text/TextSnapshot.hx" extern="1">
		<charCount public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</charCount>
		<findText public="1" set="method"><f a="beginIndex:textToFind:caseSensitive">
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></findText>
		<getSelected public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></getSelected>
		<getSelectedText public="1" set="method">
			<f a="?includeLineEndings" v="false">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ includeLineEndings : false }</e></m></meta>
		</getSelectedText>
		<getText public="1" set="method">
			<f a="beginIndex:endIndex:?includeLineEndings" v="::false">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ includeLineEndings : false }</e></m></meta>
		</getText>
		<getTextRunInfo public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRunInfo>
		<get_charCount set="method"><f a=""><x path="Int"/></f></get_charCount>
		<hitTestTextNearPos public="1" set="method">
			<f a="x:y:?maxDistance" v="::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ maxDistance : 0 }</e></m></meta>
		</hitTestTextNearPos>
		<setSelectColor public="1" set="method">
			<f a="?hexColor" v="16776960">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ hexColor : 16776960 }</e></m></meta>
		</setSelectColor>
		<setSelected public="1" set="method"><f a="beginIndex:endIndex:select">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setSelected>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.text.engine.BreakOpportunity" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/BreakOpportunity.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.BreakOpportunity"</e></m>
		</meta>
		<impl><class path="flash.text.engine._BreakOpportunity.BreakOpportunity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/BreakOpportunity.hx" private="1" module="flash.text.engine.BreakOpportunity" extern="1" final="1">
	<ALL public="1" set="null" static="1">
		<x path="flash.text.engine.BreakOpportunity"/>
		<meta><m n=":enum"/></meta>
	</ALL>
	<ANY public="1" set="null" static="1">
		<x path="flash.text.engine.BreakOpportunity"/>
		<meta><m n=":enum"/></meta>
	</ANY>
	<AUTO public="1" set="null" static="1">
		<x path="flash.text.engine.BreakOpportunity"/>
		<meta><m n=":enum"/></meta>
	</AUTO>
	<NONE public="1" set="null" static="1">
		<x path="flash.text.engine.BreakOpportunity"/>
		<meta><m n=":enum"/></meta>
	</NONE>
	<meta>
		<m n=":native"><e>"flash.text.engine.BreakOpportunity"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._BreakOpportunity.BreakOpportunity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/BreakOpportunity.hx" private="1" module="flash.text.engine.BreakOpportunity" extern="1" final="1">
		<ALL public="1" set="null" static="1">
			<x path="flash.text.engine.BreakOpportunity"/>
			<meta><m n=":enum"/></meta>
		</ALL>
		<ANY public="1" set="null" static="1">
			<x path="flash.text.engine.BreakOpportunity"/>
			<meta><m n=":enum"/></meta>
		</ANY>
		<AUTO public="1" set="null" static="1">
			<x path="flash.text.engine.BreakOpportunity"/>
			<meta><m n=":enum"/></meta>
		</AUTO>
		<NONE public="1" set="null" static="1">
			<x path="flash.text.engine.BreakOpportunity"/>
			<meta><m n=":enum"/></meta>
		</NONE>
		<meta>
			<m n=":native"><e>"flash.text.engine.BreakOpportunity"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.engine.CFFHinting" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/CFFHinting.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.CFFHinting"</e></m>
		</meta>
		<impl><class path="flash.text.engine._CFFHinting.CFFHinting_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/CFFHinting.hx" private="1" module="flash.text.engine.CFFHinting" extern="1" final="1">
	<HORIZONTAL_STEM public="1" set="null" static="1">
		<x path="flash.text.engine.CFFHinting"/>
		<meta><m n=":enum"/></meta>
	</HORIZONTAL_STEM>
	<NONE public="1" set="null" static="1">
		<x path="flash.text.engine.CFFHinting"/>
		<meta><m n=":enum"/></meta>
	</NONE>
	<meta>
		<m n=":native"><e>"flash.text.engine.CFFHinting"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._CFFHinting.CFFHinting_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/CFFHinting.hx" private="1" module="flash.text.engine.CFFHinting" extern="1" final="1">
		<HORIZONTAL_STEM public="1" set="null" static="1">
			<x path="flash.text.engine.CFFHinting"/>
			<meta><m n=":enum"/></meta>
		</HORIZONTAL_STEM>
		<NONE public="1" set="null" static="1">
			<x path="flash.text.engine.CFFHinting"/>
			<meta><m n=":enum"/></meta>
		</NONE>
		<meta>
			<m n=":native"><e>"flash.text.engine.CFFHinting"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.text.engine.ContentElement" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/ContentElement.hx" extern="1">
		<GRAPHIC_ELEMENT final="1" public="1" set="null" static="1"><x path="UInt"/></GRAPHIC_ELEMENT>
		<elementFormat public="1" get="accessor" set="accessor">
			<c path="flash.text.engine.ElementFormat"/>
			<meta><m n=":flash.property"/></meta>
		</elementFormat>
		<eventMirror public="1" get="accessor" set="accessor">
			<c path="flash.events.EventDispatcher"/>
			<meta><m n=":flash.property"/></meta>
		</eventMirror>
		<groupElement public="1" get="accessor" set="null">
			<c path="flash.text.engine.GroupElement"/>
			<meta><m n=":flash.property"/></meta>
		</groupElement>
		<rawText public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</rawText>
		<text public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</text>
		<textBlock public="1" get="accessor" set="null">
			<c path="flash.text.engine.TextBlock"/>
			<meta><m n=":flash.property"/></meta>
		</textBlock>
		<textBlockBeginIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</textBlockBeginIndex>
		<textRotation public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.TextRotation"/>
			<meta><m n=":flash.property"/></meta>
		</textRotation>
		<userData public="1"><d/></userData>
		<get_elementFormat set="method"><f a=""><c path="flash.text.engine.ElementFormat"/></f></get_elementFormat>
		<get_eventMirror set="method"><f a=""><c path="flash.events.EventDispatcher"/></f></get_eventMirror>
		<get_groupElement set="method"><f a=""><c path="flash.text.engine.GroupElement"/></f></get_groupElement>
		<get_rawText set="method"><f a=""><c path="String"/></f></get_rawText>
		<get_text set="method"><f a=""><c path="String"/></f></get_text>
		<get_textBlock set="method"><f a=""><c path="flash.text.engine.TextBlock"/></f></get_textBlock>
		<get_textBlockBeginIndex set="method"><f a=""><x path="Int"/></f></get_textBlockBeginIndex>
		<get_textRotation set="method"><f a=""><x path="flash.text.engine.TextRotation"/></f></get_textRotation>
		<set_elementFormat set="method"><f a="value">
	<c path="flash.text.engine.ElementFormat"/>
	<c path="flash.text.engine.ElementFormat"/>
</f></set_elementFormat>
		<set_eventMirror set="method"><f a="value">
	<c path="flash.events.EventDispatcher"/>
	<c path="flash.events.EventDispatcher"/>
</f></set_eventMirror>
		<set_textRotation set="method"><f a="value">
	<x path="flash.text.engine.TextRotation"/>
	<x path="flash.text.engine.TextRotation"/>
</f></set_textRotation>
		<new public="1" set="method"><f a="?elementFormat:?eventMirror:?textRotation">
	<c path="flash.text.engine.ElementFormat"/>
	<c path="flash.events.EventDispatcher"/>
	<x path="flash.text.engine.TextRotation"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="flash.text.engine.DigitCase" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/DigitCase.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.DigitCase"</e></m>
		</meta>
		<impl><class path="flash.text.engine._DigitCase.DigitCase_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/DigitCase.hx" private="1" module="flash.text.engine.DigitCase" extern="1" final="1">
	<DEFAULT public="1" set="null" static="1">
		<x path="flash.text.engine.DigitCase"/>
		<meta><m n=":enum"/></meta>
	</DEFAULT>
	<LINING public="1" set="null" static="1">
		<x path="flash.text.engine.DigitCase"/>
		<meta><m n=":enum"/></meta>
	</LINING>
	<OLD_STYLE public="1" set="null" static="1">
		<x path="flash.text.engine.DigitCase"/>
		<meta><m n=":enum"/></meta>
	</OLD_STYLE>
	<meta>
		<m n=":native"><e>"flash.text.engine.DigitCase"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._DigitCase.DigitCase_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/DigitCase.hx" private="1" module="flash.text.engine.DigitCase" extern="1" final="1">
		<DEFAULT public="1" set="null" static="1">
			<x path="flash.text.engine.DigitCase"/>
			<meta><m n=":enum"/></meta>
		</DEFAULT>
		<LINING public="1" set="null" static="1">
			<x path="flash.text.engine.DigitCase"/>
			<meta><m n=":enum"/></meta>
		</LINING>
		<OLD_STYLE public="1" set="null" static="1">
			<x path="flash.text.engine.DigitCase"/>
			<meta><m n=":enum"/></meta>
		</OLD_STYLE>
		<meta>
			<m n=":native"><e>"flash.text.engine.DigitCase"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.engine.DigitWidth" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/DigitWidth.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.DigitWidth"</e></m>
		</meta>
		<impl><class path="flash.text.engine._DigitWidth.DigitWidth_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/DigitWidth.hx" private="1" module="flash.text.engine.DigitWidth" extern="1" final="1">
	<DEFAULT public="1" set="null" static="1">
		<x path="flash.text.engine.DigitWidth"/>
		<meta><m n=":enum"/></meta>
	</DEFAULT>
	<PROPORTIONAL public="1" set="null" static="1">
		<x path="flash.text.engine.DigitWidth"/>
		<meta><m n=":enum"/></meta>
	</PROPORTIONAL>
	<TABULAR public="1" set="null" static="1">
		<x path="flash.text.engine.DigitWidth"/>
		<meta><m n=":enum"/></meta>
	</TABULAR>
	<meta>
		<m n=":native"><e>"flash.text.engine.DigitWidth"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._DigitWidth.DigitWidth_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/DigitWidth.hx" private="1" module="flash.text.engine.DigitWidth" extern="1" final="1">
		<DEFAULT public="1" set="null" static="1">
			<x path="flash.text.engine.DigitWidth"/>
			<meta><m n=":enum"/></meta>
		</DEFAULT>
		<PROPORTIONAL public="1" set="null" static="1">
			<x path="flash.text.engine.DigitWidth"/>
			<meta><m n=":enum"/></meta>
		</PROPORTIONAL>
		<TABULAR public="1" set="null" static="1">
			<x path="flash.text.engine.DigitWidth"/>
			<meta><m n=":enum"/></meta>
		</TABULAR>
		<meta>
			<m n=":native"><e>"flash.text.engine.DigitWidth"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.text.engine.TextJustifier" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextJustifier.hx" extern="1">
		<getJustifierForLocale public="1" set="method" static="1"><f a="locale">
	<c path="String"/>
	<c path="flash.text.engine.TextJustifier"/>
</f></getJustifierForLocale>
		<lineJustification public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.LineJustification"/>
			<meta><m n=":flash.property"/></meta>
		</lineJustification>
		<locale public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</locale>
		<clone public="1" set="method"><f a=""><c path="flash.text.engine.TextJustifier"/></f></clone>
		<get_lineJustification set="method"><f a=""><x path="flash.text.engine.LineJustification"/></f></get_lineJustification>
		<get_locale set="method"><f a=""><c path="String"/></f></get_locale>
		<set_lineJustification set="method"><f a="value">
	<x path="flash.text.engine.LineJustification"/>
	<x path="flash.text.engine.LineJustification"/>
</f></set_lineJustification>
		<new public="1" set="method"><f a="locale:lineJustification">
	<c path="String"/>
	<x path="flash.text.engine.LineJustification"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.engine.EastAsianJustifier" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/EastAsianJustifier.hx" extern="1" final="1">
		<extends path="flash.text.engine.TextJustifier"/>
		<composeTrailingIdeographicSpaces public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</composeTrailingIdeographicSpaces>
		<justificationStyle public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.JustificationStyle"/>
			<meta><m n=":flash.property"/></meta>
		</justificationStyle>
		<get_composeTrailingIdeographicSpaces set="method"><f a=""><x path="Bool"/></f></get_composeTrailingIdeographicSpaces>
		<get_justificationStyle set="method"><f a=""><x path="flash.text.engine.JustificationStyle"/></f></get_justificationStyle>
		<set_composeTrailingIdeographicSpaces set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_composeTrailingIdeographicSpaces>
		<set_justificationStyle set="method"><f a="value">
	<x path="flash.text.engine.JustificationStyle"/>
	<x path="flash.text.engine.JustificationStyle"/>
</f></set_justificationStyle>
		<new public="1" set="method"><f a="?locale:?lineJustification:?justificationStyle">
	<c path="String"/>
	<x path="flash.text.engine.LineJustification"/>
	<x path="flash.text.engine.JustificationStyle"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.engine.ElementFormat" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/ElementFormat.hx" extern="1" final="1">
		<alignmentBaseline public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.TextBaseline"/>
			<meta><m n=":flash.property"/></meta>
		</alignmentBaseline>
		<alpha public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</alpha>
		<baselineShift public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</baselineShift>
		<breakOpportunity public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.BreakOpportunity"/>
			<meta><m n=":flash.property"/></meta>
		</breakOpportunity>
		<color public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</color>
		<digitCase public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.DigitCase"/>
			<meta><m n=":flash.property"/></meta>
		</digitCase>
		<digitWidth public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.DigitWidth"/>
			<meta><m n=":flash.property"/></meta>
		</digitWidth>
		<dominantBaseline public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.TextBaseline"/>
			<meta><m n=":flash.property"/></meta>
		</dominantBaseline>
		<fontDescription public="1" get="accessor" set="accessor">
			<c path="flash.text.engine.FontDescription"/>
			<meta><m n=":flash.property"/></meta>
		</fontDescription>
		<fontSize public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</fontSize>
		<kerning public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.Kerning"/>
			<meta><m n=":flash.property"/></meta>
		</kerning>
		<ligatureLevel public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.LigatureLevel"/>
			<meta><m n=":flash.property"/></meta>
		</ligatureLevel>
		<locale public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</locale>
		<locked public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</locked>
		<textRotation public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.TextRotation"/>
			<meta><m n=":flash.property"/></meta>
		</textRotation>
		<trackingLeft public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</trackingLeft>
		<trackingRight public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</trackingRight>
		<typographicCase public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.TypographicCase"/>
			<meta><m n=":flash.property"/></meta>
		</typographicCase>
		<clone public="1" set="method"><f a=""><c path="flash.text.engine.ElementFormat"/></f></clone>
		<getFontMetrics public="1" set="method"><f a=""><c path="flash.text.engine.FontMetrics"/></f></getFontMetrics>
		<get_alignmentBaseline set="method"><f a=""><x path="flash.text.engine.TextBaseline"/></f></get_alignmentBaseline>
		<get_alpha set="method"><f a=""><x path="Float"/></f></get_alpha>
		<get_baselineShift set="method"><f a=""><x path="Float"/></f></get_baselineShift>
		<get_breakOpportunity set="method"><f a=""><x path="flash.text.engine.BreakOpportunity"/></f></get_breakOpportunity>
		<get_color set="method"><f a=""><x path="UInt"/></f></get_color>
		<get_digitCase set="method"><f a=""><x path="flash.text.engine.DigitCase"/></f></get_digitCase>
		<get_digitWidth set="method"><f a=""><x path="flash.text.engine.DigitWidth"/></f></get_digitWidth>
		<get_dominantBaseline set="method"><f a=""><x path="flash.text.engine.TextBaseline"/></f></get_dominantBaseline>
		<get_fontDescription set="method"><f a=""><c path="flash.text.engine.FontDescription"/></f></get_fontDescription>
		<get_fontSize set="method"><f a=""><x path="Float"/></f></get_fontSize>
		<get_kerning set="method"><f a=""><x path="flash.text.engine.Kerning"/></f></get_kerning>
		<get_ligatureLevel set="method"><f a=""><x path="flash.text.engine.LigatureLevel"/></f></get_ligatureLevel>
		<get_locale set="method"><f a=""><c path="String"/></f></get_locale>
		<get_locked set="method"><f a=""><x path="Bool"/></f></get_locked>
		<get_textRotation set="method"><f a=""><x path="flash.text.engine.TextRotation"/></f></get_textRotation>
		<get_trackingLeft set="method"><f a=""><x path="Float"/></f></get_trackingLeft>
		<get_trackingRight set="method"><f a=""><x path="Float"/></f></get_trackingRight>
		<get_typographicCase set="method"><f a=""><x path="flash.text.engine.TypographicCase"/></f></get_typographicCase>
		<set_alignmentBaseline set="method"><f a="value">
	<x path="flash.text.engine.TextBaseline"/>
	<x path="flash.text.engine.TextBaseline"/>
</f></set_alignmentBaseline>
		<set_alpha set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<set_baselineShift set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_baselineShift>
		<set_breakOpportunity set="method"><f a="value">
	<x path="flash.text.engine.BreakOpportunity"/>
	<x path="flash.text.engine.BreakOpportunity"/>
</f></set_breakOpportunity>
		<set_color set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_color>
		<set_digitCase set="method"><f a="value">
	<x path="flash.text.engine.DigitCase"/>
	<x path="flash.text.engine.DigitCase"/>
</f></set_digitCase>
		<set_digitWidth set="method"><f a="value">
	<x path="flash.text.engine.DigitWidth"/>
	<x path="flash.text.engine.DigitWidth"/>
</f></set_digitWidth>
		<set_dominantBaseline set="method"><f a="value">
	<x path="flash.text.engine.TextBaseline"/>
	<x path="flash.text.engine.TextBaseline"/>
</f></set_dominantBaseline>
		<set_fontDescription set="method"><f a="value">
	<c path="flash.text.engine.FontDescription"/>
	<c path="flash.text.engine.FontDescription"/>
</f></set_fontDescription>
		<set_fontSize set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_fontSize>
		<set_kerning set="method"><f a="value">
	<x path="flash.text.engine.Kerning"/>
	<x path="flash.text.engine.Kerning"/>
</f></set_kerning>
		<set_ligatureLevel set="method"><f a="value">
	<x path="flash.text.engine.LigatureLevel"/>
	<x path="flash.text.engine.LigatureLevel"/>
</f></set_ligatureLevel>
		<set_locale set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_locale>
		<set_locked set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_locked>
		<set_textRotation set="method"><f a="value">
	<x path="flash.text.engine.TextRotation"/>
	<x path="flash.text.engine.TextRotation"/>
</f></set_textRotation>
		<set_trackingLeft set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_trackingLeft>
		<set_trackingRight set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_trackingRight>
		<set_typographicCase set="method"><f a="value">
	<x path="flash.text.engine.TypographicCase"/>
	<x path="flash.text.engine.TypographicCase"/>
</f></set_typographicCase>
		<new public="1" set="method">
			<f a="?fontDescription:?fontSize:?color:?alpha:?textRotation:?dominantBaseline:?alignmentBaseline:?baselineShift:?kerning:?trackingRight:?trackingLeft:?locale:?breakOpportunity:?digitCase:?digitWidth:?ligatureLevel:?typographicCase" v=":12:0:1::::0::0:0::::::">
				<c path="flash.text.engine.FontDescription"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="flash.text.engine.TextRotation"/>
				<x path="flash.text.engine.TextBaseline"/>
				<x path="flash.text.engine.TextBaseline"/>
				<x path="Float"/>
				<x path="flash.text.engine.Kerning"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
				<x path="flash.text.engine.BreakOpportunity"/>
				<x path="flash.text.engine.DigitCase"/>
				<x path="flash.text.engine.DigitWidth"/>
				<x path="flash.text.engine.LigatureLevel"/>
				<x path="flash.text.engine.TypographicCase"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ trackingLeft : 0, trackingRight : 0, baselineShift : 0, alpha : 1, color : 0, fontSize : 12 }</e></m></meta>
		</new>
	</class>
	<class path="flash.text.engine.FontDescription" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/FontDescription.hx" extern="1" final="1">
		<isDeviceFontCompatible public="1" set="method" static="1">
			<f a="fontName:fontWeight:fontPosture">
				<c path="String"/>
				<x path="flash.text.engine.FontWeight"/>
				<x path="flash.text.engine.FontPosture"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isDeviceFontCompatible>
		<isFontCompatible public="1" set="method" static="1"><f a="fontName:fontWeight:fontPosture">
	<c path="String"/>
	<x path="flash.text.engine.FontWeight"/>
	<x path="flash.text.engine.FontPosture"/>
	<x path="Bool"/>
</f></isFontCompatible>
		<cffHinting public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.CFFHinting"/>
			<meta><m n=":flash.property"/></meta>
		</cffHinting>
		<fontLookup public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.FontLookup"/>
			<meta><m n=":flash.property"/></meta>
		</fontLookup>
		<fontName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</fontName>
		<fontPosture public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.FontPosture"/>
			<meta><m n=":flash.property"/></meta>
		</fontPosture>
		<fontWeight public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.FontWeight"/>
			<meta><m n=":flash.property"/></meta>
		</fontWeight>
		<locked public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</locked>
		<renderingMode public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.RenderingMode"/>
			<meta><m n=":flash.property"/></meta>
		</renderingMode>
		<clone public="1" set="method"><f a=""><c path="flash.text.engine.FontDescription"/></f></clone>
		<get_cffHinting set="method"><f a=""><x path="flash.text.engine.CFFHinting"/></f></get_cffHinting>
		<get_fontLookup set="method"><f a=""><x path="flash.text.engine.FontLookup"/></f></get_fontLookup>
		<get_fontName set="method"><f a=""><c path="String"/></f></get_fontName>
		<get_fontPosture set="method"><f a=""><x path="flash.text.engine.FontPosture"/></f></get_fontPosture>
		<get_fontWeight set="method"><f a=""><x path="flash.text.engine.FontWeight"/></f></get_fontWeight>
		<get_locked set="method"><f a=""><x path="Bool"/></f></get_locked>
		<get_renderingMode set="method"><f a=""><x path="flash.text.engine.RenderingMode"/></f></get_renderingMode>
		<set_cffHinting set="method"><f a="value">
	<x path="flash.text.engine.CFFHinting"/>
	<x path="flash.text.engine.CFFHinting"/>
</f></set_cffHinting>
		<set_fontLookup set="method"><f a="value">
	<x path="flash.text.engine.FontLookup"/>
	<x path="flash.text.engine.FontLookup"/>
</f></set_fontLookup>
		<set_fontName set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_fontName>
		<set_fontPosture set="method"><f a="value">
	<x path="flash.text.engine.FontPosture"/>
	<x path="flash.text.engine.FontPosture"/>
</f></set_fontPosture>
		<set_fontWeight set="method"><f a="value">
	<x path="flash.text.engine.FontWeight"/>
	<x path="flash.text.engine.FontWeight"/>
</f></set_fontWeight>
		<set_locked set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_locked>
		<set_renderingMode set="method"><f a="value">
	<x path="flash.text.engine.RenderingMode"/>
	<x path="flash.text.engine.RenderingMode"/>
</f></set_renderingMode>
		<new public="1" set="method"><f a="?fontName:?fontWeight:?fontPosture:?fontLookup:?renderingMode:?cffHinting">
	<c path="String"/>
	<x path="flash.text.engine.FontWeight"/>
	<x path="flash.text.engine.FontPosture"/>
	<x path="flash.text.engine.FontLookup"/>
	<x path="flash.text.engine.RenderingMode"/>
	<x path="flash.text.engine.CFFHinting"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="flash.text.engine.FontLookup" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/FontLookup.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.FontLookup"</e></m>
		</meta>
		<impl><class path="flash.text.engine._FontLookup.FontLookup_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/FontLookup.hx" private="1" module="flash.text.engine.FontLookup" extern="1" final="1">
	<DEVICE public="1" set="null" static="1">
		<x path="flash.text.engine.FontLookup"/>
		<meta><m n=":enum"/></meta>
	</DEVICE>
	<EMBEDDED_CFF public="1" set="null" static="1">
		<x path="flash.text.engine.FontLookup"/>
		<meta><m n=":enum"/></meta>
	</EMBEDDED_CFF>
	<meta>
		<m n=":native"><e>"flash.text.engine.FontLookup"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._FontLookup.FontLookup_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/FontLookup.hx" private="1" module="flash.text.engine.FontLookup" extern="1" final="1">
		<DEVICE public="1" set="null" static="1">
			<x path="flash.text.engine.FontLookup"/>
			<meta><m n=":enum"/></meta>
		</DEVICE>
		<EMBEDDED_CFF public="1" set="null" static="1">
			<x path="flash.text.engine.FontLookup"/>
			<meta><m n=":enum"/></meta>
		</EMBEDDED_CFF>
		<meta>
			<m n=":native"><e>"flash.text.engine.FontLookup"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.text.engine.FontMetrics" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/FontMetrics.hx" extern="1" final="1">
		<emBox public="1"><c path="flash.geom.Rectangle"/></emBox>
		<lineGap public="1"><x path="Float"/></lineGap>
		<strikethroughOffset public="1"><x path="Float"/></strikethroughOffset>
		<strikethroughThickness public="1"><x path="Float"/></strikethroughThickness>
		<subscriptOffset public="1"><x path="Float"/></subscriptOffset>
		<subscriptScale public="1"><x path="Float"/></subscriptScale>
		<superscriptOffset public="1"><x path="Float"/></superscriptOffset>
		<superscriptScale public="1"><x path="Float"/></superscriptScale>
		<underlineOffset public="1"><x path="Float"/></underlineOffset>
		<underlineThickness public="1"><x path="Float"/></underlineThickness>
		<new public="1" set="method">
			<f a="emBox:strikethroughOffset:strikethroughThickness:underlineOffset:underlineThickness:subscriptOffset:subscriptScale:superscriptOffset:superscriptScale:?lineGap" v=":::::::::0">
				<c path="flash.geom.Rectangle"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ lineGap : 0 }</e></m></meta>
		</new>
	</class>
	<abstract path="flash.text.engine.FontPosture" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/FontPosture.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.FontPosture"</e></m>
		</meta>
		<impl><class path="flash.text.engine._FontPosture.FontPosture_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/FontPosture.hx" private="1" module="flash.text.engine.FontPosture" extern="1" final="1">
	<ITALIC public="1" set="null" static="1">
		<x path="flash.text.engine.FontPosture"/>
		<meta><m n=":enum"/></meta>
	</ITALIC>
	<NORMAL public="1" set="null" static="1">
		<x path="flash.text.engine.FontPosture"/>
		<meta><m n=":enum"/></meta>
	</NORMAL>
	<meta>
		<m n=":native"><e>"flash.text.engine.FontPosture"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._FontPosture.FontPosture_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/FontPosture.hx" private="1" module="flash.text.engine.FontPosture" extern="1" final="1">
		<ITALIC public="1" set="null" static="1">
			<x path="flash.text.engine.FontPosture"/>
			<meta><m n=":enum"/></meta>
		</ITALIC>
		<NORMAL public="1" set="null" static="1">
			<x path="flash.text.engine.FontPosture"/>
			<meta><m n=":enum"/></meta>
		</NORMAL>
		<meta>
			<m n=":native"><e>"flash.text.engine.FontPosture"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.engine.FontWeight" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/FontWeight.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.FontWeight"</e></m>
		</meta>
		<impl><class path="flash.text.engine._FontWeight.FontWeight_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/FontWeight.hx" private="1" module="flash.text.engine.FontWeight" extern="1" final="1">
	<BOLD public="1" set="null" static="1">
		<x path="flash.text.engine.FontWeight"/>
		<meta><m n=":enum"/></meta>
	</BOLD>
	<NORMAL public="1" set="null" static="1">
		<x path="flash.text.engine.FontWeight"/>
		<meta><m n=":enum"/></meta>
	</NORMAL>
	<meta>
		<m n=":native"><e>"flash.text.engine.FontWeight"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._FontWeight.FontWeight_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/FontWeight.hx" private="1" module="flash.text.engine.FontWeight" extern="1" final="1">
		<BOLD public="1" set="null" static="1">
			<x path="flash.text.engine.FontWeight"/>
			<meta><m n=":enum"/></meta>
		</BOLD>
		<NORMAL public="1" set="null" static="1">
			<x path="flash.text.engine.FontWeight"/>
			<meta><m n=":enum"/></meta>
		</NORMAL>
		<meta>
			<m n=":native"><e>"flash.text.engine.FontWeight"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.text.engine.GraphicElement" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/GraphicElement.hx" extern="1" final="1">
		<extends path="flash.text.engine.ContentElement"/>
		<elementHeight public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</elementHeight>
		<elementWidth public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</elementWidth>
		<graphic public="1" get="accessor" set="accessor">
			<c path="flash.display.DisplayObject"/>
			<meta><m n=":flash.property"/></meta>
		</graphic>
		<get_elementHeight set="method"><f a=""><x path="Float"/></f></get_elementHeight>
		<get_elementWidth set="method"><f a=""><x path="Float"/></f></get_elementWidth>
		<get_graphic set="method"><f a=""><c path="flash.display.DisplayObject"/></f></get_graphic>
		<set_elementHeight set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_elementHeight>
		<set_elementWidth set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_elementWidth>
		<set_graphic set="method"><f a="value">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></set_graphic>
		<new public="1" set="method">
			<f a="?graphic:?elementWidth:?elementHeight:?elementFormat:?eventMirror:?textRotation" v=":15:15:::">
				<c path="flash.display.DisplayObject"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="flash.text.engine.ElementFormat"/>
				<c path="flash.events.EventDispatcher"/>
				<x path="flash.text.engine.TextRotation"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ elementHeight : 15, elementWidth : 15 }</e></m></meta>
		</new>
	</class>
	<class path="flash.text.engine.GroupElement" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/GroupElement.hx" extern="1" final="1">
		<extends path="flash.text.engine.ContentElement"/>
		<elementCount public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</elementCount>
		<getElementAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.text.engine.ContentElement"/>
</f></getElementAt>
		<getElementAtCharIndex public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<c path="flash.text.engine.ContentElement"/>
</f></getElementAtCharIndex>
		<getElementIndex public="1" set="method"><f a="element">
	<c path="flash.text.engine.ContentElement"/>
	<x path="Int"/>
</f></getElementIndex>
		<get_elementCount set="method"><f a=""><x path="Int"/></f></get_elementCount>
		<groupElements public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.text.engine.GroupElement"/>
</f></groupElements>
		<mergeTextElements public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.text.engine.TextElement"/>
</f></mergeTextElements>
		<replaceElements public="1" set="method"><f a="beginIndex:endIndex:newElements">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.text.engine.ContentElement"/></c>
	<c path="flash.Vector"><c path="flash.text.engine.ContentElement"/></c>
</f></replaceElements>
		<setElements public="1" set="method"><f a="value">
	<c path="flash.Vector"><c path="flash.text.engine.ContentElement"/></c>
	<x path="Void"/>
</f></setElements>
		<splitTextElement public="1" set="method"><f a="elementIndex:splitIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.text.engine.TextElement"/>
</f></splitTextElement>
		<ungroupElements public="1" set="method"><f a="groupIndex">
	<x path="Int"/>
	<x path="Void"/>
</f></ungroupElements>
		<new public="1" set="method"><f a="?elements:?elementFormat:?eventMirror:?textRotation">
	<c path="flash.Vector"><c path="flash.text.engine.ContentElement"/></c>
	<c path="flash.text.engine.ElementFormat"/>
	<c path="flash.events.EventDispatcher"/>
	<x path="flash.text.engine.TextRotation"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="flash.text.engine.JustificationStyle" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/JustificationStyle.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.JustificationStyle"</e></m>
		</meta>
		<impl><class path="flash.text.engine._JustificationStyle.JustificationStyle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/JustificationStyle.hx" private="1" module="flash.text.engine.JustificationStyle" extern="1" final="1">
	<PRIORITIZE_LEAST_ADJUSTMENT public="1" set="null" static="1">
		<x path="flash.text.engine.JustificationStyle"/>
		<meta><m n=":enum"/></meta>
	</PRIORITIZE_LEAST_ADJUSTMENT>
	<PUSH_IN_KINSOKU public="1" set="null" static="1">
		<x path="flash.text.engine.JustificationStyle"/>
		<meta><m n=":enum"/></meta>
	</PUSH_IN_KINSOKU>
	<PUSH_OUT_ONLY public="1" set="null" static="1">
		<x path="flash.text.engine.JustificationStyle"/>
		<meta><m n=":enum"/></meta>
	</PUSH_OUT_ONLY>
	<meta>
		<m n=":native"><e>"flash.text.engine.JustificationStyle"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._JustificationStyle.JustificationStyle_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/JustificationStyle.hx" private="1" module="flash.text.engine.JustificationStyle" extern="1" final="1">
		<PRIORITIZE_LEAST_ADJUSTMENT public="1" set="null" static="1">
			<x path="flash.text.engine.JustificationStyle"/>
			<meta><m n=":enum"/></meta>
		</PRIORITIZE_LEAST_ADJUSTMENT>
		<PUSH_IN_KINSOKU public="1" set="null" static="1">
			<x path="flash.text.engine.JustificationStyle"/>
			<meta><m n=":enum"/></meta>
		</PUSH_IN_KINSOKU>
		<PUSH_OUT_ONLY public="1" set="null" static="1">
			<x path="flash.text.engine.JustificationStyle"/>
			<meta><m n=":enum"/></meta>
		</PUSH_OUT_ONLY>
		<meta>
			<m n=":native"><e>"flash.text.engine.JustificationStyle"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.engine.Kerning" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/Kerning.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.Kerning"</e></m>
		</meta>
		<impl><class path="flash.text.engine._Kerning.Kerning_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/Kerning.hx" private="1" module="flash.text.engine.Kerning" extern="1" final="1">
	<AUTO public="1" set="null" static="1">
		<x path="flash.text.engine.Kerning"/>
		<meta><m n=":enum"/></meta>
	</AUTO>
	<OFF public="1" set="null" static="1">
		<x path="flash.text.engine.Kerning"/>
		<meta><m n=":enum"/></meta>
	</OFF>
	<ON public="1" set="null" static="1">
		<x path="flash.text.engine.Kerning"/>
		<meta><m n=":enum"/></meta>
	</ON>
	<meta>
		<m n=":native"><e>"flash.text.engine.Kerning"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._Kerning.Kerning_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/Kerning.hx" private="1" module="flash.text.engine.Kerning" extern="1" final="1">
		<AUTO public="1" set="null" static="1">
			<x path="flash.text.engine.Kerning"/>
			<meta><m n=":enum"/></meta>
		</AUTO>
		<OFF public="1" set="null" static="1">
			<x path="flash.text.engine.Kerning"/>
			<meta><m n=":enum"/></meta>
		</OFF>
		<ON public="1" set="null" static="1">
			<x path="flash.text.engine.Kerning"/>
			<meta><m n=":enum"/></meta>
		</ON>
		<meta>
			<m n=":native"><e>"flash.text.engine.Kerning"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.engine.LigatureLevel" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/LigatureLevel.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.LigatureLevel"</e></m>
		</meta>
		<impl><class path="flash.text.engine._LigatureLevel.LigatureLevel_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/LigatureLevel.hx" private="1" module="flash.text.engine.LigatureLevel" extern="1" final="1">
	<COMMON public="1" set="null" static="1">
		<x path="flash.text.engine.LigatureLevel"/>
		<meta><m n=":enum"/></meta>
	</COMMON>
	<EXOTIC public="1" set="null" static="1">
		<x path="flash.text.engine.LigatureLevel"/>
		<meta><m n=":enum"/></meta>
	</EXOTIC>
	<MINIMUM public="1" set="null" static="1">
		<x path="flash.text.engine.LigatureLevel"/>
		<meta><m n=":enum"/></meta>
	</MINIMUM>
	<NONE public="1" set="null" static="1">
		<x path="flash.text.engine.LigatureLevel"/>
		<meta><m n=":enum"/></meta>
	</NONE>
	<UNCOMMON public="1" set="null" static="1">
		<x path="flash.text.engine.LigatureLevel"/>
		<meta><m n=":enum"/></meta>
	</UNCOMMON>
	<meta>
		<m n=":native"><e>"flash.text.engine.LigatureLevel"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._LigatureLevel.LigatureLevel_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/LigatureLevel.hx" private="1" module="flash.text.engine.LigatureLevel" extern="1" final="1">
		<COMMON public="1" set="null" static="1">
			<x path="flash.text.engine.LigatureLevel"/>
			<meta><m n=":enum"/></meta>
		</COMMON>
		<EXOTIC public="1" set="null" static="1">
			<x path="flash.text.engine.LigatureLevel"/>
			<meta><m n=":enum"/></meta>
		</EXOTIC>
		<MINIMUM public="1" set="null" static="1">
			<x path="flash.text.engine.LigatureLevel"/>
			<meta><m n=":enum"/></meta>
		</MINIMUM>
		<NONE public="1" set="null" static="1">
			<x path="flash.text.engine.LigatureLevel"/>
			<meta><m n=":enum"/></meta>
		</NONE>
		<UNCOMMON public="1" set="null" static="1">
			<x path="flash.text.engine.LigatureLevel"/>
			<meta><m n=":enum"/></meta>
		</UNCOMMON>
		<meta>
			<m n=":native"><e>"flash.text.engine.LigatureLevel"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.engine.LineJustification" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/LineJustification.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.LineJustification"</e></m>
		</meta>
		<impl><class path="flash.text.engine._LineJustification.LineJustification_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/LineJustification.hx" private="1" module="flash.text.engine.LineJustification" extern="1" final="1">
	<ALL_BUT_LAST public="1" set="null" static="1">
		<x path="flash.text.engine.LineJustification"/>
		<meta><m n=":enum"/></meta>
	</ALL_BUT_LAST>
	<ALL_BUT_MANDATORY_BREAK public="1" set="null" static="1">
		<x path="flash.text.engine.LineJustification"/>
		<meta><m n=":enum"/></meta>
	</ALL_BUT_MANDATORY_BREAK>
	<ALL_INCLUDING_LAST public="1" set="null" static="1">
		<x path="flash.text.engine.LineJustification"/>
		<meta><m n=":enum"/></meta>
	</ALL_INCLUDING_LAST>
	<UNJUSTIFIED public="1" set="null" static="1">
		<x path="flash.text.engine.LineJustification"/>
		<meta><m n=":enum"/></meta>
	</UNJUSTIFIED>
	<meta>
		<m n=":native"><e>"flash.text.engine.LineJustification"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._LineJustification.LineJustification_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/LineJustification.hx" private="1" module="flash.text.engine.LineJustification" extern="1" final="1">
		<ALL_BUT_LAST public="1" set="null" static="1">
			<x path="flash.text.engine.LineJustification"/>
			<meta><m n=":enum"/></meta>
		</ALL_BUT_LAST>
		<ALL_BUT_MANDATORY_BREAK public="1" set="null" static="1">
			<x path="flash.text.engine.LineJustification"/>
			<meta><m n=":enum"/></meta>
		</ALL_BUT_MANDATORY_BREAK>
		<ALL_INCLUDING_LAST public="1" set="null" static="1">
			<x path="flash.text.engine.LineJustification"/>
			<meta><m n=":enum"/></meta>
		</ALL_INCLUDING_LAST>
		<UNJUSTIFIED public="1" set="null" static="1">
			<x path="flash.text.engine.LineJustification"/>
			<meta><m n=":enum"/></meta>
		</UNJUSTIFIED>
		<meta>
			<m n=":native"><e>"flash.text.engine.LineJustification"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.engine.RenderingMode" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/RenderingMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.RenderingMode"</e></m>
		</meta>
		<impl><class path="flash.text.engine._RenderingMode.RenderingMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/RenderingMode.hx" private="1" module="flash.text.engine.RenderingMode" extern="1" final="1">
	<CFF public="1" set="null" static="1">
		<x path="flash.text.engine.RenderingMode"/>
		<meta><m n=":enum"/></meta>
	</CFF>
	<NORMAL public="1" set="null" static="1">
		<x path="flash.text.engine.RenderingMode"/>
		<meta><m n=":enum"/></meta>
	</NORMAL>
	<meta>
		<m n=":native"><e>"flash.text.engine.RenderingMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._RenderingMode.RenderingMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/RenderingMode.hx" private="1" module="flash.text.engine.RenderingMode" extern="1" final="1">
		<CFF public="1" set="null" static="1">
			<x path="flash.text.engine.RenderingMode"/>
			<meta><m n=":enum"/></meta>
		</CFF>
		<NORMAL public="1" set="null" static="1">
			<x path="flash.text.engine.RenderingMode"/>
			<meta><m n=":enum"/></meta>
		</NORMAL>
		<meta>
			<m n=":native"><e>"flash.text.engine.RenderingMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.text.engine.SpaceJustifier" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/SpaceJustifier.hx" extern="1" final="1">
		<extends path="flash.text.engine.TextJustifier"/>
		<letterSpacing public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</letterSpacing>
		<maximumSpacing public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</maximumSpacing>
		<minimumSpacing public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</minimumSpacing>
		<optimumSpacing public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</optimumSpacing>
		<get_letterSpacing set="method"><f a=""><x path="Bool"/></f></get_letterSpacing>
		<get_maximumSpacing set="method"><f a=""><x path="Float"/></f></get_maximumSpacing>
		<get_minimumSpacing set="method"><f a=""><x path="Float"/></f></get_minimumSpacing>
		<get_optimumSpacing set="method"><f a=""><x path="Float"/></f></get_optimumSpacing>
		<set_letterSpacing set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_letterSpacing>
		<set_maximumSpacing set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_maximumSpacing>
		<set_minimumSpacing set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_minimumSpacing>
		<set_optimumSpacing set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_optimumSpacing>
		<new public="1" set="method">
			<f a="?locale:?lineJustification:?letterSpacing" v="::false">
				<c path="String"/>
				<x path="flash.text.engine.LineJustification"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ letterSpacing : false }</e></m></meta>
		</new>
	</class>
	<abstract path="flash.text.engine.TabAlignment" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TabAlignment.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.TabAlignment"</e></m>
		</meta>
		<impl><class path="flash.text.engine._TabAlignment.TabAlignment_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TabAlignment.hx" private="1" module="flash.text.engine.TabAlignment" extern="1" final="1">
	<CENTER public="1" set="null" static="1">
		<x path="flash.text.engine.TabAlignment"/>
		<meta><m n=":enum"/></meta>
	</CENTER>
	<DECIMAL public="1" set="null" static="1">
		<x path="flash.text.engine.TabAlignment"/>
		<meta><m n=":enum"/></meta>
	</DECIMAL>
	<END public="1" set="null" static="1">
		<x path="flash.text.engine.TabAlignment"/>
		<meta><m n=":enum"/></meta>
	</END>
	<START public="1" set="null" static="1">
		<x path="flash.text.engine.TabAlignment"/>
		<meta><m n=":enum"/></meta>
	</START>
	<meta>
		<m n=":native"><e>"flash.text.engine.TabAlignment"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._TabAlignment.TabAlignment_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TabAlignment.hx" private="1" module="flash.text.engine.TabAlignment" extern="1" final="1">
		<CENTER public="1" set="null" static="1">
			<x path="flash.text.engine.TabAlignment"/>
			<meta><m n=":enum"/></meta>
		</CENTER>
		<DECIMAL public="1" set="null" static="1">
			<x path="flash.text.engine.TabAlignment"/>
			<meta><m n=":enum"/></meta>
		</DECIMAL>
		<END public="1" set="null" static="1">
			<x path="flash.text.engine.TabAlignment"/>
			<meta><m n=":enum"/></meta>
		</END>
		<START public="1" set="null" static="1">
			<x path="flash.text.engine.TabAlignment"/>
			<meta><m n=":enum"/></meta>
		</START>
		<meta>
			<m n=":native"><e>"flash.text.engine.TabAlignment"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.text.engine.TabStop" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TabStop.hx" extern="1" final="1">
		<alignment public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.TabAlignment"/>
			<meta><m n=":flash.property"/></meta>
		</alignment>
		<decimalAlignmentToken public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</decimalAlignmentToken>
		<position public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</position>
		<get_alignment set="method"><f a=""><x path="flash.text.engine.TabAlignment"/></f></get_alignment>
		<get_decimalAlignmentToken set="method"><f a=""><c path="String"/></f></get_decimalAlignmentToken>
		<get_position set="method"><f a=""><x path="Float"/></f></get_position>
		<set_alignment set="method"><f a="value">
	<x path="flash.text.engine.TabAlignment"/>
	<x path="flash.text.engine.TabAlignment"/>
</f></set_alignment>
		<set_decimalAlignmentToken set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_decimalAlignmentToken>
		<set_position set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_position>
		<new public="1" set="method">
			<f a="?alignment:?position:?decimalAlignmentToken" v=":0:">
				<x path="flash.text.engine.TabAlignment"/>
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ position : 0 }</e></m></meta>
		</new>
	</class>
	<abstract path="flash.text.engine.TextBaseline" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextBaseline.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.TextBaseline"</e></m>
		</meta>
		<impl><class path="flash.text.engine._TextBaseline.TextBaseline_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextBaseline.hx" private="1" module="flash.text.engine.TextBaseline" extern="1" final="1">
	<ASCENT public="1" set="null" static="1">
		<x path="flash.text.engine.TextBaseline"/>
		<meta><m n=":enum"/></meta>
	</ASCENT>
	<DESCENT public="1" set="null" static="1">
		<x path="flash.text.engine.TextBaseline"/>
		<meta><m n=":enum"/></meta>
	</DESCENT>
	<IDEOGRAPHIC_BOTTOM public="1" set="null" static="1">
		<x path="flash.text.engine.TextBaseline"/>
		<meta><m n=":enum"/></meta>
	</IDEOGRAPHIC_BOTTOM>
	<IDEOGRAPHIC_CENTER public="1" set="null" static="1">
		<x path="flash.text.engine.TextBaseline"/>
		<meta><m n=":enum"/></meta>
	</IDEOGRAPHIC_CENTER>
	<IDEOGRAPHIC_TOP public="1" set="null" static="1">
		<x path="flash.text.engine.TextBaseline"/>
		<meta><m n=":enum"/></meta>
	</IDEOGRAPHIC_TOP>
	<ROMAN public="1" set="null" static="1">
		<x path="flash.text.engine.TextBaseline"/>
		<meta><m n=":enum"/></meta>
	</ROMAN>
	<USE_DOMINANT_BASELINE public="1" set="null" static="1">
		<x path="flash.text.engine.TextBaseline"/>
		<meta><m n=":enum"/></meta>
	</USE_DOMINANT_BASELINE>
	<meta>
		<m n=":native"><e>"flash.text.engine.TextBaseline"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._TextBaseline.TextBaseline_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextBaseline.hx" private="1" module="flash.text.engine.TextBaseline" extern="1" final="1">
		<ASCENT public="1" set="null" static="1">
			<x path="flash.text.engine.TextBaseline"/>
			<meta><m n=":enum"/></meta>
		</ASCENT>
		<DESCENT public="1" set="null" static="1">
			<x path="flash.text.engine.TextBaseline"/>
			<meta><m n=":enum"/></meta>
		</DESCENT>
		<IDEOGRAPHIC_BOTTOM public="1" set="null" static="1">
			<x path="flash.text.engine.TextBaseline"/>
			<meta><m n=":enum"/></meta>
		</IDEOGRAPHIC_BOTTOM>
		<IDEOGRAPHIC_CENTER public="1" set="null" static="1">
			<x path="flash.text.engine.TextBaseline"/>
			<meta><m n=":enum"/></meta>
		</IDEOGRAPHIC_CENTER>
		<IDEOGRAPHIC_TOP public="1" set="null" static="1">
			<x path="flash.text.engine.TextBaseline"/>
			<meta><m n=":enum"/></meta>
		</IDEOGRAPHIC_TOP>
		<ROMAN public="1" set="null" static="1">
			<x path="flash.text.engine.TextBaseline"/>
			<meta><m n=":enum"/></meta>
		</ROMAN>
		<USE_DOMINANT_BASELINE public="1" set="null" static="1">
			<x path="flash.text.engine.TextBaseline"/>
			<meta><m n=":enum"/></meta>
		</USE_DOMINANT_BASELINE>
		<meta>
			<m n=":native"><e>"flash.text.engine.TextBaseline"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.text.engine.TextBlock" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextBlock.hx" extern="1" final="1">
		<applyNonLinearFontScaling public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</applyNonLinearFontScaling>
		<baselineFontDescription public="1" get="accessor" set="accessor">
			<c path="flash.text.engine.FontDescription"/>
			<meta><m n=":flash.property"/></meta>
		</baselineFontDescription>
		<baselineFontSize public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</baselineFontSize>
		<baselineZero public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.TextBaseline"/>
			<meta><m n=":flash.property"/></meta>
		</baselineZero>
		<bidiLevel public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</bidiLevel>
		<content public="1" get="accessor" set="accessor">
			<c path="flash.text.engine.ContentElement"/>
			<meta><m n=":flash.property"/></meta>
		</content>
		<firstInvalidLine public="1" get="accessor" set="null">
			<c path="flash.text.engine.TextLine"/>
			<meta><m n=":flash.property"/></meta>
		</firstInvalidLine>
		<firstLine public="1" get="accessor" set="null">
			<c path="flash.text.engine.TextLine"/>
			<meta><m n=":flash.property"/></meta>
		</firstLine>
		<lastLine public="1" get="accessor" set="null">
			<c path="flash.text.engine.TextLine"/>
			<meta><m n=":flash.property"/></meta>
		</lastLine>
		<lineRotation public="1" get="accessor" set="accessor">
			<x path="flash.text.engine.TextRotation"/>
			<meta><m n=":flash.property"/></meta>
		</lineRotation>
		<tabStops public="1" get="accessor" set="accessor">
			<c path="flash.Vector"><c path="flash.text.engine.TabStop"/></c>
			<meta><m n=":flash.property"/></meta>
		</tabStops>
		<textJustifier public="1" get="accessor" set="accessor">
			<c path="flash.text.engine.TextJustifier"/>
			<meta><m n=":flash.property"/></meta>
		</textJustifier>
		<textLineCreationResult public="1" get="accessor" set="null">
			<x path="flash.text.engine.TextLineCreationResult"/>
			<meta><m n=":flash.property"/></meta>
		</textLineCreationResult>
		<userData public="1"><d/></userData>
		<createTextLine public="1" set="method">
			<f a="?previousLine:?width:?lineOffset:?fitSomething" v=":1000000:0:false">
				<c path="flash.text.engine.TextLine"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.text.engine.TextLine"/>
			</f>
			<meta><m n=":value"><e>{ fitSomething : false, lineOffset : 0, width : 1000000 }</e></m></meta>
		</createTextLine>
		<dump public="1" set="method"><f a=""><c path="String"/></f></dump>
		<findNextAtomBoundary public="1" set="method"><f a="afterCharIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></findNextAtomBoundary>
		<findNextWordBoundary public="1" set="method"><f a="afterCharIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></findNextWordBoundary>
		<findPreviousAtomBoundary public="1" set="method"><f a="beforeCharIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></findPreviousAtomBoundary>
		<findPreviousWordBoundary public="1" set="method"><f a="beforeCharIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></findPreviousWordBoundary>
		<getTextLineAtCharIndex public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<c path="flash.text.engine.TextLine"/>
</f></getTextLineAtCharIndex>
		<get_applyNonLinearFontScaling set="method"><f a=""><x path="Bool"/></f></get_applyNonLinearFontScaling>
		<get_baselineFontDescription set="method"><f a=""><c path="flash.text.engine.FontDescription"/></f></get_baselineFontDescription>
		<get_baselineFontSize set="method"><f a=""><x path="Float"/></f></get_baselineFontSize>
		<get_baselineZero set="method"><f a=""><x path="flash.text.engine.TextBaseline"/></f></get_baselineZero>
		<get_bidiLevel set="method"><f a=""><x path="Int"/></f></get_bidiLevel>
		<get_content set="method"><f a=""><c path="flash.text.engine.ContentElement"/></f></get_content>
		<get_firstInvalidLine set="method"><f a=""><c path="flash.text.engine.TextLine"/></f></get_firstInvalidLine>
		<get_firstLine set="method"><f a=""><c path="flash.text.engine.TextLine"/></f></get_firstLine>
		<get_lastLine set="method"><f a=""><c path="flash.text.engine.TextLine"/></f></get_lastLine>
		<get_lineRotation set="method"><f a=""><x path="flash.text.engine.TextRotation"/></f></get_lineRotation>
		<get_tabStops set="method"><f a=""><c path="flash.Vector"><c path="flash.text.engine.TabStop"/></c></f></get_tabStops>
		<get_textJustifier set="method"><f a=""><c path="flash.text.engine.TextJustifier"/></f></get_textJustifier>
		<get_textLineCreationResult set="method"><f a=""><x path="flash.text.engine.TextLineCreationResult"/></f></get_textLineCreationResult>
		<recreateTextLine public="1" set="method">
			<f a="textLine:?previousLine:?width:?lineOffset:?fitSomething" v="::1000000:0:false">
				<c path="flash.text.engine.TextLine"/>
				<c path="flash.text.engine.TextLine"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.text.engine.TextLine"/>
			</f>
			<meta>
				<m n=":value"><e>{ fitSomething : false, lineOffset : 0, width : 1000000 }</e></m>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</recreateTextLine>
		<releaseLineCreationData public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</releaseLineCreationData>
		<releaseLines public="1" set="method"><f a="firstLine:lastLine">
	<c path="flash.text.engine.TextLine"/>
	<c path="flash.text.engine.TextLine"/>
	<x path="Void"/>
</f></releaseLines>
		<set_applyNonLinearFontScaling set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_applyNonLinearFontScaling>
		<set_baselineFontDescription set="method"><f a="value">
	<c path="flash.text.engine.FontDescription"/>
	<c path="flash.text.engine.FontDescription"/>
</f></set_baselineFontDescription>
		<set_baselineFontSize set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_baselineFontSize>
		<set_baselineZero set="method"><f a="value">
	<x path="flash.text.engine.TextBaseline"/>
	<x path="flash.text.engine.TextBaseline"/>
</f></set_baselineZero>
		<set_bidiLevel set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_bidiLevel>
		<set_content set="method"><f a="value">
	<c path="flash.text.engine.ContentElement"/>
	<c path="flash.text.engine.ContentElement"/>
</f></set_content>
		<set_lineRotation set="method"><f a="value">
	<x path="flash.text.engine.TextRotation"/>
	<x path="flash.text.engine.TextRotation"/>
</f></set_lineRotation>
		<set_tabStops set="method"><f a="value">
	<c path="flash.Vector"><c path="flash.text.engine.TabStop"/></c>
	<c path="flash.Vector"><c path="flash.text.engine.TabStop"/></c>
</f></set_tabStops>
		<set_textJustifier set="method"><f a="value">
	<c path="flash.text.engine.TextJustifier"/>
	<c path="flash.text.engine.TextJustifier"/>
</f></set_textJustifier>
		<new public="1" set="method">
			<f a="?content:?tabStops:?textJustifier:?lineRotation:?baselineZero:?bidiLevel:?applyNonLinearFontScaling:?baselineFontDescription:?baselineFontSize" v=":::::0:true::12">
				<c path="flash.text.engine.ContentElement"/>
				<c path="flash.Vector"><c path="flash.text.engine.TabStop"/></c>
				<c path="flash.text.engine.TextJustifier"/>
				<x path="flash.text.engine.TextRotation"/>
				<x path="flash.text.engine.TextBaseline"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="flash.text.engine.FontDescription"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ baselineFontSize : 12, applyNonLinearFontScaling : true, bidiLevel : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.text.engine.TextElement" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextElement.hx" extern="1" final="1">
		<extends path="flash.text.engine.ContentElement"/>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></replaceText>
		<set_text set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<new public="1" set="method"><f a="?text:?elementFormat:?eventMirror:?textRotation">
	<c path="String"/>
	<c path="flash.text.engine.ElementFormat"/>
	<c path="flash.events.EventDispatcher"/>
	<x path="flash.text.engine.TextRotation"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.engine.TextLine" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextLine.hx" extern="1" final="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<MAX_LINE_WIDTH final="1" public="1" set="null" static="1"><x path="Int"/></MAX_LINE_WIDTH>
		<ascent public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</ascent>
		<atomCount public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</atomCount>
		<descent public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</descent>
		<hasGraphicElement public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</hasGraphicElement>
		<hasTabs public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</hasTabs>
		<mirrorRegions public="1" get="accessor" set="null">
			<c path="flash.Vector"><c path="flash.text.engine.TextLineMirrorRegion"/></c>
			<meta><m n=":flash.property"/></meta>
		</mirrorRegions>
		<nextLine public="1" get="accessor" set="null">
			<c path="flash.text.engine.TextLine"/>
			<meta><m n=":flash.property"/></meta>
		</nextLine>
		<previousLine public="1" get="accessor" set="null">
			<c path="flash.text.engine.TextLine"/>
			<meta><m n=":flash.property"/></meta>
		</previousLine>
		<rawTextLength public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</rawTextLength>
		<specifiedWidth public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</specifiedWidth>
		<textBlock public="1" get="accessor" set="null">
			<c path="flash.text.engine.TextBlock"/>
			<meta><m n=":flash.property"/></meta>
		</textBlock>
		<textBlockBeginIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</textBlockBeginIndex>
		<textHeight public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</textHeight>
		<textWidth public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</textWidth>
		<totalAscent public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</totalAscent>
		<totalDescent public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</totalDescent>
		<totalHeight public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</totalHeight>
		<unjustifiedTextWidth public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</unjustifiedTextWidth>
		<userData public="1"><d/></userData>
		<validity public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</validity>
		<dump public="1" set="method"><f a=""><c path="String"/></f></dump>
		<flushAtomData public="1" set="method"><f a=""><x path="Void"/></f></flushAtomData>
		<getAtomBidiLevel public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getAtomBidiLevel>
		<getAtomBounds public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getAtomBounds>
		<getAtomCenter public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<x path="Float"/>
</f></getAtomCenter>
		<getAtomGraphic public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getAtomGraphic>
		<getAtomIndexAtCharIndex public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getAtomIndexAtCharIndex>
		<getAtomIndexAtPoint public="1" set="method"><f a="stageX:stageY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getAtomIndexAtPoint>
		<getAtomTextBlockBeginIndex public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getAtomTextBlockBeginIndex>
		<getAtomTextBlockEndIndex public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getAtomTextBlockEndIndex>
		<getAtomTextRotation public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<c path="String"/>
</f></getAtomTextRotation>
		<getAtomWordBoundaryOnLeft public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<x path="Bool"/>
</f></getAtomWordBoundaryOnLeft>
		<getBaselinePosition public="1" set="method"><f a="baseline">
	<c path="String"/>
	<x path="Float"/>
</f></getBaselinePosition>
		<getMirrorRegion public="1" set="method"><f a="mirror">
	<c path="flash.events.EventDispatcher"/>
	<c path="flash.text.engine.TextLineMirrorRegion"/>
</f></getMirrorRegion>
		<get_ascent set="method"><f a=""><x path="Float"/></f></get_ascent>
		<get_atomCount set="method"><f a=""><x path="Int"/></f></get_atomCount>
		<get_descent set="method"><f a=""><x path="Float"/></f></get_descent>
		<get_hasGraphicElement set="method"><f a=""><x path="Bool"/></f></get_hasGraphicElement>
		<get_hasTabs set="method"><f a=""><x path="Bool"/></f></get_hasTabs>
		<get_mirrorRegions set="method"><f a=""><c path="flash.Vector"><c path="flash.text.engine.TextLineMirrorRegion"/></c></f></get_mirrorRegions>
		<get_nextLine set="method"><f a=""><c path="flash.text.engine.TextLine"/></f></get_nextLine>
		<get_previousLine set="method"><f a=""><c path="flash.text.engine.TextLine"/></f></get_previousLine>
		<get_rawTextLength set="method"><f a=""><x path="Int"/></f></get_rawTextLength>
		<get_specifiedWidth set="method"><f a=""><x path="Float"/></f></get_specifiedWidth>
		<get_textBlock set="method"><f a=""><c path="flash.text.engine.TextBlock"/></f></get_textBlock>
		<get_textBlockBeginIndex set="method"><f a=""><x path="Int"/></f></get_textBlockBeginIndex>
		<get_textHeight set="method"><f a=""><x path="Float"/></f></get_textHeight>
		<get_textWidth set="method"><f a=""><x path="Float"/></f></get_textWidth>
		<get_totalAscent set="method"><f a=""><x path="Float"/></f></get_totalAscent>
		<get_totalDescent set="method"><f a=""><x path="Float"/></f></get_totalDescent>
		<get_totalHeight set="method"><f a=""><x path="Float"/></f></get_totalHeight>
		<get_unjustifiedTextWidth set="method"><f a=""><x path="Float"/></f></get_unjustifiedTextWidth>
		<get_validity set="method"><f a=""><c path="String"/></f></get_validity>
		<set_validity set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_validity>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.text.engine.TextLineCreationResult" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextLineCreationResult.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.TextLineCreationResult"</e></m>
		</meta>
		<impl><class path="flash.text.engine._TextLineCreationResult.TextLineCreationResult_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextLineCreationResult.hx" private="1" module="flash.text.engine.TextLineCreationResult" extern="1" final="1">
	<COMPLETE public="1" set="null" static="1">
		<x path="flash.text.engine.TextLineCreationResult"/>
		<meta><m n=":enum"/></meta>
	</COMPLETE>
	<EMERGENCY public="1" set="null" static="1">
		<x path="flash.text.engine.TextLineCreationResult"/>
		<meta><m n=":enum"/></meta>
	</EMERGENCY>
	<INSUFFICIENT_WIDTH public="1" set="null" static="1">
		<x path="flash.text.engine.TextLineCreationResult"/>
		<meta><m n=":enum"/></meta>
	</INSUFFICIENT_WIDTH>
	<SUCCESS public="1" set="null" static="1">
		<x path="flash.text.engine.TextLineCreationResult"/>
		<meta><m n=":enum"/></meta>
	</SUCCESS>
	<meta>
		<m n=":native"><e>"flash.text.engine.TextLineCreationResult"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._TextLineCreationResult.TextLineCreationResult_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextLineCreationResult.hx" private="1" module="flash.text.engine.TextLineCreationResult" extern="1" final="1">
		<COMPLETE public="1" set="null" static="1">
			<x path="flash.text.engine.TextLineCreationResult"/>
			<meta><m n=":enum"/></meta>
		</COMPLETE>
		<EMERGENCY public="1" set="null" static="1">
			<x path="flash.text.engine.TextLineCreationResult"/>
			<meta><m n=":enum"/></meta>
		</EMERGENCY>
		<INSUFFICIENT_WIDTH public="1" set="null" static="1">
			<x path="flash.text.engine.TextLineCreationResult"/>
			<meta><m n=":enum"/></meta>
		</INSUFFICIENT_WIDTH>
		<SUCCESS public="1" set="null" static="1">
			<x path="flash.text.engine.TextLineCreationResult"/>
			<meta><m n=":enum"/></meta>
		</SUCCESS>
		<meta>
			<m n=":native"><e>"flash.text.engine.TextLineCreationResult"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.text.engine.TextLineMirrorRegion" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextLineMirrorRegion.hx" extern="1" final="1">
		<bounds public="1" get="accessor" set="null">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":flash.property"/></meta>
		</bounds>
		<element public="1" get="accessor" set="null">
			<c path="flash.text.engine.ContentElement"/>
			<meta><m n=":flash.property"/></meta>
		</element>
		<mirror public="1" get="accessor" set="null">
			<c path="flash.events.EventDispatcher"/>
			<meta><m n=":flash.property"/></meta>
		</mirror>
		<nextRegion public="1" get="accessor" set="null">
			<c path="flash.text.engine.TextLineMirrorRegion"/>
			<meta><m n=":flash.property"/></meta>
		</nextRegion>
		<previousRegion public="1" get="accessor" set="null">
			<c path="flash.text.engine.TextLineMirrorRegion"/>
			<meta><m n=":flash.property"/></meta>
		</previousRegion>
		<textLine public="1" get="accessor" set="null">
			<c path="flash.text.engine.TextLine"/>
			<meta><m n=":flash.property"/></meta>
		</textLine>
		<get_bounds set="method"><f a=""><c path="flash.geom.Rectangle"/></f></get_bounds>
		<get_element set="method"><f a=""><c path="flash.text.engine.ContentElement"/></f></get_element>
		<get_mirror set="method"><f a=""><c path="flash.events.EventDispatcher"/></f></get_mirror>
		<get_nextRegion set="method"><f a=""><c path="flash.text.engine.TextLineMirrorRegion"/></f></get_nextRegion>
		<get_previousRegion set="method"><f a=""><c path="flash.text.engine.TextLineMirrorRegion"/></f></get_previousRegion>
		<get_textLine set="method"><f a=""><c path="flash.text.engine.TextLine"/></f></get_textLine>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.text.engine.TextLineValidity" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextLineValidity.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.TextLineValidity"</e></m>
		</meta>
		<impl><class path="flash.text.engine._TextLineValidity.TextLineValidity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextLineValidity.hx" private="1" module="flash.text.engine.TextLineValidity" extern="1" final="1">
	<INVALID public="1" set="null" static="1">
		<x path="flash.text.engine.TextLineValidity"/>
		<meta><m n=":enum"/></meta>
	</INVALID>
	<POSSIBLY_INVALID public="1" set="null" static="1">
		<x path="flash.text.engine.TextLineValidity"/>
		<meta><m n=":enum"/></meta>
	</POSSIBLY_INVALID>
	<STATIC public="1" set="null" static="1">
		<x path="flash.text.engine.TextLineValidity"/>
		<meta><m n=":enum"/></meta>
	</STATIC>
	<VALID public="1" set="null" static="1">
		<x path="flash.text.engine.TextLineValidity"/>
		<meta><m n=":enum"/></meta>
	</VALID>
	<meta>
		<m n=":native"><e>"flash.text.engine.TextLineValidity"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._TextLineValidity.TextLineValidity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextLineValidity.hx" private="1" module="flash.text.engine.TextLineValidity" extern="1" final="1">
		<INVALID public="1" set="null" static="1">
			<x path="flash.text.engine.TextLineValidity"/>
			<meta><m n=":enum"/></meta>
		</INVALID>
		<POSSIBLY_INVALID public="1" set="null" static="1">
			<x path="flash.text.engine.TextLineValidity"/>
			<meta><m n=":enum"/></meta>
		</POSSIBLY_INVALID>
		<STATIC public="1" set="null" static="1">
			<x path="flash.text.engine.TextLineValidity"/>
			<meta><m n=":enum"/></meta>
		</STATIC>
		<VALID public="1" set="null" static="1">
			<x path="flash.text.engine.TextLineValidity"/>
			<meta><m n=":enum"/></meta>
		</VALID>
		<meta>
			<m n=":native"><e>"flash.text.engine.TextLineValidity"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.engine.TextRotation" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextRotation.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.TextRotation"</e></m>
		</meta>
		<impl><class path="flash.text.engine._TextRotation.TextRotation_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextRotation.hx" private="1" module="flash.text.engine.TextRotation" extern="1" final="1">
	<AUTO public="1" set="null" static="1">
		<x path="flash.text.engine.TextRotation"/>
		<meta><m n=":enum"/></meta>
	</AUTO>
	<ROTATE_0 public="1" set="null" static="1">
		<x path="flash.text.engine.TextRotation"/>
		<meta><m n=":enum"/></meta>
	</ROTATE_0>
	<ROTATE_180 public="1" set="null" static="1">
		<x path="flash.text.engine.TextRotation"/>
		<meta><m n=":enum"/></meta>
	</ROTATE_180>
	<ROTATE_270 public="1" set="null" static="1">
		<x path="flash.text.engine.TextRotation"/>
		<meta><m n=":enum"/></meta>
	</ROTATE_270>
	<ROTATE_90 public="1" set="null" static="1">
		<x path="flash.text.engine.TextRotation"/>
		<meta><m n=":enum"/></meta>
	</ROTATE_90>
	<meta>
		<m n=":native"><e>"flash.text.engine.TextRotation"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._TextRotation.TextRotation_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TextRotation.hx" private="1" module="flash.text.engine.TextRotation" extern="1" final="1">
		<AUTO public="1" set="null" static="1">
			<x path="flash.text.engine.TextRotation"/>
			<meta><m n=":enum"/></meta>
		</AUTO>
		<ROTATE_0 public="1" set="null" static="1">
			<x path="flash.text.engine.TextRotation"/>
			<meta><m n=":enum"/></meta>
		</ROTATE_0>
		<ROTATE_180 public="1" set="null" static="1">
			<x path="flash.text.engine.TextRotation"/>
			<meta><m n=":enum"/></meta>
		</ROTATE_180>
		<ROTATE_270 public="1" set="null" static="1">
			<x path="flash.text.engine.TextRotation"/>
			<meta><m n=":enum"/></meta>
		</ROTATE_270>
		<ROTATE_90 public="1" set="null" static="1">
			<x path="flash.text.engine.TextRotation"/>
			<meta><m n=":enum"/></meta>
		</ROTATE_90>
		<meta>
			<m n=":native"><e>"flash.text.engine.TextRotation"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.text.engine.TypographicCase" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TypographicCase.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.text.engine.TypographicCase"</e></m>
		</meta>
		<impl><class path="flash.text.engine._TypographicCase.TypographicCase_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TypographicCase.hx" private="1" module="flash.text.engine.TypographicCase" extern="1" final="1">
	<CAPS public="1" set="null" static="1">
		<x path="flash.text.engine.TypographicCase"/>
		<meta><m n=":enum"/></meta>
	</CAPS>
	<CAPS_AND_SMALL_CAPS public="1" set="null" static="1">
		<x path="flash.text.engine.TypographicCase"/>
		<meta><m n=":enum"/></meta>
	</CAPS_AND_SMALL_CAPS>
	<DEFAULT public="1" set="null" static="1">
		<x path="flash.text.engine.TypographicCase"/>
		<meta><m n=":enum"/></meta>
	</DEFAULT>
	<LOWERCASE public="1" set="null" static="1">
		<x path="flash.text.engine.TypographicCase"/>
		<meta><m n=":enum"/></meta>
	</LOWERCASE>
	<SMALL_CAPS public="1" set="null" static="1">
		<x path="flash.text.engine.TypographicCase"/>
		<meta><m n=":enum"/></meta>
	</SMALL_CAPS>
	<TITLE public="1" set="null" static="1">
		<x path="flash.text.engine.TypographicCase"/>
		<meta><m n=":enum"/></meta>
	</TITLE>
	<UPPERCASE public="1" set="null" static="1">
		<x path="flash.text.engine.TypographicCase"/>
		<meta><m n=":enum"/></meta>
	</UPPERCASE>
	<meta>
		<m n=":native"><e>"flash.text.engine.TypographicCase"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.text.engine._TypographicCase.TypographicCase_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/text/engine/TypographicCase.hx" private="1" module="flash.text.engine.TypographicCase" extern="1" final="1">
		<CAPS public="1" set="null" static="1">
			<x path="flash.text.engine.TypographicCase"/>
			<meta><m n=":enum"/></meta>
		</CAPS>
		<CAPS_AND_SMALL_CAPS public="1" set="null" static="1">
			<x path="flash.text.engine.TypographicCase"/>
			<meta><m n=":enum"/></meta>
		</CAPS_AND_SMALL_CAPS>
		<DEFAULT public="1" set="null" static="1">
			<x path="flash.text.engine.TypographicCase"/>
			<meta><m n=":enum"/></meta>
		</DEFAULT>
		<LOWERCASE public="1" set="null" static="1">
			<x path="flash.text.engine.TypographicCase"/>
			<meta><m n=":enum"/></meta>
		</LOWERCASE>
		<SMALL_CAPS public="1" set="null" static="1">
			<x path="flash.text.engine.TypographicCase"/>
			<meta><m n=":enum"/></meta>
		</SMALL_CAPS>
		<TITLE public="1" set="null" static="1">
			<x path="flash.text.engine.TypographicCase"/>
			<meta><m n=":enum"/></meta>
		</TITLE>
		<UPPERCASE public="1" set="null" static="1">
			<x path="flash.text.engine.TypographicCase"/>
			<meta><m n=":enum"/></meta>
		</UPPERCASE>
		<meta>
			<m n=":native"><e>"flash.text.engine.TypographicCase"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.text.ime.CompositionAttributeRange" params="" file="/home/runner/work/haxe/haxe/std/flash/text/ime/CompositionAttributeRange.hx" extern="1" final="1">
		<converted public="1"><x path="Bool"/></converted>
		<relativeEnd public="1"><x path="Int"/></relativeEnd>
		<relativeStart public="1"><x path="Int"/></relativeStart>
		<selected public="1"><x path="Bool"/></selected>
		<new public="1" set="method"><f a="relativeStart:relativeEnd:selected:converted">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.ime.IIMEClient" params="" file="/home/runner/work/haxe/haxe/std/flash/text/ime/IIMEClient.hx" extern="1" interface="1">
		<compositionEndIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</compositionEndIndex>
		<compositionStartIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</compositionStartIndex>
		<selectionActiveIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</selectionActiveIndex>
		<selectionAnchorIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</selectionAnchorIndex>
		<verticalTextLayout public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</verticalTextLayout>
		<confirmComposition public="1" set="method">
			<f a="?text:?preserveSelection" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ preserveSelection : false }</e></m></meta>
		</confirmComposition>
		<getTextBounds public="1" set="method"><f a="startIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getTextBounds>
		<getTextInRange public="1" set="method"><f a="startIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getTextInRange>
		<get_compositionEndIndex set="method"><f a=""><x path="Int"/></f></get_compositionEndIndex>
		<get_compositionStartIndex set="method"><f a=""><x path="Int"/></f></get_compositionStartIndex>
		<get_selectionActiveIndex set="method"><f a=""><x path="Int"/></f></get_selectionActiveIndex>
		<get_selectionAnchorIndex set="method"><f a=""><x path="Int"/></f></get_selectionAnchorIndex>
		<get_verticalTextLayout set="method"><f a=""><x path="Bool"/></f></get_verticalTextLayout>
		<selectRange public="1" set="method"><f a="anchorIndex:activeIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></selectRange>
		<updateComposition public="1" set="method"><f a="text:attributes:compositionStartIndex:compositionEndIndex">
	<c path="String"/>
	<c path="flash.Vector"><c path="flash.text.ime.CompositionAttributeRange"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></updateComposition>
	</class>
	<class path="flash.trace.Trace" params="" file="/home/runner/work/haxe/haxe/std/flash/trace/Trace.hx" extern="1">
		<FILE final="1" public="1" set="null" static="1"><d/></FILE>
		<LISTENER final="1" public="1" set="null" static="1"><d/></LISTENER>
		<METHODS final="1" public="1" set="null" static="1"><x path="Int"/></METHODS>
		<METHODS_AND_LINES final="1" public="1" set="null" static="1"><x path="Int"/></METHODS_AND_LINES>
		<METHODS_AND_LINES_WITH_ARGS final="1" public="1" set="null" static="1"><x path="Int"/></METHODS_AND_LINES_WITH_ARGS>
		<METHODS_WITH_ARGS final="1" public="1" set="null" static="1"><x path="Int"/></METHODS_WITH_ARGS>
		<OFF final="1" public="1" set="null" static="1"><x path="Int"/></OFF>
		<getLevel public="1" set="method" static="1">
			<f a="?target" v="2">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ target : 2 }</e></m></meta>
		</getLevel>
		<getListener public="1" set="method" static="1"><f a=""><d/></f></getListener>
		<setLevel public="1" set="method" static="1">
			<f a="l:?target" v=":2">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ target : 2 }</e></m></meta>
		</setLevel>
		<setListener public="1" set="method" static="1"><f a="f">
	<d/>
	<d/>
</f></setListener>
	</class>
	<class path="flash.ui.ContextMenu" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/ContextMenu.hx" extern="1" final="1">
		<extends path="flash.display.NativeMenu"/>
		<isSupported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</isSupported>
		<get_isSupported set="method" static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<builtInItems public="1" get="accessor" set="accessor">
			<c path="flash.ui.ContextMenuBuiltInItems"/>
			<meta><m n=":flash.property"/></meta>
		</builtInItems>
		<clipboardItems public="1" get="accessor" set="accessor">
			<c path="flash.ui.ContextMenuClipboardItems"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</clipboardItems>
		<clipboardMenu public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</clipboardMenu>
		<customItems public="1" get="accessor" set="accessor">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</customItems>
		<link public="1" get="accessor" set="accessor">
			<c path="flash.net.URLRequest"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</link>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenu"/></f></clone>
		<get_builtInItems set="method"><f a=""><c path="flash.ui.ContextMenuBuiltInItems"/></f></get_builtInItems>
		<get_clipboardItems set="method"><f a=""><c path="flash.ui.ContextMenuClipboardItems"/></f></get_clipboardItems>
		<get_clipboardMenu set="method"><f a=""><x path="Bool"/></f></get_clipboardMenu>
		<get_customItems set="method"><f a=""><c path="Array"><d/></c></f></get_customItems>
		<get_link set="method"><f a=""><c path="flash.net.URLRequest"/></f></get_link>
		<hideBuiltInItems public="1" set="method"><f a=""><x path="Void"/></f></hideBuiltInItems>
		<set_builtInItems set="method"><f a="value">
	<c path="flash.ui.ContextMenuBuiltInItems"/>
	<c path="flash.ui.ContextMenuBuiltInItems"/>
</f></set_builtInItems>
		<set_clipboardItems set="method"><f a="value">
	<c path="flash.ui.ContextMenuClipboardItems"/>
	<c path="flash.ui.ContextMenuClipboardItems"/>
</f></set_clipboardItems>
		<set_clipboardMenu set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_clipboardMenu>
		<set_customItems set="method"><f a="value">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></set_customItems>
		<set_link set="method"><f a="value">
	<c path="flash.net.URLRequest"/>
	<c path="flash.net.URLRequest"/>
</f></set_link>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenuBuiltInItems" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/ContextMenuBuiltInItems.hx" extern="1" final="1">
		<forwardAndBack public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</forwardAndBack>
		<loop public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</loop>
		<play public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</play>
		<print public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</print>
		<quality public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</quality>
		<rewind public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</rewind>
		<save public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</save>
		<zoom public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</zoom>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuBuiltInItems"/></f></clone>
		<get_forwardAndBack set="method"><f a=""><x path="Bool"/></f></get_forwardAndBack>
		<get_loop set="method"><f a=""><x path="Bool"/></f></get_loop>
		<get_play set="method"><f a=""><x path="Bool"/></f></get_play>
		<get_print set="method"><f a=""><x path="Bool"/></f></get_print>
		<get_quality set="method"><f a=""><x path="Bool"/></f></get_quality>
		<get_rewind set="method"><f a=""><x path="Bool"/></f></get_rewind>
		<get_save set="method"><f a=""><x path="Bool"/></f></get_save>
		<get_zoom set="method"><f a=""><x path="Bool"/></f></get_zoom>
		<set_forwardAndBack set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_forwardAndBack>
		<set_loop set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_loop>
		<set_play set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_play>
		<set_print set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_print>
		<set_quality set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_quality>
		<set_rewind set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_rewind>
		<set_save set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_save>
		<set_zoom set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_zoom>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenuClipboardItems" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/ContextMenuClipboardItems.hx" extern="1" final="1">
		<clear public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</clear>
		<copy public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</copy>
		<cut public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</cut>
		<paste public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</paste>
		<selectAll public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</selectAll>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuClipboardItems"/></f></clone>
		<get_clear set="method"><f a=""><x path="Bool"/></f></get_clear>
		<get_copy set="method"><f a=""><x path="Bool"/></f></get_copy>
		<get_cut set="method"><f a=""><x path="Bool"/></f></get_cut>
		<get_paste set="method"><f a=""><x path="Bool"/></f></get_paste>
		<get_selectAll set="method"><f a=""><x path="Bool"/></f></get_selectAll>
		<set_clear set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_clear>
		<set_copy set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_copy>
		<set_cut set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_cut>
		<set_paste set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_paste>
		<set_selectAll set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_selectAll>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenuItem" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/ContextMenuItem.hx" extern="1" final="1">
		<extends path="flash.display.NativeMenuItem"/>
		<caption public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</caption>
		<separatorBefore public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</separatorBefore>
		<visible public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</visible>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuItem"/></f></clone>
		<get_caption set="method"><f a=""><c path="String"/></f></get_caption>
		<get_separatorBefore set="method"><f a=""><x path="Bool"/></f></get_separatorBefore>
		<get_visible set="method"><f a=""><x path="Bool"/></f></get_visible>
		<set_caption set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_caption>
		<set_separatorBefore set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_separatorBefore>
		<set_visible set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<new public="1" set="method">
			<f a="caption:?separatorBefore:?enabled:?visible" v=":false:true:true">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ visible : true, enabled : true, separatorBefore : false }</e></m></meta>
		</new>
	</class>
	<class path="flash.ui.GameInput" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/GameInput.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</isSupported>
		<numDevices public="1" static="1">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</numDevices>
		<getDeviceAt public="1" static="1"><f a="index">
	<x path="Int"/>
	<c path="flash.ui.GameInputDevice"/>
</f></getDeviceAt>
		<get_isSupported static="1"><f a=""><x path="Bool"/></f></get_isSupported>
		<get_numDevices static="1"><f a=""><x path="Int"/></f></get_numDevices>
		<meta><m n=":require"><e>flash11_8</e></m></meta>
	</class>
	<class path="flash.ui.GameInputControl" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/GameInputControl.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<device public="1" get="accessor" set="null">
			<c path="flash.ui.GameInputDevice"/>
			<meta><m n=":flash.property"/></meta>
		</device>
		<id public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</id>
		<maxValue public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</maxValue>
		<minValue public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</minValue>
		<value public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</value>
		<get_device set="method"><f a=""><c path="flash.ui.GameInputDevice"/></f></get_device>
		<get_id set="method"><f a=""><c path="String"/></f></get_id>
		<get_maxValue set="method"><f a=""><x path="Float"/></f></get_maxValue>
		<get_minValue set="method"><f a=""><x path="Float"/></f></get_minValue>
		<get_value set="method"><f a=""><x path="Float"/></f></get_value>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="flash.ui.GameInputControlType" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/GameInputControlType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.ui.GameInputControlType"</e></m>
		</meta>
		<impl><class path="flash.ui._GameInputControlType.GameInputControlType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/GameInputControlType.hx" private="1" module="flash.ui.GameInputControlType" extern="1" final="1">
	<ACCELERATION public="1" set="null" static="1">
		<x path="flash.ui.GameInputControlType"/>
		<meta><m n=":enum"/></meta>
	</ACCELERATION>
	<BUTTON public="1" set="null" static="1">
		<x path="flash.ui.GameInputControlType"/>
		<meta><m n=":enum"/></meta>
	</BUTTON>
	<DIRECTION public="1" set="null" static="1">
		<x path="flash.ui.GameInputControlType"/>
		<meta><m n=":enum"/></meta>
	</DIRECTION>
	<MOVEMENT public="1" set="null" static="1">
		<x path="flash.ui.GameInputControlType"/>
		<meta><m n=":enum"/></meta>
	</MOVEMENT>
	<ROTATION public="1" set="null" static="1">
		<x path="flash.ui.GameInputControlType"/>
		<meta><m n=":enum"/></meta>
	</ROTATION>
	<TRIGGER public="1" set="null" static="1">
		<x path="flash.ui.GameInputControlType"/>
		<meta><m n=":enum"/></meta>
	</TRIGGER>
	<meta>
		<m n=":native"><e>"flash.ui.GameInputControlType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.ui._GameInputControlType.GameInputControlType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/GameInputControlType.hx" private="1" module="flash.ui.GameInputControlType" extern="1" final="1">
		<ACCELERATION public="1" set="null" static="1">
			<x path="flash.ui.GameInputControlType"/>
			<meta><m n=":enum"/></meta>
		</ACCELERATION>
		<BUTTON public="1" set="null" static="1">
			<x path="flash.ui.GameInputControlType"/>
			<meta><m n=":enum"/></meta>
		</BUTTON>
		<DIRECTION public="1" set="null" static="1">
			<x path="flash.ui.GameInputControlType"/>
			<meta><m n=":enum"/></meta>
		</DIRECTION>
		<MOVEMENT public="1" set="null" static="1">
			<x path="flash.ui.GameInputControlType"/>
			<meta><m n=":enum"/></meta>
		</MOVEMENT>
		<ROTATION public="1" set="null" static="1">
			<x path="flash.ui.GameInputControlType"/>
			<meta><m n=":enum"/></meta>
		</ROTATION>
		<TRIGGER public="1" set="null" static="1">
			<x path="flash.ui.GameInputControlType"/>
			<meta><m n=":enum"/></meta>
		</TRIGGER>
		<meta>
			<m n=":native"><e>"flash.ui.GameInputControlType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.ui.GameInputDevice" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/GameInputDevice.hx" extern="1" final="1">
		<MAX_BUFFER_SIZE final="1" public="1" static="1"><x path="Int"/></MAX_BUFFER_SIZE>
		<enabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</enabled>
		<id public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</id>
		<name public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</name>
		<numControls public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</numControls>
		<sampleInterval public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</sampleInterval>
		<getCachedSamples public="1" set="method">
			<f a="data:?append" v=":false">
				<c path="flash.utils.ByteArray"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ append : false }</e></m></meta>
		</getCachedSamples>
		<getControlAt public="1" set="method"><f a="i">
	<x path="Int"/>
	<c path="flash.ui.GameInputControl"/>
</f></getControlAt>
		<get_enabled set="method"><f a=""><x path="Bool"/></f></get_enabled>
		<get_id set="method"><f a=""><c path="String"/></f></get_id>
		<get_name set="method"><f a=""><c path="String"/></f></get_name>
		<get_numControls set="method"><f a=""><x path="Int"/></f></get_numControls>
		<get_sampleInterval set="method"><f a=""><x path="Int"/></f></get_sampleInterval>
		<set_enabled set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enabled>
		<set_sampleInterval set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_sampleInterval>
		<startCachingSamples public="1" set="method"><f a="numSamples:controls">
	<x path="Int"/>
	<c path="flash.Vector"><c path="String"/></c>
	<x path="Void"/>
</f></startCachingSamples>
		<stopCachingSamples public="1" set="method"><f a=""><x path="Void"/></f></stopCachingSamples>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash11_8</e></m></meta>
	</class>
	<abstract path="flash.ui.GameInputFinger" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/GameInputFinger.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.ui.GameInputFinger"</e></m>
		</meta>
		<impl><class path="flash.ui._GameInputFinger.GameInputFinger_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/GameInputFinger.hx" private="1" module="flash.ui.GameInputFinger" extern="1" final="1">
	<INDEX public="1" set="null" static="1">
		<x path="flash.ui.GameInputFinger"/>
		<meta><m n=":enum"/></meta>
	</INDEX>
	<MIDDLE public="1" set="null" static="1">
		<x path="flash.ui.GameInputFinger"/>
		<meta><m n=":enum"/></meta>
	</MIDDLE>
	<THUMB public="1" set="null" static="1">
		<x path="flash.ui.GameInputFinger"/>
		<meta><m n=":enum"/></meta>
	</THUMB>
	<UNKNOWN public="1" set="null" static="1">
		<x path="flash.ui.GameInputFinger"/>
		<meta><m n=":enum"/></meta>
	</UNKNOWN>
	<meta>
		<m n=":native"><e>"flash.ui.GameInputFinger"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.ui._GameInputFinger.GameInputFinger_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/GameInputFinger.hx" private="1" module="flash.ui.GameInputFinger" extern="1" final="1">
		<INDEX public="1" set="null" static="1">
			<x path="flash.ui.GameInputFinger"/>
			<meta><m n=":enum"/></meta>
		</INDEX>
		<MIDDLE public="1" set="null" static="1">
			<x path="flash.ui.GameInputFinger"/>
			<meta><m n=":enum"/></meta>
		</MIDDLE>
		<THUMB public="1" set="null" static="1">
			<x path="flash.ui.GameInputFinger"/>
			<meta><m n=":enum"/></meta>
		</THUMB>
		<UNKNOWN public="1" set="null" static="1">
			<x path="flash.ui.GameInputFinger"/>
			<meta><m n=":enum"/></meta>
		</UNKNOWN>
		<meta>
			<m n=":native"><e>"flash.ui.GameInputFinger"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.ui.GameInputHand" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/GameInputHand.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.ui.GameInputHand"</e></m>
		</meta>
		<impl><class path="flash.ui._GameInputHand.GameInputHand_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/GameInputHand.hx" private="1" module="flash.ui.GameInputHand" extern="1" final="1">
	<LEFT public="1" set="null" static="1">
		<x path="flash.ui.GameInputHand"/>
		<meta><m n=":enum"/></meta>
	</LEFT>
	<RIGHT public="1" set="null" static="1">
		<x path="flash.ui.GameInputHand"/>
		<meta><m n=":enum"/></meta>
	</RIGHT>
	<UNKNOWN public="1" set="null" static="1">
		<x path="flash.ui.GameInputHand"/>
		<meta><m n=":enum"/></meta>
	</UNKNOWN>
	<meta>
		<m n=":native"><e>"flash.ui.GameInputHand"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.ui._GameInputHand.GameInputHand_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/GameInputHand.hx" private="1" module="flash.ui.GameInputHand" extern="1" final="1">
		<LEFT public="1" set="null" static="1">
			<x path="flash.ui.GameInputHand"/>
			<meta><m n=":enum"/></meta>
		</LEFT>
		<RIGHT public="1" set="null" static="1">
			<x path="flash.ui.GameInputHand"/>
			<meta><m n=":enum"/></meta>
		</RIGHT>
		<UNKNOWN public="1" set="null" static="1">
			<x path="flash.ui.GameInputHand"/>
			<meta><m n=":enum"/></meta>
		</UNKNOWN>
		<meta>
			<m n=":native"><e>"flash.ui.GameInputHand"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="flash.ui.KeyLocation" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/KeyLocation.hx">
		<this><x path="UInt"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.ui.KeyLocation"</e></m>
		</meta>
		<impl><class path="flash.ui._KeyLocation.KeyLocation_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/KeyLocation.hx" private="1" module="flash.ui.KeyLocation" extern="1" final="1">
	<D_PAD public="1" set="null" static="1">
		<x path="flash.ui.KeyLocation"/>
		<meta><m n=":enum"/></meta>
	</D_PAD>
	<LEFT public="1" set="null" static="1">
		<x path="flash.ui.KeyLocation"/>
		<meta><m n=":enum"/></meta>
	</LEFT>
	<NUM_PAD public="1" set="null" static="1">
		<x path="flash.ui.KeyLocation"/>
		<meta><m n=":enum"/></meta>
	</NUM_PAD>
	<RIGHT public="1" set="null" static="1">
		<x path="flash.ui.KeyLocation"/>
		<meta><m n=":enum"/></meta>
	</RIGHT>
	<STANDARD public="1" set="null" static="1">
		<x path="flash.ui.KeyLocation"/>
		<meta><m n=":enum"/></meta>
	</STANDARD>
	<meta>
		<m n=":native"><e>"flash.ui.KeyLocation"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.ui._KeyLocation.KeyLocation_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/KeyLocation.hx" private="1" module="flash.ui.KeyLocation" extern="1" final="1">
		<D_PAD public="1" set="null" static="1">
			<x path="flash.ui.KeyLocation"/>
			<meta><m n=":enum"/></meta>
		</D_PAD>
		<LEFT public="1" set="null" static="1">
			<x path="flash.ui.KeyLocation"/>
			<meta><m n=":enum"/></meta>
		</LEFT>
		<NUM_PAD public="1" set="null" static="1">
			<x path="flash.ui.KeyLocation"/>
			<meta><m n=":enum"/></meta>
		</NUM_PAD>
		<RIGHT public="1" set="null" static="1">
			<x path="flash.ui.KeyLocation"/>
			<meta><m n=":enum"/></meta>
		</RIGHT>
		<STANDARD public="1" set="null" static="1">
			<x path="flash.ui.KeyLocation"/>
			<meta><m n=":enum"/></meta>
		</STANDARD>
		<meta>
			<m n=":native"><e>"flash.ui.KeyLocation"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.ui.Keyboard" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/Keyboard.hx" extern="1">
		<A final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</A>
		<ALTERNATE final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</ALTERNATE>
		<AUDIO final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</AUDIO>
		<B final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</B>
		<BACK final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</BACK>
		<BACKQUOTE final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</BACKQUOTE>
		<BACKSLASH final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</BACKSLASH>
		<BACKSPACE final="1" public="1" set="null" static="1"><x path="UInt"/></BACKSPACE>
		<BLUE final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</BLUE>
		<C final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</C>
		<CAPS_LOCK final="1" public="1" set="null" static="1"><x path="UInt"/></CAPS_LOCK>
		<CHANNEL_DOWN final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</CHANNEL_DOWN>
		<CHANNEL_UP final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</CHANNEL_UP>
		<COMMA final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</COMMA>
		<COMMAND final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</COMMAND>
		<CONTROL final="1" public="1" set="null" static="1"><x path="UInt"/></CONTROL>
		<CharCodeStrings final="1" public="1" set="null" static="1">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</CharCodeStrings>
		<D final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</D>
		<DELETE final="1" public="1" set="null" static="1"><x path="UInt"/></DELETE>
		<DOWN final="1" public="1" set="null" static="1"><x path="UInt"/></DOWN>
		<DVR final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</DVR>
		<E final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</E>
		<END final="1" public="1" set="null" static="1"><x path="UInt"/></END>
		<ENTER final="1" public="1" set="null" static="1"><x path="UInt"/></ENTER>
		<EQUAL final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</EQUAL>
		<ESCAPE final="1" public="1" set="null" static="1"><x path="UInt"/></ESCAPE>
		<EXIT final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</EXIT>
		<F final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</F>
		<F1 final="1" public="1" set="null" static="1"><x path="UInt"/></F1>
		<F10 final="1" public="1" set="null" static="1"><x path="UInt"/></F10>
		<F11 final="1" public="1" set="null" static="1"><x path="UInt"/></F11>
		<F12 final="1" public="1" set="null" static="1"><x path="UInt"/></F12>
		<F13 final="1" public="1" set="null" static="1"><x path="UInt"/></F13>
		<F14 final="1" public="1" set="null" static="1"><x path="UInt"/></F14>
		<F15 final="1" public="1" set="null" static="1"><x path="UInt"/></F15>
		<F2 final="1" public="1" set="null" static="1"><x path="UInt"/></F2>
		<F3 final="1" public="1" set="null" static="1"><x path="UInt"/></F3>
		<F4 final="1" public="1" set="null" static="1"><x path="UInt"/></F4>
		<F5 final="1" public="1" set="null" static="1"><x path="UInt"/></F5>
		<F6 final="1" public="1" set="null" static="1"><x path="UInt"/></F6>
		<F7 final="1" public="1" set="null" static="1"><x path="UInt"/></F7>
		<F8 final="1" public="1" set="null" static="1"><x path="UInt"/></F8>
		<F9 final="1" public="1" set="null" static="1"><x path="UInt"/></F9>
		<FAST_FORWARD final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</FAST_FORWARD>
		<G final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</G>
		<GREEN final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</GREEN>
		<GUIDE final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</GUIDE>
		<H final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</H>
		<HELP final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</HELP>
		<HOME final="1" public="1" set="null" static="1"><x path="UInt"/></HOME>
		<I final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</I>
		<INFO final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</INFO>
		<INPUT final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</INPUT>
		<INSERT final="1" public="1" set="null" static="1"><x path="UInt"/></INSERT>
		<J final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</J>
		<K final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</K>
		<KEYNAME_BEGIN final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_BEGIN>
		<KEYNAME_BREAK final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_BREAK>
		<KEYNAME_CLEARDISPLAY final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_CLEARDISPLAY>
		<KEYNAME_CLEARLINE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_CLEARLINE>
		<KEYNAME_DELETE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DELETE>
		<KEYNAME_DELETECHAR final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DELETECHAR>
		<KEYNAME_DELETELINE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DELETELINE>
		<KEYNAME_DOWNARROW final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DOWNARROW>
		<KEYNAME_END final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_END>
		<KEYNAME_EXECUTE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_EXECUTE>
		<KEYNAME_F1 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F1>
		<KEYNAME_F10 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F10>
		<KEYNAME_F11 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F11>
		<KEYNAME_F12 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F12>
		<KEYNAME_F13 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F13>
		<KEYNAME_F14 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F14>
		<KEYNAME_F15 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F15>
		<KEYNAME_F16 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F16>
		<KEYNAME_F17 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F17>
		<KEYNAME_F18 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F18>
		<KEYNAME_F19 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F19>
		<KEYNAME_F2 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F2>
		<KEYNAME_F20 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F20>
		<KEYNAME_F21 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F21>
		<KEYNAME_F22 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F22>
		<KEYNAME_F23 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F23>
		<KEYNAME_F24 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F24>
		<KEYNAME_F25 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F25>
		<KEYNAME_F26 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F26>
		<KEYNAME_F27 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F27>
		<KEYNAME_F28 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F28>
		<KEYNAME_F29 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F29>
		<KEYNAME_F3 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F3>
		<KEYNAME_F30 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F30>
		<KEYNAME_F31 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F31>
		<KEYNAME_F32 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F32>
		<KEYNAME_F33 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F33>
		<KEYNAME_F34 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F34>
		<KEYNAME_F35 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F35>
		<KEYNAME_F4 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F4>
		<KEYNAME_F5 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F5>
		<KEYNAME_F6 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F6>
		<KEYNAME_F7 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F7>
		<KEYNAME_F8 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F8>
		<KEYNAME_F9 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F9>
		<KEYNAME_FIND final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_FIND>
		<KEYNAME_HELP final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_HELP>
		<KEYNAME_HOME final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_HOME>
		<KEYNAME_INSERT final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_INSERT>
		<KEYNAME_INSERTCHAR final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_INSERTCHAR>
		<KEYNAME_INSERTLINE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_INSERTLINE>
		<KEYNAME_LEFTARROW final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_LEFTARROW>
		<KEYNAME_MENU final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_MENU>
		<KEYNAME_MODESWITCH final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_MODESWITCH>
		<KEYNAME_NEXT final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_NEXT>
		<KEYNAME_PAGEDOWN final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PAGEDOWN>
		<KEYNAME_PAGEUP final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PAGEUP>
		<KEYNAME_PAUSE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PAUSE>
		<KEYNAME_PLAYPAUSE final="1" public="1" set="null" static="1"><c path="String"/></KEYNAME_PLAYPAUSE>
		<KEYNAME_PREV final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PREV>
		<KEYNAME_PRINT final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PRINT>
		<KEYNAME_PRINTSCREEN final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PRINTSCREEN>
		<KEYNAME_REDO final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_REDO>
		<KEYNAME_RESET final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_RESET>
		<KEYNAME_RIGHTARROW final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_RIGHTARROW>
		<KEYNAME_SCROLLLOCK final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SCROLLLOCK>
		<KEYNAME_SELECT final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SELECT>
		<KEYNAME_STOP final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_STOP>
		<KEYNAME_SYSREQ final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SYSREQ>
		<KEYNAME_SYSTEM final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SYSTEM>
		<KEYNAME_UNDO final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_UNDO>
		<KEYNAME_UPARROW final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_UPARROW>
		<KEYNAME_USER final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_USER>
		<L final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</L>
		<LAST final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</LAST>
		<LEFT final="1" public="1" set="null" static="1"><x path="UInt"/></LEFT>
		<LEFTBRACKET final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</LEFTBRACKET>
		<LIVE final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</LIVE>
		<M final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</M>
		<MASTER_SHELL final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</MASTER_SHELL>
		<MENU final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</MENU>
		<MINUS final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</MINUS>
		<N final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</N>
		<NEXT final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</NEXT>
		<NUMBER_0 final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_0>
		<NUMBER_1 final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_1>
		<NUMBER_2 final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_2>
		<NUMBER_3 final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_3>
		<NUMBER_4 final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_4>
		<NUMBER_5 final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_5>
		<NUMBER_6 final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_6>
		<NUMBER_7 final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_7>
		<NUMBER_8 final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_8>
		<NUMBER_9 final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_9>
		<NUMPAD final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMPAD>
		<NUMPAD_0 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_0>
		<NUMPAD_1 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_1>
		<NUMPAD_2 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_2>
		<NUMPAD_3 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_3>
		<NUMPAD_4 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_4>
		<NUMPAD_5 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_5>
		<NUMPAD_6 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_6>
		<NUMPAD_7 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_7>
		<NUMPAD_8 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_8>
		<NUMPAD_9 final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_9>
		<NUMPAD_ADD final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_ADD>
		<NUMPAD_DECIMAL final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_DECIMAL>
		<NUMPAD_DIVIDE final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_DIVIDE>
		<NUMPAD_ENTER final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_ENTER>
		<NUMPAD_MULTIPLY final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_MULTIPLY>
		<NUMPAD_SUBTRACT final="1" public="1" set="null" static="1"><x path="UInt"/></NUMPAD_SUBTRACT>
		<O final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</O>
		<P final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</P>
		<PAGE_DOWN final="1" public="1" set="null" static="1"><x path="UInt"/></PAGE_DOWN>
		<PAGE_UP final="1" public="1" set="null" static="1"><x path="UInt"/></PAGE_UP>
		<PAUSE final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</PAUSE>
		<PERIOD final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</PERIOD>
		<PLAY final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</PLAY>
		<PLAY_PAUSE final="1" public="1" set="null" static="1"><x path="UInt"/></PLAY_PAUSE>
		<PREVIOUS final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</PREVIOUS>
		<Q final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</Q>
		<QUOTE final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</QUOTE>
		<R final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</R>
		<RECORD final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</RECORD>
		<RED final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</RED>
		<REWIND final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</REWIND>
		<RIGHT final="1" public="1" set="null" static="1"><x path="UInt"/></RIGHT>
		<RIGHTBRACKET final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</RIGHTBRACKET>
		<S final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</S>
		<SEARCH final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SEARCH>
		<SEMICOLON final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</SEMICOLON>
		<SETUP final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SETUP>
		<SHIFT final="1" public="1" set="null" static="1"><x path="UInt"/></SHIFT>
		<SKIP_BACKWARD final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SKIP_BACKWARD>
		<SKIP_FORWARD final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SKIP_FORWARD>
		<SLASH final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</SLASH>
		<SPACE final="1" public="1" set="null" static="1"><x path="UInt"/></SPACE>
		<STOP final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</STOP>
		<STRING_BEGIN final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_BEGIN>
		<STRING_BREAK final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_BREAK>
		<STRING_CLEARDISPLAY final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_CLEARDISPLAY>
		<STRING_CLEARLINE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_CLEARLINE>
		<STRING_DELETE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DELETE>
		<STRING_DELETECHAR final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DELETECHAR>
		<STRING_DELETELINE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DELETELINE>
		<STRING_DOWNARROW final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DOWNARROW>
		<STRING_END final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_END>
		<STRING_EXECUTE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_EXECUTE>
		<STRING_F1 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F1>
		<STRING_F10 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F10>
		<STRING_F11 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F11>
		<STRING_F12 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F12>
		<STRING_F13 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F13>
		<STRING_F14 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F14>
		<STRING_F15 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F15>
		<STRING_F16 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F16>
		<STRING_F17 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F17>
		<STRING_F18 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F18>
		<STRING_F19 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F19>
		<STRING_F2 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F2>
		<STRING_F20 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F20>
		<STRING_F21 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F21>
		<STRING_F22 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F22>
		<STRING_F23 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F23>
		<STRING_F24 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F24>
		<STRING_F25 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F25>
		<STRING_F26 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F26>
		<STRING_F27 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F27>
		<STRING_F28 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F28>
		<STRING_F29 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F29>
		<STRING_F3 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F3>
		<STRING_F30 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F30>
		<STRING_F31 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F31>
		<STRING_F32 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F32>
		<STRING_F33 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F33>
		<STRING_F34 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F34>
		<STRING_F35 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F35>
		<STRING_F4 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F4>
		<STRING_F5 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F5>
		<STRING_F6 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F6>
		<STRING_F7 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F7>
		<STRING_F8 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F8>
		<STRING_F9 final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F9>
		<STRING_FIND final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_FIND>
		<STRING_HELP final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_HELP>
		<STRING_HOME final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_HOME>
		<STRING_INSERT final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_INSERT>
		<STRING_INSERTCHAR final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_INSERTCHAR>
		<STRING_INSERTLINE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_INSERTLINE>
		<STRING_LEFTARROW final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_LEFTARROW>
		<STRING_MENU final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_MENU>
		<STRING_MODESWITCH final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_MODESWITCH>
		<STRING_NEXT final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_NEXT>
		<STRING_PAGEDOWN final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PAGEDOWN>
		<STRING_PAGEUP final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PAGEUP>
		<STRING_PAUSE final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PAUSE>
		<STRING_PREV final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PREV>
		<STRING_PRINT final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PRINT>
		<STRING_PRINTSCREEN final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PRINTSCREEN>
		<STRING_REDO final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_REDO>
		<STRING_RESET final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_RESET>
		<STRING_RIGHTARROW final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_RIGHTARROW>
		<STRING_SCROLLLOCK final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SCROLLLOCK>
		<STRING_SELECT final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SELECT>
		<STRING_STOP final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_STOP>
		<STRING_SYSREQ final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SYSREQ>
		<STRING_SYSTEM final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SYSTEM>
		<STRING_UNDO final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_UNDO>
		<STRING_UPARROW final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_UPARROW>
		<STRING_USER final="1" public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_USER>
		<SUBTITLE final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SUBTITLE>
		<T final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</T>
		<TAB final="1" public="1" set="null" static="1"><x path="UInt"/></TAB>
		<U final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</U>
		<UP final="1" public="1" set="null" static="1"><x path="UInt"/></UP>
		<V final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</V>
		<VOD final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</VOD>
		<W final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</W>
		<X final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</X>
		<Y final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</Y>
		<YELLOW final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</YELLOW>
		<Z final="1" public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</Z>
		<capsLock public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</capsLock>
		<hasVirtualKeyboard public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</hasVirtualKeyboard>
		<numLock public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</numLock>
		<physicalKeyboardType public="1" get="accessor" set="null" static="1">
			<x path="flash.ui.KeyboardType"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</physicalKeyboardType>
		<get_capsLock set="method" static="1"><f a=""><x path="Bool"/></f></get_capsLock>
		<get_hasVirtualKeyboard set="method" static="1"><f a=""><x path="Bool"/></f></get_hasVirtualKeyboard>
		<get_numLock set="method" static="1"><f a=""><x path="Bool"/></f></get_numLock>
		<get_physicalKeyboardType set="method" static="1"><f a=""><x path="flash.ui.KeyboardType"/></f></get_physicalKeyboardType>
		<isAccessible public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isAccessible>
	</class>
	<abstract path="flash.ui.KeyboardType" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/KeyboardType.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.ui.KeyboardType"</e></m>
		</meta>
		<impl><class path="flash.ui._KeyboardType.KeyboardType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/KeyboardType.hx" private="1" module="flash.ui.KeyboardType" extern="1" final="1">
	<ALPHANUMERIC public="1" set="null" static="1">
		<x path="flash.ui.KeyboardType"/>
		<meta><m n=":enum"/></meta>
	</ALPHANUMERIC>
	<KEYPAD public="1" set="null" static="1">
		<x path="flash.ui.KeyboardType"/>
		<meta><m n=":enum"/></meta>
	</KEYPAD>
	<NONE public="1" set="null" static="1">
		<x path="flash.ui.KeyboardType"/>
		<meta><m n=":enum"/></meta>
	</NONE>
	<meta>
		<m n=":native"><e>"flash.ui.KeyboardType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.ui._KeyboardType.KeyboardType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/KeyboardType.hx" private="1" module="flash.ui.KeyboardType" extern="1" final="1">
		<ALPHANUMERIC public="1" set="null" static="1">
			<x path="flash.ui.KeyboardType"/>
			<meta><m n=":enum"/></meta>
		</ALPHANUMERIC>
		<KEYPAD public="1" set="null" static="1">
			<x path="flash.ui.KeyboardType"/>
			<meta><m n=":enum"/></meta>
		</KEYPAD>
		<NONE public="1" set="null" static="1">
			<x path="flash.ui.KeyboardType"/>
			<meta><m n=":enum"/></meta>
		</NONE>
		<meta>
			<m n=":native"><e>"flash.ui.KeyboardType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.ui.Mouse" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/Mouse.hx" extern="1">
		<cursor public="1" get="accessor" set="accessor" static="1">
			<d/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</cursor>
		<supportsCursor public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</supportsCursor>
		<supportsNativeCursor public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash10_2</e></m>
			</meta>
		</supportsNativeCursor>
		<get_cursor set="method" static="1"><f a=""><d/></f></get_cursor>
		<get_supportsCursor set="method" static="1"><f a=""><x path="Bool"/></f></get_supportsCursor>
		<get_supportsNativeCursor set="method" static="1"><f a=""><x path="Bool"/></f></get_supportsNativeCursor>
		<hide public="1" set="method" static="1"><f a=""><x path="Void"/></f></hide>
		<registerCursor public="1" set="method" static="1">
			<f a="name:cursor">
				<c path="String"/>
				<c path="flash.ui.MouseCursorData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</registerCursor>
		<set_cursor set="method" static="1"><f a="value">
	<d/>
	<d/>
</f></set_cursor>
		<show public="1" set="method" static="1"><f a=""><x path="Void"/></f></show>
		<unregisterCursor public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</unregisterCursor>
	</class>
	<class path="flash.ui.MouseCursor" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/MouseCursor.hx" extern="1">
		<ARROW final="1" public="1" set="null" static="1"><c path="String"/></ARROW>
		<AUTO final="1" public="1" set="null" static="1"><c path="String"/></AUTO>
		<BUTTON final="1" public="1" set="null" static="1"><c path="String"/></BUTTON>
		<HAND final="1" public="1" set="null" static="1"><c path="String"/></HAND>
		<IBEAM final="1" public="1" set="null" static="1"><c path="String"/></IBEAM>
	</class>
	<class path="flash.ui.MouseCursorData" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/MouseCursorData.hx" extern="1" final="1">
		<data public="1" get="accessor" set="accessor">
			<c path="flash.Vector"><c path="flash.display.BitmapData"/></c>
			<meta><m n=":flash.property"/></meta>
		</data>
		<frameRate public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</frameRate>
		<hotSpot public="1" get="accessor" set="accessor">
			<c path="flash.geom.Point"/>
			<meta><m n=":flash.property"/></meta>
		</hotSpot>
		<get_data set="method"><f a=""><c path="flash.Vector"><c path="flash.display.BitmapData"/></c></f></get_data>
		<get_frameRate set="method"><f a=""><x path="Float"/></f></get_frameRate>
		<get_hotSpot set="method"><f a=""><c path="flash.geom.Point"/></f></get_hotSpot>
		<set_data set="method"><f a="value">
	<c path="flash.Vector"><c path="flash.display.BitmapData"/></c>
	<c path="flash.Vector"><c path="flash.display.BitmapData"/></c>
</f></set_data>
		<set_frameRate set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_frameRate>
		<set_hotSpot set="method"><f a="value">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></set_hotSpot>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.ui.Multitouch" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/Multitouch.hx" extern="1">
		<inputMode public="1" get="accessor" set="accessor" static="1">
			<x path="flash.ui.MultitouchInputMode"/>
			<meta><m n=":flash.property"/></meta>
		</inputMode>
		<mapTouchToMouse public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</mapTouchToMouse>
		<maxTouchPoints public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</maxTouchPoints>
		<supportedGestures public="1" get="accessor" set="null" static="1">
			<c path="flash.Vector"><c path="String"/></c>
			<meta><m n=":flash.property"/></meta>
		</supportedGestures>
		<supportsGestureEvents public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</supportsGestureEvents>
		<supportsTouchEvents public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</supportsTouchEvents>
		<get_inputMode set="method" static="1"><f a=""><x path="flash.ui.MultitouchInputMode"/></f></get_inputMode>
		<get_mapTouchToMouse set="method" static="1"><f a=""><x path="Bool"/></f></get_mapTouchToMouse>
		<get_maxTouchPoints set="method" static="1"><f a=""><x path="Int"/></f></get_maxTouchPoints>
		<get_supportedGestures set="method" static="1"><f a=""><c path="flash.Vector"><c path="String"/></c></f></get_supportedGestures>
		<get_supportsGestureEvents set="method" static="1"><f a=""><x path="Bool"/></f></get_supportsGestureEvents>
		<get_supportsTouchEvents set="method" static="1"><f a=""><x path="Bool"/></f></get_supportsTouchEvents>
		<set_inputMode set="method" static="1"><f a="value">
	<x path="flash.ui.MultitouchInputMode"/>
	<x path="flash.ui.MultitouchInputMode"/>
</f></set_inputMode>
		<set_mapTouchToMouse set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_mapTouchToMouse>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<abstract path="flash.ui.MultitouchInputMode" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/MultitouchInputMode.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.ui.MultitouchInputMode"</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
		<impl><class path="flash.ui._MultitouchInputMode.MultitouchInputMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/MultitouchInputMode.hx" private="1" module="flash.ui.MultitouchInputMode" extern="1" final="1">
	<GESTURE public="1" set="null" static="1">
		<x path="flash.ui.MultitouchInputMode"/>
		<meta><m n=":enum"/></meta>
	</GESTURE>
	<NONE public="1" set="null" static="1">
		<x path="flash.ui.MultitouchInputMode"/>
		<meta><m n=":enum"/></meta>
	</NONE>
	<TOUCH_POINT public="1" set="null" static="1">
		<x path="flash.ui.MultitouchInputMode"/>
		<meta><m n=":enum"/></meta>
	</TOUCH_POINT>
	<meta>
		<m n=":native"><e>"flash.ui.MultitouchInputMode"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.ui._MultitouchInputMode.MultitouchInputMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/ui/MultitouchInputMode.hx" private="1" module="flash.ui.MultitouchInputMode" extern="1" final="1">
		<GESTURE public="1" set="null" static="1">
			<x path="flash.ui.MultitouchInputMode"/>
			<meta><m n=":enum"/></meta>
		</GESTURE>
		<NONE public="1" set="null" static="1">
			<x path="flash.ui.MultitouchInputMode"/>
			<meta><m n=":enum"/></meta>
		</NONE>
		<TOUCH_POINT public="1" set="null" static="1">
			<x path="flash.ui.MultitouchInputMode"/>
			<meta><m n=":enum"/></meta>
		</TOUCH_POINT>
		<meta>
			<m n=":native"><e>"flash.ui.MultitouchInputMode"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.utils.IDataInput2" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/IDataInput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataInput"/></class>
	<class path="flash.utils.IDataOutput2" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/IDataOutput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataOutput"/></class>
	<class path="flash.utils.ByteArray" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/ByteArray.hx" extern="1">
		<implements path="flash.utils.IDataInput2"/>
		<implements path="flash.utils.IDataOutput2"/>
		<defaultObjectEncoding public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</defaultObjectEncoding>
		<get_defaultObjectEncoding set="method" static="1"><f a=""><x path="UInt"/></f></get_defaultObjectEncoding>
		<set_defaultObjectEncoding set="method" static="1"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_defaultObjectEncoding>
		<bytesAvailable public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesAvailable>
		<endian public="1" get="accessor" set="accessor">
			<x path="flash.utils.Endian"/>
			<meta><m n=":flash.property"/></meta>
		</endian>
		<length public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</length>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<position public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</position>
		<shareable public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":flash.property"/>
				<m n=":require"><e>flash11_4</e></m>
			</meta>
		</shareable>
		<atomicCompareAndSwapIntAt public="1" set="method">
			<f a="byteIndex:expectedValue:newValue">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapIntAt>
		<atomicCompareAndSwapLength public="1" set="method">
			<f a="expectedLength:newLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapLength>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clear>
		<compress public="1" set="method"><f a="?algorithm">
	<x path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></compress>
		<deflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</deflate>
		<get_bytesAvailable set="method"><f a=""><x path="UInt"/></f></get_bytesAvailable>
		<get_endian set="method"><f a=""><x path="flash.utils.Endian"/></f></get_endian>
		<get_length set="method"><f a=""><x path="UInt"/></f></get_length>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<get_position set="method"><f a=""><x path="UInt"/></f></get_position>
		<get_shareable set="method"><f a=""><x path="Bool"/></f></get_shareable>
		<inflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</inflate>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<set_endian set="method"><f a="value">
	<x path="flash.utils.Endian"/>
	<x path="flash.utils.Endian"/>
</f></set_endian>
		<set_length set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_length>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
		<set_position set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_position>
		<set_shareable set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_shareable>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<uncompress public="1" set="method"><f a="?algorithm">
	<x path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></uncompress>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="flash.utils.CompressionAlgorithm" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/CompressionAlgorithm.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.utils.CompressionAlgorithm"</e></m>
			<m n=":require"><e>flash11</e></m>
		</meta>
		<impl><class path="flash.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/CompressionAlgorithm.hx" private="1" module="flash.utils.CompressionAlgorithm" extern="1" final="1">
	<DEFLATE public="1" set="null" static="1">
		<x path="flash.utils.CompressionAlgorithm"/>
		<meta><m n=":enum"/></meta>
	</DEFLATE>
	<LZMA public="1" set="null" static="1">
		<x path="flash.utils.CompressionAlgorithm"/>
		<meta><m n=":enum"/></meta>
	</LZMA>
	<ZLIB public="1" set="null" static="1">
		<x path="flash.utils.CompressionAlgorithm"/>
		<meta><m n=":enum"/></meta>
	</ZLIB>
	<meta>
		<m n=":native"><e>"flash.utils.CompressionAlgorithm"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/CompressionAlgorithm.hx" private="1" module="flash.utils.CompressionAlgorithm" extern="1" final="1">
		<DEFLATE public="1" set="null" static="1">
			<x path="flash.utils.CompressionAlgorithm"/>
			<meta><m n=":enum"/></meta>
		</DEFLATE>
		<LZMA public="1" set="null" static="1">
			<x path="flash.utils.CompressionAlgorithm"/>
			<meta><m n=":enum"/></meta>
		</LZMA>
		<ZLIB public="1" set="null" static="1">
			<x path="flash.utils.CompressionAlgorithm"/>
			<meta><m n=":enum"/></meta>
		</ZLIB>
		<meta>
			<m n=":native"><e>"flash.utils.CompressionAlgorithm"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.utils.Dictionary" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/Dictionary.hx" extern="1">
		<new public="1" set="method">
			<f a="?weakKeys" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ weakKeys : false }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="flash.utils.Endian" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/Endian.hx">
		<this><c path="String"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.utils.Endian"</e></m>
		</meta>
		<impl><class path="flash.utils._Endian.Endian_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/Endian.hx" private="1" module="flash.utils.Endian" extern="1" final="1">
	<BIG_ENDIAN public="1" set="null" static="1">
		<x path="flash.utils.Endian"/>
		<meta><m n=":enum"/></meta>
	</BIG_ENDIAN>
	<LITTLE_ENDIAN public="1" set="null" static="1">
		<x path="flash.utils.Endian"/>
		<meta><m n=":enum"/></meta>
	</LITTLE_ENDIAN>
	<meta>
		<m n=":directlyUsed"/>
		<m n=":native"><e>"flash.utils.Endian"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.utils._Endian.Endian_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/Endian.hx" private="1" module="flash.utils.Endian" extern="1" final="1">
		<BIG_ENDIAN public="1" set="null" static="1">
			<x path="flash.utils.Endian"/>
			<meta><m n=":enum"/></meta>
		</BIG_ENDIAN>
		<LITTLE_ENDIAN public="1" set="null" static="1">
			<x path="flash.utils.Endian"/>
			<meta><m n=":enum"/></meta>
		</LITTLE_ENDIAN>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"flash.utils.Endian"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="flash.utils.Function" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/Function.hx"><d/></typedef>
	<class path="flash.utils.IExternalizable" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/IExternalizable.hx" extern="1" interface="1">
		<readExternal public="1" set="method"><f a="input">
	<c path="flash.utils.IDataInput"/>
	<x path="Void"/>
</f></readExternal>
		<writeExternal public="1" set="method"><f a="output">
	<c path="flash.utils.IDataOutput"/>
	<x path="Void"/>
</f></writeExternal>
	</class>
	<class path="flash.utils.JSON" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/JSON.hx" extern="1">
		<parse public="1" set="method" static="1"><f a="text:?reviver">
	<c path="String"/>
	<d/>
	<d/>
</f></parse>
		<stringify public="1" set="method" static="1"><f a="value:?replacer:?space">
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></stringify>
		<meta>
			<m n=":native"><e>"JSON"</e></m>
			<m n=":require"><e>flash11</e></m>
		</meta>
	</class>
	<class path="flash.utils.Namespace" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/Namespace.hx" extern="1" final="1">
		<prefix public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</prefix>
		<uri public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</uri>
		<get_prefix set="method"><f a=""><d/></f></get_prefix>
		<get_uri set="method"><f a=""><c path="String"/></f></get_uri>
		<new public="1" set="method"><f a="?prefix:?uri">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="flash.utils.Object" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/Object.hx">
		<from><icast><d/></icast></from>
		<this><x path="flash.utils.Object"/></this>
		<to><icast><d/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="flash.utils.ObjectInput" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/ObjectInput.hx" extern="1">
		<implements path="flash.utils.IDataInput"/>
		<bytesAvailable public="1" get="accessor" set="null">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</bytesAvailable>
		<endian public="1" get="accessor" set="accessor">
			<x path="flash.utils.Endian"/>
			<meta><m n=":flash.property"/></meta>
		</endian>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<get_bytesAvailable set="method"><f a=""><x path="UInt"/></f></get_bytesAvailable>
		<get_endian set="method"><f a=""><x path="flash.utils.Endian"/></f></get_endian>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<set_endian set="method"><f a="value">
	<x path="flash.utils.Endian"/>
	<x path="flash.utils.Endian"/>
</f></set_endian>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.utils.ObjectOutput" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/ObjectOutput.hx" extern="1">
		<implements path="flash.utils.IDataOutput"/>
		<endian public="1" get="accessor" set="accessor">
			<x path="flash.utils.Endian"/>
			<meta><m n=":flash.property"/></meta>
		</endian>
		<objectEncoding public="1" get="accessor" set="accessor">
			<x path="UInt"/>
			<meta><m n=":flash.property"/></meta>
		</objectEncoding>
		<get_endian set="method"><f a=""><x path="flash.utils.Endian"/></f></get_endian>
		<get_objectEncoding set="method"><f a=""><x path="UInt"/></f></get_objectEncoding>
		<set_endian set="method"><f a="value">
	<x path="flash.utils.Endian"/>
	<x path="flash.utils.Endian"/>
</f></set_endian>
		<set_objectEncoding set="method"><f a="value">
	<x path="UInt"/>
	<x path="UInt"/>
</f></set_objectEncoding>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ length : 0, offset : 0 }</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.utils.Proxy" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/Proxy.hx" extern="1">
		<callProperty public="1" set="method">
			<f a="name:restArgs">
				<d/>
				<t path="haxe.extern.Rest"><d/></t>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</callProperty>
		<deleteProperty public="1" set="method">
			<f a="name">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</deleteProperty>
		<getDescendants public="1" set="method">
			<f a="name">
				<d/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</getDescendants>
		<getProperty public="1" set="method">
			<f a="name">
				<d/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</getProperty>
		<hasProperty public="1" set="method">
			<f a="name">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</hasProperty>
		<isAttribute public="1" set="method">
			<f a="name">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</isAttribute>
		<nextName public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</nextName>
		<nextNameIndex public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</nextNameIndex>
		<nextValue public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</nextValue>
		<setProperty public="1" set="method">
			<f a="name:value">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</setProperty>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.utils.QName" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/QName.hx" extern="1" final="1">
		<localName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</localName>
		<uri public="1" get="accessor" set="null">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</uri>
		<get_localName set="method"><f a=""><c path="String"/></f></get_localName>
		<get_uri set="method"><f a=""><d/></f></get_uri>
		<new public="1" set="method"><f a="?namespace:?name">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.utils.Timer" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/Timer.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<currentCount public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</currentCount>
		<delay public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":flash.property"/></meta>
		</delay>
		<repeatCount public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</repeatCount>
		<running public="1" get="accessor" set="null">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</running>
		<get_currentCount set="method"><f a=""><x path="Int"/></f></get_currentCount>
		<get_delay set="method"><f a=""><x path="Float"/></f></get_delay>
		<get_repeatCount set="method"><f a=""><x path="Int"/></f></get_repeatCount>
		<get_running set="method"><f a=""><x path="Bool"/></f></get_running>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<set_delay set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_delay>
		<set_repeatCount set="method"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_repeatCount>
		<start public="1" set="method"><f a=""><x path="Void"/></f></start>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method">
			<f a="delay:?repeatCount" v=":0">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ repeatCount : 0 }</e></m></meta>
		</new>
	</class>
	<class path="flash.utils.SetIntervalTimer" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/SetIntervalTimer.hx" extern="1" final="1">
		<extends path="flash.utils.Timer"/>
		<clearInterval public="1" set="method" static="1">
			<f a="id_to_clear">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ns">
	<e>"flash.utils"</e>
	<e>internal</e>
</m></meta>
		</clearInterval>
		<id public="1">
			<x path="UInt"/>
			<meta><m n=":ns">
	<e>"flash.utils"</e>
	<e>internal</e>
</m></meta>
		</id>
		<new public="1" set="method"><f a="closure:delay:repeats:rest">
	<d/>
	<x path="Float"/>
	<x path="Bool"/>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.utils.Telemetry" params="" file="/home/runner/work/haxe/haxe/std/flash/utils/Telemetry.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<connected public="1" set="null" static="1"><x path="Bool"/></connected>
		<spanMarker public="1" set="null" static="1"><x path="Float"/></spanMarker>
		<registerCommandHandler public="1" set="method" static="1"><f a="commandName:handler">
	<c path="String"/>
	<d/>
	<x path="Bool"/>
</f></registerCommandHandler>
		<unregisterCommandHandler public="1" set="method" static="1"><f a="commandName">
	<c path="String"/>
	<x path="Bool"/>
</f></unregisterCommandHandler>
		<sendMetric public="1" set="method" static="1"><f a="metric:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></sendMetric>
		<sendSpanMetric public="1" set="method" static="1"><f a="metric:startMarker">
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></sendSpanMetric>
		<meta>
			<m n=":require"><e>flash11_4</e></m>
			<m n=":native"><e>"flash.profiler.Telemetry"</e></m>
		</meta>
	</class>
	<class path="flash.xml.XML" params="" file="/home/runner/work/haxe/haxe/std/flash/xml/XML.hx" extern="1" final="1">
		<ignoreComments public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ignoreComments>
		<ignoreProcessingInstructions public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ignoreProcessingInstructions>
		<ignoreWhitespace public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</ignoreWhitespace>
		<prettyIndent public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":flash.property"/></meta>
		</prettyIndent>
		<prettyPrinting public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</prettyPrinting>
		<defaultSettings public="1" set="method" static="1"><f a=""><d/></f></defaultSettings>
		<get_ignoreComments set="method" static="1"><f a=""><x path="Bool"/></f></get_ignoreComments>
		<get_ignoreProcessingInstructions set="method" static="1"><f a=""><x path="Bool"/></f></get_ignoreProcessingInstructions>
		<get_ignoreWhitespace set="method" static="1"><f a=""><x path="Bool"/></f></get_ignoreWhitespace>
		<get_prettyIndent set="method" static="1"><f a=""><x path="Int"/></f></get_prettyIndent>
		<get_prettyPrinting set="method" static="1"><f a=""><x path="Bool"/></f></get_prettyPrinting>
		<setSettings public="1" set="method" static="1"><f a="?o">
	<d/>
	<x path="Void"/>
</f></setSettings>
		<set_ignoreComments set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ignoreComments>
		<set_ignoreProcessingInstructions set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ignoreProcessingInstructions>
		<set_ignoreWhitespace set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_ignoreWhitespace>
		<set_prettyIndent set="method" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_prettyIndent>
		<set_prettyPrinting set="method" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_prettyPrinting>
		<settings public="1" set="method" static="1"><f a=""><d/></f></settings>
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><x path="flash.utils.Object"/></f></localName>
		<name public="1" set="method"><f a=""><x path="flash.utils.Object"/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></normalize>
		<notification public="1" set="method"><f a=""><t path="flash.utils.Function"/></f></notification>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<setNotification public="1" set="method"><f a="f">
	<t path="flash.utils.Function"/>
	<d/>
</f></setNotification>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toJSON public="1" set="method">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.xml.XMLNode" params="" file="/home/runner/work/haxe/haxe/std/flash/xml/XMLNode.hx" extern="1">
		<attributes public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</attributes>
		<childNodes public="1" get="accessor" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":flash.property"/></meta>
		</childNodes>
		<firstChild public="1"><c path="flash.xml.XMLNode"/></firstChild>
		<lastChild public="1"><c path="flash.xml.XMLNode"/></lastChild>
		<localName public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</localName>
		<namespaceURI public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</namespaceURI>
		<nextSibling public="1"><c path="flash.xml.XMLNode"/></nextSibling>
		<nodeName public="1"><c path="String"/></nodeName>
		<nodeType public="1"><x path="flash.xml.XMLNodeType"/></nodeType>
		<nodeValue public="1"><c path="String"/></nodeValue>
		<parentNode public="1"><c path="flash.xml.XMLNode"/></parentNode>
		<prefix public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</prefix>
		<previousSibling public="1"><c path="flash.xml.XMLNode"/></previousSibling>
		<appendChild public="1" set="method"><f a="node">
	<c path="flash.xml.XMLNode"/>
	<x path="Void"/>
</f></appendChild>
		<cloneNode public="1" set="method"><f a="deep">
	<x path="Bool"/>
	<c path="flash.xml.XMLNode"/>
</f></cloneNode>
		<getNamespaceForPrefix public="1" set="method"><f a="prefix">
	<c path="String"/>
	<c path="String"/>
</f></getNamespaceForPrefix>
		<getPrefixForNamespace public="1" set="method"><f a="ns">
	<c path="String"/>
	<c path="String"/>
</f></getPrefixForNamespace>
		<get_attributes set="method"><f a=""><d/></f></get_attributes>
		<get_childNodes set="method"><f a=""><c path="Array"><d/></c></f></get_childNodes>
		<get_localName set="method"><f a=""><c path="String"/></f></get_localName>
		<get_namespaceURI set="method"><f a=""><c path="String"/></f></get_namespaceURI>
		<get_prefix set="method"><f a=""><c path="String"/></f></get_prefix>
		<hasChildNodes public="1" set="method"><f a=""><x path="Bool"/></f></hasChildNodes>
		<insertBefore public="1" set="method"><f a="node:before">
	<c path="flash.xml.XMLNode"/>
	<c path="flash.xml.XMLNode"/>
	<x path="Void"/>
</f></insertBefore>
		<removeNode public="1" set="method"><f a=""><x path="Void"/></f></removeNode>
		<set_attributes set="method"><f a="value">
	<d/>
	<d/>
</f></set_attributes>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="type:value">
	<x path="flash.xml.XMLNodeType"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.xml.XMLDocument" params="" file="/home/runner/work/haxe/haxe/std/flash/xml/XMLDocument.hx" extern="1">
		<extends path="flash.xml.XMLNode"/>
		<docTypeDecl public="1"><d/></docTypeDecl>
		<idMap public="1"><d/></idMap>
		<ignoreWhite public="1"><x path="Bool"/></ignoreWhite>
		<xmlDecl public="1"><d/></xmlDecl>
		<createElement public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.xml.XMLNode"/>
</f></createElement>
		<createTextNode public="1" set="method"><f a="text">
	<c path="String"/>
	<c path="flash.xml.XMLNode"/>
</f></createTextNode>
		<parseXML public="1" set="method"><f a="source">
	<c path="String"/>
	<x path="Void"/>
</f></parseXML>
		<new public="1" set="method"><f a="?source">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.xml.XMLList" params="" file="/home/runner/work/haxe/haxe/std/flash/xml/XMLList.hx" extern="1" final="1">
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><x path="flash.utils.Object"/></f></localName>
		<name public="1" set="method"><f a=""><x path="flash.utils.Object"/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></normalize>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toJSON public="1" set="method">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="flash.xml.XMLNodeType" params="" file="/home/runner/work/haxe/haxe/std/flash/xml/XMLNodeType.hx">
		<this><x path="UInt"/></this>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"flash.xml.XMLNodeType"</e></m>
		</meta>
		<impl><class path="flash.xml._XMLNodeType.XMLNodeType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/xml/XMLNodeType.hx" private="1" module="flash.xml.XMLNodeType" extern="1" final="1">
	<CDATA_NODE public="1" set="null" static="1">
		<x path="flash.xml.XMLNodeType"/>
		<meta><m n=":enum"/></meta>
	</CDATA_NODE>
	<COMMENT_NODE public="1" set="null" static="1">
		<x path="flash.xml.XMLNodeType"/>
		<meta><m n=":enum"/></meta>
	</COMMENT_NODE>
	<DOCUMENT_TYPE_NODE public="1" set="null" static="1">
		<x path="flash.xml.XMLNodeType"/>
		<meta><m n=":enum"/></meta>
	</DOCUMENT_TYPE_NODE>
	<ELEMENT_NODE public="1" set="null" static="1">
		<x path="flash.xml.XMLNodeType"/>
		<meta><m n=":enum"/></meta>
	</ELEMENT_NODE>
	<PROCESSING_INSTRUCTION_NODE public="1" set="null" static="1">
		<x path="flash.xml.XMLNodeType"/>
		<meta><m n=":enum"/></meta>
	</PROCESSING_INSTRUCTION_NODE>
	<TEXT_NODE public="1" set="null" static="1">
		<x path="flash.xml.XMLNodeType"/>
		<meta><m n=":enum"/></meta>
	</TEXT_NODE>
	<XML_DECLARATION public="1" set="null" static="1">
		<x path="flash.xml.XMLNodeType"/>
		<meta><m n=":enum"/></meta>
	</XML_DECLARATION>
	<meta>
		<m n=":native"><e>"flash.xml.XMLNodeType"</e></m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="flash.xml._XMLNodeType.XMLNodeType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/flash/xml/XMLNodeType.hx" private="1" module="flash.xml.XMLNodeType" extern="1" final="1">
		<CDATA_NODE public="1" set="null" static="1">
			<x path="flash.xml.XMLNodeType"/>
			<meta><m n=":enum"/></meta>
		</CDATA_NODE>
		<COMMENT_NODE public="1" set="null" static="1">
			<x path="flash.xml.XMLNodeType"/>
			<meta><m n=":enum"/></meta>
		</COMMENT_NODE>
		<DOCUMENT_TYPE_NODE public="1" set="null" static="1">
			<x path="flash.xml.XMLNodeType"/>
			<meta><m n=":enum"/></meta>
		</DOCUMENT_TYPE_NODE>
		<ELEMENT_NODE public="1" set="null" static="1">
			<x path="flash.xml.XMLNodeType"/>
			<meta><m n=":enum"/></meta>
		</ELEMENT_NODE>
		<PROCESSING_INSTRUCTION_NODE public="1" set="null" static="1">
			<x path="flash.xml.XMLNodeType"/>
			<meta><m n=":enum"/></meta>
		</PROCESSING_INSTRUCTION_NODE>
		<TEXT_NODE public="1" set="null" static="1">
			<x path="flash.xml.XMLNodeType"/>
			<meta><m n=":enum"/></meta>
		</TEXT_NODE>
		<XML_DECLARATION public="1" set="null" static="1">
			<x path="flash.xml.XMLNodeType"/>
			<meta><m n=":enum"/></meta>
		</XML_DECLARATION>
		<meta>
			<m n=":native"><e>"flash.xml.XMLNodeType"</e></m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="flash.xml.XMLParser" params="" file="/home/runner/work/haxe/haxe/std/flash/xml/XMLParser.hx" extern="1" final="1">
		<getNext public="1" set="method"><f a="tag">
	<c path="flash.xml.XMLTag"/>
	<x path="Int"/>
</f></getNext>
		<startParse public="1" set="method"><f a="source:ignoreWhite">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></startParse>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.xml.XMLTag" params="" file="/home/runner/work/haxe/haxe/std/flash/xml/XMLTag.hx" extern="1" final="1">
		<attrs public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":flash.property"/></meta>
		</attrs>
		<empty public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":flash.property"/></meta>
		</empty>
		<type public="1" get="accessor" set="accessor">
			<x path="flash.xml.XMLNodeType"/>
			<meta><m n=":flash.property"/></meta>
		</type>
		<value public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":flash.property"/></meta>
		</value>
		<get_attrs set="method"><f a=""><d/></f></get_attrs>
		<get_empty set="method"><f a=""><x path="Bool"/></f></get_empty>
		<get_type set="method"><f a=""><x path="flash.xml.XMLNodeType"/></f></get_type>
		<get_value set="method"><f a=""><c path="String"/></f></get_value>
		<set_attrs set="method"><f a="value">
	<d/>
	<d/>
</f></set_attrs>
		<set_empty set="method"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_empty>
		<set_type set="method"><f a="value">
	<x path="flash.xml.XMLNodeType"/>
	<x path="flash.xml.XMLNodeType"/>
</f></set_type>
		<set_value set="method"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_value>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="haxe.StackItem" params="" file="/home/runner/work/haxe/haxe/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line:?column">
			<x path="Null"><e path="haxe.StackItem"/></x>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<x path="Null"><c path="String"/></x>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<abstract path="haxe.CallStack" params="" file="/home/runner/work/haxe/haxe/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The length of this stack.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="46" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<x path="Int"/>
</f></get_length>
	<callStack public="1" set="method" line="51" static="1">
		<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
		<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
	</callStack>
	<exceptionStack public="1" set="method" line="63" static="1">
		<f a="?fullStack" v="false">
			<x path="Bool"/>
			<c path="Array"><e path="haxe.StackItem"/></c>
		</f>
		<meta><m n=":value"><e>{ fullStack : false }</e></m></meta>
		<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.
		Set `fullStack` parameter to true in order to return the full exception stack.

		May not work if catch type was a derivative from `haxe.Exception`.</haxe_doc>
	</exceptionStack>
	<toString public="1" set="method" line="71" static="1">
		<f a="stack">
			<x path="haxe.CallStack"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
	</toString>
	<subtract public="1" set="method" line="84" static="1">
		<f a="this:stack">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="haxe.CallStack"/>
			<x path="haxe.CallStack"/>
		</f>
		<haxe_doc>Returns a range of entries of current stack from the beginning to the the
		common part of this and `stack`.</haxe_doc>
	</subtract>
	<copy public="1" get="inline" set="null" line="107" static="1">
		<f a="this">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="haxe.CallStack"/>
		</f>
		<haxe_doc>Make a copy of the stack.</haxe_doc>
	</copy>
	<get public="1" get="inline" set="null" line="111" static="1">
		<f a="this:index">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<x path="Int"/>
			<e path="haxe.StackItem"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<asArray get="inline" set="null" line="115" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></asArray>
	<equalItems set="method" line="119" static="1"><f a="item1:item2">
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Bool"/>
</f></equalItems>
	<exceptionToString set="method" line="135" static="1"><f a="e">
	<c path="haxe.Exception"/>
	<c path="String"/>
</f></exceptionToString>
	<itemToString set="method" line="155" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
	<meta>
		<m n=":using"><e>haxe.CallStack</e></m>
		<m n=":allow"><e>haxe.Exception</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._CallStack.CallStack_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The length of this stack.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="46" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<x path="Int"/>
</f></get_length>
		<callStack public="1" set="method" line="51" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="63" static="1">
			<f a="?fullStack" v="false">
				<x path="Bool"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":value"><e>{ fullStack : false }</e></m></meta>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.
		Set `fullStack` parameter to true in order to return the full exception stack.

		May not work if catch type was a derivative from `haxe.Exception`.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="71" static="1">
			<f a="stack">
				<x path="haxe.CallStack"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<subtract public="1" set="method" line="84" static="1">
			<f a="this:stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="haxe.CallStack"/>
				<x path="haxe.CallStack"/>
			</f>
			<haxe_doc>Returns a range of entries of current stack from the beginning to the the
		common part of this and `stack`.</haxe_doc>
		</subtract>
		<copy public="1" get="inline" set="null" line="107" static="1">
			<f a="this">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="haxe.CallStack"/>
			</f>
			<haxe_doc>Make a copy of the stack.</haxe_doc>
		</copy>
		<get public="1" get="inline" set="null" line="111" static="1">
			<f a="this:index">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<x path="Int"/>
				<e path="haxe.StackItem"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<asArray get="inline" set="null" line="115" static="1"><f a="this">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></asArray>
		<equalItems set="method" line="119" static="1"><f a="item1:item2">
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Null"><e path="haxe.StackItem"/></x>
	<x path="Bool"/>
</f></equalItems>
		<exceptionToString set="method" line="135" static="1"><f a="e">
	<c path="haxe.Exception"/>
	<c path="String"/>
</f></exceptionToString>
		<itemToString set="method" line="155" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<meta>
			<m n=":using"><e>haxe.CallStack</e></m>
			<m n=":allow"><e>haxe.Exception</e></m>
		</meta>
	</class>
	<abstract path="haxe.Function" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.Function_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<abstract path="haxe.FlatEnum" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<abstract path="haxe.NotVoid" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.NotVoid_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<abstract path="haxe.Constructible" params="T" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1" final="1"/>
	<class path="haxe.IMap" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Null"><c path="haxe.IMap.V"/></x>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<keyValueIterator public="1" set="method"><f a=""><t path="KeyValueIterator">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</t></f></keyValueIterator>
		<copy public="1" set="method"><f a=""><c path="haxe.IMap">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</c></f></copy>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
	</class>
	<abstract path="haxe.DynamicAccess" params="T" file="/home/runner/work/haxe/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1">
	<_new public="1" get="inline" set="null" line="40" static="1">
		<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new structure.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="51" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Null"><c path="haxe.DynamicAccess.T"/></x>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, `null` is returned.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="69" static="1">
		<f a="this:key:value">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<c path="haxe.DynamicAccess.T"/>
			<c path="haxe.DynamicAccess.T"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<exists public="1" get="inline" set="null" line="84" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="94" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="100" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="Array"><c path="String"/></c>
		</f>
		<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
	</keys>
	<copy public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x>
		</f>
		<haxe_doc>Returns a shallow copy of the structure</haxe_doc>
	</copy>
	<iterator public="1" get="inline" set="null" line="113" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="haxe.iterators.DynamicAccessIterator"><c path="haxe.DynamicAccess.T"/></c>
		</f>
		<haxe_doc>Returns an Iterator over the values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="122" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="haxe.iterators.DynamicAccessKeyValueIterator"><c path="haxe.DynamicAccess.T"/></c>
		</f>
		<haxe_doc>Returns an Iterator over the keys and values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
	</keyValueIterator>
</class></impl>
	</abstract>
	<class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1">
		<_new public="1" get="inline" set="null" line="40" static="1">
			<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new structure.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="51" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Null"><c path="haxe.DynamicAccess.T"/></x>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, `null` is returned.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="69" static="1">
			<f a="this:key:value">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<c path="haxe.DynamicAccess.T"/>
				<c path="haxe.DynamicAccess.T"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="84" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="94" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="100" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
		</keys>
		<copy public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x>
			</f>
			<haxe_doc>Returns a shallow copy of the structure</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="113" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="haxe.iterators.DynamicAccessIterator"><c path="haxe.DynamicAccess.T"/></c>
			</f>
			<haxe_doc>Returns an Iterator over the values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="122" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="haxe.iterators.DynamicAccessKeyValueIterator"><c path="haxe.DynamicAccess.T"/></c>
			</f>
			<haxe_doc>Returns an Iterator over the keys and values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
		</keyValueIterator>
	</class>
	<class path="haxe.EntryPoint" params="" file="/home/runner/work/haxe/haxe/std/haxe/EntryPoint.hx">
		<pending expr="new Array&lt;Void&gt;()" line="44" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Array<Void>()]]></e></m></meta>
		</pending>
		<threadCount public="1" set="null" expr="0" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</threadCount>
		<wakeup public="1" set="method" line="50" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Wakeup a sleeping `run()`</haxe_doc>
		</wakeup>
		<runInMainThread public="1" set="method" line="56" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<addThread public="1" set="method" line="71" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<processEvents set="method" line="99" static="1"><f a=""><x path="Float"/></f></processEvents>
		<run public="1" set="method" line="126" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Start the main loop. Depending on the platform, this can return immediately or will only return when the application exits.</haxe_doc>
		</run>
		<haxe_doc>If `haxe.MainLoop` is kept from DCE, then we will insert an `haxe.EntryPoint.run()` call just at then end of `main()`.
	This class can be redefined by custom frameworks so they can handle their own main loop logic.</haxe_doc>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="/home/runner/work/haxe/haxe/std/haxe/EnumFlags.hx">
		<from><icast field="from"><c path="from.T"/></icast></from>
		<this><x path="Int"/></this>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.

	Enum constructor indices are preserved from Haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as `has(EnumCtor)`. Otherwise
	`Type.enumIndex()` reflection is used.</haxe_doc>
		<impl><class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags" final="1">
	<_new public="1" get="inline" set="null" line="39" static="1">
		<f a="?i" v="0">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":value"><e>{ i : 0 }</e></m>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
	</_new>
	<from params="T" set="method" line="43" static="1">
		<f a="e">
			<c path="from.T"/>
			<x path="haxe.EnumFlags"><c path="from.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</from>
	<has public="1" get="inline" set="null" line="59" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</has>
	<set public="1" get="inline" set="null" line="71" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<unset public="1" get="inline" set="null" line="83" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</unset>
	<setTo public="1" get="inline" set="null" line="96" static="1">
		<f a="this:v:condition">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Depending on the value of `condition` sets (`condition=true`) or unsets (`condition=false`)
		the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</setTo>
	<ofInt public="1" params="T" get="inline" set="null" line="107" static="1">
		<f a="i">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
		</f>
		<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="115" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
	</toInt>
</class></impl>
	</abstract>
	<class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags" final="1">
		<_new public="1" get="inline" set="null" line="39" static="1">
			<f a="?i" v="0">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":value"><e>{ i : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
		</_new>
		<from params="T" set="method" line="43" static="1">
			<f a="e">
				<c path="from.T"/>
				<x path="haxe.EnumFlags"><c path="from.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</from>
		<has public="1" get="inline" set="null" line="59" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</has>
		<set public="1" get="inline" set="null" line="71" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<unset public="1" get="inline" set="null" line="83" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</unset>
		<setTo public="1" get="inline" set="null" line="96" static="1">
			<f a="this:v:condition">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Depending on the value of `condition` sets (`condition=true`) or unsets (`condition=false`)
		the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</setTo>
		<ofInt public="1" params="T" get="inline" set="null" line="107" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
			</f>
			<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="115" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
		</toInt>
	</class>
	<class path="haxe.EnumTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:

			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="138" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="149" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="163" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="175" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.NativeException" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/Exception.hx" module="haxe.Exception" extern="1">
		<errorID get="accessor" set="null">
			<x path="Int"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":flash.property"/>
			</meta>
		</errorID>
		<name>
			<d/>
			<meta><m n=":noCompletion"/></meta>
		</name>
		<getStackTrace set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":noCompletion"/></meta>
		</getStackTrace>
		<get_errorID set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":noCompletion"/></meta>
		</get_errorID>
		<new set="method">
			<f a="?message:?id" v=":0">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ id : 0 }</e></m>
				<m n=":noCompletion"/>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":native"><e>"flash.errors.Error"</e></m>
		</meta>
	</class>
	<class path="haxe.Exception" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/Exception.hx">
		<extends path="haxe.NativeException"/>
		<caught set="method" line="18" static="1"><f a="value">
	<x path="Any"/>
	<c path="haxe.Exception"/>
</f></caught>
		<thrown set="method" line="28" static="1"><f a="value">
	<x path="Any"/>
	<x path="Any"/>
</f></thrown>
		<message public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Exception message.</haxe_doc>
		</message>
		<stack public="1" get="accessor" set="null">
			<x path="haxe.CallStack"/>
			<haxe_doc>The call stack at the moment of the exception creation.</haxe_doc>
		</stack>
		<previous public="1" get="accessor" set="null">
			<x path="Null"><c path="haxe.Exception"/></x>
			<haxe_doc>Contains an exception, which was passed to `previous` constructor argument.</haxe_doc>
		</previous>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__exceptionStack>
			<x path="Null"><x path="haxe.CallStack"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__exceptionStack>
		<__nativeStack>
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeStack>
		<__skipStack>
			<x path="Int"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
			</meta>
		</__skipStack>
		<__nativeException>
			<c path="flash.errors.Error"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<unwrap set="method" line="52"><f a=""><x path="Any"/></f></unwrap>
		<toString public="1" set="method" line="56">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<details public="1" set="method" line="60">
			<f a=""><c path="String"/></f>
			<haxe_doc>Detailed exception description.

		Includes message, stack and the chain of previous exceptions (if set).</haxe_doc>
		</details>
		<__shiftStack get="inline" set="null" line="66">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
			</meta>
		</__shiftStack>
		<get_message set="method" line="70"><f a=""><c path="String"/></f></get_message>
		<get_previous set="method" line="74"><f a=""><x path="Null"><c path="haxe.Exception"/></x></f></get_previous>
		<get_native final="1" set="method" line="78"><f a=""><x path="Any"/></f></get_native>
		<get_stack set="method" line="82"><f a=""><x path="haxe.CallStack"/></f></get_stack>
		<new public="1" set="method" line="40">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.Http" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/Http.hx"><c path="haxe.HttpFlash"/></typedef>
	<class path="haxe.http.HttpBase" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpBase.hx">
		<url public="1">
			<c path="String"/>
			<haxe_doc>The url of `this` request. It is used only by the `request()` method and
		can be changed in order to send the same request to different target
		Urls.</haxe_doc>
		</url>
		<responseData public="1" get="accessor" set="null"><x path="Null"><c path="String"/></x></responseData>
		<responseBytes public="1" set="null"><x path="Null"><c path="haxe.io.Bytes"/></x></responseBytes>
		<responseAsString><x path="Null"><c path="String"/></x></responseAsString>
		<postData><x path="Null"><c path="String"/></x></postData>
		<postBytes><x path="Null"><c path="haxe.io.Bytes"/></x></postBytes>
		<headers><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></headers>
		<params><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></params>
		<emptyOnData final="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></emptyOnData>
		<setHeader public="1" set="method" line="85">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the header identified as `name` to value `value`.

		If `name` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setHeader>
		<addHeader public="1" set="method" line="98"><f a="header:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addHeader>
		<setParameter public="1" set="method" line="112">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the parameter identified as `name` to value `value`.

		If `name` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setParameter>
		<addParameter public="1" set="method" line="125"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addParameter>
		<setPostData public="1" set="method" line="142">
			<f a="data">
				<x path="Null"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data` string.

		There can only be one post data per request. Subsequent calls to
		this method or to `setPostBytes()` overwrite the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostData>
		<setPostBytes public="1" set="method" line="160">
			<f a="data">
				<x path="Null"><c path="haxe.io.Bytes"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data` bytes.

		There can only be one post data per request. Subsequent calls to
		this method or to `setPostData()` overwrite the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostBytes>
		<request public="1" set="method" line="185">
			<f a="?post">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends `this` Http request to the Url specified by `this.url`.

		If `post` is true, the request is sent as POST request, otherwise it is
		sent as GET request.

		Depending on the outcome of the request, this method calls the
		`onStatus()`, `onError()`, `onData()` or `onBytes()` callback functions.

		If `this.url` is null, the result is unspecified.

		If `this.url` is an invalid or inaccessible Url, the `onError()` callback
		function is called.

		[js] If `this.async` is false, the callback functions are called before
		this method returns.</haxe_doc>
		</request>
		<onData public="1" set="dynamic" line="196">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onData = function(data) { // handle result }`</haxe_doc>
		</onData>
		<onBytes public="1" set="dynamic" line="205">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onBytes = function(data) { // handle result }`</haxe_doc>
		</onBytes>
		<onError public="1" set="dynamic" line="214">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a request error, with `msg` containing the
		error description.

		The intended usage is to bind it to a custom function:
		`httpInstance.onError = function(msg) { // handle error }`</haxe_doc>
		</onError>
		<onStatus public="1" set="dynamic" line="223">
			<f a="status">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a Http status change, with `status` being the
		new status.

		The intended usage is to bind it to a custom function:
		`httpInstance.onStatus = function(status) { // handle status }`</haxe_doc>
		</onStatus>
		<hasOnData set="method" line="228">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Override this if extending `haxe.Http` with overriding `onData`</haxe_doc>
		</hasOnData>
		<success set="method" line="232"><f a="data">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></success>
		<get_responseData set="method" line="241"><f a=""><x path="Null"><c path="String"/></x></f></get_responseData>
		<new public="1" set="method" line="71">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Http instance with `url` as parameter.

		This does not do a request until `request()` is called.

		If `url` is null, the field url must be set to a value before making the
		call to `request()`, or the result is unspecified.

		(Php) Https (SSL) connections are allowed only if the OpenSSL extension
		is enabled.</haxe_doc>
		</new>
		<haxe_doc>This class can be used to handle Http requests consistently across
	platforms. There are two intended usages:

	- call `haxe.Http.requestUrl(url)` and receive the result as a `String`
	(only available on `sys` targets)
	- create a `new haxe.Http(url)`, register your callbacks for `onData`,
	`onError` and `onStatus`, then call `request()`.</haxe_doc>
	</class>
	<class path="haxe.HttpFlash" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/Http.hx" module="haxe.Http">
		<extends path="haxe.http.HttpBase"/>
		<req><c path="flash.net.URLLoader"/></req>
		<cancel public="1" set="method" line="36">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels `this` Http request if `request` has been called and a response
		has not yet been received.</haxe_doc>
		</cancel>
		<request public="1" set="method" line="43" override="1"><f a="?post">
	<x path="Bool"/>
	<x path="Void"/>
</f></request>
		<new public="1" set="method" line="29"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="haxe.Int32" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1">
	<negate get="inline" set="null" line="32" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
	</negate>
	<preIncrement get="inline" set="null" line="35" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>++A</e></m></meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="37" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="44" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>--A</e></m></meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="46" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A--</e></m></meta>
	</postDecrement>
	<add get="inline" set="null" line="53" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="56" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub get="inline" set="null" line="61" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="64" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="67" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<toFloat get="inline" set="null" line="249" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":to"/></meta>
	</toFloat>
	<ucompare public="1" set="method" line="254" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="267" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1">
		<negate get="inline" set="null" line="32" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
		</negate>
		<preIncrement get="inline" set="null" line="35" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>++A</e></m></meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="37" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="44" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>--A</e></m></meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="46" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A--</e></m></meta>
		</postDecrement>
		<add get="inline" set="null" line="53" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="56" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub get="inline" set="null" line="61" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="64" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="67" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<toFloat get="inline" set="null" line="249" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":to"/></meta>
		</toFloat>
		<ucompare public="1" set="method" line="254" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="267" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	</class>
	<abstract path="haxe.Int64" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<meta>
			<m n=":notNull"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1">
	<_new get="inline" set="null" line="36" static="1">
		<f a="x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<copy public="1" get="inline" set="null" line="43" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<make public="1" get="inline" set="null" line="49" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<ofInt public="1" get="inline" set="null" line="56" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="62" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<is public="1" get="inline" set="null" line="70" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<meta><m n=":deprecated"><e>"haxe.Int64.is() is deprecated. Use haxe.Int64.isInt64() instead"</e></m></meta>
	</is>
	<isInt64 public="1" get="inline" set="null" line="78" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</isInt64>
	<getHigh public="1" get="inline" set="null" line="85" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" get="inline" set="null" line="92" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" get="inline" set="null" line="98" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" get="inline" set="null" line="104" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" get="inline" set="null" line="111" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" get="inline" set="null" line="122" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" get="inline" set="null" line="131" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<toString set="method" line="133" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<c path="String"/>
</f></toString>
	<parseString public="1" get="inline" set="null" line="159" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
	<fromFloat public="1" get="inline" set="null" line="163" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
	<divMod public="1" set="method" line="171" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<neg public="1" get="inline" set="null" line="221" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="229" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>++A</e></m></meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="237" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A++</e></m></meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="243" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>--A</e></m></meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="251" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A--</e></m></meta>
	</postDecrement>
	<add public="1" get="inline" set="null" line="260" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt get="inline" set="null" line="269" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="274" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt get="inline" set="null" line="283" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="286" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul public="1" get="inline" set="null" line="292" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt get="inline" set="null" line="315" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" get="inline" set="null" line="321" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt get="inline" set="null" line="324" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divInt>
	<intDiv get="inline" set="null" line="327" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</intDiv>
	<mod public="1" get="inline" set="null" line="333" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt get="inline" set="null" line="336" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modInt>
	<intMod get="inline" set="null" line="339" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</intMod>
	<eq public="1" get="inline" set="null" line="345" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt get="inline" set="null" line="348" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" get="inline" set="null" line="354" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt get="inline" set="null" line="357" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt get="inline" set="null" line="360" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<ltInt get="inline" set="null" line="363" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltInt>
	<intLt get="inline" set="null" line="366" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</intLt>
	<lte get="inline" set="null" line="369" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<lteInt get="inline" set="null" line="372" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteInt>
	<intLte get="inline" set="null" line="375" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</intLte>
	<gt get="inline" set="null" line="378" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gtInt get="inline" set="null" line="381" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtInt>
	<intGt get="inline" set="null" line="384" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</intGt>
	<gte get="inline" set="null" line="387" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<gteInt get="inline" set="null" line="390" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteInt>
	<intGte get="inline" set="null" line="393" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</intGte>
	<complement get="inline" set="null" line="399" static="1">
		<f a="a">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
	</complement>
	<and public="1" get="inline" set="null" line="405" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" get="inline" set="null" line="411" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="417" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" get="inline" set="null" line="422" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" get="inline" set="null" line="431" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" get="inline" set="null" line="440" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<high public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></high>
	<get_high get="inline" set="null" line="448" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_high>
	<set_high get="inline" set="null" line="451" static="1"><f a="this:x">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
</f></set_high>
	<low public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></low>
	<get_low get="inline" set="null" line="456" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_low>
	<set_low get="inline" set="null" line="459" static="1"><f a="this:x">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
</f></set_low>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1">
		<_new get="inline" set="null" line="36" static="1">
			<f a="x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<copy public="1" get="inline" set="null" line="43" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<make public="1" get="inline" set="null" line="49" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<ofInt public="1" get="inline" set="null" line="56" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="62" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<is public="1" get="inline" set="null" line="70" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":deprecated"><e>"haxe.Int64.is() is deprecated. Use haxe.Int64.isInt64() instead"</e></m></meta>
		</is>
		<isInt64 public="1" get="inline" set="null" line="78" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</isInt64>
		<getHigh public="1" get="inline" set="null" line="85" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" get="inline" set="null" line="92" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" get="inline" set="null" line="98" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" get="inline" set="null" line="104" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" get="inline" set="null" line="111" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" get="inline" set="null" line="122" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="131" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<toString set="method" line="133" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<c path="String"/>
</f></toString>
		<parseString public="1" get="inline" set="null" line="159" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
		<fromFloat public="1" get="inline" set="null" line="163" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
		<divMod public="1" set="method" line="171" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<neg public="1" get="inline" set="null" line="221" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="229" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>++A</e></m></meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="237" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A++</e></m></meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="243" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>--A</e></m></meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="251" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A--</e></m></meta>
		</postDecrement>
		<add public="1" get="inline" set="null" line="260" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt get="inline" set="null" line="269" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="274" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt get="inline" set="null" line="283" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="286" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul public="1" get="inline" set="null" line="292" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt get="inline" set="null" line="315" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" get="inline" set="null" line="321" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt get="inline" set="null" line="324" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divInt>
		<intDiv get="inline" set="null" line="327" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</intDiv>
		<mod public="1" get="inline" set="null" line="333" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt get="inline" set="null" line="336" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modInt>
		<intMod get="inline" set="null" line="339" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</intMod>
		<eq public="1" get="inline" set="null" line="345" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt get="inline" set="null" line="348" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" get="inline" set="null" line="354" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt get="inline" set="null" line="357" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt get="inline" set="null" line="360" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<ltInt get="inline" set="null" line="363" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltInt>
		<intLt get="inline" set="null" line="366" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</intLt>
		<lte get="inline" set="null" line="369" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<lteInt get="inline" set="null" line="372" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteInt>
		<intLte get="inline" set="null" line="375" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</intLte>
		<gt get="inline" set="null" line="378" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gtInt get="inline" set="null" line="381" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtInt>
		<intGt get="inline" set="null" line="384" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</intGt>
		<gte get="inline" set="null" line="387" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<gteInt get="inline" set="null" line="390" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteInt>
		<intGte get="inline" set="null" line="393" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</intGte>
		<complement get="inline" set="null" line="399" static="1">
			<f a="a">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
		</complement>
		<and public="1" get="inline" set="null" line="405" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" get="inline" set="null" line="411" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="417" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" get="inline" set="null" line="422" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="431" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" get="inline" set="null" line="440" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<high public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></high>
		<get_high get="inline" set="null" line="448" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_high>
		<set_high get="inline" set="null" line="451" static="1"><f a="this:x">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
</f></set_high>
		<low public="1" get="accessor" set="null" static="1"><x path="haxe.Int32"/></low>
		<get_low get="inline" set="null" line="456" static="1"><f a="this">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
</f></get_low>
		<set_low get="inline" set="null" line="459" static="1"><f a="this:x">
	<t path="haxe._Int64.__Int64"/>
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
</f></set_low>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe._Int64.___Int64" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<high public="1"><x path="haxe.Int32"/></high>
		<low public="1"><x path="haxe.Int32"/></low>
		<toString public="1" set="method" line="484">
			<f a=""><c path="String"/></f>
			<haxe_doc>We also define toString here to ensure we always get a pretty string
		when tracing or calling `Std.string`. This tends not to happen when
		`toString` is only in the abstract.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="473"><f a="high:low">
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.Int64Helper" params="" file="/home/runner/work/haxe/haxe/std/haxe/Int64Helper.hx">
		<parseString public="1" set="method" line="36" static="1">
			<f a="sParam">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given string.</haxe_doc>
		</parseString>
		<fromFloat public="1" set="method" line="79" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given float.</haxe_doc>
		</fromFloat>
		<haxe_doc>Helper for parsing to `Int64` instances.</haxe_doc>
	</class>
	<class path="haxe.Json" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/Json.hx" extern="1">
		<parse public="1" set="method" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `text` is not valid JSON, an exception will be thrown.

		@see https://haxe.org/manual/std-Json-parsing.html]]></haxe_doc>
		</parse>
		<stringify public="1" set="method" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes the given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve the
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.

		@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		</stringify>
		<haxe_doc>Cross-platform JSON API: it will automatically use the optimized native API if available.
	Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
	This will provide extra encoding (but not decoding) features such as enums (replaced by their index) and StringMaps.

	@see https://haxe.org/manual/std-Json.html</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":native"><e>"JSON"</e></m>
		</meta>
	</class>
	<class path="haxe.Log" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/Log.hx">
		<formatOutput public="1" set="method" line="26" static="1">
			<f a="v:infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<trace public="1" set="dynamic" line="37" static="1">
			<f a="v:?infos">
				<d/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<clear public="1" set="dynamic" line="50" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":hack"/></meta>
			<haxe_doc>Clears the trace output.</haxe_doc>
		</clear>
		<setColor public="1" set="dynamic" line="58" static="1">
			<f a="rgb">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hack"/></meta>
			<haxe_doc>Sets the color of the trace output to `rgb`.</haxe_doc>
		</setColor>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.MainEvent" params="" file="/home/runner/work/haxe/haxe/std/haxe/MainLoop.hx" module="haxe.MainLoop">
		<f><f a=""><x path="Void"/></f></f>
		<prev><c path="haxe.MainEvent"/></prev>
		<next><c path="haxe.MainEvent"/></next>
		<isBlocking public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
			<haxe_doc>Tells if the event can lock the process from exiting (default:true)</haxe_doc>
		</isBlocking>
		<nextRun public="1" set="null"><x path="Float"/></nextRun>
		<priority public="1" set="null"><x path="Int"/></priority>
		<delay public="1" set="method" line="32">
			<f a="t">
				<x path="Null"><x path="Float"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Delay the execution of the event for the given time, in seconds.
		If t is null, the event will be run at tick() time.</haxe_doc>
		</delay>
		<call public="1" get="inline" set="null" line="39">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Call the event. Will do nothing if the event has been stopped.</haxe_doc>
		</call>
		<stop public="1" set="method" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop the event from firing anymore.</haxe_doc>
		</stop>
		<new set="method" line="22"><f a="f:p">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.MainLoop" params="" file="/home/runner/work/haxe/haxe/std/haxe/MainLoop.hx">
		<pending static="1"><c path="haxe.MainEvent"/></pending>
		<threadCount public="1" get="accessor" set="null" static="1"><x path="Int"/></threadCount>
		<get_threadCount get="inline" set="null" line="69" static="1"><f a=""><x path="Int"/></f></get_threadCount>
		<hasEvents public="1" set="method" line="71" static="1"><f a=""><x path="Bool"/></f></hasEvents>
		<addThread public="1" set="method" line="81" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<runInMainThread public="1" set="method" line="85" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<add public="1" set="method" line="92" static="1">
			<f a="f:?priority" v=":0">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.MainEvent"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0 }</e></m></meta>
			<haxe_doc>Add a pending event to be run into the main loop.</haxe_doc>
		</add>
		<sortEvents set="method" line="104" static="1"><f a=""><x path="Void"/></f></sortEvents>
		<tick set="method" line="169" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Run the pending events. Return the time for next event.</haxe_doc>
		</tick>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":access"><e>haxe.MainEvent</e></m>
		</meta>
	</class>
	<class path="haxe.NativeStackTrace" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/NativeStackTrace.hx">
		<saveStack public="1" get="inline" set="null" line="14" static="1">
			<f a="e">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature"><e>"haxe.NativeStackTrace.exceptionStack"</e></m></meta>
		</saveStack>
		<callStack public="1" get="inline" set="null" line="17" static="1"><f a=""><c path="String"/></f></callStack>
		<exceptionStack public="1" set="method" line="21" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
		</exceptionStack>
		<toHaxe public="1" set="method" line="26" static="1">
			<f a="native:?skip" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":value"><e>{ skip : 0 }</e></m></meta>
		</toHaxe>
		<normalize set="method" line="53" static="1">
			<f a="stack:?skipItems" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ skipItems : 0 }</e></m></meta>
		</normalize>
		<skipLines set="method" line="61" static="1">
			<f a="stack:skip:?pos" v="::0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</skipLines>
		<haxe_doc>Do not use manually.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":allow"><e>haxe.Exception</e></m>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/home/runner/work/haxe/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Resource" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/Resource.hx">
		<content static="1"><c path="Array"><a><name><c path="String"/></name></a></c></content>
		<listNames public="1" set="method" line="29" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Lists all available resource names. The resource name is the name part
		of the `--resource file@name` command line parameter.</haxe_doc>
		</listNames>
		<getString public="1" set="method" line="36" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as a `String`.

		If `name` does not match any resource name, `null` is returned.</haxe_doc>
		</getString>
		<getBytes public="1" set="method" line="41" static="1">
			<f a="name">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as an instance of
		haxe.io.Bytes.

		If `name` does not match any resource name, `null` is returned.</haxe_doc>
		</getBytes>
		<resolve set="method" line="46" static="1">
			<f a="name">
				<c path="String"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</resolve>
		<haxe_doc>Resource can be used to access resources that were added through the
	`--resource file@name` command line parameter.

	Depending on their type they can be obtained as `String` through
	`getString(name)`, or as binary data through `getBytes(name)`.

	A list of all available resource names can be obtained from `listNames()`.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe._Rest.NativeRest" params="T" file="/home/runner/work/haxe/haxe/std/haxe/Rest.hx" private="1" module="haxe.Rest"><c path="Array"><c path="haxe._Rest.NativeRest.T"/></c></typedef>
	<abstract path="haxe.Rest" params="T" file="/home/runner/work/haxe/haxe/std/haxe/Rest.hx">
		<from><icast field="of"><c path="Array"><c path="of.T"/></c></icast></from>
		<this><t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t></this>
		<to><icast field="toArray"><c path="Array"><c path="haxe.Rest.T"/></c></icast></to>
		<haxe_doc><![CDATA[A special type that represents a "rest" function argument.

	The special `...` syntax can be used for convenience and improved readability:

	```haxe
	function f(...rest:Int) {
		$type(rest); // haxe.Rest<Int>
	}

	f(1, 2, 3);

	final array = [1, 2, 3];
	f(...array);
	```

	Should be used as a type for the last argument of a method, indicating that
	an arbitrary number of arguments of the given type can be passed to that method.

	Allows to use array access by index to get values of rest arguments.
	If the index exceeds the amount of rest arguments passed, the result is unspecified.]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe._Rest.Rest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>Amount of arguments passed as rest arguments</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="35" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<x path="Int"/>
</f></get_length>
	<of public="1" params="T" get="inline" set="null" line="46" static="1">
		<f a="array">
			<c path="Array"><c path="of.T"/></c>
			<x path="haxe.Rest"><c path="of.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Create rest arguments using contents of `array`.

		WARNING:
		Depending on a target platform modifying `array` after using this method
		may affect the created `Rest` instance.
		Use `Rest.of(array.copy())` to avoid that.</haxe_doc>
	</of>
	<_new get="inline" set="null" line="48" static="1">
		<f a="array">
			<c path="Array"><c path="haxe.Rest.T"/></c>
			<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get get="inline" set="null" line="52" static="1">
		<f a="this:index">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<x path="Int"/>
			<c path="haxe.Rest.T"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<toArray public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<c path="Array"><c path="haxe.Rest.T"/></c>
		</f>
		<meta><m n=":to"/></meta>
		<haxe_doc>Creates an array containing all the values of rest arguments.</haxe_doc>
	</toArray>
	<iterator public="1" get="inline" set="null" line="61" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestIterator"><c path="haxe.Rest.T"/></c>
</f></iterator>
	<keyValueIterator public="1" get="inline" set="null" line="64" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestKeyValueIterator"><c path="haxe.Rest.T"/></c>
</f></keyValueIterator>
	<append public="1" set="method" line="69" static="1">
		<f a="this:item">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<c path="haxe.Rest.T"/>
			<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
		</f>
		<haxe_doc>Create a new rest arguments collection by appending `item` to this one.</haxe_doc>
	</append>
	<prepend public="1" set="method" line="78" static="1">
		<f a="this:item">
			<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
			<c path="haxe.Rest.T"/>
			<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
		</f>
		<haxe_doc>Create a new rest arguments collection by prepending this one with `item`.</haxe_doc>
	</prepend>
	<toString public="1" get="inline" set="null" line="84" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="String"/>
</f></toString>
	<meta><m n=":coreApi"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._Rest.Rest_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Amount of arguments passed as rest arguments</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="35" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<x path="Int"/>
</f></get_length>
		<of public="1" params="T" get="inline" set="null" line="46" static="1">
			<f a="array">
				<c path="Array"><c path="of.T"/></c>
				<x path="haxe.Rest"><c path="of.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Create rest arguments using contents of `array`.

		WARNING:
		Depending on a target platform modifying `array` after using this method
		may affect the created `Rest` instance.
		Use `Rest.of(array.copy())` to avoid that.</haxe_doc>
		</of>
		<_new get="inline" set="null" line="48" static="1">
			<f a="array">
				<c path="Array"><c path="haxe.Rest.T"/></c>
				<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get get="inline" set="null" line="52" static="1">
			<f a="this:index">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<x path="Int"/>
				<c path="haxe.Rest.T"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<toArray public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<c path="Array"><c path="haxe.Rest.T"/></c>
			</f>
			<meta><m n=":to"/></meta>
			<haxe_doc>Creates an array containing all the values of rest arguments.</haxe_doc>
		</toArray>
		<iterator public="1" get="inline" set="null" line="61" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestIterator"><c path="haxe.Rest.T"/></c>
</f></iterator>
		<keyValueIterator public="1" get="inline" set="null" line="64" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="haxe.iterators.RestKeyValueIterator"><c path="haxe.Rest.T"/></c>
</f></keyValueIterator>
		<append public="1" set="method" line="69" static="1">
			<f a="this:item">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<c path="haxe.Rest.T"/>
				<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
			</f>
			<haxe_doc>Create a new rest arguments collection by appending `item` to this one.</haxe_doc>
		</append>
		<prepend public="1" set="method" line="78" static="1">
			<f a="this:item">
				<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
				<c path="haxe.Rest.T"/>
				<x path="haxe.Rest"><c path="haxe.Rest.T"/></x>
			</f>
			<haxe_doc>Create a new rest arguments collection by prepending this one with `item`.</haxe_doc>
		</prepend>
		<toString public="1" get="inline" set="null" line="84" static="1"><f a="this">
	<t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t>
	<c path="String"/>
</f></toString>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.Serializer" params="" file="/home/runner/work/haxe/haxe/std/haxe/Serializer.hx">
		<USE_CACHE public="1" expr="false" line="57" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set `USE_CACHE` to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of `Serializer` by
		setting their `useCache` field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" expr="false" line="69" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of `Serializer` by
		setting their `useEnumIndex` field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="71" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<BASE64_CODES expr="null" line="72" static="1">
			<x path="Null"><x path="haxe.ds.Vector"><x path="Null"><x path="Int"/></x></x></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</BASE64_CODES>
		<run public="1" set="method" line="582" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

	This is a convenience function for creating a new instance of
	Serializer, serialize `v` into it and obtain the result through a call
	to `toString()`.</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<scount><x path="Int"/></scount>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See `USE_CACHE` for a complete description.</haxe_doc>
		</useCache>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See `USE_ENUM_INDEX` for a complete description.</haxe_doc>
		</useEnumIndex>
		<toString public="1" set="method" line="118">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		https://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<serializeString set="method" line="154"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="174"><f a="v">
	<d/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeClassFields set="method" line="197">
			<f a="v:c">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</serializeClassFields>
		<serializeFields set="method" line="211"><f a="v">
	<a/>
	<x path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="229">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes `v`.

	All haxe-defined values and objects with the exception of functions can
	be serialized. Serialization of external/native objects is not
	guaranteed to work.

	The values of `this.useCache` and `this.useEnumIndex` may affect
	serialization output.</haxe_doc>
		</serialize>
		<__getField get="inline" set="null" line="557"><f a="o:f">
	<d/>
	<c path="String"/>
	<d/>
</f></__getField>
		<serializeException public="1" set="method" line="559">
			<f a="e">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</serializeException>
		<new public="1" set="method" line="103">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each `Serializer` instance maintains its own cache if `this.useCache` is
		`true`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The Serializer class can be used to encode values and objects into a `String`,
	from which the `Unserializer` class can recreate the original representation.

	This class can be used in two ways:

	- create a `new Serializer()` instance, call its `serialize()` method with
		any argument and finally retrieve the String representation from
		`toString()`
	- call `Serializer.run()` to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/std-serialization-format.html>]]></haxe_doc>
	</class>
	<enum path="haxe._Template.TemplateExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/Template.hx" private="1" module="haxe.Template">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
			<e path="haxe._Template.TemplateExpr"/>
		</OpIf>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpBlock a="l"><c path="haxe.ds.List"><e path="haxe._Template.TemplateExpr"/></c></OpBlock>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
		</OpForeach>
		<OpMacro a="name:params">
			<c path="String"/>
			<c path="haxe.ds.List"><e path="haxe._Template.TemplateExpr"/></c>
		</OpMacro>
	</enum>
	<typedef path="haxe._Template.Token" params="" file="/home/runner/work/haxe/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="/home/runner/work/haxe/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="haxe.Template" params="" file="/home/runner/work/haxe/haxe/std/haxe/Template.hx">
		<splitter expr="~/(::[A-Za-z0-9_ ()&amp;|!+=/&gt;&lt;*.&quot;-]+::|\$\$([A-Za-z0-9_-]+)\()/" line="58" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(::[A-Za-z0-9_ ()&|!+=/><*."-]+::|\$\$([A-Za-z0-9_-]+)\()/]]></e></m></meta>
		</splitter>
		<expr_splitter expr="~/(\(|\)|[ 
	]*&quot;[^&quot;]*&quot;[ 
	]*|[!+=/&gt;&lt;*.&amp;|-]+)/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(\(|\)|[ 
	]*"[^"]*"[ 
	]*|[!+=/><*.&|-]+)/]]></e></m></meta>
		</expr_splitter>
		<expr_trim expr="~/^[ ]*([^ ]+)[ ]*$/" line="60" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ ]*([^ ]+)[ ]*$/</e></m></meta>
		</expr_trim>
		<expr_int expr="~/^[0-9]+$/" line="61" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[0-9]+$/</e></m></meta>
		</expr_int>
		<expr_float expr="~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/" line="62" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/</e></m></meta>
		</expr_float>
		<globals public="1" expr="{ }" line="68" static="1">
			<d/>
			<meta><m n=":value"><e>{ }</e></m></meta>
			<haxe_doc>Global replacements which are used across all `Template` instances. This
		has lower priority than the context argument of `execute()`.</haxe_doc>
		</globals>
		<hxKeepArrayIterator expr="[].iterator()" line="71" static="1">
			<c path="haxe.iterators.ArrayIterator"><d/></c>
			<meta>
				<m n=":value"><e>[].iterator()</e></m>
				<m n=":ifFeature"><e>"haxe.Template.run"</e></m>
			</meta>
		</hxKeepArrayIterator>
		<expr><e path="haxe._Template.TemplateExpr"/></expr>
		<context><d/></context>
		<macros><d/></macros>
		<stack><c path="haxe.ds.List"><d/></c></stack>
		<buf><c path="StringBuf"/></buf>
		<execute public="1" set="method" line="112">
			<f a="context:?macros">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Executes `this` `Template`, taking into account `context` for
		replacements and `macros` for callback functions.

		If `context` has a field `name`, its value replaces all occurrences of
		`::name::` in the `Template`. Otherwise `Template.globals` is checked instead,
		If `name` is not a field of that either, `::name::` is replaced with `null`.

		If `macros` has a field `name`, all occurrences of `$$name(args)` are
		replaced with the result of calling that field. The first argument is
		always the `resolve()` method, followed by the given arguments.
		If `macros` has no such field, the result is unspecified.

		If `context` is `null`, the result is unspecified. If `macros` is `null`,
		no macros are used.</haxe_doc>
		</execute>
		<resolve set="method" line="121"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<parseTokens set="method" line="137"><f a="data">
	<c path="String"/>
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
</f></parseTokens>
		<parseBlock set="method" line="184"><f a="tokens">
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parseBlock>
		<parse set="method" line="199"><f a="tokens">
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parse>
		<parseExpr set="method" line="265"><f a="data">
	<c path="String"/>
	<f a=""><d/></f>
</f></parseExpr>
		<makeConst set="method" line="304"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<makePath set="method" line="329"><f a="e:l">
	<f a=""><d/></f>
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makePath>
		<makeExpr set="method" line="345"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr>
		<skipSpaces set="method" line="349"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<x path="Void"/>
</f></skipSpaces>
		<makeExpr2 set="method" line="362"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr2>
		<run set="method" line="441"><f a="e">
	<e path="haxe._Template.TemplateExpr"/>
	<x path="Void"/>
</f></run>
		<new public="1" set="method" line="89">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Template` instance from `str`.

		`str` is parsed into tokens, which are stored for internal use. This
		means that multiple `execute()` operations on a single `Template` instance
		are more efficient than one `execute()` operations on multiple `Template`
		instances.

		If `str` is `null`, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`Template` provides a basic templating mechanism to replace values in a source
	String, and to have some basic logic.

	A complete documentation of the supported syntax is available at:
	<https://haxe.org/manual/std-template.html>]]></haxe_doc>
	</class>
	<class path="haxe.Timer" params="" file="/home/runner/work/haxe/haxe/std/haxe/Timer.hx">
		<delay public="1" set="method" line="145" static="1">
			<f a="f:time_ms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>Invokes `f` after `time_ms` milliseconds.

		This is a convenience function for creating a new Timer instance with
		`time_ms` as argument, binding its `run()` method to `f` and then stopping
		`this` Timer upon the first invocation.

		If `f` is `null`, the result is unspecified.</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="165" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<c path="measure.T"/>
			</f>
			<haxe_doc>Measures the time it takes to execute `f`, in seconds with fractions.

		This is a convenience function for calculating the difference between
		`Timer.stamp()` before and after the invocation of `f`.

		The difference is passed as argument to `Log.trace()`, with `"s"` appended
		to denote the unit. The optional `pos` argument is passed through.

		If `f` is `null`, the result is unspecified.</haxe_doc>
		</measure>
		<stamp public="1" get="inline" set="null" line="178" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a timestamp, in seconds with fractions.

		The value itself might differ depending on platforms, only differences
		between two values make sense.</haxe_doc>
		</stamp>
		<id><x path="Null"><x path="Int"/></x></id>
		<stop public="1" set="method" line="100">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="134">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:

		```haxe
		var timer = new haxe.Timer(1000); // 1000ms delay
		timer.run = function() { ... }
		```

		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="70">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this.run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The `Timer` class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the `Timer` class with a given
	interval, set its `run()` method to a custom function to be invoked and
	eventually call `stop()` to stop the `Timer`.

	Note that a running `Timer` may or may not prevent the program to exit
	automatically when `main()` returns.

	It is also possible to extend this class and override its `run()` method in
	the child class.

	Notice for threaded targets:
	`Timer` instances require threads they were created in to run with Haxe's event loops.
	Main thread of a Haxe program always contains an event loop. For other cases use 
	`sys.thread.Thread.createWithEventLoop` and `sys.thread.Thread.runWithEventLoop` methods.</haxe_doc>
	</class>
	<abstract path="haxe.Ucs2" params="" file="/home/runner/work/haxe/haxe/std/haxe/Ucs2.hx">
		<this><c path="String"/></this>
		<haxe_doc>Cross platform UCS2 string API.</haxe_doc>
		<impl><class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2" final="1">
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<_new get="inline" set="null" line="31" static="1">
		<f a="str">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="40" static="1"><f a="this">
	<c path="String"/>
	<x path="Int"/>
</f></get_length>
	<toUpperCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
	</toUpperCase>
	<toLowerCase public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
	</toLowerCase>
	<charAt public="1" get="inline" set="null" line="68" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
	</charAt>
	<charCodeAt public="1" get="inline" set="null" line="81" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="Null"><x path="Int"/></x>
		</f>
		<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be used
		instead to extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
	</charCodeAt>
	<indexOf public="1" get="inline" set="null" line="96" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</indexOf>
	<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</lastIndexOf>
	<split public="1" get="inline" set="null" line="135" static="1">
		<f a="this:delimiter">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<c path="Array"><x path="haxe.Ucs2"/></c>
		</f>
		<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
	</split>
	<substr public="1" get="inline" set="null" line="154" static="1">
		<f a="this:pos:?len">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
	</substr>
	<substring public="1" get="inline" set="null" line="171" static="1">
		<f a="this:startIndex:?endIndex">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
	</substring>
	<toNativeString public="1" get="inline" set="null" line="178" static="1">
		<f a="this">
			<c path="String"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns the native underlying String.</haxe_doc>
	</toNativeString>
	<fromCharCode public="1" get="inline" set="null" line="188" static="1">
		<f a="code">
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
	</fromCharCode>
</class></impl>
	</abstract>
	<class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2" final="1">
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<_new get="inline" set="null" line="31" static="1">
			<f a="str">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="40" static="1"><f a="this">
	<c path="String"/>
	<x path="Int"/>
</f></get_length>
		<toUpperCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" get="inline" set="null" line="68" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" get="inline" set="null" line="81" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be used
		instead to extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" get="inline" set="null" line="96" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" get="inline" set="null" line="135" static="1">
			<f a="this:delimiter">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<c path="Array"><x path="haxe.Ucs2"/></c>
			</f>
			<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
		</split>
		<substr public="1" get="inline" set="null" line="154" static="1">
			<f a="this:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" get="inline" set="null" line="171" static="1">
			<f a="this:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
		</substring>
		<toNativeString public="1" get="inline" set="null" line="178" static="1">
			<f a="this">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the native underlying String.</haxe_doc>
		</toNativeString>
		<fromCharCode public="1" get="inline" set="null" line="188" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
	</class>
	<class path="haxe._Unserializer.DefaultResolver" params="" file="/home/runner/work/haxe/haxe/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<resolveClass public="1" get="inline" set="null" line="515"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="518"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new public="1" set="method" line="512"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.Unserializer" params="" file="/home/runner/work/haxe/haxe/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" expr="new DefaultResolver()" line="67" static="1">
			<t path="haxe.TypeResolver"/>
			<meta><m n=":value"><e>new DefaultResolver()</e></m></meta>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a `Class` or `Enum` instance from a given `String`.
		By default, the Haxe `Type` Api is used.

		A type resolver must provide two methods:

		1. `resolveClass(name:String):Class<Dynamic>` is called to determine a
				`Class` from a class name
		2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an
				`Enum` from an enum name

		This value is applied when a new `Unserializer` instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="69" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<CODES expr="null" line="72" static="1">
			<x path="Null"><c path="flash.utils.ByteArray"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</CODES>
		<initCodes set="method" line="74" static="1"><f a=""><c path="flash.utils.ByteArray"/></f></initCodes>
		<run public="1" set="method" line="470" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its `unserialize()` method
		once.</haxe_doc>
		</run>
		<fastLength get="inline" set="null" line="478" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></fastLength>
		<fastCharCodeAt get="inline" set="null" line="486" static="1"><f a="s:pos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></fastCharCodeAt>
		<fastCharAt get="inline" set="null" line="494" static="1"><f a="s:pos">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></fastCharAt>
		<fastSubstr get="inline" set="null" line="502" static="1"><f a="s:pos:length">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></fastSubstr>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="126">
			<f a="r">
				<x path="Null"><t path="haxe.TypeResolver"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is `null`, a special resolver is used which returns `null` for all
		input values.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</setResolver>
		<getResolver public="1" set="method" line="138">
			<f a=""><t path="haxe.TypeResolver"/></f>
			<haxe_doc>Gets the type resolver of `this` Unserializer instance.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</getResolver>
		<get get="inline" set="null" line="142"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<readDigits set="method" line="150"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="175"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="190"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum params="T" set="method" line="205"><f a="edecl:tag">
	<x path="Enum"><c path="unserializeEnum.T"/></x>
	<c path="String"/>
	<c path="unserializeEnum.T"/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="237">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different Haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from `Type.createEmptyInstance`, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="101">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Unserializer` class is the complement to the `Serializer` class. It parses
	a serialization `String` and creates objects from the contained data.

	This class can be used in two ways:

	- create a `new Unserializer()` instance with a given serialization
		String, then call its `unserialize()` method until all values are
		extracted
	- call `Unserializer.run()`  to unserialize a single value from a given
		String

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/serialization/format>]]></haxe_doc>
	</class>
	<class path="haxe._Unserializer.NullResolver" params="" file="/home/runner/work/haxe/haxe/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe._Unserializer.NullResolver"/></instance>
		<get_instance get="inline" set="null" line="532" static="1"><f a=""><c path="haxe._Unserializer.NullResolver"/></f></get_instance>
		<resolveClass public="1" get="inline" set="null" line="525"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="528"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new set="method" line="522"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.Utf8" params="" file="/home/runner/work/haxe/haxe/std/haxe/Utf8.hx">
		<iter public="1" set="method" line="57" static="1">
			<f a="s:chars">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call the `chars` function for each UTF8 char of the string.</haxe_doc>
		</iter>
		<encode public="1" set="method" line="65" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode the input ISO string into the corresponding UTF8 one.</haxe_doc>
		</encode>
		<decode public="1" set="method" line="73" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an UTF8 string back to an ISO string.
		Throw an exception if a given UTF8 character is not supported by the decoder.</haxe_doc>
		</decode>
		<charCodeAt public="1" get="inline" set="null" line="80" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `String.charCodeAt` but uses the UTF8 character position.</haxe_doc>
		</charCodeAt>
		<validate public="1" get="inline" set="null" line="87" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the String is correctly encoded as UTF8.</haxe_doc>
		</validate>
		<length public="1" get="inline" set="null" line="97" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of UTF8 chars of the String.</haxe_doc>
		</length>
		<compare public="1" set="method" line="104" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare two UTF8 strings, character by character.</haxe_doc>
		</compare>
		<sub public="1" get="inline" set="null" line="111" static="1">
			<f a="s:pos:len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>This is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.</haxe_doc>
		</sub>
		<__b><c path="String"/></__b>
		<addChar public="1" get="inline" set="null" line="43">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="50">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String.</haxe_doc>
		</toString>
		<new public="1" set="method" line="36">
			<f a="?size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since not all platforms guarantee that `String` always uses UTF-8 encoding, you
	can use this cross-platform API to perform operations on such strings.</haxe_doc>
		<meta><m n=":deprecated"><e>"haxe.Utf8 is deprecated. Use UnicodeString instead."</e></m></meta>
	</class>
	<class path="haxe.ValueException" params="" file="/home/runner/work/haxe/haxe/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<unwrap set="method" line="35" override="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		This method must return the same value on subsequent calls.
		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.crypto.Adler32" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Adler32.hx">
		<read public="1" set="method" line="60" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.crypto.Adler32"/>
</f></read>
		<make public="1" set="method" line="71" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></make>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<get public="1" set="method" line="37"><f a=""><x path="Int"/></f></get>
		<update public="1" set="method" line="41"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="52"><f a="a">
	<c path="haxe.crypto.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Adler32 of the given Bytes.</haxe_doc>
	</class>
	<class path="haxe.io.Bytes" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="549" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance with the given `length`. The values of the
		bytes are not initialized and may not be zero.</haxe_doc>
		</alloc>
		<ofString public="1" set="method" line="580" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `String`, using the
		specified encoding (UTF-8 by default).</haxe_doc>
		</ofString>
		<ofData public="1" set="method" line="656" static="1">
			<f a="b">
				<t path="haxe.io.BytesData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `BytesData`.</haxe_doc>
		</ofData>
		<ofHex public="1" set="method" line="673" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Converts the given hexadecimal `String` to `Bytes`. `s` must be a string of
		even length consisting only of hexadecimal digits. For example:
		`"0FDA14058916052309"`.</haxe_doc>
		</ofHex>
		<fastGet public="1" get="inline" set="null" line="694" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads the `pos`-th byte of the given `b` bytes, in the most efficient way
		possible. Behavior when reading outside of the available data is
		unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="45">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the byte at index `pos`.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="64">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given byte `v` at the given position `pos`.</haxe_doc>
		</set>
		<blit public="1" set="method" line="90">
			<f a="pos:src:srcpos:len">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `len` bytes from `src` into this instance.
		@param pos Zero-based location in `this` instance at which to start writing
			bytes.
		@param src Source `Bytes` instance from which to copy bytes.
		@param srcpos Zero-based location at `src` from which bytes will be copied.
		@param len Number of bytes to be copied.</haxe_doc>
		</blit>
		<fill public="1" set="method" line="132">
			<f a="pos:len:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets `len` consecutive bytes starting from index `pos` of `this` instance
		to `value`.</haxe_doc>
		</fill>
		<sub public="1" set="method" line="155">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance that contains a copy of `len` bytes of
		`this` instance, starting at index `pos`.</haxe_doc>
		</sub>
		<compare public="1" set="method" line="194">
			<f a="other">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns `0` if the bytes of `this` instance and the bytes of `other` are
		identical.

		Returns a negative value if the `length` of `this` instance is less than
		the `length` of `other`, or a positive value if the `length` of `this`
		instance is greater than the `length` of `other`.

		In case of equal `length`s, returns a negative value if the first different
		value in `other` is greater than the corresponding value in `this`
		instance; otherwise returns a positive value.</haxe_doc>
		</compare>
		<getDouble public="1" get="inline" set="null" line="246">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE double-precision value at the given position `pos` (in
		little-endian encoding). Result is unspecified if `pos` is outside the
		bounds.</haxe_doc>
		</getDouble>
		<getFloat public="1" get="inline" set="null" line="269">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single-precision value at the given position `pos` (in
		little-endian encoding). Result is unspecified if `pos` is outside the
		bounds.</haxe_doc>
		</getFloat>
		<setDouble public="1" get="inline" set="null" line="292">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given IEEE double-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" get="inline" set="null" line="319">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given IEEE single-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" get="inline" set="null" line="340">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16-bit unsigned integer at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="352">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 16-bit unsigned integer `v` at the given position `pos`
		(in little-endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" get="inline" set="null" line="365">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32-bit integer at the given position `pos` (in little-endian
		encoding).</haxe_doc>
		</getInt32>
		<getInt64 public="1" get="inline" set="null" line="383">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64-bit integer at the given position `pos` (in little-endian
		encoding).</haxe_doc>
		</getInt64>
		<setInt32 public="1" get="inline" set="null" line="391">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 32-bit integer `v` at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</setInt32>
		<setInt64 public="1" get="inline" set="null" line="406">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 64-bit integer `v` at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="415">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the `len`-bytes long string stored at the given position `pos`,
		interpreted with the given `encoding` (UTF-8 by default).</haxe_doc>
		</getString>
		<readString public="1" get="inline" set="null" line="495">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="502">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a `String` representation of the bytes interpreted as UTF-8.</haxe_doc>
		</toString>
		<toHex public="1" set="method" line="524">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a hexadecimal `String` representation of the bytes of `this`
		instance.</haxe_doc>
		</toHex>
		<getData public="1" get="inline" set="null" line="541">
			<f a=""><t path="haxe.io.BytesData"/></f>
			<haxe_doc>Returns the bytes of `this` instance as `BytesData`.</haxe_doc>
		</getData>
		<new set="method" line="34"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.io.Encoding" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.crypto.Base64" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<URL_CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_&quot;" line="32" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"</e></m></meta>
		</URL_CHARS>
		<URL_BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(URL_CHARS)" line="33" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(URL_CHARS)</e></m></meta>
		</URL_BYTES>
		<encode public="1" set="method" line="35" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</encode>
		<decode public="1" set="method" line="48" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</decode>
		<urlEncode public="1" set="method" line="55" static="1">
			<f a="bytes:?complement" v=":false">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : false }</e></m></meta>
		</urlEncode>
		<urlDecode public="1" set="method" line="68" static="1">
			<f a="str:?complement" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : false }</e></m></meta>
		</urlDecode>
		<haxe_doc>Allows one to encode/decode String and bytes using Base64 encoding.</haxe_doc>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="128" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="133" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="112"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="120"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows one to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
	</class>
	<class path="haxe.crypto.Crc32" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Crc32.hx">
		<make public="1" set="method" line="59" static="1">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Calculates the CRC32 of the given data bytes</haxe_doc>
		</make>
		<crc><x path="Int"/></crc>
		<byte public="1" get="inline" set="null" line="35"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></byte>
		<update public="1" get="inline" set="null" line="42"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<get public="1" get="inline" set="null" line="52"><f a=""><x path="Int"/></f></get>
		<new public="1" get="inline" set="null" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Crc32 of the given Bytes.</haxe_doc>
	</class>
	<enum path="haxe.crypto.HashMethod" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Hmac.hx" module="haxe.crypto.Hmac">
		<MD5/>
		<SHA1/>
		<SHA256/>
		<haxe_doc>Hash methods for Hmac calculation.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.crypto.Hmac" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Hmac.hx">
		<method><e path="haxe.crypto.HashMethod"/></method>
		<blockSize><x path="Int"/></blockSize>
		<length><x path="Int"/></length>
		<doHash get="inline" set="null" line="54"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></doHash>
		<nullPad set="method" line="62"><f a="s:chunkLen">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></nullPad>
		<make public="1" set="method" line="73"><f a="key:msg">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<new public="1" set="method" line="42"><f a="hashMethod">
	<e path="haxe.crypto.HashMethod"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Calculates a Hmac of the given Bytes using a HashMethod.</haxe_doc>
	</class>
	<class path="haxe.crypto.Md5" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Md5.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<bytes2blks set="method" line="90" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<str2blks set="method" line="120" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bitOR set="method" line="57"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="63"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="69"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<addme set="method" line="75"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<hex set="method" line="81"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<rol set="method" line="154"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<cmn set="method" line="158"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<ff set="method" line="162"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<gg set="method" line="166"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<hh set="method" line="170"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<ii set="method" line="174"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<doEncode set="method" line="178"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<new set="method" line="55"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a MD5 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha1" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Sha1.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="95" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Convert a string to a sequence of 16-word blocks, stored as an array.
		Append padding bits and the length, as described in the SHA1 standard.</haxe_doc>
		</str2blks>
		<bytes2blks set="method" line="115" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="50"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<rol get="inline" set="null" line="135">
			<f a="num:cnt">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Bitwise rotate a 32-bit number to the left</haxe_doc>
		</rol>
		<ft set="method" line="142">
			<f a="t:b:c:d">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Perform the appropriate triplet combination function for the current iteration</haxe_doc>
		</ft>
		<kt set="method" line="155">
			<f a="t">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Determine the appropriate additive constant for the current iteration</haxe_doc>
		</kt>
		<hex set="method" line="165"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha1 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha224" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Sha224.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="126" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<safeAdd get="inline" set="null" line="142" static="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<doEncode set="method" line="50"><f a="str:strlen">
	<c path="String"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<ROTR get="inline" set="null" line="149"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ROTR>
		<SHR get="inline" set="null" line="154"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></SHR>
		<Ch get="inline" set="null" line="159"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj get="inline" set="null" line="164"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0 get="inline" set="null" line="168"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0>
		<Sigma1 get="inline" set="null" line="172"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1>
		<Gamma0 get="inline" set="null" line="176"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0>
		<Gamma1 get="inline" set="null" line="180"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1>
		<hex set="method" line="184"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha224 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha256" params="" file="/home/runner/work/haxe/haxe/std/haxe/crypto/Sha256.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="113" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Convert a string to a sequence of 16-word blocks, stored as an array.
		Append padding bits and the length, as described in the SHA1 standard.</haxe_doc>
		</str2blks>
		<bytes2blks set="method" line="133" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="50"><f a="m:l">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<S get="inline" set="null" line="150"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></S>
		<R get="inline" set="null" line="154"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></R>
		<Ch get="inline" set="null" line="158"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj get="inline" set="null" line="162"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0256 get="inline" set="null" line="166"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0256>
		<Sigma1256 get="inline" set="null" line="170"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1256>
		<Gamma0256 get="inline" set="null" line="174"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0256>
		<Gamma1256 get="inline" set="null" line="178"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1256>
		<safeAdd get="inline" set="null" line="182"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<hex set="method" line="188"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha256 of a String.</haxe_doc>
	</class>
	<abstract path="haxe.display.UnresolvedIdentifierSuggestion" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Diagnostic.UnresolvedIdentifierSuggestion_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
	<UISImport public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.UnresolvedIdentifierSuggestion"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UISImport>
	<UISTypo public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.UnresolvedIdentifierSuggestion"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UISTypo>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Diagnostic.UnresolvedIdentifierSuggestion_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
		<UISImport public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.UnresolvedIdentifierSuggestion"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UISImport>
		<UISTypo public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.UnresolvedIdentifierSuggestion"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UISTypo>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.MissingFieldCauseKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Diagnostic.MissingFieldCauseKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
	<AbstractParent public="1" get="inline" set="null" expr="cast &quot;AbstractParent&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a><parent><t path="haxe.display.JsonTypePathWithParams"/></parent></a></x>
		<meta>
			<m n=":value"><e>cast "AbstractParent"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AbstractParent>
	<ImplementedInterface public="1" get="inline" set="null" expr="cast &quot;ImplementedInterface&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a><parent><t path="haxe.display.JsonTypePathWithParams"/></parent></a></x>
		<meta>
			<m n=":value"><e>cast "ImplementedInterface"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImplementedInterface>
	<PropertyAccessor public="1" get="inline" set="null" expr="cast &quot;PropertyAccessor&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a>
	<property><t path="haxe.display.JsonClassField"/></property>
	<isGetter><x path="Bool"/></isGetter>
</a></x>
		<meta>
			<m n=":value"><e>cast "PropertyAccessor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PropertyAccessor>
	<FieldAccess public="1" get="inline" set="null" expr="cast &quot;FieldAccess&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a/></x>
		<meta>
			<m n=":value"><e>cast "FieldAccess"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FieldAccess>
	<FinalFields public="1" get="inline" set="null" expr="cast &quot;FinalFields&quot;" line="1" static="1">
		<x path="haxe.display.MissingFieldCauseKind"><a><fields><c path="Array"><t path="haxe.display.JsonClassField"/></c></fields></a></x>
		<meta>
			<m n=":value"><e>cast "FinalFields"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FinalFields>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Diagnostic.MissingFieldCauseKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
		<AbstractParent public="1" get="inline" set="null" expr="cast &quot;AbstractParent&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a><parent><t path="haxe.display.JsonTypePathWithParams"/></parent></a></x>
			<meta>
				<m n=":value"><e>cast "AbstractParent"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AbstractParent>
		<ImplementedInterface public="1" get="inline" set="null" expr="cast &quot;ImplementedInterface&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a><parent><t path="haxe.display.JsonTypePathWithParams"/></parent></a></x>
			<meta>
				<m n=":value"><e>cast "ImplementedInterface"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImplementedInterface>
		<PropertyAccessor public="1" get="inline" set="null" expr="cast &quot;PropertyAccessor&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a>
	<property><t path="haxe.display.JsonClassField"/></property>
	<isGetter><x path="Bool"/></isGetter>
</a></x>
			<meta>
				<m n=":value"><e>cast "PropertyAccessor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PropertyAccessor>
		<FieldAccess public="1" get="inline" set="null" expr="cast &quot;FieldAccess&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a/></x>
			<meta>
				<m n=":value"><e>cast "FieldAccess"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FieldAccess>
		<FinalFields public="1" get="inline" set="null" expr="cast &quot;FinalFields&quot;" line="1" static="1">
			<x path="haxe.display.MissingFieldCauseKind"><a><fields><c path="Array"><t path="haxe.display.JsonClassField"/></c></fields></a></x>
			<meta>
				<m n=":value"><e>cast "FinalFields"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FinalFields>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.MissingFieldCause" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<kind><x path="haxe.display.MissingFieldCauseKind"><c path="haxe.display.MissingFieldCause.T"/></x></kind>
	<args><c path="haxe.display.MissingFieldCause.T"/></args>
</a></typedef>
	<typedef path="haxe.display.MissingField" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<unique>
		<x path="Bool"/>
		<haxe_doc>When implementing multiple interfaces, there can be field duplicates among them. This flag is only
		true for the first such occurrence of a field, so that the "Implement all" code action doesn't end
		up implementing the same field multiple times.</haxe_doc>
	</unique>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<field><t path="haxe.display.JsonClassField"/></field>
</a></typedef>
	<typedef path="haxe.display.MissingFieldDiagnostic" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<fields><c path="Array"><t path="haxe.display.MissingField"/></c></fields>
	<cause><t path="haxe.display.MissingFieldCause"><d/></t></cause>
</a></typedef>
	<typedef path="haxe.display.MissingFieldDiagnostics" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<moduleType><t path="haxe.display.JsonModuleType"><d/></t></moduleType>
	<moduleFile><c path="String"/></moduleFile>
	<entries><c path="Array"><t path="haxe.display.MissingFieldDiagnostic"/></c></entries>
</a></typedef>
	<abstract path="haxe.display.DiagnosticKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Diagnostic.DiagnosticKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
	<DKUnusedImport public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><x path="Void"/></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DKUnusedImport>
	<DKUnresolvedIdentifier public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><c path="Array"><a>
	<name><c path="String"/></name>
	<kind><x path="haxe.display.UnresolvedIdentifierSuggestion"/></kind>
</a></c></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DKUnresolvedIdentifier>
	<DKCompilerError public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DKCompilerError>
	<DKRemovableCode public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><a>
	<range><t path="haxe.display.Range"/></range>
	<description><c path="String"/></description>
</a></x>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DKRemovableCode>
	<DKParserError public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DKParserError>
	<DeprecationWarning public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DeprecationWarning>
	<InactiveBlock public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><x path="Void"/></x>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</InactiveBlock>
	<MissingFields public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="haxe.display.DiagnosticKind"><t path="haxe.display.MissingFieldDiagnostics"/></x>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MissingFields>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Diagnostic.DiagnosticKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
		<DKUnusedImport public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><x path="Void"/></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DKUnusedImport>
		<DKUnresolvedIdentifier public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><c path="Array"><a>
	<name><c path="String"/></name>
	<kind><x path="haxe.display.UnresolvedIdentifierSuggestion"/></kind>
</a></c></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DKUnresolvedIdentifier>
		<DKCompilerError public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DKCompilerError>
		<DKRemovableCode public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><a>
	<range><t path="haxe.display.Range"/></range>
	<description><c path="String"/></description>
</a></x>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DKRemovableCode>
		<DKParserError public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DKParserError>
		<DeprecationWarning public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DeprecationWarning>
		<InactiveBlock public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><x path="Void"/></x>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</InactiveBlock>
		<MissingFields public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="haxe.display.DiagnosticKind"><t path="haxe.display.MissingFieldDiagnostics"/></x>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MissingFields>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.DiagnosticSeverity" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Diagnostic.DiagnosticSeverity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
	<Error public="1" get="inline" set="null" expr="cast 1" line="61" static="1">
		<x path="haxe.display.DiagnosticSeverity"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Error>
	<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.DiagnosticSeverity"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Warning>
	<Information public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.DiagnosticSeverity"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Information>
	<Hint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.DiagnosticSeverity"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Hint>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Diagnostic.DiagnosticSeverity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" private="1" module="haxe.display.Diagnostic" extern="1" final="1">
		<Error public="1" get="inline" set="null" expr="cast 1" line="61" static="1">
			<x path="haxe.display.DiagnosticSeverity"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Error>
		<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.DiagnosticSeverity"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Warning>
		<Information public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.DiagnosticSeverity"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Information>
		<Hint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.DiagnosticSeverity"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Hint>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.Diagnostic" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx"><a>
	<severity><x path="haxe.display.DiagnosticSeverity"/></severity>
	<relatedInformation><c path="Array"><t path="haxe.display.DiagnosticRelatedInformation"/></c></relatedInformation>
	<range><t path="haxe.display.Range"/></range>
	<kind><x path="haxe.display.DiagnosticKind"><c path="haxe.display.Diagnostic.T"/></x></kind>
	<args><c path="haxe.display.Diagnostic.T"/></args>
</a></typedef>
	<typedef path="haxe.display.DiagnosticRelatedInformation" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Diagnostic.hx" module="haxe.display.Diagnostic"><a>
	<message><c path="String"/></message>
	<location><t path="haxe.display.Location"/></location>
	<depth><x path="Int"/></depth>
</a></typedef>
	<class path="haxe.display.DisplayMethods" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<Diagnostics public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;DiagnosticsParams,DiagnosticsResult&gt;(&quot;display/diagnostics&quot;)" line="40" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.DiagnosticsParams"/>
				<t path="haxe.display.DiagnosticsResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<DiagnosticsParams,DiagnosticsResult>("display/diagnostics")]]></e></m></meta>
			<haxe_doc>The request is sent from the client to Haxe to get diagnostics for a specific file, a list of files or the whole project.</haxe_doc>
		</Diagnostics>
		<Completion public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;CompletionParams,CompletionResult&gt;(&quot;display/completion&quot;)" line="46" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.CompletionParams"/>
				<t path="haxe.display.CompletionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<CompletionParams,CompletionResult>("display/completion")]]></e></m></meta>
			<haxe_doc>The completion request is sent from the client to Haxe to request code completion.
		Haxe automatically determines the type of completion to use based on the passed position, see `CompletionResultKind`.</haxe_doc>
		</Completion>
		<CompletionItemResolve public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;CompletionItemResolveParams,CompletionItemResolveResult&gt;(&quot;display/completionItem/resolve&quot;)" line="51" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.CompletionItemResolveParams"/>
				<t path="haxe.display.CompletionItemResolveResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<CompletionItemResolveParams,CompletionItemResolveResult>("display/completionItem/resolve")]]></e></m></meta>
			<haxe_doc>The request is sent from the client to Haxe to resolve additional information for a given completion item.</haxe_doc>
		</CompletionItemResolve>
		<FindReferences public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FindReferencesParams,GotoDefinitionResult&gt;(&quot;display/references&quot;)" line="56" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FindReferencesParams"/>
				<t path="haxe.display.GotoDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FindReferencesParams,GotoDefinitionResult>("display/references")]]></e></m></meta>
			<haxe_doc>The find references request is sent from the client to Haxe to find locations that reference the symbol at a given text document position.</haxe_doc>
		</FindReferences>
		<GotoDefinition public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoDefinitionResult&gt;(&quot;display/definition&quot;)" line="61" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoDefinitionResult>("display/definition")]]></e></m></meta>
			<haxe_doc>The goto definition request is sent from the client to Haxe to resolve the definition location(s) of a symbol at a given text document position.</haxe_doc>
		</GotoDefinition>
		<GotoImplementation public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoDefinitionResult&gt;(&quot;display/implementation&quot;)" line="66" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoDefinitionResult>("display/implementation")]]></e></m></meta>
			<haxe_doc>The goto implementation request is sent from the client to Haxe to resolve the implementation location(s) of a symbol at a given text document position.</haxe_doc>
		</GotoImplementation>
		<GotoTypeDefinition public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoTypeDefinitionResult&gt;(&quot;display/typeDefinition&quot;)" line="71" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoTypeDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoTypeDefinitionResult>("display/typeDefinition")]]></e></m></meta>
			<haxe_doc>The goto type definition request is sent from the client to Haxe to resolve the type definition location(s) of a symbol at a given text document position.</haxe_doc>
		</GotoTypeDefinition>
		<Hover public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,HoverResult&gt;(&quot;display/hover&quot;)" line="76" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.HoverResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,HoverResult>("display/hover")]]></e></m></meta>
			<haxe_doc>The hover request is sent from the client to Haxe to request hover information at a given text document position.</haxe_doc>
		</Hover>
		<DeterminePackage public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,DeterminePackageResult&gt;(&quot;display/package&quot;)" line="81" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.DeterminePackageResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,DeterminePackageResult>("display/package")]]></e></m></meta>
			<haxe_doc>This request is sent from the client to Haxe to determine the package for a given file, based on class paths configuration.</haxe_doc>
		</DeterminePackage>
		<SignatureHelp public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;SignatureHelpParams,SignatureHelpResult&gt;(&quot;display/signatureHelp&quot;)" line="86" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.SignatureHelpParams"/>
				<t path="haxe.display.SignatureHelpResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<SignatureHelpParams,SignatureHelpResult>("display/signatureHelp")]]></e></m></meta>
			<haxe_doc>The signature help request is sent from the client to Haxe to request signature information at a given cursor position.</haxe_doc>
		</SignatureHelp>
		<Metadata public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;MetadataParams,MetadataResult&gt;(&quot;display/metadata&quot;)" line="91" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.MetadataParams"/>
				<t path="haxe.display.MetadataResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<MetadataParams,MetadataResult>("display/metadata")]]></e></m></meta>
			<haxe_doc>The metadata request is sent from the client to Haxe to get a list of all registered metadata and their documentation.</haxe_doc>
		</Metadata>
		<Defines public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;DefinesParams,DefinesResult&gt;(&quot;display/defines&quot;)" line="96" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.DefinesParams"/>
				<t path="haxe.display.DefinesResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<DefinesParams,DefinesResult>("display/defines")]]></e></m></meta>
			<haxe_doc>The defines request is sent from the client to Haxe to get a list of all registered defines and their documentation.</haxe_doc>
		</Defines>
		<haxe_doc>Methods of the JSON-RPC-based `--display` protocol in Haxe 4.
	A lot of the methods are *inspired* by the Language Server Protocol, but there is **no** intention to be directly compatible with it.</haxe_doc>
		<meta><m n=":publicFields"/></meta>
	</class>
	<typedef path="haxe.display.CompletionParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<wasAutoTriggered><x path="Bool"/></wasAutoTriggered>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<meta>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>list of metas to include in responses</haxe_doc>
			</meta>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>Completion</haxe_doc>
	</typedef>
	<typedef path="haxe.display.FieldResolution" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<qualifier>
		<c path="String"/>
		<haxe_doc>The qualifier that has to be inserted to use the field if `!isQualified`.
		Can either be `this` or `super` for instance fields for the type name for `static` fields.</haxe_doc>
	</qualifier>
	<isQualified>
		<x path="Bool"/>
		<haxe_doc>Whether it's valid to use the unqualified name of the field or not.
		This is `false` if the identifier is shadowed.</haxe_doc>
	</isQualified>
</a></typedef>
	<typedef path="haxe.display.DisplayLocal" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<type><t path="haxe.display.JsonType"><c path="haxe.display.DisplayLocal.T"/></t></type>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<origin><x path="haxe.display.LocalOrigin"/></origin>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<isInline><x path="Bool"/></isInline>
	<isFinal><x path="Bool"/></isFinal>
	<id><x path="Int"/></id>
	<extra>
		<x path="Null"><a>
	<params><c path="Array"><t path="haxe.display.JsonTypeParameter"/></c></params>
	<expr><t path="haxe.display.JsonExpr"/></expr>
</a></x>
		<meta><m n=":optional"/></meta>
	</extra>
	<capture><x path="Bool"/></capture>
</a></typedef>
	<abstract path="haxe.display.LocalOrigin" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.LocalOrigin_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<LocalVariable public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LocalVariable>
	<Argument public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Argument>
	<ForVariable public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ForVariable>
	<PatternVariable public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PatternVariable>
	<CatchVariable public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CatchVariable>
	<LocalFunction public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LocalFunction>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.LocalOrigin_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<LocalVariable public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LocalVariable>
		<Argument public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Argument>
		<ForVariable public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ForVariable>
		<PatternVariable public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PatternVariable>
		<CatchVariable public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CatchVariable>
		<LocalFunction public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LocalFunction>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.ClassFieldOriginKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.ClassFieldOriginKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The field is declared on the current type itself.</haxe_doc>
	</Self>
	<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The field is a static field brought into context via a static import
		(`import pack.Module.Type.field`).</haxe_doc>
	</StaticImport>
	<Parent public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The field is declared on a parent type, such as:
		- a super class field that is not overriden
		- a forwarded abstract field</haxe_doc>
	</Parent>
	<StaticExtension public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The field is a static extension method brought
		into context with the `using` keyword.</haxe_doc>
	</StaticExtension>
	<AnonymousStructure public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>This field doesn't belong to any named type, just an anonymous structure.</haxe_doc>
	</AnonymousStructure>
	<BuiltIn public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Special fields built into the compiler, such as:
		- `code` on single-character Strings
		- `bind()` on functions.</haxe_doc>
	</BuiltIn>
	<Unknown public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The origin of this class field is unknown.</haxe_doc>
	</Unknown>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.ClassFieldOriginKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The field is declared on the current type itself.</haxe_doc>
		</Self>
		<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The field is a static field brought into context via a static import
		(`import pack.Module.Type.field`).</haxe_doc>
		</StaticImport>
		<Parent public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The field is declared on a parent type, such as:
		- a super class field that is not overriden
		- a forwarded abstract field</haxe_doc>
		</Parent>
		<StaticExtension public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The field is a static extension method brought
		into context with the `using` keyword.</haxe_doc>
		</StaticExtension>
		<AnonymousStructure public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>This field doesn't belong to any named type, just an anonymous structure.</haxe_doc>
		</AnonymousStructure>
		<BuiltIn public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Special fields built into the compiler, such as:
		- `code` on single-character Strings
		- `bind()` on functions.</haxe_doc>
		</BuiltIn>
		<Unknown public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The origin of this class field is unknown.</haxe_doc>
		</Unknown>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.ClassFieldOrigin" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.ClassFieldOriginKind"><c path="haxe.display.ClassFieldOrigin.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.ClassFieldOrigin.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.ClassFieldOccurrence" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<resolution><t path="haxe.display.FieldResolution"/></resolution>
	<origin>
		<x path="Null"><t path="haxe.display.ClassFieldOrigin"><c path="haxe.display.ClassFieldOccurrence.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<field><t path="haxe.display.JsonClassField"/></field>
</a></typedef>
	<abstract path="haxe.display.EnumFieldOriginKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.EnumFieldOriginKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The enum value is declared on the current type itself.</haxe_doc>
	</Self>
	<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The enum value is brought into context via a static import
		(`import pack.Module.Enum.Value`).</haxe_doc>
	</StaticImport>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.EnumFieldOriginKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The enum value is declared on the current type itself.</haxe_doc>
		</Self>
		<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The enum value is brought into context via a static import
		(`import pack.Module.Enum.Value`).</haxe_doc>
		</StaticImport>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.EnumFieldOrigin" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.EnumFieldOriginKind"><c path="haxe.display.EnumFieldOrigin.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.EnumFieldOrigin.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.EnumFieldOccurrence" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<resolution><t path="haxe.display.FieldResolution"/></resolution>
	<origin>
		<x path="Null"><t path="haxe.display.EnumFieldOrigin"><c path="haxe.display.EnumFieldOccurrence.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<field><t path="haxe.display.JsonEnumField"/></field>
</a></typedef>
	<abstract path="haxe.display.Literal" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.Literal_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Null public="1" get="inline" set="null" expr="cast &quot;null&quot;" line="233" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "null"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Null>
	<True public="1" get="inline" set="null" expr="cast &quot;true&quot;" line="234" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "true"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</True>
	<False public="1" get="inline" set="null" expr="cast &quot;false&quot;" line="235" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "false"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</False>
	<This public="1" get="inline" set="null" expr="cast &quot;this&quot;" line="236" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "this"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</This>
	<Trace public="1" get="inline" set="null" expr="cast &quot;trace&quot;" line="237" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "trace"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Trace>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.Literal_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Null public="1" get="inline" set="null" expr="cast &quot;null&quot;" line="233" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "null"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Null>
		<True public="1" get="inline" set="null" expr="cast &quot;true&quot;" line="234" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "true"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</True>
		<False public="1" get="inline" set="null" expr="cast &quot;false&quot;" line="235" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "false"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</False>
		<This public="1" get="inline" set="null" expr="cast &quot;this&quot;" line="236" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "this"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</This>
		<Trace public="1" get="inline" set="null" expr="cast &quot;trace&quot;" line="237" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "trace"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Trace>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.DisplayModuleTypeKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.DisplayModuleTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Class public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Class>
	<Interface public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Interface>
	<Enum public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Enum>
	<Abstract public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Abstract>
	<EnumAbstract public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EnumAbstract>
	<TypeAlias public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>A `typedef` that is just an alias for another type.</haxe_doc>
	</TypeAlias>
	<Struct public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>A `typedef` that is an alias for an anonymous structure.</haxe_doc>
	</Struct>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.DisplayModuleTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Class public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Class>
		<Interface public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Interface>
		<Enum public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Enum>
		<Abstract public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Abstract>
		<EnumAbstract public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EnumAbstract>
		<TypeAlias public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>A `typedef` that is just an alias for another type.</haxe_doc>
		</TypeAlias>
		<Struct public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>A `typedef` that is an alias for an anonymous structure.</haxe_doc>
		</Struct>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.DisplayModuleType" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<path><t path="haxe.display.JsonTypePath"/></path>
	<params><c path="Array"><t path="haxe.display.DisplayModuleTypeParameter"/></c></params>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><x path="haxe.display.DisplayModuleTypeKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isFinal><x path="Bool"/></isFinal>
	<isExtern><x path="Bool"/></isExtern>
	<isAbstract><x path="Bool"/></isAbstract>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.DisplayModuleTypeParameter" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<constraints><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></constraints>
</a></typedef>
	<typedef path="haxe.display.DisplayLiteral" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><name><c path="String"/></name></a></typedef>
	<abstract path="haxe.display.MetadataTarget" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.MetadataTarget_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Class public="1" get="inline" set="null" expr="cast &quot;TClass&quot;" line="281" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TClass"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Class>
	<ClassField public="1" get="inline" set="null" expr="cast &quot;TClassField&quot;" line="282" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TClassField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ClassField>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="283" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAbstract"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Abstract>
	<AbstractField public="1" get="inline" set="null" expr="cast &quot;TAbstractField&quot;" line="284" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAbstractField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AbstractField>
	<Enum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="285" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TEnum"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Enum>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;TTypedef&quot;" line="286" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TTypedef"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Typedef>
	<AnyField public="1" get="inline" set="null" expr="cast &quot;TAnyField&quot;" line="287" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAnyField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AnyField>
	<Expr public="1" get="inline" set="null" expr="cast &quot;TExpr&quot;" line="288" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TExpr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Expr>
	<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TTypeParameter&quot;" line="289" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TTypeParameter"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeParameter>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.MetadataTarget_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Class public="1" get="inline" set="null" expr="cast &quot;TClass&quot;" line="281" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TClass"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Class>
		<ClassField public="1" get="inline" set="null" expr="cast &quot;TClassField&quot;" line="282" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TClassField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ClassField>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="283" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAbstract"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Abstract>
		<AbstractField public="1" get="inline" set="null" expr="cast &quot;TAbstractField&quot;" line="284" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAbstractField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AbstractField>
		<Enum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="285" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TEnum"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Enum>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;TTypedef&quot;" line="286" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TTypedef"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Typedef>
		<AnyField public="1" get="inline" set="null" expr="cast &quot;TAnyField&quot;" line="287" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAnyField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AnyField>
		<Expr public="1" get="inline" set="null" expr="cast &quot;TExpr&quot;" line="288" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TExpr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Expr>
		<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TTypeParameter&quot;" line="289" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TTypeParameter"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeParameter>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.Platform" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.Platform_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Cross public="1" get="inline" set="null" expr="cast &quot;cross&quot;" line="293" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "cross"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Cross>
	<Js public="1" get="inline" set="null" expr="cast &quot;js&quot;" line="294" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "js"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Js>
	<Lua public="1" get="inline" set="null" expr="cast &quot;lua&quot;" line="295" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "lua"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Lua>
	<Neko public="1" get="inline" set="null" expr="cast &quot;neko&quot;" line="296" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "neko"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Neko>
	<Flash public="1" get="inline" set="null" expr="cast &quot;flash&quot;" line="297" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "flash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Flash>
	<Php public="1" get="inline" set="null" expr="cast &quot;php&quot;" line="298" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "php"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Php>
	<Cpp public="1" get="inline" set="null" expr="cast &quot;cpp&quot;" line="299" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "cpp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Cpp>
	<Cs public="1" get="inline" set="null" expr="cast &quot;cs&quot;" line="300" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "cs"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Cs>
	<Java public="1" get="inline" set="null" expr="cast &quot;java&quot;" line="301" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "java"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Java>
	<Python public="1" get="inline" set="null" expr="cast &quot;python&quot;" line="302" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "python"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Python>
	<Hl public="1" get="inline" set="null" expr="cast &quot;hl&quot;" line="303" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "hl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Hl>
	<Eval public="1" get="inline" set="null" expr="cast &quot;eval&quot;" line="304" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "eval"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Eval>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.Platform_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Cross public="1" get="inline" set="null" expr="cast &quot;cross&quot;" line="293" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "cross"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Cross>
		<Js public="1" get="inline" set="null" expr="cast &quot;js&quot;" line="294" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "js"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Js>
		<Lua public="1" get="inline" set="null" expr="cast &quot;lua&quot;" line="295" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "lua"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Lua>
		<Neko public="1" get="inline" set="null" expr="cast &quot;neko&quot;" line="296" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "neko"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Neko>
		<Flash public="1" get="inline" set="null" expr="cast &quot;flash&quot;" line="297" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "flash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Flash>
		<Php public="1" get="inline" set="null" expr="cast &quot;php&quot;" line="298" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "php"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Php>
		<Cpp public="1" get="inline" set="null" expr="cast &quot;cpp&quot;" line="299" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "cpp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Cpp>
		<Cs public="1" get="inline" set="null" expr="cast &quot;cs&quot;" line="300" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "cs"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Cs>
		<Java public="1" get="inline" set="null" expr="cast &quot;java&quot;" line="301" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "java"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Java>
		<Python public="1" get="inline" set="null" expr="cast &quot;python&quot;" line="302" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "python"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Python>
		<Hl public="1" get="inline" set="null" expr="cast &quot;hl&quot;" line="303" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "hl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Hl>
		<Eval public="1" get="inline" set="null" expr="cast &quot;eval&quot;" line="304" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "eval"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Eval>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.Metadata" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<targets><c path="Array"><x path="haxe.display.MetadataTarget"/></c></targets>
	<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
	<parameters><c path="Array"><c path="String"/></c></parameters>
	<origin>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<name><c path="String"/></name>
	<links>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
	</links>
	<internal><x path="Bool"/></internal>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.Define" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<value><x path="Null"><c path="String"/></x></value>
	<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
	<parameters><c path="Array"><c path="String"/></c></parameters>
	<origin>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<name><c path="String"/></name>
	<links><c path="Array"><c path="String"/></c></links>
	<doc><t path="haxe.display.JsonDoc"/></doc>
	<deprecated>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</deprecated>
</a></typedef>
	<typedef path="haxe.display.Keyword" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><name><x path="haxe.display.KeywordKind"/></name></a></typedef>
	<abstract path="haxe.display.KeywordKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.KeywordKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Implements public="1" get="inline" set="null" expr="cast &quot;implements&quot;" line="334" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "implements"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Implements>
	<Extends public="1" get="inline" set="null" expr="cast &quot;extends&quot;" line="335" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "extends"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Extends>
	<Function public="1" get="inline" set="null" expr="cast &quot;function&quot;" line="336" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "function"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Function>
	<Var public="1" get="inline" set="null" expr="cast &quot;var&quot;" line="337" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "var"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Var>
	<If public="1" get="inline" set="null" expr="cast &quot;if&quot;" line="338" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "if"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</If>
	<Else public="1" get="inline" set="null" expr="cast &quot;else&quot;" line="339" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "else"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Else>
	<While public="1" get="inline" set="null" expr="cast &quot;while&quot;" line="340" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "while"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</While>
	<Do public="1" get="inline" set="null" expr="cast &quot;do&quot;" line="341" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "do"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Do>
	<For public="1" get="inline" set="null" expr="cast &quot;for&quot;" line="342" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "for"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</For>
	<Break public="1" get="inline" set="null" expr="cast &quot;break&quot;" line="343" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "break"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Break>
	<Return public="1" get="inline" set="null" expr="cast &quot;return&quot;" line="344" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "return"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Return>
	<Continue public="1" get="inline" set="null" expr="cast &quot;continue&quot;" line="345" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "continue"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Continue>
	<Switch public="1" get="inline" set="null" expr="cast &quot;switch&quot;" line="346" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "switch"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Switch>
	<Case public="1" get="inline" set="null" expr="cast &quot;case&quot;" line="347" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "case"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Case>
	<Default public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="348" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "default"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Default>
	<Try public="1" get="inline" set="null" expr="cast &quot;try&quot;" line="349" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "try"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Try>
	<Catch public="1" get="inline" set="null" expr="cast &quot;catch&quot;" line="350" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "catch"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Catch>
	<New public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="351" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "new"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</New>
	<Throw public="1" get="inline" set="null" expr="cast &quot;throw&quot;" line="352" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "throw"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Throw>
	<Untyped public="1" get="inline" set="null" expr="cast &quot;untyped&quot;" line="353" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "untyped"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Untyped>
	<Cast public="1" get="inline" set="null" expr="cast &quot;cast&quot;" line="354" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "cast"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Cast>
	<Macro public="1" get="inline" set="null" expr="cast &quot;macro&quot;" line="355" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "macro"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Macro>
	<Package public="1" get="inline" set="null" expr="cast &quot;package&quot;" line="356" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "package"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Package>
	<Import public="1" get="inline" set="null" expr="cast &quot;import&quot;" line="357" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "import"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Import>
	<Using public="1" get="inline" set="null" expr="cast &quot;using&quot;" line="358" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "using"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Using>
	<Public public="1" get="inline" set="null" expr="cast &quot;public&quot;" line="359" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "public"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Public>
	<Private public="1" get="inline" set="null" expr="cast &quot;private&quot;" line="360" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "private"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Private>
	<Static public="1" get="inline" set="null" expr="cast &quot;static&quot;" line="361" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "static"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Static>
	<Extern public="1" get="inline" set="null" expr="cast &quot;extern&quot;" line="362" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "extern"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Extern>
	<Dynamic public="1" get="inline" set="null" expr="cast &quot;dynamic&quot;" line="363" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "dynamic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Dynamic>
	<Override public="1" get="inline" set="null" expr="cast &quot;override&quot;" line="364" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "override"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Override>
	<Overload public="1" get="inline" set="null" expr="cast &quot;overload&quot;" line="365" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "overload"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Overload>
	<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="366" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "class"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Class>
	<Interface public="1" get="inline" set="null" expr="cast &quot;interface&quot;" line="367" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "interface"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Interface>
	<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="368" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "enum"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Enum>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="369" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "abstract"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Abstract>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="370" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "typedef"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Typedef>
	<Final public="1" get="inline" set="null" expr="cast &quot;final&quot;" line="371" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "final"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Final>
	<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="372" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "inline"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Inline>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.KeywordKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Implements public="1" get="inline" set="null" expr="cast &quot;implements&quot;" line="334" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "implements"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Implements>
		<Extends public="1" get="inline" set="null" expr="cast &quot;extends&quot;" line="335" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "extends"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Extends>
		<Function public="1" get="inline" set="null" expr="cast &quot;function&quot;" line="336" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "function"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Function>
		<Var public="1" get="inline" set="null" expr="cast &quot;var&quot;" line="337" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "var"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Var>
		<If public="1" get="inline" set="null" expr="cast &quot;if&quot;" line="338" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "if"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</If>
		<Else public="1" get="inline" set="null" expr="cast &quot;else&quot;" line="339" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "else"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Else>
		<While public="1" get="inline" set="null" expr="cast &quot;while&quot;" line="340" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "while"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</While>
		<Do public="1" get="inline" set="null" expr="cast &quot;do&quot;" line="341" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "do"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Do>
		<For public="1" get="inline" set="null" expr="cast &quot;for&quot;" line="342" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "for"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</For>
		<Break public="1" get="inline" set="null" expr="cast &quot;break&quot;" line="343" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "break"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Break>
		<Return public="1" get="inline" set="null" expr="cast &quot;return&quot;" line="344" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "return"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Return>
		<Continue public="1" get="inline" set="null" expr="cast &quot;continue&quot;" line="345" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "continue"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Continue>
		<Switch public="1" get="inline" set="null" expr="cast &quot;switch&quot;" line="346" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "switch"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Switch>
		<Case public="1" get="inline" set="null" expr="cast &quot;case&quot;" line="347" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "case"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Case>
		<Default public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="348" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "default"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Default>
		<Try public="1" get="inline" set="null" expr="cast &quot;try&quot;" line="349" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "try"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Try>
		<Catch public="1" get="inline" set="null" expr="cast &quot;catch&quot;" line="350" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "catch"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Catch>
		<New public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="351" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "new"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</New>
		<Throw public="1" get="inline" set="null" expr="cast &quot;throw&quot;" line="352" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "throw"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Throw>
		<Untyped public="1" get="inline" set="null" expr="cast &quot;untyped&quot;" line="353" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "untyped"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Untyped>
		<Cast public="1" get="inline" set="null" expr="cast &quot;cast&quot;" line="354" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "cast"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Cast>
		<Macro public="1" get="inline" set="null" expr="cast &quot;macro&quot;" line="355" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "macro"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Macro>
		<Package public="1" get="inline" set="null" expr="cast &quot;package&quot;" line="356" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "package"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Package>
		<Import public="1" get="inline" set="null" expr="cast &quot;import&quot;" line="357" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "import"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Import>
		<Using public="1" get="inline" set="null" expr="cast &quot;using&quot;" line="358" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "using"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Using>
		<Public public="1" get="inline" set="null" expr="cast &quot;public&quot;" line="359" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "public"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Public>
		<Private public="1" get="inline" set="null" expr="cast &quot;private&quot;" line="360" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "private"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Private>
		<Static public="1" get="inline" set="null" expr="cast &quot;static&quot;" line="361" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "static"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Static>
		<Extern public="1" get="inline" set="null" expr="cast &quot;extern&quot;" line="362" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "extern"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Extern>
		<Dynamic public="1" get="inline" set="null" expr="cast &quot;dynamic&quot;" line="363" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "dynamic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Dynamic>
		<Override public="1" get="inline" set="null" expr="cast &quot;override&quot;" line="364" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "override"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Override>
		<Overload public="1" get="inline" set="null" expr="cast &quot;overload&quot;" line="365" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "overload"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Overload>
		<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="366" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "class"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Class>
		<Interface public="1" get="inline" set="null" expr="cast &quot;interface&quot;" line="367" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "interface"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Interface>
		<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="368" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "enum"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Enum>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="369" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "abstract"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Abstract>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="370" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "typedef"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Typedef>
		<Final public="1" get="inline" set="null" expr="cast &quot;final&quot;" line="371" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "final"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Final>
		<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="372" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "inline"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Inline>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.Package" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><path><t path="haxe.display.JsonPackagePath"/></path></a></typedef>
	<typedef path="haxe.display.Module" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><path><t path="haxe.display.JsonModulePath"/></path></a></typedef>
	<abstract path="haxe.display.DisplayItemKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.DisplayItemKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Local public="1" get="inline" set="null" expr="cast &quot;Local&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLocal"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "Local"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Local>
	<ClassField public="1" get="inline" set="null" expr="cast &quot;ClassField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "ClassField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ClassField>
	<EnumField public="1" get="inline" set="null" expr="cast &quot;EnumField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.EnumFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "EnumField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EnumField>
	<EnumAbstractField public="1" get="inline" set="null" expr="cast &quot;EnumAbstractField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "EnumAbstractField"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Only for the enum values in enum abstracts, other fields use `ClassField`.</haxe_doc>
	</EnumAbstractField>
	<Type public="1" get="inline" set="null" expr="cast &quot;Type&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleType"/></x>
		<meta>
			<m n=":value"><e>cast "Type"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Type>
	<Package public="1" get="inline" set="null" expr="cast &quot;Package&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Package"/></x>
		<meta>
			<m n=":value"><e>cast "Package"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Package>
	<Module public="1" get="inline" set="null" expr="cast &quot;Module&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Module"/></x>
		<meta>
			<m n=":value"><e>cast "Module"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Module>
	<Literal public="1" get="inline" set="null" expr="cast &quot;Literal&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLiteral"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "Literal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Literal>
	<Metadata public="1" get="inline" set="null" expr="cast &quot;Metadata&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Metadata"/></x>
		<meta>
			<m n=":value"><e>cast "Metadata"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Metadata>
	<Keyword public="1" get="inline" set="null" expr="cast &quot;Keyword&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Keyword"/></x>
		<meta>
			<m n=":value"><e>cast "Keyword"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Keyword>
	<AnonymousStructure public="1" get="inline" set="null" expr="cast &quot;AnonymousStructure&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast "AnonymousStructure"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AnonymousStructure>
	<Expression public="1" get="inline" set="null" expr="cast &quot;Expression&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonTExpr"/></x>
		<meta>
			<m n=":value"><e>cast "Expression"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Expression>
	<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TypeParameter&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleTypeParameter"/></x>
		<meta>
			<m n=":value"><e>cast "TypeParameter"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeParameter>
	<Define public="1" get="inline" set="null" expr="cast &quot;Define&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Define"/></x>
		<meta>
			<m n=":value"><e>cast "Define"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Define>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.DisplayItemKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Local public="1" get="inline" set="null" expr="cast &quot;Local&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLocal"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "Local"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Local>
		<ClassField public="1" get="inline" set="null" expr="cast &quot;ClassField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "ClassField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ClassField>
		<EnumField public="1" get="inline" set="null" expr="cast &quot;EnumField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.EnumFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "EnumField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EnumField>
		<EnumAbstractField public="1" get="inline" set="null" expr="cast &quot;EnumAbstractField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "EnumAbstractField"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Only for the enum values in enum abstracts, other fields use `ClassField`.</haxe_doc>
		</EnumAbstractField>
		<Type public="1" get="inline" set="null" expr="cast &quot;Type&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleType"/></x>
			<meta>
				<m n=":value"><e>cast "Type"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Type>
		<Package public="1" get="inline" set="null" expr="cast &quot;Package&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Package"/></x>
			<meta>
				<m n=":value"><e>cast "Package"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Package>
		<Module public="1" get="inline" set="null" expr="cast &quot;Module&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Module"/></x>
			<meta>
				<m n=":value"><e>cast "Module"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Module>
		<Literal public="1" get="inline" set="null" expr="cast &quot;Literal&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLiteral"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "Literal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Literal>
		<Metadata public="1" get="inline" set="null" expr="cast &quot;Metadata&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Metadata"/></x>
			<meta>
				<m n=":value"><e>cast "Metadata"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Metadata>
		<Keyword public="1" get="inline" set="null" expr="cast &quot;Keyword&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Keyword"/></x>
			<meta>
				<m n=":value"><e>cast "Keyword"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Keyword>
		<AnonymousStructure public="1" get="inline" set="null" expr="cast &quot;AnonymousStructure&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast "AnonymousStructure"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AnonymousStructure>
		<Expression public="1" get="inline" set="null" expr="cast &quot;Expression&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonTExpr"/></x>
			<meta>
				<m n=":value"><e>cast "Expression"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Expression>
		<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TypeParameter&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleTypeParameter"/></x>
			<meta>
				<m n=":value"><e>cast "TypeParameter"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeParameter>
		<Define public="1" get="inline" set="null" expr="cast &quot;Define&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Define"/></x>
			<meta>
				<m n=":value"><e>cast "Define"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Define>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.DisplayItem" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<type>
		<x path="Null"><t path="haxe.display.JsonType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</type>
	<kind><x path="haxe.display.DisplayItemKind"><c path="haxe.display.DisplayItem.T"/></x></kind>
	<index>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</index>
	<args><c path="haxe.display.DisplayItem.T"/></args>
</a></typedef>
	<typedef path="haxe.display.DisplayItemOccurrence" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.DisplayItemOccurrence.T"/></t></item>
</a></typedef>
	<typedef path="haxe.display.FieldCompletionSubject" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<keyValueIterator>
		<x path="Null"><a>
	<value><t path="haxe.display.JsonType"><d/></t></value>
	<key><t path="haxe.display.JsonType"><d/></t></key>
</a></x>
		<meta><m n=":optional"/></meta>
	</keyValueIterator>
	<iterator>
		<x path="Null"><a><type><t path="haxe.display.JsonType"><d/></t></type></a></x>
		<meta><m n=":optional"/></meta>
	</iterator>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.FieldCompletionSubject.T"/></t></item>
</a></typedef>
	<typedef path="haxe.display.ToplevelCompletion" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<expectedTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.ToplevelCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedTypeFollowed>
	<expectedType>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.ToplevelCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedType>
	<compatibleTypes>
		<x path="Null"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></x>
		<meta><m n=":optional"/></meta>
	</compatibleTypes>
</a></typedef>
	<typedef path="haxe.display.StructExtensionCompletion" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a><isIntersectionType><x path="Bool"/></isIntersectionType></a></typedef>
	<typedef path="haxe.display.PatternCompletion" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<isOutermostPattern><x path="Bool"/></isOutermostPattern>
	<expectedTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.PatternCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedTypeFollowed>
	<expectedType>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.PatternCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedType>
	<compatibleTypes>
		<x path="Null"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></x>
		<meta><m n=":optional"/></meta>
	</compatibleTypes>
</a></typedef>
	<typedef path="haxe.display.DiagnosticsParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<fileContents>
		<x path="Null"><c path="Array"><a>
	<file><x path="haxe.display.FsPath"/></file>
	<contents>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</contents>
</a></c></x>
		<meta><m n=":optional"/></meta>
	</fileContents>
	<file>
		<x path="Null"><x path="haxe.display.FsPath"/></x>
		<meta><m n=":optional"/></meta>
	</file>
	<contents>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</contents>
</a></typedef>
	<typedef path="haxe.display.DiagnosticsResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="haxe.ds.ReadOnlyArray"><a>
	<file><x path="haxe.display.FsPath"/></file>
	<diagnostics><x path="haxe.ds.ReadOnlyArray"><t path="haxe.display.Diagnostic"><x path="Any"/></t></x></diagnostics>
</a></x></t></typedef>
	<abstract path="haxe.display.CompletionModeKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.CompletionModeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Field public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.FieldCompletionSubject"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Field>
	<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</StructureField>
	<Toplevel public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.ToplevelCompletion"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Toplevel>
	<Metadata public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Metadata>
	<TypeHint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeHint>
	<Extends public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Extends>
	<Implements public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Implements>
	<StructExtension public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.StructExtensionCompletion"/></x>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</StructExtension>
	<Import public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Import>
	<Using public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Using>
	<New public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</New>
	<Pattern public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.PatternCompletion"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Pattern>
	<Override public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Override>
	<TypeRelation public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeRelation>
	<TypeDeclaration public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TypeDeclaration>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.CompletionModeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Field public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.FieldCompletionSubject"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Field>
		<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</StructureField>
		<Toplevel public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.ToplevelCompletion"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Toplevel>
		<Metadata public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Metadata>
		<TypeHint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeHint>
		<Extends public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Extends>
		<Implements public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Implements>
		<StructExtension public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.StructExtensionCompletion"/></x>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</StructExtension>
		<Import public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Import>
		<Using public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Using>
		<New public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</New>
		<Pattern public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.PatternCompletion"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Pattern>
		<Override public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Override>
		<TypeRelation public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeRelation>
		<TypeDeclaration public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TypeDeclaration>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.CompletionMode" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionMode.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.CompletionMode.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.CompletionResponse" params="T1:T2" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<replaceRange>
		<x path="Null"><t path="haxe.display.Range"/></x>
		<meta><m n=":optional"/></meta>
	</replaceRange>
	<mode><t path="haxe.display.CompletionMode"><c path="haxe.display.CompletionResponse.T2"/></t></mode>
	<items><c path="Array"><t path="haxe.display.DisplayItem"><c path="haxe.display.CompletionResponse.T1"/></t></c></items>
	<isIncomplete>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</isIncomplete>
	<filterString>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</filterString>
</a></typedef>
	<typedef path="haxe.display.CompletionResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="Null"><t path="haxe.display.CompletionResponse">
	<d/>
	<d/>
</t></x></t></typedef>
	<typedef path="haxe.display.CompletionItemResolveParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a><index><x path="Int"/></index></a>
		<haxe_doc>CompletionItem Resolve</haxe_doc>
	</typedef>
	<typedef path="haxe.display.CompletionItemResolveResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><a><item><t path="haxe.display.DisplayItem"><d/></t></item></a></t></typedef>
	<typedef path="haxe.display.FindReferencesParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<kind>
				<x path="Null"><x path="haxe.display.FindReferencesKind"/></x>
				<meta><m n=":optional"/></meta>
			</kind>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>FindReferences</haxe_doc>
	</typedef>
	<abstract path="haxe.display.FindReferencesKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.FindReferencesKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Direct public="1" get="inline" set="null" expr="cast &quot;direct&quot;" line="510" static="1">
		<x path="haxe.display.FindReferencesKind"/>
		<meta>
			<m n=":value"><e>cast "direct"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Find only direct references to the requested symbol.
		Does not look for references to parent or overriding methods.</haxe_doc>
	</Direct>
	<WithBaseAndDescendants public="1" get="inline" set="null" expr="cast &quot;withBaseAndDescendants&quot;" line="515" static="1">
		<x path="haxe.display.FindReferencesKind"/>
		<meta>
			<m n=":value"><e>cast "withBaseAndDescendants"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Find references to the base field and all the overidding fields in the inheritance chain.</haxe_doc>
	</WithBaseAndDescendants>
	<WithDescendants public="1" get="inline" set="null" expr="cast &quot;withDescendants&quot;" line="521" static="1">
		<x path="haxe.display.FindReferencesKind"/>
		<meta>
			<m n=":value"><e>cast "withDescendants"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Find references to the requested field and references to all
		descendants of the requested field.</haxe_doc>
	</WithDescendants>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.FindReferencesKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Direct public="1" get="inline" set="null" expr="cast &quot;direct&quot;" line="510" static="1">
			<x path="haxe.display.FindReferencesKind"/>
			<meta>
				<m n=":value"><e>cast "direct"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Find only direct references to the requested symbol.
		Does not look for references to parent or overriding methods.</haxe_doc>
		</Direct>
		<WithBaseAndDescendants public="1" get="inline" set="null" expr="cast &quot;withBaseAndDescendants&quot;" line="515" static="1">
			<x path="haxe.display.FindReferencesKind"/>
			<meta>
				<m n=":value"><e>cast "withBaseAndDescendants"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Find references to the base field and all the overidding fields in the inheritance chain.</haxe_doc>
		</WithBaseAndDescendants>
		<WithDescendants public="1" get="inline" set="null" expr="cast &quot;withDescendants&quot;" line="521" static="1">
			<x path="haxe.display.FindReferencesKind"/>
			<meta>
				<m n=":value"><e>cast "withDescendants"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Find references to the requested field and references to all
		descendants of the requested field.</haxe_doc>
		</WithDescendants>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.GotoDefinitionResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Location"/></c></t>
		<haxe_doc>GotoDefinition</haxe_doc>
	</typedef>
	<typedef path="haxe.display.GotoTypeDefinitionResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Location"/></c></t>
		<haxe_doc>GotoTypeDefinition</haxe_doc>
	</typedef>
	<typedef path="haxe.display.HoverResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><x path="Null"><t path="haxe.display.HoverDisplayItemOccurence"><d/></t></x></t>
		<haxe_doc>Hover</haxe_doc>
	</typedef>
	<typedef path="haxe.display.HoverDisplayItemOccurence" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.HoverDisplayItemOccurence.T"/></t></item>
	<expected>
		<x path="Null"><a>
	<type>
		<x path="Null"><t path="haxe.display.JsonType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</type>
	<name>
		<x path="Null"><a>
	<name><c path="String"/></name>
	<kind><x path="haxe.display.HoverExpectedNameKind"/></kind>
	<doc>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</doc>
</a></x>
		<meta><m n=":optional"/></meta>
	</name>
</a></x>
		<meta><m n=":optional"/></meta>
	</expected>
</a></typedef>
	<abstract path="haxe.display.HoverExpectedNameKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.HoverExpectedNameKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<FunctionArgument public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.HoverExpectedNameKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FunctionArgument>
	<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.HoverExpectedNameKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</StructureField>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.HoverExpectedNameKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<FunctionArgument public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.HoverExpectedNameKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FunctionArgument>
		<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.HoverExpectedNameKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</StructureField>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.DeterminePackageResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><c path="String"/></c></t>
		<haxe_doc>DeterminePackage</haxe_doc>
	</typedef>
	<typedef path="haxe.display.SignatureHelpParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<wasAutoTriggered><x path="Bool"/></wasAutoTriggered>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>SignatureHelp</haxe_doc>
	</typedef>
	<typedef path="haxe.display.SignatureInformation" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<ret><t path="haxe.display.JsonType"><d/></t></ret>
	<documentation>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</documentation>
	<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
</a></typedef>
	<abstract path="haxe.display.SignatureItemKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.SignatureItemKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
	<Call public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.SignatureItemKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Call>
	<ArrayAccess public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.SignatureItemKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ArrayAccess>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.SignatureItemKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1" final="1">
		<Call public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.SignatureItemKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Call>
		<ArrayAccess public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.SignatureItemKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ArrayAccess>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.SignatureItem" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<signatures><c path="Array"><t path="haxe.display.SignatureInformation"/></c></signatures>
	<kind><x path="haxe.display.SignatureItemKind"/></kind>
	<activeSignature><x path="Int"/></activeSignature>
	<activeParameter><x path="Int"/></activeParameter>
</a></typedef>
	<typedef path="haxe.display.SignatureHelpResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="Null"><t path="haxe.display.SignatureItem"/></x></t></typedef>
	<typedef path="haxe.display.MetadataParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<user><x path="Bool"/></user>
	<compiler><x path="Bool"/></compiler>
</a></typedef>
	<typedef path="haxe.display.MetadataResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Metadata"/></c></t></typedef>
	<typedef path="haxe.display.DefinesParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<user><x path="Bool"/></user>
	<compiler><x path="Bool"/></compiler>
</a></typedef>
	<typedef path="haxe.display.DefinesResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Define"/></c></t></typedef>
	<typedef path="haxe.display.PositionParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>General types</haxe_doc>
	</typedef>
	<abstract path="haxe.display.FsPath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/FsPath.hx">
		<this><c path="String"/></this>
		<impl><class path="haxe.display._FsPath.FsPath_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/FsPath.hx" private="1" module="haxe.display.FsPath" final="1">
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="path">
			<c path="String"/>
			<x path="haxe.display.FsPath"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<toString public="1" get="inline" set="null" line="30" static="1"><f a="this">
	<c path="String"/>
	<c path="String"/>
</f></toString>
</class></impl>
	</abstract>
	<class path="haxe.display._FsPath.FsPath_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/FsPath.hx" private="1" module="haxe.display.FsPath" final="1">
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="path">
				<c path="String"/>
				<x path="haxe.display.FsPath"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<toString public="1" get="inline" set="null" line="30" static="1"><f a="this">
	<c path="String"/>
	<c path="String"/>
</f></toString>
	</class>
	<typedef path="haxe.display.JsonTodo" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><d/></typedef>
	<typedef path="haxe.display.JsonPos" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.display.JsonDoc" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><x path="Null"><c path="String"/></x></typedef>
	<abstract path="haxe.display.ImportStatus" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.ImportStatus_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<Imported public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>This type is already available with it's unqualified name for one of these reasons:
		  - it's a toplevel type
		  - it's imported with an `import` in the current module
		  - it's imported in an `import.hx` file</haxe_doc>
	</Imported>
	<Unimported public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The type is currently not imported. It can be accessed either
		with its fully qualified name or by inserting an import.</haxe_doc>
	</Unimported>
	<Shadowed public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>A type with the same name is already imported in the module.
		The fully qualified name has to be used to access it.</haxe_doc>
	</Shadowed>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.ImportStatus_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<Imported public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>This type is already available with it's unqualified name for one of these reasons:
		  - it's a toplevel type
		  - it's imported with an `import` in the current module
		  - it's imported in an `import.hx` file</haxe_doc>
		</Imported>
		<Unimported public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The type is currently not imported. It can be accessed either
		with its fully qualified name or by inserting an import.</haxe_doc>
		</Unimported>
		<Shadowed public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>A type with the same name is already imported in the module.
		The fully qualified name has to be used to access it.</haxe_doc>
		</Shadowed>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonPackagePath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a><pack><c path="Array"><c path="String"/></c></pack></a></typedef>
	<typedef path="haxe.display.JsonModulePath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
</a></typedef>
	<typedef path="haxe.display.JsonTypePath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<typeName><c path="String"/></typeName>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
</a></typedef>
	<typedef path="haxe.display.JsonStaticFieldPath" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<typeName><c path="String"/></typeName>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
	<fieldName><c path="String"/></fieldName>
</a></typedef>
	<typedef path="haxe.display.JsonTypePathWithParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<path><t path="haxe.display.JsonTypePath"/></path>
	<params><t path="haxe.display.JsonTypes"/></params>
</a></typedef>
	<typedef path="haxe.display.JsonFunctionArgument" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<value>
		<x path="Null"><a><string><c path="String"/></string></a></x>
		<meta><m n=":optional"/></meta>
	</value>
	<t><t path="haxe.display.JsonType"><d/></t></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.display.JsonFunctionSignature" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<ret><t path="haxe.display.JsonType"><d/></t></ret>
	<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
</a></typedef>
	<abstract path="haxe.display.JsonAnonStatusKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonAnonStatusKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<AClosed public="1" get="inline" set="null" expr="cast &quot;AClosed&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AClosed"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AClosed>
	<AOpened public="1" get="inline" set="null" expr="cast &quot;AOpened&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AOpened"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AOpened>
	<AConst public="1" get="inline" set="null" expr="cast &quot;AConst&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AConst"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AConst>
	<AExtend public="1" get="inline" set="null" expr="cast &quot;AExtend&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypes"/></x>
		<meta>
			<m n=":value"><e>cast "AExtend"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AExtend>
	<AClassStatics public="1" get="inline" set="null" expr="cast &quot;AClassStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AClassStatics"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AClassStatics>
	<AEnumStatics public="1" get="inline" set="null" expr="cast &quot;AEnumStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AEnumStatics"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AEnumStatics>
	<AAbstractStatics public="1" get="inline" set="null" expr="cast &quot;AAbstractStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AAbstractStatics"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AAbstractStatics>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonAnonStatusKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<AClosed public="1" get="inline" set="null" expr="cast &quot;AClosed&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AClosed"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AClosed>
		<AOpened public="1" get="inline" set="null" expr="cast &quot;AOpened&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AOpened"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AOpened>
		<AConst public="1" get="inline" set="null" expr="cast &quot;AConst&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AConst"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AConst>
		<AExtend public="1" get="inline" set="null" expr="cast &quot;AExtend&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypes"/></x>
			<meta>
				<m n=":value"><e>cast "AExtend"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AExtend>
		<AClassStatics public="1" get="inline" set="null" expr="cast &quot;AClassStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AClassStatics"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AClassStatics>
		<AEnumStatics public="1" get="inline" set="null" expr="cast &quot;AEnumStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AEnumStatics"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AEnumStatics>
		<AAbstractStatics public="1" get="inline" set="null" expr="cast &quot;AAbstractStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AAbstractStatics"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AAbstractStatics>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonAnonStatus" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatus.T"/></x></kind>
	<args><c path="haxe.display.JsonAnonStatus.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonAnon" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<status><t path="haxe.display.JsonAnonStatus"><d/></t></status>
	<fields><t path="haxe.display.JsonClassFields"/></fields>
</a></typedef>
	<abstract path="haxe.display.JsonTypeKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<TMono public="1" get="inline" set="null" expr="cast &quot;TMono&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonTypeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TMono"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TMono>
	<TInst public="1" get="inline" set="null" expr="cast &quot;TInst&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TInst"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TInst>
	<TEnum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TEnum"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TEnum>
	<TType public="1" get="inline" set="null" expr="cast &quot;TType&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TType"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TType>
	<TAbstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TAbstract"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TAbstract>
	<TFun public="1" get="inline" set="null" expr="cast &quot;TFun&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonFunctionSignature"/></x>
		<meta>
			<m n=":value"><e>cast "TFun"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TFun>
	<TAnonymous public="1" get="inline" set="null" expr="cast &quot;TAnonymous&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast "TAnonymous"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TAnonymous>
	<TDynamic public="1" get="inline" set="null" expr="cast &quot;TDynamic&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><x path="Null"><t path="haxe.display.JsonType"><d/></t></x></x>
		<meta>
			<m n=":value"><e>cast "TDynamic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TDynamic>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<TMono public="1" get="inline" set="null" expr="cast &quot;TMono&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonTypeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TMono"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TMono>
		<TInst public="1" get="inline" set="null" expr="cast &quot;TInst&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TInst"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TInst>
		<TEnum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TEnum"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TEnum>
		<TType public="1" get="inline" set="null" expr="cast &quot;TType&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TType"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TType>
		<TAbstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TAbstract"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TAbstract>
		<TFun public="1" get="inline" set="null" expr="cast &quot;TFun&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonFunctionSignature"/></x>
			<meta>
				<m n=":value"><e>cast "TFun"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TFun>
		<TAnonymous public="1" get="inline" set="null" expr="cast &quot;TAnonymous&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast "TAnonymous"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TAnonymous>
		<TDynamic public="1" get="inline" set="null" expr="cast &quot;TDynamic&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><x path="Null"><t path="haxe.display.JsonType"><d/></t></x></x>
			<meta>
				<m n=":value"><e>cast "TDynamic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TDynamic>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonType" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonType.T"/></x></kind>
	<args><c path="haxe.display.JsonType.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonTypes" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></typedef>
	<typedef path="haxe.display.JsonTypeParameter" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<name><c path="String"/></name>
	<constraints><t path="haxe.display.JsonTypes"/></constraints>
</a></typedef>
	<typedef path="haxe.display.JsonTypeParameters" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonTypeParameter"/></c></typedef>
	<abstract path="haxe.display.JsonBinopKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonBinopKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<OpAdd public="1" get="inline" set="null" expr="cast &quot;OpAdd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAdd"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpAdd>
	<OpMult public="1" get="inline" set="null" expr="cast &quot;OpMult&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpMult"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpMult>
	<OpDiv public="1" get="inline" set="null" expr="cast &quot;OpDiv&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpDiv"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpDiv>
	<OpSub public="1" get="inline" set="null" expr="cast &quot;OpSub&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpSub"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpSub>
	<OpAssign public="1" get="inline" set="null" expr="cast &quot;OpAssign&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAssign"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpAssign>
	<OpEq public="1" get="inline" set="null" expr="cast &quot;OpEq&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpEq"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpEq>
	<OpNotEq public="1" get="inline" set="null" expr="cast &quot;OpNotEq&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpNotEq"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNotEq>
	<OpGt public="1" get="inline" set="null" expr="cast &quot;OpGt&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpGt"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpGt>
	<OpGte public="1" get="inline" set="null" expr="cast &quot;OpGte&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpGte"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpGte>
	<OpLt public="1" get="inline" set="null" expr="cast &quot;OpLt&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpLt"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpLt>
	<OpLte public="1" get="inline" set="null" expr="cast &quot;OpLte&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpLte"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpLte>
	<OpAnd public="1" get="inline" set="null" expr="cast &quot;OpAnd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAnd"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpAnd>
	<OpOr public="1" get="inline" set="null" expr="cast &quot;OpOr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpOr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpOr>
	<OpXor public="1" get="inline" set="null" expr="cast &quot;OpXor&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpXor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpXor>
	<OpBoolAnd public="1" get="inline" set="null" expr="cast &quot;OpBoolAnd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpBoolAnd"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpBoolAnd>
	<OpBoolOr public="1" get="inline" set="null" expr="cast &quot;OpBoolOr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpBoolOr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpBoolOr>
	<OpShl public="1" get="inline" set="null" expr="cast &quot;OpShl&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpShl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpShl>
	<OpShr public="1" get="inline" set="null" expr="cast &quot;OpShr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpShr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpShr>
	<OpUShr public="1" get="inline" set="null" expr="cast &quot;OpUShr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpUShr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpUShr>
	<OpMod public="1" get="inline" set="null" expr="cast &quot;OpMod&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpMod"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpMod>
	<OpAssignOp public="1" get="inline" set="null" expr="cast &quot;OpAssignOp&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><t path="haxe.display.JsonBinop"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "OpAssignOp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpAssignOp>
	<OpInterval public="1" get="inline" set="null" expr="cast &quot;OpInterval&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpInterval"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpInterval>
	<OpArrow public="1" get="inline" set="null" expr="cast &quot;OpArrow&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpArrow"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpArrow>
	<OpIn public="1" get="inline" set="null" expr="cast &quot;OpIn&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpIn"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpIn>
	<OpNullCoal public="1" get="inline" set="null" expr="cast &quot;OpNullCoal&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpNullCoal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNullCoal>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonBinopKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<OpAdd public="1" get="inline" set="null" expr="cast &quot;OpAdd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAdd"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpAdd>
		<OpMult public="1" get="inline" set="null" expr="cast &quot;OpMult&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpMult"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpMult>
		<OpDiv public="1" get="inline" set="null" expr="cast &quot;OpDiv&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpDiv"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpDiv>
		<OpSub public="1" get="inline" set="null" expr="cast &quot;OpSub&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpSub"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpSub>
		<OpAssign public="1" get="inline" set="null" expr="cast &quot;OpAssign&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAssign"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpAssign>
		<OpEq public="1" get="inline" set="null" expr="cast &quot;OpEq&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpEq"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpEq>
		<OpNotEq public="1" get="inline" set="null" expr="cast &quot;OpNotEq&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpNotEq"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNotEq>
		<OpGt public="1" get="inline" set="null" expr="cast &quot;OpGt&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpGt"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpGt>
		<OpGte public="1" get="inline" set="null" expr="cast &quot;OpGte&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpGte"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpGte>
		<OpLt public="1" get="inline" set="null" expr="cast &quot;OpLt&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpLt"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpLt>
		<OpLte public="1" get="inline" set="null" expr="cast &quot;OpLte&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpLte"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpLte>
		<OpAnd public="1" get="inline" set="null" expr="cast &quot;OpAnd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAnd"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpAnd>
		<OpOr public="1" get="inline" set="null" expr="cast &quot;OpOr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpOr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpOr>
		<OpXor public="1" get="inline" set="null" expr="cast &quot;OpXor&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpXor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpXor>
		<OpBoolAnd public="1" get="inline" set="null" expr="cast &quot;OpBoolAnd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpBoolAnd"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpBoolAnd>
		<OpBoolOr public="1" get="inline" set="null" expr="cast &quot;OpBoolOr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpBoolOr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpBoolOr>
		<OpShl public="1" get="inline" set="null" expr="cast &quot;OpShl&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpShl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpShl>
		<OpShr public="1" get="inline" set="null" expr="cast &quot;OpShr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpShr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpShr>
		<OpUShr public="1" get="inline" set="null" expr="cast &quot;OpUShr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpUShr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpUShr>
		<OpMod public="1" get="inline" set="null" expr="cast &quot;OpMod&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpMod"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpMod>
		<OpAssignOp public="1" get="inline" set="null" expr="cast &quot;OpAssignOp&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><t path="haxe.display.JsonBinop"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "OpAssignOp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpAssignOp>
		<OpInterval public="1" get="inline" set="null" expr="cast &quot;OpInterval&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpInterval"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpInterval>
		<OpArrow public="1" get="inline" set="null" expr="cast &quot;OpArrow&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpArrow"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpArrow>
		<OpIn public="1" get="inline" set="null" expr="cast &quot;OpIn&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpIn"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpIn>
		<OpNullCoal public="1" get="inline" set="null" expr="cast &quot;OpNullCoal&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpNullCoal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNullCoal>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonBinop" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinop.T"/></x></kind>
	<args><c path="haxe.display.JsonBinop.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonUnop" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonUnop_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<OpIncrement public="1" get="inline" set="null" expr="cast &quot;OpIncrement&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpIncrement"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpIncrement>
	<OpDecrement public="1" get="inline" set="null" expr="cast &quot;OpDecrement&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpDecrement"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpDecrement>
	<OpNot public="1" get="inline" set="null" expr="cast &quot;OpNot&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNot"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNot>
	<OpNeg public="1" get="inline" set="null" expr="cast &quot;OpNeg&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNeg>
	<OpNegBits public="1" get="inline" set="null" expr="cast &quot;OpNegBits&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNegBits"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OpNegBits>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonUnop_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<OpIncrement public="1" get="inline" set="null" expr="cast &quot;OpIncrement&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpIncrement"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpIncrement>
		<OpDecrement public="1" get="inline" set="null" expr="cast &quot;OpDecrement&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpDecrement"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpDecrement>
		<OpNot public="1" get="inline" set="null" expr="cast &quot;OpNot&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNot"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNot>
		<OpNeg public="1" get="inline" set="null" expr="cast &quot;OpNeg&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNeg>
		<OpNegBits public="1" get="inline" set="null" expr="cast &quot;OpNegBits&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNegBits"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OpNegBits>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><t path="haxe.display.JsonTodo"/></typedef>
	<typedef path="haxe.display.JsonMetadataEntry" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<name><c path="String"/></name>
	<args><c path="Array"><t path="haxe.display.JsonExpr"/></c></args>
</a></typedef>
	<typedef path="haxe.display.JsonMetadata" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonMetadataEntry"/></c></typedef>
	<abstract path="haxe.display.JsonTConstantKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTConstantKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<TInt public="1" get="inline" set="null" expr="cast &quot;TInt&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TInt"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TInt>
	<TFloat public="1" get="inline" set="null" expr="cast &quot;TFloat&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TFloat"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TFloat>
	<TString public="1" get="inline" set="null" expr="cast &quot;TString&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TString"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TString>
	<TBool public="1" get="inline" set="null" expr="cast &quot;TBool&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><x path="Bool"/></x>
		<meta>
			<m n=":value"><e>cast "TBool"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TBool>
	<TNull public="1" get="inline" set="null" expr="cast &quot;TNull&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TNull"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TNull>
	<TThis public="1" get="inline" set="null" expr="cast &quot;TThis&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TThis"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TThis>
	<TSuper public="1" get="inline" set="null" expr="cast &quot;TSuper&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TSuper"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TSuper>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonTConstantKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<TInt public="1" get="inline" set="null" expr="cast &quot;TInt&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TInt"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TInt>
		<TFloat public="1" get="inline" set="null" expr="cast &quot;TFloat&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TFloat"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TFloat>
		<TString public="1" get="inline" set="null" expr="cast &quot;TString&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TString"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TString>
		<TBool public="1" get="inline" set="null" expr="cast &quot;TBool&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><x path="Bool"/></x>
			<meta>
				<m n=":value"><e>cast "TBool"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TBool>
		<TNull public="1" get="inline" set="null" expr="cast &quot;TNull&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TNull"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TNull>
		<TThis public="1" get="inline" set="null" expr="cast &quot;TThis&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TThis"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TThis>
		<TSuper public="1" get="inline" set="null" expr="cast &quot;TSuper&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TSuper"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TSuper>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonTConstant" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstant.T"/></x></kind>
	<args><c path="haxe.display.JsonTConstant.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonTExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><t path="haxe.display.JsonTodo"/></typedef>
	<abstract path="haxe.display.JsonVarAccessKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonVarAccessKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<AccNormal public="1" get="inline" set="null" expr="cast &quot;AccNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNormal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccNormal>
	<AccNo public="1" get="inline" set="null" expr="cast &quot;AccNo&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccNo>
	<AccNever public="1" get="inline" set="null" expr="cast &quot;AccNever&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNever"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccNever>
	<AccResolve public="1" get="inline" set="null" expr="cast &quot;AccResolve&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccResolve"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccResolve>
	<AccCall public="1" get="inline" set="null" expr="cast &quot;AccCall&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccCall"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccCall>
	<AccInline public="1" get="inline" set="null" expr="cast &quot;AccInline&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccInline"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccInline>
	<AccRequire public="1" get="inline" set="null" expr="cast &quot;AccRequire&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><a>
	<require><c path="String"/></require>
	<message><x path="Null"><c path="String"/></x></message>
</a></x>
		<meta>
			<m n=":value"><e>cast "AccRequire"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccRequire>
	<AccCtor public="1" get="inline" set="null" expr="cast &quot;AccCtor&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccCtor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AccCtor>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonVarAccessKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<AccNormal public="1" get="inline" set="null" expr="cast &quot;AccNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNormal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccNormal>
		<AccNo public="1" get="inline" set="null" expr="cast &quot;AccNo&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccNo>
		<AccNever public="1" get="inline" set="null" expr="cast &quot;AccNever&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNever"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccNever>
		<AccResolve public="1" get="inline" set="null" expr="cast &quot;AccResolve&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccResolve"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccResolve>
		<AccCall public="1" get="inline" set="null" expr="cast &quot;AccCall&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccCall"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccCall>
		<AccInline public="1" get="inline" set="null" expr="cast &quot;AccInline&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccInline"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccInline>
		<AccRequire public="1" get="inline" set="null" expr="cast &quot;AccRequire&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><a>
	<require><c path="String"/></require>
	<message><x path="Null"><c path="String"/></x></message>
</a></x>
			<meta>
				<m n=":value"><e>cast "AccRequire"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccRequire>
		<AccCtor public="1" get="inline" set="null" expr="cast &quot;AccCtor&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccCtor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AccCtor>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonVarAccess" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccess.T"/></x></kind>
	<args><c path="haxe.display.JsonVarAccess.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonMethodKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonMethodKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<MethNormal public="1" get="inline" set="null" expr="cast &quot;MethNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethNormal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethNormal>
	<MethInline public="1" get="inline" set="null" expr="cast &quot;MethInline&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethInline"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethInline>
	<MethDynamic public="1" get="inline" set="null" expr="cast &quot;MethDynamic&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethDynamic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethDynamic>
	<MethMacro public="1" get="inline" set="null" expr="cast &quot;MethMacro&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethMacro"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethMacro>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonMethodKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<MethNormal public="1" get="inline" set="null" expr="cast &quot;MethNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethNormal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethNormal>
		<MethInline public="1" get="inline" set="null" expr="cast &quot;MethInline&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethInline"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethInline>
		<MethDynamic public="1" get="inline" set="null" expr="cast &quot;MethDynamic&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethDynamic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethDynamic>
		<MethMacro public="1" get="inline" set="null" expr="cast &quot;MethMacro&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethMacro"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethMacro>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.JsonFieldKindKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonFieldKindKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<FVar public="1" get="inline" set="null" expr="cast &quot;FVar&quot;" line="1" static="1">
		<x path="haxe.display.JsonFieldKindKind"><a>
	<write><t path="haxe.display.JsonVarAccess"><d/></t></write>
	<read><t path="haxe.display.JsonVarAccess"><d/></t></read>
</a></x>
		<meta>
			<m n=":value"><e>cast "FVar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FVar>
	<FMethod public="1" get="inline" set="null" expr="cast &quot;FMethod&quot;" line="1" static="1">
		<x path="haxe.display.JsonFieldKindKind"><x path="haxe.display.JsonMethodKind"/></x>
		<meta>
			<m n=":value"><e>cast "FMethod"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FMethod>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonFieldKindKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<FVar public="1" get="inline" set="null" expr="cast &quot;FVar&quot;" line="1" static="1">
			<x path="haxe.display.JsonFieldKindKind"><a>
	<write><t path="haxe.display.JsonVarAccess"><d/></t></write>
	<read><t path="haxe.display.JsonVarAccess"><d/></t></read>
</a></x>
			<meta>
				<m n=":value"><e>cast "FVar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FVar>
		<FMethod public="1" get="inline" set="null" expr="cast &quot;FMethod&quot;" line="1" static="1">
			<x path="haxe.display.JsonFieldKindKind"><x path="haxe.display.JsonMethodKind"/></x>
			<meta>
				<m n=":value"><e>cast "FMethod"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FMethod>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonFieldKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonFieldKindKind"><c path="haxe.display.JsonFieldKind.T"/></x></kind>
	<args><c path="haxe.display.JsonFieldKind.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonClassFieldScope" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassFieldScope_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<Static public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Static>
	<Member public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Member>
	<Constructor public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Constructor>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonClassFieldScope_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<Static public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Static>
		<Member public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Member>
		<Constructor public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Constructor>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonClassField" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<scope><x path="haxe.display.JsonClassFieldScope"/></scope>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<overloads><t path="haxe.display.JsonClassFields"/></overloads>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><t path="haxe.display.JsonFieldKind"><d/></t></kind>
	<isPublic><x path="Bool"/></isPublic>
	<isFinal><x path="Bool"/></isFinal>
	<isAbstract><x path="Bool"/></isAbstract>
	<expr>
		<x path="Null"><a><string><c path="String"/></string></a></x>
		<meta><m n=":optional"/></meta>
	</expr>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.JsonClassFields" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonClassField"/></c></typedef>
	<typedef path="haxe.display.JsonClassFieldReference" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="String"/></typedef>
	<typedef path="haxe.display.JsonEnumField" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.JsonEnumFields" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonEnumField"/></c></typedef>
	<abstract path="haxe.display.JsonClassKindKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassKindKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<KNormal public="1" get="inline" set="null" expr="cast &quot;KNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KNormal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KNormal>
	<KTypeParameter public="1" get="inline" set="null" expr="cast &quot;KTypeParameter&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypes"/></x>
		<meta>
			<m n=":value"><e>cast "KTypeParameter"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KTypeParameter>
	<KExtension public="1" get="inline" set="null" expr="cast &quot;KExtension&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "KExtension"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KExtension>
	<KExpr public="1" get="inline" set="null" expr="cast &quot;KExpr&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonExpr"/></x>
		<meta>
			<m n=":value"><e>cast "KExpr"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KExpr>
	<KGeneric public="1" get="inline" set="null" expr="cast &quot;KGeneric&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KGeneric"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KGeneric>
	<KGenericInstance public="1" get="inline" set="null" expr="cast &quot;KGenericInstance&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "KGenericInstance"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KGenericInstance>
	<KMacroType public="1" get="inline" set="null" expr="cast &quot;KMacroType&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KMacroType"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KMacroType>
	<KAbstractImpl public="1" get="inline" set="null" expr="cast &quot;KAbstractImpl&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "KAbstractImpl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KAbstractImpl>
	<KGenericBuild public="1" get="inline" set="null" expr="cast &quot;KGenericBuild&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KGenericBuild"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KGenericBuild>
	<KModuleFields public="1" get="inline" set="null" expr="cast &quot;KModuleFields&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonModulePath"/></x>
		<meta>
			<m n=":value"><e>cast "KModuleFields"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</KModuleFields>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonClassKindKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<KNormal public="1" get="inline" set="null" expr="cast &quot;KNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KNormal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KNormal>
		<KTypeParameter public="1" get="inline" set="null" expr="cast &quot;KTypeParameter&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypes"/></x>
			<meta>
				<m n=":value"><e>cast "KTypeParameter"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KTypeParameter>
		<KExtension public="1" get="inline" set="null" expr="cast &quot;KExtension&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "KExtension"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KExtension>
		<KExpr public="1" get="inline" set="null" expr="cast &quot;KExpr&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonExpr"/></x>
			<meta>
				<m n=":value"><e>cast "KExpr"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KExpr>
		<KGeneric public="1" get="inline" set="null" expr="cast &quot;KGeneric&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KGeneric"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KGeneric>
		<KGenericInstance public="1" get="inline" set="null" expr="cast &quot;KGenericInstance&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "KGenericInstance"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KGenericInstance>
		<KMacroType public="1" get="inline" set="null" expr="cast &quot;KMacroType&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KMacroType"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KMacroType>
		<KAbstractImpl public="1" get="inline" set="null" expr="cast &quot;KAbstractImpl&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "KAbstractImpl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KAbstractImpl>
		<KGenericBuild public="1" get="inline" set="null" expr="cast &quot;KGenericBuild&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KGenericBuild"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KGenericBuild>
		<KModuleFields public="1" get="inline" set="null" expr="cast &quot;KModuleFields&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonModulePath"/></x>
			<meta>
				<m n=":value"><e>cast "KModuleFields"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</KModuleFields>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonClassKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKind.T"/></x></kind>
	<args><c path="haxe.display.JsonClassKind.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonClass" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<superClass><x path="Null"><t path="haxe.display.JsonTypePathWithParams"/></x></superClass>
	<statics><t path="haxe.display.JsonClassFields"/></statics>
	<overrides><c path="Array"><t path="haxe.display.JsonClassFieldReference"/></c></overrides>
	<kind><t path="haxe.display.JsonClassKind"><d/></t></kind>
	<isInterface><x path="Bool"/></isInterface>
	<isFinal><x path="Bool"/></isFinal>
	<isExtern><x path="Bool"/></isExtern>
	<isAbstract><x path="Bool"/></isAbstract>
	<interfaces><c path="Array"><t path="haxe.display.JsonTypePathWithParams"/></c></interfaces>
	<init><x path="Null"><t path="haxe.display.JsonTExpr"/></x></init>
	<fields><t path="haxe.display.JsonClassFields"/></fields>
	<constructor><x path="Null"><t path="haxe.display.JsonClassField"/></x></constructor>
</a></typedef>
	<typedef path="haxe.display.JsonEnum" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<isExtern><x path="Bool"/></isExtern>
	<constructors><t path="haxe.display.JsonEnumFields"/></constructors>
</a></typedef>
	<typedef path="haxe.display.JsonTypedef" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a><type><t path="haxe.display.JsonType"><d/></t></type></a></typedef>
	<typedef path="haxe.display.JsonAbstractBinop" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<op><t path="haxe.display.JsonBinop"><d/></t></op>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstractUnop" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<postFix><x path="Bool"/></postFix>
	<op><x path="haxe.display.JsonUnop"/></op>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstractCast" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<t><t path="haxe.display.JsonType"><d/></t></t>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstract" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<unops><c path="Array"><t path="haxe.display.JsonAbstractUnop"/></c></unops>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<to><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></to>
	<resolve><x path="Null"><t path="haxe.display.JsonClassFieldReference"/></x></resolve>
	<impl><x path="Null"><t path="haxe.display.JsonClass"/></x></impl>
	<from><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></from>
	<binops><c path="Array"><t path="haxe.display.JsonAbstractBinop"/></c></binops>
	<array><t path="haxe.display.JsonClassFields"/></array>
</a></typedef>
	<abstract path="haxe.display.JsonModuleTypeKind" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonModuleTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
	<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="357" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonClass"/></x>
		<meta>
			<m n=":value"><e>cast "class"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Class>
	<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="358" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonEnum"/></x>
		<meta>
			<m n=":value"><e>cast "enum"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Enum>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="359" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonTypedef"/></x>
		<meta>
			<m n=":value"><e>cast "typedef"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Typedef>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="360" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonAbstract"/></x>
		<meta>
			<m n=":value"><e>cast "abstract"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Abstract>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonModuleTypeKind_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1" final="1">
		<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="357" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonClass"/></x>
			<meta>
				<m n=":value"><e>cast "class"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Class>
		<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="358" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonEnum"/></x>
			<meta>
				<m n=":value"><e>cast "enum"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Enum>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="359" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonTypedef"/></x>
			<meta>
				<m n=":value"><e>cast "typedef"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Typedef>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="360" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonAbstract"/></x>
			<meta>
				<m n=":value"><e>cast "abstract"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Abstract>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonModuleType" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<moduleName><c path="String"/></moduleName>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><x path="haxe.display.JsonModuleTypeKind"><c path="haxe.display.JsonModuleType.T"/></x></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<doc><t path="haxe.display.JsonDoc"/></doc>
	<args><c path="haxe.display.JsonModuleType.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonModuleTypes" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/JsonModuleTypes.hx"><c path="Array"><t path="haxe.display.JsonModuleType"><d/></t></c></typedef>
	<typedef path="haxe.display.Position" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Position.hx">
		<a>
			<line>
				<x path="Int"/>
				<haxe_doc>Line position in a document (1-based).</haxe_doc>
			</line>
			<character>
				<x path="Int"/>
				<haxe_doc>Character offset on a line in a document (1-based).</haxe_doc>
			</character>
		</a>
		<haxe_doc>Position in a text document expressed as 1-based line and character offset.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.Range" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<start>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's start position</haxe_doc>
			</start>
			<end>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's end position</haxe_doc>
			</end>
		</a>
		<haxe_doc>A range in a text document expressed as (1-based) start and end positions.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.Location" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<range><t path="haxe.display.Range"/></range>
			<file><x path="haxe.display.FsPath"/></file>
		</a>
		<haxe_doc>Represents a location inside a resource, such as a line inside a text file.</haxe_doc>
	</typedef>
	<class path="haxe.display.Methods" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<Initialize public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;InitializeParams,InitializeResult&gt;(&quot;initialize&quot;)" line="32" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.InitializeParams"/>
				<t path="haxe.display.InitializeResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<InitializeParams,InitializeResult>("initialize")]]></e></m></meta>
			<haxe_doc>The initialize request is sent from the client to Haxe to determine the capabilities.</haxe_doc>
		</Initialize>
		<meta><m n=":publicFields"/></meta>
	</class>
	<typedef path="haxe.display.InitializeParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<supportsResolve final="1" set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</supportsResolve>
	<maxCompletionItems final="1" set="null">
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of completion items to return</haxe_doc>
	</maxCompletionItems>
	<exclude final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>dot paths to exclude from readClassPaths / toplevel completion</haxe_doc>
	</exclude>
</a></typedef>
	<typedef path="haxe.display.Version" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<a>
			<pre final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</pre>
			<patch final="1" set="null"><x path="Int"/></patch>
			<minor final="1" set="null"><x path="Int"/></minor>
			<major final="1" set="null"><x path="Int"/></major>
			<build final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</build>
		</a>
		<haxe_doc>Represents a semantic version, see https://semver.org/.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.InitializeResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><t path="haxe.display.Response"><a>
	<protocolVersion final="1" set="null"><t path="haxe.display.Version"/></protocolVersion>
	<methods final="1" set="null"><c path="Array"><c path="String"/></c></methods>
	<haxeVersion final="1" set="null"><t path="haxe.display.Version"/></haxeVersion>
</a></t></typedef>
	<typedef path="haxe.display.Timer" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<time final="1" set="null"><x path="Float"/></time>
	<percentTotal final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</percentTotal>
	<percentParent final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</percentParent>
	<path final="1" set="null">
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</path>
	<name final="1" set="null"><c path="String"/></name>
	<info final="1" set="null">
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</info>
	<children final="1" set="null">
		<x path="Null"><c path="Array"><t path="haxe.display.Timer"/></c></x>
		<meta><m n=":optional"/></meta>
	</children>
	<calls final="1" set="null">
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</calls>
</a></typedef>
	<typedef path="haxe.display.Response" params="T" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<timestamp final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>UNIX timestamp at the moment the data was sent.</haxe_doc>
	</timestamp>
	<timers final="1" set="null">
		<x path="Null"><t path="haxe.display.Timer"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Only sent if `--times` is enabled.</haxe_doc>
	</timers>
	<result final="1" set="null">
		<x path="Null"><c path="haxe.display.Response.T"/></x>
		<meta><m n=":optional"/></meta>
	</result>
</a></typedef>
	<typedef path="haxe.display.FileParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a><file><x path="haxe.display.FsPath"/></file></a></typedef>
	<abstract path="haxe.display.HaxeRequestMethod" params="TParams:TResponse" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<impl><class path="haxe.display._Protocol.HaxeRequestMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="90" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeRequestMethod">
			<c path="haxe.display.HaxeRequestMethod.TParams"/>
			<c path="haxe.display.HaxeRequestMethod.TResponse"/>
		</x>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeRequestMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="90" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeRequestMethod">
			<c path="haxe.display.HaxeRequestMethod.TParams"/>
			<c path="haxe.display.HaxeRequestMethod.TResponse"/>
		</x>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class>
	<abstract path="haxe.display.HaxeNotificationMethod" params="TParams" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<impl><class path="haxe.display._Protocol.HaxeNotificationMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="95" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeNotificationMethod"><c path="haxe.display.HaxeNotificationMethod.TParams"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeNotificationMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><_new public="1" get="inline" set="null" line="95" static="1">
	<f a="method">
		<c path="String"/>
		<x path="haxe.display.HaxeNotificationMethod"><c path="haxe.display.HaxeNotificationMethod.TParams"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
</_new></class>
	<typedef path="haxe.display.HaxeResponseErrorData" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><c path="Array"><a>
	<severity><x path="haxe.display.HaxeResponseErrorSeverity"/></severity>
	<message><c path="String"/></message>
	<location>
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</location>
</a></c></typedef>
	<abstract path="haxe.display.HaxeResponseErrorSeverity" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Protocol.HaxeResponseErrorSeverity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" extern="1" final="1">
	<Error public="1" get="inline" set="null" expr="cast 1" line="106" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Error>
	<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Warning>
	<Hint public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Hint>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeResponseErrorSeverity_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" extern="1" final="1">
		<Error public="1" get="inline" set="null" expr="cast 1" line="106" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Error>
		<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Warning>
		<Hint public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Hint>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="haxe.display.NoData" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><meta><m n=":flatEnum"/></meta></enum>
	<class path="haxe.display.ServerMethods" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server">
		<ReadClassPaths public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;{ var ?files : Int}&gt;&gt;(&quot;server/readClassPaths&quot;)" line="34" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><a><files>
	<x path="Null"><x path="Int"/></x>
	<meta><m n=":optional"/></meta>
</files></a></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<{ var ?files : Int}>>("server/readClassPaths")]]></e></m></meta>
			<haxe_doc>This request is sent from the client to Haxe to explore the class paths. This effectively creates a cache for toplevel completion.</haxe_doc>
		</ReadClassPaths>
		<Configure public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ConfigureParams,Response&lt;NoData&gt;&gt;(&quot;server/configure&quot;)" line="36" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ConfigureParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ConfigureParams,Response<NoData>>("server/configure")]]></e></m></meta>
		</Configure>
		<Invalidate public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,Response&lt;NoData&gt;&gt;(&quot;server/invalidate&quot;)" line="37" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,Response<NoData>>("server/invalidate")]]></e></m></meta>
		</Invalidate>
		<Contexts public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;Array&lt;HaxeServerContext&gt;&gt;&gt;(&quot;server/contexts&quot;)" line="38" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.HaxeServerContext"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<Array<HaxeServerContext>>>("server/contexts")]]></e></m></meta>
		</Contexts>
		<Memory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;HaxeMemoryResult&gt;&gt;(&quot;server/memory&quot;)" line="39" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<HaxeMemoryResult>>("server/memory")]]></e></m></meta>
		</Memory>
		<ContextMemory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;HaxeContextMemoryResult&gt;&gt;(&quot;server/memory/context&quot;)" line="40" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeContextMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<HaxeContextMemoryResult>>("server/memory/context")]]></e></m></meta>
		</ContextMemory>
		<ModuleMemory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ModuleParams,Response&lt;HaxeModuleMemoryResult&gt;&gt;(&quot;server/memory/module&quot;)" line="41" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ModuleParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeModuleMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ModuleParams,Response<HaxeModuleMemoryResult>>("server/memory/module")]]></e></m></meta>
		</ModuleMemory>
		<Modules public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;Array&lt;String&gt;&gt;&gt;(&quot;server/modules&quot;)" line="42" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><c path="Array"><c path="String"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<Array<String>>>("server/modules")]]></e></m></meta>
		</Modules>
		<Module public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ModuleParams,Response&lt;JsonModule&gt;&gt;(&quot;server/module&quot;)" line="43" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ModuleParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.JsonModule"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ModuleParams,Response<JsonModule>>("server/module")]]></e></m></meta>
		</Module>
		<Type public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;TypeParams,Response&lt;JsonModuleType&lt;Any&gt;&gt;&gt;(&quot;server/type&quot;)" line="44" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.TypeParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.JsonModuleType"><x path="Any"/></t></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<TypeParams,Response<JsonModuleType<Any>>>("server/type")]]></e></m></meta>
		</Type>
		<Files public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;Array&lt;JsonServerFile&gt;&gt;&gt;(&quot;server/files&quot;)" line="45" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.JsonServerFile"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<Array<JsonServerFile>>>("server/files")]]></e></m></meta>
		</Files>
		<ModuleCreated public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,Response&lt;NoData&gt;&gt;(&quot;server/moduleCreated&quot;)" line="46" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,Response<NoData>>("server/moduleCreated")]]></e></m></meta>
		</ModuleCreated>
		<meta><m n=":publicFields"/></meta>
	</class>
	<typedef path="haxe.display.ConfigurePrintParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<unchangedContent>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</unchangedContent>
	<uncaughtError>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</uncaughtError>
	<stats>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</stats>
	<socketMessage>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</socketMessage>
	<skippingDep>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</skippingDep>
	<signature>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</signature>
	<reusing>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</reusing>
	<removedDirectory>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</removedDirectory>
	<parsed>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</parsed>
	<notCached>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</notCached>
	<newContext>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</newContext>
	<modulePathChanged>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</modulePathChanged>
	<message>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</message>
	<foundDirectories>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</foundDirectories>
	<displayPosition>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</displayPosition>
	<defines>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</defines>
	<completion>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</completion>
	<changedDirectories>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</changedDirectories>
	<cachedModules>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</cachedModules>
	<arguments>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</arguments>
	<addedDirectory>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</addedDirectory>
</a></typedef>
	<typedef path="haxe.display.ConfigureParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<print final="1" set="null">
		<x path="Null"><t path="haxe.display.ConfigurePrintParams"/></x>
		<meta><m n=":optional"/></meta>
	</print>
	<noModuleChecks final="1" set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</noModuleChecks>
	<legacyCompletion final="1" set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</legacyCompletion>
</a></typedef>
	<typedef path="haxe.display.HaxeServerContext" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<signature final="1" set="null"><c path="String"/></signature>
	<platform final="1" set="null"><c path="String"/></platform>
	<index final="1" set="null"><x path="Int"/></index>
	<desc final="1" set="null"><c path="String"/></desc>
	<defines final="1" set="null"><c path="Array"><a>
	<value><c path="String"/></value>
	<key><c path="String"/></key>
</a></c></defines>
	<classPaths final="1" set="null"><c path="Array"><c path="String"/></c></classPaths>
</a></typedef>
	<typedef path="haxe.display.ModuleId" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<sign final="1" set="null"><c path="String"/></sign>
	<path final="1" set="null"><c path="String"/></path>
</a></typedef>
	<typedef path="haxe.display.JsonModule" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<types final="1" set="null"><c path="Array"><t path="haxe.display.JsonTypePath"/></c></types>
	<sign final="1" set="null"><c path="String"/></sign>
	<path final="1" set="null"><t path="haxe.display.JsonModulePath"/></path>
	<id final="1" set="null"><x path="Int"/></id>
	<file final="1" set="null"><c path="String"/></file>
	<dirty final="1" set="null"><x path="Null"><c path="String"/></x></dirty>
	<dependents final="1" set="null"><c path="Array"><t path="haxe.display.ModuleId"/></c></dependents>
	<dependencies final="1" set="null"><c path="Array"><t path="haxe.display.ModuleId"/></c></dependencies>
</a></typedef>
	<typedef path="haxe.display.JsonServerFile" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<time final="1" set="null"><x path="Float"/></time>
	<pack final="1" set="null"><c path="String"/></pack>
	<moduleName final="1" set="null"><x path="Null"><c path="String"/></x></moduleName>
	<file final="1" set="null"><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.display.HaxeMemoryResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<memory final="1" set="null"><a>
	<totalCache final="1" set="null"><x path="Int"/></totalCache>
	<nativeLibCache final="1" set="null"><x path="Int"/></nativeLibCache>
	<haxelibCache final="1" set="null"><x path="Int"/></haxelibCache>
	<directoryCache final="1" set="null"><x path="Int"/></directoryCache>
	<contextCache final="1" set="null"><x path="Int"/></contextCache>
	<additionalSizes final="1" set="null">
		<x path="Null"><c path="Array"><a>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
</a></c></x>
		<meta><m n=":optional"/></meta>
	</additionalSizes>
</a></memory>
	<contexts final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<context final="1" set="null"><t path="haxe.display.HaxeServerContext"/></context>
</a></c></contexts>
</a></typedef>
	<typedef path="haxe.display.HaxeContextMemoryResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<syntaxCache final="1" set="null"><a><size final="1" set="null"><x path="Int"/></size></a></syntaxCache>
	<moduleCache final="1" set="null"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<list final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<path final="1" set="null"><c path="String"/></path>
	<hasTypes final="1" set="null"><x path="Bool"/></hasTypes>
</a></c></list>
</a></moduleCache>
	<leaks final="1" set="null">
		<x path="Null"><c path="Array"><a>
	<path final="1" set="null"><c path="String"/></path>
	<leaks final="1" set="null"><c path="Array"><a><path final="1" set="null"><c path="String"/></path></a></c></leaks>
</a></c></x>
		<meta><m n=":optional"/></meta>
	</leaks>
</a></typedef>
	<typedef path="haxe.display.HaxeModuleMemoryResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<types final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<pos final="1" set="null">
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</pos>
	<name final="1" set="null"><c path="String"/></name>
	<fields final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<pos final="1" set="null">
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</pos>
	<name final="1" set="null"><c path="String"/></name>
</a></c></fields>
</a></c></types>
	<moduleExtra final="1" set="null"><x path="Int"/></moduleExtra>
</a></typedef>
	<typedef path="haxe.display.ContextParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a><signature final="1" set="null"><c path="String"/></signature></a></typedef>
	<typedef path="haxe.display.ModuleParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<signature final="1" set="null"><c path="String"/></signature>
	<path final="1" set="null"><c path="String"/></path>
</a></typedef>
	<typedef path="haxe.display.TypeParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/display/Server.hx" module="haxe.display.Server"><a>
	<typeName final="1" set="null"><c path="String"/></typeName>
	<signature final="1" set="null"><c path="String"/></signature>
	<modulePath final="1" set="null"><c path="String"/></modulePath>
</a></typedef>
	<class path="haxe.ds.ArraySort" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/ArraySort.hx">
		<sort public="1" params="T" set="method" line="42" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array `a` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies Array `a` in place.

		This operation is stable: The order of equal elements is preserved.

		If `a` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="46" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="68" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="94" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="rotate.T"/>
		<c path="rotate.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="115" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="124" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="139" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="153" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<compare params="T" get="inline" set="null" line="159" static="1"><f a="a:cmp:i:j">
	<c path="Array"><c path="compare.T"/></c>
	<f a=":">
		<c path="compare.T"/>
		<c path="compare.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></compare>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its `sort`
	method. It should be used instead of `Array.sort` in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/BalancedTree.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.BalancedTree.K"/>
			<c path="haxe.ds.BalancedTree.V"/>
		</implements>
		<iteratorLoop params="K:V" set="method" line="172" static="1"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="iteratorLoop.K"/>
		<c path="iteratorLoop.V"/>
	</c>
	<c path="Array"><c path="iteratorLoop.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Null"><c path="haxe.ds.BalancedTree.V"/></x>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="85">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="101">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="120">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="129">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<keys public="1" set="method" line="138">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<copy public="1" set="method" line="144"><f a=""><c path="haxe.ds.BalancedTree">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></f></copy>
		<setLoop set="method" line="150"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="163"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<keysLoop set="method" line="180"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="188"><f a="t1:t2">
	<x path="Null"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></x>
	<x path="Null"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></x>
	<x path="Null"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></x>
</f></merge>
		<minBinding set="method" line="197"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="201"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="205"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="225"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="229"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method" line="236">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all keys from `this` BalancedTree.</haxe_doc>
		</clear>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="264"><f a=""><x path="Int"/></f></get_height>
		<toString public="1" set="method" line="266"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
	</class>
	<enum path="haxe.ds.Either" params="L:R" file="/home/runner/work/haxe/haxe/std/haxe/ds/Either.hx">
		<Left a="v"><c path="haxe.ds.Either.L"/></Left>
		<Right a="v"><c path="haxe.ds.Either.R"/></Right>
		<haxe_doc>Either represents values which are either of type `L` (Left) or type `R`
	(Right).</haxe_doc>
	</enum>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="32" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="57"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="69"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<copy public="1" set="method" line="79" override="1"><f a=""><c path="haxe.ds.EnumValueMap">
	<c path="haxe.ds.EnumValueMap.K"/>
	<c path="haxe.ds.EnumValueMap.V"/>
</c></f></copy>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<new public="1" set="method" line="37"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>A cell of `haxe.ds.GenericStack`.

	@see https://haxe.org/manual/std-GenericStack.html</haxe_doc>
		<meta><m n=":generic"/></meta>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<add public="1" get="inline" set="null" line="112">
			<f a="item">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes element `item` onto the stack.</haxe_doc>
		</add>
		<first public="1" get="inline" set="null" line="121">
			<f a=""><x path="Null"><c path="haxe.ds.GenericStack.T"/></x></f>
			<haxe_doc>Returns the topmost stack element without removing it.

		If the stack is empty, null is returned.</haxe_doc>
		</first>
		<pop public="1" get="inline" set="null" line="130">
			<f a=""><x path="Null"><c path="haxe.ds.GenericStack.T"/></x></f>
			<haxe_doc>Returns the topmost stack element and removes it.

		If the stack is empty, null is returned.</haxe_doc>
		</pop>
		<isEmpty public="1" get="inline" set="null" line="143">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if the stack is empty.</haxe_doc>
		</isEmpty>
		<remove public="1" set="method" line="156">
			<f a="v">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first element which is equal to `v` according to the `==`
		operator.

		This method traverses the stack until it finds a matching element and
		unlinks it, returning true.

		If no matching element is found, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="185">
			<f a=""><t path="Iterator"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns an iterator over the elements of `this` GenericStack.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="203">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` GenericStack.</haxe_doc>
		</toString>
		<new public="1" set="method" line="107">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A stack of elements.

	This class is generic, which means one type is generated for each type
	parameter T on static targets. For example:

	- `new GenericStack<Int>()` generates `GenericStack_Int`
	- `new GenericStack<String>()` generates `GenericStack_String`

	The generated name is an implementation detail and should not be relied
	upon.

	@see https://haxe.org/manual/std-GenericStack.html]]></haxe_doc>
		<meta><m n=":generic"/></meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1">
	<_new public="1" get="inline" set="null" line="38" static="1">
		<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new HashMap.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="45" static="1">
		<f a="this:k:v">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>See `Map.set`</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="53" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Null"><c path="haxe.ds.HashMap.V"/></x>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>See `Map.get`</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="60" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>See `Map.exists`</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="67" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>See `Map.remove`</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="75" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<haxe_doc>See `Map.keys`</haxe_doc>
	</keys>
	<copy public="1" set="method" line="82" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<x path="haxe.ds.HashMap">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</x>
		</f>
		<haxe_doc>See `Map.copy`</haxe_doc>
	</copy>
	<iterator public="1" get="inline" set="null" line="92" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<haxe_doc>See `Map.iterator`</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="99" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.iterators.HashMapKeyValueIterator">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
		</f>
		<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
	</keyValueIterator>
	<clear public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<x path="Void"/>
		</f>
		<haxe_doc>See `Map.clear`</haxe_doc>
	</clear>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1">
		<_new public="1" get="inline" set="null" line="38" static="1">
			<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new HashMap.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="45" static="1">
			<f a="this:k:v">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="53" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Null"><c path="haxe.ds.HashMap.V"/></x>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="60" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="67" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="75" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<copy public="1" set="method" line="82" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<x path="haxe.ds.HashMap">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</x>
			</f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="92" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="99" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.iterators.HashMapKeyValueIterator">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
			</f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<clear public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
	</class>
	<class path="haxe.ds._HashMap.HashMapData" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<keys public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.K"/></c></keys>
		<values public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.V"/></c></values>
		<new public="1" get="inline" set="null" line="116"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><c path="flash.utils.Dictionary"/></h>
		<set public="1" get="inline" set="null" line="32">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="36">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="40">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="44">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="51">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="55">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="59">
			<f a=""><t path="KeyValueIterator">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="63">
			<f a=""><c path="haxe.ds.IntMap"><c path="haxe.ds.IntMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="70">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" get="inline" set="null" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._IntMap.IntMapKeysIterator" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/IntMap.hx" private="1" module="haxe.ds.IntMap">
		<h><c path="flash.utils.Dictionary"/></h>
		<index><x path="Int"/></index>
		<nextIndex><x path="Int"/></nextIndex>
		<hasNext public="1" get="inline" set="null" line="104">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="111">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new get="inline" set="null" line="98"><f a="h">
	<c path="flash.utils.Dictionary"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>haxe.ds.IntMap</e></m></meta>
	</class>
	<class path="haxe.ds._IntMap.IntMapValuesIterator" params="T" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/IntMap.hx" private="1" module="haxe.ds.IntMap">
		<h><c path="flash.utils.Dictionary"/></h>
		<index><x path="Int"/></index>
		<nextIndex><x path="Int"/></nextIndex>
		<hasNext public="1" get="inline" set="null" line="130">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="137">
			<f a=""><c path="haxe.ds._IntMap.IntMapValuesIterator.T"/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new get="inline" set="null" line="124"><f a="h">
	<c path="flash.utils.Dictionary"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>haxe.ds.IntMap</e></m></meta>
	</class>
	<class path="haxe.ds.List" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/List.hx">
		<h><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></h>
		<q><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="53">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="68">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="81">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="90">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="99">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="113">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="137">
			<f a="v">
				<c path="haxe.ds.List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" get="inline" set="null" line="160">
			<f a=""><c path="haxe.ds._List.ListIterator"><c path="haxe.ds.List.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="167">
			<f a=""><c path="haxe.ds._List.ListKeyValueIterator"><c path="haxe.ds.List.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the List indices and values.</haxe_doc>
		</keyValueIterator>
		<toString public="1" set="method" line="177">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="198">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="217">
			<f a="f">
				<f a="">
					<c path="haxe.ds.List.T"/>
					<x path="Bool"/>
				</f>
				<c path="haxe.ds.List"><c path="haxe.ds.List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="233">
			<f a="f">
				<f a="">
					<c path="haxe.ds.List.T"/>
					<c path="map.X"/>
				</f>
				<c path="haxe.ds.List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
	</class>
	<class path="haxe.ds._List.ListNode" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<create public="1" params="T" get="inline" set="null" line="271" static="1"><f a="item:next">
	<c path="create.T"/>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
</f></create>
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="266"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds._List.ListIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<head><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="284"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="288"><f a=""><c path="haxe.ds._List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="280"><f a="head">
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListIterator.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds._List.ListKeyValueIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<idx><x path="Int"/></idx>
		<head><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListKeyValueIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="304"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="308"><f a=""><a>
	<value><c path="haxe.ds._List.ListKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="299"><f a="head">
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.ListSort" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/ListSort.hx">
		<sort public="1" params="T" get="inline" set="null" line="42" static="1">
			<f a="list:cmp">
				<c path="sort.T"/>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<c path="sort.T"/>
			</f>
			<haxe_doc><![CDATA[Sorts List `lst` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies List `a` in place and returns its head once modified.
		The `prev` of the head is set to the tail of the sorted list.

		If `list` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<sortSingleLinked public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="list:cmp">
				<c path="sortSingleLinked.T"/>
				<f a=":">
					<c path="sortSingleLinked.T"/>
					<c path="sortSingleLinked.T"/>
					<x path="Int"/>
				</f>
				<c path="sortSingleLinked.T"/>
			</f>
			<haxe_doc>Same as `sort` but on single linked list.</haxe_doc>
		</sortSingleLinked>
		<haxe_doc>ListSort provides a stable implementation of merge sort through its `sort`
	method. It has a O(N.log(N)) complexity and does not require additional memory allocation.</haxe_doc>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="74" static="1">
		<f a="this:key:value">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<c path="haxe.ds.Map.V"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="92" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Null"><c path="haxe.ds.Map.V"/></x>
		</f>
		<meta><m n=":arrayAccess"/></meta>
		<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, `null` is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="100" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="109" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="116" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.Map.K"/></t>
		</f>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="125" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.Map.V"/></t>
		</f>
		<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="134" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="KeyValueIterator">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</t>
		</f>
		<haxe_doc>Returns an Iterator over the keys and values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</keyValueIterator>
	<copy public="1" get="inline" set="null" line="143" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<x path="haxe.ds.Map">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</x>
		</f>
		<haxe_doc>Returns a shallow copy of `this` map.

		The order of values is undefined.</haxe_doc>
	</copy>
	<toString public="1" get="inline" set="null" line="152" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<clear public="1" get="inline" set="null" line="159" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<x path="Void"/>
		</f>
		<haxe_doc>Removes all keys from `this` Map.</haxe_doc>
	</clear>
	<arrayWrite public="1" get="inline" set="null" line="163" static="1">
		<f a="this:k:v">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<c path="haxe.ds.Map.V"/>
			<c path="haxe.ds.Map.V"/>
		</f>
		<meta>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap params="K:V" get="inline" set="null" line="168" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toStringMap.K"/>
				<c path="toStringMap.V"/>
			</c>
			<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":to"/>
		</meta>
	</toStringMap>
	<toIntMap params="K:V" get="inline" set="null" line="172" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toIntMap.K"/>
				<c path="toIntMap.V"/>
			</c>
			<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":to"/>
		</meta>
	</toIntMap>
	<toEnumValueMapMap params="K:V" get="inline" set="null" line="176" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":to"/>
		</meta>
	</toEnumValueMapMap>
	<toObjectMap params="K:V" get="inline" set="null" line="180" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":multiType"/>
			<m n=":to"/>
		</meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="184" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="188" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="192" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="haxe.ds.Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="74" static="1">
			<f a="this:key:value">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="92" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Null"><c path="haxe.ds.Map.V"/></x>
			</f>
			<meta><m n=":arrayAccess"/></meta>
			<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, `null` is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="100" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="109" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="116" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.Map.K"/></t>
			</f>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="125" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.Map.V"/></t>
			</f>
			<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="134" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="KeyValueIterator">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</t>
			</f>
			<haxe_doc>Returns an Iterator over the keys and values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</keyValueIterator>
		<copy public="1" get="inline" set="null" line="143" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<x path="haxe.ds.Map">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</x>
			</f>
			<haxe_doc>Returns a shallow copy of `this` map.

		The order of values is undefined.</haxe_doc>
		</copy>
		<toString public="1" get="inline" set="null" line="152" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<clear public="1" get="inline" set="null" line="159" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes all keys from `this` Map.</haxe_doc>
		</clear>
		<arrayWrite public="1" get="inline" set="null" line="163" static="1">
			<f a="this:k:v">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
				<c path="haxe.ds.Map.V"/>
			</f>
			<meta>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap params="K:V" get="inline" set="null" line="168" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toStringMap.K"/>
					<c path="toStringMap.V"/>
				</c>
				<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap params="K:V" get="inline" set="null" line="172" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toIntMap.K"/>
					<c path="toIntMap.V"/>
				</c>
				<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K:V" get="inline" set="null" line="176" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K:V" get="inline" set="null" line="180" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":multiType"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="184" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="haxe.ds.Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="188" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="haxe.ds.Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="192" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="haxe.ds.Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/ObjectMap.hx">
		<extends path="flash.utils.Dictionary"/>
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<get public="1" get="inline" set="null" line="31">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Null"><c path="haxe.ds.ObjectMap.V"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="35">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="39">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="43">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="49">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="57">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="61">
			<f a=""><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="68">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="79">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._ObjectMap.NativePropertyIterator" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<iterator public="1" get="inline" set="null" line="89" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._ObjectMap.NativePropertyIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</index>
		<hasNext public="1" get="inline" set="null" line="97">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="106">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new set="method" line="95"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds._ObjectMap.NativeValueIterator" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<iterator public="1" get="inline" set="null" line="118" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._ObjectMap.NativeValueIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</index>
		<hasNext public="1" get="inline" set="null" line="126">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="135">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new set="method" line="124"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="haxe.ds.Option" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).

	@see https://haxe.org/manual/std-Option.html</haxe_doc>
	</enum>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>The length of `this` Array.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="41" static="1"><f a="this">
	<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
	<x path="Int"/>
</f></get_length>
	<get get="inline" set="null" line="44" static="1">
		<f a="this:i">
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			<x path="Int"/>
			<c path="haxe.ds.ReadOnlyArray.T"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<concat public="1" get="inline" set="null" line="59" static="1">
		<f a="this:a">
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			<x path="haxe.ds.ReadOnlyArray"><c path="haxe.ds.ReadOnlyArray.T"/></x>
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
		</f>
		<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
	</concat>
</class></impl>
	</abstract>
	<class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="41" static="1"><f a="this">
	<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
	<x path="Int"/>
</f></get_length>
		<get get="inline" set="null" line="44" static="1">
			<f a="this:i">
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
				<x path="Int"/>
				<c path="haxe.ds.ReadOnlyArray.T"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<concat public="1" get="inline" set="null" line="59" static="1">
			<f a="this:a">
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
				<x path="haxe.ds.ReadOnlyArray"><c path="haxe.ds.ReadOnlyArray.T"/></x>
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<reserved expr="{ }" line="29" static="1">
			<a/>
			<meta><m n=":value"><e>{ }</e></m></meta>
		</reserved>
		<h><d/></h>
		<rh><d/></rh>
		<isReserved get="inline" set="null" line="35">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isReserved>
		<set public="1" get="inline" set="null" line="39">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="46">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="52">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<setReserved set="method" line="58">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setReserved>
		<getReserved set="method" line="64">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getReserved>
		<existsReserved set="method" line="68">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</existsReserved>
		<remove public="1" set="method" line="74">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="89">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="93">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="97">
			<f a=""><t path="KeyValueIterator">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="101">
			<f a=""><c path="haxe.ds.StringMap"><c path="haxe.ds.StringMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="108">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" get="inline" set="null" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="31">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds._StringMap.StringMapKeysIterator" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap">
		<h><d/></h>
		<rh><d/></rh>
		<index><x path="Int"/></index>
		<nextIndex><x path="Int"/></nextIndex>
		<isReserved><x path="Bool"/></isReserved>
		<hasNext public="1" get="inline" set="null" line="147">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="161">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new get="inline" set="null" line="139"><f a="h:rh">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>haxe.ds.StringMap</e></m>
		</meta>
	</class>
	<class path="haxe.ds._StringMap.StringMapValuesIterator" params="T" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap">
		<h><d/></h>
		<rh><d/></rh>
		<index><x path="Int"/></index>
		<nextIndex><x path="Int"/></nextIndex>
		<hasNext public="1" get="inline" set="null" line="184">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="197">
			<f a=""><c path="haxe.ds._StringMap.StringMapValuesIterator.T"/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new get="inline" set="null" line="177"><f a="h:rh">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>haxe.ds.StringMap</e></m></meta>
	</class>
	<class path="haxe.ds.UnsafeStringMap" params="T" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/UnsafeStringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.UnsafeStringMap.T"/>
		</implements>
		<h><c path="flash.utils.Dictionary"/></h>
		<set public="1" get="inline" set="null" line="37">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.UnsafeStringMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="41">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.UnsafeStringMap.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</get>
		<exists public="1" get="inline" set="null" line="45">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</exists>
		<remove public="1" set="method" line="49">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</remove>
		<keys public="1" get="inline" set="null" line="56"><f a=""><t path="Iterator"><c path="String"/></t></f></keys>
		<iterator public="1" get="inline" set="null" line="60"><f a=""><t path="Iterator"><c path="haxe.ds.UnsafeStringMap.T"/></t></f></iterator>
		<keyValueIterator public="1" get="inline" set="null" line="64"><f a=""><t path="KeyValueIterator">
	<c path="String"/>
	<c path="haxe.ds.UnsafeStringMap.T"/>
</t></f></keyValueIterator>
		<copy public="1" set="method" line="68"><f a=""><c path="haxe.ds.UnsafeStringMap"><c path="haxe.ds.UnsafeStringMap.T"/></c></f></copy>
		<toString public="1" set="method" line="75">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
		</toString>
		<clear public="1" get="inline" set="null" line="90"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method" line="33"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This is similar to `StringMap` excepts that it does not sanitize the keys.
	As a result, it will be faster to access the map for reading, but it might fail
	with some reserved keys such as `constructor` or `prototype`.</haxe_doc>
	</class>
	<class path="haxe.ds._UnsafeStringMap.UnsafeStringMapKeysIterator" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/UnsafeStringMap.hx" private="1" module="haxe.ds.UnsafeStringMap">
		<h><c path="flash.utils.Dictionary"/></h>
		<index><x path="Int"/></index>
		<nextIndex><x path="Int"/></nextIndex>
		<hasNext public="1" get="inline" set="null" line="109">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="116">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new get="inline" set="null" line="103"><f a="h">
	<c path="flash.utils.Dictionary"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>haxe.ds.UnsafeStringMap</e></m></meta>
	</class>
	<class path="haxe.ds._UnsafeStringMap.UnsafeStringMapValuesIterator" params="T" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/UnsafeStringMap.hx" private="1" module="haxe.ds.UnsafeStringMap">
		<h><c path="flash.utils.Dictionary"/></h>
		<index><x path="Int"/></index>
		<nextIndex><x path="Int"/></nextIndex>
		<hasNext public="1" get="inline" set="null" line="135">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="142">
			<f a=""><c path="haxe.ds._UnsafeStringMap.UnsafeStringMapValuesIterator.T"/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new get="inline" set="null" line="129"><f a="h">
	<c path="flash.utils.Dictionary"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>haxe.ds.UnsafeStringMap</e></m></meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="flash.Vector"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/home/runner/work/haxe/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
	<_new public="1" get="inline" set="null" line="64" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
		<overloads><_new public="1" get="inline" set="null" line="96">
	<f a="length:defaultValue">
		<x path="Int"/>
		<c path="haxe.ds.Vector.T"/>
		<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
	<haxe_doc>Creates a new Vector of length `length` filled with `defaultValue` elements.

		Can be faster than `new Vector(length)` for iteration on some targets for non-nullable elements.

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
</_new></overloads>
	</_new>
	<get public="1" get="inline" set="null" line="132" static="1">
		<f a="this:index">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
		<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="150" static="1">
		<f a="this:index:val">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta><m n=":op"><e>[]</e></m></meta>
		<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</set>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="167" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
		</f>
		<meta><m n=":has_untyped"/></meta>
	</get_length>
	<fill public="1" get="inline" set="null" line="185" static="1">
		<f a="this:value">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="haxe.ds.Vector.T"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Sets all `length` elements of `this` Vector to `value`.</haxe_doc>
	</fill>
	<blit public="1" params="T" set="method" line="194" static="1">
		<f a="src:srcPos:dest:destPos:len">
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
	</blit>
	<toArray public="1" get="inline" set="null" line="235" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="Array"><c path="haxe.ds.Vector.T"/></c>
		</f>
		<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
	</toArray>
	<toData public="1" get="inline" set="null" line="264" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
		</f>
		<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
	</toData>
	<fromData public="1" params="T" get="inline" set="null" line="274" static="1">
		<f a="data">
			<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
			<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
		</f>
		<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
	</fromData>
	<fromArrayCopy public="1" params="T" get="inline" set="null" line="287" static="1">
		<f a="array">
			<c path="Array"><c path="fromArrayCopy.T"/></c>
			<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
		</f>
		<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
	</fromArrayCopy>
	<copy public="1" params="T" get="inline" set="null" line="318" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="haxe.ds.Vector"><c path="copy.T"/></x>
		</f>
		<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
	</copy>
	<join public="1" params="T" get="inline" set="null" line="341" static="1">
		<f a="this:sep">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="String"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
	</join>
	<map public="1" params="S" get="inline" set="null" line="364" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<f a="">
				<c path="haxe.ds.Vector.T"/>
				<c path="map.S"/>
			</f>
			<x path="haxe.ds.Vector"><c path="map.S"/></x>
		</f>
		<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
	</map>
	<sort public="1" get="inline" set="null" line="391" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<f a=":">
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
	</sort>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
		<_new public="1" get="inline" set="null" line="64" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
			<overloads><_new public="1" get="inline" set="null" line="96">
	<f a="length:defaultValue">
		<x path="Int"/>
		<c path="haxe.ds.Vector.T"/>
		<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
	<haxe_doc>Creates a new Vector of length `length` filled with `defaultValue` elements.

		Can be faster than `new Vector(length)` for iteration on some targets for non-nullable elements.

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
</_new></overloads>
		</_new>
		<get public="1" get="inline" set="null" line="132" static="1">
			<f a="this:index">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
			<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="150" static="1">
			<f a="this:index:val">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta><m n=":op"><e>[]</e></m></meta>
			<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</set>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="167" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</get_length>
		<fill public="1" get="inline" set="null" line="185" static="1">
			<f a="this:value">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="haxe.ds.Vector.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets all `length` elements of `this` Vector to `value`.</haxe_doc>
		</fill>
		<blit public="1" params="T" set="method" line="194" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
		</blit>
		<toArray public="1" get="inline" set="null" line="235" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="Array"><c path="haxe.ds.Vector.T"/></c>
			</f>
			<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
		</toArray>
		<toData public="1" get="inline" set="null" line="264" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
		</toData>
		<fromData public="1" params="T" get="inline" set="null" line="274" static="1">
			<f a="data">
				<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
				<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
			</f>
			<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
		</fromData>
		<fromArrayCopy public="1" params="T" get="inline" set="null" line="287" static="1">
			<f a="array">
				<c path="Array"><c path="fromArrayCopy.T"/></c>
				<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
			</f>
			<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
		</fromArrayCopy>
		<copy public="1" params="T" get="inline" set="null" line="318" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="haxe.ds.Vector"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<join public="1" params="T" get="inline" set="null" line="341" static="1">
			<f a="this:sep">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<map public="1" params="S" get="inline" set="null" line="364" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<f a="">
					<c path="haxe.ds.Vector.T"/>
					<c path="map.S"/>
				</f>
				<x path="haxe.ds.Vector"><c path="map.S"/></x>
			</f>
			<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<sort public="1" get="inline" set="null" line="391" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<f a=":">
					<c path="haxe.ds.Vector.T"/>
					<c path="haxe.ds.Vector.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/WeakMap.hx">
		<extends path="flash.utils.Dictionary"/>
		<implements path="haxe.IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<get public="1" get="inline" set="null" line="31">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Null"><c path="haxe.ds.WeakMap.V"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="35">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="39">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="43">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="49">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="57">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="61">
			<f a=""><c path="haxe.ds.WeakMap">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="68">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="79">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.

	The keys are considered to be weak references on static targets.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._WeakMap.NativePropertyIterator" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap">
		<iterator public="1" get="inline" set="null" line="89" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._WeakMap.NativePropertyIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</index>
		<hasNext public="1" get="inline" set="null" line="97">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="106">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new set="method" line="95"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds._WeakMap.NativeValueIterator" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap">
		<iterator public="1" get="inline" set="null" line="118" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._WeakMap.NativeValueIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</index>
		<hasNext public="1" get="inline" set="null" line="126">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="135">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new set="method" line="124"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.exceptions.PosException" params="" file="/home/runner/work/haxe/haxe/std/haxe/exceptions/PosException.hx">
		<extends path="haxe.Exception"/>
		<posInfos final="1" public="1">
			<t path="haxe.PosInfos"/>
			<haxe_doc>Position where this exception was created.</haxe_doc>
		</posInfos>
		<toString public="1" set="method" line="24" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<new public="1" set="method" line="12"><f a="message:?previous:?pos">
	<c path="String"/>
	<c path="haxe.Exception"/>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception that carry position information of a place where it was created.</haxe_doc>
	</class>
	<class path="haxe.exceptions.ArgumentException" params="" file="/home/runner/work/haxe/haxe/std/haxe/exceptions/ArgumentException.hx">
		<extends path="haxe.exceptions.PosException"/>
		<argument final="1" public="1">
			<c path="String"/>
			<haxe_doc>An argument name.</haxe_doc>
		</argument>
		<new public="1" set="method" line="12"><f a="argument:?message:?previous:?pos">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.Exception"/>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception that is thrown when an invalid value provided for an argument of a function.</haxe_doc>
	</class>
	<class path="haxe.exceptions.NotImplementedException" params="" file="/home/runner/work/haxe/haxe/std/haxe/exceptions/NotImplementedException.hx">
		<extends path="haxe.exceptions.PosException"/>
		<new public="1" set="method" line="7">
			<f a="?message:?previous:?pos" v="&quot;Not implemented&quot;::">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "Not implemented" }</e></m></meta>
		</new>
		<haxe_doc>An exception that is thrown when requested function or operation does not have an implementation.</haxe_doc>
	</class>
	<abstract path="haxe.extern.AsVar" params="T" file="/home/runner/work/haxe/haxe/std/haxe/extern/AsVar.hx">
		<from><icast><c path="haxe.extern.AsVar.T"/></icast></from>
		<this><c path="haxe.extern.AsVar.T"/></this>
		<to><icast><c path="haxe.extern.AsVar.T"/></icast></to>
		<haxe_doc>If this type is used as an argument type, the compiler ensures that
	argument expressions are bound to a local variable.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
		<impl><class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1" final="1"/>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/home/runner/work/haxe/haxe/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1" final="1"/></impl>
	</abstract>
	<class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1" final="1"/>
	<typedef path="haxe.extern.Rest" params="T" file="/home/runner/work/haxe/haxe/std/haxe/extern/Rest.hx">
		<x path="haxe.Rest"><c path="haxe.extern.Rest.T"/></x>
		<haxe_doc><![CDATA[DEPRECATED: use haxe.Rest instead.
	
	A special type that represents "rest" function argument.
	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
	</typedef>
	<class path="haxe.format.JsonParser" params="" file="/home/runner/work/haxe/haxe/std/haxe/format/JsonParser.hx">
		<parse public="1" get="inline" set="null" line="44" static="1">
			<f a="str">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `str` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `str` is not valid JSON, an exception will be thrown.

		If `str` is null, the result is unspecified.]]></haxe_doc>
		</parse>
		<str><c path="String"/></str>
		<pos><x path="Int"/></pos>
		<doParse set="method" line="56"><f a=""><d/></f></doParse>
		<parseRec set="method" line="70"><f a=""><d/></f></parseRec>
		<parseString set="method" line="152"><f a=""><c path="String"/></f></parseString>
		<parseNumber get="inline" set="null" line="256"><f a="c">
	<x path="Int"/>
	<d/>
</f></parseNumber>
		<nextChar get="inline" set="null" line="312"><f a=""><x path="Int"/></f></nextChar>
		<invalidChar set="method" line="316"><f a=""><x path="Void"/></f></invalidChar>
		<invalidNumber set="method" line="321"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<new set="method" line="51"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON parser in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-parsing.html</haxe_doc>
	</class>
	<class path="haxe.format.JsonPrinter" params="" file="/home/runner/work/haxe/haxe/std/haxe/format/JsonPrinter.hx">
		<print public="1" set="method" line="44" static="1">
			<f a="o:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `o`'s value and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.</haxe_doc>
		</print>
		<buf><c path="flash.utils.ByteArray"/></buf>
		<replacer><f a="key:value">
	<d/>
	<d/>
	<d/>
</f></replacer>
		<indent><c path="String"/></indent>
		<pretty><x path="Bool"/></pretty>
		<nind><x path="Int"/></nind>
		<ipad get="inline" set="null" line="71"><f a=""><x path="Void"/></f></ipad>
		<newl get="inline" set="null" line="76"><f a=""><x path="Void"/></f></newl>
		<write set="method" line="81"><f a="k:v">
	<d/>
	<d/>
	<x path="Void"/>
</f></write>
		<addChar get="inline" set="null" line="140"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addChar>
		<add get="inline" set="null" line="148"><f a="v">
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<classString set="method" line="157"><f a="v">
	<d/>
	<x path="Void"/>
</f></classString>
		<objString get="inline" set="null" line="161"><f a="v">
	<d/>
	<x path="Void"/>
</f></objString>
		<fieldsString set="method" line="165"><f a="v:fields">
	<d/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></fieldsString>
		<quote set="method" line="195"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></quote>
		<new set="method" line="56"><f a="replacer:space">
	<f a="key:value">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON printer in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
	</class>
	<typedef path="haxe.http._HttpBase.StringKeyValue" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpBase.hx" private="1" module="haxe.http.HttpBase"><a>
	<value><c path="String"/></value>
	<name><c path="String"/></name>
</a></typedef>
	<abstract path="haxe.http.HttpMethod" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpMethod.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>HTTP defines methods (sometimes referred to as _verbs_) to indicate the desired action to be
	performed on the identified resource. What this resource represents, whether pre-existing data
	or data that is generated dynamically, depends on the implementation of the server.

	Often, the resource corresponds to a file or the output of an executable residing on the server.
	The HTTP/1.0 specification defined the `GET`, `POST` and `HEAD` methods and the HTTP/1.1
	specification added 5 new methods: `OPTIONS`, `PUT`, `DELETE`, `TRACE` and `CONNECT`.

	By being specified in these documents their semantics are well known and can be depended upon.
	Any client can use any method and the server can be configured to support any combination of methods.
	If a method is unknown to an intermediate it will be treated as an unsafe and non-idempotent method.
	There is no limit to the number of methods that can be defined and this allows for future methods to
	be specified without breaking existing infrastructure.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.http._HttpMethod.HttpMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpMethod.hx" private="1" module="haxe.http.HttpMethod" extern="1" final="1">
	<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="28" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "POST"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `POST` method requests that the server accept the entity enclosed in the request as
		a new subordinate of the web resource identified by the URI.
		
		The data `POST`ed might be, for example, an annotation for existing resources;
		a message for a bulletin board, newsgroup, mailing list, or comment thread;
		a block of data that is the result of submitting a web form to a data-handling process;
		or an item to add to a database.</haxe_doc>
	</Post>
	<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="40" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "GET"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `GET` method requests a representation of the specified resource.

		Requests using `GET` should only retrieve data and should have no other effect.
		(This is also true of some other HTTP methods.) The W3C has published guidance
		principles on this distinction, saying, _"Web application design should be informed
		by the above principles, but also by the relevant limitations."_

		See safe methods below.</haxe_doc>
	</Get>
	<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="47" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "HEAD"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `HEAD` method asks for a response identical to that of a `GET` request,
		but without the response body. This is useful for retrieving meta-information
		written in response headers, without having to transport the entire content.</haxe_doc>
	</Head>
	<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="54" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "PUT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `PUT` method requests that the enclosed entity be stored under the supplied URI.
		If the URI refers to an already existing resource, it is modified; if the URI does
		not point to an existing resource, then the server can create the resource with that URI.</haxe_doc>
	</Put>
	<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="59" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "DELETE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `DELETE` method deletes the specified resource.</haxe_doc>
	</Delete>
	<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="65" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "TRACE"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `TRACE` method echoes the received request so that a client can see
		what (if any) changes or additions have been made by intermediate servers.</haxe_doc>
	</Trace>
	<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="72" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "OPTIONS"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `OPTIONS` method returns the HTTP methods that the server supports for the
		specified URL. This can be used to check the functionality of a web server by
		requesting `*` instead of a specific resource.</haxe_doc>
	</Options>
	<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="78" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "CONNECT"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `CONNECT` method converts the request connection to a transparent TCP/IP tunnel,
		usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.</haxe_doc>
	</Connect>
	<Patch public="1" get="inline" set="null" expr="cast &quot;PATCH&quot;" line="83" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "PATCH"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>The `PATCH` method applies partial modifications to a resource.</haxe_doc>
	</Patch>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.http._HttpMethod.HttpMethod_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpMethod.hx" private="1" module="haxe.http.HttpMethod" extern="1" final="1">
		<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="28" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "POST"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `POST` method requests that the server accept the entity enclosed in the request as
		a new subordinate of the web resource identified by the URI.
		
		The data `POST`ed might be, for example, an annotation for existing resources;
		a message for a bulletin board, newsgroup, mailing list, or comment thread;
		a block of data that is the result of submitting a web form to a data-handling process;
		or an item to add to a database.</haxe_doc>
		</Post>
		<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="40" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "GET"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `GET` method requests a representation of the specified resource.

		Requests using `GET` should only retrieve data and should have no other effect.
		(This is also true of some other HTTP methods.) The W3C has published guidance
		principles on this distinction, saying, _"Web application design should be informed
		by the above principles, but also by the relevant limitations."_

		See safe methods below.</haxe_doc>
		</Get>
		<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="47" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "HEAD"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `HEAD` method asks for a response identical to that of a `GET` request,
		but without the response body. This is useful for retrieving meta-information
		written in response headers, without having to transport the entire content.</haxe_doc>
		</Head>
		<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="54" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "PUT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `PUT` method requests that the enclosed entity be stored under the supplied URI.
		If the URI refers to an already existing resource, it is modified; if the URI does
		not point to an existing resource, then the server can create the resource with that URI.</haxe_doc>
		</Put>
		<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="59" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "DELETE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `DELETE` method deletes the specified resource.</haxe_doc>
		</Delete>
		<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="65" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "TRACE"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `TRACE` method echoes the received request so that a client can see
		what (if any) changes or additions have been made by intermediate servers.</haxe_doc>
		</Trace>
		<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="72" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "OPTIONS"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `OPTIONS` method returns the HTTP methods that the server supports for the
		specified URL. This can be used to check the functionality of a web server by
		requesting `*` instead of a specific resource.</haxe_doc>
		</Options>
		<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="78" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "CONNECT"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `CONNECT` method converts the request connection to a transparent TCP/IP tunnel,
		usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.</haxe_doc>
		</Connect>
		<Patch public="1" get="inline" set="null" expr="cast &quot;PATCH&quot;" line="83" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "PATCH"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>The `PATCH` method applies partial modifications to a resource.</haxe_doc>
		</Patch>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.http.HttpStatus" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpStatus.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>HTTP Request Status</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.http._HttpStatus.HttpStatus_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpStatus.hx" private="1" module="haxe.http.HttpStatus" extern="1" final="1">
	<Continue public="1" get="inline" set="null" expr="cast 100" line="7" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 100</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Continue>
	<SwitchingProtocols public="1" get="inline" set="null" expr="cast 101" line="8" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 101</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SwitchingProtocols>
	<Processing public="1" get="inline" set="null" expr="cast 102" line="9" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 102</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Processing>
	<OK public="1" get="inline" set="null" expr="cast 200" line="10" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 200</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</OK>
	<Created public="1" get="inline" set="null" expr="cast 201" line="11" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 201</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Created>
	<Accepted public="1" get="inline" set="null" expr="cast 202" line="12" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 202</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Accepted>
	<NonAuthoritativeInformation public="1" get="inline" set="null" expr="cast 203" line="13" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 203</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NonAuthoritativeInformation>
	<NoContent public="1" get="inline" set="null" expr="cast 204" line="14" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 204</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NoContent>
	<ResetContent public="1" get="inline" set="null" expr="cast 205" line="15" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 205</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ResetContent>
	<PartialContent public="1" get="inline" set="null" expr="cast 206" line="16" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 206</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PartialContent>
	<MultiStatus public="1" get="inline" set="null" expr="cast 207" line="17" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 207</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MultiStatus>
	<AlreadyReported public="1" get="inline" set="null" expr="cast 208" line="18" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 208</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AlreadyReported>
	<IMUsed public="1" get="inline" set="null" expr="cast 226" line="19" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 226</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IMUsed>
	<MultipleChoices public="1" get="inline" set="null" expr="cast 300" line="20" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 300</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MultipleChoices>
	<MovedPermanently public="1" get="inline" set="null" expr="cast 301" line="21" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 301</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MovedPermanently>
	<Found public="1" get="inline" set="null" expr="cast 302" line="22" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 302</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Found>
	<SeeOther public="1" get="inline" set="null" expr="cast 303" line="23" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 303</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SeeOther>
	<NotModified public="1" get="inline" set="null" expr="cast 304" line="24" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 304</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotModified>
	<UseProxy public="1" get="inline" set="null" expr="cast 305" line="25" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 305</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UseProxy>
	<SwitchProxy public="1" get="inline" set="null" expr="cast 306" line="26" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 306</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</SwitchProxy>
	<TemporaryRedirect public="1" get="inline" set="null" expr="cast 307" line="27" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 307</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TemporaryRedirect>
	<PermanentRedirect public="1" get="inline" set="null" expr="cast 308" line="28" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 308</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PermanentRedirect>
	<BadRequest public="1" get="inline" set="null" expr="cast 400" line="29" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 400</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BadRequest>
	<Unauthorized public="1" get="inline" set="null" expr="cast 401" line="30" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 401</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Unauthorized>
	<PaymentRequired public="1" get="inline" set="null" expr="cast 402" line="31" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 402</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PaymentRequired>
	<Forbidden public="1" get="inline" set="null" expr="cast 403" line="32" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 403</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Forbidden>
	<NotFound public="1" get="inline" set="null" expr="cast 404" line="33" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 404</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotFound>
	<MethodNotAllowed public="1" get="inline" set="null" expr="cast 405" line="34" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 405</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MethodNotAllowed>
	<NotAcceptable public="1" get="inline" set="null" expr="cast 406" line="35" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 406</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotAcceptable>
	<ProxyAuthenticationRequired public="1" get="inline" set="null" expr="cast 407" line="36" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 407</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ProxyAuthenticationRequired>
	<RequestTimeout public="1" get="inline" set="null" expr="cast 408" line="37" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 408</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RequestTimeout>
	<Conflict public="1" get="inline" set="null" expr="cast 409" line="38" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 409</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Conflict>
	<Gone public="1" get="inline" set="null" expr="cast 410" line="39" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 410</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Gone>
	<LengthRequired public="1" get="inline" set="null" expr="cast 411" line="40" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 411</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LengthRequired>
	<PreconditionFailed public="1" get="inline" set="null" expr="cast 412" line="41" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 412</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PreconditionFailed>
	<PayloadTooLarge public="1" get="inline" set="null" expr="cast 413" line="42" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 413</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PayloadTooLarge>
	<URITooLong public="1" get="inline" set="null" expr="cast 414" line="43" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 414</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</URITooLong>
	<UnsupportedMediaType public="1" get="inline" set="null" expr="cast 415" line="44" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 415</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UnsupportedMediaType>
	<RangeNotSatisfiable public="1" get="inline" set="null" expr="cast 416" line="45" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 416</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RangeNotSatisfiable>
	<ExpectationFailed public="1" get="inline" set="null" expr="cast 417" line="46" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 417</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ExpectationFailed>
	<ImATeapot public="1" get="inline" set="null" expr="cast 418" line="47" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 418</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImATeapot>
	<MisdirectedRequest public="1" get="inline" set="null" expr="cast 421" line="48" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 421</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MisdirectedRequest>
	<UnprocessableEntity public="1" get="inline" set="null" expr="cast 422" line="49" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 422</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UnprocessableEntity>
	<Locked public="1" get="inline" set="null" expr="cast 423" line="50" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 423</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Locked>
	<FailedDependency public="1" get="inline" set="null" expr="cast 424" line="51" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 424</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</FailedDependency>
	<UpgradeRequired public="1" get="inline" set="null" expr="cast 426" line="52" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 426</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UpgradeRequired>
	<PreconditionRequired public="1" get="inline" set="null" expr="cast 428" line="53" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 428</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PreconditionRequired>
	<TooManyRequests public="1" get="inline" set="null" expr="cast 429" line="54" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 429</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TooManyRequests>
	<RequestHeaderFieldsTooLarge public="1" get="inline" set="null" expr="cast 431" line="55" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 431</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</RequestHeaderFieldsTooLarge>
	<UnavailableForLegalReasons public="1" get="inline" set="null" expr="cast 451" line="56" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 451</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</UnavailableForLegalReasons>
	<InternalServerError public="1" get="inline" set="null" expr="cast 500" line="57" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 500</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</InternalServerError>
	<NotImplemented public="1" get="inline" set="null" expr="cast 501" line="58" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 501</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotImplemented>
	<BadGateway public="1" get="inline" set="null" expr="cast 502" line="59" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 502</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BadGateway>
	<ServiceUnavailable public="1" get="inline" set="null" expr="cast 503" line="60" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 503</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ServiceUnavailable>
	<GatewayTimeout public="1" get="inline" set="null" expr="cast 504" line="61" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 504</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</GatewayTimeout>
	<HTTPVersionNotSupported public="1" get="inline" set="null" expr="cast 505" line="62" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 505</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HTTPVersionNotSupported>
	<VariantAlsoNegotiates public="1" get="inline" set="null" expr="cast 506" line="63" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 506</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VariantAlsoNegotiates>
	<InsufficientStorage public="1" get="inline" set="null" expr="cast 507" line="64" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 507</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</InsufficientStorage>
	<LoopDetected public="1" get="inline" set="null" expr="cast 508" line="65" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 508</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</LoopDetected>
	<NotExtended public="1" get="inline" set="null" expr="cast 510" line="66" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 510</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NotExtended>
	<NetworkAuthenticationRequired public="1" get="inline" set="null" expr="cast 511" line="67" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 511</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</NetworkAuthenticationRequired>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.http._HttpStatus.HttpStatus_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/http/HttpStatus.hx" private="1" module="haxe.http.HttpStatus" extern="1" final="1">
		<Continue public="1" get="inline" set="null" expr="cast 100" line="7" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 100</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Continue>
		<SwitchingProtocols public="1" get="inline" set="null" expr="cast 101" line="8" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 101</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SwitchingProtocols>
		<Processing public="1" get="inline" set="null" expr="cast 102" line="9" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 102</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Processing>
		<OK public="1" get="inline" set="null" expr="cast 200" line="10" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 200</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</OK>
		<Created public="1" get="inline" set="null" expr="cast 201" line="11" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 201</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Created>
		<Accepted public="1" get="inline" set="null" expr="cast 202" line="12" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 202</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Accepted>
		<NonAuthoritativeInformation public="1" get="inline" set="null" expr="cast 203" line="13" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 203</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NonAuthoritativeInformation>
		<NoContent public="1" get="inline" set="null" expr="cast 204" line="14" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 204</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NoContent>
		<ResetContent public="1" get="inline" set="null" expr="cast 205" line="15" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 205</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ResetContent>
		<PartialContent public="1" get="inline" set="null" expr="cast 206" line="16" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 206</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PartialContent>
		<MultiStatus public="1" get="inline" set="null" expr="cast 207" line="17" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 207</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MultiStatus>
		<AlreadyReported public="1" get="inline" set="null" expr="cast 208" line="18" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 208</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AlreadyReported>
		<IMUsed public="1" get="inline" set="null" expr="cast 226" line="19" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 226</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IMUsed>
		<MultipleChoices public="1" get="inline" set="null" expr="cast 300" line="20" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 300</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MultipleChoices>
		<MovedPermanently public="1" get="inline" set="null" expr="cast 301" line="21" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 301</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MovedPermanently>
		<Found public="1" get="inline" set="null" expr="cast 302" line="22" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 302</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Found>
		<SeeOther public="1" get="inline" set="null" expr="cast 303" line="23" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 303</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SeeOther>
		<NotModified public="1" get="inline" set="null" expr="cast 304" line="24" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 304</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotModified>
		<UseProxy public="1" get="inline" set="null" expr="cast 305" line="25" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 305</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UseProxy>
		<SwitchProxy public="1" get="inline" set="null" expr="cast 306" line="26" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 306</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</SwitchProxy>
		<TemporaryRedirect public="1" get="inline" set="null" expr="cast 307" line="27" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 307</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TemporaryRedirect>
		<PermanentRedirect public="1" get="inline" set="null" expr="cast 308" line="28" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 308</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PermanentRedirect>
		<BadRequest public="1" get="inline" set="null" expr="cast 400" line="29" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 400</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BadRequest>
		<Unauthorized public="1" get="inline" set="null" expr="cast 401" line="30" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 401</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Unauthorized>
		<PaymentRequired public="1" get="inline" set="null" expr="cast 402" line="31" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 402</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PaymentRequired>
		<Forbidden public="1" get="inline" set="null" expr="cast 403" line="32" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 403</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Forbidden>
		<NotFound public="1" get="inline" set="null" expr="cast 404" line="33" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 404</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotFound>
		<MethodNotAllowed public="1" get="inline" set="null" expr="cast 405" line="34" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 405</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MethodNotAllowed>
		<NotAcceptable public="1" get="inline" set="null" expr="cast 406" line="35" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 406</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotAcceptable>
		<ProxyAuthenticationRequired public="1" get="inline" set="null" expr="cast 407" line="36" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 407</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ProxyAuthenticationRequired>
		<RequestTimeout public="1" get="inline" set="null" expr="cast 408" line="37" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 408</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RequestTimeout>
		<Conflict public="1" get="inline" set="null" expr="cast 409" line="38" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 409</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Conflict>
		<Gone public="1" get="inline" set="null" expr="cast 410" line="39" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 410</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Gone>
		<LengthRequired public="1" get="inline" set="null" expr="cast 411" line="40" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 411</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LengthRequired>
		<PreconditionFailed public="1" get="inline" set="null" expr="cast 412" line="41" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 412</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PreconditionFailed>
		<PayloadTooLarge public="1" get="inline" set="null" expr="cast 413" line="42" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 413</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PayloadTooLarge>
		<URITooLong public="1" get="inline" set="null" expr="cast 414" line="43" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 414</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</URITooLong>
		<UnsupportedMediaType public="1" get="inline" set="null" expr="cast 415" line="44" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 415</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UnsupportedMediaType>
		<RangeNotSatisfiable public="1" get="inline" set="null" expr="cast 416" line="45" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 416</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RangeNotSatisfiable>
		<ExpectationFailed public="1" get="inline" set="null" expr="cast 417" line="46" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 417</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ExpectationFailed>
		<ImATeapot public="1" get="inline" set="null" expr="cast 418" line="47" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 418</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImATeapot>
		<MisdirectedRequest public="1" get="inline" set="null" expr="cast 421" line="48" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 421</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MisdirectedRequest>
		<UnprocessableEntity public="1" get="inline" set="null" expr="cast 422" line="49" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 422</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UnprocessableEntity>
		<Locked public="1" get="inline" set="null" expr="cast 423" line="50" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 423</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Locked>
		<FailedDependency public="1" get="inline" set="null" expr="cast 424" line="51" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 424</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</FailedDependency>
		<UpgradeRequired public="1" get="inline" set="null" expr="cast 426" line="52" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 426</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UpgradeRequired>
		<PreconditionRequired public="1" get="inline" set="null" expr="cast 428" line="53" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 428</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PreconditionRequired>
		<TooManyRequests public="1" get="inline" set="null" expr="cast 429" line="54" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 429</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TooManyRequests>
		<RequestHeaderFieldsTooLarge public="1" get="inline" set="null" expr="cast 431" line="55" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 431</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</RequestHeaderFieldsTooLarge>
		<UnavailableForLegalReasons public="1" get="inline" set="null" expr="cast 451" line="56" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 451</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</UnavailableForLegalReasons>
		<InternalServerError public="1" get="inline" set="null" expr="cast 500" line="57" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 500</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</InternalServerError>
		<NotImplemented public="1" get="inline" set="null" expr="cast 501" line="58" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 501</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotImplemented>
		<BadGateway public="1" get="inline" set="null" expr="cast 502" line="59" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 502</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BadGateway>
		<ServiceUnavailable public="1" get="inline" set="null" expr="cast 503" line="60" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 503</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ServiceUnavailable>
		<GatewayTimeout public="1" get="inline" set="null" expr="cast 504" line="61" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 504</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</GatewayTimeout>
		<HTTPVersionNotSupported public="1" get="inline" set="null" expr="cast 505" line="62" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 505</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HTTPVersionNotSupported>
		<VariantAlsoNegotiates public="1" get="inline" set="null" expr="cast 506" line="63" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 506</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VariantAlsoNegotiates>
		<InsufficientStorage public="1" get="inline" set="null" expr="cast 507" line="64" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 507</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</InsufficientStorage>
		<LoopDetected public="1" get="inline" set="null" expr="cast 508" line="65" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 508</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</LoopDetected>
		<NotExtended public="1" get="inline" set="null" expr="cast 510" line="66" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 510</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NotExtended>
		<NetworkAuthenticationRequired public="1" get="inline" set="null" expr="cast 511" line="67" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 511</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</NetworkAuthenticationRequired>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="haxe.io.ArrayBufferViewImpl"/></typedef>
	<class path="haxe.io.ArrayBufferViewImpl" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView">
		<bytes public="1"><c path="haxe.io.Bytes"/></bytes>
		<byteOffset public="1"><x path="Int"/></byteOffset>
		<byteLength public="1"><x path="Int"/></byteLength>
		<sub public="1" set="method" line="38"><f a="begin:?length">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></sub>
		<subarray public="1" set="method" line="46"><f a="?begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></subarray>
		<new public="1" set="method" line="32"><f a="bytes:pos:length">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1">
	<buffer public="1" get="accessor" set="null" static="1"><c path="haxe.io.Bytes"/></buffer>
	<byteOffset public="1" get="accessor" set="null" static="1"><x path="Int"/></byteOffset>
	<byteLength public="1" get="accessor" set="null" static="1"><x path="Int"/></byteLength>
	<_new public="1" get="inline" set="null" line="60" static="1">
		<f a="size">
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_byteOffset get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
</f></get_byteOffset>
	<get_byteLength get="inline" set="null" line="68" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
</f></get_byteLength>
	<get_buffer get="inline" set="null" line="71" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<c path="haxe.io.Bytes"/>
</f></get_buffer>
	<sub public="1" get="inline" set="null" line="73" static="1"><f a="this:begin:?length">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="77" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="81" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<t path="haxe.io.ArrayBufferViewData"/>
</f></getData>
	<fromData public="1" get="inline" set="null" line="85" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
	<fromBytes public="1" set="method" line="89" static="1">
		<f a="bytes:?pos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView" final="1">
		<buffer public="1" get="accessor" set="null" static="1"><c path="haxe.io.Bytes"/></buffer>
		<byteOffset public="1" get="accessor" set="null" static="1"><x path="Int"/></byteOffset>
		<byteLength public="1" get="accessor" set="null" static="1"><x path="Int"/></byteLength>
		<_new public="1" get="inline" set="null" line="60" static="1">
			<f a="size">
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_byteOffset get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
</f></get_byteOffset>
		<get_byteLength get="inline" set="null" line="68" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
</f></get_byteLength>
		<get_buffer get="inline" set="null" line="71" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<c path="haxe.io.Bytes"/>
</f></get_buffer>
		<sub public="1" get="inline" set="null" line="73" static="1"><f a="this:begin:?length">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="77" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="81" static="1"><f a="this">
	<t path="haxe.io.ArrayBufferViewData"/>
	<t path="haxe.io.ArrayBufferViewData"/>
</f></getData>
		<fromData public="1" get="inline" set="null" line="85" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
		<fromBytes public="1" set="method" line="89" static="1">
			<f a="bytes:?pos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<class path="haxe.io.Input" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<readByte public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="64">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="106">
			<f a="?bufsize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="132">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="145">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="163">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="176">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="199">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="208">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="217">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="229">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="243">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="254">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="269">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="281">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="304">
			<f a="len:?encoding">
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<getDoubleSig set="method" line="325"><f a="bytes">
	<c path="Array"><x path="Int"/></c>
	<x path="Float"/>
</f></getDoubleSig>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
	</class>
	<class path="haxe.io.BufferInput" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/BufferInput.hx">
		<extends path="haxe.io.Input"/>
		<i public="1"><c path="haxe.io.Input"/></i>
		<buf public="1"><c path="haxe.io.Bytes"/></buf>
		<available public="1"><x path="Int"/></available>
		<pos public="1"><x path="Int"/></pos>
		<refill public="1" set="method" line="38"><f a=""><x path="Void"/></f></refill>
		<readByte public="1" set="method" line="46" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="55" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="31">
			<f a="i:buf:?pos:?available" v="::0:0">
				<c path="haxe.io.Input"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ available : 0, pos : 0 }</e></m></meta>
		</new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/BytesBuffer.hx">
		<b><c path="flash.utils.ByteArray"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="64"><f a=""><x path="Int"/></f></get_length>
		<addByte public="1" get="inline" set="null" line="76"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="94"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addString public="1" get="inline" set="null" line="118"><f a="v:?encoding">
	<c path="String"/>
	<e path="haxe.io.Encoding"/>
	<x path="Void"/>
</f></addString>
		<addInt32 public="1" get="inline" set="null" line="133"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addInt64 public="1" get="inline" set="null" line="144"><f a="v">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addInt64>
		<addFloat public="1" get="inline" set="null" line="149"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" get="inline" set="null" line="157"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" get="inline" set="null" line="165"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="202">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer should no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/BytesData.hx"><c path="flash.utils.ByteArray"/></typedef>
	<class path="haxe.io.BytesInput" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<position public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_position get="inline" set="null" line="67"><f a=""><x path="Int"/></f></get_position>
		<get_length get="inline" set="null" line="75"><f a=""><x path="Int"/></f></get_length>
		<set_position set="method" line="83"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<readByte public="1" set="method" line="96" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="119" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<set_bigEndian set="method" line="176" override="1">
			<f a="e">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</set_bigEndian>
		<readFloat public="1" set="method" line="183" override="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</readFloat>
		<readDouble public="1" set="method" line="188" override="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</readDouble>
		<readInt8 public="1" set="method" line="193" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</readInt8>
		<readInt16 public="1" set="method" line="198" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</readInt16>
		<readUInt16 public="1" set="method" line="203" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</readUInt16>
		<readInt32 public="1" set="method" line="208" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</readInt32>
		<readString public="1" set="method" line="213" override="1">
			<f a="len:?encoding">
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</readString>
		<new public="1" set="method" line="39"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Output" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="103">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="120">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="133">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="142">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="156">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="167">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="178">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="195">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="206">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="225">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<prepare public="1" set="method" line="246">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least `nbytes` bytes.

		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="254">
			<f a="i:?bufsize">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read all available data from `i` and write it.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read and written. Its default value is 4096.</haxe_doc>
		</writeInput>
		<writeString public="1" set="method" line="278">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="flash.utils.ByteArray"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="47"><f a=""><x path="Int"/></f></get_length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<set_bigEndian set="method" line="74" override="1">
			<f a="e">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</set_bigEndian>
		<writeFloat public="1" set="method" line="81" override="1">
			<f a="f">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</writeFloat>
		<writeDouble public="1" set="method" line="86" override="1">
			<f a="f">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</writeDouble>
		<writeInt8 public="1" set="method" line="91" override="1">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</writeInt8>
		<writeInt16 public="1" set="method" line="98" override="1">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="105" override="1">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</writeUInt16>
		<writeInt32 public="1" set="method" line="112" override="1">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</writeInt32>
		<prepare public="1" set="method" line="117" override="1">
			<f a="size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</prepare>
		<writeString public="1" set="method" line="123" override="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</writeString>
		<getBytes public="1" set="method" line="137">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the `Bytes` of this output.

		This function should not be called more than once on a given
		`BytesOutput` instance.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.io.Eof" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.io.Eof.*"</e></m></meta>
		</toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
	</class>
	<enum path="haxe.io.Error" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="haxe.io.FPHelper" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/FPHelper.hx">
		<i64tmp expr="Int64.ofInt(0)" line="35" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":value"><e>Int64.ofInt(0)</e></m></meta>
		</i64tmp>
		<LN2 get="inline" set="null" expr="0.6931471805599453" line="37" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.6931471805599453</e></m></meta>
		</LN2>
		<_i32ToFloat get="inline" set="null" line="39" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></_i32ToFloat>
		<_i64ToDouble get="inline" set="null" line="48" static="1"><f a="lo:hi">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></_i64ToDouble>
		<_floatToI32 get="inline" set="null" line="58" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></_floatToI32>
		<_doubleToI64 get="inline" set="null" line="76" static="1"><f a="v">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></_doubleToI64>
		<helper expr="{
	var b = new flash.utils.ByteArray();
	b.endian = flash.utils.Endian.LITTLE_ENDIAN;
	b;
}" line="121" static="1">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":value"><e>{
	var b = new flash.utils.ByteArray();
	b.endian = flash.utils.Endian.LITTLE_ENDIAN;
	b;
}</e></m></meta>
		</helper>
		<i32ToFloat public="1" set="method" line="133" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></i32ToFloat>
		<floatToI32 public="1" set="method" line="177" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></floatToI32>
		<i64ToDouble public="1" set="method" line="214" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></i64ToDouble>
		<doubleToI64 public="1" set="method" line="268" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns an Int64 representing the bytes representation of the double precision IEEE float value.
		WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.
		We still ensure that this is safe to use in a multithread environment</haxe_doc>
		</doubleToI64>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
	</class>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float32Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float32Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<t path="haxe.io.Float32ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float32Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float32Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Float32ArrayData"/>
	<t path="haxe.io.Float32ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.Float64ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float64Array.hx" module="haxe.io.Float64Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float64Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float64Array.hx">
		<this><t path="haxe.io.Float64ArrayData"/></this>
		<impl><class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>8</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float64Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float64Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<t path="haxe.io.Float64ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float64Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Float64Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Float64ArrayData"/>
	<t path="haxe.io.Float64ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.Int32ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Int32Array.hx" module="haxe.io.Int32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Int32Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Int32Array.hx">
		<this><t path="haxe.io.Int32ArrayData"/></this>
		<impl><class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<t path="haxe.io.Int32ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.Int32Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.Int32ArrayData"/>
	<t path="haxe.io.Int32ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<abstract path="haxe.io.Mime" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Mime.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>HTML MimeType Enum
	@see http://www.sitepoint.com/web-foundations/mime-types-complete-list/</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.io._Mime.Mime_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Mime.hx" private="1" module="haxe.io.Mime" extern="1" final="1">
	<XWorldX3dmf public="1" get="inline" set="null" expr="cast &quot;x-world/x-3dmf&quot;" line="8" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-world/x-3dmf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XWorldX3dmf>
	<ApplicationOctetStream public="1" get="inline" set="null" expr="cast &quot;application/octet-stream&quot;" line="9" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/octet-stream"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationOctetStream>
	<ApplicationXAuthorwareBin public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-bin&quot;" line="10" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-bin"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXAuthorwareBin>
	<ApplicationXAuthorwareMap public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-map&quot;" line="11" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-map"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXAuthorwareMap>
	<ApplicationXAuthorwareSeg public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-seg&quot;" line="12" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-seg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXAuthorwareSeg>
	<TextVndAbc public="1" get="inline" set="null" expr="cast &quot;text/vnd.abc&quot;" line="13" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.abc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextVndAbc>
	<TextHtml public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="14" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/html"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextHtml>
	<VideoAnimaflex public="1" get="inline" set="null" expr="cast &quot;video/animaflex&quot;" line="15" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/animaflex"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoAnimaflex>
	<ApplicationPostscript public="1" get="inline" set="null" expr="cast &quot;application/postscript&quot;" line="16" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/postscript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPostscript>
	<AudioAiff public="1" get="inline" set="null" expr="cast &quot;audio/aiff&quot;" line="17" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/aiff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioAiff>
	<AudioXAiff public="1" get="inline" set="null" expr="cast &quot;audio/x-aiff&quot;" line="18" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-aiff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXAiff>
	<ApplicationXAim public="1" get="inline" set="null" expr="cast &quot;application/x-aim&quot;" line="19" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-aim"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXAim>
	<TextXAudiosoftIntra public="1" get="inline" set="null" expr="cast &quot;text/x-audiosoft-intra&quot;" line="20" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-audiosoft-intra"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXAudiosoftIntra>
	<ApplicationXNaviAnimation public="1" get="inline" set="null" expr="cast &quot;application/x-navi-animation&quot;" line="21" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navi-animation"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNaviAnimation>
	<ApplicationXNokia9000CommunicatorAddOnSoftware public="1" get="inline" set="null" expr="cast &quot;application/x-nokia-9000-communicator-add-on-software&quot;" line="22" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-nokia-9000-communicator-add-on-software"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNokia9000CommunicatorAddOnSoftware>
	<ApplicationMime public="1" get="inline" set="null" expr="cast &quot;application/mime&quot;" line="23" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMime>
	<ApplicationArj public="1" get="inline" set="null" expr="cast &quot;application/arj&quot;" line="24" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/arj"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationArj>
	<ImageXJg public="1" get="inline" set="null" expr="cast &quot;image/x-jg&quot;" line="25" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-jg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXJg>
	<VideoXMsAsf public="1" get="inline" set="null" expr="cast &quot;video/x-ms-asf&quot;" line="26" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-ms-asf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXMsAsf>
	<TextXAsm public="1" get="inline" set="null" expr="cast &quot;text/x-asm&quot;" line="27" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-asm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXAsm>
	<TextAsp public="1" get="inline" set="null" expr="cast &quot;text/asp&quot;" line="28" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/asp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextAsp>
	<ApplicationXMplayer2 public="1" get="inline" set="null" expr="cast &quot;application/x-mplayer2&quot;" line="29" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mplayer2"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMplayer2>
	<AudioBasic public="1" get="inline" set="null" expr="cast &quot;audio/basic&quot;" line="30" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/basic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioBasic>
	<ApplicationXTroffMsvideo public="1" get="inline" set="null" expr="cast &quot;application/x-troff-msvideo&quot;" line="31" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-msvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroffMsvideo>
	<VideoAvi public="1" get="inline" set="null" expr="cast &quot;video/avi&quot;" line="32" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/avi"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoAvi>
	<VideoMsvideo public="1" get="inline" set="null" expr="cast &quot;video/msvideo&quot;" line="33" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/msvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoMsvideo>
	<VideoXMsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-msvideo&quot;" line="34" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-msvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXMsvideo>
	<VideoAvsVideo public="1" get="inline" set="null" expr="cast &quot;video/avs-video&quot;" line="35" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/avs-video"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoAvsVideo>
	<ApplicationXBcpio public="1" get="inline" set="null" expr="cast &quot;application/x-bcpio&quot;" line="36" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bcpio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBcpio>
	<ApplicationMacBinary public="1" get="inline" set="null" expr="cast &quot;application/mac-binary&quot;" line="37" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mac-binary"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMacBinary>
	<ApplicationMacbinary public="1" get="inline" set="null" expr="cast &quot;application/macbinary&quot;" line="38" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/macbinary"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMacbinary>
	<ApplicationXBinary public="1" get="inline" set="null" expr="cast &quot;application/x-binary&quot;" line="39" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-binary"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBinary>
	<ApplicationXMacbinary public="1" get="inline" set="null" expr="cast &quot;application/x-macbinary&quot;" line="40" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-macbinary"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMacbinary>
	<ImageBmp public="1" get="inline" set="null" expr="cast &quot;image/bmp&quot;" line="41" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/bmp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageBmp>
	<ImageXWindowsBmp public="1" get="inline" set="null" expr="cast &quot;image/x-windows-bmp&quot;" line="42" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-windows-bmp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXWindowsBmp>
	<ApplicationBook public="1" get="inline" set="null" expr="cast &quot;application/book&quot;" line="43" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/book"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationBook>
	<ApplicationXBzip2 public="1" get="inline" set="null" expr="cast &quot;application/x-bzip2&quot;" line="44" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bzip2"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBzip2>
	<ApplicationXBsh public="1" get="inline" set="null" expr="cast &quot;application/x-bsh&quot;" line="45" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bsh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBsh>
	<ApplicationXBzip public="1" get="inline" set="null" expr="cast &quot;application/x-bzip&quot;" line="46" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bzip"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBzip>
	<TextPlain public="1" get="inline" set="null" expr="cast &quot;text/plain&quot;" line="47" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/plain"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextPlain>
	<TextXC public="1" get="inline" set="null" expr="cast &quot;text/x-c&quot;" line="48" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-c"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXC>
	<ApplicationVndMsPkiSeccat public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.seccat&quot;" line="49" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.seccat"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsPkiSeccat>
	<ApplicationClariscad public="1" get="inline" set="null" expr="cast &quot;application/clariscad&quot;" line="50" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/clariscad"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationClariscad>
	<ApplicationXCocoa public="1" get="inline" set="null" expr="cast &quot;application/x-cocoa&quot;" line="51" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cocoa"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCocoa>
	<ApplicationCdf public="1" get="inline" set="null" expr="cast &quot;application/cdf&quot;" line="52" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/cdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationCdf>
	<ApplicationXCdf public="1" get="inline" set="null" expr="cast &quot;application/x-cdf&quot;" line="53" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCdf>
	<ApplicationXNetcdf public="1" get="inline" set="null" expr="cast &quot;application/x-netcdf&quot;" line="54" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-netcdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNetcdf>
	<ApplicationPkixCert public="1" get="inline" set="null" expr="cast &quot;application/pkix-cert&quot;" line="55" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkix-cert"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkixCert>
	<ApplicationXX509CaCert public="1" get="inline" set="null" expr="cast &quot;application/x-x509-ca-cert&quot;" line="56" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-x509-ca-cert"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXX509CaCert>
	<ApplicationXChat public="1" get="inline" set="null" expr="cast &quot;application/x-chat&quot;" line="57" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-chat"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXChat>
	<ApplicationJava public="1" get="inline" set="null" expr="cast &quot;application/java&quot;" line="58" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/java"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationJava>
	<ApplicationJavaByteCode public="1" get="inline" set="null" expr="cast &quot;application/java-byte-code&quot;" line="59" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/java-byte-code"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationJavaByteCode>
	<ApplicationXJavaClass public="1" get="inline" set="null" expr="cast &quot;application/x-java-class&quot;" line="60" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-java-class"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXJavaClass>
	<ApplicationXCpio public="1" get="inline" set="null" expr="cast &quot;application/x-cpio&quot;" line="61" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cpio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCpio>
	<ApplicationMacCompactpro public="1" get="inline" set="null" expr="cast &quot;application/mac-compactpro&quot;" line="62" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mac-compactpro"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMacCompactpro>
	<ApplicationPkcsCrl public="1" get="inline" set="null" expr="cast &quot;application/pkcs-crl&quot;" line="63" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs-crl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcsCrl>
	<ApplicationXCsh public="1" get="inline" set="null" expr="cast &quot;application/x-csh&quot;" line="64" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-csh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCsh>
	<TextCss public="1" get="inline" set="null" expr="cast &quot;text/css&quot;" line="65" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/css"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextCss>
	<ApplicationXDirector public="1" get="inline" set="null" expr="cast &quot;application/x-director&quot;" line="66" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-director"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXDirector>
	<ApplicationXDeepv public="1" get="inline" set="null" expr="cast &quot;application/x-deepv&quot;" line="67" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-deepv"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXDeepv>
	<VideoXDv public="1" get="inline" set="null" expr="cast &quot;video/x-dv&quot;" line="68" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-dv"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXDv>
	<VideoDl public="1" get="inline" set="null" expr="cast &quot;video/dl&quot;" line="69" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/dl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoDl>
	<ApplicationMsword public="1" get="inline" set="null" expr="cast &quot;application/msword&quot;" line="70" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/msword"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMsword>
	<ApplicationCommonground public="1" get="inline" set="null" expr="cast &quot;application/commonground&quot;" line="71" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/commonground"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationCommonground>
	<ApplicationDrafting public="1" get="inline" set="null" expr="cast &quot;application/drafting&quot;" line="72" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/drafting"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationDrafting>
	<ApplicationXDvi public="1" get="inline" set="null" expr="cast &quot;application/x-dvi&quot;" line="73" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-dvi"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXDvi>
	<DrawingXDwf public="1" get="inline" set="null" expr="cast &quot;drawing/x-dwf (old)&quot;" line="74" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "drawing/x-dwf (old)"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DrawingXDwf>
	<ApplicationAcad public="1" get="inline" set="null" expr="cast &quot;application/acad&quot;" line="75" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/acad"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationAcad>
	<ApplicationDxf public="1" get="inline" set="null" expr="cast &quot;application/dxf&quot;" line="76" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/dxf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationDxf>
	<TextXScriptElisp public="1" get="inline" set="null" expr="cast &quot;text/x-script.elisp&quot;" line="77" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.elisp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptElisp>
	<ApplicationXBytecodeElisp public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.elisp (compiled elisp)&quot;" line="78" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bytecode.elisp (compiled elisp)"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBytecodeElisp>
	<ApplicationXEnvoy public="1" get="inline" set="null" expr="cast &quot;application/x-envoy&quot;" line="79" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-envoy"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXEnvoy>
	<ApplicationXEsrehber public="1" get="inline" set="null" expr="cast &quot;application/x-esrehber&quot;" line="80" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-esrehber"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXEsrehber>
	<TextXSetext public="1" get="inline" set="null" expr="cast &quot;text/x-setext&quot;" line="81" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-setext"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXSetext>
	<ApplicationEnvoy public="1" get="inline" set="null" expr="cast &quot;application/envoy&quot;" line="82" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/envoy"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationEnvoy>
	<TextXFortran public="1" get="inline" set="null" expr="cast &quot;text/x-fortran&quot;" line="83" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-fortran"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXFortran>
	<ApplicationVndFdf public="1" get="inline" set="null" expr="cast &quot;application/vnd.fdf&quot;" line="84" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.fdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndFdf>
	<ImageFif public="1" get="inline" set="null" expr="cast &quot;image/fif&quot;" line="85" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/fif"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageFif>
	<VideoFli public="1" get="inline" set="null" expr="cast &quot;video/fli&quot;" line="86" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/fli"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoFli>
	<ImageFlorian public="1" get="inline" set="null" expr="cast &quot;image/florian&quot;" line="87" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/florian"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageFlorian>
	<TextVndFmiFlexstor public="1" get="inline" set="null" expr="cast &quot;text/vnd.fmi.flexstor&quot;" line="88" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.fmi.flexstor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextVndFmiFlexstor>
	<VideoXAtomic3dFeature public="1" get="inline" set="null" expr="cast &quot;video/x-atomic3d-feature&quot;" line="89" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-atomic3d-feature"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXAtomic3dFeature>
	<ImageVndFpx public="1" get="inline" set="null" expr="cast &quot;image/vnd.fpx&quot;" line="90" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.fpx"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndFpx>
	<ApplicationFreeloader public="1" get="inline" set="null" expr="cast &quot;application/freeloader&quot;" line="91" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/freeloader"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationFreeloader>
	<AudioMake public="1" get="inline" set="null" expr="cast &quot;audio/make&quot;" line="92" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/make"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMake>
	<ImageG3fax public="1" get="inline" set="null" expr="cast &quot;image/g3fax&quot;" line="93" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/g3fax"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageG3fax>
	<ImageGif public="1" get="inline" set="null" expr="cast &quot;image/gif&quot;" line="94" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/gif"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageGif>
	<VideoGl public="1" get="inline" set="null" expr="cast &quot;video/gl&quot;" line="95" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/gl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoGl>
	<AudioXGsm public="1" get="inline" set="null" expr="cast &quot;audio/x-gsm&quot;" line="96" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-gsm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXGsm>
	<ApplicationXGsp public="1" get="inline" set="null" expr="cast &quot;application/x-gsp&quot;" line="97" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gsp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXGsp>
	<ApplicationXGss public="1" get="inline" set="null" expr="cast &quot;application/x-gss&quot;" line="98" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gss"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXGss>
	<ApplicationXGtar public="1" get="inline" set="null" expr="cast &quot;application/x-gtar&quot;" line="99" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gtar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXGtar>
	<ApplicationXCompressed public="1" get="inline" set="null" expr="cast &quot;application/x-compressed&quot;" line="100" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-compressed"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCompressed>
	<ApplicationXGzip public="1" get="inline" set="null" expr="cast &quot;application/x-gzip&quot;" line="101" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gzip"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXGzip>
	<ApplicationXHdf public="1" get="inline" set="null" expr="cast &quot;application/x-hdf&quot;" line="102" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-hdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXHdf>
	<ApplicationXHelpfile public="1" get="inline" set="null" expr="cast &quot;application/x-helpfile&quot;" line="103" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-helpfile"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXHelpfile>
	<TextXScript public="1" get="inline" set="null" expr="cast &quot;text/x-script&quot;" line="104" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScript>
	<ApplicationHlp public="1" get="inline" set="null" expr="cast &quot;application/hlp&quot;" line="105" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/hlp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationHlp>
	<ApplicationVndHpHpgl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-hpgl&quot;" line="106" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.hp-hpgl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndHpHpgl>
	<ApplicationBinhex public="1" get="inline" set="null" expr="cast &quot;application/binhex&quot;" line="107" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/binhex"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationBinhex>
	<ApplicationHta public="1" get="inline" set="null" expr="cast &quot;application/hta&quot;" line="108" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/hta"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationHta>
	<TextXComponent public="1" get="inline" set="null" expr="cast &quot;text/x-component&quot;" line="109" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-component"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXComponent>
	<TextWebviewhtml public="1" get="inline" set="null" expr="cast &quot;text/webviewhtml&quot;" line="110" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/webviewhtml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextWebviewhtml>
	<XConferenceXCooltalk public="1" get="inline" set="null" expr="cast &quot;x-conference/x-cooltalk&quot;" line="111" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-conference/x-cooltalk"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XConferenceXCooltalk>
	<ImageXIcon public="1" get="inline" set="null" expr="cast &quot;image/x-icon&quot;" line="112" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-icon"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXIcon>
	<ImageIef public="1" get="inline" set="null" expr="cast &quot;image/ief&quot;" line="113" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/ief"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageIef>
	<ApplicationIges public="1" get="inline" set="null" expr="cast &quot;application/iges&quot;" line="114" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/iges"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationIges>
	<ApplicationXIma public="1" get="inline" set="null" expr="cast &quot;application/x-ima&quot;" line="115" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ima"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXIma>
	<ApplicationXHttpdImap public="1" get="inline" set="null" expr="cast &quot;application/x-httpd-imap&quot;" line="116" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-httpd-imap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXHttpdImap>
	<ApplicationInf public="1" get="inline" set="null" expr="cast &quot;application/inf&quot;" line="117" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/inf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationInf>
	<ApplicationXInternettSignup public="1" get="inline" set="null" expr="cast &quot;application/x-internett-signup&quot;" line="118" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-internett-signup"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXInternettSignup>
	<ApplicationXIp2 public="1" get="inline" set="null" expr="cast &quot;application/x-ip2&quot;" line="119" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ip2"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXIp2>
	<VideoXIsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-isvideo&quot;" line="120" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-isvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXIsvideo>
	<AudioIt public="1" get="inline" set="null" expr="cast &quot;audio/it&quot;" line="121" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/it"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioIt>
	<ApplicationXInventor public="1" get="inline" set="null" expr="cast &quot;application/x-inventor&quot;" line="122" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-inventor"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXInventor>
	<IWorldIVrml public="1" get="inline" set="null" expr="cast &quot;i-world/i-vrml&quot;" line="123" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "i-world/i-vrml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IWorldIVrml>
	<ApplicationXLivescreen public="1" get="inline" set="null" expr="cast &quot;application/x-livescreen&quot;" line="124" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-livescreen"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLivescreen>
	<AudioXJam public="1" get="inline" set="null" expr="cast &quot;audio/x-jam&quot;" line="125" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-jam"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXJam>
	<ApplicationXJavaCommerce public="1" get="inline" set="null" expr="cast &quot;application/x-java-commerce&quot;" line="126" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-java-commerce"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXJavaCommerce>
	<ImageJpeg public="1" get="inline" set="null" expr="cast &quot;image/jpeg&quot;" line="127" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/jpeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageJpeg>
	<ImageXJps public="1" get="inline" set="null" expr="cast &quot;image/x-jps&quot;" line="128" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-jps"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXJps>
	<TextJavascript public="1" get="inline" set="null" expr="cast &quot;text/javascript&quot;" line="129" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/javascript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextJavascript>
	<ApplicationJson public="1" get="inline" set="null" expr="cast &quot;application/json&quot;" line="130" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/json"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationJson>
	<ApplicationJavascript public="1" get="inline" set="null" expr="cast &quot;application/javascript&quot;" line="131" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/javascript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationJavascript>
	<ImageJutvision public="1" get="inline" set="null" expr="cast &quot;image/jutvision&quot;" line="132" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/jutvision"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageJutvision>
	<AudioMidi public="1" get="inline" set="null" expr="cast &quot;audio/midi&quot;" line="133" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/midi"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMidi>
	<ApplicationXKsh public="1" get="inline" set="null" expr="cast &quot;application/x-ksh&quot;" line="134" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ksh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXKsh>
	<AudioNspaudio public="1" get="inline" set="null" expr="cast &quot;audio/nspaudio&quot;" line="135" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/nspaudio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioNspaudio>
	<AudioXLiveaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-liveaudio&quot;" line="136" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-liveaudio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXLiveaudio>
	<ApplicationXLatex public="1" get="inline" set="null" expr="cast &quot;application/x-latex&quot;" line="137" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-latex"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLatex>
	<ApplicationXLisp public="1" get="inline" set="null" expr="cast &quot;application/x-lisp&quot;" line="138" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lisp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLisp>
	<TextXLaAsf public="1" get="inline" set="null" expr="cast &quot;text/x-la-asf&quot;" line="139" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-la-asf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXLaAsf>
	<ApplicationLzx public="1" get="inline" set="null" expr="cast &quot;application/lzx&quot;" line="140" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/lzx"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationLzx>
	<VideoMpeg public="1" get="inline" set="null" expr="cast &quot;video/mpeg&quot;" line="141" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/mpeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoMpeg>
	<AudioMpeg public="1" get="inline" set="null" expr="cast &quot;audio/mpeg&quot;" line="142" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mpeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMpeg>
	<AudioXMpequrl public="1" get="inline" set="null" expr="cast &quot;audio/x-mpequrl&quot;" line="143" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-mpequrl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXMpequrl>
	<ApplicationXTroffMan public="1" get="inline" set="null" expr="cast &quot;application/x-troff-man&quot;" line="144" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-man"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroffMan>
	<ApplicationXNavimap public="1" get="inline" set="null" expr="cast &quot;application/x-navimap&quot;" line="145" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navimap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNavimap>
	<ApplicationMbedlet public="1" get="inline" set="null" expr="cast &quot;application/mbedlet&quot;" line="146" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mbedlet"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMbedlet>
	<ApplicationXMagicCapPackage10 public="1" get="inline" set="null" expr="cast &quot;application/x-magic-cap-package-1.0&quot;" line="147" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-magic-cap-package-1.0"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMagicCapPackage10>
	<ApplicationMcad public="1" get="inline" set="null" expr="cast &quot;application/mcad&quot;" line="148" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mcad"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMcad>
	<ImageVasa public="1" get="inline" set="null" expr="cast &quot;image/vasa&quot;" line="149" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vasa"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVasa>
	<ApplicationNetmc public="1" get="inline" set="null" expr="cast &quot;application/netmc&quot;" line="150" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/netmc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationNetmc>
	<ApplicationXTroffMe public="1" get="inline" set="null" expr="cast &quot;application/x-troff-me&quot;" line="151" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-me"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroffMe>
	<MessageRfc822 public="1" get="inline" set="null" expr="cast &quot;message/rfc822&quot;" line="152" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "message/rfc822"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MessageRfc822>
	<ApplicationXMif public="1" get="inline" set="null" expr="cast &quot;application/x-mif&quot;" line="153" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mif"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMif>
	<WwwMime public="1" get="inline" set="null" expr="cast &quot;www/mime&quot;" line="154" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "www/mime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WwwMime>
	<AudioXVndAudioexplosionMjuicemediafile public="1" get="inline" set="null" expr="cast &quot;audio/x-vnd.audioexplosion.mjuicemediafile&quot;" line="155" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-vnd.audioexplosion.mjuicemediafile"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXVndAudioexplosionMjuicemediafile>
	<VideoXMotionJpeg public="1" get="inline" set="null" expr="cast &quot;video/x-motion-jpeg&quot;" line="156" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-motion-jpeg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXMotionJpeg>
	<ApplicationBase64 public="1" get="inline" set="null" expr="cast &quot;application/base64&quot;" line="157" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/base64"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationBase64>
	<AudioMod public="1" get="inline" set="null" expr="cast &quot;audio/mod&quot;" line="158" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mod"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMod>
	<VideoQuicktime public="1" get="inline" set="null" expr="cast &quot;video/quicktime&quot;" line="159" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/quicktime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoQuicktime>
	<VideoXSgiMovie public="1" get="inline" set="null" expr="cast &quot;video/x-sgi-movie&quot;" line="160" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-sgi-movie"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXSgiMovie>
	<AudioMpeg3 public="1" get="inline" set="null" expr="cast &quot;audio/mpeg3&quot;" line="161" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mpeg3"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMpeg3>
	<ApplicationXProject public="1" get="inline" set="null" expr="cast &quot;application/x-project&quot;" line="162" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-project"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXProject>
	<ApplicationVndMsProject public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-project&quot;" line="163" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-project"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsProject>
	<ApplicationMarc public="1" get="inline" set="null" expr="cast &quot;application/marc&quot;" line="164" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/marc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMarc>
	<ApplicationXTroffMs public="1" get="inline" set="null" expr="cast &quot;application/x-troff-ms&quot;" line="165" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-ms"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroffMs>
	<ApplicationXVndAudioexplosionMzz public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.audioexplosion.mzz&quot;" line="166" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vnd.audioexplosion.mzz"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXVndAudioexplosionMzz>
	<ImageNaplps public="1" get="inline" set="null" expr="cast &quot;image/naplps&quot;" line="167" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/naplps"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageNaplps>
	<ApplicationVndNokiaConfigurationMessage public="1" get="inline" set="null" expr="cast &quot;application/vnd.nokia.configuration-message&quot;" line="168" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.nokia.configuration-message"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndNokiaConfigurationMessage>
	<ImageXNiff public="1" get="inline" set="null" expr="cast &quot;image/x-niff&quot;" line="169" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-niff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXNiff>
	<ApplicationXMixTransfer public="1" get="inline" set="null" expr="cast &quot;application/x-mix-transfer&quot;" line="170" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mix-transfer"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXMixTransfer>
	<ApplicationXConference public="1" get="inline" set="null" expr="cast &quot;application/x-conference&quot;" line="171" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-conference"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXConference>
	<ApplicationXNavidoc public="1" get="inline" set="null" expr="cast &quot;application/x-navidoc&quot;" line="172" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navidoc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNavidoc>
	<ApplicationOda public="1" get="inline" set="null" expr="cast &quot;application/oda&quot;" line="173" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/oda"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationOda>
	<ApplicationXOmc public="1" get="inline" set="null" expr="cast &quot;application/x-omc&quot;" line="174" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXOmc>
	<ApplicationXOmcdatamaker public="1" get="inline" set="null" expr="cast &quot;application/x-omcdatamaker&quot;" line="175" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omcdatamaker"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXOmcdatamaker>
	<ApplicationXOmcregerator public="1" get="inline" set="null" expr="cast &quot;application/x-omcregerator&quot;" line="176" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omcregerator"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXOmcregerator>
	<TextXPascal public="1" get="inline" set="null" expr="cast &quot;text/x-pascal&quot;" line="177" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-pascal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXPascal>
	<ApplicationPkcs10 public="1" get="inline" set="null" expr="cast &quot;application/pkcs10&quot;" line="178" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs10"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcs10>
	<ApplicationPkcs12 public="1" get="inline" set="null" expr="cast &quot;application/pkcs-12&quot;" line="179" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs-12"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcs12>
	<ApplicationXPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-signature&quot;" line="180" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-signature"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPkcs7Signature>
	<ApplicationPkcs7Mime public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-mime&quot;" line="181" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs7-mime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcs7Mime>
	<ApplicationXPkcs7Certreqresp public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certreqresp&quot;" line="182" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-certreqresp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPkcs7Certreqresp>
	<ApplicationPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-signature&quot;" line="183" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs7-signature"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPkcs7Signature>
	<ApplicationPro_eng public="1" get="inline" set="null" expr="cast &quot;application/pro_eng&quot;" line="184" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pro_eng"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPro_eng>
	<TextPascal public="1" get="inline" set="null" expr="cast &quot;text/pascal&quot;" line="185" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/pascal"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextPascal>
	<ImageXPortableBitmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-bitmap&quot;" line="186" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-bitmap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPortableBitmap>
	<ApplicationVndHpPcl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-pcl&quot;" line="187" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.hp-pcl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndHpPcl>
	<ImageXPict public="1" get="inline" set="null" expr="cast &quot;image/x-pict&quot;" line="188" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-pict"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPict>
	<ImageXPcx public="1" get="inline" set="null" expr="cast &quot;image/x-pcx&quot;" line="189" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-pcx"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPcx>
	<ChemicalXPdb public="1" get="inline" set="null" expr="cast &quot;chemical/x-pdb&quot;" line="190" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "chemical/x-pdb"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ChemicalXPdb>
	<ApplicationPdf public="1" get="inline" set="null" expr="cast &quot;application/pdf&quot;" line="191" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pdf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationPdf>
	<ImageXPortableGraymap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-graymap&quot;" line="192" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-graymap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPortableGraymap>
	<ImagePict public="1" get="inline" set="null" expr="cast &quot;image/pict&quot;" line="193" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/pict"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImagePict>
	<ApplicationXNewtonCompatiblePkg public="1" get="inline" set="null" expr="cast &quot;application/x-newton-compatible-pkg&quot;" line="194" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-newton-compatible-pkg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXNewtonCompatiblePkg>
	<ApplicationVndMsPkiPko public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.pko&quot;" line="195" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.pko"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsPkiPko>
	<ApplicationXPixclscript public="1" get="inline" set="null" expr="cast &quot;application/x-pixclscript&quot;" line="196" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pixclscript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPixclscript>
	<ImageXXpixmap public="1" get="inline" set="null" expr="cast &quot;image/x-xpixmap&quot;" line="197" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xpixmap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXXpixmap>
	<ApplicationXPagemaker public="1" get="inline" set="null" expr="cast &quot;application/x-pagemaker&quot;" line="198" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pagemaker"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPagemaker>
	<ImagePng public="1" get="inline" set="null" expr="cast &quot;image/png&quot;" line="199" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/png"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImagePng>
	<ApplicationXPortableAnymap public="1" get="inline" set="null" expr="cast &quot;application/x-portable-anymap&quot;" line="200" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-portable-anymap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPortableAnymap>
	<ApplicationMspowerpoint public="1" get="inline" set="null" expr="cast &quot;application/mspowerpoint&quot;" line="201" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mspowerpoint"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMspowerpoint>
	<ModelXPov public="1" get="inline" set="null" expr="cast &quot;model/x-pov&quot;" line="202" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "model/x-pov"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ModelXPov>
	<ApplicationVndMsPowerpoint public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-powerpoint&quot;" line="203" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-powerpoint"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsPowerpoint>
	<ImageXPortablePixmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-pixmap&quot;" line="204" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-pixmap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXPortablePixmap>
	<ApplicationXFreelance public="1" get="inline" set="null" expr="cast &quot;application/x-freelance&quot;" line="205" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-freelance"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXFreelance>
	<PaleovuXPv public="1" get="inline" set="null" expr="cast &quot;paleovu/x-pv&quot;" line="206" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "paleovu/x-pv"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PaleovuXPv>
	<TextXScriptPhyton public="1" get="inline" set="null" expr="cast &quot;text/x-script.phyton&quot;" line="207" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.phyton"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptPhyton>
	<ApplicationXBytecodePython public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.python&quot;" line="208" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bytecode.python"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXBytecodePython>
	<AudioVndQcelp public="1" get="inline" set="null" expr="cast &quot;audio/vnd.qcelp&quot;" line="209" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/vnd.qcelp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioVndQcelp>
	<ImageXQuicktime public="1" get="inline" set="null" expr="cast &quot;image/x-quicktime&quot;" line="210" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-quicktime"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXQuicktime>
	<VideoXQtc public="1" get="inline" set="null" expr="cast &quot;video/x-qtc&quot;" line="211" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-qtc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXQtc>
	<AudioXPnRealaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio&quot;" line="212" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-pn-realaudio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXPnRealaudio>
	<ApplicationXCmuRaster public="1" get="inline" set="null" expr="cast &quot;application/x-cmu-raster&quot;" line="213" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cmu-raster"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCmuRaster>
	<ImageCmuRaster public="1" get="inline" set="null" expr="cast &quot;image/cmu-raster&quot;" line="214" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/cmu-raster"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageCmuRaster>
	<TextXScriptRexx public="1" get="inline" set="null" expr="cast &quot;text/x-script.rexx&quot;" line="215" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.rexx"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptRexx>
	<ImageVndRnRealflash public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realflash&quot;" line="216" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.rn-realflash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndRnRealflash>
	<ImageXRgb public="1" get="inline" set="null" expr="cast &quot;image/x-rgb&quot;" line="217" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-rgb"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXRgb>
	<ApplicationVndRnRealmedia public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realmedia&quot;" line="218" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.rn-realmedia"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndRnRealmedia>
	<AudioMid public="1" get="inline" set="null" expr="cast &quot;audio/mid&quot;" line="219" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mid"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioMid>
	<ApplicationRingingTones public="1" get="inline" set="null" expr="cast &quot;application/ringing-tones&quot;" line="220" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/ringing-tones"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationRingingTones>
	<ApplicationVndRnRealplayer public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realplayer&quot;" line="221" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.rn-realplayer"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndRnRealplayer>
	<ApplicationXTroff public="1" get="inline" set="null" expr="cast &quot;application/x-troff&quot;" line="222" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTroff>
	<ImageVndRnRealpix public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realpix&quot;" line="223" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.rn-realpix"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndRnRealpix>
	<AudioXPnRealaudioPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio-plugin&quot;" line="224" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-pn-realaudio-plugin"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXPnRealaudioPlugin>
	<TextRichtext public="1" get="inline" set="null" expr="cast &quot;text/richtext&quot;" line="225" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/richtext"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextRichtext>
	<ApplicationRtf public="1" get="inline" set="null" expr="cast &quot;application/rtf&quot;" line="226" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/rtf"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationRtf>
	<VideoVndRnRealvideo public="1" get="inline" set="null" expr="cast &quot;video/vnd.rn-realvideo&quot;" line="227" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vnd.rn-realvideo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoVndRnRealvideo>
	<AudioS3m public="1" get="inline" set="null" expr="cast &quot;audio/s3m&quot;" line="228" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/s3m"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioS3m>
	<ApplicationXTbook public="1" get="inline" set="null" expr="cast &quot;application/x-tbook&quot;" line="229" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tbook"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTbook>
	<ApplicationXLotusscreencam public="1" get="inline" set="null" expr="cast &quot;application/x-lotusscreencam&quot;" line="230" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lotusscreencam"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLotusscreencam>
	<ApplicationSdp public="1" get="inline" set="null" expr="cast &quot;application/sdp&quot;" line="231" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sdp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSdp>
	<ApplicationSounder public="1" get="inline" set="null" expr="cast &quot;application/sounder&quot;" line="232" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sounder"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSounder>
	<ApplicationSea public="1" get="inline" set="null" expr="cast &quot;application/sea&quot;" line="233" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sea"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSea>
	<ApplicationSet public="1" get="inline" set="null" expr="cast &quot;application/set&quot;" line="234" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/set"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSet>
	<AudioXPsid public="1" get="inline" set="null" expr="cast &quot;audio/x-psid&quot;" line="235" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-psid"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXPsid>
	<ApplicationXSit public="1" get="inline" set="null" expr="cast &quot;application/x-sit&quot;" line="236" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sit"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSit>
	<ApplicationXKoan public="1" get="inline" set="null" expr="cast &quot;application/x-koan&quot;" line="237" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-koan"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXKoan>
	<ApplicationXSeelogo public="1" get="inline" set="null" expr="cast &quot;application/x-seelogo&quot;" line="238" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-seelogo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSeelogo>
	<ApplicationSmil public="1" get="inline" set="null" expr="cast &quot;application/smil&quot;" line="239" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/smil"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSmil>
	<ApplicationSolids public="1" get="inline" set="null" expr="cast &quot;application/solids&quot;" line="240" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/solids"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSolids>
	<ApplicationXPkcs7Certificates public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certificates&quot;" line="241" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-certificates"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXPkcs7Certificates>
	<ApplicationFuturesplash public="1" get="inline" set="null" expr="cast &quot;application/futuresplash&quot;" line="242" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/futuresplash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationFuturesplash>
	<ApplicationXSprite public="1" get="inline" set="null" expr="cast &quot;application/x-sprite&quot;" line="243" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sprite"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSprite>
	<ApplicationXWaisSource public="1" get="inline" set="null" expr="cast &quot;application/x-wais-source&quot;" line="244" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-wais-source"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXWaisSource>
	<TextXServerParsedHtml public="1" get="inline" set="null" expr="cast &quot;text/x-server-parsed-html&quot;" line="245" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-server-parsed-html"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXServerParsedHtml>
	<ApplicationStreamingmedia public="1" get="inline" set="null" expr="cast &quot;application/streamingmedia&quot;" line="246" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/streamingmedia"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationStreamingmedia>
	<ApplicationVndMsPkiCertstore public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.certstore&quot;" line="247" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.certstore"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndMsPkiCertstore>
	<ApplicationStep public="1" get="inline" set="null" expr="cast &quot;application/step&quot;" line="248" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/step"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationStep>
	<ApplicationSla public="1" get="inline" set="null" expr="cast &quot;application/sla&quot;" line="249" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sla"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationSla>
	<ApplicationXSv4cpio public="1" get="inline" set="null" expr="cast &quot;application/x-sv4cpio&quot;" line="250" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sv4cpio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSv4cpio>
	<ApplicationXSv4crc public="1" get="inline" set="null" expr="cast &quot;application/x-sv4crc&quot;" line="251" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sv4crc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXSv4crc>
	<ImageVndDwg public="1" get="inline" set="null" expr="cast &quot;image/vnd.dwg&quot;" line="252" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.dwg"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndDwg>
	<ApplicationXWorld public="1" get="inline" set="null" expr="cast &quot;application/x-world&quot;" line="253" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-world"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXWorld>
	<ApplicationXShockwaveFlash public="1" get="inline" set="null" expr="cast &quot;application/x-shockwave-flash&quot;" line="254" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-shockwave-flash"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXShockwaveFlash>
	<TextXSpeech public="1" get="inline" set="null" expr="cast &quot;text/x-speech&quot;" line="255" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-speech"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXSpeech>
	<ApplicationXTar public="1" get="inline" set="null" expr="cast &quot;application/x-tar&quot;" line="256" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTar>
	<ApplicationToolbook public="1" get="inline" set="null" expr="cast &quot;application/toolbook&quot;" line="257" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/toolbook"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationToolbook>
	<ApplicationXTcl public="1" get="inline" set="null" expr="cast &quot;application/x-tcl&quot;" line="258" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tcl"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTcl>
	<TextXScriptTcsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.tcsh&quot;" line="259" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.tcsh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptTcsh>
	<ApplicationXTex public="1" get="inline" set="null" expr="cast &quot;application/x-tex&quot;" line="260" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tex"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTex>
	<ApplicationXTexinfo public="1" get="inline" set="null" expr="cast &quot;application/x-texinfo&quot;" line="261" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-texinfo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXTexinfo>
	<ApplicationGnutar public="1" get="inline" set="null" expr="cast &quot;application/gnutar&quot;" line="262" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/gnutar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationGnutar>
	<ImageTiff public="1" get="inline" set="null" expr="cast &quot;image/tiff&quot;" line="263" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/tiff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageTiff>
	<AudioTspAudio public="1" get="inline" set="null" expr="cast &quot;audio/tsp-audio&quot;" line="264" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/tsp-audio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioTspAudio>
	<ApplicationDsptype public="1" get="inline" set="null" expr="cast &quot;application/dsptype&quot;" line="265" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/dsptype"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationDsptype>
	<TextTabSeparatedValues public="1" get="inline" set="null" expr="cast &quot;text/tab-separated-values&quot;" line="266" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/tab-separated-values"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextTabSeparatedValues>
	<TextXUil public="1" get="inline" set="null" expr="cast &quot;text/x-uil&quot;" line="267" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-uil"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXUil>
	<TextUriList public="1" get="inline" set="null" expr="cast &quot;text/uri-list&quot;" line="268" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/uri-list"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextUriList>
	<ApplicationIDeas public="1" get="inline" set="null" expr="cast &quot;application/i-deas&quot;" line="269" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/i-deas"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationIDeas>
	<ApplicationXUstar public="1" get="inline" set="null" expr="cast &quot;application/x-ustar&quot;" line="270" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ustar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXUstar>
	<TextXUuencode public="1" get="inline" set="null" expr="cast &quot;text/x-uuencode&quot;" line="271" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-uuencode"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXUuencode>
	<ApplicationXCdlink public="1" get="inline" set="null" expr="cast &quot;application/x-cdlink&quot;" line="272" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cdlink"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCdlink>
	<TextXVcalendar public="1" get="inline" set="null" expr="cast &quot;text/x-vcalendar&quot;" line="273" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-vcalendar"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXVcalendar>
	<ApplicationVda public="1" get="inline" set="null" expr="cast &quot;application/vda&quot;" line="274" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vda"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVda>
	<VideoVdo public="1" get="inline" set="null" expr="cast &quot;video/vdo&quot;" line="275" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vdo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoVdo>
	<ApplicationGroupwise public="1" get="inline" set="null" expr="cast &quot;application/groupwise&quot;" line="276" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/groupwise"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationGroupwise>
	<VideoVivo public="1" get="inline" set="null" expr="cast &quot;video/vivo&quot;" line="277" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vivo"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoVivo>
	<ApplicationVocaltecMediaDesc public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-desc&quot;" line="278" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vocaltec-media-desc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVocaltecMediaDesc>
	<ApplicationVocaltecMediaFile public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-file&quot;" line="279" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vocaltec-media-file"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVocaltecMediaFile>
	<AudioVoc public="1" get="inline" set="null" expr="cast &quot;audio/voc&quot;" line="280" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/voc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioVoc>
	<VideoVosaic public="1" get="inline" set="null" expr="cast &quot;video/vosaic&quot;" line="281" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vosaic"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoVosaic>
	<AudioVoxware public="1" get="inline" set="null" expr="cast &quot;audio/voxware&quot;" line="282" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/voxware"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioVoxware>
	<AudioXTwinvqPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq-plugin&quot;" line="283" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-twinvq-plugin"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXTwinvqPlugin>
	<AudioXTwinvq public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq&quot;" line="284" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-twinvq"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXTwinvq>
	<ApplicationXVrml public="1" get="inline" set="null" expr="cast &quot;application/x-vrml&quot;" line="285" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vrml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXVrml>
	<XWorldXVrt public="1" get="inline" set="null" expr="cast &quot;x-world/x-vrt&quot;" line="286" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-world/x-vrt"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XWorldXVrt>
	<ApplicationXVisio public="1" get="inline" set="null" expr="cast &quot;application/x-visio&quot;" line="287" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-visio"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXVisio>
	<ApplicationWordperfect60 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.0&quot;" line="288" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect6.0"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationWordperfect60>
	<ApplicationWordperfect61 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.1&quot;" line="289" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect6.1"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationWordperfect61>
	<AudioWav public="1" get="inline" set="null" expr="cast &quot;audio/wav&quot;" line="290" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/wav"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioWav>
	<ApplicationXQpro public="1" get="inline" set="null" expr="cast &quot;application/x-qpro&quot;" line="291" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-qpro"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXQpro>
	<ImageVndWapWbmp public="1" get="inline" set="null" expr="cast &quot;image/vnd.wap.wbmp&quot;" line="292" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.wap.wbmp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndWapWbmp>
	<ApplicationVndXara public="1" get="inline" set="null" expr="cast &quot;application/vnd.xara&quot;" line="293" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.xara"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndXara>
	<ImageWebp public="1" get="inline" set="null" expr="cast &quot;image/webp&quot;" line="294" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/webp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageWebp>
	<ApplicationX123 public="1" get="inline" set="null" expr="cast &quot;application/x-123&quot;" line="295" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-123"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationX123>
	<WindowsMetafile public="1" get="inline" set="null" expr="cast &quot;windows/metafile&quot;" line="296" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "windows/metafile"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WindowsMetafile>
	<TextVndWapWml public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wml&quot;" line="297" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.wap.wml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextVndWapWml>
	<ApplicationVndWapWmlc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlc&quot;" line="298" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.wap.wmlc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndWapWmlc>
	<TextVndWapWmlscript public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wmlscript&quot;" line="299" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.wap.wmlscript"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextVndWapWmlscript>
	<ApplicationVndWapWmlscriptc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlscriptc&quot;" line="300" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.wap.wmlscriptc"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationVndWapWmlscriptc>
	<ApplicationWordperfect public="1" get="inline" set="null" expr="cast &quot;application/wordperfect&quot;" line="301" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationWordperfect>
	<ApplicationXLotus public="1" get="inline" set="null" expr="cast &quot;application/x-lotus&quot;" line="302" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lotus"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXLotus>
	<ApplicationMswrite public="1" get="inline" set="null" expr="cast &quot;application/mswrite&quot;" line="303" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mswrite"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationMswrite>
	<ModelVrml public="1" get="inline" set="null" expr="cast &quot;model/vrml&quot;" line="304" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "model/vrml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ModelVrml>
	<TextScriplet public="1" get="inline" set="null" expr="cast &quot;text/scriplet&quot;" line="305" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/scriplet"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextScriplet>
	<ApplicationXWintalk public="1" get="inline" set="null" expr="cast &quot;application/x-wintalk&quot;" line="306" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-wintalk"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXWintalk>
	<ImageXXbitmap public="1" get="inline" set="null" expr="cast &quot;image/x-xbitmap&quot;" line="307" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xbitmap"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXXbitmap>
	<VideoXAmtDemorun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-demorun&quot;" line="308" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-amt-demorun"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXAmtDemorun>
	<XglDrawing public="1" get="inline" set="null" expr="cast &quot;xgl/drawing&quot;" line="309" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "xgl/drawing"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XglDrawing>
	<ImageVndXiff public="1" get="inline" set="null" expr="cast &quot;image/vnd.xiff&quot;" line="310" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.xiff"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageVndXiff>
	<ApplicationExcel public="1" get="inline" set="null" expr="cast &quot;application/excel&quot;" line="311" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/excel"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationExcel>
	<AudioXm public="1" get="inline" set="null" expr="cast &quot;audio/xm&quot;" line="312" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/xm"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</AudioXm>
	<ApplicationXml public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="313" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/xml"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXml>
	<XglMovie public="1" get="inline" set="null" expr="cast &quot;xgl/movie&quot;" line="314" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "xgl/movie"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</XglMovie>
	<ApplicationXVndLsXpix public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.ls-xpix&quot;" line="315" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vnd.ls-xpix"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXVndLsXpix>
	<VideoXAmtShowrun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-showrun&quot;" line="316" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-amt-showrun"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</VideoXAmtShowrun>
	<ImageXXwd public="1" get="inline" set="null" expr="cast &quot;image/x-xwd&quot;" line="317" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xwd"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageXXwd>
	<ApplicationXCompress public="1" get="inline" set="null" expr="cast &quot;application/x-compress&quot;" line="318" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-compress"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ApplicationXCompress>
	<MultipartXZip public="1" get="inline" set="null" expr="cast &quot;multipart/x-zip&quot;" line="319" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "multipart/x-zip"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MultipartXZip>
	<TextXScriptZsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.zsh&quot;" line="320" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.zsh"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TextXScriptZsh>
	<ImageAvif public="1" get="inline" set="null" expr="cast &quot;image/avif&quot;" line="321" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/avif"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ImageAvif>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Mime.Mime_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Mime.hx" private="1" module="haxe.io.Mime" extern="1" final="1">
		<XWorldX3dmf public="1" get="inline" set="null" expr="cast &quot;x-world/x-3dmf&quot;" line="8" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-world/x-3dmf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XWorldX3dmf>
		<ApplicationOctetStream public="1" get="inline" set="null" expr="cast &quot;application/octet-stream&quot;" line="9" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/octet-stream"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationOctetStream>
		<ApplicationXAuthorwareBin public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-bin&quot;" line="10" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-bin"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXAuthorwareBin>
		<ApplicationXAuthorwareMap public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-map&quot;" line="11" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-map"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXAuthorwareMap>
		<ApplicationXAuthorwareSeg public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-seg&quot;" line="12" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-seg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXAuthorwareSeg>
		<TextVndAbc public="1" get="inline" set="null" expr="cast &quot;text/vnd.abc&quot;" line="13" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.abc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextVndAbc>
		<TextHtml public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="14" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/html"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextHtml>
		<VideoAnimaflex public="1" get="inline" set="null" expr="cast &quot;video/animaflex&quot;" line="15" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/animaflex"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoAnimaflex>
		<ApplicationPostscript public="1" get="inline" set="null" expr="cast &quot;application/postscript&quot;" line="16" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/postscript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPostscript>
		<AudioAiff public="1" get="inline" set="null" expr="cast &quot;audio/aiff&quot;" line="17" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/aiff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioAiff>
		<AudioXAiff public="1" get="inline" set="null" expr="cast &quot;audio/x-aiff&quot;" line="18" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-aiff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXAiff>
		<ApplicationXAim public="1" get="inline" set="null" expr="cast &quot;application/x-aim&quot;" line="19" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-aim"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXAim>
		<TextXAudiosoftIntra public="1" get="inline" set="null" expr="cast &quot;text/x-audiosoft-intra&quot;" line="20" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-audiosoft-intra"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXAudiosoftIntra>
		<ApplicationXNaviAnimation public="1" get="inline" set="null" expr="cast &quot;application/x-navi-animation&quot;" line="21" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navi-animation"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNaviAnimation>
		<ApplicationXNokia9000CommunicatorAddOnSoftware public="1" get="inline" set="null" expr="cast &quot;application/x-nokia-9000-communicator-add-on-software&quot;" line="22" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-nokia-9000-communicator-add-on-software"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNokia9000CommunicatorAddOnSoftware>
		<ApplicationMime public="1" get="inline" set="null" expr="cast &quot;application/mime&quot;" line="23" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMime>
		<ApplicationArj public="1" get="inline" set="null" expr="cast &quot;application/arj&quot;" line="24" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/arj"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationArj>
		<ImageXJg public="1" get="inline" set="null" expr="cast &quot;image/x-jg&quot;" line="25" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-jg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXJg>
		<VideoXMsAsf public="1" get="inline" set="null" expr="cast &quot;video/x-ms-asf&quot;" line="26" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-ms-asf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXMsAsf>
		<TextXAsm public="1" get="inline" set="null" expr="cast &quot;text/x-asm&quot;" line="27" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-asm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXAsm>
		<TextAsp public="1" get="inline" set="null" expr="cast &quot;text/asp&quot;" line="28" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/asp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextAsp>
		<ApplicationXMplayer2 public="1" get="inline" set="null" expr="cast &quot;application/x-mplayer2&quot;" line="29" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mplayer2"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMplayer2>
		<AudioBasic public="1" get="inline" set="null" expr="cast &quot;audio/basic&quot;" line="30" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/basic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioBasic>
		<ApplicationXTroffMsvideo public="1" get="inline" set="null" expr="cast &quot;application/x-troff-msvideo&quot;" line="31" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-msvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroffMsvideo>
		<VideoAvi public="1" get="inline" set="null" expr="cast &quot;video/avi&quot;" line="32" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/avi"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoAvi>
		<VideoMsvideo public="1" get="inline" set="null" expr="cast &quot;video/msvideo&quot;" line="33" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/msvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoMsvideo>
		<VideoXMsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-msvideo&quot;" line="34" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-msvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXMsvideo>
		<VideoAvsVideo public="1" get="inline" set="null" expr="cast &quot;video/avs-video&quot;" line="35" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/avs-video"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoAvsVideo>
		<ApplicationXBcpio public="1" get="inline" set="null" expr="cast &quot;application/x-bcpio&quot;" line="36" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bcpio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBcpio>
		<ApplicationMacBinary public="1" get="inline" set="null" expr="cast &quot;application/mac-binary&quot;" line="37" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mac-binary"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMacBinary>
		<ApplicationMacbinary public="1" get="inline" set="null" expr="cast &quot;application/macbinary&quot;" line="38" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/macbinary"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMacbinary>
		<ApplicationXBinary public="1" get="inline" set="null" expr="cast &quot;application/x-binary&quot;" line="39" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-binary"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBinary>
		<ApplicationXMacbinary public="1" get="inline" set="null" expr="cast &quot;application/x-macbinary&quot;" line="40" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-macbinary"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMacbinary>
		<ImageBmp public="1" get="inline" set="null" expr="cast &quot;image/bmp&quot;" line="41" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/bmp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageBmp>
		<ImageXWindowsBmp public="1" get="inline" set="null" expr="cast &quot;image/x-windows-bmp&quot;" line="42" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-windows-bmp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXWindowsBmp>
		<ApplicationBook public="1" get="inline" set="null" expr="cast &quot;application/book&quot;" line="43" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/book"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationBook>
		<ApplicationXBzip2 public="1" get="inline" set="null" expr="cast &quot;application/x-bzip2&quot;" line="44" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bzip2"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBzip2>
		<ApplicationXBsh public="1" get="inline" set="null" expr="cast &quot;application/x-bsh&quot;" line="45" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bsh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBsh>
		<ApplicationXBzip public="1" get="inline" set="null" expr="cast &quot;application/x-bzip&quot;" line="46" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bzip"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBzip>
		<TextPlain public="1" get="inline" set="null" expr="cast &quot;text/plain&quot;" line="47" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/plain"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextPlain>
		<TextXC public="1" get="inline" set="null" expr="cast &quot;text/x-c&quot;" line="48" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-c"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXC>
		<ApplicationVndMsPkiSeccat public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.seccat&quot;" line="49" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.seccat"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsPkiSeccat>
		<ApplicationClariscad public="1" get="inline" set="null" expr="cast &quot;application/clariscad&quot;" line="50" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/clariscad"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationClariscad>
		<ApplicationXCocoa public="1" get="inline" set="null" expr="cast &quot;application/x-cocoa&quot;" line="51" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cocoa"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCocoa>
		<ApplicationCdf public="1" get="inline" set="null" expr="cast &quot;application/cdf&quot;" line="52" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/cdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationCdf>
		<ApplicationXCdf public="1" get="inline" set="null" expr="cast &quot;application/x-cdf&quot;" line="53" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCdf>
		<ApplicationXNetcdf public="1" get="inline" set="null" expr="cast &quot;application/x-netcdf&quot;" line="54" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-netcdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNetcdf>
		<ApplicationPkixCert public="1" get="inline" set="null" expr="cast &quot;application/pkix-cert&quot;" line="55" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkix-cert"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkixCert>
		<ApplicationXX509CaCert public="1" get="inline" set="null" expr="cast &quot;application/x-x509-ca-cert&quot;" line="56" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-x509-ca-cert"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXX509CaCert>
		<ApplicationXChat public="1" get="inline" set="null" expr="cast &quot;application/x-chat&quot;" line="57" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-chat"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXChat>
		<ApplicationJava public="1" get="inline" set="null" expr="cast &quot;application/java&quot;" line="58" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/java"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationJava>
		<ApplicationJavaByteCode public="1" get="inline" set="null" expr="cast &quot;application/java-byte-code&quot;" line="59" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/java-byte-code"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationJavaByteCode>
		<ApplicationXJavaClass public="1" get="inline" set="null" expr="cast &quot;application/x-java-class&quot;" line="60" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-java-class"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXJavaClass>
		<ApplicationXCpio public="1" get="inline" set="null" expr="cast &quot;application/x-cpio&quot;" line="61" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cpio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCpio>
		<ApplicationMacCompactpro public="1" get="inline" set="null" expr="cast &quot;application/mac-compactpro&quot;" line="62" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mac-compactpro"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMacCompactpro>
		<ApplicationPkcsCrl public="1" get="inline" set="null" expr="cast &quot;application/pkcs-crl&quot;" line="63" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs-crl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcsCrl>
		<ApplicationXCsh public="1" get="inline" set="null" expr="cast &quot;application/x-csh&quot;" line="64" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-csh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCsh>
		<TextCss public="1" get="inline" set="null" expr="cast &quot;text/css&quot;" line="65" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/css"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextCss>
		<ApplicationXDirector public="1" get="inline" set="null" expr="cast &quot;application/x-director&quot;" line="66" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-director"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXDirector>
		<ApplicationXDeepv public="1" get="inline" set="null" expr="cast &quot;application/x-deepv&quot;" line="67" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-deepv"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXDeepv>
		<VideoXDv public="1" get="inline" set="null" expr="cast &quot;video/x-dv&quot;" line="68" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-dv"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXDv>
		<VideoDl public="1" get="inline" set="null" expr="cast &quot;video/dl&quot;" line="69" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/dl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoDl>
		<ApplicationMsword public="1" get="inline" set="null" expr="cast &quot;application/msword&quot;" line="70" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/msword"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMsword>
		<ApplicationCommonground public="1" get="inline" set="null" expr="cast &quot;application/commonground&quot;" line="71" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/commonground"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationCommonground>
		<ApplicationDrafting public="1" get="inline" set="null" expr="cast &quot;application/drafting&quot;" line="72" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/drafting"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationDrafting>
		<ApplicationXDvi public="1" get="inline" set="null" expr="cast &quot;application/x-dvi&quot;" line="73" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-dvi"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXDvi>
		<DrawingXDwf public="1" get="inline" set="null" expr="cast &quot;drawing/x-dwf (old)&quot;" line="74" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "drawing/x-dwf (old)"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DrawingXDwf>
		<ApplicationAcad public="1" get="inline" set="null" expr="cast &quot;application/acad&quot;" line="75" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/acad"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationAcad>
		<ApplicationDxf public="1" get="inline" set="null" expr="cast &quot;application/dxf&quot;" line="76" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/dxf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationDxf>
		<TextXScriptElisp public="1" get="inline" set="null" expr="cast &quot;text/x-script.elisp&quot;" line="77" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.elisp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptElisp>
		<ApplicationXBytecodeElisp public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.elisp (compiled elisp)&quot;" line="78" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bytecode.elisp (compiled elisp)"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBytecodeElisp>
		<ApplicationXEnvoy public="1" get="inline" set="null" expr="cast &quot;application/x-envoy&quot;" line="79" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-envoy"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXEnvoy>
		<ApplicationXEsrehber public="1" get="inline" set="null" expr="cast &quot;application/x-esrehber&quot;" line="80" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-esrehber"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXEsrehber>
		<TextXSetext public="1" get="inline" set="null" expr="cast &quot;text/x-setext&quot;" line="81" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-setext"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXSetext>
		<ApplicationEnvoy public="1" get="inline" set="null" expr="cast &quot;application/envoy&quot;" line="82" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/envoy"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationEnvoy>
		<TextXFortran public="1" get="inline" set="null" expr="cast &quot;text/x-fortran&quot;" line="83" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-fortran"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXFortran>
		<ApplicationVndFdf public="1" get="inline" set="null" expr="cast &quot;application/vnd.fdf&quot;" line="84" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.fdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndFdf>
		<ImageFif public="1" get="inline" set="null" expr="cast &quot;image/fif&quot;" line="85" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/fif"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageFif>
		<VideoFli public="1" get="inline" set="null" expr="cast &quot;video/fli&quot;" line="86" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/fli"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoFli>
		<ImageFlorian public="1" get="inline" set="null" expr="cast &quot;image/florian&quot;" line="87" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/florian"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageFlorian>
		<TextVndFmiFlexstor public="1" get="inline" set="null" expr="cast &quot;text/vnd.fmi.flexstor&quot;" line="88" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.fmi.flexstor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextVndFmiFlexstor>
		<VideoXAtomic3dFeature public="1" get="inline" set="null" expr="cast &quot;video/x-atomic3d-feature&quot;" line="89" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-atomic3d-feature"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXAtomic3dFeature>
		<ImageVndFpx public="1" get="inline" set="null" expr="cast &quot;image/vnd.fpx&quot;" line="90" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.fpx"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndFpx>
		<ApplicationFreeloader public="1" get="inline" set="null" expr="cast &quot;application/freeloader&quot;" line="91" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/freeloader"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationFreeloader>
		<AudioMake public="1" get="inline" set="null" expr="cast &quot;audio/make&quot;" line="92" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/make"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMake>
		<ImageG3fax public="1" get="inline" set="null" expr="cast &quot;image/g3fax&quot;" line="93" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/g3fax"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageG3fax>
		<ImageGif public="1" get="inline" set="null" expr="cast &quot;image/gif&quot;" line="94" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/gif"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageGif>
		<VideoGl public="1" get="inline" set="null" expr="cast &quot;video/gl&quot;" line="95" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/gl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoGl>
		<AudioXGsm public="1" get="inline" set="null" expr="cast &quot;audio/x-gsm&quot;" line="96" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-gsm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXGsm>
		<ApplicationXGsp public="1" get="inline" set="null" expr="cast &quot;application/x-gsp&quot;" line="97" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gsp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXGsp>
		<ApplicationXGss public="1" get="inline" set="null" expr="cast &quot;application/x-gss&quot;" line="98" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gss"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXGss>
		<ApplicationXGtar public="1" get="inline" set="null" expr="cast &quot;application/x-gtar&quot;" line="99" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gtar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXGtar>
		<ApplicationXCompressed public="1" get="inline" set="null" expr="cast &quot;application/x-compressed&quot;" line="100" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-compressed"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCompressed>
		<ApplicationXGzip public="1" get="inline" set="null" expr="cast &quot;application/x-gzip&quot;" line="101" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gzip"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXGzip>
		<ApplicationXHdf public="1" get="inline" set="null" expr="cast &quot;application/x-hdf&quot;" line="102" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-hdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXHdf>
		<ApplicationXHelpfile public="1" get="inline" set="null" expr="cast &quot;application/x-helpfile&quot;" line="103" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-helpfile"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXHelpfile>
		<TextXScript public="1" get="inline" set="null" expr="cast &quot;text/x-script&quot;" line="104" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScript>
		<ApplicationHlp public="1" get="inline" set="null" expr="cast &quot;application/hlp&quot;" line="105" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/hlp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationHlp>
		<ApplicationVndHpHpgl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-hpgl&quot;" line="106" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.hp-hpgl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndHpHpgl>
		<ApplicationBinhex public="1" get="inline" set="null" expr="cast &quot;application/binhex&quot;" line="107" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/binhex"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationBinhex>
		<ApplicationHta public="1" get="inline" set="null" expr="cast &quot;application/hta&quot;" line="108" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/hta"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationHta>
		<TextXComponent public="1" get="inline" set="null" expr="cast &quot;text/x-component&quot;" line="109" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-component"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXComponent>
		<TextWebviewhtml public="1" get="inline" set="null" expr="cast &quot;text/webviewhtml&quot;" line="110" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/webviewhtml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextWebviewhtml>
		<XConferenceXCooltalk public="1" get="inline" set="null" expr="cast &quot;x-conference/x-cooltalk&quot;" line="111" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-conference/x-cooltalk"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XConferenceXCooltalk>
		<ImageXIcon public="1" get="inline" set="null" expr="cast &quot;image/x-icon&quot;" line="112" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-icon"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXIcon>
		<ImageIef public="1" get="inline" set="null" expr="cast &quot;image/ief&quot;" line="113" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/ief"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageIef>
		<ApplicationIges public="1" get="inline" set="null" expr="cast &quot;application/iges&quot;" line="114" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/iges"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationIges>
		<ApplicationXIma public="1" get="inline" set="null" expr="cast &quot;application/x-ima&quot;" line="115" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ima"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXIma>
		<ApplicationXHttpdImap public="1" get="inline" set="null" expr="cast &quot;application/x-httpd-imap&quot;" line="116" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-httpd-imap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXHttpdImap>
		<ApplicationInf public="1" get="inline" set="null" expr="cast &quot;application/inf&quot;" line="117" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/inf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationInf>
		<ApplicationXInternettSignup public="1" get="inline" set="null" expr="cast &quot;application/x-internett-signup&quot;" line="118" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-internett-signup"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXInternettSignup>
		<ApplicationXIp2 public="1" get="inline" set="null" expr="cast &quot;application/x-ip2&quot;" line="119" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ip2"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXIp2>
		<VideoXIsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-isvideo&quot;" line="120" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-isvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXIsvideo>
		<AudioIt public="1" get="inline" set="null" expr="cast &quot;audio/it&quot;" line="121" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/it"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioIt>
		<ApplicationXInventor public="1" get="inline" set="null" expr="cast &quot;application/x-inventor&quot;" line="122" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-inventor"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXInventor>
		<IWorldIVrml public="1" get="inline" set="null" expr="cast &quot;i-world/i-vrml&quot;" line="123" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "i-world/i-vrml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IWorldIVrml>
		<ApplicationXLivescreen public="1" get="inline" set="null" expr="cast &quot;application/x-livescreen&quot;" line="124" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-livescreen"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLivescreen>
		<AudioXJam public="1" get="inline" set="null" expr="cast &quot;audio/x-jam&quot;" line="125" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-jam"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXJam>
		<ApplicationXJavaCommerce public="1" get="inline" set="null" expr="cast &quot;application/x-java-commerce&quot;" line="126" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-java-commerce"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXJavaCommerce>
		<ImageJpeg public="1" get="inline" set="null" expr="cast &quot;image/jpeg&quot;" line="127" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/jpeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageJpeg>
		<ImageXJps public="1" get="inline" set="null" expr="cast &quot;image/x-jps&quot;" line="128" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-jps"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXJps>
		<TextJavascript public="1" get="inline" set="null" expr="cast &quot;text/javascript&quot;" line="129" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/javascript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextJavascript>
		<ApplicationJson public="1" get="inline" set="null" expr="cast &quot;application/json&quot;" line="130" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/json"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationJson>
		<ApplicationJavascript public="1" get="inline" set="null" expr="cast &quot;application/javascript&quot;" line="131" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/javascript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationJavascript>
		<ImageJutvision public="1" get="inline" set="null" expr="cast &quot;image/jutvision&quot;" line="132" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/jutvision"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageJutvision>
		<AudioMidi public="1" get="inline" set="null" expr="cast &quot;audio/midi&quot;" line="133" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/midi"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMidi>
		<ApplicationXKsh public="1" get="inline" set="null" expr="cast &quot;application/x-ksh&quot;" line="134" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ksh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXKsh>
		<AudioNspaudio public="1" get="inline" set="null" expr="cast &quot;audio/nspaudio&quot;" line="135" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/nspaudio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioNspaudio>
		<AudioXLiveaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-liveaudio&quot;" line="136" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-liveaudio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXLiveaudio>
		<ApplicationXLatex public="1" get="inline" set="null" expr="cast &quot;application/x-latex&quot;" line="137" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-latex"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLatex>
		<ApplicationXLisp public="1" get="inline" set="null" expr="cast &quot;application/x-lisp&quot;" line="138" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lisp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLisp>
		<TextXLaAsf public="1" get="inline" set="null" expr="cast &quot;text/x-la-asf&quot;" line="139" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-la-asf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXLaAsf>
		<ApplicationLzx public="1" get="inline" set="null" expr="cast &quot;application/lzx&quot;" line="140" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/lzx"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationLzx>
		<VideoMpeg public="1" get="inline" set="null" expr="cast &quot;video/mpeg&quot;" line="141" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/mpeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoMpeg>
		<AudioMpeg public="1" get="inline" set="null" expr="cast &quot;audio/mpeg&quot;" line="142" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mpeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMpeg>
		<AudioXMpequrl public="1" get="inline" set="null" expr="cast &quot;audio/x-mpequrl&quot;" line="143" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-mpequrl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXMpequrl>
		<ApplicationXTroffMan public="1" get="inline" set="null" expr="cast &quot;application/x-troff-man&quot;" line="144" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-man"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroffMan>
		<ApplicationXNavimap public="1" get="inline" set="null" expr="cast &quot;application/x-navimap&quot;" line="145" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navimap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNavimap>
		<ApplicationMbedlet public="1" get="inline" set="null" expr="cast &quot;application/mbedlet&quot;" line="146" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mbedlet"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMbedlet>
		<ApplicationXMagicCapPackage10 public="1" get="inline" set="null" expr="cast &quot;application/x-magic-cap-package-1.0&quot;" line="147" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-magic-cap-package-1.0"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMagicCapPackage10>
		<ApplicationMcad public="1" get="inline" set="null" expr="cast &quot;application/mcad&quot;" line="148" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mcad"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMcad>
		<ImageVasa public="1" get="inline" set="null" expr="cast &quot;image/vasa&quot;" line="149" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vasa"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVasa>
		<ApplicationNetmc public="1" get="inline" set="null" expr="cast &quot;application/netmc&quot;" line="150" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/netmc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationNetmc>
		<ApplicationXTroffMe public="1" get="inline" set="null" expr="cast &quot;application/x-troff-me&quot;" line="151" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-me"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroffMe>
		<MessageRfc822 public="1" get="inline" set="null" expr="cast &quot;message/rfc822&quot;" line="152" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "message/rfc822"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MessageRfc822>
		<ApplicationXMif public="1" get="inline" set="null" expr="cast &quot;application/x-mif&quot;" line="153" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mif"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMif>
		<WwwMime public="1" get="inline" set="null" expr="cast &quot;www/mime&quot;" line="154" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "www/mime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WwwMime>
		<AudioXVndAudioexplosionMjuicemediafile public="1" get="inline" set="null" expr="cast &quot;audio/x-vnd.audioexplosion.mjuicemediafile&quot;" line="155" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-vnd.audioexplosion.mjuicemediafile"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXVndAudioexplosionMjuicemediafile>
		<VideoXMotionJpeg public="1" get="inline" set="null" expr="cast &quot;video/x-motion-jpeg&quot;" line="156" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-motion-jpeg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXMotionJpeg>
		<ApplicationBase64 public="1" get="inline" set="null" expr="cast &quot;application/base64&quot;" line="157" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/base64"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationBase64>
		<AudioMod public="1" get="inline" set="null" expr="cast &quot;audio/mod&quot;" line="158" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mod"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMod>
		<VideoQuicktime public="1" get="inline" set="null" expr="cast &quot;video/quicktime&quot;" line="159" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/quicktime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoQuicktime>
		<VideoXSgiMovie public="1" get="inline" set="null" expr="cast &quot;video/x-sgi-movie&quot;" line="160" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-sgi-movie"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXSgiMovie>
		<AudioMpeg3 public="1" get="inline" set="null" expr="cast &quot;audio/mpeg3&quot;" line="161" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mpeg3"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMpeg3>
		<ApplicationXProject public="1" get="inline" set="null" expr="cast &quot;application/x-project&quot;" line="162" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-project"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXProject>
		<ApplicationVndMsProject public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-project&quot;" line="163" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-project"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsProject>
		<ApplicationMarc public="1" get="inline" set="null" expr="cast &quot;application/marc&quot;" line="164" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/marc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMarc>
		<ApplicationXTroffMs public="1" get="inline" set="null" expr="cast &quot;application/x-troff-ms&quot;" line="165" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-ms"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroffMs>
		<ApplicationXVndAudioexplosionMzz public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.audioexplosion.mzz&quot;" line="166" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vnd.audioexplosion.mzz"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXVndAudioexplosionMzz>
		<ImageNaplps public="1" get="inline" set="null" expr="cast &quot;image/naplps&quot;" line="167" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/naplps"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageNaplps>
		<ApplicationVndNokiaConfigurationMessage public="1" get="inline" set="null" expr="cast &quot;application/vnd.nokia.configuration-message&quot;" line="168" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.nokia.configuration-message"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndNokiaConfigurationMessage>
		<ImageXNiff public="1" get="inline" set="null" expr="cast &quot;image/x-niff&quot;" line="169" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-niff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXNiff>
		<ApplicationXMixTransfer public="1" get="inline" set="null" expr="cast &quot;application/x-mix-transfer&quot;" line="170" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mix-transfer"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXMixTransfer>
		<ApplicationXConference public="1" get="inline" set="null" expr="cast &quot;application/x-conference&quot;" line="171" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-conference"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXConference>
		<ApplicationXNavidoc public="1" get="inline" set="null" expr="cast &quot;application/x-navidoc&quot;" line="172" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navidoc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNavidoc>
		<ApplicationOda public="1" get="inline" set="null" expr="cast &quot;application/oda&quot;" line="173" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/oda"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationOda>
		<ApplicationXOmc public="1" get="inline" set="null" expr="cast &quot;application/x-omc&quot;" line="174" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXOmc>
		<ApplicationXOmcdatamaker public="1" get="inline" set="null" expr="cast &quot;application/x-omcdatamaker&quot;" line="175" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omcdatamaker"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXOmcdatamaker>
		<ApplicationXOmcregerator public="1" get="inline" set="null" expr="cast &quot;application/x-omcregerator&quot;" line="176" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omcregerator"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXOmcregerator>
		<TextXPascal public="1" get="inline" set="null" expr="cast &quot;text/x-pascal&quot;" line="177" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-pascal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXPascal>
		<ApplicationPkcs10 public="1" get="inline" set="null" expr="cast &quot;application/pkcs10&quot;" line="178" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs10"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcs10>
		<ApplicationPkcs12 public="1" get="inline" set="null" expr="cast &quot;application/pkcs-12&quot;" line="179" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs-12"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcs12>
		<ApplicationXPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-signature&quot;" line="180" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-signature"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPkcs7Signature>
		<ApplicationPkcs7Mime public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-mime&quot;" line="181" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs7-mime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcs7Mime>
		<ApplicationXPkcs7Certreqresp public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certreqresp&quot;" line="182" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-certreqresp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPkcs7Certreqresp>
		<ApplicationPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-signature&quot;" line="183" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs7-signature"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPkcs7Signature>
		<ApplicationPro_eng public="1" get="inline" set="null" expr="cast &quot;application/pro_eng&quot;" line="184" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pro_eng"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPro_eng>
		<TextPascal public="1" get="inline" set="null" expr="cast &quot;text/pascal&quot;" line="185" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/pascal"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextPascal>
		<ImageXPortableBitmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-bitmap&quot;" line="186" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-bitmap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPortableBitmap>
		<ApplicationVndHpPcl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-pcl&quot;" line="187" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.hp-pcl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndHpPcl>
		<ImageXPict public="1" get="inline" set="null" expr="cast &quot;image/x-pict&quot;" line="188" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-pict"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPict>
		<ImageXPcx public="1" get="inline" set="null" expr="cast &quot;image/x-pcx&quot;" line="189" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-pcx"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPcx>
		<ChemicalXPdb public="1" get="inline" set="null" expr="cast &quot;chemical/x-pdb&quot;" line="190" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "chemical/x-pdb"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ChemicalXPdb>
		<ApplicationPdf public="1" get="inline" set="null" expr="cast &quot;application/pdf&quot;" line="191" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pdf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationPdf>
		<ImageXPortableGraymap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-graymap&quot;" line="192" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-graymap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPortableGraymap>
		<ImagePict public="1" get="inline" set="null" expr="cast &quot;image/pict&quot;" line="193" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/pict"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImagePict>
		<ApplicationXNewtonCompatiblePkg public="1" get="inline" set="null" expr="cast &quot;application/x-newton-compatible-pkg&quot;" line="194" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-newton-compatible-pkg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXNewtonCompatiblePkg>
		<ApplicationVndMsPkiPko public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.pko&quot;" line="195" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.pko"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsPkiPko>
		<ApplicationXPixclscript public="1" get="inline" set="null" expr="cast &quot;application/x-pixclscript&quot;" line="196" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pixclscript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPixclscript>
		<ImageXXpixmap public="1" get="inline" set="null" expr="cast &quot;image/x-xpixmap&quot;" line="197" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xpixmap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXXpixmap>
		<ApplicationXPagemaker public="1" get="inline" set="null" expr="cast &quot;application/x-pagemaker&quot;" line="198" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pagemaker"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPagemaker>
		<ImagePng public="1" get="inline" set="null" expr="cast &quot;image/png&quot;" line="199" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/png"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImagePng>
		<ApplicationXPortableAnymap public="1" get="inline" set="null" expr="cast &quot;application/x-portable-anymap&quot;" line="200" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-portable-anymap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPortableAnymap>
		<ApplicationMspowerpoint public="1" get="inline" set="null" expr="cast &quot;application/mspowerpoint&quot;" line="201" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mspowerpoint"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMspowerpoint>
		<ModelXPov public="1" get="inline" set="null" expr="cast &quot;model/x-pov&quot;" line="202" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "model/x-pov"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ModelXPov>
		<ApplicationVndMsPowerpoint public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-powerpoint&quot;" line="203" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-powerpoint"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsPowerpoint>
		<ImageXPortablePixmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-pixmap&quot;" line="204" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-pixmap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXPortablePixmap>
		<ApplicationXFreelance public="1" get="inline" set="null" expr="cast &quot;application/x-freelance&quot;" line="205" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-freelance"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXFreelance>
		<PaleovuXPv public="1" get="inline" set="null" expr="cast &quot;paleovu/x-pv&quot;" line="206" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "paleovu/x-pv"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PaleovuXPv>
		<TextXScriptPhyton public="1" get="inline" set="null" expr="cast &quot;text/x-script.phyton&quot;" line="207" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.phyton"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptPhyton>
		<ApplicationXBytecodePython public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.python&quot;" line="208" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bytecode.python"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXBytecodePython>
		<AudioVndQcelp public="1" get="inline" set="null" expr="cast &quot;audio/vnd.qcelp&quot;" line="209" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/vnd.qcelp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioVndQcelp>
		<ImageXQuicktime public="1" get="inline" set="null" expr="cast &quot;image/x-quicktime&quot;" line="210" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-quicktime"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXQuicktime>
		<VideoXQtc public="1" get="inline" set="null" expr="cast &quot;video/x-qtc&quot;" line="211" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-qtc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXQtc>
		<AudioXPnRealaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio&quot;" line="212" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-pn-realaudio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXPnRealaudio>
		<ApplicationXCmuRaster public="1" get="inline" set="null" expr="cast &quot;application/x-cmu-raster&quot;" line="213" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cmu-raster"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCmuRaster>
		<ImageCmuRaster public="1" get="inline" set="null" expr="cast &quot;image/cmu-raster&quot;" line="214" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/cmu-raster"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageCmuRaster>
		<TextXScriptRexx public="1" get="inline" set="null" expr="cast &quot;text/x-script.rexx&quot;" line="215" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.rexx"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptRexx>
		<ImageVndRnRealflash public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realflash&quot;" line="216" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.rn-realflash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndRnRealflash>
		<ImageXRgb public="1" get="inline" set="null" expr="cast &quot;image/x-rgb&quot;" line="217" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-rgb"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXRgb>
		<ApplicationVndRnRealmedia public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realmedia&quot;" line="218" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.rn-realmedia"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndRnRealmedia>
		<AudioMid public="1" get="inline" set="null" expr="cast &quot;audio/mid&quot;" line="219" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mid"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioMid>
		<ApplicationRingingTones public="1" get="inline" set="null" expr="cast &quot;application/ringing-tones&quot;" line="220" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/ringing-tones"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationRingingTones>
		<ApplicationVndRnRealplayer public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realplayer&quot;" line="221" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.rn-realplayer"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndRnRealplayer>
		<ApplicationXTroff public="1" get="inline" set="null" expr="cast &quot;application/x-troff&quot;" line="222" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTroff>
		<ImageVndRnRealpix public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realpix&quot;" line="223" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.rn-realpix"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndRnRealpix>
		<AudioXPnRealaudioPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio-plugin&quot;" line="224" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-pn-realaudio-plugin"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXPnRealaudioPlugin>
		<TextRichtext public="1" get="inline" set="null" expr="cast &quot;text/richtext&quot;" line="225" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/richtext"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextRichtext>
		<ApplicationRtf public="1" get="inline" set="null" expr="cast &quot;application/rtf&quot;" line="226" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/rtf"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationRtf>
		<VideoVndRnRealvideo public="1" get="inline" set="null" expr="cast &quot;video/vnd.rn-realvideo&quot;" line="227" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vnd.rn-realvideo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoVndRnRealvideo>
		<AudioS3m public="1" get="inline" set="null" expr="cast &quot;audio/s3m&quot;" line="228" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/s3m"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioS3m>
		<ApplicationXTbook public="1" get="inline" set="null" expr="cast &quot;application/x-tbook&quot;" line="229" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tbook"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTbook>
		<ApplicationXLotusscreencam public="1" get="inline" set="null" expr="cast &quot;application/x-lotusscreencam&quot;" line="230" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lotusscreencam"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLotusscreencam>
		<ApplicationSdp public="1" get="inline" set="null" expr="cast &quot;application/sdp&quot;" line="231" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sdp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSdp>
		<ApplicationSounder public="1" get="inline" set="null" expr="cast &quot;application/sounder&quot;" line="232" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sounder"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSounder>
		<ApplicationSea public="1" get="inline" set="null" expr="cast &quot;application/sea&quot;" line="233" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sea"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSea>
		<ApplicationSet public="1" get="inline" set="null" expr="cast &quot;application/set&quot;" line="234" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/set"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSet>
		<AudioXPsid public="1" get="inline" set="null" expr="cast &quot;audio/x-psid&quot;" line="235" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-psid"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXPsid>
		<ApplicationXSit public="1" get="inline" set="null" expr="cast &quot;application/x-sit&quot;" line="236" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sit"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSit>
		<ApplicationXKoan public="1" get="inline" set="null" expr="cast &quot;application/x-koan&quot;" line="237" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-koan"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXKoan>
		<ApplicationXSeelogo public="1" get="inline" set="null" expr="cast &quot;application/x-seelogo&quot;" line="238" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-seelogo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSeelogo>
		<ApplicationSmil public="1" get="inline" set="null" expr="cast &quot;application/smil&quot;" line="239" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/smil"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSmil>
		<ApplicationSolids public="1" get="inline" set="null" expr="cast &quot;application/solids&quot;" line="240" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/solids"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSolids>
		<ApplicationXPkcs7Certificates public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certificates&quot;" line="241" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-certificates"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXPkcs7Certificates>
		<ApplicationFuturesplash public="1" get="inline" set="null" expr="cast &quot;application/futuresplash&quot;" line="242" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/futuresplash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationFuturesplash>
		<ApplicationXSprite public="1" get="inline" set="null" expr="cast &quot;application/x-sprite&quot;" line="243" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sprite"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSprite>
		<ApplicationXWaisSource public="1" get="inline" set="null" expr="cast &quot;application/x-wais-source&quot;" line="244" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-wais-source"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXWaisSource>
		<TextXServerParsedHtml public="1" get="inline" set="null" expr="cast &quot;text/x-server-parsed-html&quot;" line="245" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-server-parsed-html"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXServerParsedHtml>
		<ApplicationStreamingmedia public="1" get="inline" set="null" expr="cast &quot;application/streamingmedia&quot;" line="246" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/streamingmedia"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationStreamingmedia>
		<ApplicationVndMsPkiCertstore public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.certstore&quot;" line="247" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.certstore"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndMsPkiCertstore>
		<ApplicationStep public="1" get="inline" set="null" expr="cast &quot;application/step&quot;" line="248" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/step"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationStep>
		<ApplicationSla public="1" get="inline" set="null" expr="cast &quot;application/sla&quot;" line="249" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sla"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationSla>
		<ApplicationXSv4cpio public="1" get="inline" set="null" expr="cast &quot;application/x-sv4cpio&quot;" line="250" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sv4cpio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSv4cpio>
		<ApplicationXSv4crc public="1" get="inline" set="null" expr="cast &quot;application/x-sv4crc&quot;" line="251" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sv4crc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXSv4crc>
		<ImageVndDwg public="1" get="inline" set="null" expr="cast &quot;image/vnd.dwg&quot;" line="252" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.dwg"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndDwg>
		<ApplicationXWorld public="1" get="inline" set="null" expr="cast &quot;application/x-world&quot;" line="253" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-world"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXWorld>
		<ApplicationXShockwaveFlash public="1" get="inline" set="null" expr="cast &quot;application/x-shockwave-flash&quot;" line="254" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-shockwave-flash"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXShockwaveFlash>
		<TextXSpeech public="1" get="inline" set="null" expr="cast &quot;text/x-speech&quot;" line="255" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-speech"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXSpeech>
		<ApplicationXTar public="1" get="inline" set="null" expr="cast &quot;application/x-tar&quot;" line="256" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTar>
		<ApplicationToolbook public="1" get="inline" set="null" expr="cast &quot;application/toolbook&quot;" line="257" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/toolbook"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationToolbook>
		<ApplicationXTcl public="1" get="inline" set="null" expr="cast &quot;application/x-tcl&quot;" line="258" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tcl"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTcl>
		<TextXScriptTcsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.tcsh&quot;" line="259" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.tcsh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptTcsh>
		<ApplicationXTex public="1" get="inline" set="null" expr="cast &quot;application/x-tex&quot;" line="260" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tex"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTex>
		<ApplicationXTexinfo public="1" get="inline" set="null" expr="cast &quot;application/x-texinfo&quot;" line="261" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-texinfo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXTexinfo>
		<ApplicationGnutar public="1" get="inline" set="null" expr="cast &quot;application/gnutar&quot;" line="262" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/gnutar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationGnutar>
		<ImageTiff public="1" get="inline" set="null" expr="cast &quot;image/tiff&quot;" line="263" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/tiff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageTiff>
		<AudioTspAudio public="1" get="inline" set="null" expr="cast &quot;audio/tsp-audio&quot;" line="264" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/tsp-audio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioTspAudio>
		<ApplicationDsptype public="1" get="inline" set="null" expr="cast &quot;application/dsptype&quot;" line="265" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/dsptype"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationDsptype>
		<TextTabSeparatedValues public="1" get="inline" set="null" expr="cast &quot;text/tab-separated-values&quot;" line="266" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/tab-separated-values"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextTabSeparatedValues>
		<TextXUil public="1" get="inline" set="null" expr="cast &quot;text/x-uil&quot;" line="267" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-uil"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXUil>
		<TextUriList public="1" get="inline" set="null" expr="cast &quot;text/uri-list&quot;" line="268" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/uri-list"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextUriList>
		<ApplicationIDeas public="1" get="inline" set="null" expr="cast &quot;application/i-deas&quot;" line="269" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/i-deas"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationIDeas>
		<ApplicationXUstar public="1" get="inline" set="null" expr="cast &quot;application/x-ustar&quot;" line="270" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ustar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXUstar>
		<TextXUuencode public="1" get="inline" set="null" expr="cast &quot;text/x-uuencode&quot;" line="271" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-uuencode"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXUuencode>
		<ApplicationXCdlink public="1" get="inline" set="null" expr="cast &quot;application/x-cdlink&quot;" line="272" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cdlink"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCdlink>
		<TextXVcalendar public="1" get="inline" set="null" expr="cast &quot;text/x-vcalendar&quot;" line="273" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-vcalendar"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXVcalendar>
		<ApplicationVda public="1" get="inline" set="null" expr="cast &quot;application/vda&quot;" line="274" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vda"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVda>
		<VideoVdo public="1" get="inline" set="null" expr="cast &quot;video/vdo&quot;" line="275" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vdo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoVdo>
		<ApplicationGroupwise public="1" get="inline" set="null" expr="cast &quot;application/groupwise&quot;" line="276" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/groupwise"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationGroupwise>
		<VideoVivo public="1" get="inline" set="null" expr="cast &quot;video/vivo&quot;" line="277" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vivo"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoVivo>
		<ApplicationVocaltecMediaDesc public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-desc&quot;" line="278" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vocaltec-media-desc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVocaltecMediaDesc>
		<ApplicationVocaltecMediaFile public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-file&quot;" line="279" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vocaltec-media-file"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVocaltecMediaFile>
		<AudioVoc public="1" get="inline" set="null" expr="cast &quot;audio/voc&quot;" line="280" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/voc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioVoc>
		<VideoVosaic public="1" get="inline" set="null" expr="cast &quot;video/vosaic&quot;" line="281" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vosaic"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoVosaic>
		<AudioVoxware public="1" get="inline" set="null" expr="cast &quot;audio/voxware&quot;" line="282" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/voxware"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioVoxware>
		<AudioXTwinvqPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq-plugin&quot;" line="283" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-twinvq-plugin"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXTwinvqPlugin>
		<AudioXTwinvq public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq&quot;" line="284" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-twinvq"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXTwinvq>
		<ApplicationXVrml public="1" get="inline" set="null" expr="cast &quot;application/x-vrml&quot;" line="285" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vrml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXVrml>
		<XWorldXVrt public="1" get="inline" set="null" expr="cast &quot;x-world/x-vrt&quot;" line="286" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-world/x-vrt"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XWorldXVrt>
		<ApplicationXVisio public="1" get="inline" set="null" expr="cast &quot;application/x-visio&quot;" line="287" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-visio"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXVisio>
		<ApplicationWordperfect60 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.0&quot;" line="288" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect6.0"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationWordperfect60>
		<ApplicationWordperfect61 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.1&quot;" line="289" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect6.1"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationWordperfect61>
		<AudioWav public="1" get="inline" set="null" expr="cast &quot;audio/wav&quot;" line="290" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/wav"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioWav>
		<ApplicationXQpro public="1" get="inline" set="null" expr="cast &quot;application/x-qpro&quot;" line="291" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-qpro"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXQpro>
		<ImageVndWapWbmp public="1" get="inline" set="null" expr="cast &quot;image/vnd.wap.wbmp&quot;" line="292" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.wap.wbmp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndWapWbmp>
		<ApplicationVndXara public="1" get="inline" set="null" expr="cast &quot;application/vnd.xara&quot;" line="293" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.xara"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndXara>
		<ImageWebp public="1" get="inline" set="null" expr="cast &quot;image/webp&quot;" line="294" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/webp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageWebp>
		<ApplicationX123 public="1" get="inline" set="null" expr="cast &quot;application/x-123&quot;" line="295" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-123"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationX123>
		<WindowsMetafile public="1" get="inline" set="null" expr="cast &quot;windows/metafile&quot;" line="296" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "windows/metafile"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WindowsMetafile>
		<TextVndWapWml public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wml&quot;" line="297" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.wap.wml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextVndWapWml>
		<ApplicationVndWapWmlc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlc&quot;" line="298" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.wap.wmlc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndWapWmlc>
		<TextVndWapWmlscript public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wmlscript&quot;" line="299" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.wap.wmlscript"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextVndWapWmlscript>
		<ApplicationVndWapWmlscriptc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlscriptc&quot;" line="300" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.wap.wmlscriptc"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationVndWapWmlscriptc>
		<ApplicationWordperfect public="1" get="inline" set="null" expr="cast &quot;application/wordperfect&quot;" line="301" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationWordperfect>
		<ApplicationXLotus public="1" get="inline" set="null" expr="cast &quot;application/x-lotus&quot;" line="302" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lotus"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXLotus>
		<ApplicationMswrite public="1" get="inline" set="null" expr="cast &quot;application/mswrite&quot;" line="303" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mswrite"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationMswrite>
		<ModelVrml public="1" get="inline" set="null" expr="cast &quot;model/vrml&quot;" line="304" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "model/vrml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ModelVrml>
		<TextScriplet public="1" get="inline" set="null" expr="cast &quot;text/scriplet&quot;" line="305" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/scriplet"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextScriplet>
		<ApplicationXWintalk public="1" get="inline" set="null" expr="cast &quot;application/x-wintalk&quot;" line="306" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-wintalk"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXWintalk>
		<ImageXXbitmap public="1" get="inline" set="null" expr="cast &quot;image/x-xbitmap&quot;" line="307" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xbitmap"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXXbitmap>
		<VideoXAmtDemorun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-demorun&quot;" line="308" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-amt-demorun"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXAmtDemorun>
		<XglDrawing public="1" get="inline" set="null" expr="cast &quot;xgl/drawing&quot;" line="309" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "xgl/drawing"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XglDrawing>
		<ImageVndXiff public="1" get="inline" set="null" expr="cast &quot;image/vnd.xiff&quot;" line="310" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.xiff"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageVndXiff>
		<ApplicationExcel public="1" get="inline" set="null" expr="cast &quot;application/excel&quot;" line="311" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/excel"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationExcel>
		<AudioXm public="1" get="inline" set="null" expr="cast &quot;audio/xm&quot;" line="312" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/xm"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</AudioXm>
		<ApplicationXml public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="313" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/xml"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXml>
		<XglMovie public="1" get="inline" set="null" expr="cast &quot;xgl/movie&quot;" line="314" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "xgl/movie"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</XglMovie>
		<ApplicationXVndLsXpix public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.ls-xpix&quot;" line="315" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vnd.ls-xpix"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXVndLsXpix>
		<VideoXAmtShowrun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-showrun&quot;" line="316" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-amt-showrun"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</VideoXAmtShowrun>
		<ImageXXwd public="1" get="inline" set="null" expr="cast &quot;image/x-xwd&quot;" line="317" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xwd"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageXXwd>
		<ApplicationXCompress public="1" get="inline" set="null" expr="cast &quot;application/x-compress&quot;" line="318" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-compress"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ApplicationXCompress>
		<MultipartXZip public="1" get="inline" set="null" expr="cast &quot;multipart/x-zip&quot;" line="319" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "multipart/x-zip"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MultipartXZip>
		<TextXScriptZsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.zsh&quot;" line="320" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.zsh"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TextXScriptZsh>
		<ImageAvif public="1" get="inline" set="null" expr="cast &quot;image/avif&quot;" line="321" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/avif"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ImageAvif>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.io.Path" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Path.hx">
		<withoutExtension public="1" set="method" line="123" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the file extension.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutExtension>
		<withoutDirectory public="1" set="method" line="134" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the directory.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutDirectory>
		<directory public="1" set="method" line="147" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of `path`.

		If the directory is `null`, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</directory>
		<extension public="1" set="method" line="161" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If `path` has no extension, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</extension>
		<withExtension public="1" set="method" line="175" static="1">
			<f a="path:ext">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `path` where the extension is `ext`.

		If `path` has no extension, `ext` is added as extension.

		If `path` or `ext` are `null`, the result is unspecified.</haxe_doc>
		</withExtension>
		<join public="1" set="method" line="189" static="1">
			<f a="paths">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all paths in `paths` together.

		If `paths` is empty, the empty String `""` is returned. Otherwise the
		paths are joined with a slash between them.

		If `paths` is `null`, the result is unspecified.</haxe_doc>
		</join>
		<normalize public="1" set="method" line="210" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Normalize a given `path` (e.g. turn `'/usr/local/../lib'` into `'/usr/lib'`).

		Also replaces backslashes `\` with slashes `/` and afterwards turns
		multiple slashes into a single one.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</normalize>
		<addTrailingSlash public="1" set="method" line="271" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		`""`.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="299" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<isAbsolute public="1" set="method" line="314" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the path is an absolute path, and `false` otherwise.</haxe_doc>
		</isAbsolute>
		<unescape set="method" line="324" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></unescape>
		<escape set="method" line="329" static="1">
			<f a="path:?allowSlashes" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ allowSlashes : false }</e></m></meta>
		</escape>
		<dir public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is `null`.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for `".htaccess"` or `"/dir/"`, the value
		is the empty String `""`.</haxe_doc>
		</file>
		<ext public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is `null`.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>`true` if the last directory separator is a backslash, `false` otherwise.</haxe_doc>
		</backslash>
		<toString public="1" set="method" line="114">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` path.

		If `this.backslash` is `true`, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		`this.dir` and `this.file`.

		If `this.directory` or `this.extension` is `null`, their representation
		is the empty String `""`.</haxe_doc>
		</toString>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Path` instance by parsing `path`.

		Path information can be retrieved by accessing the `dir`, `file` and `ext`
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- `directory1/directory2/filename.extension`
	- `directory1\directory2\filename.extension`</haxe_doc>
	</class>
	<abstract path="haxe.io.Scheme" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Scheme.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>A scheme consists of a sequence of characters beginning with a letter and followed
	by any combination of letters, digits, plus (`+`, period (`.`), or hyphen (`-`).

	Although schemes are case-insensitive, the canonical form is lowercase
	and documents that specify schemes must do so with lowercase letters.
	It is followed by a colon (`:`).</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.io._Scheme.Scheme_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Scheme.hx" private="1" module="haxe.io.Scheme" extern="1" final="1">
	<Http public="1" get="inline" set="null" expr="cast &quot;http&quot;" line="12" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "http"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Http>
	<Https public="1" get="inline" set="null" expr="cast &quot;https&quot;" line="13" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "https"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Https>
	<Ftp public="1" get="inline" set="null" expr="cast &quot;ftp&quot;" line="14" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "ftp"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Ftp>
	<MailTo public="1" get="inline" set="null" expr="cast &quot;mailto&quot;" line="15" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "mailto"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</MailTo>
	<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="16" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "file"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</File>
	<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="17" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "data"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</Data>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Scheme.Scheme_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/Scheme.hx" private="1" module="haxe.io.Scheme" extern="1" final="1">
		<Http public="1" get="inline" set="null" expr="cast &quot;http&quot;" line="12" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "http"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Http>
		<Https public="1" get="inline" set="null" expr="cast &quot;https&quot;" line="13" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "https"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Https>
		<Ftp public="1" get="inline" set="null" expr="cast &quot;ftp&quot;" line="14" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "ftp"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Ftp>
		<MailTo public="1" get="inline" set="null" expr="cast &quot;mailto&quot;" line="15" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "mailto"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</MailTo>
		<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="16" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "file"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</File>
		<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="17" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "data"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</Data>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.io.StringInput" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.io.UInt16ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt16Array.hx" module="haxe.io.UInt16Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt16Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt16Array.hx">
		<this><t path="haxe.io.UInt16ArrayData"/></this>
		<impl><class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt16Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt16Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<t path="haxe.io.UInt16ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt16Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt16Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt16ArrayData"/>
	<t path="haxe.io.UInt16ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.UInt32ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt32Array.hx" module="haxe.io.UInt32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt32Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt32Array.hx">
		<this><t path="haxe.io.UInt32ArrayData"/></this>
		<impl><class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt32Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt32Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<t path="haxe.io.UInt32ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="UInt"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt32Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt32Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt32ArrayData"/>
	<t path="haxe.io.UInt32ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="UInt"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array" final="1">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
	<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
</f></get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":arrayAccess"/></meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
</f></sub>
	<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
</f></subarray>
	<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<t path="haxe.io.UInt8ArrayData"/>
</f></getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array" final="1">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1"><x path="Int"/></length>
		<view public="1" get="accessor" set="null" static="1"><x path="haxe.io.ArrayBufferView"/></view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
</f></get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":arrayAccess"/></meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1"><f a="this:begin:?length">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
</f></sub>
		<subarray public="1" get="inline" set="null" line="61" static="1"><f a="this:?begin:?end">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.io.UInt8Array"/>
</f></subarray>
		<getData public="1" get="inline" set="null" line="65" static="1"><f a="this">
	<t path="haxe.io.UInt8ArrayData"/>
	<t path="haxe.io.UInt8ArrayData"/>
</f></getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<class path="haxe.iterators.DynamicAccessIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/DynamicAccessIterator.hx">
		<access final="1"><x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessIterator.T"/></x></access>
		<keys final="1"><c path="Array"><c path="String"/></c></keys>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="42">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="49">
			<f a=""><c path="haxe.iterators.DynamicAccessIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="33"><f a="access">
	<x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessIterator.T"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>This iterator can be used to iterate over the values of `haxe.DynamicAccess`.</haxe_doc>
	</class>
	<class path="haxe.iterators.DynamicAccessKeyValueIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/DynamicAccessKeyValueIterator.hx">
		<access final="1"><x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></x></access>
		<keys final="1"><c path="Array"><c path="String"/></c></keys>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="42">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="49">
			<f a=""><a>
	<value><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></value>
	<key><c path="String"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="33"><f a="access">
	<x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>This Key/Value iterator can be used to iterate over `haxe.DynamicAccess`.</haxe_doc>
	</class>
	<class path="haxe.iterators.HashMapKeyValueIterator" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/iterators/HashMapKeyValueIterator.hx">
		<map final="1"><x path="haxe.ds.HashMap">
	<c path="haxe.iterators.HashMapKeyValueIterator.K"/>
	<c path="haxe.iterators.HashMapKeyValueIterator.V"/>
</x></map>
		<keys final="1"><t path="Iterator"><c path="haxe.iterators.HashMapKeyValueIterator.K"/></t></keys>
		<hasNext public="1" get="inline" set="null" line="17">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="24">
			<f a=""><a>
	<value><c path="haxe.iterators.HashMapKeyValueIterator.V"/></value>
	<key><c path="haxe.iterators.HashMapKeyValueIterator.K"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="9"><f a="map">
	<x path="haxe.ds.HashMap">
		<c path="haxe.iterators.HashMapKeyValueIterator.K"/>
		<c path="haxe.iterators.HashMapKeyValueIterator.V"/>
	</x>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.iterators.MapKeyValueIterator" params="K:V" file="/home/runner/work/haxe/haxe/std/haxe/iterators/MapKeyValueIterator.hx">
		<map><c path="haxe.IMap">
	<c path="haxe.iterators.MapKeyValueIterator.K"/>
	<c path="haxe.iterators.MapKeyValueIterator.V"/>
</c></map>
		<keys><t path="Iterator"><c path="haxe.iterators.MapKeyValueIterator.K"/></t></keys>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="50">
			<f a=""><a>
	<value><c path="haxe.iterators.MapKeyValueIterator.V"/></value>
	<key><c path="haxe.iterators.MapKeyValueIterator.K"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35"><f a="map">
	<c path="haxe.IMap">
		<c path="haxe.iterators.MapKeyValueIterator.K"/>
		<c path="haxe.iterators.MapKeyValueIterator.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<haxe_doc>This Key/Value iterator can be used to iterate across maps.</haxe_doc>
		<meta><m n=":ifFeature">
	<e>"anon_read.keyValueIterator"</e>
	<e>"dynamic_read.keyValueIterator"</e>
</m></meta>
	</class>
	<class path="haxe.iterators.RestIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/RestIterator.hx">
		<args final="1"><x path="haxe.Rest"><c path="haxe.iterators.RestIterator.T"/></x></args>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="12"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="16"><f a=""><c path="haxe.iterators.RestIterator.T"/></f></next>
		<new get="inline" set="null" line="8">
			<f a="args">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>haxe.Rest</e></m></meta>
		</new>
	</class>
	<class path="haxe.iterators.RestKeyValueIterator" params="T" file="/home/runner/work/haxe/haxe/std/haxe/iterators/RestKeyValueIterator.hx">
		<args final="1"><x path="haxe.Rest"><c path="haxe.iterators.RestKeyValueIterator.T"/></x></args>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="12"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="16"><f a=""><a>
	<value><c path="haxe.iterators.RestKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new get="inline" set="null" line="8">
			<f a="args">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>haxe.Rest</e></m></meta>
		</new>
	</class>
	<class path="haxe.iterators.StringIterator" params="" file="/home/runner/work/haxe/haxe/std/haxe/iterators/StringIterator.hx">
		<offset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="45">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><x path="Int"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="38">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringIterator` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate over char codes in a string.

	Note that char codes may differ across platforms because of different
	internal encoding of strings in different of runtimes.</haxe_doc>
	</class>
	<class path="haxe.iterators.StringIteratorUnicode" params="" file="/home/runner/work/haxe/haxe/std/haxe/iterators/StringIteratorUnicode.hx">
		<unicodeIterator public="1" get="inline" set="null" line="70" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringIteratorUnicode"/>
			</f>
			<haxe_doc>Convenience function which can be used as a static extension.</haxe_doc>
		</unicodeIterator>
		<offset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="47">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="55">
			<f a=""><x path="Int"/></f>
			<meta><m n=":access"><e>StringTools</e></m></meta>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="40">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringIteratorUnicode` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate across strings in a cross-platform
	way. It handles surrogate pairs on platforms that require it. On each
	iteration, it returns the next character code.

	Note that this has different semantics than a standard for-loop over the
	String's length due to the fact that it deals with surrogate pairs.</haxe_doc>
	</class>
	<class path="haxe.iterators.StringKeyValueIterator" params="" file="/home/runner/work/haxe/haxe/std/haxe/iterators/StringKeyValueIterator.hx">
		<offset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="45">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `KeyValueIterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><a>
	<value><x path="Int"/></value>
	<key><x path="Int"/></key>
</a></f>
			<haxe_doc>See `KeyValueIterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="38">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringKeyValueIterator` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate over char indexes and char codes in a string.

	Note that char codes may differ across platforms because of different
	internal encoding of strings in different runtimes.</haxe_doc>
	</class>
	<class path="haxe.iterators.StringKeyValueIteratorUnicode" params="" file="/home/runner/work/haxe/haxe/std/haxe/iterators/StringKeyValueIteratorUnicode.hx">
		<unicodeKeyValueIterator public="1" get="inline" set="null" line="73" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
			</f>
			<haxe_doc>Convenience function which can be used as a static extension.</haxe_doc>
		</unicodeKeyValueIterator>
		<byteOffset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</byteOffset>
		<charOffset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</charOffset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="50">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="58">
			<f a=""><a>
	<value><x path="Int"/></value>
	<key><x path="Int"/></key>
</a></f>
			<meta><m n=":access"><e>StringTools</e></m></meta>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="43">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringKeyValueIteratorUnicode` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate across strings in a cross-platform
	way. It handles surrogate pairs on platforms that require it. On each
	iteration, it returns the next character offset as key and the next
	character code as value.

	Note that in the general case, because of surrogate pairs, the key values
	should not be used as offsets for various String API operations. For the
	same reason, the last key value returned might be less than `s.length - 1`.</haxe_doc>
	</class>
	<abstract path="haxe.macro.ModuleCheckPolicy" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx" module="haxe.macro.CompilationServer">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1" final="1">
	<NoCheckFileTimeModification public="1" get="inline" set="null" expr="cast 0" line="31" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
	</NoCheckFileTimeModification>
	<CheckFileContentModification public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
	</CheckFileContentModification>
	<NoCheckDependencies public="1" get="inline" set="null" expr="cast 2" line="47" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Disables dependency checks of the module.

		This should only be used for modules that don't depend on any module that
		might change. It is effectively a promise to the compiler that the module
		is unaffected by changes made to other modules. If that promise is broken,
		the compiler is sad and things probably stop working.</haxe_doc>
	</NoCheckDependencies>
	<NoCheckShadowing public="1" get="inline" set="null" expr="cast 3" line="54" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Disables file shadowing checks. Shadowing can occur when a new file
		is added to a class-path that has higher priority than the class-path
		of the current module file.</haxe_doc>
	</NoCheckShadowing>
	<Retype public="1" get="inline" set="null" expr="cast 4" line="58" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Retype the module's contents if its file is invalidated. This is currently experimental.</haxe_doc>
	</Retype>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1" final="1">
		<NoCheckFileTimeModification public="1" get="inline" set="null" expr="cast 0" line="31" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
		</NoCheckFileTimeModification>
		<CheckFileContentModification public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
		</CheckFileContentModification>
		<NoCheckDependencies public="1" get="inline" set="null" expr="cast 2" line="47" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Disables dependency checks of the module.

		This should only be used for modules that don't depend on any module that
		might change. It is effectively a promise to the compiler that the module
		is unaffected by changes made to other modules. If that promise is broken,
		the compiler is sad and things probably stop working.</haxe_doc>
		</NoCheckDependencies>
		<NoCheckShadowing public="1" get="inline" set="null" expr="cast 3" line="54" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Disables file shadowing checks. Shadowing can occur when a new file
		is added to a class-path that has higher priority than the class-path
		of the current module file.</haxe_doc>
		</NoCheckShadowing>
		<Retype public="1" get="inline" set="null" expr="cast 4" line="58" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Retype the module's contents if its file is invalidated. This is currently experimental.</haxe_doc>
		</Retype>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.macro.ContextOptions" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx" module="haxe.macro.CompilationServer">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._CompilationServer.ContextOptions_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1" final="1">
	<NormalContext public="1" get="inline" set="null" expr="cast 0" line="65" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Affects only the normal context.</haxe_doc>
	</NormalContext>
	<MacroContext public="1" get="inline" set="null" expr="cast 1" line="70" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Affects only the macro context.</haxe_doc>
	</MacroContext>
	<NormalAndMacroContext public="1" get="inline" set="null" expr="cast 2" line="75" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Affects the normal and macro contexts.</haxe_doc>
	</NormalAndMacroContext>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._CompilationServer.ContextOptions_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1" final="1">
		<NormalContext public="1" get="inline" set="null" expr="cast 0" line="65" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Affects only the normal context.</haxe_doc>
		</NormalContext>
		<MacroContext public="1" get="inline" set="null" expr="cast 1" line="70" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Affects only the macro context.</haxe_doc>
		</MacroContext>
		<NormalAndMacroContext public="1" get="inline" set="null" expr="cast 2" line="75" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Affects the normal and macro contexts.</haxe_doc>
		</NormalAndMacroContext>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.macro.CompilationServer" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/CompilationServer.hx"><haxe_doc>This class provides some methods which can be invoked from command line using
	`--macro server.field(args)`.</haxe_doc></class>
	<class path="haxe.macro.Compiler" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx">
		<getDefine public="1" set="method" static="1">
			<f a="key">
				<d/>
				<d/>
			</f>
			<haxe_doc>A conditional compilation flag can be set on the command line using
		`-D key=value`.

		Returns the value of a compiler flag.

		If the compiler flag is defined but no value is set,
		`Compiler.getDefine` returns `"1"` (e.g. `-D key`).

		If the compiler flag is not defined, `Compiler.getDefine` returns
		`null`.

		Note: This is a macro and cannot be called from within other macros. Refer
		to `haxe.macro.Context.definedValue` to obtain defined values in macro context.

		@see https://haxe.org/manual/lf-condition-compilation.html</haxe_doc>
		</getDefine>
		<haxe_doc>All these methods can be called for compiler configuration macros.</haxe_doc>
	</class>
	<abstract path="haxe.macro.IncludePosition" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
	<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="590" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "top"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Prepend the file content to the output file.</haxe_doc>
	</Top>
	<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="597" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "closure"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
	</Closure>
	<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="602" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "inline"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
	</Inline>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
		<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="590" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "top"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Prepend the file content to the output file.</haxe_doc>
		</Top>
		<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="597" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "closure"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
		</Closure>
		<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="602" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "inline"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
		</Inline>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.macro.NullSafetyMode" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.NullSafetyMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
	<Off public="1" get="inline" set="null" expr="cast &quot;Off&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Off"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Disable null safety.</haxe_doc>
	</Off>
	<Loose public="1" get="inline" set="null" expr="cast &quot;Loose&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Loose"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc><![CDATA[Loose safety.
		If an expression is checked `!= null`, then it's considered safe even if it could be modified after the check.
		E.g.
		```haxe
		function example(o:{field:Null<String>}) {
			if(o.field != null) {
				mutate(o);
				var notNullable:String = o.field; //no error
			}
		}

		function mutate(o:{field:Null<String>}) {
			o.field = null;
		}
		```]]></haxe_doc>
	</Loose>
	<Strict public="1" get="inline" set="null" expr="cast &quot;Strict&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Strict"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc><![CDATA[Full scale null safety.
		If a field is checked `!= null` it stays safe until a call is made or any field of any object is reassigned,
		because that could potentially alter an object of the checked field.
		E.g.
		```haxe
		function example(o:{field:Null<String>}, b:{o:{field:Null<String>}}) {
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				someCall();
				var notNullable:String = o.field; // Error!
			}
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				b.o = {field:null};
				var notNullable:String = o.field; // Error!
			}
		}
		```]]></haxe_doc>
	</Strict>
	<StrictThreaded public="1" get="inline" set="null" expr="cast &quot;StrictThreaded&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "StrictThreaded"</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
		<haxe_doc>Full scale null safety for a multi-threaded environment.
		With this mode checking a field `!= null` does not make it safe, because it could be changed from another thread
		at the same time or immediately after the check.
		The only nullable thing could be safe are local variables.</haxe_doc>
	</StrictThreaded>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._Compiler.NullSafetyMode_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1" final="1">
		<Off public="1" get="inline" set="null" expr="cast &quot;Off&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Off"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Disable null safety.</haxe_doc>
		</Off>
		<Loose public="1" get="inline" set="null" expr="cast &quot;Loose&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Loose"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc><![CDATA[Loose safety.
		If an expression is checked `!= null`, then it's considered safe even if it could be modified after the check.
		E.g.
		```haxe
		function example(o:{field:Null<String>}) {
			if(o.field != null) {
				mutate(o);
				var notNullable:String = o.field; //no error
			}
		}

		function mutate(o:{field:Null<String>}) {
			o.field = null;
		}
		```]]></haxe_doc>
		</Loose>
		<Strict public="1" get="inline" set="null" expr="cast &quot;Strict&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Strict"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc><![CDATA[Full scale null safety.
		If a field is checked `!= null` it stays safe until a call is made or any field of any object is reassigned,
		because that could potentially alter an object of the checked field.
		E.g.
		```haxe
		function example(o:{field:Null<String>}, b:{o:{field:Null<String>}}) {
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				someCall();
				var notNullable:String = o.field; // Error!
			}
			if(o.field != null) {
				var notNullable:String = o.field; //no error
				b.o = {field:null};
				var notNullable:String = o.field; // Error!
			}
		}
		```]]></haxe_doc>
		</Strict>
		<StrictThreaded public="1" get="inline" set="null" expr="cast &quot;StrictThreaded&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "StrictThreaded"</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
			<haxe_doc>Full scale null safety for a multi-threaded environment.
		With this mode checking a field `!= null` does not make it safe, because it could be changed from another thread
		at the same time or immediately after the check.
		The only nullable thing could be safe are local variables.</haxe_doc>
		</StrictThreaded>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.macro.MetadataDescription" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler"><a>
	<targets final="1" set="null">
		<x path="Null"><c path="Array"><x path="haxe.display.MetadataTarget"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Places where this metadata can be applied.</haxe_doc>
	</targets>
	<platforms final="1" set="null">
		<x path="Null"><c path="Array"><x path="haxe.display.Platform"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Haxe target(s) for which this metadata is used.</haxe_doc>
	</platforms>
	<params final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>List (small description) of parameters that this metadata accepts.</haxe_doc>
	</params>
	<metadata final="1" set="null"><c path="String"/></metadata>
	<links final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>External resources for more information about this metadata.</haxe_doc>
	</links>
	<doc final="1" set="null"><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.macro.DefineDescription" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler"><a>
	<platforms final="1" set="null">
		<x path="Null"><c path="Array"><x path="haxe.display.Platform"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Haxe target(s) for which this define is used.</haxe_doc>
	</platforms>
	<params final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>List (small description) of parameters that this define accepts.</haxe_doc>
	</params>
	<links final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>External resources for more information about this define.</haxe_doc>
	</links>
	<doc final="1" set="null"><c path="String"/></doc>
	<define final="1" set="null"><c path="String"/></define>
</a></typedef>
	<typedef path="haxe.macro.CompilerConfiguration" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler"><a>
	<version final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The version integer of the current Haxe compiler build.</haxe_doc>
	</version>
	<verbose final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>If `--verbose` mode is enabled, this is `true`.</haxe_doc>
	</verbose>
	<stdPath final="1" set="null">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>A list of paths being used for the standard library.</haxe_doc>
	</stdPath>
	<platformConfig final="1" set="null">
		<t path="haxe.macro.PlatformConfig"/>
		<haxe_doc>The compilation configuration for the target platform.</haxe_doc>
	</platformConfig>
	<platform final="1" set="null">
		<x path="haxe.display.Platform"/>
		<haxe_doc>The target platform.</haxe_doc>
	</platform>
	<packageRules final="1" set="null">
		<t path="Map">
			<c path="String"/>
			<e path="haxe.macro.PackageRule"/>
		</t>
		<haxe_doc>Special access rules for packages depending on the compiler configuration.

		For example, the "java" package is "Forbidden" when the target platform is Python.</haxe_doc>
	</packageRules>
	<mainClass final="1" set="null">
		<t path="haxe.macro.TypePath"/>
		<haxe_doc>The path of the class passed using the `-main` argument.</haxe_doc>
	</mainClass>
	<foptimize final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>If `--no-opt` is enabled, this is `false`.</haxe_doc>
	</foptimize>
	<debug final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>If `--debug` mode is enabled, this is `true`.</haxe_doc>
	</debug>
	<args final="1" set="null">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>Returns an array of the arguments passed to the compiler from either the `.hxml` file or the command line.</haxe_doc>
	</args>
</a></typedef>
	<enum path="haxe.macro.PackageRule" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<Forbidden/>
		<Directory a="path"><c path="String"/></Directory>
		<Remap a="path"><c path="String"/></Remap>
	</enum>
	<class path="haxe.macro.ComplexTypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/ComplexTypeTools.hx">
		<toString public="1" set="method" line="40" static="1">
			<f a="c">
				<e path="haxe.macro.ComplexType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts type `c` to a human-readable `String` representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<haxe_doc>This class provides some utility methods to work with AST-level types. It is
	best used through `using haxe.macro.ComplexTypeTools` syntax and then provides
	additional methods on `haxe.macro.ComplexType` instances.</haxe_doc>
	</class>
	<enum path="haxe.macro.Message" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Context.hx" module="haxe.macro.Context">
		<Info a="msg:pos">
			<c path="String"/>
			<t path="haxe.macro.Position"/>
		</Info>
		<Warning a="msg:pos">
			<c path="String"/>
			<t path="haxe.macro.Position"/>
		</Warning>
	</enum>
	<class path="haxe.macro.Context" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Context.hx"><haxe_doc>Context provides an API for macro programming.

	It contains common functions that interact with the macro interpreter to
	query or set information. Other API functions are available in the tools
	classes:

	- `haxe.macro.ComplexTypeTools`
	- `haxe.macro.ExprTools`
	- `haxe.macro.TypeTools`</haxe_doc></class>
	<enum path="haxe.macro.DisplayMode" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/DisplayMode.hx">
		<None/>
		<Default/>
		<Definition/>
		<TypeDefinition/>
		<Implementation/>
		<Package/>
		<Hover/>
		<References a="withDefinition:findDescendants:findBase">
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</References>
		<ModuleSymbols/>
		<WorkspaceSymbols a="filter"><c path="String"/></WorkspaceSymbols>
		<Signature/>
	</enum>
	<typedef path="haxe.macro.Position" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.StringLiteralKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<DoubleQuotes/>
		<SingleQuotes/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.Constant" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v:?s">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents an integer literal.</haxe_doc>
		</CInt>
		<CFloat a="f:?s">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents a float literal.</haxe_doc>
		</CFloat>
		<CString a="s:?kind">
			<c path="String"/>
			<e path="haxe.macro.StringLiteralKind"/>
			<haxe_doc>Represents a string literal.</haxe_doc>
		</CString>
		<CIdent a="s">
			<c path="String"/>
			<haxe_doc>Represents an identifier.</haxe_doc>
		</CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents a regular expression literal.

		Example: `~/haxe/i`

		- The first argument `haxe` is a string with regular expression pattern.
		- The second argument `i` is a string with regular expression flags.

		@see https://haxe.org/manual/std-regex.html</haxe_doc>
		</CRegexp>
		<haxe_doc>Represents a constant.
	@see https://haxe.org/manual/expression-constants.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=` `-=` `/=` `*=` `<<=` `>>=` `>>>=` `|=` `&=` `^=` `%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
		<OpIn><haxe_doc>`in`</haxe_doc></OpIn>
		<OpNullCoal><haxe_doc>`??`</haxe_doc></OpNullCoal>
		<haxe_doc>A binary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<OpSpread><haxe_doc>`...`</haxe_doc></OpSpread>
		<haxe_doc>A unary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.EFieldKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<Normal/>
		<Safe/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<namePos>
				<x path="Null"><t path="haxe.macro.Position"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The position of the variable name.</haxe_doc>
			</namePos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Metadata associatied with the variable, if available.</haxe_doc>
			</meta>
			<isStatic>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable is static.</haxe_doc>
			</isStatic>
			<isFinal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable can be assigned to.</haxe_doc>
			</isFinal>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@see https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<enum path="haxe.macro.QuoteStatus" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<Unquoted><haxe_doc>No quotes</haxe_doc></Unquoted>
		<Quoted><haxe_doc>Double quotes `"`</haxe_doc></Quoted>
		<haxe_doc>Represents the way something is quoted.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.ObjectField" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<quotes>
				<x path="Null"><e path="haxe.macro.QuoteStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>How the field name is quoted.</haxe_doc>
			</quotes>
			<field>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</field>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The field expression.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents the field of an object declaration.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FunctionKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FAnonymous><haxe_doc>Anonymous function</haxe_doc></FAnonymous>
		<FNamed a="name:?inlined">
			<c path="String"/>
			<x path="Bool"/>
			<haxe_doc>Named function</haxe_doc>
		</FNamed>
		<FArrow><haxe_doc>Arrow function</haxe_doc></FArrow>
		<haxe_doc>Represents function kind in the AST</haxe_doc>
	</enum>
	<enum path="haxe.macro.ExprDef" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c">
			<e path="haxe.macro.Constant"/>
			<haxe_doc>A constant.</haxe_doc>
		</EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</EBinop>
		<EField a="e:field:?kind">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
			<e path="haxe.macro.EFieldKind"/>
			<haxe_doc>Field access on `e.field`.

		If `kind` is null, it is equal to Normal.</haxe_doc>
		</EField>
		<EParenthesis a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</EParenthesis>
		<EObjectDecl a="fields">
			<c path="Array"><t path="haxe.macro.ObjectField"/></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</EObjectDecl>
		<EArrayDecl a="values">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A call `e(params)`.</haxe_doc>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A constructor call `new t(params)`.</haxe_doc>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An unary operator `op` on `e`:

		- `e++` (`op = OpIncrement, postFix = true`)
		- `e--` (`op = OpDecrement, postFix = true`)
		- `++e` (`op = OpIncrement, postFix = false`)
		- `--e` (`op = OpDecrement, postFix = false`)
		- `-e` (`op = OpNeg, postFix = false`)
		- `!e` (`op = OpNot, postFix = false`)
		- `~e` (`op = OpNegBits, postFix = false`)</haxe_doc>
		</EUnop>
		<EVars a="vars">
			<c path="Array"><t path="haxe.macro.Var"/></c>
			<haxe_doc>Variable declarations.</haxe_doc>
		</EVars>
		<EFunction a="kind:f">
			<x path="Null"><e path="haxe.macro.FunctionKind"/></x>
			<t path="haxe.macro.Function"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</EFunction>
		<EBlock a="exprs">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A block of expressions `{exprs}`.</haxe_doc>
		</EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</EFor>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>An `if (econd) eif` or `if (econd) eif else eelse` expression.</haxe_doc>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.

		When `normalWhile` is `true` it is `while (...)`.

		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>Represents a `switch` expression with related cases and an optional.
		`default` case if `edef != null`.</haxe_doc>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</ETry>
		<EReturn a="?e">
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</EReturn>
		<EBreak><haxe_doc>A `break` expression.</haxe_doc></EBreak>
		<EContinue><haxe_doc>A `continue` expression.</haxe_doc></EContinue>
		<EUntyped a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An `untyped e` source code.</haxe_doc>
		</EUntyped>
		<EThrow a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</ECast>
		<EDisplay a="e:displayKind">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.DisplayKind"/>
			<haxe_doc>Used internally to provide completion.</haxe_doc>
		</EDisplay>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(econd) ? eif : eelse` expression.</haxe_doc>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>A `(e:t)` expression.</haxe_doc>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `@m e` expression.</haxe_doc>
		</EMeta>
		<EIs a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>An `expr is Type` expression.</haxe_doc>
		</EIs>
		<haxe_doc>Represents the kind of a node in the AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.DisplayKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<DKCall/>
		<DKDot/>
		<DKStructure/>
		<DKMarked/>
		<DKPattern a="outermost"><x path="Bool"/></DKPattern>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Represents the type path.</haxe_doc>
		</TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a function type.
		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFunction>
		<TAnonymous a="fields">
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc>Represents an anonymous structure type.
		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TParent a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc><![CDATA[Represents parentheses around a type, e.g. the `(Int -> Void)` part in
		`(Int -> Void) -> String`.]]></haxe_doc>
		</TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc><![CDATA[Represents typedef extensions `> Iterable<T>`.
		The array `p` holds the type paths to the given types.
		@see https://haxe.org/manual/type-system-extensions.html]]></haxe_doc>
		</TExtend>
		<TOptional a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an optional type.</haxe_doc>
		</TOptional>
		<TNamed a="n:t">
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a type with a name.</haxe_doc>
		</TNamed>
		<TIntersection a="tl">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc><![CDATA[Represents an intersection type `T1 & T2 & ... & TN`.]]></haxe_doc>
		</TIntersection>
		<haxe_doc>Represents a type syntax in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has `name = "Module"`, `sub = "Type"`, if available.</haxe_doc>
			</sub>
			<params>
				<x path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPExpr a="e"><t path="haxe.macro.Expr"/></TPExpr>
		<haxe_doc><![CDATA[Represents a concrete type parameter in the AST.

	Haxe allows expressions in concrete type parameters, e.g.
	`new YourType<["hello", "world"]>`. In that case the value is `TPExpr` while
	in the normal case it's `TPType`.]]></haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<defaultType>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional default type of the type parameter.</haxe_doc>
			</defaultType>
			<constraints>
				<x path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<x path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Access" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic><haxe_doc>Public access modifier, grants access from anywhere.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APublic>
		<APrivate><haxe_doc>Private access modifier, grants access to class and its sub-classes
		only.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APrivate>
		<AStatic><haxe_doc>Static access modifier.</haxe_doc></AStatic>
		<AOverride><haxe_doc>Override access modifier.
		@see https://haxe.org/manual/class-field-override.html</haxe_doc></AOverride>
		<ADynamic><haxe_doc>Dynamic (re-)bindable access modifier.
		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></ADynamic>
		<AInline><haxe_doc>Inline access modifier. Allows expressions to be directly inserted in
		place of calls to them.
		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></AInline>
		<AMacro><haxe_doc>Macro access modifier. Allows expression macro functions. These are
		normal functions which are executed as soon as they are typed.</haxe_doc></AMacro>
		<AFinal><haxe_doc>Final access modifier. For functions, they can not be overridden. For
		variables, it means they can be assigned to only once.</haxe_doc></AFinal>
		<AExtern><haxe_doc>Extern access modifier.</haxe_doc></AExtern>
		<AAbstract><haxe_doc>Abstract access modifier.</haxe_doc></AAbstract>
		<AOverload><haxe_doc>Overload access modifier.</haxe_doc></AOverload>
		<haxe_doc>Represents an access modifier.
	@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>Represents a variable field type.</haxe_doc>
		</FVar>
		<FFun a="f">
			<t path="haxe.macro.Function"/>
			<haxe_doc>Represents a function field type.</haxe_doc>
		</FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>Represents a property with getter and setter field type.</haxe_doc>
		</FProp>
		<haxe_doc>Represents the field type in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the type, if available. If the type has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDEnum><haxe_doc>Represents an enum kind.</haxe_doc></TDEnum>
		<TDStructure><haxe_doc>Represents a structure kind.</haxe_doc></TDStructure>
		<TDClass a="?superClass:?interfaces:?isInterface:?isFinal:?isAbstract">
			<x path="Null"><t path="haxe.macro.TypePath"/></x>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<haxe_doc>Represents a class kind.</haxe_doc>
		</TDClass>
		<TDAlias a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an alias/typedef kind.</haxe_doc>
		</TDAlias>
		<TDAbstract a="tthis:?flags:?from:?to">
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<c path="Array"><e path="haxe.macro.AbstractFlag"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc>Represents an abstract kind.</haxe_doc>
		</TDAbstract>
		<TDField a="kind:?access">
			<e path="haxe.macro.FieldType"/>
			<c path="Array"><e path="haxe.macro.Access"/></c>
			<haxe_doc>Represents a module-level field.</haxe_doc>
		</TDField>
		<haxe_doc>Represents a type definition kind.</haxe_doc>
	</enum>
	<enum path="haxe.macro.AbstractFlag" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<AbEnum><haxe_doc>Indicates that this abstract is an `enum abstract`</haxe_doc></AbEnum>
		<AbFrom a="ct">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Indicates that this abstract can be assigned from `ct`.
		This flag can be added several times to add multiple "from" types.</haxe_doc>
		</AbFrom>
		<AbTo a="ct">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Indicates that this abstract can be assigned to `ct`.
		This flag can be added several times to add multiple "to" types.</haxe_doc>
		</AbTo>
		<haxe_doc>Represents an abstract flag.</haxe_doc>
	</enum>
	<class path="haxe.macro.Error" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<extends path="haxe.Exception"/>
		<pos public="1">
			<t path="haxe.macro.Position"/>
			<haxe_doc>The position of the error.</haxe_doc>
		</pos>
		<childErrors>
			<c path="Array"><c path="haxe.macro.Error"/></c>
			<haxe_doc>Child error messages, if any.</haxe_doc>
		</childErrors>
		<new public="1" set="method" line="1049">
			<f a="message:pos:?previous">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<c path="haxe.Exception"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Instantiates an error with given message and position.</haxe_doc>
		</new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<enum path="haxe.macro.ImportMode" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<INormal><haxe_doc>Represents a default import `import c`.</haxe_doc></INormal>
		<IAsName a="alias">
			<c path="String"/>
			<haxe_doc>Represents the alias import `import c as alias`.</haxe_doc>
		</IAsName>
		<IAll><haxe_doc>Represents the wildcard import `import *`.</haxe_doc></IAll>
		<haxe_doc>Represents the import mode.
	@see https://haxe.org/manual/type-system-import.html</haxe_doc>
	</enum>
	<typedef path="haxe.macro.ImportExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<class path="haxe.macro.ExprTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/ExprTools.hx">
		<toString public="1" set="method" line="45" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts expression `e` to a human-readable String representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<iter public="1" set="method" line="71" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		If `e` has no sub-expressions, this operation has no effect.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function findStrings(e:Expr) {
			switch(e.expr) {
				case EConst(CString(s)):
					// handle s
				case _:
					ExprTools.iter(e, findStrings);
			}
		}
		```</haxe_doc>
		</iter>
		<map public="1" set="method" line="140" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<t path="haxe.macro.Expr"/>
				</f>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		If `e` has no sub-expressions, this operation returns `e` unchanged.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function capitalizeStrings(e:Expr) {
			return switch(e.expr) {
				case EConst(CString(s)):
					{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };
				case _:
					ExprTools.map(e, capitalizeStrings);
			}
		}
		```</haxe_doc>
		</map>
		<getValue public="1" set="method" line="230" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Returns the value `e` represents.

		Supported expressions are:

		 - `Int`, `Float` and `String` literals
		 - identifiers `true`, `false` and `null`
		 - structure declarations if all their fields are values
		 - array declarations if all their elements are values
		 - unary operators `-`, `!` and `~` if the operand is a value
		 - binary operators except `=>`, `...` and assignments

		Parentheses, metadata and the `untyped` keyword are ignored.

		If any non-value is encountered, an exception of type `String` is
		thrown.

		If `e` is null, the result is unspecified.]]></haxe_doc>
		</getValue>
		<opt get="inline" set="null" line="291" static="1"><f a="e:f">
	<x path="Null"><t path="haxe.macro.Expr"/></x>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<t path="haxe.macro.Expr"/>
</f></opt>
		<opt2 get="inline" set="null" line="294" static="1"><f a="e:f">
	<x path="Null"><t path="haxe.macro.Expr"/></x>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></opt2>
		<haxe_doc>This class provides some utility methods to work with expressions. It is
	best used through 'using haxe.macro.ExprTools' syntax and then provides
	additional methods on haxe.macro.Expr instances.

	While mainly intended to be used in macros, it works in non-macro code as
	well.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprArrayTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/ExprTools.hx" module="haxe.macro.ExprTools">
		<map public="1" set="method" line="303" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></map>
		<iter public="1" set="method" line="310" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<haxe_doc>This class provides functions on expression arrays for convenience. For a
	detailed reference on each method, see the documentation of ExprTools.</haxe_doc>
	</class>
	<class path="haxe.macro.Format" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Format.hx"><haxe_doc>The actual macro implemented for Std.format</haxe_doc></class>
	<typedef path="haxe.macro.JSGenApi" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/JSGenApi.hx">
		<a>
			<types>
				<c path="Array"><e path="haxe.macro.Type"/></c>
				<haxe_doc>all the types that were compiled by Haxe</haxe_doc>
			</types>
			<setTypeAccessor set="method">
				<f a="callb">
					<f a="">
						<e path="haxe.macro.Type"/>
						<c path="String"/>
					</f>
					<x path="Void"/>
				</f>
				<haxe_doc>define the JS code that gets generated when a class or enum is accessed in a typed expression</haxe_doc>
			</setTypeAccessor>
			<setCurrentClass set="method">
				<f a="c">
					<t path="haxe.macro.ClassType"/>
					<x path="Void"/>
				</f>
				<haxe_doc>select the current classe</haxe_doc>
			</setCurrentClass>
			<quoteString set="method">
				<f a="s">
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc>quote and escape the given string constant</haxe_doc>
			</quoteString>
			<outputFile>
				<c path="String"/>
				<haxe_doc>the file in which the JS code can be generated</haxe_doc>
			</outputFile>
			<main>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>the main call expression, if a -main class is defined</haxe_doc>
			</main>
			<isKeyword set="method">
				<f a="ident">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>tells if the given identifier is a JS keyword</haxe_doc>
			</isKeyword>
			<hasFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>check if a feature is used</haxe_doc>
			</hasFeature>
			<generateValue set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for a given typed expression-value</haxe_doc>
			</generateValue>
			<generateStatement set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for any given typed expression</haxe_doc>
			</generateStatement>
			<buildMetaData set="method">
				<f a="t">
					<t path="haxe.macro.BaseType"/>
					<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				</f>
				<haxe_doc>create the metadata expression for the given type</haxe_doc>
			</buildMetaData>
			<addFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>add a feature</haxe_doc>
			</addFeature>
		</a>
		<haxe_doc>This is the api that is passed to the custom JS generator.</haxe_doc>
	</typedef>
	<class path="haxe.macro.MacroStringTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/MacroStringTools.hx">
		<toFieldExpr public="1" set="method" line="68" static="1">
			<f a="sl:?pos">
				<c path="Array"><c path="String"/></c>
				<t path="haxe.macro.Position"/>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Converts an array of Strings `sl` to a field expression.

		If `sl` has no elements, the result is null.

		If `sl` has one element, the result is `EConst(CIdent(sl[0])`.

		Otherwise the result is a chain of `EField` nodes.

		If `sl` is null, the result is unspecified.</haxe_doc>
		</toFieldExpr>
		<toDotPath public="1" set="method" line="91" static="1">
			<f a="pack:name">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a path given by package `pack` and name `name` to a `String`
		separated by dots.

		If `pack` has no elements, the result is `name`.

		If `pack` is null, the result is unspecified.

		Otherwise the elements of `pack` are joined with a separating dot, with
		an appended dot separating the result from `name`.</haxe_doc>
		</toDotPath>
		<toComplex public="1" set="method" line="95" static="1"><f a="path">
	<c path="String"/>
	<e path="haxe.macro.ComplexType"/>
</f></toComplex>
		<haxe_doc>This class provides some utility methods to work with strings in macro
	context.</haxe_doc>
	</class>
	<class path="haxe.macro.MacroType" params="Const" file="/home/runner/work/haxe/haxe/std/haxe/macro/MacroType.hx" extern="1"><haxe_doc><![CDATA[This type is meant to be used to generate custom types using a macro.
	For instance by doing MacroType<[my.Class.myMacro(55)]>]]></haxe_doc></class>
	<typedef path="haxe.macro.PlatformConfig" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx">
		<a>
			<usesUtf16 final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Uses utf16 encoding with ucs2 api</haxe_doc>
			</usesUtf16>
			<thisBeforeSuper final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports accessing `this` before calling `super(...)`</haxe_doc>
			</thisBeforeSuper>
			<sys final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Has access to the "sys" package</haxe_doc>
			</sys>
			<supportsUnicode final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports Unicode</haxe_doc>
			</supportsUnicode>
			<supportsThreads final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports threads</haxe_doc>
			</supportsThreads>
			<supportsRestArgs final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports rest arguments</haxe_doc>
			</supportsRestArgs>
			<supportsFunctionEquality final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Supports function == function</haxe_doc>
			</supportsFunctionEquality>
			<supportsAtomics final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports atomic operations via haxe.Atomic</haxe_doc>
			</supportsAtomics>
			<staticTypeSystem final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Has a static type system, with not-nullable basic types (Int/Float/Bool)</haxe_doc>
			</staticTypeSystem>
			<scoping final="1" set="null">
				<t path="haxe.macro.VarScopingConfig"/>
				<haxe_doc>The scoping of local variables</haxe_doc>
			</scoping>
			<reservedTypePaths final="1" set="null">
				<c path="Array"><t path="haxe.macro.TypePath"/></c>
				<haxe_doc>Type paths that are reserved on the platform</haxe_doc>
			</reservedTypePaths>
			<padNulls final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>When calling a method with optional args, do we replace the missing args with "null" constants</haxe_doc>
			</padNulls>
			<overloadFunctions final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Does the platform natively support overloaded functions</haxe_doc>
			</overloadFunctions>
			<exceptions final="1" set="null">
				<t path="haxe.macro.ExceptionsConfig"/>
				<haxe_doc>Exceptions handling config</haxe_doc>
			</exceptions>
			<capturePolicy final="1" set="null">
				<e path="haxe.macro.CapturePolicy"/>
				<haxe_doc>Captured variables handling (see before)</haxe_doc>
			</capturePolicy>
			<canSkipNonNullableArgument final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Can the platform use default values for non-nullable arguments</haxe_doc>
			</canSkipNonNullableArgument>
			<addFinalReturn final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Add a final return to methods not having one already - prevent some compiler warnings</haxe_doc>
			</addFinalReturn>
		</a>
		<haxe_doc>Represents the internal structure generated with options assigned based on
	the target platform.

	Warning: `PlatformConfig` and the typedefs unique to its fields correspond to
	compiler-internal data structures and might change in minor Haxe releases in
	order to adapt to internal changes.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.CapturePolicy" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig">
		<None><haxe_doc>Do nothing, let the platform handle it</haxe_doc></None>
		<WrapRef><haxe_doc>Wrap all captured variables into a single-element array to allow modifications</haxe_doc></WrapRef>
		<LoopVars><haxe_doc>Similar to wrap ref, but will only apply to the locals that are declared in loops</haxe_doc></LoopVars>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.VarScopingConfig" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig"><a>
	<scope final="1" set="null"><e path="haxe.macro.VarScope"/></scope>
	<flags final="1" set="null"><c path="Array"><e path="haxe.macro.VarScopingFlags"/></c></flags>
</a></typedef>
	<enum path="haxe.macro.VarScope" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig">
		<FunctionScope/>
		<BlockScope/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.VarScopingFlags" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig">
		<VarHoisting><haxe_doc>Variables are hoisted in their scope</haxe_doc></VarHoisting>
		<NoShadowing><haxe_doc>It's not allowed to shadow existing variables in a scope.</haxe_doc></NoShadowing>
		<NoCatchVarShadowing><haxe_doc>It's not allowed to shadow a `catch` variable.</haxe_doc></NoCatchVarShadowing>
		<ReserveCurrentTopLevelSymbol><haxe_doc>Local vars cannot have the same name as the current top-level package or
		(if in the root package) current class name</haxe_doc></ReserveCurrentTopLevelSymbol>
		<ReserveAllTopLevelSymbols><haxe_doc>Local vars cannot have a name used for any top-level symbol
		(packages and classes in the root package)</haxe_doc></ReserveAllTopLevelSymbols>
		<ReserveAllTypesFlat><haxe_doc>Reserve all type-paths converted to "flat path" with `Path.flat_path`</haxe_doc></ReserveAllTypesFlat>
		<ReserveNames a="names">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>List of names cannot be taken by local vars</haxe_doc>
		</ReserveNames>
		<SwitchCasesNoBlocks><haxe_doc>Cases in a `switch` won't have blocks, but will share the same outer scope.</haxe_doc></SwitchCasesNoBlocks>
	</enum>
	<typedef path="haxe.macro.ExceptionsConfig" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig"><a>
	<wildcardCatch final="1" set="null">
		<t path="haxe.macro.TypePath"/>
		<haxe_doc>Path of a native class or interface, which can be used for wildcard catches.</haxe_doc>
	</wildcardCatch>
	<nativeThrows final="1" set="null">
		<c path="Array"><t path="haxe.macro.TypePath"/></c>
		<haxe_doc>Base types which may be thrown from Haxe code without wrapping.</haxe_doc>
	</nativeThrows>
	<nativeCatches final="1" set="null">
		<c path="Array"><t path="haxe.macro.TypePath"/></c>
		<haxe_doc>Base types which may be caught from Haxe code without wrapping.</haxe_doc>
	</nativeCatches>
	<baseThrow final="1" set="null">
		<t path="haxe.macro.TypePath"/>
		<haxe_doc>Path of a native base class or interface, which can be thrown.
		This type is used to cast `haxe.Exception.thrown(v)` calls to.
		For example `throw 123` is compiled to `throw (cast Exception.thrown(123):ec_base_throw)`</haxe_doc>
	</baseThrow>
	<avoidWrapping final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>Hint exceptions filter to avoid wrapping for targets, which can throw/catch any type
		Ignored on targets with a specific native base type for exceptions.</haxe_doc>
	</avoidWrapping>
</a></typedef>
	<class path="haxe.macro.PositionTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/PositionTools.hx">
		<here public="1" set="method" static="1">
			<f a=""><t path="haxe.macro.Position"/></f>
			<haxe_doc>Returns the `Position` where the caller of `here` is.</haxe_doc>
		</here>
		<getInfos public="1" set="method" line="44" static="1">
			<f a="p">
				<t path="haxe.macro.Position"/>
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
			</f>
			<haxe_doc>Like `Context.getPosInfos`, except this method is available on all platforms.</haxe_doc>
		</getInfos>
		<make public="1" set="method" line="55" static="1">
			<f a="inf">
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
				<t path="haxe.macro.Position"/>
			</f>
			<haxe_doc>Like `Context.makePosition`, except this method is available on all platforms.</haxe_doc>
		</make>
	</class>
	<class path="haxe.macro.Printer" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Printer.hx">
		<tabs><c path="String"/></tabs>
		<tabString><c path="String"/></tabString>
		<printUnop public="1" set="method" line="44"><f a="op">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></printUnop>
		<printBinop public="1" set="method" line="54"><f a="op">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></printBinop>
		<escapeString set="method" line="83"><f a="s:delim">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<printFormatString public="1" set="method" line="93"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printFormatString>
		<printString public="1" set="method" line="97"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printString>
		<printConstant public="1" set="method" line="102"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></printConstant>
		<printTypeParam public="1" set="method" line="113"><f a="param">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></printTypeParam>
		<printTypePath public="1" set="method" line="119"><f a="tp">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></printTypePath>
		<printComplexType public="1" set="method" line="126"><f a="ct">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></printComplexType>
		<printMetadata public="1" set="method" line="154"><f a="meta">
	<t path="haxe.macro.MetadataEntry"/>
	<c path="String"/>
</f></printMetadata>
		<printAccess public="1" set="method" line="157"><f a="access">
	<e path="haxe.macro.Access"/>
	<c path="String"/>
</f></printAccess>
		<printField public="1" set="method" line="171"><f a="field">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printField>
		<printTypeParamDecl public="1" set="method" line="196"><f a="tpd">
	<t path="haxe.macro.TypeParamDecl"/>
	<c path="String"/>
</f></printTypeParamDecl>
		<printFunctionArg public="1" set="method" line="203"><f a="arg">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></printFunctionArg>
		<printFunction public="1" set="method" line="205"><f a="func:?kind">
	<t path="haxe.macro.Function"/>
	<e path="haxe.macro.FunctionKind"/>
	<c path="String"/>
</f></printFunction>
		<printVar public="1" set="method" line="219"><f a="v">
	<t path="haxe.macro.Var"/>
	<c path="String"/>
</f></printVar>
		<printObjectFieldKey public="1" set="method" line="227"><f a="of">
	<t path="haxe.macro.ObjectField"/>
	<c path="String"/>
</f></printObjectFieldKey>
		<printObjectField public="1" set="method" line="234"><f a="of">
	<t path="haxe.macro.ObjectField"/>
	<c path="String"/>
</f></printObjectField>
		<printExpr public="1" set="method" line="239"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExpr>
		<printExprs public="1" set="method" line="296"><f a="el:sep">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<c path="String"/>
	<c path="String"/>
</f></printExprs>
		<printExtension set="method" line="300"><f a="tpl:fields">
	<c path="Array"><t path="haxe.macro.TypePath"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printExtension>
		<printStructure set="method" line="307"><f a="fields">
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printStructure>
		<printTypeDefinition public="1" set="method" line="311">
			<f a="t:?printPackage" v=":true">
				<t path="haxe.macro.TypeDefinition"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ printPackage : true }</e></m></meta>
		</printTypeDefinition>
		<printFieldWithDelimiter set="method" line="427"><f a="f">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printFieldWithDelimiter>
		<opt params="T" set="method" line="438">
			<f a="v:f:?prefix" v="::&quot;&quot;">
				<c path="opt.T"/>
				<f a="">
					<c path="opt.T"/>
					<c path="String"/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ prefix : "" }</e></m></meta>
		</opt>
		<printExprWithPositions public="1" set="method" line="440"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExprWithPositions>
		<new public="1" set="method" line="38">
			<f a="?tabString" v="&quot;\t&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tabString : "\t" }</e></m></meta>
		</new>
		<haxe_doc>This class provides some utility methods to convert elements from the
	macro context to a human-readable String representation.</haxe_doc>
	</class>
	<typedef path="haxe.macro.TExprTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ExprTools"/>
		<haxe_doc><![CDATA[This class can be added via `using haxe.macro.Tools` in order to enable
	`using` functionality on these macro tool classes:

	- `haxe.macro.ExprTools`
	- `haxe.macro.ComplexTypeTools`
	- `haxe.macro.TypeTools`
	- `haxe.macro.MacroStringTools`
	- `haxe.macro.TypedExprTools`
	- `haxe.macro.PositionTools`

	  @see <https://haxe.org/manual/lf-static-extension.html>]]></haxe_doc>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TComplexTypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ComplexTypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TMacroStringTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.MacroStringTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypedExprTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypedExprTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TPositionTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.PositionTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Type" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx">
		<TMono a="t">
			<t path="haxe.macro.Ref"><x path="Null"><e path="haxe.macro.Type"/></x></t>
			<haxe_doc>Represents a monomorph.

		@see https://haxe.org/manual/types-monomorph.html</haxe_doc>
		</TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an enum instance.

		@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a class instance.

		@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a typedef.

		@see https://haxe.org/manual/type-system-typedef.html</haxe_doc>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
			<haxe_doc>Represents a function type.

		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFun>
		<TAnonymous a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t>
			<haxe_doc>Represents an anonymous structure type.

		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TDynamic a="t">
			<x path="Null"><e path="haxe.macro.Type"/></x>
			<haxe_doc>Represents Dynamic.

		@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		</TDynamic>
		<TLazy a="f">
			<f a=""><e path="haxe.macro.Type"/></f>
			<haxe_doc>Used internally by the compiler to delay some typing.</haxe_doc>
		</TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an abstract type.

		@see https://haxe.org/manual/types-abstract.html</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.AnonStatus" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AClosed><haxe_doc>A closed structure is considered complete. That is, no further fields
		can be added to it.</haxe_doc></AClosed>
		<AOpened><haxe_doc>An open structure allows having additional fields added to it, which is
		used during type inference. It is closed upon unification.</haxe_doc></AOpened>
		<AConst><haxe_doc>A const structure is one that appears directly in syntax. It cannot be
		assigned to a smaller structure type (that is, it does not allow
		structural sub-typing).</haxe_doc></AConst>
		<AExtend a="tl">
			<t path="haxe.macro.Ref"><c path="Array"><e path="haxe.macro.Type"/></c></t>
			<haxe_doc>Represents a structure which extends one or multiple structures defined
		in `tl`.

		@see https://haxe.org/manual/type-system-extensions.html</haxe_doc>
		</AExtend>
		<AClassStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A structure that represents the static fields of a class.</haxe_doc>
		</AClassStatics>
		<AEnumStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>A structure that represents the constructors of an enum.</haxe_doc>
		</AEnumStatics>
		<AAbstractStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>A structure that represents the static fields of an abstract.</haxe_doc>
		</AAbstractStatics>
		<haxe_doc>Represents the kind of the anonymous structure type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParameter" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<defaultType>
				<x path="Null"><e path="haxe.macro.Type"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The default type for this type parameter.</haxe_doc>
			</defaultType>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is final.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is extern.</haxe_doc>
			</isExtern>
			<isAbstract>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is abstract.</haxe_doc>
			</isAbstract>
			<expr set="method">
				<f a=""><x path="Null"><t path="haxe.macro.TypedExpr"/></x></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ClassKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KNormal><haxe_doc>A normal class.</haxe_doc></KNormal>
		<KTypeParameter a="constraints">
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A type parameter class with a set of constraints.</haxe_doc>
		</KTypeParameter>
		<KModuleFields a="module">
			<c path="String"/>
			<haxe_doc>A class containing module fields.</haxe_doc>
		</KModuleFields>
		<KExpr a="expr">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A special kind of class to encode expressions into type parameters.</haxe_doc>
		</KExpr>
		<KGeneric><haxe_doc>A `@:generic` base class.</haxe_doc></KGeneric>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A concrete `@:generic` instance, referencing the original class and the
		applied type parameters.</haxe_doc>
		</KGenericInstance>
		<KMacroType><haxe_doc>A special class for `haxe.macro.MacroType`.

		@deprecated</haxe_doc></KMacroType>
		<KAbstractImpl a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An implementation class of an abstract, i.e. where all its run-time code
		is.</haxe_doc>
		</KAbstractImpl>
		<KGenericBuild><haxe_doc>A `@:genericBuild` class</haxe_doc></KGenericBuild>
		<haxe_doc>Represents the kind of a class.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.BaseType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<x path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></x>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>If true the class is final and cannot be extended.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<isAbstract>
				<x path="Bool"/>
				<haxe_doc>If true the class is abstract and cannot be instantiated directly.</haxe_doc>
			</isAbstract>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></x>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<t path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</t>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolveWrite>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolveWrite>
			<resolve>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></x>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
			<haxe_doc>A variable of property, depending on the `read` and `write` values.</haxe_doc>
		</FVar>
		<FMethod a="k">
			<e path="haxe.macro.MethodKind"/>
			<haxe_doc>A method</haxe_doc>
		</FMethod>
		<haxe_doc>Represents a field kind.</haxe_doc>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccNormal><haxe_doc>Normal access (`default`).</haxe_doc></AccNormal>
		<AccNo><haxe_doc>Private access (`null`).</haxe_doc></AccNo>
		<AccNever><haxe_doc>No access (`never`).</haxe_doc></AccNever>
		<AccResolve><haxe_doc>Unused.</haxe_doc></AccResolve>
		<AccCall><haxe_doc>Access through accessor function (`get`, `set`, `dynamic`).</haxe_doc></AccCall>
		<AccInline><haxe_doc>Inline access (`inline`).</haxe_doc></AccInline>
		<AccRequire a="r:?msg">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Failed access due to a `@:require` metadata.</haxe_doc>
		</AccRequire>
		<AccCtor><haxe_doc>Access is only allowed from the constructor.</haxe_doc></AccCtor>
		<haxe_doc>Represents the variable accessor.</haxe_doc>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal><haxe_doc>A normal method.</haxe_doc></MethNormal>
		<MethInline><haxe_doc>An inline method.

		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></MethInline>
		<MethDynamic><haxe_doc>A dynamic, rebindable method.

		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></MethDynamic>
		<MethMacro><haxe_doc>A macro method.</haxe_doc></MethMacro>
		<haxe_doc>Represents the method kind.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.TConstant" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TInt a="i">
			<x path="Int"/>
			<haxe_doc>An `Int` literal.</haxe_doc>
		</TInt>
		<TFloat a="s">
			<c path="String"/>
			<haxe_doc>A `Float` literal, represented as String to avoid precision loss.</haxe_doc>
		</TFloat>
		<TString a="s">
			<c path="String"/>
			<haxe_doc>A `String` literal.</haxe_doc>
		</TString>
		<TBool a="b">
			<x path="Bool"/>
			<haxe_doc>A `Bool` literal.</haxe_doc>
		</TBool>
		<TNull><haxe_doc>The constant `null`.</haxe_doc></TNull>
		<TThis><haxe_doc>The constant `this`.</haxe_doc></TThis>
		<TSuper><haxe_doc>The constant `super`.</haxe_doc></TSuper>
		<haxe_doc>Represents typed constant.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TVar" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<x path="Null"><t path="haxe.macro.MetaAccess"/></x>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<isStatic set="null">
				<x path="Bool"/>
				<haxe_doc>Whether the variable is a local static variable</haxe_doc>
			</isStatic>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<x path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><x path="Null"><t path="haxe.macro.TypedExpr"/></x></expr>
</a></x>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ModuleType" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TClassDecl a="c">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A class.</haxe_doc>
		</TClassDecl>
		<TEnumDecl a="e">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>An enum.</haxe_doc>
		</TEnumDecl>
		<TTypeDecl a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<haxe_doc>A typedef.</haxe_doc>
		</TTypeDecl>
		<TAbstract a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An abstract.</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a module type. These are the types that can be declared in a Haxe
	module and which are passed to the generators (except `TTypeDecl`).</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TFunc" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><x path="Null"><t path="haxe.macro.TypedExpr"/></x></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FInstance a="c:params:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on a class instance `c` with type parameters
		`params`.</haxe_doc>
		</FInstance>
		<FStatic a="c:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Static access of a field `cf` on a class `c`.</haxe_doc>
		</FStatic>
		<FAnon a="cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on an anonymous structure.</haxe_doc>
		</FAnon>
		<FDynamic a="s">
			<c path="String"/>
			<haxe_doc>Dynamic field access of a field named `s`.</haxe_doc>
		</FDynamic>
		<FClosure a="c:cf">
			<x path="Null"><a>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
	<c><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></c>
</a></x>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Closure field access of field `cf` on a class instance `c` with type
		parameters `params`.</haxe_doc>
		</FClosure>
		<FEnum a="e:ef">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<t path="haxe.macro.EnumField"/>
			<haxe_doc>Field access to an enum constructor `ef` of enum `e`.</haxe_doc>
		</FEnum>
		<haxe_doc>Represents the kind of field access in the typed AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.TypedExprDef" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TConst a="c">
			<e path="haxe.macro.TConstant"/>
			<haxe_doc>A constant.</haxe_doc>
		</TConst>
		<TLocal a="v">
			<t path="haxe.macro.TVar"/>
			<haxe_doc>Reference to a local variable `v`.</haxe_doc>
		</TLocal>
		<TArray a="e1:e2">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</TArray>
		<TBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</TBinop>
		<TField a="e:fa">
			<t path="haxe.macro.TypedExpr"/>
			<e path="haxe.macro.FieldAccess"/>
			<haxe_doc>Field access on `e` according to `fa`.</haxe_doc>
		</TField>
		<TTypeExpr a="m">
			<e path="haxe.macro.ModuleType"/>
			<haxe_doc>Reference to a module type `m`.</haxe_doc>
		</TTypeExpr>
		<TParenthesis a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</TParenthesis>
		<TObjectDecl a="fields">
			<c path="Array"><a>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</TObjectDecl>
		<TArrayDecl a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</TArrayDecl>
		<TCall a="e:el">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A call `e(el)`.</haxe_doc>
		</TCall>
		<TNew a="c:params:el">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc><![CDATA[A constructor call `new c<params>(el)`.]]></haxe_doc>
		</TNew>
		<TUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</TUnop>
		<TFunction a="tfunc">
			<t path="haxe.macro.TFunc"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</TFunction>
		<TVar a="v:expr">
			<t path="haxe.macro.TVar"/>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>A variable declaration `var v` or `var v = expr`.</haxe_doc>
		</TVar>
		<TBlock a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A block declaration `{el}`.</haxe_doc>
		</TBlock>
		<TFor a="v:e1:e2">
			<t path="haxe.macro.TVar"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</TFor>
		<TIf a="econd:eif:eelse">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</TIf>
		<TWhile a="econd:e:normalWhile">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</TWhile>
		<TSwitch a="e:cases:edef">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.TypedExpr"/></c></values>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>Represents a `switch` expression with related cases and an optional
		`default` case if edef != null.</haxe_doc>
		</TSwitch>
		<TTry a="e:catches">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<v><t path="haxe.macro.TVar"/></v>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</TTry>
		<TReturn a="e">
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</TReturn>
		<TBreak><haxe_doc>A `break` expression.</haxe_doc></TBreak>
		<TContinue><haxe_doc>A `continue` expression.</haxe_doc></TContinue>
		<TThrow a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</TThrow>
		<TCast a="e:m">
			<t path="haxe.macro.TypedExpr"/>
			<x path="Null"><e path="haxe.macro.ModuleType"/></x>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</TCast>
		<TMeta a="m:e1">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `@m e1` expression.</haxe_doc>
		</TMeta>
		<TEnumParameter a="e1:ef:index">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.EnumField"/>
			<x path="Int"/>
			<haxe_doc>Access to an enum parameter (generated by the pattern matcher).</haxe_doc>
		</TEnumParameter>
		<TEnumIndex a="e1">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Access to an enum index (generated by the pattern matcher).</haxe_doc>
		</TEnumIndex>
		<TIdent a="s">
			<c path="String"/>
			<haxe_doc>An unknown identifier.</haxe_doc>
		</TIdent>
		<haxe_doc>Represents kind of a node in the typed AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypedExpr" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<class path="haxe.macro.TypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/TypeTools.hx">
		<nullable set="method" line="41" static="1"><f a="complexType">
	<e path="haxe.macro.ComplexType"/>
	<e path="haxe.macro.ComplexType"/>
</f></nullable>
		<toField set="method" line="44" static="1"><f a="cf">
	<t path="haxe.macro.ClassField"/>
	<t path="haxe.macro.Field"/>
</f></toField>
		<toComplexType public="1" set="method" line="102" static="1">
			<f a="type">
				<x path="Null"><e path="haxe.macro.Type"/></x>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			</f>
			<haxe_doc>Returns a syntax-level type corresponding to Type `t`.

		This function is mostly inverse to `ComplexTypeTools.toType`, but may
		lose some information on types that do not have a corresponding syntax
		version, such as monomorphs. In these cases, the result is null.

		If `t` is null, an internal exception is thrown.</haxe_doc>
		</toComplexType>
		<toTypeParam set="method" line="147" static="1"><f a="type">
	<e path="haxe.macro.Type"/>
	<e path="haxe.macro.TypeParam"/>
</f></toTypeParam>
		<toTypePath set="method" line="155" static="1"><f a="baseType:params">
	<t path="haxe.macro.BaseType"/>
	<c path="Array"><e path="haxe.macro.Type"/></c>
	<t path="haxe.macro.TypePath"/>
</f></toTypePath>
		<findField public="1" set="method" line="414" static="1">
			<f a="c:name:?isStatic" v="::false">
				<t path="haxe.macro.ClassType"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
			</f>
			<meta><m n=":value"><e>{ isStatic : false }</e></m></meta>
			<haxe_doc>Resolves the field named `name` on class `c`.

		If `isStatic` is true, the classes' static fields are checked. Otherwise
		the classes' member fields are checked.

		If the field is found, it is returned. Otherwise if `c` has a super
		class, `findField` recursively checks that super class. Otherwise null
		is returned.

		If any argument is null, the result is unspecified.</haxe_doc>
		</findField>
		<haxe_doc>This class provides some utility methods to work with types. It is
	best used through 'using haxe.macro.TypeTools' syntax and then provides
	additional methods on haxe.macro.Type instances.</haxe_doc>
	</class>
	<class path="haxe.macro.TypedExprTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/macro/TypedExprTools.hx">
		<with set="method" line="33" static="1"><f a="e:?edef:?t">
	<t path="haxe.macro.TypedExpr"/>
	<e path="haxe.macro.TypedExprDef"/>
	<e path="haxe.macro.Type"/>
	<a>
		<t><x path="Null"><e path="haxe.macro.Type"/></x></t>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><x path="Null"><e path="haxe.macro.TypedExprDef"/></x></expr>
	</a>
</f></with>
		<map public="1" set="method" line="48" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</map>
		<iter public="1" set="method" line="85" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		See `haxe.macro.ExprTools.iter` for details on iterating expressions in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</iter>
		<mapWithType public="1" set="method" line="138" static="1">
			<f a="e:f:ft:fv">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<f a="">
					<e path="haxe.macro.Type"/>
					<e path="haxe.macro.Type"/>
				</f>
				<f a="">
					<t path="haxe.macro.TVar"/>
					<t path="haxe.macro.TVar"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.
		Additionally, types are mapped using `ft` and variables are mapped using
		`fv`.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</mapWithType>
		<haxe_doc>This class provides some utility methods to work with typed expressions.
	It is best used through 'using haxe.macro.TypedExprTools' syntax and then
	provides additional methods on `haxe.macro.TypedExpr` instances.</haxe_doc>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="String"/>
		<haxe_doc>The (dot-)path of the runtime type.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.FunctionArgument" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<value>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</value>
			<t><e path="haxe.rtti.CType"/></t>
			<opt><x path="Bool"/></opt>
			<name><c path="String"/></name>
		</a>
		<haxe_doc>The function argument runtime type information.</haxe_doc>
	</typedef>
	<enum path="haxe.rtti.CType" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="Array"><t path="haxe.rtti.FunctionArgument"/></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CAnonymous a="fields"><c path="Array"><t path="haxe.rtti.ClassField"/></c></CAnonymous>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CAbstract a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CAbstract>
		<haxe_doc>The runtime member types.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The path of the type.</haxe_doc>
			</path>
			<params>
				<c path="Array"><e path="haxe.rtti.CType"/></c>
				<haxe_doc>The array of parameters types.</haxe_doc>
			</params>
		</a>
		<haxe_doc>The type parameters in the runtime type information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>An array of strings representing the names of the type parameters the type
	has. As of Haxe 3.2.0, this does not include the constraints.</haxe_doc>
	</typedef>
	<enum path="haxe.rtti.Rights" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RCall a="m"><c path="String"/></RCall>
		<RMethod/>
		<RDynamic/>
		<RInline/>
		<haxe_doc>Represents the runtime rights of a type.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.MetaData" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><a>
	<params><c path="Array"><c path="String"/></c></params>
	<name><c path="String"/></name>
</a></c>
		<haxe_doc>The list of runtime metadata.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.ClassField" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the field.</haxe_doc>
			</type>
			<set>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [write access](https://haxe.org/manual/class-field-property.html#define-write-access)
		behavior of the field.</haxe_doc>
			</set>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the field is available.</haxe_doc>
			</platforms>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters
		the field has.</haxe_doc>
			</params>
			<overloads>
				<x path="Null"><c path="Array"><t path="haxe.rtti.ClassField"/></c></x>
				<haxe_doc>The list of available overloads for the fields or `null` if no overloads
		exists.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the field was annotated with.</haxe_doc>
			</meta>
			<line>
				<x path="Null"><x path="Int"/></x>
				<haxe_doc>The line number where the field is defined. This information is only
		available if the field has an expression.
		Otherwise the value is `null`.</haxe_doc>
			</line>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field is `public`.</haxe_doc>
			</isPublic>
			<isOverride>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field overrides another field.</haxe_doc>
			</isOverride>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field is `final`.</haxe_doc>
			</isFinal>
			<get>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [read access](https://haxe.org/manual/class-field-property.html#define-read-access)
		behavior of the field.</haxe_doc>
			</get>
			<expr>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The actual expression of the field or `null` if there is no expression.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the field. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or
		if the field has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc><![CDATA[The runtime class field information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#class-field-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The general runtime type information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<tdynamic>
				<x path="Null"><e path="haxe.rtti.CType"/></x>
				<haxe_doc>The type which is dynamically implemented by the class or `null` if no
		such type exists.</haxe_doc>
			</tdynamic>
			<superClass>
				<x path="Null"><t path="haxe.rtti.PathParams"/></x>
				<haxe_doc>The class' parent class defined by its type path and list of type
		parameters.</haxe_doc>
			</superClass>
			<statics>
				<c path="Array"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of static class fields.</haxe_doc>
			</statics>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is actually an [interface](https://haxe.org/manual/types-interfaces.html).</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is `final`.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><t path="haxe.rtti.PathParams"/></c>
				<haxe_doc>The list of interfaces defined by their type path and list of type
		parameters.</haxe_doc>
			</interfaces>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<fields>
				<c path="Array"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of member [class fields](https://haxe.org/manual/class-field.html).</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The runtime class definition information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the constructor is
		available.</haxe_doc>
			</platforms>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the constructor was annotated with.</haxe_doc>
			</meta>
			<doc>
				<c path="String"/>
				<haxe_doc>The documentation of the constructor. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<args>
				<x path="Null"><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></x>
				<haxe_doc>The list of arguments the constructor has or `null` if no arguments are
		available.</haxe_doc>
			</args>
		</a>
		<haxe_doc><![CDATA[The runtime enum constructor information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-constructor-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the enum is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<constructors>
				<c path="Array"><t path="haxe.rtti.EnumField"/></c>
				<haxe_doc>The list of enum constructors.</haxe_doc>
			</constructors>
		</a>
		<haxe_doc><![CDATA[The enum runtime type information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-type-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<types>
				<t path="Map">
					<c path="String"/>
					<e path="haxe.rtti.CType"/>
				</t>
				<haxe_doc>The types of the typedef, by platform.</haxe_doc>
			</types>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the typedef.</haxe_doc>
			</type>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The typedef runtime information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Abstractdef" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<to><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><x path="Null"><c path="String"/></x></field>
</a></c></to>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [`private`](https://haxe.org/manual/type-system-module-sub-types.html#define-private-type).</haxe_doc>
			</isPrivate>
			<impl><t path="haxe.rtti.Classdef"/></impl>
			<from><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><x path="Null"><c path="String"/></x></field>
</a></c></from>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<athis><e path="haxe.rtti.CType"/></athis>
		</a>
		<haxe_doc><![CDATA[The abstract type runtime information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#abstract-type-information>]]></haxe_doc>
	</typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TAbstractdecl a="a"><t path="haxe.rtti.Abstractdef"/></TAbstractdecl>
		<haxe_doc>The tree types of the runtime type.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		<haxe_doc>Array of `TypeTree`.</haxe_doc>
	</typedef>
	<class path="haxe.rtti.TypeApi" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="377" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="398" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the given `CType` is a variable or `false` if it is a
		function.</haxe_doc>
		</isVar>
		<leq params="T" set="method" line="405" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="leq.T"/></c>
	<c path="Array"><c path="leq.T"/></c>
	<x path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="425" static="1">
			<f a="r1:r2">
				<e path="haxe.rtti.Rights"/>
				<e path="haxe.rtti.Rights"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `r1 == r2`, this function performs a deep equality check on
		the given `Rights` instances.

		If `r1` or `r2` are `null`, the result is unspecified.</haxe_doc>
		</rightsEq>
		<typeEq public="1" set="method" line="446" static="1">
			<f a="t1:t2">
				<e path="haxe.rtti.CType"/>
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `t1 == t2`, this function performs a deep equality check on
		the given `CType` instances.

		If `t1` or `t2` are `null`, the result is unspecified.</haxe_doc>
		</typeEq>
		<fieldEq public="1" set="method" line="506" static="1">
			<f a="f1:f2">
				<t path="haxe.rtti.ClassField"/>
				<t path="haxe.rtti.ClassField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `f1 == f2`, this function performs a deep equality check on
		the given `ClassField` instances.

		If `f1` or `f2` are `null`, the result is unspecified.</haxe_doc>
		</fieldEq>
		<constructorEq public="1" set="method" line="532" static="1">
			<f a="c1:c2">
				<t path="haxe.rtti.EnumField"/>
				<t path="haxe.rtti.EnumField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `c1 == c2`, this function performs a deep equality check on
		the arguments of the enum constructors, if exists.

		If `c1` or `c2` are `null`, the result is unspecified.</haxe_doc>
		</constructorEq>
		<haxe_doc>Contains type and equality checks functionalities for RTTI.</haxe_doc>
	</class>
	<class path="haxe.rtti.CTypeTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<toString public="1" set="method" line="555" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the string representation of `CType`.</haxe_doc>
		</toString>
		<nameWithParams set="method" line="578" static="1"><f a="name:params">
	<c path="String"/>
	<c path="Array"><e path="haxe.rtti.CType"/></c>
	<c path="String"/>
</f></nameWithParams>
		<functionArgumentName set="method" line="585" static="1"><f a="arg">
	<t path="haxe.rtti.FunctionArgument"/>
	<c path="String"/>
</f></functionArgumentName>
		<classField set="method" line="592" static="1"><f a="cf">
	<t path="haxe.rtti.ClassField"/>
	<c path="String"/>
</f></classField>
		<haxe_doc>The `CTypeTools` class contains some extra functionalities for handling
	`CType` instances.</haxe_doc>
	</class>
	<typedef path="haxe.rtti._Meta.MetaObject" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/Meta.hx" private="1" module="haxe.rtti.Meta"><a>
	<statics>
		<x path="Null"><d><d><x path="Null"><c path="Array"><d/></c></x></d></d></x>
		<meta><m n=":optional"/></meta>
	</statics>
	<obj>
		<x path="Null"><d><x path="Null"><c path="Array"><d/></c></x></d></x>
		<meta><m n=":optional"/></meta>
	</obj>
	<fields>
		<x path="Null"><d><d><x path="Null"><c path="Array"><d/></c></x></d></d></x>
		<meta><m n=":optional"/></meta>
	</fields>
</a></typedef>
	<class path="haxe.rtti.Meta" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="40" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given type (class or enum)</haxe_doc>
		</getType>
		<isInterface set="method" line="46" static="1"><f a="t">
	<d/>
	<x path="Bool"/>
</f></isInterface>
		<getMeta set="method" line="56" static="1">
			<f a="t">
				<d/>
				<t path="haxe.rtti._Meta.MetaObject"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getMeta>
		<getStatics public="1" set="method" line="81" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class static fields</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="89" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc><![CDATA[An API to access classes and enums metadata at runtime.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.rtti.Rtti" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/Rtti.hx">
		<getRtti public="1" params="T" set="method" line="41" static="1">
			<f a="c">
				<x path="Class"><c path="getRtti.T"/></x>
				<t path="haxe.rtti.Classdef"/>
			</f>
			<haxe_doc>Returns the `haxe.rtti.CType.Classdef` corresponding to class `c`.

		If `c` has no runtime type information, e.g. because no `@:rtti` was
		added, an exception of type `String` is thrown.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getRtti>
		<hasRtti public="1" params="T" set="method" line="61" static="1">
			<f a="c">
				<x path="Class"><c path="hasRtti.T"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `c` has runtime type information.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</hasRtti>
		<haxe_doc><![CDATA[Rtti is a helper class which supplements the `@:rtti` metadata.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="/home/runner/work/haxe/haxe/std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="43"><f a="?l">
	<x path="Null"><t path="haxe.rtti.TypeRoot"/></x>
	<x path="Void"/>
</f></sort>
		<sortFields set="method" line="72"><f a="a">
	<c path="Array"><t path="haxe.rtti.ClassField"/></c>
	<x path="Void"/>
</f></sortFields>
		<process public="1" set="method" line="90"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></process>
		<mergeRights set="method" line="96"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeRights>
		<mergeDoc set="method" line="105"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeDoc>
		<mergeFields set="method" line="113"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeFields>
		<newField public="1" set="dynamic" line="118"><f a="c:f">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Void"/>
</f></newField>
		<mergeClasses set="method" line="120"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<x path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="158"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<x path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="178"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<x path="Bool"/>
</f></mergeTypedefs>
		<mergeAbstracts set="method" line="186"><f a="a:a2">
	<t path="haxe.rtti.Abstractdef"/>
	<t path="haxe.rtti.Abstractdef"/>
	<x path="Bool"/>
</f></mergeAbstracts>
		<merge set="method" line="203"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<x path="Void"/>
</f></merge>
		<mkPath set="method" line="295"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="299"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="306"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="316"><f a="c">
	<x path="haxe.xml.Access"/>
	<d/>
</f></xerror>
		<xroot set="method" line="320"><f a="x">
	<x path="haxe.xml.Access"/>
	<x path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="325"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xmeta set="method" line="336"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.MetaData"/>
</f></xmeta>
		<xoverloads set="method" line="347"><f a="x">
	<x path="haxe.xml.Access"/>
	<c path="Array"><t path="haxe.rtti.ClassField"/></c>
</f></xoverloads>
		<xpath set="method" line="355"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="366"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="417">
			<f a="x:?defPublic" v=":false">
				<x path="haxe.xml.Access"/>
				<x path="Bool"/>
				<t path="haxe.rtti.ClassField"/>
			</f>
			<meta><m n=":value"><e>{ defPublic : false }</e></m></meta>
		</xclassfield>
		<xenum set="method" line="446"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="471"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xabstract set="method" line="502"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Abstractdef"/>
</f></xabstract>
		<xtypedef set="method" line="540"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="568"><f a="x">
	<x path="haxe.xml.Access"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="624"><f a="x">
	<x path="haxe.xml.Access"/>
	<c path="Array"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="631"><f a=""><c path="Array"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="39"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[XmlParser processes the runtime type information (RTTI) which
	is stored as a XML string in a static field `__rtti`.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<abstract path="haxe.xml._Access.NodeAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="27" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="haxe.xml.Access"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="27" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="haxe.xml.Access"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class>
	<abstract path="haxe.xml._Access.AttribAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
	<resolve public="1" set="method" line="39" static="1">
		<f a="this:name">
			<c path="Xml"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":op"><e>a.b</e></m></meta>
	</resolve>
	<_hx_set set="method" line="49" static="1">
		<f a="this:name:value">
			<c path="Xml"/>
			<c path="String"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":op"><e>a.b</e></m></meta>
	</_hx_set>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
		<resolve public="1" set="method" line="39" static="1">
			<f a="this:name">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":op"><e>a.b</e></m></meta>
		</resolve>
		<_hx_set set="method" line="49" static="1">
			<f a="this:name:value">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":op"><e>a.b</e></m></meta>
		</_hx_set>
	</class>
	<abstract path="haxe.xml._Access.HasAttribAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="59" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="59" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class>
	<abstract path="haxe.xml._Access.HasNodeAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.HasNodeAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="68" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.HasNodeAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="68" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class>
	<abstract path="haxe.xml._Access.NodeListAccess" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.NodeListAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="75" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<c path="Array"><x path="haxe.xml.Access"/></c>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.NodeListAccess_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1"><resolve public="1" set="method" line="75" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<c path="Array"><x path="haxe.xml.Access"/></c>
	</f>
	<meta><m n=":op"><e>a.b</e></m></meta>
</resolve></class>
	<abstract path="haxe.xml.Access" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx">
		<this><c path="Xml"/></this>
		<haxe_doc>The `haxe.xml.Access` API helps providing a fast dot-syntax access to the
	most common `Xml` methods.</haxe_doc>
		<impl><class path="haxe.xml._Access.Access_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
	<x public="1" get="accessor" set="null" static="1"><c path="Xml"/></x>
	<get_x public="1" get="inline" set="null" line="91" static="1"><f a="this">
	<c path="Xml"/>
	<c path="Xml"/>
</f></get_x>
	<name public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
	</name>
	<get_name get="inline" set="null" line="98" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_name>
	<innerData public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
	</innerData>
	<innerHTML public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
	</innerHTML>
	<node public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.NodeAccess"/>
		<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var access = new haxe.xml.Access(Xml.parse("<user><name>John</name></user>"));
		var user = access.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
	</node>
	<get_node get="inline" set="null" line="134" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.NodeAccess"/>
</f></get_node>
	<nodes public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.NodeListAccess"/>
		<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Access(Xml.parse("
			<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
			</users>"
		));

		var users = fast.node.users;
		for (user in users.nodes.user) {
			trace(user.att.name);
		}
		```]]></haxe_doc>
	</nodes>
	<get_nodes get="inline" set="null" line="156" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.NodeListAccess"/>
</f></get_nodes>
	<att public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.AttribAccess"/>
		<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
	</att>
	<get_att get="inline" set="null" line="175" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.AttribAccess"/>
</f></get_att>
	<has public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.HasAttribAccess"/>
		<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
	</has>
	<get_has get="inline" set="null" line="183" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.HasAttribAccess"/>
</f></get_has>
	<hasNode public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.HasNodeAccess"/>
		<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
	</hasNode>
	<get_hasNode get="inline" set="null" line="199" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.HasNodeAccess"/>
</f></get_hasNode>
	<elements public="1" get="accessor" set="null" static="1">
		<t path="Iterator"><x path="haxe.xml.Access"/></t>
		<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
	</elements>
	<get_elements get="inline" set="null" line="207" static="1"><f a="this">
	<c path="Xml"/>
	<t path="Iterator"><x path="haxe.xml.Access"/></t>
</f></get_elements>
	<_new public="1" get="inline" set="null" line="209" static="1">
		<f a="x">
			<c path="Xml"/>
			<x path="haxe.xml.Access"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_innerData set="method" line="215" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_innerData>
	<get_innerHTML set="method" line="237" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_innerHTML>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.Access_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access" final="1">
		<x public="1" get="accessor" set="null" static="1"><c path="Xml"/></x>
		<get_x public="1" get="inline" set="null" line="91" static="1"><f a="this">
	<c path="Xml"/>
	<c path="Xml"/>
</f></get_x>
		<name public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
		</name>
		<get_name get="inline" set="null" line="98" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_name>
		<innerData public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
		</innerData>
		<innerHTML public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
		</innerHTML>
		<node public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.NodeAccess"/>
			<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var access = new haxe.xml.Access(Xml.parse("<user><name>John</name></user>"));
		var user = access.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
		</node>
		<get_node get="inline" set="null" line="134" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.NodeAccess"/>
</f></get_node>
		<nodes public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.NodeListAccess"/>
			<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Access(Xml.parse("
			<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
			</users>"
		));

		var users = fast.node.users;
		for (user in users.nodes.user) {
			trace(user.att.name);
		}
		```]]></haxe_doc>
		</nodes>
		<get_nodes get="inline" set="null" line="156" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.NodeListAccess"/>
</f></get_nodes>
		<att public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.AttribAccess"/>
			<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
		</att>
		<get_att get="inline" set="null" line="175" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.AttribAccess"/>
</f></get_att>
		<has public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.HasAttribAccess"/>
			<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
		</has>
		<get_has get="inline" set="null" line="183" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.HasAttribAccess"/>
</f></get_has>
		<hasNode public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.HasNodeAccess"/>
			<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
		</hasNode>
		<get_hasNode get="inline" set="null" line="199" static="1"><f a="this">
	<c path="Xml"/>
	<x path="haxe.xml._Access.HasNodeAccess"/>
</f></get_hasNode>
		<elements public="1" get="accessor" set="null" static="1">
			<t path="Iterator"><x path="haxe.xml.Access"/></t>
			<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
		</elements>
		<get_elements get="inline" set="null" line="207" static="1"><f a="this">
	<c path="Xml"/>
	<t path="Iterator"><x path="haxe.xml.Access"/></t>
</f></get_elements>
		<_new public="1" get="inline" set="null" line="209" static="1">
			<f a="x">
				<c path="Xml"/>
				<x path="haxe.xml.Access"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_innerData set="method" line="215" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_innerData>
		<get_innerHTML set="method" line="237" static="1"><f a="this">
	<c path="Xml"/>
	<c path="String"/>
</f></get_innerHTML>
	</class>
	<enum path="haxe.xml.Filter" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<FInt/>
		<FBool/>
		<FEnum a="values"><c path="Array"><c path="String"/></c></FEnum>
		<FReg a="matcher"><c path="EReg"/></FReg>
	</enum>
	<enum path="haxe.xml.Attrib" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check"><Att a="name:?filter:?defvalue">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<c path="String"/>
</Att></enum>
	<enum path="haxe.xml.Rule" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<RNode a="name:?attribs:?childs">
			<c path="String"/>
			<c path="Array"><e path="haxe.xml.Attrib"/></c>
			<e path="haxe.xml.Rule"/>
		</RNode>
		<RData a="?filter"><e path="haxe.xml.Filter"/></RData>
		<RMulti a="rule:?atLeastOne">
			<e path="haxe.xml.Rule"/>
			<x path="Bool"/>
		</RMulti>
		<RList a="rules:?ordered">
			<c path="Array"><e path="haxe.xml.Rule"/></c>
			<x path="Bool"/>
		</RList>
		<RChoice a="choices"><c path="Array"><e path="haxe.xml.Rule"/></c></RChoice>
		<ROptional a="rule"><e path="haxe.xml.Rule"/></ROptional>
	</enum>
	<enum path="haxe.xml._Check.CheckResult" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx" private="1" module="haxe.xml.Check">
		<CMatch/>
		<CMissing a="r"><e path="haxe.xml.Rule"/></CMissing>
		<CExtra a="x"><c path="Xml"/></CExtra>
		<CElementExpected a="name:x">
			<c path="String"/>
			<c path="Xml"/>
		</CElementExpected>
		<CDataExpected a="x"><c path="Xml"/></CDataExpected>
		<CExtraAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CExtraAttrib>
		<CMissingAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CMissingAttrib>
		<CInvalidAttrib a="att:x:f">
			<c path="String"/>
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidAttrib>
		<CInvalidData a="x:f">
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidData>
		<CInElement a="x:r">
			<c path="Xml"/>
			<e path="haxe.xml._Check.CheckResult"/>
		</CInElement>
	</enum>
	<class path="haxe.xml.Check" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Check.hx">
		<blanks expr="~/^[ 
	]*$/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ 
	]*$/</e></m></meta>
		</blanks>
		<isBlank set="method" line="61" static="1"><f a="x">
	<c path="Xml"/>
	<x path="Bool"/>
</f></isBlank>
		<filterMatch set="method" line="65" static="1"><f a="s:f">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<x path="Bool"/>
</f></filterMatch>
		<isNullable set="method" line="81" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<x path="Bool"/>
</f></isNullable>
		<check set="method" line="104" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></check>
		<checkList set="method" line="169" static="1"><f a="it:r">
	<t path="Iterator"><c path="Xml"/></t>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></checkList>
		<makeWhere set="method" line="242" static="1"><f a="path">
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeWhere>
		<makeString set="method" line="257" static="1"><f a="x">
	<c path="Xml"/>
	<c path="String"/>
</f></makeString>
		<makeRule set="method" line="266" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<c path="String"/>
</f></makeRule>
		<makeError set="method" line="283" static="1"><f a="m:?path">
	<e path="haxe.xml._Check.CheckResult"/>
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeError>
		<checkNode public="1" set="method" line="314" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkNode>
		<checkDocument public="1" set="method" line="321" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkDocument>
	</class>
	<typedef path="haxe.xml.Fast" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Fast.hx">
		<x path="haxe.xml.Access"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<abstract path="haxe.xml._Parser.S" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.xml._Parser.S_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1" final="1">
	<IGNORE_SPACES public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</IGNORE_SPACES>
	<BEGIN public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BEGIN>
	<BEGIN_NODE public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BEGIN_NODE>
	<TAG_NAME public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</TAG_NAME>
	<BODY public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</BODY>
	<ATTRIB_NAME public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ATTRIB_NAME>
	<EQUALS public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</EQUALS>
	<ATTVAL_BEGIN public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ATTVAL_BEGIN>
	<ATTRIB_VAL public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ATTRIB_VAL>
	<CHILDS public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CHILDS>
	<CLOSE public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CLOSE>
	<WAIT_END public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WAIT_END>
	<WAIT_END_RET public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</WAIT_END_RET>
	<PCDATA public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</PCDATA>
	<HEADER public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</HEADER>
	<COMMENT public="1" get="inline" set="null" expr="cast 15" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</COMMENT>
	<DOCTYPE public="1" get="inline" set="null" expr="cast 16" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</DOCTYPE>
	<CDATA public="1" get="inline" set="null" expr="cast 17" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</CDATA>
	<ESCAPE public="1" get="inline" set="null" expr="cast 18" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":impl"/>
			<m n=":enum"/>
		</meta>
	</ESCAPE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Parser.S_Impl_" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1" final="1">
		<IGNORE_SPACES public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</IGNORE_SPACES>
		<BEGIN public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BEGIN>
		<BEGIN_NODE public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BEGIN_NODE>
		<TAG_NAME public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</TAG_NAME>
		<BODY public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</BODY>
		<ATTRIB_NAME public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ATTRIB_NAME>
		<EQUALS public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</EQUALS>
		<ATTVAL_BEGIN public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ATTVAL_BEGIN>
		<ATTRIB_VAL public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ATTRIB_VAL>
		<CHILDS public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CHILDS>
		<CLOSE public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CLOSE>
		<WAIT_END public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WAIT_END>
		<WAIT_END_RET public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</WAIT_END_RET>
		<PCDATA public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</PCDATA>
		<HEADER public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</HEADER>
		<COMMENT public="1" get="inline" set="null" expr="cast 15" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</COMMENT>
		<DOCTYPE public="1" get="inline" set="null" expr="cast 16" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</DOCTYPE>
		<CDATA public="1" get="inline" set="null" expr="cast 17" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</CDATA>
		<ESCAPE public="1" get="inline" set="null" expr="cast 18" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":impl"/>
				<m n=":enum"/>
			</meta>
		</ESCAPE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.xml.XmlParserException" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx" module="haxe.xml.Parser">
		<message public="1">
			<c path="String"/>
			<haxe_doc>the XML parsing error message</haxe_doc>
		</message>
		<lineNumber public="1">
			<x path="Int"/>
			<haxe_doc>the line number at which the XML parsing error occurred</haxe_doc>
		</lineNumber>
		<positionAtLine public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the reported line at which the parsing error occurred</haxe_doc>
		</positionAtLine>
		<position public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the XML string at which the parsing error occurred</haxe_doc>
		</position>
		<xml public="1">
			<c path="String"/>
			<haxe_doc>the invalid XML string</haxe_doc>
		</xml>
		<toString public="1" set="method" line="94"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="75"><f a="message:xml:position">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.xml.Parser" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Parser.hx">
		<escapes expr="{
	var h = new haxe.ds.StringMap();
	h.set(&quot;lt&quot;, &quot;&lt;&quot;);
	h.set(&quot;gt&quot;, &quot;&gt;&quot;);
	h.set(&quot;amp&quot;, &quot;&amp;&quot;);
	h.set(&quot;quot&quot;, &quot;\&quot;&quot;);
	h.set(&quot;apos&quot;, &quot;&apos;&quot;);
	h;
}" line="100" static="1">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[{
	var h = new haxe.ds.StringMap();
	h.set("lt", "<");
	h.set("gt", ">");
	h.set("amp", "&");
	h.set("quot", "\"");
	h.set("apos", "'");
	h;
}]]></e></m></meta>
		</escapes>
		<parse public="1" set="method" line="115" static="1">
			<f a="str:?strict" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":value"><e>{ strict : false }</e></m></meta>
			<haxe_doc>Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.

		@throws haxe.xml.XmlParserException</haxe_doc>
		</parse>
		<doParse set="method" line="121" static="1">
			<f a="str:strict:?p:?parent" v="::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="Xml"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ p : 0 }</e></m></meta>
		</doParse>
		<isValidChar get="inline" set="null" line="415" static="1"><f a="c">
	<x path="Int"/>
	<x path="Bool"/>
</f></isValidChar>
	</class>
	<class path="haxe.xml.Printer" params="" file="/home/runner/work/haxe/haxe/std/haxe/xml/Printer.hx">
		<print public="1" set="method" line="35" static="1">
			<f a="xml:?pretty" v=":false">
				<c path="Xml"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pretty : false }</e></m></meta>
			<haxe_doc>Convert `Xml` to string representation.

		Set `pretty` to `true` to prettify the result.</haxe_doc>
		</print>
		<output><c path="StringBuf"/></output>
		<pretty><x path="Bool"/></pretty>
		<writeNode set="method" line="49"><f a="value:tabs">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeNode>
		<write get="inline" set="null" line="104"><f a="input">
	<c path="String"/>
	<x path="Void"/>
</f></write>
		<newline get="inline" set="null" line="108"><f a=""><x path="Void"/></f></newline>
		<hasChildren set="method" line="114"><f a="value">
	<c path="Xml"/>
	<x path="Bool"/>
</f></hasChildren>
		<new set="method" line="44"><f a="pretty">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class provides utility methods to convert Xml instances to
	String representation.</haxe_doc>
	</class>
	<class path="haxe.zip.Compress" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/zip/Compress.hx">
		<run public="1" set="method" line="39" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method" line="31"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="35"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="37"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="27"><f a="level">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="haxe.zip.ExtraField" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Entry.hx" module="haxe.zip.Entry">
		<FUnknown a="tag:bytes">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</FUnknown>
		<FInfoZipUnicodePath a="name:crc">
			<c path="String"/>
			<x path="Int"/>
		</FInfoZipUnicodePath>
		<FUtf8/>
	</enum>
	<typedef path="haxe.zip.Entry" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Entry.hx"><a>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<extraFields>
		<x path="Null"><c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c></x>
		<meta><m n=":optional"/></meta>
	</extraFields>
	<dataSize><x path="Int"/></dataSize>
	<data><x path="Null"><c path="haxe.io.Bytes"/></x></data>
	<crc32><x path="Null"><x path="Int"/></x></crc32>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<enum path="haxe.zip.FlushMode" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/FlushMode.hx">
		<NO/>
		<SYNC/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.zip.Huffman" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="haxe.zip.Huffman"/>
			<e path="haxe.zip.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="haxe.zip.Huffman"/></c>
		</NeedBits>
	</enum>
	<class path="haxe.zip.HuffTools" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Huffman.hx" module="haxe.zip.Huffman">
		<treeDepth set="method" line="34"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="45"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<e path="haxe.zip.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="62"><f a="table:p:cd:d:t">
	<c path="Array"><e path="haxe.zip.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="75"><f a="bits:maxbits:v:len">
	<c path="haxe.ds.IntMap"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="86"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></make>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.zip._InflateImpl.Window" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<SIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 15" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 15]]></e></m></meta>
		</SIZE>
		<BUFSIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 16" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 16]]></e></m></meta>
		</BUFSIZE>
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="haxe.crypto.Adler32"/></crc>
		<slide public="1" set="method" line="44"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="53"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="60"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="67"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="71"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="75"><f a=""><c path="haxe.crypto.Adler32"/></f></checksum>
		<new public="1" set="method" line="37"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip._InflateImpl.State" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.zip.InflateImpl" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]" line="97" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]</e></m></meta>
		</LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL expr="[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]" line="100" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]</e></m></meta>
		</LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]" line="103" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]</e></m></meta>
		</DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL expr="[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]" line="106" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]</e></m></meta>
		</DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS expr="[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]" line="109" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]</e></m></meta>
		</CODE_LENGTHS_POS>
		<FIXED_HUFFMAN expr="null" line="127" static="1">
			<x path="Null"><e path="haxe.zip.Huffman"/></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</FIXED_HUFFMAN>
		<run public="1" set="method" line="388" static="1">
			<f a="i:?bufsize" v=":65536">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ bufsize : 65536 }</e></m></meta>
		</run>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="haxe.zip._InflateImpl.State"/></state>
		<isFinal><x path="Bool"/></isFinal>
		<huffman><e path="haxe.zip.Huffman"/></huffman>
		<huffdist><x path="Null"><e path="haxe.zip.Huffman"/></x></huffdist>
		<htools><c path="haxe.zip.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="haxe.zip._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="149"><f a=""><x path="Null"><e path="haxe.zip.Huffman"/></x></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="159"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="168"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="179"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="190"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="199"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="204"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="211"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="218"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="224"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="228"><f a="h">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="236"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="268"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="129">
			<f a="i:?header:?crc" v=":true:true">
				<c path="haxe.io.Input"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ crc : true, header : true }</e></m></meta>
		</new>
		<haxe_doc>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</haxe_doc>
	</class>
	<class path="haxe.zip.Reader" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Reader.hx">
		<readZip public="1" set="method" line="194" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c>
</f></readZip>
		<unzip public="1" set="method" line="199" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Null"><c path="haxe.io.Bytes"/></x>
</f></unzip>
		<i><c path="haxe.io.Input"/></i>
		<readZipDate set="method" line="36"><f a=""><c path="Date"/></f></readZipDate>
		<readExtraFields set="method" line="48"><f a="length">
	<x path="Int"/>
	<c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c>
</f></readExtraFields>
		<readEntryHeader public="1" set="method" line="78"><f a=""><t path="haxe.zip.Entry"/></f></readEntryHeader>
		<read public="1" set="method" line="121"><f a=""><c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c></f></read>
		<new public="1" set="method" line="32"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Tools" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Tools.hx">
		<compress public="1" set="method" line="26" static="1"><f a="f:level">
	<t path="haxe.zip.Entry"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compress>
		<uncompress public="1" set="method" line="38" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></uncompress>
	</class>
	<class path="haxe.zip.Uncompress" params="" file="/home/runner/work/haxe/haxe/std/flash/_std/haxe/zip/Uncompress.hx">
		<run public="1" set="method" line="39" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method" line="31"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="35"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="37"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="27"><f a="?windowBits">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.zip.Writer" params="" file="/home/runner/work/haxe/haxe/std/haxe/zip/Writer.hx">
		<CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE get="inline" set="null" expr="46" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
			<haxe_doc>The next constant is required for computing the Central
		Directory Record(CDR) size. CDR consists of some fields
		of constant size and a filename. Constant represents
		total length of all fields with constant size for each
		file in archive</haxe_doc>
		</CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE>
		<LOCAL_FILE_HEADER_FIELDS_SIZE get="inline" set="null" expr="30" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
			<haxe_doc>The following constant is the total size of all fields
		of Local File Header. It's required for calculating
		offset of start of central directory record</haxe_doc>
		</LOCAL_FILE_HEADER_FIELDS_SIZE>
		<o><c path="haxe.io.Output"/></o>
		<files><c path="haxe.ds.List"><a>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
	<fields><c path="haxe.io.Bytes"/></fields>
	<date><c path="Date"/></date>
	<crc><x path="Int"/></crc>
	<compressed><x path="Bool"/></compressed>
	<clen><x path="Int"/></clen>
</a></c></files>
		<writeZipDate set="method" line="60"><f a="date">
	<c path="Date"/>
	<x path="Void"/>
</f></writeZipDate>
		<writeEntryHeader public="1" set="method" line="71"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></writeEntryHeader>
		<write public="1" set="method" line="141"><f a="files">
	<c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c>
	<x path="Void"/>
</f></write>
		<writeCDR public="1" set="method" line="149"><f a=""><x path="Void"/></f></writeCDR>
		<new public="1" set="method" line="55"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
</haxe>